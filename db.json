{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/avator.png","path":"img/avator.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0ddec83146e897a21a84837db17fe78e1235f9fd","modified":1641721410802},{"_id":"source/archives/index.md","hash":"48a8c6149085940ce0706c2d8cd5efc4606bdec6","modified":1616212573023},{"_id":"source/tags/index-1.md","hash":"a757bb59b90734987feb65998f4d416276252d2c","modified":1616212481066},{"_id":"source/tags/index.md","hash":"ed49c4e6c4204d89e0c5838479e499e795c334d7","modified":1599290835590},{"_id":"source/categories/index-1.md","hash":"99e4ac4fde62b04081c73b9e51ba2a168a67587c","modified":1616212474907},{"_id":"source/categories/index.md","hash":"85bf8b8d10fc11464413d4aebbf69db8588832d7","modified":1599290835590},{"_id":"source/_posts/.DS_Store","hash":"46841634182ea15810c4f08708c6a0fd4e199408","modified":1641721702958},{"_id":"source/_posts/Redis内存模型.md","hash":"5a2a39d83317fbe27edaf507b28947d6e9c6c021","modified":1618839984070},{"_id":"source/_posts/Redis基础知识.md","hash":"935f97fcc2899452dc35eeb75f5f493d4f9a05fb","modified":1622973535391},{"_id":"source/_posts/docker方式部署kafka集群.md","hash":"9062a965a03928a7ccc1eb9e659a5d154162c60d","modified":1619953084916},{"_id":"source/_posts/docker方式部署zookeeper集群.md","hash":"f5df7fd59a11fdf5d9d5fac06fe464a99ef03fee","modified":1618633602786},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布.md","hash":"e4a37b897e59ca81b31b7e3e6bf6d77138effaf7","modified":1616230531405},{"_id":"source/_posts/kafka常用命令操作.md","hash":"596a0e9c72b1c39fe22a3a256b475d964a958927","modified":1618632591959},{"_id":"source/_posts/kubeadm部署k8s-1-18集群.md","hash":"6baf39a4a469fb457b25e184a911eb1ec5290438","modified":1616915020676},{"_id":"source/_posts/redis数据持久化方案.md","hash":"a63ed0b07505985c2ecb58e9787ba454370a47ee","modified":1618839984073},{"_id":"source/_posts/yum和源码方式部署redis.md","hash":"1f9d9f6f2bf95be9ca90deb57250cb18bdc6b946","modified":1619953007615},{"_id":"source/_posts/zookeeper常用命令行操作.md","hash":"8c96003dc801b26069604173588f2558c9d495e7","modified":1618633067941},{"_id":"source/_posts/主从复制.md","hash":"125d9fdba3694bdbc9f3c4be6d910ac140925ded","modified":1618839984073},{"_id":"source/_posts/二进制方式部署kafka集群.md","hash":"1213ddc60371225e182f5f2938dacf6fc2460e76","modified":1619953590167},{"_id":"source/_posts/二进制方式部署kubernetes-1-20.md","hash":"e3aa9db684218c79e20c54af0ee8f63e8320426d","modified":1618117268893},{"_id":"source/_posts/使用k3d和traefik快速搭建开发环境.md","hash":"432601e0e441bc585ff72141ca466c8a346bd0b5","modified":1616915476288},{"_id":"source/_posts/升级集群到1-18.md","hash":"dc91f5eff42fefebcb9f75813525485163232e01","modified":1618275590041},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集.md","hash":"3396ad4e5597848a267068bbe6e26235e3b06085","modified":1616822412991},{"_id":"source/_posts/在k8s中使用nfs存储.md","hash":"3fada31803422f9796cceb3dc7cc1b5a6e4c49d1","modified":1616506490484},{"_id":"source/_posts/在k8s中部署Mysql单实例.md","hash":"e8cc0a53ecaa4b1b71351390146b5c28fe24eacc","modified":1616319932026},{"_id":"source/_posts/在k8s中部署RabbitMQ.md","hash":"bc1e6bb9f515c0830ad7d8c3afdeb5fa4f0199fe","modified":1616224573580},{"_id":"source/_posts/在k8s中部署mysql主从集群.md","hash":"52e8976e567cdfe48525a1250c6ac772f352cd58","modified":1616241766706},{"_id":"source/_posts/在k8s中部署redis集群.md","hash":"3dd0eecf2613ce023c900f4c29fa1d42d83f12a9","modified":1616241007951},{"_id":"source/_posts/常见类型命令操作.md","hash":"c713acb69cdb351dc3287b145a6239e93332b104","modified":1618839984074},{"_id":"source/_posts/部署Ingress.md","hash":"f2276e7eb979ddb5b85a95ee4784dc46b771efa7","modified":1616225614178},{"_id":"source/_posts/部署Mysql5-7.md","hash":"647ed988a939a6ee50d9243b356d4488ce130c45","modified":1616319551608},{"_id":"source/_posts/部署Nginx.md","hash":"9a8fa60fc57d613c0bcca5f41745d996fda61b91","modified":1618275270583},{"_id":"source/_posts/部署docker-ce.md","hash":"a6b54fcb36bf150aa8554e22167d80bb9252ee3e","modified":1617609173516},{"_id":"source/_posts/部署harbor镜像仓库.md","hash":"0d58b81e616da19156aa3c5c707f5d191468c420","modified":1617610101874},{"_id":"source/_posts/部署nfs存储.md","hash":"9797bef6ce4d8897cf7e64cce164dacf17739ccc","modified":1616507032510},{"_id":"source/_posts/部署zookeeper集群.md","hash":"1abf79e5c50c7bf884ae3a6367ab0eb1afa6c5d7","modified":1618633502709},{"_id":"source/_posts/部署单点zookeeper.md","hash":"4a9736581420a63e49ba148b2e56c643315972c0","modified":1617692911130},{"_id":"source/_posts/部署单节点kafka.md","hash":"15afb45e10f93c281fe92e970a31abd95c6cd4c2","modified":1619953084916},{"_id":"source/_posts/Redis内存模型/.DS_Store","hash":"435998e2169ee6a03053bea95b580e3289b07c66","modified":1618839984070},{"_id":"source/_posts/Redis内存模型/mem-detail.png","hash":"aefcba568f3e779e7fab01300c11cffca14b375f","modified":1618839984072},{"_id":"source/_posts/Redis基础知识/.DS_Store","hash":"ecb8624b66bf89e2e2b42352bb8312f55644e993","modified":1618839984072},{"_id":"source/_posts/Redis基础知识/aof.svg","hash":"3d462df310d4140b5c04004892fc3dea2459d4c4","modified":1618839984073},{"_id":"source/_posts/Redis基础知识/rdb.svg","hash":"4ddf0d4d5ff37f681334ff7334dc3a66c0e80ba6","modified":1618839984073},{"_id":"source/_posts/docker方式部署kafka集群/.DS_Store","hash":"0f233810ad65538447f51275a93affc2401a9109","modified":1618633985126},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/.DS_Store","hash":"002ce977906d0a025513c9da8f36d84fa476de17","modified":1616913161946},{"_id":"source/_posts/zookeeper常用命令行操作/.DS_Store","hash":"37a135807012abb110cf00d5d290fe966f8c1096","modified":1618632900725},{"_id":"source/_posts/使用k3d和traefik快速搭建开发环境/.DS_Store","hash":"1b22ac77c91f2d8f21b80806c73e6a92ab72de56","modified":1616915106682},{"_id":"source/_posts/升级集群到1-18/.DS_Store","hash":"31f05fa5323884637436daa19051f0db28906649","modified":1618275030237},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/.DS_Store","hash":"38249157287b1a9ea5840944392b7ffda97fdc51","modified":1616822536649},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/add-cluster-1.png","hash":"42dcdd324f050f3db4502b034cc8c43c5336b2db","modified":1599290835413},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/add-cluster-2.png","hash":"1b9de318aa257d11f94f4b6ba965d7573bc78610","modified":1599290835413},{"_id":"source/_posts/在k8s中使用nfs存储/.DS_Store","hash":"c8c4336d2f6dc7372969949c598dba7490fceb36","modified":1616505751008},{"_id":"source/_posts/在k8s中部署RabbitMQ/.DS_Store","hash":"4e64f1ac8566a9d3dc317186d770d52fcdb34144","modified":1616224447450},{"_id":"source/_posts/常见类型命令操作/.DS_Store","hash":"973c652ab0b348cda96471a98c657e81dd321e22","modified":1618839984074},{"_id":"source/_posts/常见类型命令操作/zcard.png","hash":"f0fbd8161fac2f4e48f945cb18939501343e49b1","modified":1618839984111},{"_id":"source/_posts/部署Nginx/.DS_Store","hash":"c82970566dfd3f413e6d47a36bd040fec5ff8534","modified":1618274408047},{"_id":"source/_posts/部署docker-ce/.DS_Store","hash":"21874e893f60c130aba40860b67fdb6fd20056ee","modified":1617608918805},{"_id":"source/_posts/部署harbor镜像仓库/.DS_Store","hash":"7f3c04cfbaafd24fd783aea86ee6974be4c5025c","modified":1617609290100},{"_id":"source/_posts/部署harbor镜像仓库/create-user.png","hash":"f75c209500395f7b6e6bbbef29d549289e39a3b2","modified":1599290835570},{"_id":"source/_posts/部署harbor镜像仓库/create.png","hash":"0a05e0a64c5bea9574e23e55de01dd1ff5003015","modified":1599290835570},{"_id":"source/_posts/部署harbor镜像仓库/harbor-login.png","hash":"23c85d368e48163f874e45c89983c759c4346460","modified":1599290835570},{"_id":"source/_posts/部署harbor镜像仓库/upload-image.png","hash":"25f96e2071491cc9dff09777d6cbad204962c28c","modified":1599290835570},{"_id":"source/_posts/部署单点zookeeper/.DS_Store","hash":"b06a7495293cba293b2573d4549ee1dc1a48645d","modified":1617692893579},{"_id":"source/_posts/Redis内存模型/jmealloc.png","hash":"07f617f356ce777d0abd01771ba1fcafbd78c653","modified":1618839984071},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/calico-ip.png","hash":"09ce9a83c995cb0c4d555ddf2ece17500adec831","modified":1599290835453},{"_id":"source/_posts/zookeeper常用命令行操作/ls.png","hash":"6c48f4abd0ffb87815ef510d6656158521b3adb4","modified":1607767820992},{"_id":"source/_posts/使用k3d和traefik快速搭建开发环境/dashboard.png","hash":"815b2c8d2904b01bba2daa98e2139704c24163bf","modified":1605329532837},{"_id":"source/_posts/使用k3d和traefik快速搭建开发环境/whoami.png","hash":"b39c70e56e5a62cad769d211027c0a8aee20551b","modified":1605330477606},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/configmap.png","hash":"6eaaf553c9288b6be7d7b30f51d016dc41dc191b","modified":1599290835424},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/logstash-pod.png","hash":"3b98ea318afe0f720884d37dedf3115caf97a67e","modified":1599290835425},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/pod.png","hash":"451787216850a069ced1278fd42c1d37bea6f217","modified":1599290835418},{"_id":"source/_posts/在k8s中使用nfs存储/pod-nfs-svc.png","hash":"14df383bb1a39f069a6a41c66c590dfaf7862024","modified":1599290835479},{"_id":"source/_posts/在k8s中使用nfs存储/pod-nfs-test.png","hash":"6c44a178fe6f673ea72649b02bbc235588527369","modified":1599290835480},{"_id":"source/_posts/在k8s中使用nfs存储/pod-nfs.png","hash":"f58f243592d8fb36010961dd21acfa67a7c016e3","modified":1599290835481},{"_id":"source/_posts/在k8s中使用nfs存储/pv.png","hash":"e34c9983e81419e8457171f090588398b4eb619c","modified":1599290835482},{"_id":"source/_posts/在k8s中使用nfs存储/pvc-nginx.png","hash":"1d66319a61690cbe6a845474238060a4dc27e1e5","modified":1599290835483},{"_id":"source/_posts/在k8s中部署RabbitMQ/service.png","hash":"71d9ec668af0d71f6d4109d20edd67ce9b654718","modified":1616217980467},{"_id":"source/_posts/常见类型命令操作/de-keys.png","hash":"938df8939f2379c671f8bc7356d52554e9caeeb7","modified":1618839984076},{"_id":"source/_posts/常见类型命令操作/getset.png","hash":"8eefa6f826b257446991fda494796082c99656ed","modified":1618839984077},{"_id":"source/_posts/常见类型命令操作/hash-all.png","hash":"697b034c1b3b261373f3c1554d929b08d2705a83","modified":1618839984078},{"_id":"source/_posts/常见类型命令操作/hash-exist.png","hash":"6388f4162d7e90aa58c2f934a530467ed532ab6b","modified":1618839984081},{"_id":"source/_posts/常见类型命令操作/hash-hlen.png","hash":"079b4ea742f76be54c159ae9bb6c2e464dc96375","modified":1618839984083},{"_id":"source/_posts/常见类型命令操作/hash-incry.png","hash":"b707ecf4eb79333a906514f32edec8ba0fb7246e","modified":1618839984084},{"_id":"source/_posts/常见类型命令操作/hash-llen.png","hash":"075ed6429331fce57873553a6d39cb3fa0231b55","modified":1618839984086},{"_id":"source/_posts/常见类型命令操作/hash-lrange.png","hash":"505bc266296be1a66fd66c92d0fae151314ee238","modified":1618839984088},{"_id":"source/_posts/常见类型命令操作/hash-rpush.png","hash":"33eb6d42f57c721a2a07de21bdca7514af0259fb","modified":1618839984093},{"_id":"source/_posts/常见类型命令操作/incr-decr.png","hash":"6c94a881cf433a2264a9e9ff0e8d705e03a50e25","modified":1618839984094},{"_id":"source/_posts/常见类型命令操作/keys.png","hash":"bfad8619efe71b6a77715013bd3239e399069c75","modified":1618839984095},{"_id":"source/_posts/常见类型命令操作/list-lpush.png","hash":"87bda31ba12794dc4a4685830cf02010a0e5f50b","modified":1618839984096},{"_id":"source/_posts/常见类型命令操作/nochange.png","hash":"7d8a11163763fff06aca62580ffe175743395097","modified":1618839984097},{"_id":"source/_posts/常见类型命令操作/nokey.png","hash":"64c211d8449e23684c6c646b3a3797486e220ab4","modified":1618839984097},{"_id":"source/_posts/常见类型命令操作/set-add.png","hash":"cc5b41da1c40dbf61ac8b71e59f9cb4b6e174a47","modified":1618839984098},{"_id":"source/_posts/常见类型命令操作/set-get.png","hash":"4f31297c32047f44c68c00295f26cf76c4d93485","modified":1618839984099},{"_id":"source/_posts/常见类型命令操作/set-scard.png","hash":"54433a2175d00d18165d4e98c2ec5bd1d193046f","modified":1618839984100},{"_id":"source/_posts/常见类型命令操作/set-sinterstore.png","hash":"34e4ba587a5173c9d8c65410903559914e7e6d7a","modified":1618839984104},{"_id":"source/_posts/常见类型命令操作/set-sinter.png","hash":"0a6cc53a995cf9e0341503c43954f3d23c9aa219","modified":1618839984103},{"_id":"source/_posts/常见类型命令操作/set-smembers.png","hash":"ef211a3f1f2d674b7e0230c373ca2fa158be27ce","modified":1618839984105},{"_id":"source/_posts/常见类型命令操作/set-sismember.png","hash":"db6358806f9a8da219f44104705bb7988b83c68e","modified":1618839984104},{"_id":"source/_posts/常见类型命令操作/set-srandmember.png","hash":"a8091c348a74262d901c809680d206e399163e48","modified":1618839984106},{"_id":"source/_posts/常见类型命令操作/set-sunion.png","hash":"29f0fd2bd32006185c3251682be743f63b07c4ba","modified":1618839984107},{"_id":"source/_posts/常见类型命令操作/step.png","hash":"4e5898b74cb83788b3949bd5e445034142bd32b4","modified":1618839984109},{"_id":"source/_posts/常见类型命令操作/zadd.png","hash":"926ab077c225f2a810b80d68d72fb899a0d31f55","modified":1618839984110},{"_id":"source/_posts/常见类型命令操作/zcount.png","hash":"55b1a7daa2cf97b7fc2411b4deeedbfc58fbaf73","modified":1618839984117},{"_id":"source/_posts/常见类型命令操作/zscore.png","hash":"298ddbab9596bc2fe3d6a2ea638ca4c965bc47eb","modified":1618839984117},{"_id":"source/_posts/部署单点zookeeper/start.png","hash":"7bbc0d33cb95c84846c4ac35c60771e03aaa5a52","modified":1607767294812},{"_id":"source/_posts/部署单点zookeeper/stop.png","hash":"aa628731318d5f2fb3cffb53812526fa43bce2f7","modified":1607767916185},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/pod.png","hash":"5d27bac9f250f8c1fa0582d179135d8e4182e519","modified":1616226381609},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/ansible-check.png","hash":"17ed2a4a4577997d4c3caf3f94f58bcc56c0d516","modified":1599290835452},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/cluster-check.png","hash":"24ce5c0972b9b454e7795bf9ced171962d821482","modified":1599290835459},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/getnode.png","hash":"cca3144948217ad6da5e3a1d76318129645a4f3f","modified":1599290835465},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/ipvs-rule.png","hash":"7e7ceb0a160f685d3a9dee118dcb3097d08c6972","modified":1599290835467},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/ipvs.png","hash":"8fbcc475b70df71470e99c27de0c5ac0e85975e5","modified":1599290835468},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/nodes.png","hash":"5a4cbbd814630d38b64eb765ddb9c5a6f6248e7e","modified":1599290835472},{"_id":"source/_posts/升级集群到1-18/carbon.png","hash":"b29c1c8c65ae1c923b7e6009c303c56366e01247","modified":1599290835491},{"_id":"source/_posts/升级集群到1-18/update-kubeadm.png","hash":"3debb778ab887ba714bdc7d4315db8bf3771b99a","modified":1599290835495},{"_id":"source/_posts/升级集群到1-18/newversion.png","hash":"062c93633044768b7377667e0dc584458735d6ba","modified":1599290835494},{"_id":"source/_posts/升级集群到1-18/update-res.png","hash":"da5105cb9de4db6fb586379f651cb8ebb897eb77","modified":1599290835498},{"_id":"source/_posts/升级集群到1-18/update.png","hash":"04431574468c7db31d2d96d39ca4d7b710dc5f11","modified":1599290835499},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/es-pod.png","hash":"f4ceee98f71d989d64f60701a5bc9957768046f3","modified":1599290835416},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kafka.png","hash":"95315c131198e1d78e9e76c04419e004aa627edb","modified":1599290835419},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kibana-pod.png","hash":"56d4801ffe35a7b67bce82d1671813439be8609a","modified":1599290835423},{"_id":"source/_posts/在k8s中使用nfs存储/nfs-client.png","hash":"e4f03cecc4d0f70d02a9765d1349014885ab1217","modified":1599290835478},{"_id":"source/_posts/在k8s中使用nfs存储/pvc.png","hash":"5642f98a4804c3033865c7dc83cc3999fbed4fd0","modified":1599290835484},{"_id":"source/_posts/在k8s中部署RabbitMQ/bushu.png","hash":"51b3273b0ed83d2f03df80e5b08903682752c58f","modified":1616217472733},{"_id":"source/_posts/常见类型命令操作/append.png","hash":"0b2f55d36b6702a33de63cbae58affbc8f8cde84","modified":1618839984075},{"_id":"source/_posts/常见类型命令操作/hash-lpoprpush.png","hash":"5ccd17004348ffe61755e0972054a268ddd25e6d","modified":1618839984087},{"_id":"source/_posts/常见类型命令操作/hash-lset.png","hash":"4cb94a5862668d64862413ea7553e893d161a05b","modified":1618839984091},{"_id":"source/_posts/常见类型命令操作/hash-pushx.png","hash":"d82bdce53514c6336bfc0ef16a60f8202941a957","modified":1618839984092},{"_id":"source/_posts/常见类型命令操作/hash-rpop.png","hash":"7d8b6b470dccf12fb2e8d87271d79b97a961b440","modified":1618839984093},{"_id":"source/_posts/常见类型命令操作/set-sdiffstore.png","hash":"c7fe7d5acd7d7487a911c9d39f0a9d3bf91a8444","modified":1618839984102},{"_id":"source/_posts/常见类型命令操作/set-srem.png","hash":"3c39c93c8ec56532b83d65f605c048cfe273fe73","modified":1618839984106},{"_id":"source/_posts/常见类型命令操作/set-sunionstore.png","hash":"368839cc2edda8798df059e590eac8414f43bad7","modified":1618839984108},{"_id":"source/_posts/部署单点zookeeper/status.png","hash":"7c61976b3a98b4ba936634e260b1456e66a60338","modified":1607767457720},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v1.png","hash":"fa31197af7e26528f5825fccea9cba7e584e0f2e","modified":1616226746224},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-true.png","hash":"0dc651430e734e14767c987d9351c9a8ed39e161","modified":1616227310172},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-wight.png","hash":"d6309a6c2f52b75ed625ef6a1f1d22c6d29ca622","modified":1616226688767},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/calico-node.png","hash":"d13121504e5bdae80705842b27e49ef3485f604d","modified":1599290835454},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/etcd-helth.png","hash":"0d4545d89bd3805f15df8ccadb765ce7a6c1de14","modified":1599290835462},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/etcd-member.png","hash":"2ab5159afa1cb59f8cd52355ceaee1d928d10a8d","modified":1599290835464},{"_id":"source/_posts/在k8s中部署redis集群/create.png","hash":"328923445273cb0e937fac417a95e8ee830c397b","modified":1616240291299},{"_id":"source/_posts/在k8s中部署redis集群/info.png","hash":"a5be50fe42597778e979a80f5f133a990bc853fd","modified":1616240525995},{"_id":"source/_posts/常见类型命令操作/hash-del.png","hash":"de7769e2ad3fde7d93af400ffcb9e7be71d6fdcd","modified":1618839984080},{"_id":"source/_posts/常见类型命令操作/hash-getset.png","hash":"68a53734c38da966e34381a55c9d4d7fd8736ec1","modified":1618839984082},{"_id":"source/_posts/常见类型命令操作/set-sdiff.png","hash":"9188fa9a0b946c43c2fd5514440ae6e1ede9d9d2","modified":1618839984101},{"_id":"source/_posts/部署Nginx/install_source.png","hash":"a27b02fcf010964ca833d53dd2fc549e52949a9e","modified":1599290835572},{"_id":"themes/butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1599293200708},{"_id":"themes/butterfly/README.md","hash":"111662216ce7d1ea63d7072aaea2a612543c19a1","modified":1599293200708},{"_id":"themes/butterfly/README_CN.md","hash":"6c17872d3bbd147a86f53a7de7ee193dfd1a9000","modified":1599293200708},{"_id":"themes/butterfly/_config.yml","hash":"a449a0d900f7210d70c6af6af86a6c17315dbcea","modified":1616319656826},{"_id":"themes/butterfly/package.json","hash":"f92db754486cb1cfaaa4b03b869877c922974bee","modified":1599293200723},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE.md","hash":"bc427d7f13fec05cfd2dcc10953cbb2a96bc31be","modified":1599293200707},{"_id":"themes/butterfly/.github/stale.yml","hash":"cd5a929ce25a6293a9f449e7b80dfe4307326797","modified":1599293200708},{"_id":"themes/butterfly/languages/default.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1599293200709},{"_id":"themes/butterfly/languages/en.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1599293200709},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e7d642fe6ed909c6552accd919a812c9ae86df7d","modified":1599293200709},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"582d4800d33209f4612f48f25f69e8d952aeabfe","modified":1599293200709},{"_id":"themes/butterfly/layout/404.pug","hash":"9ba3cea0f61ad5d0f6cb782fd3da9cf7b4077ae4","modified":1599293200709},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1599293200709},{"_id":"themes/butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1599293200709},{"_id":"themes/butterfly/layout/flink.pug","hash":"12571e3b98651d655cab29c01a33663393c66056","modified":1599293200710},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1599293200722},{"_id":"themes/butterfly/layout/post.pug","hash":"2e34fd65d36508faec9fd015d6cdb108d4c29b58","modified":1599293200722},{"_id":"themes/butterfly/layout/tag.pug","hash":"3bb2a700c6d709d2757d55d357eed1fca5644e24","modified":1599293200722},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"06ff82eaedfbc5cc9a65e34eaa063cebfb942a93","modified":1599293200710},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"0675b44ce8eeffca750f32f68e406145b070f363","modified":1599293200712},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"5f3a4c030a5f27d890089737f3fd4c58a1154c1f","modified":1599293200712},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e764e4ecceb04e11e2bfef84e72b4529bdc2362b","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"29c6e5f8b82de38f61b53decfa9e0e9831b188f8","modified":1599293200717},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"71960ea57a3f241c80e7701f2decbf4ba9736ba0","modified":1599293200717},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"158e49e0466e71e4d2cc7087a3ac5e703b3e13e4","modified":1599293200719},{"_id":"themes/butterfly/source/css/index.styl","hash":"8d908c4bc856f9369e8148e7b8dd7fb968fbf66c","modified":1599293200734},{"_id":"themes/butterfly/source/css/var.styl","hash":"3c20dbec8e323628f17a8510f6ef8bba6f00db2a","modified":1599293200734},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1599293200734},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599293200734},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1599293200737},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1599293200736},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1599293200737},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1599293200737},{"_id":"themes/butterfly/source/js/main.js","hash":"c2e386dfd6614123a58dd87a66a7fc9bcca8b64f","modified":1616218902930},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1599293200740},{"_id":"themes/butterfly/source/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1599293200740},{"_id":"themes/butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1599293200723},{"_id":"themes/butterfly/scripts/events/replace_config.js","hash":"537e556e76760ce2103f359d5a424c6e2b9a0710","modified":1599293200723},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"e6db030700cefcd79e7a826b04e2a7172d53428e","modified":1599293200724},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0b4775aaa955b75f03648fc1957fb88a6d440803","modified":1599293200724},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"fb394ffd0ec61fe50ff992fdf11356312ca2ccfb","modified":1599293200724},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"11aabab0092a3f2258c1fa931e74a7796074c515","modified":1599293200724},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"729a9f40c5bf603036f6e9443db93b1704cf17d9","modified":1599293200725},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"64b13aeb4f49609529be6f9060797bafc8a6f9bc","modified":1599293200725},{"_id":"themes/butterfly/scripts/tags/gallery.js","hash":"2fad0a9e6645613631aad36dc3473fe8e032809b","modified":1599293200725},{"_id":"themes/butterfly/scripts/tags/button.js","hash":"bae84b36b58572112047c3b02e975c1e762de56b","modified":1599293200725},{"_id":"themes/butterfly/scripts/tags/hide.js","hash":"a32e4166b6cbbc1c2bdecaa74662a12cdb98f4ce","modified":1599293200725},{"_id":"themes/butterfly/scripts/tags/mermaid.js","hash":"53eaff19d8da32e04e2c871300ea495356d633cd","modified":1599293200726},{"_id":"themes/butterfly/scripts/tags/note.js","hash":"c739846637c48b4779df2f62effb78e15100fd9f","modified":1599293200726},{"_id":"themes/butterfly/scripts/tags/tabs.js","hash":"ec58149e16b6269bbcb685020b98567e8e3440a8","modified":1599293200726},{"_id":"themes/butterfly/layout/includes/chat/daovoice.pug","hash":"ab96a70b0a65a7fae094d426beba7433f60f4a5a","modified":1599293200710},{"_id":"themes/butterfly/layout/includes/chat/gitter.pug","hash":"ba9576ecba1a1768c25377e8b4fdb133982bd214","modified":1599293200710},{"_id":"themes/butterfly/layout/includes/chat/index.pug","hash":"da7412131e768e331a9f33804f2f5f7c5eeaa178","modified":1599293200710},{"_id":"themes/butterfly/layout/includes/chat/tidio.pug","hash":"208035fb6ae639653861d15c9a20e8d4bba2b02a","modified":1599293200711},{"_id":"themes/butterfly/layout/includes/chat/chatra.pug","hash":"77ec360f1f9fd702be540b0542449705828a77da","modified":1599293200710},{"_id":"themes/butterfly/layout/includes/comments/disqus.pug","hash":"821d968122bab8ce1ce04dc553b731eaf8e0d181","modified":1599293200711},{"_id":"themes/butterfly/layout/includes/comments/disqusjs.pug","hash":"751351eae0540651a5db865262ff4a6d40680715","modified":1599293200711},{"_id":"themes/butterfly/layout/includes/comments/gitalk.pug","hash":"e98f5c199a76ad939a29a46c0dcbf7e85ec60ed2","modified":1599293200711},{"_id":"themes/butterfly/layout/includes/comments/facebook_comments.pug","hash":"7b7bb7d2b39b639cc8e1edf1274148460796662e","modified":1599293200711},{"_id":"themes/butterfly/layout/includes/comments/index.pug","hash":"67cfc03939e08992ccb3a453d2b72458056535e9","modified":1599293200711},{"_id":"themes/butterfly/layout/includes/comments/livere.pug","hash":"9518b6e0c532af8ab0ae569ad795b769a2bd3040","modified":1599293200711},{"_id":"themes/butterfly/layout/includes/comments/utterances.pug","hash":"9427cb07bcfe2bc7198755eeebf60f9fe430a342","modified":1599293200712},{"_id":"themes/butterfly/layout/includes/comments/valine.pug","hash":"7b91be55c613f16bb2da9ab48aaf6e08781f563a","modified":1599293200712},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"a3c819238dceab080d5db0336ef07009ca216310","modified":1599293200712},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"8ec0609f14c284c3e6120940d7c4d7f1f201cd67","modified":1599293200712},{"_id":"themes/butterfly/layout/includes/head/aplayer.pug","hash":"b24959f00ac75f12f66b445158aad143ee860795","modified":1599293200712},{"_id":"themes/butterfly/layout/includes/head/comment.pug","hash":"7de136bdce45afa81341b13e61b7a3926e15f03b","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"e8b774f88cc717371d2e31f5d532007d0b7b23ab","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"29d6ab8de6e355925e76d92862671ce48ddd6f12","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/darkmode.pug","hash":"fa834037bf29843abd6b63fed3a868638b9875cd","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"95affc2c333f27b968c47272277da712d13f2670","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"0a23423304127c4ffa69310526aaa59830d12c78","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1599293200713},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/head/subtitle.pug","hash":"bfbf1c850dcd825c2eb68bc74e9787a5fef9258b","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"12dc74a7370b8d00f010e6914c09b1b12343fd92","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"c76b6236995f15e3cf5af376101c782a1078b845","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"2ff93c4edc1e52f63f3cd5f90354683e933a299e","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"aa83c7e0dcaf60c85d44af32a7d2d20667a6893b","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1599293200714},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"3cf431a4f04997b55873f7099c1402155b19cc95","modified":1599293200715},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1599293200715},{"_id":"themes/butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1599293200715},{"_id":"themes/butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1599293200715},{"_id":"themes/butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1599293200715},{"_id":"themes/butterfly/layout/includes/math/mermaid.pug","hash":"db848ff451d4c58670af415882ca6bb2e0da971b","modified":1599293200716},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"4736ea0dec5561f4f75d283be3629062b234af23","modified":1599293200716},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"c046c1b43ce9b5afe68b60c08230b843113a1561","modified":1599293200716},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1599293200716},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"e7ee2593788c6614b9f41f0789ef7166fe73a707","modified":1599293200716},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"8efc0b7886bdb5959e173b5e11f5ffb8d1c5230e","modified":1599293200717},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"3740cece6885c285351295612723fd66e0d5a4bf","modified":1599293200717},{"_id":"themes/butterfly/layout/includes/search/algolia.pug","hash":"518eec7302d4fad75be46486407a945b39833ff8","modified":1599293200717},{"_id":"themes/butterfly/layout/includes/search/local-search.pug","hash":"f8686264a4ff1d48961296f9949d705bc87de3ea","modified":1599293200718},{"_id":"themes/butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1599293200718},{"_id":"themes/butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1599293200718},{"_id":"themes/butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1599293200718},{"_id":"themes/butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1599293200719},{"_id":"themes/butterfly/layout/includes/share/share-js.pug","hash":"828a04c6e8e3a56c3c7f3c9bb1ecf4f99ed842fe","modified":1599293200719},{"_id":"themes/butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1599293200719},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1599293200719},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"b4acf48c98ba2a6a5a5fb5387a0fd610bdfd55ef","modified":1599293200720},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"8fdb96b8329e352ed691228767451b264151b3a6","modified":1599293200720},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1599293200720},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"721b611fda6dcfca8f88b9c7b70fede7b69a516b","modified":1599293200720},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"393a6f9a5dcabe8d96e9b6cb5620c12966dfd37f","modified":1599293200721},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"b5d73ceb54c43cc22e46b1cdcde24fcc8e420755","modified":1599293200721},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"83cb6ba0d8c913570147b3871c7fc0674dac8cdf","modified":1599293200721},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"355b50dd13471e00fbbfcf6519cf32a092c095b3","modified":1599293200721},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"6a4c85a037c10e093f545d3167691c0b68634465","modified":1599293200721},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"e0febc7eb43ceb21bb1607d4f2358b9b633cb2d2","modified":1599293200722},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"15fb3730f829e237c102a70ab9781178471fd786","modified":1599293200722},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7f800733ca4e4ee4dd1e0ccaace274d1bc896539","modified":1599293200727},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"cd9580fdf3a138ca84504e1a8b3f4d633ccc7bd5","modified":1599293200727},{"_id":"themes/butterfly/source/css/_highlight/diff.styl","hash":"2d9820f9fc556855c9c26f9242adb1b29fe3c272","modified":1599293200727},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"f2884605b55dfb9575f9532d6ac568bc59d0c4ab","modified":1599293200727},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"70ce4e354b03fe926fd06822e2a5f125e1cd3697","modified":1599293200728},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"ce9b157439f48c5ef9106cbe3090525815009134","modified":1599293200731},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1608b5c2a307809e25ac7ad903fc6bc009c30016","modified":1599293200731},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"b766e536a7a558f4850b31464a284ce2384d79f6","modified":1599293200728},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"25c9a71043156adf67662d68b35d97d66f60a396","modified":1599293200728},{"_id":"themes/butterfly/source/css/_layout/category.styl","hash":"7267043e52a9e620adfa860bdb3e4de400ff2596","modified":1599293200728},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1599293200728},{"_id":"themes/butterfly/source/css/_layout/flink.styl","hash":"079ed647f847cf2693928d358929b65ce67cb31b","modified":1599293200729},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d8709e29efcfa0a7356384026dfbaac8861d3baa","modified":1599293200729},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f7038a0ac08396784e57bcd31f6431c92909f514","modified":1599293200729},{"_id":"themes/butterfly/source/css/_layout/loadding.styl","hash":"144ef01b03ae34d3ede4b9aa18f4c8cd3d6651ea","modified":1599293200729},{"_id":"themes/butterfly/source/css/_layout/mobile-sidebar.styl","hash":"d2d6b36f3bcbba35e1e63ac0d59879decf63cc1f","modified":1599293200729},{"_id":"themes/butterfly/source/css/_layout/page.styl","hash":"2fc2230d9a7117f6c5f7e484e2fbfc76e62fa8bc","modified":1599293200730},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"8f44be6a866d11f6afabf8689d9ae7b65eee18ae","modified":1599293200730},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"37a9832a6bc409947e85556b31f2adadf2f412ec","modified":1599293200730},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"4825afd4f94f1481b5422072fa5e506e2a387247","modified":1599293200730},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"495da7b41a7909df989a5dcc13a29761ef23089b","modified":1599293200730},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1cb78e3c8217eb93ad3652f60a3f4c92c1218083","modified":1599293200730},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"33da3da65715ce1a85b8ecab92e0eab6ce620a58","modified":1599293200731},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"4923e99c1b6abf11c81539576ce65202a2f40efb","modified":1599293200731},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"641ef2bc7af135c17fd90f3f974e78ebbaf1ac13","modified":1599293200732},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"5bb29799d0168b1d68cfb8165a41b9d90f86eab7","modified":1599293200732},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"da791f46239eabbbf28eb30b9e441f1ac2a8ced1","modified":1599293200732},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"40926b9d87e06d4679bd3c8542a7a3acd5d10cc1","modified":1599293200732},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"0bc29278fbcf1aec15222ed10c58697da1a0d676","modified":1599293200732},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1599293200733},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"10e925cf59748af445d3606d965731013f31827c","modified":1599293200733},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"2f8d4043dedef70813493e43e4c158e16ccc3fc0","modified":1599293200733},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"48a582e1847595aaa435c048a7bb78b44ed8a716","modified":1599293200733},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1599293200733},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1599293200738},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1599293200738},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1599293200739},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1599293200739},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1599293200739},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1599293200739},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1599293200739},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1599293200739},{"_id":"themes/butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1599293200740},{"_id":"source/_posts/docker方式部署kafka集群/status.png","hash":"3f87bb1677e78a2cf77ce34ba2573edbef8977da","modified":1599290835374},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-ha.png","hash":"ff05d70835407c65fffb62ca46f31c6d507b8a3f","modified":1616227117706},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-never.png","hash":"a5bd79e1cf70bbf210658a923beb3e64039294e2","modified":1616227230206},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2.png","hash":"9849d93155f759958c418acff7993cad654d6120","modified":1616226633526},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/etcd-cluster.png","hash":"3f8dfed7be6d7b786067aca7f64141d056df2aa9","modified":1599290835461},{"_id":"source/_posts/升级集群到1-18/drain.png","hash":"68b4dc6b5bfb4a6b70f069eb2bc5e5936d9a2b79","modified":1599290835493},{"_id":"source/_posts/常见类型命令操作/hash-linsert.png","hash":"277b58e4e6359369259ae36a595b622bbe2f71e9","modified":1618839984085},{"_id":"source/_posts/部署docker-ce/docker-version.png","hash":"e383d33324bbd65bf138431b0e3d098d166f1d4a","modified":1599290835569},{"_id":"themes/butterfly/layout/page.pug","hash":"130ab657a6acfe149dbc59e481dc05d4d7d926a3","modified":1599293200722},{"_id":"source/_posts/升级集群到1-18/update-node.png","hash":"4b383fa12090e0107da8a07853060b1bd97cf61d","modified":1599290835497},{"_id":"source/_posts/在k8s中使用nfs存储/storageclass-pvc.png","hash":"96817ede171b4d89e9a947f6444c79d2950da7e4","modified":1599290835486},{"_id":"source/_posts/在k8s中部署redis集群/detail.png","hash":"a6f861bd03ed14212a8232be8eced51e19e7c11a","modified":1616240561498},{"_id":"source/_posts/常见类型命令操作/hash-lrem.png","hash":"d1073eb521f235bd61d12d4bfe9438d6596629d4","modified":1618839984090},{"_id":"themes/butterfly/source/img/avator.png","hash":"b2bc08b8559a3a777724aadcbaebbaf3bef791ef","modified":1599293200736},{"_id":"source/_posts/在k8s中部署RabbitMQ/log.png","hash":"67f08866e31bf7be0b10733147d91acb87c318cb","modified":1616217771632},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kafka-pod.png","hash":"e73125790e7a51ad2f724fd518937ff9c0764da6","modified":1599290835415},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/check-master.png","hash":"7eaef082099e0122c06ca5c2396b514ef47eae51","modified":1599290835457},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/kubeadm-init.png","hash":"001a0c763ade70a0cc5585b495975b64fee04591","modified":1599290835471},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kibana.png","hash":"865180e084989d63064f9c984d03a11afc47b80d","modified":1599290835422},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/single-master.png","hash":"c6efea5343719c2248028b2063717f8b784b4ffa","modified":1599290835476},{"_id":"source/_posts/在k8s中部署RabbitMQ/web.png","hash":"aca80a860af76862c1510399be20e585580aaa45","modified":1616218111938},{"_id":"source/_posts/在k8s中部署mysql主从集群/zhucong.png","hash":"dc901cd5725175a1af914f17337eeb91e1439510","modified":1616241558634},{"_id":"source/_posts/在k8s中部署RabbitMQ/client_log.png","hash":"5835d6bb7d706b615bcd8f49239d7e3ae82aa82b","modified":1616217853920},{"_id":"source/_posts/在k8s中部署redis集群/cluster.png","hash":"cfbc50e50fe764805893ed022cfcfd33043b6036","modified":1616240473552},{"_id":"public/tags/index-1.html","hash":"5b29bf3632a960d217f9154602cb10c570c29cfd","modified":1641725485918},{"_id":"public/tags/index.html","hash":"401766b38cc5c9f1c17bb1d9fee3dd8c40707895","modified":1641725485918},{"_id":"public/archives/index.html","hash":"41ed972880e57b760bc471935296fc1967b3c4a1","modified":1641725485918},{"_id":"public/categories/index-1.html","hash":"6508e43499d37217189407b87d463fad106f6dea","modified":1641725485918},{"_id":"public/categories/index.html","hash":"847d70a0f3ee14893654c9c3107712bd73261001","modified":1641725485918},{"_id":"public/2021/05/02/二进制方式部署kafka集群/index.html","hash":"7a6aec1b2ba305127ca886c3899d04d10345281f","modified":1641725436824},{"_id":"public/2021/05/02/yum和源码方式部署redis/index.html","hash":"c6c602f035840f169ff5c3fcc8c66cd2b3b10edc","modified":1641725436824},{"_id":"public/2021/04/19/部署单节点kafka/index.html","hash":"44464381df16e49facc16aee9c363e5842c20edb","modified":1641725436824},{"_id":"public/2021/04/18/主从复制/index.html","hash":"e84ec9735c752ae758c5bce25f2404f241390eac","modified":1641725436824},{"_id":"public/2021/04/18/Redis内存模型/index.html","hash":"10bd199b621a65a9a781173ffd147e83a7de102e","modified":1641725436824},{"_id":"public/2021/04/18/redis数据持久化方案/index.html","hash":"4c30c106eb7e55e5f43836cdc9145f18360b5616","modified":1641725436824},{"_id":"public/2021/04/18/常见类型命令操作/index.html","hash":"4b1e7385168f7f7f274bf99892562643c2224504","modified":1641725436824},{"_id":"public/2021/04/18/Redis基础知识/index.html","hash":"a6902ea23aca0bf544ac82fce0ffde8653ad413a","modified":1641725436824},{"_id":"public/2021/04/17/docker方式部署kafka集群/index.html","hash":"4270c4b03de9bc5f373b10a19c03f419dd97505c","modified":1641725436824},{"_id":"public/2021/04/17/docker方式部署zookeeper集群/index.html","hash":"d0aee77ab25c590587e846fd6f024aa283d00a94","modified":1641725436824},{"_id":"public/2021/04/17/部署zookeeper集群/index.html","hash":"5623e8b441303f2a9d6c4dc3eac75ff44a8eec43","modified":1641725436824},{"_id":"public/2021/04/17/zookeeper常用命令行操作/index.html","hash":"a7a93a4bb0e102946035a123709174c7f1ba4197","modified":1641725436824},{"_id":"public/2021/04/17/kafka常用命令操作/index.html","hash":"fb80023270db8cdea69e86a97febe0353ae8ba6d","modified":1641725436824},{"_id":"public/2021/04/13/升级集群到1-18/index.html","hash":"d20b448dd693d1233adbe6364225d650c264f0c1","modified":1641725436824},{"_id":"public/2021/04/13/部署Nginx/index.html","hash":"58767b0e9990ef2589dcf54ef059bf930f3ddeb8","modified":1641725436824},{"_id":"public/2021/04/11/二进制方式部署kubernetes-1-20/index.html","hash":"1d57b1af2fa2854365cc5c22895621e45a88773d","modified":1641725436824},{"_id":"public/2021/04/06/部署单点zookeeper/index.html","hash":"b491095f35212773836fd2cf982769d3414c2b5f","modified":1641725436824},{"_id":"public/2021/04/05/部署harbor镜像仓库/index.html","hash":"7a69a6eb924b60409537875e99bc3604ccec1f8e","modified":1641725436824},{"_id":"public/2021/04/05/部署docker-ce/index.html","hash":"f37579d15adab2097ff2958272accd41e7f1c456","modified":1641725436824},{"_id":"public/2021/03/28/使用k3d和traefik快速搭建开发环境/index.html","hash":"497e0d367be1548122c24e6a2d3e5147d020499a","modified":1641725436824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/index.html","hash":"9db1cbab817ab3fa923c5e68b1e87e739d5d7c46","modified":1641725436824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/index.html","hash":"b5922ad30d8dbc89d82af841b2f3c4afd1f4c599","modified":1641725436824},{"_id":"public/2021/03/23/部署nfs存储/index.html","hash":"1d2fc0fc1cd2af6b1d10a394bdea1f782dc4ff6e","modified":1641725436824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/index.html","hash":"330b2b3286e437b757a9a2c3dfcf004117abb5b6","modified":1641725436824},{"_id":"public/2021/03/21/在k8s中部署Mysql单实例/index.html","hash":"d9eb3765b70938b07e8d4ad4d610c624dfca470e","modified":1641725436824},{"_id":"public/2021/03/21/部署Mysql5-7/index.html","hash":"0e8908616be504162bb3834ff1a18688de6a0975","modified":1641725436824},{"_id":"public/2021/03/20/在k8s中部署mysql主从集群/index.html","hash":"d965a7a9c157a15737332345e223a5052518e991","modified":1641725436824},{"_id":"public/2021/03/20/在k8s中部署redis集群/index.html","hash":"d6b38591d73348a8bbaff0877cd5488f82d5a141","modified":1641725436824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/index.html","hash":"c6f8ca84ef61d3734a1ac7b56aee0a84d89c2dff","modified":1641725436824},{"_id":"public/2021/03/20/部署Ingress/index.html","hash":"acdcfabb43e6c719d3e7777eeb2b0c6b943c0e7d","modified":1641725436824},{"_id":"public/2021/03/20/在k8s中部署RabbitMQ/index.html","hash":"008940570d6e9cd833c710cfe98306f03a313f9e","modified":1641725436824},{"_id":"public/archives/page/2/index.html","hash":"f7aff8ec2b905d2198b7fab1d044aa71b98951cd","modified":1641725485918},{"_id":"public/archives/page/3/index.html","hash":"38f33e0ba3dd43de296fddbeb94a6c7b8ac00e99","modified":1641725485918},{"_id":"public/archives/2021/index.html","hash":"4f7d324ff580e4700f1312922f97c2fdd628648e","modified":1641725485918},{"_id":"public/archives/2021/page/2/index.html","hash":"c118584d6d3fdbc41b1658ebe09cdbdf2ae56aca","modified":1641725485918},{"_id":"public/archives/2021/page/3/index.html","hash":"203f167c4c20ae895b094b124efd66f9d9c8d049","modified":1641725485918},{"_id":"public/archives/2021/03/index.html","hash":"2b8e8c3942df74ffe79415bd81a17d580352979b","modified":1641725485918},{"_id":"public/archives/2021/04/index.html","hash":"24fe24a59ce727d2d58df4934507af6bbad5d982","modified":1641725485918},{"_id":"public/archives/2021/04/page/2/index.html","hash":"adee14e787c03f9b3053c49ac7cda4c2e63fae00","modified":1641725485918},{"_id":"public/archives/2021/05/index.html","hash":"5cdaafe351ff8779ea026479468ed6f6621695a9","modified":1641725485918},{"_id":"public/categories/数据库/index.html","hash":"280ba5e87f324150a66162cdd3f4d99ef78d03fe","modified":1641725485918},{"_id":"public/categories/消息中间件/index.html","hash":"4405a47d3c397b2edc7d3b4e5efefbc7dce019ae","modified":1641725485918},{"_id":"public/categories/Zookeeper/index.html","hash":"e0082637d65a5fd8206f7ab5c7fe58a2a43746c6","modified":1641725485918},{"_id":"public/categories/数据库/Redis/index.html","hash":"c059f0ca8d2f7fed95cf05dcde3f7934a654bbd5","modified":1641725485918},{"_id":"public/categories/Kubernetes/index.html","hash":"a466e3eb16dca2b049f64f9271554022c45c964e","modified":1641725485918},{"_id":"public/categories/消息中间件/Kafka/index.html","hash":"ed69d5ca6890ef846e90fbf5618538bbc89306cb","modified":1641725485918},{"_id":"public/categories/Zookeeper/部署/index.html","hash":"75751ab6885dc6fbc19922234a250cd2f068082e","modified":1641725485918},{"_id":"public/categories/数据库/Redis/基础/index.html","hash":"288d335913a24fdc9eca4910cf0c3425afb6338f","modified":1641725485918},{"_id":"public/categories/数据库/MySQL/index.html","hash":"8fc0b3221bbcf5ea32eb65064211ea5bf0009bd3","modified":1641725485918},{"_id":"public/categories/Kubernetes/Ingress-nginx/index.html","hash":"61e998315ba02d300178edd01bb930b3b708fb03","modified":1641725485918},{"_id":"public/categories/消息中间件/RabbitMQ/index.html","hash":"13d860250436d0bf294a36dcf6586cc5303b4b48","modified":1641725485918},{"_id":"public/categories/数据库/Redis/部署/index.html","hash":"71a25614a943fc22c023eb31c82538bd8fd9e3eb","modified":1641725485918},{"_id":"public/categories/数据库/Redis/常用操作/index.html","hash":"39a17255fb425f34cef287556cedea1dbb325ff2","modified":1641725485918},{"_id":"public/categories/数据库/Redis/数据持久化和主从复制/index.html","hash":"5e219b7b0a84f8063bfee6a474a6ba6db8d514f6","modified":1641725485918},{"_id":"public/categories/Nginx/index.html","hash":"e8302e18040d9178c80f1c2e34a064ec0abd240c","modified":1641725485918},{"_id":"public/categories/Docker/index.html","hash":"5a9a7019d4dd24d04dbb6fe30057d693f6b04007","modified":1641725485918},{"_id":"public/categories/Zookeeper/常用操作/index.html","hash":"c3228e61bfa138ab24b9aedd7fa84da5ed2b086a","modified":1641725485918},{"_id":"public/categories/存储/index.html","hash":"211930125abe8caf1fb1755cf7971054585e3fae","modified":1641725485918},{"_id":"public/categories/消息中间件/Kafka/部署/index.html","hash":"af10d41fcb45911fed3309fd250dd9b2b4ef6268","modified":1641725485918},{"_id":"public/categories/Kubernetes/集群部署/index.html","hash":"13d1d9884c28aac391e2c3a144c71b55db2a98dd","modified":1641725485918},{"_id":"public/categories/Kubernetes/存储/index.html","hash":"cea1c57867d4de2e7d0029b3f1067b04e2d6fa3f","modified":1641725485918},{"_id":"public/categories/数据库/MySQL/部署/index.html","hash":"ced8934f53acaad2d7293957b4c5c17ab9310a24","modified":1641725485918},{"_id":"public/categories/消息中间件/RabbitMQ/部署/index.html","hash":"e06e185075074831337404185dc20909921b589c","modified":1641725485918},{"_id":"public/categories/消息中间件/Kafka/常用命令/index.html","hash":"b1e57b08c4f3bcbe279bc001f75194c3d73c32df","modified":1641725485918},{"_id":"public/categories/Nginx/部署/index.html","hash":"5f0a9d01f31524e08447004a9ca62249e389633c","modified":1641725485918},{"_id":"public/categories/Docker/部署/index.html","hash":"a33d65b8386f165071dba5a456fa1ca29c2481c2","modified":1641725485918},{"_id":"public/categories/Docker/镜像仓库/index.html","hash":"231f326a7f296f20869df5bdd191741240354e38","modified":1641725485918},{"_id":"public/categories/存储/NFS/index.html","hash":"824f7a299bdb47b3e390b82d5c7eef6e46549f34","modified":1641725485918},{"_id":"public/categories/Kubernetes/存储/NFS/index.html","hash":"4611b2ebc60d2b04c15c128250937220bce71785","modified":1641725485918},{"_id":"public/categories/存储/NFS/部署/index.html","hash":"6e922dacef70d231720382a75353d6e159f1f9c0","modified":1641725485918},{"_id":"public/categories/Kubernetes/日志收集/index.html","hash":"061b6865c32297a1b0ddba5d09bb5c9bbc36bf54","modified":1641725485918},{"_id":"public/index.html","hash":"cc25934565a01a35fab9792b24b755c3f224091e","modified":1641725485918},{"_id":"public/page/2/index.html","hash":"c6357c5d214c01560e82951521eb18c4948c989f","modified":1641725485918},{"_id":"public/page/3/index.html","hash":"e899daeea7ed1c5327e234ec44704ee659569612","modified":1641725485918},{"_id":"public/page/4/index.html","hash":"52b17c3f3005e768e8d6bda33ff2c2b53d15f36b","modified":1641725485918},{"_id":"public/tags/Redis/index.html","hash":"3a87bf1fb149f671828fcf6343d8a258f009ecbb","modified":1641725485918},{"_id":"public/tags/Kafka/index.html","hash":"123362052142dd4fd8fd0e3f886d80a637c1be9d","modified":1641725485918},{"_id":"public/tags/Zookeeper/index.html","hash":"ea2d7c53710d7692765d2759d14336edd932d914","modified":1641725485918},{"_id":"public/tags/Ingress/index.html","hash":"5f6b5ac3923006a057d297dbfd919ae27db2d6ec","modified":1641725485918},{"_id":"public/tags/Kubernetes/index.html","hash":"85d091680b4ecb268b4308e304943cd709d099e8","modified":1641725485918},{"_id":"public/tags/NFS/index.html","hash":"10ad1bdc6b98f41d1166ee35229dea25c1ae6377","modified":1641725485918},{"_id":"public/tags/MySQL/index.html","hash":"15c2546b41eb1fd90a4d7b4459a08d911d16acb8","modified":1641725485918},{"_id":"public/tags/RabbitMQ/index.html","hash":"f0abc07512742540c6e26be4e948b49e4505e365","modified":1641725485918},{"_id":"public/tags/Nginx/index.html","hash":"ed10b2ac6df7c0d3d7ab17e05fe59af6e6daaa77","modified":1641725485918},{"_id":"public/tags/Docker/index.html","hash":"27e5804db6d0075bfcb9e06d2f1c12350d5afa32","modified":1641725485918},{"_id":"public/tags/Harbor/index.html","hash":"4d327abbbae171f7e8a3ae761a2d77c5ddf4736d","modified":1641725485918},{"_id":"public/tags/K8S/index.html","hash":"1b98300ec9fe6cf1d3046c1d0678db338228e2a1","modified":1641725485918},{"_id":"public/tags/日志收集/index.html","hash":"af2a95badf0e6f41b2cfe6bd26633f762765c49e","modified":1641725485918},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1619953302824},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1619953302824},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1619953302824},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1619953302824},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1619953302824},{"_id":"public/2021/04/18/Redis基础知识/aof.svg","hash":"3d462df310d4140b5c04004892fc3dea2459d4c4","modified":1619953302824},{"_id":"public/2021/04/18/Redis内存模型/mem-detail.png","hash":"aefcba568f3e779e7fab01300c11cffca14b375f","modified":1619953302824},{"_id":"public/2021/04/18/Redis基础知识/rdb.svg","hash":"4ddf0d4d5ff37f681334ff7334dc3a66c0e80ba6","modified":1619953302824},{"_id":"public/2021/04/05/部署harbor镜像仓库/create.png","hash":"0a05e0a64c5bea9574e23e55de01dd1ff5003015","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/zcard.png","hash":"f0fbd8161fac2f4e48f945cb18939501343e49b1","modified":1619953302824},{"_id":"public/2021/04/05/部署harbor镜像仓库/create-user.png","hash":"f75c209500395f7b6e6bbbef29d549289e39a3b2","modified":1619953302824},{"_id":"public/2021/04/05/部署harbor镜像仓库/upload-image.png","hash":"25f96e2071491cc9dff09777d6cbad204962c28c","modified":1619953302824},{"_id":"public/2021/04/05/部署harbor镜像仓库/harbor-login.png","hash":"23c85d368e48163f874e45c89983c759c4346460","modified":1619953302824},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1619953302824},{"_id":"public/2021/04/18/Redis内存模型/jmealloc.png","hash":"07f617f356ce777d0abd01771ba1fcafbd78c653","modified":1619953302824},{"_id":"public/2021/04/17/zookeeper常用命令行操作/ls.png","hash":"6c48f4abd0ffb87815ef510d6656158521b3adb4","modified":1619953302824},{"_id":"public/2021/03/28/使用k3d和traefik快速搭建开发环境/dashboard.png","hash":"815b2c8d2904b01bba2daa98e2139704c24163bf","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/pod-nfs-svc.png","hash":"14df383bb1a39f069a6a41c66c590dfaf7862024","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/pod-nfs-test.png","hash":"6c44a178fe6f673ea72649b02bbc235588527369","modified":1619953302824},{"_id":"public/2021/03/28/使用k3d和traefik快速搭建开发环境/whoami.png","hash":"b39c70e56e5a62cad769d211027c0a8aee20551b","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/pv.png","hash":"e34c9983e81419e8457171f090588398b4eb619c","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/pvc-nginx.png","hash":"1d66319a61690cbe6a845474238060a4dc27e1e5","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/pod-nfs.png","hash":"f58f243592d8fb36010961dd21acfa67a7c016e3","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署RabbitMQ/service.png","hash":"71d9ec668af0d71f6d4109d20edd67ce9b654718","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/de-keys.png","hash":"938df8939f2379c671f8bc7356d52554e9caeeb7","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/getset.png","hash":"8eefa6f826b257446991fda494796082c99656ed","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-all.png","hash":"697b034c1b3b261373f3c1554d929b08d2705a83","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-exist.png","hash":"6388f4162d7e90aa58c2f934a530467ed532ab6b","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-hlen.png","hash":"079b4ea742f76be54c159ae9bb6c2e464dc96375","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-incry.png","hash":"b707ecf4eb79333a906514f32edec8ba0fb7246e","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-llen.png","hash":"075ed6429331fce57873553a6d39cb3fa0231b55","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-lrange.png","hash":"505bc266296be1a66fd66c92d0fae151314ee238","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-rpush.png","hash":"33eb6d42f57c721a2a07de21bdca7514af0259fb","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/keys.png","hash":"bfad8619efe71b6a77715013bd3239e399069c75","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/list-lpush.png","hash":"87bda31ba12794dc4a4685830cf02010a0e5f50b","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/nochange.png","hash":"7d8a11163763fff06aca62580ffe175743395097","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/nokey.png","hash":"64c211d8449e23684c6c646b3a3797486e220ab4","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-add.png","hash":"cc5b41da1c40dbf61ac8b71e59f9cb4b6e174a47","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-get.png","hash":"4f31297c32047f44c68c00295f26cf76c4d93485","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-scard.png","hash":"54433a2175d00d18165d4e98c2ec5bd1d193046f","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-sinter.png","hash":"0a6cc53a995cf9e0341503c43954f3d23c9aa219","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-sinterstore.png","hash":"34e4ba587a5173c9d8c65410903559914e7e6d7a","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-sismember.png","hash":"db6358806f9a8da219f44104705bb7988b83c68e","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-smembers.png","hash":"ef211a3f1f2d674b7e0230c373ca2fa158be27ce","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-srandmember.png","hash":"a8091c348a74262d901c809680d206e399163e48","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-sunion.png","hash":"29f0fd2bd32006185c3251682be743f63b07c4ba","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/step.png","hash":"4e5898b74cb83788b3949bd5e445034142bd32b4","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/zadd.png","hash":"926ab077c225f2a810b80d68d72fb899a0d31f55","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/zscore.png","hash":"298ddbab9596bc2fe3d6a2ea638ca4c965bc47eb","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/zcount.png","hash":"55b1a7daa2cf97b7fc2411b4deeedbfc58fbaf73","modified":1619953302824},{"_id":"public/2021/04/06/部署单点zookeeper/start.png","hash":"7bbc0d33cb95c84846c4ac35c60771e03aaa5a52","modified":1619953302824},{"_id":"public/2021/04/06/部署单点zookeeper/stop.png","hash":"aa628731318d5f2fb3cffb53812526fa43bce2f7","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/calico-ip.png","hash":"09ce9a83c995cb0c4d555ddf2ece17500adec831","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/add-cluster-2.png","hash":"1b9de318aa257d11f94f4b6ba965d7573bc78610","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/add-cluster-1.png","hash":"42dcdd324f050f3db4502b034cc8c43c5336b2db","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/configmap.png","hash":"6eaaf553c9288b6be7d7b30f51d016dc41dc191b","modified":1619953302824},{"_id":"public/2021/04/13/升级集群到1-18/newversion.png","hash":"062c93633044768b7377667e0dc584458735d6ba","modified":1619953302824},{"_id":"public/2021/04/13/升级集群到1-18/carbon.png","hash":"b29c1c8c65ae1c923b7e6009c303c56366e01247","modified":1619953302824},{"_id":"public/2021/04/13/升级集群到1-18/update-kubeadm.png","hash":"3debb778ab887ba714bdc7d4315db8bf3771b99a","modified":1619953302824},{"_id":"public/2021/04/13/升级集群到1-18/update-res.png","hash":"da5105cb9de4db6fb586379f651cb8ebb897eb77","modified":1619953302824},{"_id":"public/2021/04/13/升级集群到1-18/update.png","hash":"04431574468c7db31d2d96d39ca4d7b710dc5f11","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/nfs-client.png","hash":"e4f03cecc4d0f70d02a9765d1349014885ab1217","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/pvc.png","hash":"5642f98a4804c3033865c7dc83cc3999fbed4fd0","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署RabbitMQ/bushu.png","hash":"51b3273b0ed83d2f03df80e5b08903682752c58f","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/append.png","hash":"0b2f55d36b6702a33de63cbae58affbc8f8cde84","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-getset.png","hash":"68a53734c38da966e34381a55c9d4d7fd8736ec1","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-lpoprpush.png","hash":"5ccd17004348ffe61755e0972054a268ddd25e6d","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-lset.png","hash":"4cb94a5862668d64862413ea7553e893d161a05b","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-rpop.png","hash":"7d8b6b470dccf12fb2e8d87271d79b97a961b440","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-pushx.png","hash":"d82bdce53514c6336bfc0ef16a60f8202941a957","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/incr-decr.png","hash":"6c94a881cf433a2264a9e9ff0e8d705e03a50e25","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-sdiffstore.png","hash":"c7fe7d5acd7d7487a911c9d39f0a9d3bf91a8444","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-srem.png","hash":"3c39c93c8ec56532b83d65f605c048cfe273fe73","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-sunionstore.png","hash":"368839cc2edda8798df059e590eac8414f43bad7","modified":1619953302824},{"_id":"public/2021/04/06/部署单点zookeeper/status.png","hash":"7c61976b3a98b4ba936634e260b1456e66a60338","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/getnode.png","hash":"cca3144948217ad6da5e3a1d76318129645a4f3f","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/ipvs.png","hash":"8fbcc475b70df71470e99c27de0c5ac0e85975e5","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/nodes.png","hash":"5a4cbbd814630d38b64eb765ddb9c5a6f6248e7e","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/es-pod.png","hash":"f4ceee98f71d989d64f60701a5bc9957768046f3","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/kafka.png","hash":"95315c131198e1d78e9e76c04419e004aa627edb","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/logstash-pod.png","hash":"3b98ea318afe0f720884d37dedf3115caf97a67e","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/pod.png","hash":"451787216850a069ced1278fd42c1d37bea6f217","modified":1619953302824},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1619953302824},{"_id":"public/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1619953302824},{"_id":"public/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1619953302824},{"_id":"public/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1619953302824},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1619953302824},{"_id":"public/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1619953302824},{"_id":"public/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1619953302824},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1619953302824},{"_id":"public/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1619953302824},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1619953302824},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1619953302824},{"_id":"public/css/index.css","hash":"d955f3a4c6a05310eb5354404ac1ef9cbd28fe8c","modified":1619953302824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/pod.png","hash":"5d27bac9f250f8c1fa0582d179135d8e4182e519","modified":1619953302824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/v1.png","hash":"fa31197af7e26528f5825fccea9cba7e584e0f2e","modified":1619953302824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/v2-never.png","hash":"a5bd79e1cf70bbf210658a923beb3e64039294e2","modified":1619953302824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/v2-wight.png","hash":"d6309a6c2f52b75ed625ef6a1f1d22c6d29ca622","modified":1619953302824},{"_id":"public/2021/04/13/升级集群到1-18/update-node.png","hash":"4b383fa12090e0107da8a07853060b1bd97cf61d","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署redis集群/create.png","hash":"328923445273cb0e937fac417a95e8ee830c397b","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署redis集群/info.png","hash":"a5be50fe42597778e979a80f5f133a990bc853fd","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-del.png","hash":"de7769e2ad3fde7d93af400ffcb9e7be71d6fdcd","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-linsert.png","hash":"277b58e4e6359369259ae36a595b622bbe2f71e9","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/set-sdiff.png","hash":"9188fa9a0b946c43c2fd5514440ae6e1ede9d9d2","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/calico-node.png","hash":"d13121504e5bdae80705842b27e49ef3485f604d","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/ipvs-rule.png","hash":"7e7ceb0a160f685d3a9dee118dcb3097d08c6972","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/kibana-pod.png","hash":"56d4801ffe35a7b67bce82d1671813439be8609a","modified":1619953302824},{"_id":"public/js/main.js","hash":"c2e386dfd6614123a58dd87a66a7fc9bcca8b64f","modified":1619953302824},{"_id":"public/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1619953302824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/v2-ha.png","hash":"ff05d70835407c65fffb62ca46f31c6d507b8a3f","modified":1619953302824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/v2-true.png","hash":"0dc651430e734e14767c987d9351c9a8ed39e161","modified":1619953302824},{"_id":"public/2021/04/13/升级集群到1-18/drain.png","hash":"68b4dc6b5bfb4a6b70f069eb2bc5e5936d9a2b79","modified":1619953302824},{"_id":"public/2021/03/23/在k8s中使用nfs存储/storageclass-pvc.png","hash":"96817ede171b4d89e9a947f6444c79d2950da7e4","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署redis集群/detail.png","hash":"a6f861bd03ed14212a8232be8eced51e19e7c11a","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/ansible-check.png","hash":"17ed2a4a4577997d4c3caf3f94f58bcc56c0d516","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/cluster-check.png","hash":"24ce5c0972b9b454e7795bf9ced171962d821482","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/etcd-helth.png","hash":"0d4545d89bd3805f15df8ccadb765ce7a6c1de14","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/etcd-member.png","hash":"2ab5159afa1cb59f8cd52355ceaee1d928d10a8d","modified":1619953302824},{"_id":"public/img/avator.png","hash":"b2bc08b8559a3a777724aadcbaebbaf3bef791ef","modified":1619953302824},{"_id":"public/2021/03/20/ingress-nginx实现蓝绿、灰度发布/v2.png","hash":"9849d93155f759958c418acff7993cad654d6120","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署RabbitMQ/log.png","hash":"67f08866e31bf7be0b10733147d91acb87c318cb","modified":1619953302824},{"_id":"public/2021/04/13/部署Nginx/install_source.png","hash":"a27b02fcf010964ca833d53dd2fc549e52949a9e","modified":1619953302824},{"_id":"public/2021/04/17/docker方式部署kafka集群/status.png","hash":"3f87bb1677e78a2cf77ce34ba2573edbef8977da","modified":1619953302824},{"_id":"public/2021/04/05/部署docker-ce/docker-version.png","hash":"e383d33324bbd65bf138431b0e3d098d166f1d4a","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/etcd-cluster.png","hash":"3f8dfed7be6d7b786067aca7f64141d056df2aa9","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/kafka-pod.png","hash":"e73125790e7a51ad2f724fd518937ff9c0764da6","modified":1619953302824},{"_id":"public/2021/04/18/常见类型命令操作/hash-lrem.png","hash":"d1073eb521f235bd61d12d4bfe9438d6596629d4","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/kubeadm-init.png","hash":"001a0c763ade70a0cc5585b495975b64fee04591","modified":1619953302824},{"_id":"public/2021/03/27/在k8s中使用EFLK进行日志收集/kibana.png","hash":"865180e084989d63064f9c984d03a11afc47b80d","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署mysql主从集群/zhucong.png","hash":"dc901cd5725175a1af914f17337eeb91e1439510","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/check-master.png","hash":"7eaef082099e0122c06ca5c2396b514ef47eae51","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署RabbitMQ/web.png","hash":"aca80a860af76862c1510399be20e585580aaa45","modified":1619953302824},{"_id":"public/2021/03/28/kubeadm部署k8s-1-18集群/single-master.png","hash":"c6efea5343719c2248028b2063717f8b784b4ffa","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署RabbitMQ/client_log.png","hash":"5835d6bb7d706b615bcd8f49239d7e3ae82aa82b","modified":1619953302824},{"_id":"public/2021/03/20/在k8s中部署redis集群/cluster.png","hash":"cfbc50e50fe764805893ed022cfcfd33043b6036","modified":1619953302824},{"_id":"source/_posts/Redis分布式锁.md","hash":"d78fba23f820f52f9843c4b1cd7fab5f33cf59bc","modified":1622973733410},{"_id":"source/_posts/Redis分布式锁/.DS_Store","hash":"b6f3a3675de968f8011c5c34288f4df3e5276b85","modified":1622973677184},{"_id":"source/_posts/Redis分布式锁/fenbushi.png","hash":"b1691a96a544b230b87826b683bf273aa3de5317","modified":1609049302131},{"_id":"public/2021/06/06/Redis分布式锁/index.html","hash":"3842023f748fb83aeeed1b0cb4f1c82e7aa2f27f","modified":1641725436824},{"_id":"public/archives/2021/06/index.html","hash":"acff3ed54de7f6f180d0020d9e09d9c0daec0768","modified":1641725485918},{"_id":"public/2021/06/06/Redis分布式锁/fenbushi.png","hash":"b1691a96a544b230b87826b683bf273aa3de5317","modified":1622973741356},{"_id":"source/_posts/python操作文件.md","hash":"0b300ffa7b7eced4c694c79e61e07032183c5e50","modified":1636884758418},{"_id":"public/2021/06/07/python操作文件/index.html","hash":"d39e2264c4e8aad15cd4d3be3869e3a1de8442ec","modified":1641725436824},{"_id":"public/categories/编程/index.html","hash":"43946f3a233948592ee88945428afabb81fa92f6","modified":1641725485918},{"_id":"public/tags/Python/index.html","hash":"eea6c40b7cb1c2d9f00f018f5af91e0eaa616f21","modified":1641725485918},{"_id":"public/categories/编程/Python/index.html","hash":"d8f7ef89d373424d6706da92d5cbcfc6d497661e","modified":1641725485918},{"_id":"public/categories/编程/Python/文件I-O/index.html","hash":"308ed0501155ef627a73ea42bc3fd55bb1b75a1b","modified":1641725485918},{"_id":"source/_posts/使用Request库发送http请求.md","hash":"361fac1643498218169aee31703600a0658768e7","modified":1623647822699},{"_id":"public/2021/06/14/使用Request库发送http请求/index.html","hash":"43d04c849a87e07a07bbf6bb43d07bd2c0a22144","modified":1641725436824},{"_id":"public/categories/编程/Python/网络/index.html","hash":"cf59f806db8517e12d4592608a66759fb4d925a0","modified":1641725485918},{"_id":"source/_posts/使用httpx发送http请求.md","hash":"816823bcf6c331df2aba7e3f74e1a9ab9a9a83af","modified":1623647977613},{"_id":"public/2021/06/14/使用httpx发送http请求/index.html","hash":"0953993a583e95e463593e55d425e534adde07c5","modified":1641725436824},{"_id":"source/_posts/python操作mysql数据库.md","hash":"827263e2483e03e4621aae30d3c45d25a78f28f6","modified":1623649214084},{"_id":"public/2021/06/14/python操作mysql数据库/index.html","hash":"97c1427817ece36dc603b49c13feda34e81cbe3e","modified":1641725436824},{"_id":"public/categories/编程/Python/DB操作/index.html","hash":"89a2a4cece840516f1ed34a1afea878ed6a584cf","modified":1641725485918},{"_id":"source/_posts/kubernetes中的服务质量QoS.md","hash":"a31bd424b10be84c0ef8a839e5a170aad80cc48f","modified":1628523837025},{"_id":"public/2021/08/09/kubernetes中的服务质量QoS/index.html","hash":"ea4a8999bd0184260108f0dbaa6933e9e2c347f8","modified":1641725436824},{"_id":"public/categories/Kubernetes/服务质量/index.html","hash":"99cfd71d326b61dcb9e7897be4e116de0091c41a","modified":1641725485918},{"_id":"public/archives/2021/08/index.html","hash":"d3a35df7d23d74b64710e5ff7a51eba5631475b0","modified":1641725485918},{"_id":"source/_posts/使用kubeadm管理集群证书.md","hash":"10a80ba08503b4e51dac6682ff8d91bfc9b092f6","modified":1629533529238},{"_id":"source/_posts/使用kubeadm管理集群证书/.DS_Store","hash":"95d5b138dd058d6ab181eb08e4d4c00ccbdaccc4","modified":1629533490380},{"_id":"source/_posts/使用kubeadm管理集群证书/update.png","hash":"b2cd66d8ba085164e75d3442a628ea57794e0bb3","modified":1599290835508},{"_id":"public/2021/08/21/使用kubeadm管理集群证书/index.html","hash":"236ef5434416f2b7806764fab187d69b6f513892","modified":1641725436824},{"_id":"public/2021/08/21/使用kubeadm管理集群证书/update.png","hash":"b2cd66d8ba085164e75d3442a628ea57794e0bb3","modified":1629533534075},{"_id":"source/_posts/部署harbor镜像仓库服务.md","hash":"53bb044403d666e38f4e4ce3c7c274e6f65866f2","modified":1629534377632},{"_id":"source/_posts/部署harbor镜像仓库服务/.DS_Store","hash":"c2de763abf4604c695d8a1e510c580efa4f4ef3b","modified":1629534020623},{"_id":"source/_posts/部署harbor镜像仓库服务/index.png","hash":"0193f041c17c987d84e2113b22440f5372101efd","modified":1599290835504},{"_id":"source/_posts/部署harbor镜像仓库服务/login.png","hash":"2b928534465f436f986bfe1aa021557526ddef7a","modified":1599290835504},{"_id":"source/_posts/部署harbor镜像仓库服务/prepare.png","hash":"4597ddb40a2d1e297e1544c8b7333754133d6668","modified":1599290835505},{"_id":"source/_posts/部署harbor镜像仓库服务/push.png","hash":"0c9d5e05f2b7dca4cce4c0db79c1ccf77f4fcb29","modified":1599290835506},{"_id":"source/_posts/部署harbor镜像仓库服务/check.png","hash":"f239402929e192b25980d8776732ca43e5524997","modified":1599290835503},{"_id":"public/2021/08/21/部署harbor镜像仓库服务/index.html","hash":"8d49d1cfbac462f49da88eb1fd7b55c48b2183e6","modified":1641725436824},{"_id":"public/2021/08/21/部署harbor镜像仓库服务/index.png","hash":"0193f041c17c987d84e2113b22440f5372101efd","modified":1629534344752},{"_id":"public/2021/08/21/部署harbor镜像仓库服务/login.png","hash":"2b928534465f436f986bfe1aa021557526ddef7a","modified":1629534344752},{"_id":"public/2021/08/21/部署harbor镜像仓库服务/prepare.png","hash":"4597ddb40a2d1e297e1544c8b7333754133d6668","modified":1629534344752},{"_id":"public/2021/08/21/部署harbor镜像仓库服务/push.png","hash":"0c9d5e05f2b7dca4cce4c0db79c1ccf77f4fcb29","modified":1629534344752},{"_id":"public/2021/08/21/部署harbor镜像仓库服务/check.png","hash":"f239402929e192b25980d8776732ca43e5524997","modified":1629534344752},{"_id":"source/_posts/使用HPA进行服务自动扩缩容.md","hash":"22c348f1aa43fd75901db1d7a02edce3e38c9bf1","modified":1629535565872},{"_id":"source/_posts/部署MetricServer.md","hash":"d77f39436f3756c253059ab789dd63873292e5a4","modified":1629535125022},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/k8s-hpa-ms.png","hash":"da3a08c33019b622fcfc7c1d08ebe83d71df6325","modified":1599290835489},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/.DS_Store","hash":"5f3961d61320515e72c117463cce4a3d10a82090","modified":1629534669039},{"_id":"source/_posts/部署MetricServer/.DS_Store","hash":"2b5a26a43c5e25c868ee3cfc9c422c0ceb5a435f","modified":1629534876956},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/hpa-cpu.png","hash":"499d7d962e6b16f12bb15e4ebfc0d3cf24f7b130","modified":1599290835488},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/hpa-mem.png","hash":"aac9ad0981414d627ed8e14091d94ca7106fca5e","modified":1599290835489},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/pod.png","hash":"a6dcf448d5e288045955d87179164e1c6d0795a9","modified":1599290835490},{"_id":"source/_posts/部署MetricServer/check.png","hash":"f40d04bd0f0a65a61c076fab5f83625a963c28f8","modified":1599290835528},{"_id":"public/2021/08/21/部署MetricServer/index.html","hash":"535a1a8ab43d9f225c66b1e1176a089dff1b9e3b","modified":1641725436824},{"_id":"public/2021/08/21/使用HPA进行服务自动扩缩容/index.html","hash":"cb98f3eec34d0e1517393d77c69b0c84837610ff","modified":1641725436824},{"_id":"public/categories/Kubernetes/HPA/index.html","hash":"efbb5061c9fdaf567a9770229c60e5d8e6d86ec9","modified":1641725485918},{"_id":"public/page/5/index.html","hash":"f68663af46201cea2ff578b2a42511bfd7e5df25","modified":1641725485918},{"_id":"public/2021/08/21/使用HPA进行服务自动扩缩容/k8s-hpa-ms.png","hash":"da3a08c33019b622fcfc7c1d08ebe83d71df6325","modified":1629535128058},{"_id":"public/2021/08/21/使用HPA进行服务自动扩缩容/hpa-cpu.png","hash":"499d7d962e6b16f12bb15e4ebfc0d3cf24f7b130","modified":1629535128058},{"_id":"public/2021/08/21/使用HPA进行服务自动扩缩容/hpa-mem.png","hash":"aac9ad0981414d627ed8e14091d94ca7106fca5e","modified":1629535128058},{"_id":"public/2021/08/21/使用HPA进行服务自动扩缩容/pod.png","hash":"a6dcf448d5e288045955d87179164e1c6d0795a9","modified":1629535128058},{"_id":"public/2021/08/21/部署MetricServer/check.png","hash":"f40d04bd0f0a65a61c076fab5f83625a963c28f8","modified":1629535128058},{"_id":"source/_posts/部署RabbitMQ.md","hash":"bbae9fe22fb5feca6f83a413b3e090306b624b1c","modified":1629537825055},{"_id":"source/_posts/部署RabbitMQ/.DS_Store","hash":"1da6f64c1ba0f0f11f8ae6293f0ca52793dd71a3","modified":1629537794073},{"_id":"source/_posts/部署RabbitMQ/index.png","hash":"1094d319f6981b978db6f9a6d26dd0a765505819","modified":1599290835562},{"_id":"public/2021/08/21/部署RabbitMQ/index.html","hash":"782434d93645d4f5404f0a2244c16177bebf5f46","modified":1641725436824},{"_id":"public/2021/08/21/部署RabbitMQ/index.png","hash":"1094d319f6981b978db6f9a6d26dd0a765505819","modified":1629537828943},{"_id":"source/_posts/监控网卡流量.md","hash":"103144c195584c14a3c160f5d716057b8bd0c293","modified":1636884526427},{"_id":"public/2021/11/14/监控网卡流量/index.html","hash":"93d5c53b7d804d07b654547ed80820a4ecd3db88","modified":1641725436824},{"_id":"public/archives/2021/11/index.html","hash":"bca29909d075fb0cc499587fb85361db9408cd8d","modified":1641725485918},{"_id":"public/categories/编程/实用脚本/index.html","hash":"27281d8f04356bf5e645bcfc9d29367229c9a840","modified":1641725485918},{"_id":"public/tags/shell脚本/index.html","hash":"4eb4871b0e8253dca0fba08a5f862ae683fe3f87","modified":1641725485918},{"_id":"source/_posts/python文件操作及内存数据读写.md","hash":"f7e3b28927c0c7d2944f31d3874fe2d35068fee6","modified":1636885201883},{"_id":"public/2021/11/14/python文件操作及内存数据读写/index.html","hash":"24bf38ae2ec7ae3cfbb006fee3eb28c806019b4e","modified":1641725436824},{"_id":"source/_posts/python操作mongodb.md","hash":"9b6b30ef86763893e65d517ef920f49af9134b4f","modified":1636886447391},{"_id":"source/_posts/python操作redis.md","hash":"81f6a03ea9eec33f7c23bd3a193c67ff50ad41ab","modified":1636886603328},{"_id":"public/2021/11/14/python操作redis/index.html","hash":"22bde9dd5c883e933d5b2238f1b9dd2b09ff2d3f","modified":1641725436824},{"_id":"public/2021/11/14/python操作mongodb/index.html","hash":"ea2579b42f9a58b34dfa3a968ff79ea80eeeb93d","modified":1641725436824},{"_id":"public/archives/page/4/index.html","hash":"1939ab38754a3588b41af314e8a825f119512fac","modified":1641725485918},{"_id":"public/archives/2021/page/4/index.html","hash":"8c94547a78ef9cf0648574f88aa615bc08221a8f","modified":1641725485918},{"_id":"public/categories/Python/index.html","hash":"d96150ed59b45ea43ec5470313277d96de4763f7","modified":1636886534621},{"_id":"public/categories/Python/DB操作/index.html","hash":"7df3af93308bf6c79158daea667540e72279573a","modified":1636886534621},{"_id":"source/_posts/python读取不同格式的配置文件方式.md","hash":"31627834a11d48f2680bd99d588d93025d1c16c8","modified":1637476954804},{"_id":"public/2021/11/21/python读取不同格式的配置文件方式/index.html","hash":"d8a7c414517ac335ca27bf766761058a28348b2e","modified":1641725436824},{"_id":"source/_posts/linux上安装python.md","hash":"d63aa1835b147b72b7da84721b6a3c63cf355a77","modified":1637477267045},{"_id":"public/2021/11/21/linux上安装python/index.html","hash":"7f34a98c72a04b8f01dee0dd15c0520660cac6e9","modified":1641725436824},{"_id":"public/categories/编程/Python/安装部署/index.html","hash":"abc6573da69abaa165dc6e725666358c4647ac5d","modified":1641725485918},{"_id":"source/_posts/MacOS安装mysqlclient失败.md","hash":"b660cf167382806a2cf809ff752cd61417a2602e","modified":1637477468055},{"_id":"public/2021/11/21/MacOS安装mysqlclient失败/index.html","hash":"3aae8b52b05286297b37b982587da130252594cb","modified":1641725436824},{"_id":"source/_posts/关于tcp-tw-reuse.md","hash":"92f6dba2dd9e20ce1a8d92105abc587b5a8a9cd3","modified":1641724409558},{"_id":"source/_posts/关于tcp-tw-reuse/rst.png","hash":"1e39ff2776b4de8b2f0c71494ccb705439df735e","modified":1641723831727},{"_id":"source/_posts/关于tcp-tw-reuse/gg.png","hash":"20f7d1ea4e31de627a52f40b5af1960446cce60e","modified":1641723516608},{"_id":"source/_posts/关于tcp-tw-reuse/ss.png","hash":"24b88dbe3d0f7268201d93f1af8a2ecf3f78318c","modified":1641724363137},{"_id":"source/_posts/关于tcp-tw-reuse/qq.png","hash":"b21bdf86fc9edacb6937e20f714b3c300d2abf12","modified":1641723073151},{"_id":"source/_posts/关于tcp-tw-reuse/4huishou.png","hash":"3a5361938ea21167be78a5733e50c1463e02f21a","modified":1641721729531},{"_id":"source/_posts/关于tcp-tw-reuse/qc.png","hash":"125bfe09ca02fec13fc1e54563ffd8ba49c06122","modified":1641722888593},{"_id":"source/_posts/关于tcp-tw-reuse/aaa.png","hash":"ce6645d45579a9d7a5dc1c72ffb403ec5e6b3f27","modified":1641723967438},{"_id":"public/2022/01/09/关于tcp-tw-reuse/index.html","hash":"264ce51800aed570c175da504004cb7e3be474ab","modified":1641725436824},{"_id":"public/categories/面试/index.html","hash":"2d83c521733da99a3b45f8d7bf9a7d1190bc74d0","modified":1641725485918},{"_id":"public/categories/面试/操作系统/index.html","hash":"9d0ff81fa5b73f2085a83621deb1f9763c42e000","modified":1641725485918},{"_id":"public/tags/网络/index.html","hash":"a886a4bb6b061371a66c1a06852f538edb165f1b","modified":1641725485918},{"_id":"public/archives/2022/index.html","hash":"990447f057d084463a8458775838df0fe3d4b1ba","modified":1641725485918},{"_id":"public/archives/2022/01/index.html","hash":"8cd6c5334f15e943a8d0ccd973f6a1c3e2459622","modified":1641725485918},{"_id":"public/tags/面试/index.html","hash":"2f67a61655d24e74b42c02f2f3eb6e816ff5405a","modified":1641725485918},{"_id":"public/2022/01/09/关于tcp-tw-reuse/rst.png","hash":"1e39ff2776b4de8b2f0c71494ccb705439df735e","modified":1641725436824},{"_id":"public/2022/01/09/关于tcp-tw-reuse/gg.png","hash":"20f7d1ea4e31de627a52f40b5af1960446cce60e","modified":1641725436824},{"_id":"public/2022/01/09/关于tcp-tw-reuse/qq.png","hash":"b21bdf86fc9edacb6937e20f714b3c300d2abf12","modified":1641725436824},{"_id":"public/2022/01/09/关于tcp-tw-reuse/ss.png","hash":"24b88dbe3d0f7268201d93f1af8a2ecf3f78318c","modified":1641725436824},{"_id":"public/2022/01/09/关于tcp-tw-reuse/4huishou.png","hash":"3a5361938ea21167be78a5733e50c1463e02f21a","modified":1641725436824},{"_id":"public/2022/01/09/关于tcp-tw-reuse/qc.png","hash":"125bfe09ca02fec13fc1e54563ffd8ba49c06122","modified":1641725436824},{"_id":"public/2022/01/09/关于tcp-tw-reuse/aaa.png","hash":"ce6645d45579a9d7a5dc1c72ffb403ec5e6b3f27","modified":1641725436824}],"Category":[{"name":"数据库","_id":"cko72de5f0004p0kld5ebap1d"},{"name":"消息中间件","_id":"cko72de5n000hp0kl4hvb06qt"},{"name":"Zookeeper","_id":"cko72de5p000np0klahpp2qzb"},{"name":"Redis","parent":"cko72de5f0004p0kld5ebap1d","_id":"cko72de5s000tp0kl55e60j94"},{"name":"Kubernetes","_id":"cko72de5u000zp0klb5as0sml"},{"name":"Kafka","parent":"cko72de5n000hp0kl4hvb06qt","_id":"cko72de64001sp0klhl1o2foo"},{"name":"部署","parent":"cko72de5p000np0klahpp2qzb","_id":"cko72de680027p0kl9asf57ww"},{"name":"基础","parent":"cko72de5s000tp0kl55e60j94","_id":"cko72de6a002kp0kle0hg1qao"},{"name":"MySQL","parent":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6b002pp0klgm1u4b1l"},{"name":"Ingress-nginx","parent":"cko72de5u000zp0klb5as0sml","_id":"cko72de6c002tp0klgyrj7yv2"},{"name":"RabbitMQ","parent":"cko72de5n000hp0kl4hvb06qt","_id":"cko72de6c002up0kl1xo44kzj"},{"name":"部署","parent":"cko72de5s000tp0kl55e60j94","_id":"cko72de6d002zp0kl2wh13itv"},{"name":"常用操作","parent":"cko72de5s000tp0kl55e60j94","_id":"cko72de6e0031p0kl2tm91tmu"},{"name":"数据持久化和主从复制","parent":"cko72de5s000tp0kl55e60j94","_id":"cko72de6f003bp0kl53p181kn"},{"name":"Nginx","_id":"cko72de6f003ep0kl9g6166cv"},{"name":"Docker","_id":"cko72de6g003hp0kl9pdi4v82"},{"name":"常用操作","parent":"cko72de5p000np0klahpp2qzb","_id":"cko72de6g003kp0klfx55b4eu"},{"name":"存储","_id":"cko72de6h003np0klfy8o11rp"},{"name":"部署","parent":"cko72de64001sp0klhl1o2foo","_id":"cko72de6h003qp0klgnrf1e43"},{"name":"集群部署","parent":"cko72de5u000zp0klb5as0sml","_id":"cko72de6k0044p0kl2d4rgdeb"},{"name":"存储","parent":"cko72de5u000zp0klb5as0sml","_id":"cko72de6k004bp0klchsye8xl"},{"name":"部署","parent":"cko72de6b002pp0klgm1u4b1l","_id":"cko72de6l004ep0kl7d3k8qea"},{"name":"部署","parent":"cko72de6c002up0kl1xo44kzj","_id":"cko72de6m004hp0kl85xkawjr"},{"name":"常用命令","parent":"cko72de64001sp0klhl1o2foo","_id":"cko72de6n004np0kl3b2nfgkl"},{"name":"部署","parent":"cko72de6f003ep0kl9g6166cv","_id":"cko72de6o004up0kl9vg35bar"},{"name":"部署","parent":"cko72de6g003hp0kl9pdi4v82","_id":"cko72de6p004xp0kl8bwd5kgw"},{"name":"镜像仓库","parent":"cko72de6g003hp0kl9pdi4v82","_id":"cko72de6q0050p0kl5spm6zzf"},{"name":"NFS","parent":"cko72de6h003np0klfy8o11rp","_id":"cko72de6q0053p0klcr3887l5"},{"name":"NFS","parent":"cko72de6k004bp0klchsye8xl","_id":"cko72de6r0057p0kl2lnleeft"},{"name":"部署","parent":"cko72de6q0053p0klcr3887l5","_id":"cko72de6s005ap0kl80ts96hy"},{"name":"日志收集","parent":"cko72de5u000zp0klb5as0sml","_id":"cko72de6y005tp0klgx5j2ahm"},{"name":"编程","_id":"ckpmlsyqh0001udkl7m7v78qj"},{"name":"Python","parent":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckpmlsyqp0004udkl8osm2v64"},{"name":"文件I/O","parent":"ckpmlsyqp0004udkl8osm2v64","_id":"ckpmlsyqq0005udkl6s027hwb"},{"name":"网络","parent":"ckpmlsyqp0004udkl8osm2v64","_id":"ckpw5zz360002vjklbhs0arqy"},{"name":"DB操作","parent":"ckpmlsyqp0004udkl8osm2v64","_id":"ckpw6u1sa000267kl1ur8e509"},{"name":"服务质量","parent":"cko72de5u000zp0klb5as0sml","_id":"cks4t1ueo0002y5kl5vda47sj"},{"name":"HPA","parent":"cko72de5u000zp0klb5as0sml","_id":"ckslj567q0002oikl2u7sc0vf"},{"name":"实用脚本","parent":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckvz2sg910002dykla73jhbgo"},{"name":"Python","_id":"ckvz3yew00003y7kl692o5tbo"},{"name":"DB操作","parent":"ckvz3yew00003y7kl692o5tbo","_id":"ckvz3yew80008y7kldhpo0hzt"},{"name":"安装部署","parent":"ckpmlsyqp0004udkl8osm2v64","_id":"ckw8voxk9000211klb49i8x56"},{"name":"面试","_id":"cky74xt7m000196kl5qaugy1r"},{"name":"操作系统","parent":"cky74xt7m000196kl5qaugy1r","_id":"cky74xt82000496kl9q6h77np"}],"Data":[],"Page":[{"title":"tags","date":"2021-03-20T03:54:41.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2021-03-20 11:54:41\n---\n","updated":"2021-03-20T03:54:41.066Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cko72de590000p0klhwyl4z5g","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"标签","date":"2020-07-01T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-07-02 00:00:00\ntype: \"tags\"\n---\n","updated":"2020-09-05T07:27:15.590Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cko72de5d0002p0kl66xr54k6","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"archives","date":"2021-03-20T03:56:13.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-03-20 11:56:13\n---\n","updated":"2021-03-20T03:56:13.023Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cko72de5g0006p0kl7x5qh3ot","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"categories","date":"2021-03-20T03:54:34.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2021-03-20 11:54:34\n---\n","updated":"2021-03-20T03:54:34.907Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"cko72de5i0008p0klcmk110wb","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"分类","date":"2020-07-01T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-07-02 00:00:00\ntype: \"categories\"\n---\n","updated":"2020-09-05T07:27:15.590Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cko72de5j000ap0kl0ajrcrji","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""}],"Post":[{"title":"Redis内存模型","date":"2021-04-18T07:42:41.000Z","description":"介绍了Redis内存模型相关内容","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.php.cn%2Fupload%2Farticle%2F000%2F000%2F020%2F5d8d64a303c6f306.jpg&refer=http%3A%2F%2Fimg.php.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621323807&t=08f9c80f25acb9a40a9ea665452319f4","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis的内存模型\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n## 内存统计\n\n### 查看内存信息\n\n在通过redis-cli命令连接到redis后，可以使用下面的命令查看内存使用情况：\n\n```bash\n10.10.62.17:6379> INFO memory\n\nMemory\n\nused_memory:895280\nused_memory_human:874.30K\nused_memory_rss:11419648\nused_memory_rss_human:10.89M\nused_memory_peak:936168\nused_memory_peak_human:914.23K\n...\n```\n\n\n\n> info命令可以显示全部的redis服务器信息，后接参数memory则可以显示指定内容的信息。\n\n\n\n其中比较重要的信息如下所述。\n\n### 内存使用率\n\n- `used_memory`、`used_memory_human`：redis分配器分配的总内存，包括使用的swap，单位字节；后者是带单位显示；\n- `used_memory_rss`、`used_memory_rss_human`：redis进程占操作系统的内存，包括进程本身的内存、内存碎片，不包括swap，单位字节，后者带单位显示；\n- `used_memory`和`used_memory_rss`，前者是从Redis角度得到的量，后者是从操作系统角度得到的量。\n\n> 二者之所以有所不同，一方面是因为内存碎片和Redis进程运行需要占用内存，使得前者可能比后者小，另一方面虚拟内存的存在，使得前者可能比后者大。\n\n\n\n### 内存碎片比率\n\n- `mem_fragmentation_ratio`：内存碎片比率，该值是`used_memory_rss / used_memory`的比值，是衡量Redis内存碎片率的参数；这个值一般大于1，且该值越大，内存碎片比例越大。\n- `mem_fragmentation_ratio<1`，说明Redis使用了虚拟内存，由于虚拟内存的媒介是磁盘，比内存速度要慢很多，当这种情况出现时，应该及时排查，如果内存不足应该及时处理，如增加Redis节点、增加Redis服务器的内存、优化应用等。\n\n> 一般来说，`mem_fragmentation_ratio`在1.03左右是比较健康的状态（对于jemalloc来说）；刚开始redis服务器的`mem_fragmentation_ratio`值很大，是因为还没有向Redis中存入数据，Redis进程本身运行的内存使得`used_memory_rss `比`used_memory`大得多。\n\n\n\n### 内存分配器\n\n- `mem_allocator`：Redis使用的内存分配器，在编译时指定；内存分配器可以指定libc、jemalloc或者tcmalloc，默认是jemalloc。\n\n<br>\n\n## 内存划分\n\nredis在运行过程中，不仅存储的数据需要占据内存，其程序本省以及其他东西也会占用内存。\n\n\n\n### 数据\n\nredis数据存储在内存中，这部分数据会统计在`used_memory`中。\n\nRedis在存储对象时，并不是直接将数据扔进内存，而是会对对象进行各种包装：如redisObject、SDS等。\n\n\n\n### 进程本身占用\n\nRedis主进程本身运行肯定需要占用内存，如代码、常量池等等；这部分内存大约几兆，在大多数生产环境中与Redis数据占用的内存相比可以忽略。\n\n>  这部分内存不是由jemalloc分配，因此不会统计在used_memory中。\n\n\n\n除了主进程外，Redis创建的子进程运行也会占用内存，如Redis执行AOF、RDB重写时创建的子进程。当然，这部分内存不属于Redis进程，也不会统计在used_memory和used_memory_rss中。\n\n\n\n### 缓冲内存\n\n缓冲内存包括客户端缓冲区、复制积压缓冲区、AOF缓冲区等；\n\n- 客户端缓冲：存储客户端连接的输入输出缓冲；\n- 复制积压缓冲：用于部分复制功能；\n- AOF缓冲区：用于在进行AOF重写时，保存最近的写入命令。\n\n这部分内存由jemalloc分配，因此会统计在used_memory中。\n\n\n\n### 内存碎片\n\n内存碎片是Redis在分配、回收物理内存过程中产生的。如果对数据的更改频繁，而且数据之间的大小相差很大，可能导致redis释放的空间在物理内存中并没有释放，但redis又无法有效利用，这就形成了内存碎片。内存碎片不会统计在`used_memory`中。\n\n\n\n内存碎片的产生与对数据进行的操作、数据的特点等都有关；此外，与使用的内存分配器也有关系：如果内存分配器设计合理，可以尽可能的减少内存碎片的产生。\n\n> jemalloc便在控制内存碎片方面做的很好。\n\n\n\n如果Redis服务器中的内存碎片已经很大，可以通过安全重启的方式减小内存碎片：因为重启之后，Redis重新从备份文件中读取数据，在内存中进行重排，为每个数据重新选择合适的内存单元，减小内存碎片。\n\n<br>\n\n\n\n## redis数据存储细节\n\n### 概述\n\nredis存储数据的细节涉及到内存分配器（jemalloc）、简单动态字符串（SDS）、5种对象类型及内部编码、redisObject。下图为执行 set hello world时设计的数据模型。\n\n<img src=\"./mem-detail.png\" style=\"zoom:75%;\" />\n\n\n\n\n\n- `dictEntry`：redis中每一个键值对都有一个`dictEntry`，里面存储了指向Key和Value的指针；next指向下一个dictEntry，与本Key-Value无关；\n- `key`：Key（”hello”）并不是直接以字符串存储，而是存储在SDS结构中；\n- `redisObject`：Value(“world”)既不是直接以字符串存储，也不是像Key一样直接存储在SDS中，而是存储在redisObject中；\n- `jemalloc`：无论是DictEntry对象，还是redisObject、SDS对象，都需要内存分配器（如jemalloc）分配内存进行存储。以DictEntry对象为例，有3个指针组成，在64位机器下占24个字节，jemalloc会为它分配32字节大小的内存单元；\n\n\n\n不论Value是5种类型的哪一种，都是通过redisObject来存储的；而redisObject中的type字段指明了Value对象的类型，ptr字段则指向对象所在的地址。不过可以看出，字符串对象虽然经过了redisObject的包装，但仍然需要通过SDS存储。\n\n\n\n### jemalloc\n\njemalloc作为Redis的默认内存分配器，在减小内存碎片方面做的相对比较好。jemalloc在64位系统中，将内存空间划分为小、大、巨大三个范围；每个范围内又划分了许多小的内存块单位；当Redis存储数据时，会选择大小最合适的内存块进行存储。\n\n<img src=\"./jmealloc.png\" style=\"zoom:75%;\" />\n\n\n\n\n例如，如果需要存储大小为130字节的对象，jemalloc会将其放入160字节的内存单元中。\n\n\n\n### redisObject\n\n无论是哪种数据类型，Redis都不会直接存储，而是通过redisObject对象进行存储。Redis对象的类型、内部编码、内存回收、共享对象等功能，都需要redisObject支持。\n\nRedisObject包含以下的几个字段：\n\n- type：表示对象类型，4个比特，可以是字符串、列表、哈希等；\n- encoding：表示对象的内部编码，4比特。通过这个字段来为不同场景的对象设置不同编码，提高效率和灵活性；\n- lru：记录对象最后一次被程序访问的时间；\n- refcount：记录该对象别引用的次数，类型为整型；当创建新对象时refcount初始化为1；当有新程序使用该对象时refcount加1；当对象不再被一个新程序使用时refcount减1；当refcount变为0时，对象占用的内存会被释放；\n- ptr：ptr指针指向具体数据；\n\n\n\n### SDS\n\nSDS是简单动态字符串(Simple Dynamic String)的缩写，其包含以下几个字段：\n\n- buf：表示字节数组，用于存储字符串；\n- len：表示buf已使用的长度；\n- free：表示buf未使用的长度；\n\n","source":"_posts/Redis内存模型.md","raw":"---\ntitle: Redis内存模型\ndate: 2021-04-18 15:42:41\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 基础\ndescription: 介绍了Redis内存模型相关内容\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.php.cn%2Fupload%2Farticle%2F000%2F000%2F020%2F5d8d64a303c6f306.jpg&refer=http%3A%2F%2Fimg.php.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621323807&t=08f9c80f25acb9a40a9ea665452319f4\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis的内存模型\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n## 内存统计\n\n### 查看内存信息\n\n在通过redis-cli命令连接到redis后，可以使用下面的命令查看内存使用情况：\n\n```bash\n10.10.62.17:6379> INFO memory\n\nMemory\n\nused_memory:895280\nused_memory_human:874.30K\nused_memory_rss:11419648\nused_memory_rss_human:10.89M\nused_memory_peak:936168\nused_memory_peak_human:914.23K\n...\n```\n\n\n\n> info命令可以显示全部的redis服务器信息，后接参数memory则可以显示指定内容的信息。\n\n\n\n其中比较重要的信息如下所述。\n\n### 内存使用率\n\n- `used_memory`、`used_memory_human`：redis分配器分配的总内存，包括使用的swap，单位字节；后者是带单位显示；\n- `used_memory_rss`、`used_memory_rss_human`：redis进程占操作系统的内存，包括进程本身的内存、内存碎片，不包括swap，单位字节，后者带单位显示；\n- `used_memory`和`used_memory_rss`，前者是从Redis角度得到的量，后者是从操作系统角度得到的量。\n\n> 二者之所以有所不同，一方面是因为内存碎片和Redis进程运行需要占用内存，使得前者可能比后者小，另一方面虚拟内存的存在，使得前者可能比后者大。\n\n\n\n### 内存碎片比率\n\n- `mem_fragmentation_ratio`：内存碎片比率，该值是`used_memory_rss / used_memory`的比值，是衡量Redis内存碎片率的参数；这个值一般大于1，且该值越大，内存碎片比例越大。\n- `mem_fragmentation_ratio<1`，说明Redis使用了虚拟内存，由于虚拟内存的媒介是磁盘，比内存速度要慢很多，当这种情况出现时，应该及时排查，如果内存不足应该及时处理，如增加Redis节点、增加Redis服务器的内存、优化应用等。\n\n> 一般来说，`mem_fragmentation_ratio`在1.03左右是比较健康的状态（对于jemalloc来说）；刚开始redis服务器的`mem_fragmentation_ratio`值很大，是因为还没有向Redis中存入数据，Redis进程本身运行的内存使得`used_memory_rss `比`used_memory`大得多。\n\n\n\n### 内存分配器\n\n- `mem_allocator`：Redis使用的内存分配器，在编译时指定；内存分配器可以指定libc、jemalloc或者tcmalloc，默认是jemalloc。\n\n<br>\n\n## 内存划分\n\nredis在运行过程中，不仅存储的数据需要占据内存，其程序本省以及其他东西也会占用内存。\n\n\n\n### 数据\n\nredis数据存储在内存中，这部分数据会统计在`used_memory`中。\n\nRedis在存储对象时，并不是直接将数据扔进内存，而是会对对象进行各种包装：如redisObject、SDS等。\n\n\n\n### 进程本身占用\n\nRedis主进程本身运行肯定需要占用内存，如代码、常量池等等；这部分内存大约几兆，在大多数生产环境中与Redis数据占用的内存相比可以忽略。\n\n>  这部分内存不是由jemalloc分配，因此不会统计在used_memory中。\n\n\n\n除了主进程外，Redis创建的子进程运行也会占用内存，如Redis执行AOF、RDB重写时创建的子进程。当然，这部分内存不属于Redis进程，也不会统计在used_memory和used_memory_rss中。\n\n\n\n### 缓冲内存\n\n缓冲内存包括客户端缓冲区、复制积压缓冲区、AOF缓冲区等；\n\n- 客户端缓冲：存储客户端连接的输入输出缓冲；\n- 复制积压缓冲：用于部分复制功能；\n- AOF缓冲区：用于在进行AOF重写时，保存最近的写入命令。\n\n这部分内存由jemalloc分配，因此会统计在used_memory中。\n\n\n\n### 内存碎片\n\n内存碎片是Redis在分配、回收物理内存过程中产生的。如果对数据的更改频繁，而且数据之间的大小相差很大，可能导致redis释放的空间在物理内存中并没有释放，但redis又无法有效利用，这就形成了内存碎片。内存碎片不会统计在`used_memory`中。\n\n\n\n内存碎片的产生与对数据进行的操作、数据的特点等都有关；此外，与使用的内存分配器也有关系：如果内存分配器设计合理，可以尽可能的减少内存碎片的产生。\n\n> jemalloc便在控制内存碎片方面做的很好。\n\n\n\n如果Redis服务器中的内存碎片已经很大，可以通过安全重启的方式减小内存碎片：因为重启之后，Redis重新从备份文件中读取数据，在内存中进行重排，为每个数据重新选择合适的内存单元，减小内存碎片。\n\n<br>\n\n\n\n## redis数据存储细节\n\n### 概述\n\nredis存储数据的细节涉及到内存分配器（jemalloc）、简单动态字符串（SDS）、5种对象类型及内部编码、redisObject。下图为执行 set hello world时设计的数据模型。\n\n<img src=\"./mem-detail.png\" style=\"zoom:75%;\" />\n\n\n\n\n\n- `dictEntry`：redis中每一个键值对都有一个`dictEntry`，里面存储了指向Key和Value的指针；next指向下一个dictEntry，与本Key-Value无关；\n- `key`：Key（”hello”）并不是直接以字符串存储，而是存储在SDS结构中；\n- `redisObject`：Value(“world”)既不是直接以字符串存储，也不是像Key一样直接存储在SDS中，而是存储在redisObject中；\n- `jemalloc`：无论是DictEntry对象，还是redisObject、SDS对象，都需要内存分配器（如jemalloc）分配内存进行存储。以DictEntry对象为例，有3个指针组成，在64位机器下占24个字节，jemalloc会为它分配32字节大小的内存单元；\n\n\n\n不论Value是5种类型的哪一种，都是通过redisObject来存储的；而redisObject中的type字段指明了Value对象的类型，ptr字段则指向对象所在的地址。不过可以看出，字符串对象虽然经过了redisObject的包装，但仍然需要通过SDS存储。\n\n\n\n### jemalloc\n\njemalloc作为Redis的默认内存分配器，在减小内存碎片方面做的相对比较好。jemalloc在64位系统中，将内存空间划分为小、大、巨大三个范围；每个范围内又划分了许多小的内存块单位；当Redis存储数据时，会选择大小最合适的内存块进行存储。\n\n<img src=\"./jmealloc.png\" style=\"zoom:75%;\" />\n\n\n\n\n例如，如果需要存储大小为130字节的对象，jemalloc会将其放入160字节的内存单元中。\n\n\n\n### redisObject\n\n无论是哪种数据类型，Redis都不会直接存储，而是通过redisObject对象进行存储。Redis对象的类型、内部编码、内存回收、共享对象等功能，都需要redisObject支持。\n\nRedisObject包含以下的几个字段：\n\n- type：表示对象类型，4个比特，可以是字符串、列表、哈希等；\n- encoding：表示对象的内部编码，4比特。通过这个字段来为不同场景的对象设置不同编码，提高效率和灵活性；\n- lru：记录对象最后一次被程序访问的时间；\n- refcount：记录该对象别引用的次数，类型为整型；当创建新对象时refcount初始化为1；当有新程序使用该对象时refcount加1；当对象不再被一个新程序使用时refcount减1；当refcount变为0时，对象占用的内存会被释放；\n- ptr：ptr指针指向具体数据；\n\n\n\n### SDS\n\nSDS是简单动态字符串(Simple Dynamic String)的缩写，其包含以下几个字段：\n\n- buf：表示字节数组，用于存储字符串；\n- len：表示buf已使用的长度；\n- free：表示buf未使用的长度；\n\n","slug":"Redis内存模型","published":1,"updated":"2021-04-19T13:46:24.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5b0001p0kl2tr139t0","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis的内存模型</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"内存统计\"><a href=\"#内存统计\" class=\"headerlink\" title=\"内存统计\"></a>内存统计</h2><h3 id=\"查看内存信息\"><a href=\"#查看内存信息\" class=\"headerlink\" title=\"查看内存信息\"></a>查看内存信息</h3><p>在通过redis-cli命令连接到redis后，可以使用下面的命令查看内存使用情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.10.62.17:6379&gt; INFO memory</span><br><span class=\"line\"></span><br><span class=\"line\">Memory</span><br><span class=\"line\"></span><br><span class=\"line\">used_memory:895280</span><br><span class=\"line\">used_memory_human:874.30K</span><br><span class=\"line\">used_memory_rss:11419648</span><br><span class=\"line\">used_memory_rss_human:10.89M</span><br><span class=\"line\">used_memory_peak:936168</span><br><span class=\"line\">used_memory_peak_human:914.23K</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>info命令可以显示全部的redis服务器信息，后接参数memory则可以显示指定内容的信息。</p>\n</blockquote>\n<p>其中比较重要的信息如下所述。</p>\n<h3 id=\"内存使用率\"><a href=\"#内存使用率\" class=\"headerlink\" title=\"内存使用率\"></a>内存使用率</h3><ul>\n<li><code>used_memory</code>、<code>used_memory_human</code>：redis分配器分配的总内存，包括使用的swap，单位字节；后者是带单位显示；</li>\n<li><code>used_memory_rss</code>、<code>used_memory_rss_human</code>：redis进程占操作系统的内存，包括进程本身的内存、内存碎片，不包括swap，单位字节，后者带单位显示；</li>\n<li><code>used_memory</code>和<code>used_memory_rss</code>，前者是从Redis角度得到的量，后者是从操作系统角度得到的量。</li>\n</ul>\n<blockquote>\n<p>二者之所以有所不同，一方面是因为内存碎片和Redis进程运行需要占用内存，使得前者可能比后者小，另一方面虚拟内存的存在，使得前者可能比后者大。</p>\n</blockquote>\n<h3 id=\"内存碎片比率\"><a href=\"#内存碎片比率\" class=\"headerlink\" title=\"内存碎片比率\"></a>内存碎片比率</h3><ul>\n<li><code>mem_fragmentation_ratio</code>：内存碎片比率，该值是<code>used_memory_rss / used_memory</code>的比值，是衡量Redis内存碎片率的参数；这个值一般大于1，且该值越大，内存碎片比例越大。</li>\n<li><code>mem_fragmentation_ratio&lt;1</code>，说明Redis使用了虚拟内存，由于虚拟内存的媒介是磁盘，比内存速度要慢很多，当这种情况出现时，应该及时排查，如果内存不足应该及时处理，如增加Redis节点、增加Redis服务器的内存、优化应用等。</li>\n</ul>\n<blockquote>\n<p>一般来说，<code>mem_fragmentation_ratio</code>在1.03左右是比较健康的状态（对于jemalloc来说）；刚开始redis服务器的<code>mem_fragmentation_ratio</code>值很大，是因为还没有向Redis中存入数据，Redis进程本身运行的内存使得<code>used_memory_rss</code>比<code>used_memory</code>大得多。</p>\n</blockquote>\n<h3 id=\"内存分配器\"><a href=\"#内存分配器\" class=\"headerlink\" title=\"内存分配器\"></a>内存分配器</h3><ul>\n<li><code>mem_allocator</code>：Redis使用的内存分配器，在编译时指定；内存分配器可以指定libc、jemalloc或者tcmalloc，默认是jemalloc。</li>\n</ul>\n<br>\n\n<h2 id=\"内存划分\"><a href=\"#内存划分\" class=\"headerlink\" title=\"内存划分\"></a>内存划分</h2><p>redis在运行过程中，不仅存储的数据需要占据内存，其程序本省以及其他东西也会占用内存。</p>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><p>redis数据存储在内存中，这部分数据会统计在<code>used_memory</code>中。</p>\n<p>Redis在存储对象时，并不是直接将数据扔进内存，而是会对对象进行各种包装：如redisObject、SDS等。</p>\n<h3 id=\"进程本身占用\"><a href=\"#进程本身占用\" class=\"headerlink\" title=\"进程本身占用\"></a>进程本身占用</h3><p>Redis主进程本身运行肯定需要占用内存，如代码、常量池等等；这部分内存大约几兆，在大多数生产环境中与Redis数据占用的内存相比可以忽略。</p>\n<blockquote>\n<p> 这部分内存不是由jemalloc分配，因此不会统计在used_memory中。</p>\n</blockquote>\n<p>除了主进程外，Redis创建的子进程运行也会占用内存，如Redis执行AOF、RDB重写时创建的子进程。当然，这部分内存不属于Redis进程，也不会统计在used_memory和used_memory_rss中。</p>\n<h3 id=\"缓冲内存\"><a href=\"#缓冲内存\" class=\"headerlink\" title=\"缓冲内存\"></a>缓冲内存</h3><p>缓冲内存包括客户端缓冲区、复制积压缓冲区、AOF缓冲区等；</p>\n<ul>\n<li>客户端缓冲：存储客户端连接的输入输出缓冲；</li>\n<li>复制积压缓冲：用于部分复制功能；</li>\n<li>AOF缓冲区：用于在进行AOF重写时，保存最近的写入命令。</li>\n</ul>\n<p>这部分内存由jemalloc分配，因此会统计在used_memory中。</p>\n<h3 id=\"内存碎片\"><a href=\"#内存碎片\" class=\"headerlink\" title=\"内存碎片\"></a>内存碎片</h3><p>内存碎片是Redis在分配、回收物理内存过程中产生的。如果对数据的更改频繁，而且数据之间的大小相差很大，可能导致redis释放的空间在物理内存中并没有释放，但redis又无法有效利用，这就形成了内存碎片。内存碎片不会统计在<code>used_memory</code>中。</p>\n<p>内存碎片的产生与对数据进行的操作、数据的特点等都有关；此外，与使用的内存分配器也有关系：如果内存分配器设计合理，可以尽可能的减少内存碎片的产生。</p>\n<blockquote>\n<p>jemalloc便在控制内存碎片方面做的很好。</p>\n</blockquote>\n<p>如果Redis服务器中的内存碎片已经很大，可以通过安全重启的方式减小内存碎片：因为重启之后，Redis重新从备份文件中读取数据，在内存中进行重排，为每个数据重新选择合适的内存单元，减小内存碎片。</p>\n<br>\n\n\n\n<h2 id=\"redis数据存储细节\"><a href=\"#redis数据存储细节\" class=\"headerlink\" title=\"redis数据存储细节\"></a>redis数据存储细节</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>redis存储数据的细节涉及到内存分配器（jemalloc）、简单动态字符串（SDS）、5种对象类型及内部编码、redisObject。下图为执行 set hello world时设计的数据模型。</p>\n<img src= \"/img/loading.gif\" data-src=\"./mem-detail.png\" style=\"zoom:75%;\" />\n\n\n\n\n\n<ul>\n<li><code>dictEntry</code>：redis中每一个键值对都有一个<code>dictEntry</code>，里面存储了指向Key和Value的指针；next指向下一个dictEntry，与本Key-Value无关；</li>\n<li><code>key</code>：Key（”hello”）并不是直接以字符串存储，而是存储在SDS结构中；</li>\n<li><code>redisObject</code>：Value(“world”)既不是直接以字符串存储，也不是像Key一样直接存储在SDS中，而是存储在redisObject中；</li>\n<li><code>jemalloc</code>：无论是DictEntry对象，还是redisObject、SDS对象，都需要内存分配器（如jemalloc）分配内存进行存储。以DictEntry对象为例，有3个指针组成，在64位机器下占24个字节，jemalloc会为它分配32字节大小的内存单元；</li>\n</ul>\n<p>不论Value是5种类型的哪一种，都是通过redisObject来存储的；而redisObject中的type字段指明了Value对象的类型，ptr字段则指向对象所在的地址。不过可以看出，字符串对象虽然经过了redisObject的包装，但仍然需要通过SDS存储。</p>\n<h3 id=\"jemalloc\"><a href=\"#jemalloc\" class=\"headerlink\" title=\"jemalloc\"></a>jemalloc</h3><p>jemalloc作为Redis的默认内存分配器，在减小内存碎片方面做的相对比较好。jemalloc在64位系统中，将内存空间划分为小、大、巨大三个范围；每个范围内又划分了许多小的内存块单位；当Redis存储数据时，会选择大小最合适的内存块进行存储。</p>\n<img src= \"/img/loading.gif\" data-src=\"./jmealloc.png\" style=\"zoom:75%;\" />\n\n\n\n\n<p>例如，如果需要存储大小为130字节的对象，jemalloc会将其放入160字节的内存单元中。</p>\n<h3 id=\"redisObject\"><a href=\"#redisObject\" class=\"headerlink\" title=\"redisObject\"></a>redisObject</h3><p>无论是哪种数据类型，Redis都不会直接存储，而是通过redisObject对象进行存储。Redis对象的类型、内部编码、内存回收、共享对象等功能，都需要redisObject支持。</p>\n<p>RedisObject包含以下的几个字段：</p>\n<ul>\n<li>type：表示对象类型，4个比特，可以是字符串、列表、哈希等；</li>\n<li>encoding：表示对象的内部编码，4比特。通过这个字段来为不同场景的对象设置不同编码，提高效率和灵活性；</li>\n<li>lru：记录对象最后一次被程序访问的时间；</li>\n<li>refcount：记录该对象别引用的次数，类型为整型；当创建新对象时refcount初始化为1；当有新程序使用该对象时refcount加1；当对象不再被一个新程序使用时refcount减1；当refcount变为0时，对象占用的内存会被释放；</li>\n<li>ptr：ptr指针指向具体数据；</li>\n</ul>\n<h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>SDS是简单动态字符串(Simple Dynamic String)的缩写，其包含以下几个字段：</p>\n<ul>\n<li>buf：表示字节数组，用于存储字符串；</li>\n<li>len：表示buf已使用的长度；</li>\n<li>free：表示buf未使用的长度；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis的内存模型</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"内存统计\"><a href=\"#内存统计\" class=\"headerlink\" title=\"内存统计\"></a>内存统计</h2><h3 id=\"查看内存信息\"><a href=\"#查看内存信息\" class=\"headerlink\" title=\"查看内存信息\"></a>查看内存信息</h3><p>在通过redis-cli命令连接到redis后，可以使用下面的命令查看内存使用情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.10.62.17:6379&gt; INFO memory</span><br><span class=\"line\"></span><br><span class=\"line\">Memory</span><br><span class=\"line\"></span><br><span class=\"line\">used_memory:895280</span><br><span class=\"line\">used_memory_human:874.30K</span><br><span class=\"line\">used_memory_rss:11419648</span><br><span class=\"line\">used_memory_rss_human:10.89M</span><br><span class=\"line\">used_memory_peak:936168</span><br><span class=\"line\">used_memory_peak_human:914.23K</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>info命令可以显示全部的redis服务器信息，后接参数memory则可以显示指定内容的信息。</p>\n</blockquote>\n<p>其中比较重要的信息如下所述。</p>\n<h3 id=\"内存使用率\"><a href=\"#内存使用率\" class=\"headerlink\" title=\"内存使用率\"></a>内存使用率</h3><ul>\n<li><code>used_memory</code>、<code>used_memory_human</code>：redis分配器分配的总内存，包括使用的swap，单位字节；后者是带单位显示；</li>\n<li><code>used_memory_rss</code>、<code>used_memory_rss_human</code>：redis进程占操作系统的内存，包括进程本身的内存、内存碎片，不包括swap，单位字节，后者带单位显示；</li>\n<li><code>used_memory</code>和<code>used_memory_rss</code>，前者是从Redis角度得到的量，后者是从操作系统角度得到的量。</li>\n</ul>\n<blockquote>\n<p>二者之所以有所不同，一方面是因为内存碎片和Redis进程运行需要占用内存，使得前者可能比后者小，另一方面虚拟内存的存在，使得前者可能比后者大。</p>\n</blockquote>\n<h3 id=\"内存碎片比率\"><a href=\"#内存碎片比率\" class=\"headerlink\" title=\"内存碎片比率\"></a>内存碎片比率</h3><ul>\n<li><code>mem_fragmentation_ratio</code>：内存碎片比率，该值是<code>used_memory_rss / used_memory</code>的比值，是衡量Redis内存碎片率的参数；这个值一般大于1，且该值越大，内存碎片比例越大。</li>\n<li><code>mem_fragmentation_ratio&lt;1</code>，说明Redis使用了虚拟内存，由于虚拟内存的媒介是磁盘，比内存速度要慢很多，当这种情况出现时，应该及时排查，如果内存不足应该及时处理，如增加Redis节点、增加Redis服务器的内存、优化应用等。</li>\n</ul>\n<blockquote>\n<p>一般来说，<code>mem_fragmentation_ratio</code>在1.03左右是比较健康的状态（对于jemalloc来说）；刚开始redis服务器的<code>mem_fragmentation_ratio</code>值很大，是因为还没有向Redis中存入数据，Redis进程本身运行的内存使得<code>used_memory_rss</code>比<code>used_memory</code>大得多。</p>\n</blockquote>\n<h3 id=\"内存分配器\"><a href=\"#内存分配器\" class=\"headerlink\" title=\"内存分配器\"></a>内存分配器</h3><ul>\n<li><code>mem_allocator</code>：Redis使用的内存分配器，在编译时指定；内存分配器可以指定libc、jemalloc或者tcmalloc，默认是jemalloc。</li>\n</ul>\n<br>\n\n<h2 id=\"内存划分\"><a href=\"#内存划分\" class=\"headerlink\" title=\"内存划分\"></a>内存划分</h2><p>redis在运行过程中，不仅存储的数据需要占据内存，其程序本省以及其他东西也会占用内存。</p>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><p>redis数据存储在内存中，这部分数据会统计在<code>used_memory</code>中。</p>\n<p>Redis在存储对象时，并不是直接将数据扔进内存，而是会对对象进行各种包装：如redisObject、SDS等。</p>\n<h3 id=\"进程本身占用\"><a href=\"#进程本身占用\" class=\"headerlink\" title=\"进程本身占用\"></a>进程本身占用</h3><p>Redis主进程本身运行肯定需要占用内存，如代码、常量池等等；这部分内存大约几兆，在大多数生产环境中与Redis数据占用的内存相比可以忽略。</p>\n<blockquote>\n<p> 这部分内存不是由jemalloc分配，因此不会统计在used_memory中。</p>\n</blockquote>\n<p>除了主进程外，Redis创建的子进程运行也会占用内存，如Redis执行AOF、RDB重写时创建的子进程。当然，这部分内存不属于Redis进程，也不会统计在used_memory和used_memory_rss中。</p>\n<h3 id=\"缓冲内存\"><a href=\"#缓冲内存\" class=\"headerlink\" title=\"缓冲内存\"></a>缓冲内存</h3><p>缓冲内存包括客户端缓冲区、复制积压缓冲区、AOF缓冲区等；</p>\n<ul>\n<li>客户端缓冲：存储客户端连接的输入输出缓冲；</li>\n<li>复制积压缓冲：用于部分复制功能；</li>\n<li>AOF缓冲区：用于在进行AOF重写时，保存最近的写入命令。</li>\n</ul>\n<p>这部分内存由jemalloc分配，因此会统计在used_memory中。</p>\n<h3 id=\"内存碎片\"><a href=\"#内存碎片\" class=\"headerlink\" title=\"内存碎片\"></a>内存碎片</h3><p>内存碎片是Redis在分配、回收物理内存过程中产生的。如果对数据的更改频繁，而且数据之间的大小相差很大，可能导致redis释放的空间在物理内存中并没有释放，但redis又无法有效利用，这就形成了内存碎片。内存碎片不会统计在<code>used_memory</code>中。</p>\n<p>内存碎片的产生与对数据进行的操作、数据的特点等都有关；此外，与使用的内存分配器也有关系：如果内存分配器设计合理，可以尽可能的减少内存碎片的产生。</p>\n<blockquote>\n<p>jemalloc便在控制内存碎片方面做的很好。</p>\n</blockquote>\n<p>如果Redis服务器中的内存碎片已经很大，可以通过安全重启的方式减小内存碎片：因为重启之后，Redis重新从备份文件中读取数据，在内存中进行重排，为每个数据重新选择合适的内存单元，减小内存碎片。</p>\n<br>\n\n\n\n<h2 id=\"redis数据存储细节\"><a href=\"#redis数据存储细节\" class=\"headerlink\" title=\"redis数据存储细节\"></a>redis数据存储细节</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>redis存储数据的细节涉及到内存分配器（jemalloc）、简单动态字符串（SDS）、5种对象类型及内部编码、redisObject。下图为执行 set hello world时设计的数据模型。</p>\n<img src=\"./mem-detail.png\" style=\"zoom:75%;\" />\n\n\n\n\n\n<ul>\n<li><code>dictEntry</code>：redis中每一个键值对都有一个<code>dictEntry</code>，里面存储了指向Key和Value的指针；next指向下一个dictEntry，与本Key-Value无关；</li>\n<li><code>key</code>：Key（”hello”）并不是直接以字符串存储，而是存储在SDS结构中；</li>\n<li><code>redisObject</code>：Value(“world”)既不是直接以字符串存储，也不是像Key一样直接存储在SDS中，而是存储在redisObject中；</li>\n<li><code>jemalloc</code>：无论是DictEntry对象，还是redisObject、SDS对象，都需要内存分配器（如jemalloc）分配内存进行存储。以DictEntry对象为例，有3个指针组成，在64位机器下占24个字节，jemalloc会为它分配32字节大小的内存单元；</li>\n</ul>\n<p>不论Value是5种类型的哪一种，都是通过redisObject来存储的；而redisObject中的type字段指明了Value对象的类型，ptr字段则指向对象所在的地址。不过可以看出，字符串对象虽然经过了redisObject的包装，但仍然需要通过SDS存储。</p>\n<h3 id=\"jemalloc\"><a href=\"#jemalloc\" class=\"headerlink\" title=\"jemalloc\"></a>jemalloc</h3><p>jemalloc作为Redis的默认内存分配器，在减小内存碎片方面做的相对比较好。jemalloc在64位系统中，将内存空间划分为小、大、巨大三个范围；每个范围内又划分了许多小的内存块单位；当Redis存储数据时，会选择大小最合适的内存块进行存储。</p>\n<img src=\"./jmealloc.png\" style=\"zoom:75%;\" />\n\n\n\n\n<p>例如，如果需要存储大小为130字节的对象，jemalloc会将其放入160字节的内存单元中。</p>\n<h3 id=\"redisObject\"><a href=\"#redisObject\" class=\"headerlink\" title=\"redisObject\"></a>redisObject</h3><p>无论是哪种数据类型，Redis都不会直接存储，而是通过redisObject对象进行存储。Redis对象的类型、内部编码、内存回收、共享对象等功能，都需要redisObject支持。</p>\n<p>RedisObject包含以下的几个字段：</p>\n<ul>\n<li>type：表示对象类型，4个比特，可以是字符串、列表、哈希等；</li>\n<li>encoding：表示对象的内部编码，4比特。通过这个字段来为不同场景的对象设置不同编码，提高效率和灵活性；</li>\n<li>lru：记录对象最后一次被程序访问的时间；</li>\n<li>refcount：记录该对象别引用的次数，类型为整型；当创建新对象时refcount初始化为1；当有新程序使用该对象时refcount加1；当对象不再被一个新程序使用时refcount减1；当refcount变为0时，对象占用的内存会被释放；</li>\n<li>ptr：ptr指针指向具体数据；</li>\n</ul>\n<h3 id=\"SDS\"><a href=\"#SDS\" class=\"headerlink\" title=\"SDS\"></a>SDS</h3><p>SDS是简单动态字符串(Simple Dynamic String)的缩写，其包含以下几个字段：</p>\n<ul>\n<li>buf：表示字节数组，用于存储字符串；</li>\n<li>len：表示buf已使用的长度；</li>\n<li>free：表示buf未使用的长度；</li>\n</ul>\n"},{"title":"Redis基础知识","date":"2021-04-18T05:05:01.000Z","description":"介绍redis的基本原理和特性","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621314652&t=420ccb71557b55ae50c2d87c053e9bb0","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis的基本原理和特性\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n# 什么是Redis\n\nRedis是C语言编写的开源的基于键值对的存储服务系统，支持多种数据结构的一种高性能，功能丰富的NoSQL数据库。\n\n\n\nRedis很像memcache，整个数据都是放在内存中进行操作的，定期通过异步方式持久化到硬盘上。\n\n> Redis有时候也会用户缓存，相比于memcache，如果是单纯的缓存场景，memcache性能是优于redis的；\n\n<br>\n\n\n\n# Redis的特点\n\n- **速度快**：单线程模型，数据存储在内存，最高可达10W OPS；\n- **支持持久化**：提供AOF和RDB方式的持久化；\n- **支持多种数据结构**：支持字符串、哈希、列表、集合、有序集合等数据结构；\n- **支持多种编程语言**：提供TCP接口，支持Python，Java，Lua等；\n- **功能丰富**：支持发布订阅、lua脚本、事物、pipeline等功能；\n- **代码简单，使用简单**：核心代码量2W行，个性化定制方便；不依赖外部的库；\n- **支持主从复制**\n- **支持高可用和分布式**：2.8版本后提供Sentinel功能以支持高可用；3.0版本后支持分布式；\n- **原子性**：redis所有操作都是原子的(要么成功要么失败)；\n\n> redis支持的数据结构有：字符串(string)、哈希(hash)、字符串列表(list)、字符串集合(set)、有序字符串集合(sorted set)等\n\n\n\n<br>\n\n\n\n# Redis应用场景\n\n- **缓存系统**：使用redis在server层和存储层中间构建存储层，加速请求的响应，减轻后端压力；\n- **计数器**：一条微博的转发数、评论数、点赞数；\n- **消息队列系统**\n- **排行榜功能**\n- **社交网络**：粉丝数、关注数、共同关注等；\n- **实时系统**：垃圾邮件系统、过滤器；\n\n<br>\n\n\n\n# Redis和memcache比较\n\nredis和memcache都是内存数据库，在缓存上应用都比较多，它们在以下的方面会有一些区别：\n\n## 线程模型\n\nmemcache采用多线程模型，基于IO多路复用技术，主线程接收到请求后分配给子线程进行处理。\n\n- **优点：**\n  - 这样当某个请求耗时较长，不会影响到其他的请求。\n- **缺点：**\n  - CPU多线程切换带来性能损耗；\n  - 多线程访问共享资源必定加锁，导致性能损耗；\n\n\n\nredis采用IO多路复用技术，但处理请求是单线程模型，接收请求到处理请求都在一个线程中完成。\n\n- **优点：**\n  - 减少了CPU上下文切换的损耗；\n  - 没有多线程访问共享资源的加锁竞争；\n- **缺点：**\n  - 一个请求处理时间较长，会影响后面的请求；\n  - 无法利用cpu多核特性；\n\n\n\n> redis使用应避免执行复杂的耗时操作，如果key的数据量较大，则可能memcache的性能会更好一些。\n\n\n\n## 数据结构\n\nmemcache仅支持`string`类型的操作，且value的大小必须在1MB以下，过期时间不能超过30天。\n\n\n\nredis支持多种数据类型，例如：`string`、`set`、`list`、`hash`等。\n\n\n\n\n\n## 淘汰策略\n\nmemcahched必须设置实例的内存上限，达到上限后会触发LRU淘汰机制，不常使用的冷数据会被优先淘汰。\n\n\n\nredis没有设置内存上限，只要内存够用就会使用最大的内存，同时支持多种淘汰策略：\n\n- volatile-lru：从过期key中按LRU机制淘汰\n- allkeys-lru：在所有key中按LRU机制淘汰\n- volatile-random：在过期key中随机淘汰key\n- allkeys-random：在所有key中随机淘汰key\n- volatile-ttl：优先淘汰最近要过期的key\n- volatile-lfu：在所有key中按LFU机制淘汰\n- allkeys-lfu：在过期key中按LFU机制淘汰\n\n\n\n## 管道与事务\n\nRedis还支持管道功能，客户端一次性打包发送多条命令到服务端，服务端依次处理客户端发来的命令。这样可以减少来回往来的网络IO次数，提供高访问性能。\n\n另外它还支持事务，这里所说的事务并不是MySQL那样严格的事务模型，这种事务模型是Redis特有的。\n\n一般事务会配合管道一块使用，客户端一次性打包发送多条命令到服务端，并且标识这些命令必须严格按顺序执行，不能被其他客户端打断。同时执行事务之前，客户端可以告诉服务端某个key稍后会进行相关操作，如果这个客户端在操作这个key之前，有其他客户端对这个key进行更改，那么当前客户端在执行这些命令时会放弃整个事务操作，保证一致性。\n\n\n\n## 持久化\n\nmemcache不支持持久化数据，如果服务器宕机，则会丢失全部的数据；\n\n\n\nredis支持aof和rdb两种方式的持久化数据的方式，可以避免宕机带来的数据丢失的问题；\n\n\n\n## 高可用\n\nmemcached没有主从复制的架构，仅支持单机部署。\n\n\n\nredis支持主从复制架构，两个节点组成主从架构，从可以实时同步主的数据，提高整个Redis服务的可用性。同时Redis还提供了哨兵节点，在主节点宕机时，主动把从节点提升为主节点，继续提供服务。主从两个节点还可以提供读写分离功能，进一步提高程序访问的性能。\n\n\n\n## 集群\n\nMemcached的集群化是在客户端采用一致性哈希算法向指定节点发送数据，当一个节点宕机时，其他节点会分担这个节点的请求。\n\n\n\nRedis集群化采用的是每个节点维护一部分虚拟槽位，通过key的哈希计算，将key映射到具体的虚拟槽位上，这个槽位再映射到具体的Redis节点。同时每个Redis节点都包含至少一个从节点，组成主从架构，进一步提高每个节点的高可用能力。当增加或下线节点时，需要手动触发数据迁移，重新进行哈希槽位映射。\n\n\n\n## 怎么选择\n\n如果你的业务需要各种数据结构给予支撑，同时要求数据的高可用保障，那么选择Redis是比较合适的。\n\n如果你的业务非常简单，只是简单的set/get，并且对于内存使用并不高，那么使用简单的Memcached足够。\n\n\n\n<br>\n\n\n\n# Redis数据结构\n\n## 字符串\n\n字符串（string）是redis最简单的数据结构，其内部表示就是一个字符数组。字符串常用于缓存信息，例如将用户信息使用json序列换为字符串，存入redis进行缓存。字符串最大长度为512MB。\n\n\n\n## 列表\n\n列表（list）在redis中插入和删除操作非常快，时间复杂度为O(1)，但是索引定位很慢，时间复杂度为O(n)，它相当于一个链表，每个元素都是用双向指针顺序，可同时支持前向和后向遍历。\n\n\n\n当列表弹出一个元素后，该数据节后会被自动删除，内存会被回收。列表常用来做异步队列使用，将需要延后处理的任务结构体序列化成字符串塞进redis的列表，另一个线程从这个列表中轮训数据进行处理。\n\n\n\n## hash（字典）\n\nredis的hash内部存储了很多键值对，结构和hashmap一样。redis字典的值只能是字符串。\n\n\n\n## set（集合）\n\nredis的set相当于java中的hashset，内部的键值对是无序的、唯一的。内部相当于是一个特殊的字典，字典中所有的value都是NULL。\n\n\n\n当集合中最后一个元素被移除后，数据结构会被删除，内存会被回收；set常被用来哦存储在某次活动中中奖的用户ID，因为有去重功能所以不会出现重复的用户；\n\n\n\n## zset（有序列表）\n\nzset是redis最具特色的数据结构，它一方面具有set保证内部value唯一性的特点，另一方面给每个value赋予了一个score，代表value的排序权重。\n\n\n\nzset中最后一个元素被移除后，数据结构会被删除，内存会被回收；zset常用来存储粉丝列表，value是粉丝的用户id，score是关注事件，可以根据关注事件进行排序；也用来存储学生成绩，value是学生id，score是学生考试成绩，可以根据score进行排序得到名次；\n\n\n\n## 数据结构的特点\n\n1. list、set、zset、hash成为容器型数据结构，遵循`create if not exists`和`drop if no elements`规则；\n2. 所有数据结构都可以设置过期时间，时间到了就会删除对象；\n3. 一个字符串如果调用set方法修改了它，那么设置的过期时间就会消失；\n\n\n\n<br>\n\n# 持久化方案\n\nRedis提供了两种数据持久化的方式：AOF和RDB，用于防止服务器宕机导致数据丢失。\n\n\n\n## RDB\n\nrdb是Redis DataBase缩写，核心函数为`rdbSave`(生成RDB文件)和`rdbLoad`（从文件加载内存）两个函数。\n\n\n\n![img](./rdb.svg)‌\n\n\n\n## AOF\n\n每当执行服务器任务或者函数时`flushAppendOnlyFile`函数都会被调用， 这个函数执行以下两个工作：\n\n‌\n\n1. WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件；\n2. SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中；\n\n\n\n\n\n![img](./aof.svg)\n\n\n\n‌\n\n## 两种方式比较\n\n- aof文件比rdb更新频率高，优先使用aof还原数据；\n- aof比rdb更安全也更大；\n- rdb性能比aof好；\n- 如果两个都配了优先加载AOF；\n\n\n\n<br>\n\n\n\n# Redis特性\n\n## 多数据库特性\n\n一个redis实例可以包含多个数据库，一个客户端可以指定连接redis实例其中的一个数据库。\n\n> 一个redis实例可以提供16个数据库，编号从0 到 15。客户端默认是连接0号数据库。\n\n\n\n### 连接指定的数据库\n\n可以通过`select`指令加上数据库编号来连接数据库，例如：\n\n```bash\n127.0.0.1:6379> select 1\nOK\n\n127.0.0.1:6379[1]> keys *\n(empty list or set)\n\n127.0.0.1:6379[1]> select 0\nOK\n\n127.0.0.1:6379> keys *\n 1) \"mya3\"\n 2) \"mya1\"\n 3) \"qq\"\n ...\n```\n\n\n\n\n\n### 数据库间移动key\n\n可以将一个key从一个库移动到另一个库，使用`move`指令，例如：\n\n```bash\n// 将0库中的myset这个key移动到1库中\n127.0.0.1:6379> move myset 1\n(integer) 1\n\n127.0.0.1:6379> select 1\nOK\n\n127.0.0.1:6379[1]> keys *\n1) \"myset\"\n```\n\n<br>\n\n\n\n## 事务特性\n\n事务执行将被串行执行，执行期间redis将不会为其他客户端提供服务，从而保证事务中的指令原子化执行。redis中实现事务特性使用multi、exec、discard指令。\n\n- multi：将会创建一个事务，其后的参数将被视为事务中的命令；\n- exec：exec将会执行事务；\n- discard：事务回滚\n\n\n\n如果在exec之前出现网络问题连接不上redis，则事务中的命令不会被执行；如果exec之后出现网络问题连接不上redis，则事务将继续执行。\n\n### multi\n\nmulti将会开启一个事务，其后的指令将会存在事务命令队列中，直到执行。\n\n```bash\n127.0.0.1:6379> set num 2\nOK\n\n127.0.0.1:6379> get num\n\"2\"\n\n127.0.0.1:6379> incr num\nQUEUED\n\n127.0.0.1:6379> incr num\nQUEUED\n```\n\n\n\n>  可以看到，事务命令已经被存在队列中。\n\n\n\n### exec\n\nexec将会执行事务命令队列中的命令，相当于mysql中的commit。\n\n```bash\n127.0.0.1:6379> exec \n1) (integer) 3\n2) (integer) 4\n```\n\n\n\n### discard\n\ndiscard是回滚操作，相当于mysql中的rollback。\n\n```bash\n127.0.0.1:6379> set user tom\nOK\n127.0.0.1:6379> get user\n\"tom\"\n127.0.0.1:6379> multi\nOK\n127.0.0.1:6379> set user jerry\nQUEUED\n127.0.0.1:6379> discard\nOK\n127.0.0.1:6379> get user\n\"tom\"\n```\n\n","source":"_posts/Redis基础知识.md","raw":"---\ntitle: Redis基础知识\ndate: 2021-04-18 13:05:01\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 基础\ndescription: 介绍redis的基本原理和特性\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621314652&t=420ccb71557b55ae50c2d87c053e9bb0\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis的基本原理和特性\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n# 什么是Redis\n\nRedis是C语言编写的开源的基于键值对的存储服务系统，支持多种数据结构的一种高性能，功能丰富的NoSQL数据库。\n\n\n\nRedis很像memcache，整个数据都是放在内存中进行操作的，定期通过异步方式持久化到硬盘上。\n\n> Redis有时候也会用户缓存，相比于memcache，如果是单纯的缓存场景，memcache性能是优于redis的；\n\n<br>\n\n\n\n# Redis的特点\n\n- **速度快**：单线程模型，数据存储在内存，最高可达10W OPS；\n- **支持持久化**：提供AOF和RDB方式的持久化；\n- **支持多种数据结构**：支持字符串、哈希、列表、集合、有序集合等数据结构；\n- **支持多种编程语言**：提供TCP接口，支持Python，Java，Lua等；\n- **功能丰富**：支持发布订阅、lua脚本、事物、pipeline等功能；\n- **代码简单，使用简单**：核心代码量2W行，个性化定制方便；不依赖外部的库；\n- **支持主从复制**\n- **支持高可用和分布式**：2.8版本后提供Sentinel功能以支持高可用；3.0版本后支持分布式；\n- **原子性**：redis所有操作都是原子的(要么成功要么失败)；\n\n> redis支持的数据结构有：字符串(string)、哈希(hash)、字符串列表(list)、字符串集合(set)、有序字符串集合(sorted set)等\n\n\n\n<br>\n\n\n\n# Redis应用场景\n\n- **缓存系统**：使用redis在server层和存储层中间构建存储层，加速请求的响应，减轻后端压力；\n- **计数器**：一条微博的转发数、评论数、点赞数；\n- **消息队列系统**\n- **排行榜功能**\n- **社交网络**：粉丝数、关注数、共同关注等；\n- **实时系统**：垃圾邮件系统、过滤器；\n\n<br>\n\n\n\n# Redis和memcache比较\n\nredis和memcache都是内存数据库，在缓存上应用都比较多，它们在以下的方面会有一些区别：\n\n## 线程模型\n\nmemcache采用多线程模型，基于IO多路复用技术，主线程接收到请求后分配给子线程进行处理。\n\n- **优点：**\n  - 这样当某个请求耗时较长，不会影响到其他的请求。\n- **缺点：**\n  - CPU多线程切换带来性能损耗；\n  - 多线程访问共享资源必定加锁，导致性能损耗；\n\n\n\nredis采用IO多路复用技术，但处理请求是单线程模型，接收请求到处理请求都在一个线程中完成。\n\n- **优点：**\n  - 减少了CPU上下文切换的损耗；\n  - 没有多线程访问共享资源的加锁竞争；\n- **缺点：**\n  - 一个请求处理时间较长，会影响后面的请求；\n  - 无法利用cpu多核特性；\n\n\n\n> redis使用应避免执行复杂的耗时操作，如果key的数据量较大，则可能memcache的性能会更好一些。\n\n\n\n## 数据结构\n\nmemcache仅支持`string`类型的操作，且value的大小必须在1MB以下，过期时间不能超过30天。\n\n\n\nredis支持多种数据类型，例如：`string`、`set`、`list`、`hash`等。\n\n\n\n\n\n## 淘汰策略\n\nmemcahched必须设置实例的内存上限，达到上限后会触发LRU淘汰机制，不常使用的冷数据会被优先淘汰。\n\n\n\nredis没有设置内存上限，只要内存够用就会使用最大的内存，同时支持多种淘汰策略：\n\n- volatile-lru：从过期key中按LRU机制淘汰\n- allkeys-lru：在所有key中按LRU机制淘汰\n- volatile-random：在过期key中随机淘汰key\n- allkeys-random：在所有key中随机淘汰key\n- volatile-ttl：优先淘汰最近要过期的key\n- volatile-lfu：在所有key中按LFU机制淘汰\n- allkeys-lfu：在过期key中按LFU机制淘汰\n\n\n\n## 管道与事务\n\nRedis还支持管道功能，客户端一次性打包发送多条命令到服务端，服务端依次处理客户端发来的命令。这样可以减少来回往来的网络IO次数，提供高访问性能。\n\n另外它还支持事务，这里所说的事务并不是MySQL那样严格的事务模型，这种事务模型是Redis特有的。\n\n一般事务会配合管道一块使用，客户端一次性打包发送多条命令到服务端，并且标识这些命令必须严格按顺序执行，不能被其他客户端打断。同时执行事务之前，客户端可以告诉服务端某个key稍后会进行相关操作，如果这个客户端在操作这个key之前，有其他客户端对这个key进行更改，那么当前客户端在执行这些命令时会放弃整个事务操作，保证一致性。\n\n\n\n## 持久化\n\nmemcache不支持持久化数据，如果服务器宕机，则会丢失全部的数据；\n\n\n\nredis支持aof和rdb两种方式的持久化数据的方式，可以避免宕机带来的数据丢失的问题；\n\n\n\n## 高可用\n\nmemcached没有主从复制的架构，仅支持单机部署。\n\n\n\nredis支持主从复制架构，两个节点组成主从架构，从可以实时同步主的数据，提高整个Redis服务的可用性。同时Redis还提供了哨兵节点，在主节点宕机时，主动把从节点提升为主节点，继续提供服务。主从两个节点还可以提供读写分离功能，进一步提高程序访问的性能。\n\n\n\n## 集群\n\nMemcached的集群化是在客户端采用一致性哈希算法向指定节点发送数据，当一个节点宕机时，其他节点会分担这个节点的请求。\n\n\n\nRedis集群化采用的是每个节点维护一部分虚拟槽位，通过key的哈希计算，将key映射到具体的虚拟槽位上，这个槽位再映射到具体的Redis节点。同时每个Redis节点都包含至少一个从节点，组成主从架构，进一步提高每个节点的高可用能力。当增加或下线节点时，需要手动触发数据迁移，重新进行哈希槽位映射。\n\n\n\n## 怎么选择\n\n如果你的业务需要各种数据结构给予支撑，同时要求数据的高可用保障，那么选择Redis是比较合适的。\n\n如果你的业务非常简单，只是简单的set/get，并且对于内存使用并不高，那么使用简单的Memcached足够。\n\n\n\n<br>\n\n\n\n# Redis数据结构\n\n## 字符串\n\n字符串（string）是redis最简单的数据结构，其内部表示就是一个字符数组。字符串常用于缓存信息，例如将用户信息使用json序列换为字符串，存入redis进行缓存。字符串最大长度为512MB。\n\n\n\n## 列表\n\n列表（list）在redis中插入和删除操作非常快，时间复杂度为O(1)，但是索引定位很慢，时间复杂度为O(n)，它相当于一个链表，每个元素都是用双向指针顺序，可同时支持前向和后向遍历。\n\n\n\n当列表弹出一个元素后，该数据节后会被自动删除，内存会被回收。列表常用来做异步队列使用，将需要延后处理的任务结构体序列化成字符串塞进redis的列表，另一个线程从这个列表中轮训数据进行处理。\n\n\n\n## hash（字典）\n\nredis的hash内部存储了很多键值对，结构和hashmap一样。redis字典的值只能是字符串。\n\n\n\n## set（集合）\n\nredis的set相当于java中的hashset，内部的键值对是无序的、唯一的。内部相当于是一个特殊的字典，字典中所有的value都是NULL。\n\n\n\n当集合中最后一个元素被移除后，数据结构会被删除，内存会被回收；set常被用来哦存储在某次活动中中奖的用户ID，因为有去重功能所以不会出现重复的用户；\n\n\n\n## zset（有序列表）\n\nzset是redis最具特色的数据结构，它一方面具有set保证内部value唯一性的特点，另一方面给每个value赋予了一个score，代表value的排序权重。\n\n\n\nzset中最后一个元素被移除后，数据结构会被删除，内存会被回收；zset常用来存储粉丝列表，value是粉丝的用户id，score是关注事件，可以根据关注事件进行排序；也用来存储学生成绩，value是学生id，score是学生考试成绩，可以根据score进行排序得到名次；\n\n\n\n## 数据结构的特点\n\n1. list、set、zset、hash成为容器型数据结构，遵循`create if not exists`和`drop if no elements`规则；\n2. 所有数据结构都可以设置过期时间，时间到了就会删除对象；\n3. 一个字符串如果调用set方法修改了它，那么设置的过期时间就会消失；\n\n\n\n<br>\n\n# 持久化方案\n\nRedis提供了两种数据持久化的方式：AOF和RDB，用于防止服务器宕机导致数据丢失。\n\n\n\n## RDB\n\nrdb是Redis DataBase缩写，核心函数为`rdbSave`(生成RDB文件)和`rdbLoad`（从文件加载内存）两个函数。\n\n\n\n![img](./rdb.svg)‌\n\n\n\n## AOF\n\n每当执行服务器任务或者函数时`flushAppendOnlyFile`函数都会被调用， 这个函数执行以下两个工作：\n\n‌\n\n1. WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件；\n2. SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中；\n\n\n\n\n\n![img](./aof.svg)\n\n\n\n‌\n\n## 两种方式比较\n\n- aof文件比rdb更新频率高，优先使用aof还原数据；\n- aof比rdb更安全也更大；\n- rdb性能比aof好；\n- 如果两个都配了优先加载AOF；\n\n\n\n<br>\n\n\n\n# Redis特性\n\n## 多数据库特性\n\n一个redis实例可以包含多个数据库，一个客户端可以指定连接redis实例其中的一个数据库。\n\n> 一个redis实例可以提供16个数据库，编号从0 到 15。客户端默认是连接0号数据库。\n\n\n\n### 连接指定的数据库\n\n可以通过`select`指令加上数据库编号来连接数据库，例如：\n\n```bash\n127.0.0.1:6379> select 1\nOK\n\n127.0.0.1:6379[1]> keys *\n(empty list or set)\n\n127.0.0.1:6379[1]> select 0\nOK\n\n127.0.0.1:6379> keys *\n 1) \"mya3\"\n 2) \"mya1\"\n 3) \"qq\"\n ...\n```\n\n\n\n\n\n### 数据库间移动key\n\n可以将一个key从一个库移动到另一个库，使用`move`指令，例如：\n\n```bash\n// 将0库中的myset这个key移动到1库中\n127.0.0.1:6379> move myset 1\n(integer) 1\n\n127.0.0.1:6379> select 1\nOK\n\n127.0.0.1:6379[1]> keys *\n1) \"myset\"\n```\n\n<br>\n\n\n\n## 事务特性\n\n事务执行将被串行执行，执行期间redis将不会为其他客户端提供服务，从而保证事务中的指令原子化执行。redis中实现事务特性使用multi、exec、discard指令。\n\n- multi：将会创建一个事务，其后的参数将被视为事务中的命令；\n- exec：exec将会执行事务；\n- discard：事务回滚\n\n\n\n如果在exec之前出现网络问题连接不上redis，则事务中的命令不会被执行；如果exec之后出现网络问题连接不上redis，则事务将继续执行。\n\n### multi\n\nmulti将会开启一个事务，其后的指令将会存在事务命令队列中，直到执行。\n\n```bash\n127.0.0.1:6379> set num 2\nOK\n\n127.0.0.1:6379> get num\n\"2\"\n\n127.0.0.1:6379> incr num\nQUEUED\n\n127.0.0.1:6379> incr num\nQUEUED\n```\n\n\n\n>  可以看到，事务命令已经被存在队列中。\n\n\n\n### exec\n\nexec将会执行事务命令队列中的命令，相当于mysql中的commit。\n\n```bash\n127.0.0.1:6379> exec \n1) (integer) 3\n2) (integer) 4\n```\n\n\n\n### discard\n\ndiscard是回滚操作，相当于mysql中的rollback。\n\n```bash\n127.0.0.1:6379> set user tom\nOK\n127.0.0.1:6379> get user\n\"tom\"\n127.0.0.1:6379> multi\nOK\n127.0.0.1:6379> set user jerry\nQUEUED\n127.0.0.1:6379> discard\nOK\n127.0.0.1:6379> get user\n\"tom\"\n```\n\n","slug":"Redis基础知识","published":1,"updated":"2021-06-06T09:58:55.391Z","_id":"cko72de5e0003p0kley8l5b6s","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis的基本原理和特性</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"什么是Redis\"><a href=\"#什么是Redis\" class=\"headerlink\" title=\"什么是Redis\"></a>什么是Redis</h1><p>Redis是C语言编写的开源的基于键值对的存储服务系统，支持多种数据结构的一种高性能，功能丰富的NoSQL数据库。</p>\n<p>Redis很像memcache，整个数据都是放在内存中进行操作的，定期通过异步方式持久化到硬盘上。</p>\n<blockquote>\n<p>Redis有时候也会用户缓存，相比于memcache，如果是单纯的缓存场景，memcache性能是优于redis的；</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"Redis的特点\"><a href=\"#Redis的特点\" class=\"headerlink\" title=\"Redis的特点\"></a>Redis的特点</h1><ul>\n<li><strong>速度快</strong>：单线程模型，数据存储在内存，最高可达10W OPS；</li>\n<li><strong>支持持久化</strong>：提供AOF和RDB方式的持久化；</li>\n<li><strong>支持多种数据结构</strong>：支持字符串、哈希、列表、集合、有序集合等数据结构；</li>\n<li><strong>支持多种编程语言</strong>：提供TCP接口，支持Python，Java，Lua等；</li>\n<li><strong>功能丰富</strong>：支持发布订阅、lua脚本、事物、pipeline等功能；</li>\n<li><strong>代码简单，使用简单</strong>：核心代码量2W行，个性化定制方便；不依赖外部的库；</li>\n<li><strong>支持主从复制</strong></li>\n<li><strong>支持高可用和分布式</strong>：2.8版本后提供Sentinel功能以支持高可用；3.0版本后支持分布式；</li>\n<li><strong>原子性</strong>：redis所有操作都是原子的(要么成功要么失败)；</li>\n</ul>\n<blockquote>\n<p>redis支持的数据结构有：字符串(string)、哈希(hash)、字符串列表(list)、字符串集合(set)、有序字符串集合(sorted set)等</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"Redis应用场景\"><a href=\"#Redis应用场景\" class=\"headerlink\" title=\"Redis应用场景\"></a>Redis应用场景</h1><ul>\n<li><strong>缓存系统</strong>：使用redis在server层和存储层中间构建存储层，加速请求的响应，减轻后端压力；</li>\n<li><strong>计数器</strong>：一条微博的转发数、评论数、点赞数；</li>\n<li><strong>消息队列系统</strong></li>\n<li><strong>排行榜功能</strong></li>\n<li><strong>社交网络</strong>：粉丝数、关注数、共同关注等；</li>\n<li><strong>实时系统</strong>：垃圾邮件系统、过滤器；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"Redis和memcache比较\"><a href=\"#Redis和memcache比较\" class=\"headerlink\" title=\"Redis和memcache比较\"></a>Redis和memcache比较</h1><p>redis和memcache都是内存数据库，在缓存上应用都比较多，它们在以下的方面会有一些区别：</p>\n<h2 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h2><p>memcache采用多线程模型，基于IO多路复用技术，主线程接收到请求后分配给子线程进行处理。</p>\n<ul>\n<li><strong>优点：</strong><ul>\n<li>这样当某个请求耗时较长，不会影响到其他的请求。</li>\n</ul>\n</li>\n<li><strong>缺点：</strong><ul>\n<li>CPU多线程切换带来性能损耗；</li>\n<li>多线程访问共享资源必定加锁，导致性能损耗；</li>\n</ul>\n</li>\n</ul>\n<p>redis采用IO多路复用技术，但处理请求是单线程模型，接收请求到处理请求都在一个线程中完成。</p>\n<ul>\n<li><strong>优点：</strong><ul>\n<li>减少了CPU上下文切换的损耗；</li>\n<li>没有多线程访问共享资源的加锁竞争；</li>\n</ul>\n</li>\n<li><strong>缺点：</strong><ul>\n<li>一个请求处理时间较长，会影响后面的请求；</li>\n<li>无法利用cpu多核特性；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>redis使用应避免执行复杂的耗时操作，如果key的数据量较大，则可能memcache的性能会更好一些。</p>\n</blockquote>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>memcache仅支持<code>string</code>类型的操作，且value的大小必须在1MB以下，过期时间不能超过30天。</p>\n<p>redis支持多种数据类型，例如：<code>string</code>、<code>set</code>、<code>list</code>、<code>hash</code>等。</p>\n<h2 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h2><p>memcahched必须设置实例的内存上限，达到上限后会触发LRU淘汰机制，不常使用的冷数据会被优先淘汰。</p>\n<p>redis没有设置内存上限，只要内存够用就会使用最大的内存，同时支持多种淘汰策略：</p>\n<ul>\n<li>volatile-lru：从过期key中按LRU机制淘汰</li>\n<li>allkeys-lru：在所有key中按LRU机制淘汰</li>\n<li>volatile-random：在过期key中随机淘汰key</li>\n<li>allkeys-random：在所有key中随机淘汰key</li>\n<li>volatile-ttl：优先淘汰最近要过期的key</li>\n<li>volatile-lfu：在所有key中按LFU机制淘汰</li>\n<li>allkeys-lfu：在过期key中按LFU机制淘汰</li>\n</ul>\n<h2 id=\"管道与事务\"><a href=\"#管道与事务\" class=\"headerlink\" title=\"管道与事务\"></a>管道与事务</h2><p>Redis还支持管道功能，客户端一次性打包发送多条命令到服务端，服务端依次处理客户端发来的命令。这样可以减少来回往来的网络IO次数，提供高访问性能。</p>\n<p>另外它还支持事务，这里所说的事务并不是MySQL那样严格的事务模型，这种事务模型是Redis特有的。</p>\n<p>一般事务会配合管道一块使用，客户端一次性打包发送多条命令到服务端，并且标识这些命令必须严格按顺序执行，不能被其他客户端打断。同时执行事务之前，客户端可以告诉服务端某个key稍后会进行相关操作，如果这个客户端在操作这个key之前，有其他客户端对这个key进行更改，那么当前客户端在执行这些命令时会放弃整个事务操作，保证一致性。</p>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>memcache不支持持久化数据，如果服务器宕机，则会丢失全部的数据；</p>\n<p>redis支持aof和rdb两种方式的持久化数据的方式，可以避免宕机带来的数据丢失的问题；</p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p>memcached没有主从复制的架构，仅支持单机部署。</p>\n<p>redis支持主从复制架构，两个节点组成主从架构，从可以实时同步主的数据，提高整个Redis服务的可用性。同时Redis还提供了哨兵节点，在主节点宕机时，主动把从节点提升为主节点，继续提供服务。主从两个节点还可以提供读写分离功能，进一步提高程序访问的性能。</p>\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><p>Memcached的集群化是在客户端采用一致性哈希算法向指定节点发送数据，当一个节点宕机时，其他节点会分担这个节点的请求。</p>\n<p>Redis集群化采用的是每个节点维护一部分虚拟槽位，通过key的哈希计算，将key映射到具体的虚拟槽位上，这个槽位再映射到具体的Redis节点。同时每个Redis节点都包含至少一个从节点，组成主从架构，进一步提高每个节点的高可用能力。当增加或下线节点时，需要手动触发数据迁移，重新进行哈希槽位映射。</p>\n<h2 id=\"怎么选择\"><a href=\"#怎么选择\" class=\"headerlink\" title=\"怎么选择\"></a>怎么选择</h2><p>如果你的业务需要各种数据结构给予支撑，同时要求数据的高可用保障，那么选择Redis是比较合适的。</p>\n<p>如果你的业务非常简单，只是简单的set/get，并且对于内存使用并不高，那么使用简单的Memcached足够。</p>\n<br>\n\n\n\n<h1 id=\"Redis数据结构\"><a href=\"#Redis数据结构\" class=\"headerlink\" title=\"Redis数据结构\"></a>Redis数据结构</h1><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>字符串（string）是redis最简单的数据结构，其内部表示就是一个字符数组。字符串常用于缓存信息，例如将用户信息使用json序列换为字符串，存入redis进行缓存。字符串最大长度为512MB。</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>列表（list）在redis中插入和删除操作非常快，时间复杂度为O(1)，但是索引定位很慢，时间复杂度为O(n)，它相当于一个链表，每个元素都是用双向指针顺序，可同时支持前向和后向遍历。</p>\n<p>当列表弹出一个元素后，该数据节后会被自动删除，内存会被回收。列表常用来做异步队列使用，将需要延后处理的任务结构体序列化成字符串塞进redis的列表，另一个线程从这个列表中轮训数据进行处理。</p>\n<h2 id=\"hash（字典）\"><a href=\"#hash（字典）\" class=\"headerlink\" title=\"hash（字典）\"></a>hash（字典）</h2><p>redis的hash内部存储了很多键值对，结构和hashmap一样。redis字典的值只能是字符串。</p>\n<h2 id=\"set（集合）\"><a href=\"#set（集合）\" class=\"headerlink\" title=\"set（集合）\"></a>set（集合）</h2><p>redis的set相当于java中的hashset，内部的键值对是无序的、唯一的。内部相当于是一个特殊的字典，字典中所有的value都是NULL。</p>\n<p>当集合中最后一个元素被移除后，数据结构会被删除，内存会被回收；set常被用来哦存储在某次活动中中奖的用户ID，因为有去重功能所以不会出现重复的用户；</p>\n<h2 id=\"zset（有序列表）\"><a href=\"#zset（有序列表）\" class=\"headerlink\" title=\"zset（有序列表）\"></a>zset（有序列表）</h2><p>zset是redis最具特色的数据结构，它一方面具有set保证内部value唯一性的特点，另一方面给每个value赋予了一个score，代表value的排序权重。</p>\n<p>zset中最后一个元素被移除后，数据结构会被删除，内存会被回收；zset常用来存储粉丝列表，value是粉丝的用户id，score是关注事件，可以根据关注事件进行排序；也用来存储学生成绩，value是学生id，score是学生考试成绩，可以根据score进行排序得到名次；</p>\n<h2 id=\"数据结构的特点\"><a href=\"#数据结构的特点\" class=\"headerlink\" title=\"数据结构的特点\"></a>数据结构的特点</h2><ol>\n<li>list、set、zset、hash成为容器型数据结构，遵循<code>create if not exists</code>和<code>drop if no elements</code>规则；</li>\n<li>所有数据结构都可以设置过期时间，时间到了就会删除对象；</li>\n<li>一个字符串如果调用set方法修改了它，那么设置的过期时间就会消失；</li>\n</ol>\n<br>\n\n<h1 id=\"持久化方案\"><a href=\"#持久化方案\" class=\"headerlink\" title=\"持久化方案\"></a>持久化方案</h1><p>Redis提供了两种数据持久化的方式：AOF和RDB，用于防止服务器宕机导致数据丢失。</p>\n<h2 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h2><p>rdb是Redis DataBase缩写，核心函数为<code>rdbSave</code>(生成RDB文件)和<code>rdbLoad</code>（从文件加载内存）两个函数。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"./rdb.svg\" alt=\"img\">‌</p>\n<h2 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h2><p>每当执行服务器任务或者函数时<code>flushAppendOnlyFile</code>函数都会被调用， 这个函数执行以下两个工作：</p>\n<p>‌</p>\n<ol>\n<li>WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件；</li>\n<li>SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中；</li>\n</ol>\n<p><img src= \"/img/loading.gif\" data-src=\"./aof.svg\" alt=\"img\"></p>\n<p>‌</p>\n<h2 id=\"两种方式比较\"><a href=\"#两种方式比较\" class=\"headerlink\" title=\"两种方式比较\"></a>两种方式比较</h2><ul>\n<li>aof文件比rdb更新频率高，优先使用aof还原数据；</li>\n<li>aof比rdb更安全也更大；</li>\n<li>rdb性能比aof好；</li>\n<li>如果两个都配了优先加载AOF；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"Redis特性\"><a href=\"#Redis特性\" class=\"headerlink\" title=\"Redis特性\"></a>Redis特性</h1><h2 id=\"多数据库特性\"><a href=\"#多数据库特性\" class=\"headerlink\" title=\"多数据库特性\"></a>多数据库特性</h2><p>一个redis实例可以包含多个数据库，一个客户端可以指定连接redis实例其中的一个数据库。</p>\n<blockquote>\n<p>一个redis实例可以提供16个数据库，编号从0 到 15。客户端默认是连接0号数据库。</p>\n</blockquote>\n<h3 id=\"连接指定的数据库\"><a href=\"#连接指定的数据库\" class=\"headerlink\" title=\"连接指定的数据库\"></a>连接指定的数据库</h3><p>可以通过<code>select</code>指令加上数据库编号来连接数据库，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; select 1</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379[1]&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379[1]&gt; select 0</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;mya3&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;mya1&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;qq&quot;</span></span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"数据库间移动key\"><a href=\"#数据库间移动key\" class=\"headerlink\" title=\"数据库间移动key\"></a>数据库间移动key</h3><p>可以将一个key从一个库移动到另一个库，使用<code>move</code>指令，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将0库中的myset这个key移动到1库中</span><br><span class=\"line\">127.0.0.1:6379&gt; move myset 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; select 1</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379[1]&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;myset&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h2><p>事务执行将被串行执行，执行期间redis将不会为其他客户端提供服务，从而保证事务中的指令原子化执行。redis中实现事务特性使用multi、exec、discard指令。</p>\n<ul>\n<li>multi：将会创建一个事务，其后的参数将被视为事务中的命令；</li>\n<li>exec：exec将会执行事务；</li>\n<li>discard：事务回滚</li>\n</ul>\n<p>如果在exec之前出现网络问题连接不上redis，则事务中的命令不会被执行；如果exec之后出现网络问题连接不上redis，则事务将继续执行。</p>\n<h3 id=\"multi\"><a href=\"#multi\" class=\"headerlink\" title=\"multi\"></a>multi</h3><p>multi将会开启一个事务，其后的指令将会存在事务命令队列中，直到执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> num 2</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\"><span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">QUEUED</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 可以看到，事务命令已经被存在队列中。</p>\n</blockquote>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h3><p>exec将会执行事务命令队列中的命令，相当于mysql中的commit。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> </span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"discard\"><a href=\"#discard\" class=\"headerlink\" title=\"discard\"></a>discard</h3><p>discard是回滚操作，相当于mysql中的rollback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> user tom</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get user</span><br><span class=\"line\"><span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> user jerry</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; discard</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get user</span><br><span class=\"line\"><span class=\"string\">&quot;tom&quot;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis的基本原理和特性</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"什么是Redis\"><a href=\"#什么是Redis\" class=\"headerlink\" title=\"什么是Redis\"></a>什么是Redis</h1><p>Redis是C语言编写的开源的基于键值对的存储服务系统，支持多种数据结构的一种高性能，功能丰富的NoSQL数据库。</p>\n<p>Redis很像memcache，整个数据都是放在内存中进行操作的，定期通过异步方式持久化到硬盘上。</p>\n<blockquote>\n<p>Redis有时候也会用户缓存，相比于memcache，如果是单纯的缓存场景，memcache性能是优于redis的；</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"Redis的特点\"><a href=\"#Redis的特点\" class=\"headerlink\" title=\"Redis的特点\"></a>Redis的特点</h1><ul>\n<li><strong>速度快</strong>：单线程模型，数据存储在内存，最高可达10W OPS；</li>\n<li><strong>支持持久化</strong>：提供AOF和RDB方式的持久化；</li>\n<li><strong>支持多种数据结构</strong>：支持字符串、哈希、列表、集合、有序集合等数据结构；</li>\n<li><strong>支持多种编程语言</strong>：提供TCP接口，支持Python，Java，Lua等；</li>\n<li><strong>功能丰富</strong>：支持发布订阅、lua脚本、事物、pipeline等功能；</li>\n<li><strong>代码简单，使用简单</strong>：核心代码量2W行，个性化定制方便；不依赖外部的库；</li>\n<li><strong>支持主从复制</strong></li>\n<li><strong>支持高可用和分布式</strong>：2.8版本后提供Sentinel功能以支持高可用；3.0版本后支持分布式；</li>\n<li><strong>原子性</strong>：redis所有操作都是原子的(要么成功要么失败)；</li>\n</ul>\n<blockquote>\n<p>redis支持的数据结构有：字符串(string)、哈希(hash)、字符串列表(list)、字符串集合(set)、有序字符串集合(sorted set)等</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"Redis应用场景\"><a href=\"#Redis应用场景\" class=\"headerlink\" title=\"Redis应用场景\"></a>Redis应用场景</h1><ul>\n<li><strong>缓存系统</strong>：使用redis在server层和存储层中间构建存储层，加速请求的响应，减轻后端压力；</li>\n<li><strong>计数器</strong>：一条微博的转发数、评论数、点赞数；</li>\n<li><strong>消息队列系统</strong></li>\n<li><strong>排行榜功能</strong></li>\n<li><strong>社交网络</strong>：粉丝数、关注数、共同关注等；</li>\n<li><strong>实时系统</strong>：垃圾邮件系统、过滤器；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"Redis和memcache比较\"><a href=\"#Redis和memcache比较\" class=\"headerlink\" title=\"Redis和memcache比较\"></a>Redis和memcache比较</h1><p>redis和memcache都是内存数据库，在缓存上应用都比较多，它们在以下的方面会有一些区别：</p>\n<h2 id=\"线程模型\"><a href=\"#线程模型\" class=\"headerlink\" title=\"线程模型\"></a>线程模型</h2><p>memcache采用多线程模型，基于IO多路复用技术，主线程接收到请求后分配给子线程进行处理。</p>\n<ul>\n<li><strong>优点：</strong><ul>\n<li>这样当某个请求耗时较长，不会影响到其他的请求。</li>\n</ul>\n</li>\n<li><strong>缺点：</strong><ul>\n<li>CPU多线程切换带来性能损耗；</li>\n<li>多线程访问共享资源必定加锁，导致性能损耗；</li>\n</ul>\n</li>\n</ul>\n<p>redis采用IO多路复用技术，但处理请求是单线程模型，接收请求到处理请求都在一个线程中完成。</p>\n<ul>\n<li><strong>优点：</strong><ul>\n<li>减少了CPU上下文切换的损耗；</li>\n<li>没有多线程访问共享资源的加锁竞争；</li>\n</ul>\n</li>\n<li><strong>缺点：</strong><ul>\n<li>一个请求处理时间较长，会影响后面的请求；</li>\n<li>无法利用cpu多核特性；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>redis使用应避免执行复杂的耗时操作，如果key的数据量较大，则可能memcache的性能会更好一些。</p>\n</blockquote>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>memcache仅支持<code>string</code>类型的操作，且value的大小必须在1MB以下，过期时间不能超过30天。</p>\n<p>redis支持多种数据类型，例如：<code>string</code>、<code>set</code>、<code>list</code>、<code>hash</code>等。</p>\n<h2 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h2><p>memcahched必须设置实例的内存上限，达到上限后会触发LRU淘汰机制，不常使用的冷数据会被优先淘汰。</p>\n<p>redis没有设置内存上限，只要内存够用就会使用最大的内存，同时支持多种淘汰策略：</p>\n<ul>\n<li>volatile-lru：从过期key中按LRU机制淘汰</li>\n<li>allkeys-lru：在所有key中按LRU机制淘汰</li>\n<li>volatile-random：在过期key中随机淘汰key</li>\n<li>allkeys-random：在所有key中随机淘汰key</li>\n<li>volatile-ttl：优先淘汰最近要过期的key</li>\n<li>volatile-lfu：在所有key中按LFU机制淘汰</li>\n<li>allkeys-lfu：在过期key中按LFU机制淘汰</li>\n</ul>\n<h2 id=\"管道与事务\"><a href=\"#管道与事务\" class=\"headerlink\" title=\"管道与事务\"></a>管道与事务</h2><p>Redis还支持管道功能，客户端一次性打包发送多条命令到服务端，服务端依次处理客户端发来的命令。这样可以减少来回往来的网络IO次数，提供高访问性能。</p>\n<p>另外它还支持事务，这里所说的事务并不是MySQL那样严格的事务模型，这种事务模型是Redis特有的。</p>\n<p>一般事务会配合管道一块使用，客户端一次性打包发送多条命令到服务端，并且标识这些命令必须严格按顺序执行，不能被其他客户端打断。同时执行事务之前，客户端可以告诉服务端某个key稍后会进行相关操作，如果这个客户端在操作这个key之前，有其他客户端对这个key进行更改，那么当前客户端在执行这些命令时会放弃整个事务操作，保证一致性。</p>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>memcache不支持持久化数据，如果服务器宕机，则会丢失全部的数据；</p>\n<p>redis支持aof和rdb两种方式的持久化数据的方式，可以避免宕机带来的数据丢失的问题；</p>\n<h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p>memcached没有主从复制的架构，仅支持单机部署。</p>\n<p>redis支持主从复制架构，两个节点组成主从架构，从可以实时同步主的数据，提高整个Redis服务的可用性。同时Redis还提供了哨兵节点，在主节点宕机时，主动把从节点提升为主节点，继续提供服务。主从两个节点还可以提供读写分离功能，进一步提高程序访问的性能。</p>\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><p>Memcached的集群化是在客户端采用一致性哈希算法向指定节点发送数据，当一个节点宕机时，其他节点会分担这个节点的请求。</p>\n<p>Redis集群化采用的是每个节点维护一部分虚拟槽位，通过key的哈希计算，将key映射到具体的虚拟槽位上，这个槽位再映射到具体的Redis节点。同时每个Redis节点都包含至少一个从节点，组成主从架构，进一步提高每个节点的高可用能力。当增加或下线节点时，需要手动触发数据迁移，重新进行哈希槽位映射。</p>\n<h2 id=\"怎么选择\"><a href=\"#怎么选择\" class=\"headerlink\" title=\"怎么选择\"></a>怎么选择</h2><p>如果你的业务需要各种数据结构给予支撑，同时要求数据的高可用保障，那么选择Redis是比较合适的。</p>\n<p>如果你的业务非常简单，只是简单的set/get，并且对于内存使用并不高，那么使用简单的Memcached足够。</p>\n<br>\n\n\n\n<h1 id=\"Redis数据结构\"><a href=\"#Redis数据结构\" class=\"headerlink\" title=\"Redis数据结构\"></a>Redis数据结构</h1><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>字符串（string）是redis最简单的数据结构，其内部表示就是一个字符数组。字符串常用于缓存信息，例如将用户信息使用json序列换为字符串，存入redis进行缓存。字符串最大长度为512MB。</p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p>列表（list）在redis中插入和删除操作非常快，时间复杂度为O(1)，但是索引定位很慢，时间复杂度为O(n)，它相当于一个链表，每个元素都是用双向指针顺序，可同时支持前向和后向遍历。</p>\n<p>当列表弹出一个元素后，该数据节后会被自动删除，内存会被回收。列表常用来做异步队列使用，将需要延后处理的任务结构体序列化成字符串塞进redis的列表，另一个线程从这个列表中轮训数据进行处理。</p>\n<h2 id=\"hash（字典）\"><a href=\"#hash（字典）\" class=\"headerlink\" title=\"hash（字典）\"></a>hash（字典）</h2><p>redis的hash内部存储了很多键值对，结构和hashmap一样。redis字典的值只能是字符串。</p>\n<h2 id=\"set（集合）\"><a href=\"#set（集合）\" class=\"headerlink\" title=\"set（集合）\"></a>set（集合）</h2><p>redis的set相当于java中的hashset，内部的键值对是无序的、唯一的。内部相当于是一个特殊的字典，字典中所有的value都是NULL。</p>\n<p>当集合中最后一个元素被移除后，数据结构会被删除，内存会被回收；set常被用来哦存储在某次活动中中奖的用户ID，因为有去重功能所以不会出现重复的用户；</p>\n<h2 id=\"zset（有序列表）\"><a href=\"#zset（有序列表）\" class=\"headerlink\" title=\"zset（有序列表）\"></a>zset（有序列表）</h2><p>zset是redis最具特色的数据结构，它一方面具有set保证内部value唯一性的特点，另一方面给每个value赋予了一个score，代表value的排序权重。</p>\n<p>zset中最后一个元素被移除后，数据结构会被删除，内存会被回收；zset常用来存储粉丝列表，value是粉丝的用户id，score是关注事件，可以根据关注事件进行排序；也用来存储学生成绩，value是学生id，score是学生考试成绩，可以根据score进行排序得到名次；</p>\n<h2 id=\"数据结构的特点\"><a href=\"#数据结构的特点\" class=\"headerlink\" title=\"数据结构的特点\"></a>数据结构的特点</h2><ol>\n<li>list、set、zset、hash成为容器型数据结构，遵循<code>create if not exists</code>和<code>drop if no elements</code>规则；</li>\n<li>所有数据结构都可以设置过期时间，时间到了就会删除对象；</li>\n<li>一个字符串如果调用set方法修改了它，那么设置的过期时间就会消失；</li>\n</ol>\n<br>\n\n<h1 id=\"持久化方案\"><a href=\"#持久化方案\" class=\"headerlink\" title=\"持久化方案\"></a>持久化方案</h1><p>Redis提供了两种数据持久化的方式：AOF和RDB，用于防止服务器宕机导致数据丢失。</p>\n<h2 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h2><p>rdb是Redis DataBase缩写，核心函数为<code>rdbSave</code>(生成RDB文件)和<code>rdbLoad</code>（从文件加载内存）两个函数。</p>\n<p><img src=\"./rdb.svg\" alt=\"img\">‌</p>\n<h2 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h2><p>每当执行服务器任务或者函数时<code>flushAppendOnlyFile</code>函数都会被调用， 这个函数执行以下两个工作：</p>\n<p>‌</p>\n<ol>\n<li>WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件；</li>\n<li>SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中；</li>\n</ol>\n<p><img src=\"./aof.svg\" alt=\"img\"></p>\n<p>‌</p>\n<h2 id=\"两种方式比较\"><a href=\"#两种方式比较\" class=\"headerlink\" title=\"两种方式比较\"></a>两种方式比较</h2><ul>\n<li>aof文件比rdb更新频率高，优先使用aof还原数据；</li>\n<li>aof比rdb更安全也更大；</li>\n<li>rdb性能比aof好；</li>\n<li>如果两个都配了优先加载AOF；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"Redis特性\"><a href=\"#Redis特性\" class=\"headerlink\" title=\"Redis特性\"></a>Redis特性</h1><h2 id=\"多数据库特性\"><a href=\"#多数据库特性\" class=\"headerlink\" title=\"多数据库特性\"></a>多数据库特性</h2><p>一个redis实例可以包含多个数据库，一个客户端可以指定连接redis实例其中的一个数据库。</p>\n<blockquote>\n<p>一个redis实例可以提供16个数据库，编号从0 到 15。客户端默认是连接0号数据库。</p>\n</blockquote>\n<h3 id=\"连接指定的数据库\"><a href=\"#连接指定的数据库\" class=\"headerlink\" title=\"连接指定的数据库\"></a>连接指定的数据库</h3><p>可以通过<code>select</code>指令加上数据库编号来连接数据库，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; select 1</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379[1]&gt; keys *</span><br><span class=\"line\">(empty list or <span class=\"built_in\">set</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379[1]&gt; select 0</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; keys *</span><br><span class=\"line\"> 1) <span class=\"string\">&quot;mya3&quot;</span></span><br><span class=\"line\"> 2) <span class=\"string\">&quot;mya1&quot;</span></span><br><span class=\"line\"> 3) <span class=\"string\">&quot;qq&quot;</span></span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"数据库间移动key\"><a href=\"#数据库间移动key\" class=\"headerlink\" title=\"数据库间移动key\"></a>数据库间移动key</h3><p>可以将一个key从一个库移动到另一个库，使用<code>move</code>指令，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将0库中的myset这个key移动到1库中</span><br><span class=\"line\">127.0.0.1:6379&gt; move myset 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; select 1</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379[1]&gt; keys *</span><br><span class=\"line\">1) <span class=\"string\">&quot;myset&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"事务特性\"><a href=\"#事务特性\" class=\"headerlink\" title=\"事务特性\"></a>事务特性</h2><p>事务执行将被串行执行，执行期间redis将不会为其他客户端提供服务，从而保证事务中的指令原子化执行。redis中实现事务特性使用multi、exec、discard指令。</p>\n<ul>\n<li>multi：将会创建一个事务，其后的参数将被视为事务中的命令；</li>\n<li>exec：exec将会执行事务；</li>\n<li>discard：事务回滚</li>\n</ul>\n<p>如果在exec之前出现网络问题连接不上redis，则事务中的命令不会被执行；如果exec之后出现网络问题连接不上redis，则事务将继续执行。</p>\n<h3 id=\"multi\"><a href=\"#multi\" class=\"headerlink\" title=\"multi\"></a>multi</h3><p>multi将会开启一个事务，其后的指令将会存在事务命令队列中，直到执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> num 2</span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\"><span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; incr num</span><br><span class=\"line\">QUEUED</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 可以看到，事务命令已经被存在队列中。</p>\n</blockquote>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h3><p>exec将会执行事务命令队列中的命令，相当于mysql中的commit。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span> </span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 4</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"discard\"><a href=\"#discard\" class=\"headerlink\" title=\"discard\"></a>discard</h3><p>discard是回滚操作，相当于mysql中的rollback。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> user tom</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get user</span><br><span class=\"line\"><span class=\"string\">&quot;tom&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> user jerry</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; discard</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get user</span><br><span class=\"line\"><span class=\"string\">&quot;tom&quot;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"docker方式部署kafka集群","date":"2021-04-17T04:29:33.000Z","description":"使用docker-compose部署一个三节点kafka集群","cover":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2822442550,174028885&fm=26&gp=0.jpg","_content":"\n\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用docker-compose部署一个三节点kafka集群\n\n更新于 2021-04-17\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n>  kafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。\n\n\n\n创建数据目录：\n\n```bash\n# zookeeper数据目录\nmkdir -p /data/zookeeper/{data,datalog,logs}\n\n# kafka数据目录\nmkdir -p /data/kafka/node_{0..2}\n```\n\n\n\n\n\n使用下面的Docker-compose文件进行部署：\n\n```yaml\n# docker-compose.yaml\nversion: \"3\"\nservices:\n  zookeeper:\n    image: zookeeper\n    container_name: zookeeper\n    ports:\n      - 2181:2181\n    volumes:\n      - ./data/zookeeper/data:/data\n      - ./data/zookeeper/datalog:/datalog\n      - ./data/zookeeper/logs:/logs\n    restart: always\n  kafka_node_0:\n    depends_on:\n      - zookeeper\n    container_name: kafka-node-0\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 0\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9092\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9092:9092\n    volumes:\n      - ./data/kafka/node_0:/kafka\n    restart: unless-stopped\n  kafka_node_1:\n    depends_on:\n      - kafka_node_0\n    container_name: kafka-node-1\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9093\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9093:9093\n    volumes:\n      - ./data/kafka/node_1:/kafka\n    restart: unless-stopped\n  kafka_node_2:\n    depends_on:\n      - kafka_node_1\n    container_name: kafka-node-2\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 2\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9094\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9094:9094\n    volumes:\n      - ./data/kafka/node_2:/kafka\n    restart: unless-stopped\n```\n\n\n\n> 注意将文件中`192.168.1.100`替换为实际的地址\n\n\n\n运行：\n\n```bash\ndocker-compose up -d \ndocker ps \n```\n\n\n\n![](/Users/ivinli/Desktop/postback/status.png)\n\n\n\n> 确保所有容器都正常启动\n\n\n\n\n\n上面的有个缺点是zookeeper是单点的，如果想让zookeeper也是集群方式，可以使用如下的配置：\n\n```yml\nversion: '2.1'\n\nservices:\n  zoo1:\n    image: zookeeper:3.4.9\n    hostname: zoo1\n    ports:\n      - \"2181:2181\"\n    environment:\n        ZOO_MY_ID: 1\n        ZOO_PORT: 2181\n        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n      - ./zk-multiple-kafka-multiple/zoo1/data:/data\n      - ./zk-multiple-kafka-multiple/zoo1/datalog:/datalog\n\n  zoo2:\n    image: zookeeper:3.4.9\n    hostname: zoo2\n    ports:\n      - \"2182:2182\"\n    environment:\n        ZOO_MY_ID: 2\n        ZOO_PORT: 2182\n        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n      - ./zk-multiple-kafka-multiple/zoo2/data:/data\n      - ./zk-multiple-kafka-multiple/zoo2/datalog:/datalog\n\n  zoo3:\n    image: zookeeper:3.4.9\n    hostname: zoo3\n    ports:\n      - \"2183:2183\"\n    environment:\n        ZOO_MY_ID: 3\n        ZOO_PORT: 2183\n        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n      - ./zk-multiple-kafka-multiple/zoo3/data:/data\n      - ./zk-multiple-kafka-multiple/zoo3/datalog:/datalog\n\n\n  kafka1:\n    image: confluentinc/cp-kafka:5.5.0\n    hostname: kafka1\n    ports:\n      - \"9092:9092\"\n    environment:\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181,zoo2:2182,zoo3:2183\"\n      KAFKA_BROKER_ID: 1\n      KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n    volumes:\n      - ./zk-multiple-kafka-multiple/kafka1/data:/var/lib/kafka/data\n    depends_on:\n      - zoo1\n      - zoo2\n      - zoo3\n\n  kafka2:\n    image: confluentinc/cp-kafka:5.5.0\n    hostname: kafka2\n    ports:\n      - \"9093:9093\"\n    environment:\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181,zoo2:2182,zoo3:2183\"\n      KAFKA_BROKER_ID: 2\n      KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n    volumes:\n      - ./zk-multiple-kafka-multiple/kafka2/data:/var/lib/kafka/data\n    depends_on:\n      - zoo1\n      - zoo2\n      - zoo3\n\n  kafka3:\n    image: confluentinc/cp-kafka:5.5.0\n    hostname: kafka3\n    ports:\n      - \"9094:9094\"\n    environment:\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181,zoo2:2182,zoo3:2183\"\n      KAFKA_BROKER_ID: 3\n      KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n    volumes:\n      - ./zk-multiple-kafka-multiple/kafka3/data:/var/lib/kafka/data\n    depends_on:\n      - zoo1\n      - zoo2\n      - zoo3\n```\n\n","source":"_posts/docker方式部署kafka集群.md","raw":"---\ntitle: docker方式部署kafka集群\ndate: 2021-04-17 12:29:33\ntags:\n- Kafka\ncategories:\n- 消息中间件\n- Kafka\n- 部署\ndescription: 使用docker-compose部署一个三节点kafka集群\ncover: https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2822442550,174028885&fm=26&gp=0.jpg\n---\n\n\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用docker-compose部署一个三节点kafka集群\n\n更新于 2021-04-17\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n>  kafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。\n\n\n\n创建数据目录：\n\n```bash\n# zookeeper数据目录\nmkdir -p /data/zookeeper/{data,datalog,logs}\n\n# kafka数据目录\nmkdir -p /data/kafka/node_{0..2}\n```\n\n\n\n\n\n使用下面的Docker-compose文件进行部署：\n\n```yaml\n# docker-compose.yaml\nversion: \"3\"\nservices:\n  zookeeper:\n    image: zookeeper\n    container_name: zookeeper\n    ports:\n      - 2181:2181\n    volumes:\n      - ./data/zookeeper/data:/data\n      - ./data/zookeeper/datalog:/datalog\n      - ./data/zookeeper/logs:/logs\n    restart: always\n  kafka_node_0:\n    depends_on:\n      - zookeeper\n    container_name: kafka-node-0\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 0\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9092\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9092:9092\n    volumes:\n      - ./data/kafka/node_0:/kafka\n    restart: unless-stopped\n  kafka_node_1:\n    depends_on:\n      - kafka_node_0\n    container_name: kafka-node-1\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9093\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9093:9093\n    volumes:\n      - ./data/kafka/node_1:/kafka\n    restart: unless-stopped\n  kafka_node_2:\n    depends_on:\n      - kafka_node_1\n    container_name: kafka-node-2\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 2\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9094\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9094:9094\n    volumes:\n      - ./data/kafka/node_2:/kafka\n    restart: unless-stopped\n```\n\n\n\n> 注意将文件中`192.168.1.100`替换为实际的地址\n\n\n\n运行：\n\n```bash\ndocker-compose up -d \ndocker ps \n```\n\n\n\n![](/Users/ivinli/Desktop/postback/status.png)\n\n\n\n> 确保所有容器都正常启动\n\n\n\n\n\n上面的有个缺点是zookeeper是单点的，如果想让zookeeper也是集群方式，可以使用如下的配置：\n\n```yml\nversion: '2.1'\n\nservices:\n  zoo1:\n    image: zookeeper:3.4.9\n    hostname: zoo1\n    ports:\n      - \"2181:2181\"\n    environment:\n        ZOO_MY_ID: 1\n        ZOO_PORT: 2181\n        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n      - ./zk-multiple-kafka-multiple/zoo1/data:/data\n      - ./zk-multiple-kafka-multiple/zoo1/datalog:/datalog\n\n  zoo2:\n    image: zookeeper:3.4.9\n    hostname: zoo2\n    ports:\n      - \"2182:2182\"\n    environment:\n        ZOO_MY_ID: 2\n        ZOO_PORT: 2182\n        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n      - ./zk-multiple-kafka-multiple/zoo2/data:/data\n      - ./zk-multiple-kafka-multiple/zoo2/datalog:/datalog\n\n  zoo3:\n    image: zookeeper:3.4.9\n    hostname: zoo3\n    ports:\n      - \"2183:2183\"\n    environment:\n        ZOO_MY_ID: 3\n        ZOO_PORT: 2183\n        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n      - ./zk-multiple-kafka-multiple/zoo3/data:/data\n      - ./zk-multiple-kafka-multiple/zoo3/datalog:/datalog\n\n\n  kafka1:\n    image: confluentinc/cp-kafka:5.5.0\n    hostname: kafka1\n    ports:\n      - \"9092:9092\"\n    environment:\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181,zoo2:2182,zoo3:2183\"\n      KAFKA_BROKER_ID: 1\n      KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n    volumes:\n      - ./zk-multiple-kafka-multiple/kafka1/data:/var/lib/kafka/data\n    depends_on:\n      - zoo1\n      - zoo2\n      - zoo3\n\n  kafka2:\n    image: confluentinc/cp-kafka:5.5.0\n    hostname: kafka2\n    ports:\n      - \"9093:9093\"\n    environment:\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181,zoo2:2182,zoo3:2183\"\n      KAFKA_BROKER_ID: 2\n      KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n    volumes:\n      - ./zk-multiple-kafka-multiple/kafka2/data:/var/lib/kafka/data\n    depends_on:\n      - zoo1\n      - zoo2\n      - zoo3\n\n  kafka3:\n    image: confluentinc/cp-kafka:5.5.0\n    hostname: kafka3\n    ports:\n      - \"9094:9094\"\n    environment:\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181,zoo2:2182,zoo3:2183\"\n      KAFKA_BROKER_ID: 3\n      KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n    volumes:\n      - ./zk-multiple-kafka-multiple/kafka3/data:/var/lib/kafka/data\n    depends_on:\n      - zoo1\n      - zoo2\n      - zoo3\n```\n\n","slug":"docker方式部署kafka集群","published":1,"updated":"2021-05-02T10:58:04.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5h0007p0kl101yae1a","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用docker-compose部署一个三节点kafka集群</p><p>更新于 2021-04-17</p>\n          </div>\n\n<br>\n\n\n\n\n\n<blockquote>\n<p> kafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。</p>\n</blockquote>\n<p>创建数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper数据目录</span></span><br><span class=\"line\">mkdir -p /data/zookeeper/&#123;data,datalog,logs&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kafka数据目录</span></span><br><span class=\"line\">mkdir -p /data/kafka/node_&#123;0..2&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>使用下面的Docker-compose文件进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2181</span><span class=\"string\">:2181</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/datalog:/datalog</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/logs:/logs</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_0:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-0</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9092</span><span class=\"string\">:9092</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_0:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_1:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-1</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9093</span><span class=\"string\">:9093</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_1:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_2:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9094</span><span class=\"string\">:9094</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_2:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意将文件中<code>192.168.1.100</code>替换为实际的地址</p>\n</blockquote>\n<p>运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d </span><br><span class=\"line\">docker ps </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"/Users/ivinli/Desktop/postback/status.png\" alt=\"\"></p>\n<blockquote>\n<p>确保所有容器都正常启动</p>\n</blockquote>\n<p>上面的有个缺点是zookeeper是单点的，如果想让zookeeper也是集群方式，可以使用如下的配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zoo1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2181:2181&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span> <span class=\"string\">server.2=zoo2:2888:3888</span> <span class=\"string\">server.3=zoo3:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo1/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo1/datalog:/datalog</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">zoo2:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2182:2182&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2182</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span> <span class=\"string\">server.2=zoo2:2888:3888</span> <span class=\"string\">server.3=zoo3:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo2/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo2/datalog:/datalog</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">zoo3:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo3</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2183:2183&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2183</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span> <span class=\"string\">server.2=zoo2:2888:3888</span> <span class=\"string\">server.3=zoo3:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo3/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo3/datalog:/datalog</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.5.0</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">kafka1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9092:9092&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181,zoo2:2182,zoo3:2183&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/kafka1/data:/var/lib/kafka/data</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka2:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.5.0</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">kafka2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9093:9093&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181,zoo2:2182,zoo3:2183&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/kafka2/data:/var/lib/kafka/data</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka3:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.5.0</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">kafka3</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9094:9094&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181,zoo2:2182,zoo3:2183&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/kafka3/data:/var/lib/kafka/data</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo3</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用docker-compose部署一个三节点kafka集群</p><p>更新于 2021-04-17</p>\n          </div>\n\n<br>\n\n\n\n\n\n<blockquote>\n<p> kafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。</p>\n</blockquote>\n<p>创建数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper数据目录</span></span><br><span class=\"line\">mkdir -p /data/zookeeper/&#123;data,datalog,logs&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kafka数据目录</span></span><br><span class=\"line\">mkdir -p /data/kafka/node_&#123;0..2&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>使用下面的Docker-compose文件进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2181</span><span class=\"string\">:2181</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/datalog:/datalog</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/logs:/logs</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_0:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-0</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9092</span><span class=\"string\">:9092</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_0:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_1:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-1</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9093</span><span class=\"string\">:9093</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_1:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_2:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9094</span><span class=\"string\">:9094</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_2:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意将文件中<code>192.168.1.100</code>替换为实际的地址</p>\n</blockquote>\n<p>运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d </span><br><span class=\"line\">docker ps </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/Users/ivinli/Desktop/postback/status.png\" alt=\"\"></p>\n<blockquote>\n<p>确保所有容器都正常启动</p>\n</blockquote>\n<p>上面的有个缺点是zookeeper是单点的，如果想让zookeeper也是集群方式，可以使用如下的配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zoo1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2181:2181&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span> <span class=\"string\">server.2=zoo2:2888:3888</span> <span class=\"string\">server.3=zoo3:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo1/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo1/datalog:/datalog</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">zoo2:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2182:2182&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2182</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span> <span class=\"string\">server.2=zoo2:2888:3888</span> <span class=\"string\">server.3=zoo3:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo2/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo2/datalog:/datalog</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">zoo3:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo3</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2183:2183&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2183</span></span><br><span class=\"line\">        <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span> <span class=\"string\">server.2=zoo2:2888:3888</span> <span class=\"string\">server.3=zoo3:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo3/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/zoo3/datalog:/datalog</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.5.0</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">kafka1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9092:9092&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181,zoo2:2182,zoo3:2183&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/kafka1/data:/var/lib/kafka/data</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka2:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.5.0</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">kafka2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9093:9093&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181,zoo2:2182,zoo3:2183&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/kafka2/data:/var/lib/kafka/data</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo3</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">kafka3:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.5.0</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">kafka3</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9094:9094&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181,zoo2:2182,zoo3:2183&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./zk-multiple-kafka-multiple/kafka3/data:/var/lib/kafka/data</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zoo3</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"docker方式部署zookeeper集群","date":"2021-04-17T04:24:13.000Z","description":"使用docker方式部署zookeeper集群","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用docker方式部署zookeeper集群\n\n更新于 2021-04-017\n\n{% endnote %}\n\n<br>\n\n\n\n# 创建目录\n\n在每个节点都创建数据和日志目录：\n\n```bash\nmkdir -p /data/zookeeper/data\nmkdir -p /data/zookeeper/logs\n```\n\n<br>\n\n\n\n# 下载镜像\n\n这里使用的是3.5.5版本的zookeeper：\n\n```bash\ndocker pull zookeeper:3.5.5\n```\n\n<br>\n\n# 创建配置文件\n\n配置文件的内容如下：\n\n```bash\ncat > /data/zookeeper/zoo.cfg << EOF\nclientPort=2181\ndataDir=/data/zookeeper/data\ndataLogDir=/data/zookeeper/logs\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=0\nmaxClientCnxns=60\nstandaloneEnabled=false\nadmin.enableServer=true\n4lw.commands.whitelist=*\nserver.2=192.168.12.12:2888:3888\nserver.3=192.168.12.13:2888:3888\nserver.4=192.168.12.14:2888:3888\nserver.5=192.168.12.15:2888:3888\nserver.6=192.168.12.16:2888:3888\nEOF\n```\n\n\n\n- `clientPort`：服务监听的端口；\n- `dataDir`：数据目录；\n- `dataLogDir`：顺序日志目录；\n- `tickTime`：心跳间隔；\n- `autopurge.snapRetainCount`：保留多少个snapshot，之前的会删除；\n- `autopurge.purgeInterval`：多久会清理一次数据（0表示不清理）；\n- `maxClientCnxns`：客户端连接数限制；\n- `standaloneEnabled`：在启动脚本中关闭管理控制台；\n- `4lw.commands.whitelist`：白名单；\n\n\n\n> 注意修改配置文件中的server配置，**配置文件需要在每个节点都创建**\n\n<br>\n\n\n\n\n\n# 生成myid文件\n\n根据预先设置的myid，在每个节点的`/data/zookeeper/data`下创建一个`myid`文件：\n\n```bash\necho 2 > /data/zookeeper/data/myid\n```\n\n\n\n> 注意每个节点的myid文件内容不一样\n\n<br>\n\n\n\n# 启动zookeeper\n\n在每个节点分别执行下面的命令启动zookeeper：\n\n```bash\ndocker run \\\n    --name zookeeper \\\n    --network=host \\\n    --restart always \\\n    -v /data/zookeeper/zoo.cfg:/conf/zoo.cfg \\\n    -v /data/zookeeper:/data/zookeeper \\\n    -v /etc/localtime:/etc/localtime:ro \\\n    -d zookeeper:3.5.5\n```\n\n","source":"_posts/docker方式部署zookeeper集群.md","raw":"---\ntitle: docker方式部署zookeeper集群\ndate: 2021-04-17 12:24:13\ntags:\n- Zookeeper\ncategories:\n- Zookeeper\n- 部署\ndescription: 使用docker方式部署zookeeper集群\ncover:\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用docker方式部署zookeeper集群\n\n更新于 2021-04-017\n\n{% endnote %}\n\n<br>\n\n\n\n# 创建目录\n\n在每个节点都创建数据和日志目录：\n\n```bash\nmkdir -p /data/zookeeper/data\nmkdir -p /data/zookeeper/logs\n```\n\n<br>\n\n\n\n# 下载镜像\n\n这里使用的是3.5.5版本的zookeeper：\n\n```bash\ndocker pull zookeeper:3.5.5\n```\n\n<br>\n\n# 创建配置文件\n\n配置文件的内容如下：\n\n```bash\ncat > /data/zookeeper/zoo.cfg << EOF\nclientPort=2181\ndataDir=/data/zookeeper/data\ndataLogDir=/data/zookeeper/logs\ntickTime=2000\ninitLimit=5\nsyncLimit=2\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=0\nmaxClientCnxns=60\nstandaloneEnabled=false\nadmin.enableServer=true\n4lw.commands.whitelist=*\nserver.2=192.168.12.12:2888:3888\nserver.3=192.168.12.13:2888:3888\nserver.4=192.168.12.14:2888:3888\nserver.5=192.168.12.15:2888:3888\nserver.6=192.168.12.16:2888:3888\nEOF\n```\n\n\n\n- `clientPort`：服务监听的端口；\n- `dataDir`：数据目录；\n- `dataLogDir`：顺序日志目录；\n- `tickTime`：心跳间隔；\n- `autopurge.snapRetainCount`：保留多少个snapshot，之前的会删除；\n- `autopurge.purgeInterval`：多久会清理一次数据（0表示不清理）；\n- `maxClientCnxns`：客户端连接数限制；\n- `standaloneEnabled`：在启动脚本中关闭管理控制台；\n- `4lw.commands.whitelist`：白名单；\n\n\n\n> 注意修改配置文件中的server配置，**配置文件需要在每个节点都创建**\n\n<br>\n\n\n\n\n\n# 生成myid文件\n\n根据预先设置的myid，在每个节点的`/data/zookeeper/data`下创建一个`myid`文件：\n\n```bash\necho 2 > /data/zookeeper/data/myid\n```\n\n\n\n> 注意每个节点的myid文件内容不一样\n\n<br>\n\n\n\n# 启动zookeeper\n\n在每个节点分别执行下面的命令启动zookeeper：\n\n```bash\ndocker run \\\n    --name zookeeper \\\n    --network=host \\\n    --restart always \\\n    -v /data/zookeeper/zoo.cfg:/conf/zoo.cfg \\\n    -v /data/zookeeper:/data/zookeeper \\\n    -v /etc/localtime:/etc/localtime:ro \\\n    -d zookeeper:3.5.5\n```\n\n","slug":"docker方式部署zookeeper集群","published":1,"updated":"2021-04-17T04:26:42.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5i0009p0kleh027pfh","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用docker方式部署zookeeper集群</p><p>更新于 2021-04-017</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h1><p>在每个节点都创建数据和日志目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/zookeeper/data</span><br><span class=\"line\">mkdir -p /data/zookeeper/logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h1><p>这里使用的是3.5.5版本的zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull zookeeper:3.5.5</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h1><p>配置文件的内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /data/zookeeper/zoo.cfg &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">clientPort=2181</span></span><br><span class=\"line\"><span class=\"string\">dataDir=/data/zookeeper/data</span></span><br><span class=\"line\"><span class=\"string\">dataLogDir=/data/zookeeper/logs</span></span><br><span class=\"line\"><span class=\"string\">tickTime=2000</span></span><br><span class=\"line\"><span class=\"string\">initLimit=5</span></span><br><span class=\"line\"><span class=\"string\">syncLimit=2</span></span><br><span class=\"line\"><span class=\"string\">autopurge.snapRetainCount=3</span></span><br><span class=\"line\"><span class=\"string\">autopurge.purgeInterval=0</span></span><br><span class=\"line\"><span class=\"string\">maxClientCnxns=60</span></span><br><span class=\"line\"><span class=\"string\">standaloneEnabled=false</span></span><br><span class=\"line\"><span class=\"string\">admin.enableServer=true</span></span><br><span class=\"line\"><span class=\"string\">4lw.commands.whitelist=*</span></span><br><span class=\"line\"><span class=\"string\">server.2=192.168.12.12:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.3=192.168.12.13:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.4=192.168.12.14:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.5=192.168.12.15:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.6=192.168.12.16:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>clientPort</code>：服务监听的端口；</li>\n<li><code>dataDir</code>：数据目录；</li>\n<li><code>dataLogDir</code>：顺序日志目录；</li>\n<li><code>tickTime</code>：心跳间隔；</li>\n<li><code>autopurge.snapRetainCount</code>：保留多少个snapshot，之前的会删除；</li>\n<li><code>autopurge.purgeInterval</code>：多久会清理一次数据（0表示不清理）；</li>\n<li><code>maxClientCnxns</code>：客户端连接数限制；</li>\n<li><code>standaloneEnabled</code>：在启动脚本中关闭管理控制台；</li>\n<li><code>4lw.commands.whitelist</code>：白名单；</li>\n</ul>\n<blockquote>\n<p>注意修改配置文件中的server配置，<strong>配置文件需要在每个节点都创建</strong></p>\n</blockquote>\n<br>\n\n\n\n\n\n<h1 id=\"生成myid文件\"><a href=\"#生成myid文件\" class=\"headerlink\" title=\"生成myid文件\"></a>生成myid文件</h1><p>根据预先设置的myid，在每个节点的<code>/data/zookeeper/data</code>下创建一个<code>myid</code>文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /data/zookeeper/data/myid</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意每个节点的myid文件内容不一样</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"启动zookeeper\"><a href=\"#启动zookeeper\" class=\"headerlink\" title=\"启动zookeeper\"></a>启动zookeeper</h1><p>在每个节点分别执行下面的命令启动zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">    --name zookeeper \\</span><br><span class=\"line\">    --network=host \\</span><br><span class=\"line\">    --restart always \\</span><br><span class=\"line\">    -v /data/zookeeper/zoo.cfg:/conf/zoo.cfg \\</span><br><span class=\"line\">    -v /data/zookeeper:/data/zookeeper \\</span><br><span class=\"line\">    -v /etc/localtime:/etc/localtime:ro \\</span><br><span class=\"line\">    -d zookeeper:3.5.5</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用docker方式部署zookeeper集群</p><p>更新于 2021-04-017</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h1><p>在每个节点都创建数据和日志目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/zookeeper/data</span><br><span class=\"line\">mkdir -p /data/zookeeper/logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h1><p>这里使用的是3.5.5版本的zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull zookeeper:3.5.5</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h1 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h1><p>配置文件的内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /data/zookeeper/zoo.cfg &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">clientPort=2181</span></span><br><span class=\"line\"><span class=\"string\">dataDir=/data/zookeeper/data</span></span><br><span class=\"line\"><span class=\"string\">dataLogDir=/data/zookeeper/logs</span></span><br><span class=\"line\"><span class=\"string\">tickTime=2000</span></span><br><span class=\"line\"><span class=\"string\">initLimit=5</span></span><br><span class=\"line\"><span class=\"string\">syncLimit=2</span></span><br><span class=\"line\"><span class=\"string\">autopurge.snapRetainCount=3</span></span><br><span class=\"line\"><span class=\"string\">autopurge.purgeInterval=0</span></span><br><span class=\"line\"><span class=\"string\">maxClientCnxns=60</span></span><br><span class=\"line\"><span class=\"string\">standaloneEnabled=false</span></span><br><span class=\"line\"><span class=\"string\">admin.enableServer=true</span></span><br><span class=\"line\"><span class=\"string\">4lw.commands.whitelist=*</span></span><br><span class=\"line\"><span class=\"string\">server.2=192.168.12.12:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.3=192.168.12.13:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.4=192.168.12.14:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.5=192.168.12.15:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.6=192.168.12.16:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>clientPort</code>：服务监听的端口；</li>\n<li><code>dataDir</code>：数据目录；</li>\n<li><code>dataLogDir</code>：顺序日志目录；</li>\n<li><code>tickTime</code>：心跳间隔；</li>\n<li><code>autopurge.snapRetainCount</code>：保留多少个snapshot，之前的会删除；</li>\n<li><code>autopurge.purgeInterval</code>：多久会清理一次数据（0表示不清理）；</li>\n<li><code>maxClientCnxns</code>：客户端连接数限制；</li>\n<li><code>standaloneEnabled</code>：在启动脚本中关闭管理控制台；</li>\n<li><code>4lw.commands.whitelist</code>：白名单；</li>\n</ul>\n<blockquote>\n<p>注意修改配置文件中的server配置，<strong>配置文件需要在每个节点都创建</strong></p>\n</blockquote>\n<br>\n\n\n\n\n\n<h1 id=\"生成myid文件\"><a href=\"#生成myid文件\" class=\"headerlink\" title=\"生成myid文件\"></a>生成myid文件</h1><p>根据预先设置的myid，在每个节点的<code>/data/zookeeper/data</code>下创建一个<code>myid</code>文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; /data/zookeeper/data/myid</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意每个节点的myid文件内容不一样</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"启动zookeeper\"><a href=\"#启动zookeeper\" class=\"headerlink\" title=\"启动zookeeper\"></a>启动zookeeper</h1><p>在每个节点分别执行下面的命令启动zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">    --name zookeeper \\</span><br><span class=\"line\">    --network=host \\</span><br><span class=\"line\">    --restart always \\</span><br><span class=\"line\">    -v /data/zookeeper/zoo.cfg:/conf/zoo.cfg \\</span><br><span class=\"line\">    -v /data/zookeeper:/data/zookeeper \\</span><br><span class=\"line\">    -v /etc/localtime:/etc/localtime:ro \\</span><br><span class=\"line\">    -d zookeeper:3.5.5</span><br></pre></td></tr></table></figure>\n\n"},{"title":"ingress-nginx实现蓝绿、灰度发布","date":"2021-03-20T07:34:11.000Z","description":"利用ingress特性实现在k8s中的蓝绿、灰度发布","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中利用 Ingress-nginx 的 Canary 功能实现蓝绿、灰度发布\n\n更新于 2021-03-20\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# Canary功能介绍\n\nIngress-Nginx在0.21版本引入了Canary功能，可以为网关入口配置多个版本的应用程序，使用annotation来控制多个后端服务的流量分配。\n\n\n\ncanary通过下面的一些注释来实现流量分配：\n\n- `nginx.ingress.kubernetes.io/canary: \"true\"`：启用Canary功能；\n- `nginx.ingress.kubernetes.io/canary-weight` ：指定一个0-100的整数，根据设置的值来决定大概有百分之多少的流量会分配Canary Ingress中指定的后端服务；\n- `nginx.ingress.kubernetes.io/canary-by-header` ：基于request header 的流量切分，适用于灰度发布或者A/B测试，当设定的hearder值为always是，请求流量会被一直分配到Canary入口，当hearder值被设置为never时，请求流量不会分配到Canary入口，对于其他hearder值，将忽略，并通过优先级将请求流量分配到其他规则；\n- `nginx.ingress.kubernetes.io/canary-by-header-value`： 要和`nginx.ingress.kubernetes.io/canary-by-header` 一起使用，当请求中的hearder key和value 与`nginx.ingress.kubernetes.io/canary-by-header` `nginx.ingress.kubernetes.io/canary-by-header-value`匹配时，请求流量会被分配到Canary Ingress入口，对于其他任何hearder值，将忽略，并通过优先级将请求流量分配到其他规则；\n- `nginx.ingress.kubernetes.io/canary-by-cookie` ：基于cookie的流量切分，也适用于灰度发布或者A/B测试，当cookie值设置为always时，请求流量将被路由到Canary Ingress入口，当cookie值设置为never时，请求流量将不会路由到Canary入口，对于其他值，将忽略，并通过优先级将请求流量分配到其他规则；\n\n\n\n以上几种注释的优先级为：**canary-by-header - > canary-by-cookie - > canary-weight**\n\n\n\n<br>\n\n\n\n# 基于权重分配流量\n\n## 创建v1版本服务\n\n{% tabs comments %}\n\n<!-- tab Ingress -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n  labels:\n    app: echoserverv1\n  name: echoserverv1\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv1\n          servicePort: 8080\n        path: /\n```\n\n\n\n<!-- endtab -->\n\n<!-- tab Service -->\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name:  echoserverv1\n  namespace: echoserver\nspec:\n  selector:\n    name:  echoserverv1\n  type:  ClusterIP\n  ports:\n  - name:  echoserverv1\n    port:  8080\n    targetPort:  8080\n```\n\n<!-- endtab -->\n\n<!-- tab Deployment -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name:  echoserverv1\n  namespace: echoserver\n  labels:\n    name:  echoserverv1\nspec:\n  template:\n    metadata:\n      labels:\n        name:  echoserverv1\n    spec:\n      containers:\n      - image:  mirrorgooglecontainers/echoserver:1.10\n        name:  echoserverv1 \n        ports:\n        - containerPort:  8080\n          name:  echoserverv1\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查创建情况\n\n```bash\nkubectl get pod,service,ingress -n echoserver\n```\n\n<img src=\"./pod.png\" style=\"zoom:70%;\" />\n\n\n\n## 访问服务\n\n```bash\nfor i in `seq 10`;do curl -s echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v1.png\" style=\"zoom:70%;\" />\n\n\n\n>  可以看到，所有的请求都正常返回且版本为v1\n\n\n\n## 发布v2版本服务\n\n{% tabs comments %}\n\n<!-- tab Ingress -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n> 注意这里的ingress就开启了canary功能，切设置权重为50%\n\n<!-- endtab -->\n\n<!-- tab Service -->\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\nspec:\n  selector:\n    name:  echoserverv2\n  type:  ClusterIP\n  ports:\n  - name:  echoserverv2\n    port:  8080\n    targetPort:  8080\n```\n\n<!-- endtab -->\n\n<!-- tab Deployment -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\n  labels:\n    name:  echoserverv2\nspec:\n  template:\n    metadata:\n      labels:\n        name:  echoserverv2\n    spec:\n      containers:\n      - image:  mirrorgooglecontainers/echoserver:1.10\n        name:  echoserverv2 \n        ports:\n        - containerPort:  8080\n          name:  echoserverv2\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查v2版本服务\n\n```bash\nkubectl get pod,service,ingress -n echoserver\n```\n\n<img src=\"./v2.png\" style=\"zoom:70%;\" />\n\n\n\n## 访问服务\n\n```bash\nfor i in `seq 10`;do curl -s echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-wight.png\" style=\"zoom:70%;\" />\n\n\n\n> 可以看到，v1和v2两个版本的请求比几乎是50%\n\n\n\n\n\n<br>\n\n\n\n# 基于header的流量分配\n\n## 更新v2版本服务\n\n{% tabs comments %}\n\n<!-- tab Ingress -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n    nginx.ingress.kubernetes.io/canary-by-header: \"v2\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n> 注意这里设置了`nginx.ingress.kubernetes.io/canary-by-header`\n\n<!-- endtab -->\n\n<!-- tab Service -->\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\nspec:\n  selector:\n    name:  echoserverv2\n  type:  ClusterIP\n  ports:\n  - name:  echoserverv2\n    port:  8080\n    targetPort:  8080\n```\n\n<!-- endtab -->\n\n<!-- tab Deployment -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\n  labels:\n    name:  echoserverv2\nspec:\n  template:\n    metadata:\n      labels:\n        name:  echoserverv2\n    spec:\n      containers:\n      - image:  mirrorgooglecontainers/echoserver:1.10\n        name:  echoserverv2 \n        ports:\n        - containerPort:  8080\n          name:  echoserverv2\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 访问服务\n\n因为设置了`nginx.ingress.kubernetes.io/canary-by-header: v2`，将会出现以下的集中情况：\n\n{% tabs comments %}\n\n<!-- tab 请求header为 v2:always -->\n\n```bash\nfor i in `seq 10`;do curl -s -H \"v2:always\" echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-ha.png\" style=\"zoom:70%;\" />\n\n\n\n> 可以看到请求的header-key为v2，value为always，流量将全部调度到v2版本\n\n<!-- endtab -->\n\n<!-- tab 请求header为 v2:never -->\n\n```bash\nfor i in `seq 10`;do curl -s -H \"v2:never\" echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-never.png\" style=\"zoom:70%;\" />\n\n\n\n> 可以看到请求的header-key为v2，value为never，流量将全部调度到v1版本\n\n<!-- endtab -->\n\n<!-- tab 请求header为 v2，header-key任意 -->\n\n```bash\nfor i in `seq 10`;do curl -s -H \"v2:true\" echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-true.png\" style=\"zoom:70%;\" />\n\n> 可以看到请求的header-key为v2，value为其他值，流量将根据权重比例进行分配\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 按照header key/value进行分配\n\n只需要在v2版本的ingress中指定`nginx.ingress.kubernetes.io/canary-by-header-value`即可：\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n    nginx.ingress.kubernetes.io/canary-by-header: \"v2\"\n    nginx.ingress.kubernetes.io/canary-by-header-value: \"true\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n\n\n此时因为指定了header key和value，则请求的header必须包含：`v2:true`才能进入v2版本，否则会按照比例进行v1，v2版本分配。\n\n\n\n<br>\n\n\n\n# 基于cookie进行流量分配\n\n## 更新v2版本服务\n\n\n\n基于cookie进行分配的时候，不能定义cookie的value\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n    nginx.ingress.kubernetes.io/canary-by-cookie: \"user_from_shanghai\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n\n\n## 访问服务\n\n{% tabs comments %}\n\n<!-- tab 设置cookie user_from_shanghai -->\n\n```bash\nfor i in `seq 10`;do curl -s --cookie \"user_from_shanghai\" echo.example.com|grep Hostname;done\n```\n\n\n\n> 请求将按照比例分配到两个版本\n\n<!-- endtab -->\n\n<!-- tab 设置cookie user_from_shanghai:always -->\n\n```bash\nfor i in `seq 10`;do curl -s --cookie \"user_from_shanghai:always\" echo.example.com|grep Hostname;done\n```\n\n\n\n> 请求将按照比例分配到两个版本\n\n<!-- endtab -->\n\n<!-- tab 设置coolie user_from_shanghai=always -->\n\n```bash\nfor i in `seq 10`;do curl -s --cookie \"user_from_shanghai=always\" echo.example.com|grep Hostname;done\n```\n\n> 请求将全部进入v2版本\n\n<!-- endtab -->\n\n{% endtabs %}\n\n","source":"_posts/ingress-nginx实现蓝绿、灰度发布.md","raw":"---\ntitle: ingress-nginx实现蓝绿、灰度发布\ndate: 2021-03-20 15:34:11\ntags:\n- Ingress\ncategories:\n- Kubernetes\n- Ingress-nginx\ndescription: 利用ingress特性实现在k8s中的蓝绿、灰度发布\ncover: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中利用 Ingress-nginx 的 Canary 功能实现蓝绿、灰度发布\n\n更新于 2021-03-20\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# Canary功能介绍\n\nIngress-Nginx在0.21版本引入了Canary功能，可以为网关入口配置多个版本的应用程序，使用annotation来控制多个后端服务的流量分配。\n\n\n\ncanary通过下面的一些注释来实现流量分配：\n\n- `nginx.ingress.kubernetes.io/canary: \"true\"`：启用Canary功能；\n- `nginx.ingress.kubernetes.io/canary-weight` ：指定一个0-100的整数，根据设置的值来决定大概有百分之多少的流量会分配Canary Ingress中指定的后端服务；\n- `nginx.ingress.kubernetes.io/canary-by-header` ：基于request header 的流量切分，适用于灰度发布或者A/B测试，当设定的hearder值为always是，请求流量会被一直分配到Canary入口，当hearder值被设置为never时，请求流量不会分配到Canary入口，对于其他hearder值，将忽略，并通过优先级将请求流量分配到其他规则；\n- `nginx.ingress.kubernetes.io/canary-by-header-value`： 要和`nginx.ingress.kubernetes.io/canary-by-header` 一起使用，当请求中的hearder key和value 与`nginx.ingress.kubernetes.io/canary-by-header` `nginx.ingress.kubernetes.io/canary-by-header-value`匹配时，请求流量会被分配到Canary Ingress入口，对于其他任何hearder值，将忽略，并通过优先级将请求流量分配到其他规则；\n- `nginx.ingress.kubernetes.io/canary-by-cookie` ：基于cookie的流量切分，也适用于灰度发布或者A/B测试，当cookie值设置为always时，请求流量将被路由到Canary Ingress入口，当cookie值设置为never时，请求流量将不会路由到Canary入口，对于其他值，将忽略，并通过优先级将请求流量分配到其他规则；\n\n\n\n以上几种注释的优先级为：**canary-by-header - > canary-by-cookie - > canary-weight**\n\n\n\n<br>\n\n\n\n# 基于权重分配流量\n\n## 创建v1版本服务\n\n{% tabs comments %}\n\n<!-- tab Ingress -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n  labels:\n    app: echoserverv1\n  name: echoserverv1\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv1\n          servicePort: 8080\n        path: /\n```\n\n\n\n<!-- endtab -->\n\n<!-- tab Service -->\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name:  echoserverv1\n  namespace: echoserver\nspec:\n  selector:\n    name:  echoserverv1\n  type:  ClusterIP\n  ports:\n  - name:  echoserverv1\n    port:  8080\n    targetPort:  8080\n```\n\n<!-- endtab -->\n\n<!-- tab Deployment -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name:  echoserverv1\n  namespace: echoserver\n  labels:\n    name:  echoserverv1\nspec:\n  template:\n    metadata:\n      labels:\n        name:  echoserverv1\n    spec:\n      containers:\n      - image:  mirrorgooglecontainers/echoserver:1.10\n        name:  echoserverv1 \n        ports:\n        - containerPort:  8080\n          name:  echoserverv1\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查创建情况\n\n```bash\nkubectl get pod,service,ingress -n echoserver\n```\n\n<img src=\"./pod.png\" style=\"zoom:70%;\" />\n\n\n\n## 访问服务\n\n```bash\nfor i in `seq 10`;do curl -s echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v1.png\" style=\"zoom:70%;\" />\n\n\n\n>  可以看到，所有的请求都正常返回且版本为v1\n\n\n\n## 发布v2版本服务\n\n{% tabs comments %}\n\n<!-- tab Ingress -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n> 注意这里的ingress就开启了canary功能，切设置权重为50%\n\n<!-- endtab -->\n\n<!-- tab Service -->\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\nspec:\n  selector:\n    name:  echoserverv2\n  type:  ClusterIP\n  ports:\n  - name:  echoserverv2\n    port:  8080\n    targetPort:  8080\n```\n\n<!-- endtab -->\n\n<!-- tab Deployment -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\n  labels:\n    name:  echoserverv2\nspec:\n  template:\n    metadata:\n      labels:\n        name:  echoserverv2\n    spec:\n      containers:\n      - image:  mirrorgooglecontainers/echoserver:1.10\n        name:  echoserverv2 \n        ports:\n        - containerPort:  8080\n          name:  echoserverv2\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查v2版本服务\n\n```bash\nkubectl get pod,service,ingress -n echoserver\n```\n\n<img src=\"./v2.png\" style=\"zoom:70%;\" />\n\n\n\n## 访问服务\n\n```bash\nfor i in `seq 10`;do curl -s echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-wight.png\" style=\"zoom:70%;\" />\n\n\n\n> 可以看到，v1和v2两个版本的请求比几乎是50%\n\n\n\n\n\n<br>\n\n\n\n# 基于header的流量分配\n\n## 更新v2版本服务\n\n{% tabs comments %}\n\n<!-- tab Ingress -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n    nginx.ingress.kubernetes.io/canary-by-header: \"v2\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n> 注意这里设置了`nginx.ingress.kubernetes.io/canary-by-header`\n\n<!-- endtab -->\n\n<!-- tab Service -->\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\nspec:\n  selector:\n    name:  echoserverv2\n  type:  ClusterIP\n  ports:\n  - name:  echoserverv2\n    port:  8080\n    targetPort:  8080\n```\n\n<!-- endtab -->\n\n<!-- tab Deployment -->\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name:  echoserverv2\n  namespace: echoserver\n  labels:\n    name:  echoserverv2\nspec:\n  template:\n    metadata:\n      labels:\n        name:  echoserverv2\n    spec:\n      containers:\n      - image:  mirrorgooglecontainers/echoserver:1.10\n        name:  echoserverv2 \n        ports:\n        - containerPort:  8080\n          name:  echoserverv2\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 访问服务\n\n因为设置了`nginx.ingress.kubernetes.io/canary-by-header: v2`，将会出现以下的集中情况：\n\n{% tabs comments %}\n\n<!-- tab 请求header为 v2:always -->\n\n```bash\nfor i in `seq 10`;do curl -s -H \"v2:always\" echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-ha.png\" style=\"zoom:70%;\" />\n\n\n\n> 可以看到请求的header-key为v2，value为always，流量将全部调度到v2版本\n\n<!-- endtab -->\n\n<!-- tab 请求header为 v2:never -->\n\n```bash\nfor i in `seq 10`;do curl -s -H \"v2:never\" echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-never.png\" style=\"zoom:70%;\" />\n\n\n\n> 可以看到请求的header-key为v2，value为never，流量将全部调度到v1版本\n\n<!-- endtab -->\n\n<!-- tab 请求header为 v2，header-key任意 -->\n\n```bash\nfor i in `seq 10`;do curl -s -H \"v2:true\" echo.example.com|grep Hostname;done\n```\n\n<img src=\"./v2-true.png\" style=\"zoom:70%;\" />\n\n> 可以看到请求的header-key为v2，value为其他值，流量将根据权重比例进行分配\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 按照header key/value进行分配\n\n只需要在v2版本的ingress中指定`nginx.ingress.kubernetes.io/canary-by-header-value`即可：\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n    nginx.ingress.kubernetes.io/canary-by-header: \"v2\"\n    nginx.ingress.kubernetes.io/canary-by-header-value: \"true\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n\n\n此时因为指定了header key和value，则请求的header必须包含：`v2:true`才能进入v2版本，否则会按照比例进行v1，v2版本分配。\n\n\n\n<br>\n\n\n\n# 基于cookie进行流量分配\n\n## 更新v2版本服务\n\n\n\n基于cookie进行分配的时候，不能定义cookie的value\n\n```yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/canary: \"true\"\n    nginx.ingress.kubernetes.io/canary-weight: \"50\"\n    nginx.ingress.kubernetes.io/canary-by-cookie: \"user_from_shanghai\"\n  labels:\n    app: echoserverv2\n  name: echoserverv2\n  namespace: echoserver\nspec:\n  rules:\n  - host: echo.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: echoserverv2\n          servicePort: 8080\n        path: /\n```\n\n\n\n## 访问服务\n\n{% tabs comments %}\n\n<!-- tab 设置cookie user_from_shanghai -->\n\n```bash\nfor i in `seq 10`;do curl -s --cookie \"user_from_shanghai\" echo.example.com|grep Hostname;done\n```\n\n\n\n> 请求将按照比例分配到两个版本\n\n<!-- endtab -->\n\n<!-- tab 设置cookie user_from_shanghai:always -->\n\n```bash\nfor i in `seq 10`;do curl -s --cookie \"user_from_shanghai:always\" echo.example.com|grep Hostname;done\n```\n\n\n\n> 请求将按照比例分配到两个版本\n\n<!-- endtab -->\n\n<!-- tab 设置coolie user_from_shanghai=always -->\n\n```bash\nfor i in `seq 10`;do curl -s --cookie \"user_from_shanghai=always\" echo.example.com|grep Hostname;done\n```\n\n> 请求将全部进入v2版本\n\n<!-- endtab -->\n\n{% endtabs %}\n\n","slug":"ingress-nginx实现蓝绿、灰度发布","published":1,"updated":"2021-03-20T08:55:31.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5j000bp0klhepe9i1k","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中利用 Ingress-nginx 的 Canary 功能实现蓝绿、灰度发布</p><p>更新于 2021-03-20</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"Canary功能介绍\"><a href=\"#Canary功能介绍\" class=\"headerlink\" title=\"Canary功能介绍\"></a>Canary功能介绍</h1><p>Ingress-Nginx在0.21版本引入了Canary功能，可以为网关入口配置多个版本的应用程序，使用annotation来控制多个后端服务的流量分配。</p>\n<p>canary通过下面的一些注释来实现流量分配：</p>\n<ul>\n<li><code>nginx.ingress.kubernetes.io/canary: &quot;true&quot;</code>：启用Canary功能；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-weight</code> ：指定一个0-100的整数，根据设置的值来决定大概有百分之多少的流量会分配Canary Ingress中指定的后端服务；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-by-header</code> ：基于request header 的流量切分，适用于灰度发布或者A/B测试，当设定的hearder值为always是，请求流量会被一直分配到Canary入口，当hearder值被设置为never时，请求流量不会分配到Canary入口，对于其他hearder值，将忽略，并通过优先级将请求流量分配到其他规则；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-by-header-value</code>： 要和<code>nginx.ingress.kubernetes.io/canary-by-header</code> 一起使用，当请求中的hearder key和value 与<code>nginx.ingress.kubernetes.io/canary-by-header</code> <code>nginx.ingress.kubernetes.io/canary-by-header-value</code>匹配时，请求流量会被分配到Canary Ingress入口，对于其他任何hearder值，将忽略，并通过优先级将请求流量分配到其他规则；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-by-cookie</code> ：基于cookie的流量切分，也适用于灰度发布或者A/B测试，当cookie值设置为always时，请求流量将被路由到Canary Ingress入口，当cookie值设置为never时，请求流量将不会路由到Canary入口，对于其他值，将忽略，并通过优先级将请求流量分配到其他规则；</li>\n</ul>\n<p>以上几种注释的优先级为：<strong>canary-by-header - &gt; canary-by-cookie - &gt; canary-weight</strong></p>\n<br>\n\n\n\n<h1 id=\"基于权重分配流量\"><a href=\"#基于权重分配流量\" class=\"headerlink\" title=\"基于权重分配流量\"></a>基于权重分配流量</h1><h2 id=\"创建v1版本服务\"><a href=\"#创建v1版本服务\" class=\"headerlink\" title=\"创建v1版本服务\"></a>创建v1版本服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Ingress</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">Deployment</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span>  <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span>  <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">mirrorgooglecontainers/echoserver:1.10</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span> </span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查创建情况\"><a href=\"#检查创建情况\" class=\"headerlink\" title=\"检查创建情况\"></a>检查创建情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,service,ingress -n echoserver</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./pod.png\" style=\"zoom:70%;\" />\n\n\n\n<h2 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./v1.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p> 可以看到，所有的请求都正常返回且版本为v1</p>\n</blockquote>\n<h2 id=\"发布v2版本服务\"><a href=\"#发布v2版本服务\" class=\"headerlink\" title=\"发布v2版本服务\"></a>发布v2版本服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Ingress</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">Deployment</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这里的ingress就开启了canary功能，切设置权重为50%</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span>  <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span>  <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">mirrorgooglecontainers/echoserver:1.10</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span> </span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查v2版本服务\"><a href=\"#检查v2版本服务\" class=\"headerlink\" title=\"检查v2版本服务\"></a>检查v2版本服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,service,ingress -n echoserver</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./v2.png\" style=\"zoom:70%;\" />\n\n\n\n<h2 id=\"访问服务-1\"><a href=\"#访问服务-1\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./v2-wight.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>可以看到，v1和v2两个版本的请求比几乎是50%</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"基于header的流量分配\"><a href=\"#基于header的流量分配\" class=\"headerlink\" title=\"基于header的流量分配\"></a>基于header的流量分配</h1><h2 id=\"更新v2版本服务\"><a href=\"#更新v2版本服务\" class=\"headerlink\" title=\"更新v2版本服务\"></a>更新v2版本服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Ingress</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">Deployment</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-header:</span> <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这里设置了<code>nginx.ingress.kubernetes.io/canary-by-header</code></p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span>  <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span>  <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">mirrorgooglecontainers/echoserver:1.10</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span> </span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"访问服务-2\"><a href=\"#访问服务-2\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><p>因为设置了<code>nginx.ingress.kubernetes.io/canary-by-header: v2</code>，将会出现以下的集中情况：</p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">请求header为 v2:always</button></li><li class=\"tab\"><button data-href=\"#comments-2\">请求header为 v2:never</button></li><li class=\"tab\"><button data-href=\"#comments-3\">请求header为 v2，header-key任意</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s -H <span class=\"string\">&quot;v2:always&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./v2-ha.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>可以看到请求的header-key为v2，value为always，流量将全部调度到v2版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s -H <span class=\"string\">&quot;v2:never&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./v2-never.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>可以看到请求的header-key为v2，value为never，流量将全部调度到v1版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s -H <span class=\"string\">&quot;v2:true&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./v2-true.png\" style=\"zoom:70%;\" />\n\n<blockquote>\n<p>可以看到请求的header-key为v2，value为其他值，流量将根据权重比例进行分配</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"按照header-key-value进行分配\"><a href=\"#按照header-key-value进行分配\" class=\"headerlink\" title=\"按照header key/value进行分配\"></a>按照header key/value进行分配</h2><p>只需要在v2版本的ingress中指定<code>nginx.ingress.kubernetes.io/canary-by-header-value</code>即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-header:</span> <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-header-value:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时因为指定了header key和value，则请求的header必须包含：<code>v2:true</code>才能进入v2版本，否则会按照比例进行v1，v2版本分配。</p>\n<br>\n\n\n\n<h1 id=\"基于cookie进行流量分配\"><a href=\"#基于cookie进行流量分配\" class=\"headerlink\" title=\"基于cookie进行流量分配\"></a>基于cookie进行流量分配</h1><h2 id=\"更新v2版本服务-1\"><a href=\"#更新v2版本服务-1\" class=\"headerlink\" title=\"更新v2版本服务\"></a>更新v2版本服务</h2><p>基于cookie进行分配的时候，不能定义cookie的value</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-cookie:</span> <span class=\"string\">&quot;user_from_shanghai&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问服务-3\"><a href=\"#访问服务-3\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">设置cookie user_from_shanghai</button></li><li class=\"tab\"><button data-href=\"#comments-2\">设置cookie user_from_shanghai:always</button></li><li class=\"tab\"><button data-href=\"#comments-3\">设置coolie user_from_shanghai=always</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s --cookie <span class=\"string\">&quot;user_from_shanghai&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>请求将按照比例分配到两个版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s --cookie <span class=\"string\">&quot;user_from_shanghai:always&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>请求将按照比例分配到两个版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s --cookie <span class=\"string\">&quot;user_from_shanghai=always&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请求将全部进入v2版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中利用 Ingress-nginx 的 Canary 功能实现蓝绿、灰度发布</p><p>更新于 2021-03-20</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"Canary功能介绍\"><a href=\"#Canary功能介绍\" class=\"headerlink\" title=\"Canary功能介绍\"></a>Canary功能介绍</h1><p>Ingress-Nginx在0.21版本引入了Canary功能，可以为网关入口配置多个版本的应用程序，使用annotation来控制多个后端服务的流量分配。</p>\n<p>canary通过下面的一些注释来实现流量分配：</p>\n<ul>\n<li><code>nginx.ingress.kubernetes.io/canary: &quot;true&quot;</code>：启用Canary功能；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-weight</code> ：指定一个0-100的整数，根据设置的值来决定大概有百分之多少的流量会分配Canary Ingress中指定的后端服务；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-by-header</code> ：基于request header 的流量切分，适用于灰度发布或者A/B测试，当设定的hearder值为always是，请求流量会被一直分配到Canary入口，当hearder值被设置为never时，请求流量不会分配到Canary入口，对于其他hearder值，将忽略，并通过优先级将请求流量分配到其他规则；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-by-header-value</code>： 要和<code>nginx.ingress.kubernetes.io/canary-by-header</code> 一起使用，当请求中的hearder key和value 与<code>nginx.ingress.kubernetes.io/canary-by-header</code> <code>nginx.ingress.kubernetes.io/canary-by-header-value</code>匹配时，请求流量会被分配到Canary Ingress入口，对于其他任何hearder值，将忽略，并通过优先级将请求流量分配到其他规则；</li>\n<li><code>nginx.ingress.kubernetes.io/canary-by-cookie</code> ：基于cookie的流量切分，也适用于灰度发布或者A/B测试，当cookie值设置为always时，请求流量将被路由到Canary Ingress入口，当cookie值设置为never时，请求流量将不会路由到Canary入口，对于其他值，将忽略，并通过优先级将请求流量分配到其他规则；</li>\n</ul>\n<p>以上几种注释的优先级为：<strong>canary-by-header - &gt; canary-by-cookie - &gt; canary-weight</strong></p>\n<br>\n\n\n\n<h1 id=\"基于权重分配流量\"><a href=\"#基于权重分配流量\" class=\"headerlink\" title=\"基于权重分配流量\"></a>基于权重分配流量</h1><h2 id=\"创建v1版本服务\"><a href=\"#创建v1版本服务\" class=\"headerlink\" title=\"创建v1版本服务\"></a>创建v1版本服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Ingress</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">Deployment</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span>  <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span>  <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">mirrorgooglecontainers/echoserver:1.10</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span> </span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv1</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查创建情况\"><a href=\"#检查创建情况\" class=\"headerlink\" title=\"检查创建情况\"></a>检查创建情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,service,ingress -n echoserver</span><br></pre></td></tr></table></figure>\n\n<img src=\"./pod.png\" style=\"zoom:70%;\" />\n\n\n\n<h2 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"./v1.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p> 可以看到，所有的请求都正常返回且版本为v1</p>\n</blockquote>\n<h2 id=\"发布v2版本服务\"><a href=\"#发布v2版本服务\" class=\"headerlink\" title=\"发布v2版本服务\"></a>发布v2版本服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Ingress</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">Deployment</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这里的ingress就开启了canary功能，切设置权重为50%</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span>  <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span>  <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">mirrorgooglecontainers/echoserver:1.10</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span> </span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查v2版本服务\"><a href=\"#检查v2版本服务\" class=\"headerlink\" title=\"检查v2版本服务\"></a>检查v2版本服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,service,ingress -n echoserver</span><br></pre></td></tr></table></figure>\n\n<img src=\"./v2.png\" style=\"zoom:70%;\" />\n\n\n\n<h2 id=\"访问服务-1\"><a href=\"#访问服务-1\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"./v2-wight.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>可以看到，v1和v2两个版本的请求比几乎是50%</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"基于header的流量分配\"><a href=\"#基于header的流量分配\" class=\"headerlink\" title=\"基于header的流量分配\"></a>基于header的流量分配</h1><h2 id=\"更新v2版本服务\"><a href=\"#更新v2版本服务\" class=\"headerlink\" title=\"更新v2版本服务\"></a>更新v2版本服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Ingress</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">Deployment</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-header:</span> <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这里设置了<code>nginx.ingress.kubernetes.io/canary-by-header</code></p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span>  <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span>  <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span>  <span class=\"string\">mirrorgooglecontainers/echoserver:1.10</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span> </span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span>  <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span>  <span class=\"string\">echoserverv2</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"访问服务-2\"><a href=\"#访问服务-2\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><p>因为设置了<code>nginx.ingress.kubernetes.io/canary-by-header: v2</code>，将会出现以下的集中情况：</p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">请求header为 v2:always</button></li><li class=\"tab\"><button data-href=\"#comments-2\">请求header为 v2:never</button></li><li class=\"tab\"><button data-href=\"#comments-3\">请求header为 v2，header-key任意</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s -H <span class=\"string\">&quot;v2:always&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"./v2-ha.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>可以看到请求的header-key为v2，value为always，流量将全部调度到v2版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s -H <span class=\"string\">&quot;v2:never&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"./v2-never.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>可以看到请求的header-key为v2，value为never，流量将全部调度到v1版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s -H <span class=\"string\">&quot;v2:true&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"./v2-true.png\" style=\"zoom:70%;\" />\n\n<blockquote>\n<p>可以看到请求的header-key为v2，value为其他值，流量将根据权重比例进行分配</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"按照header-key-value进行分配\"><a href=\"#按照header-key-value进行分配\" class=\"headerlink\" title=\"按照header key/value进行分配\"></a>按照header key/value进行分配</h2><p>只需要在v2版本的ingress中指定<code>nginx.ingress.kubernetes.io/canary-by-header-value</code>即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-header:</span> <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-header-value:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时因为指定了header key和value，则请求的header必须包含：<code>v2:true</code>才能进入v2版本，否则会按照比例进行v1，v2版本分配。</p>\n<br>\n\n\n\n<h1 id=\"基于cookie进行流量分配\"><a href=\"#基于cookie进行流量分配\" class=\"headerlink\" title=\"基于cookie进行流量分配\"></a>基于cookie进行流量分配</h1><h2 id=\"更新v2版本服务-1\"><a href=\"#更新v2版本服务-1\" class=\"headerlink\" title=\"更新v2版本服务\"></a>更新v2版本服务</h2><p>基于cookie进行分配的时候，不能定义cookie的value</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-weight:</span> <span class=\"string\">&quot;50&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">nginx.ingress.kubernetes.io/canary-by-cookie:</span> <span class=\"string\">&quot;user_from_shanghai&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">echoserver</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">echo.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">echoserverv2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问服务-3\"><a href=\"#访问服务-3\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">设置cookie user_from_shanghai</button></li><li class=\"tab\"><button data-href=\"#comments-2\">设置cookie user_from_shanghai:always</button></li><li class=\"tab\"><button data-href=\"#comments-3\">设置coolie user_from_shanghai=always</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s --cookie <span class=\"string\">&quot;user_from_shanghai&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>请求将按照比例分配到两个版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s --cookie <span class=\"string\">&quot;user_from_shanghai:always&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>请求将按照比例分配到两个版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 10`;<span class=\"keyword\">do</span> curl -s --cookie <span class=\"string\">&quot;user_from_shanghai=always&quot;</span> echo.example.com|grep Hostname;<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请求将全部进入v2版本</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n"},{"title":"kafka常用命令操作","date":"2021-04-17T04:04:37.000Z","description":"kafka的命令行常用操作","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1860660051,254729202&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在kafka中常用的命令行常用操作\n\n更新于 2021-04-17\n\n{% endnote %}\n\n<br>\n\n\n\n# topic相关命令\n\n\n\n## 创建topic\n\n```bash\nkafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data\n```\n\n\n\n- `--bootstrap-server`：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；\n- `--replication-factor`：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；\n- `--partitions`：创建该Topic中的分区(partition)数量；\n- `--topic`：指定Topic名称；\n\n\n\n> 如果创建的topic包含\"_.\"之类的符号会收到警告，但是不会影响创建。\n\n\n\n## 查看topic\n\n```bash\nkafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092\n```\n\n- `--bootstrap-server`：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；\n\n\n\n## 查看topic详情\n\n```bash\nkafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n\nTopic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824\n    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3\n    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1\n    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2\n```\n\n- `Topic:kafka_data`：topic名称\n- `PartitionCount:3`：分片数量\n- `ReplicationFactor:3`：Topic副本数量\n\n\n\n## 修改topic分区数\n\n**注意：topic分区数只能增大，不能减少**\n\n```bash\nkafka-topics.sh --alter --bootstrap-server 9.235.152.125:9092 --topic kafka_data --partitions 30\n```\n\n> 修改topic：kafka_data 的分区数为30\n\n\n\n## 删除topic\n\n```bash\nkafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n```\n\n\n\n> 在node1节点删除了Topic，三台节点会同步更新，所以我们的`kafka_data`在三台node上全部删除\n\n\n\n注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：\n\n```bash\n# 在zookeeper上执行下面的命令登录\nbin/zkCli.sh -server <zookeeper-host:port>\n\n# 登录后执行下面的操作\nrmr /brokers/topics/<topicname>\n```\n\n\n\n<br>\n\n\n\n# 消息相关命令\n\n\n\n## 发送消息\n\n```bash\nkafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data\n>Hello Kafka_data\n>I'm the 172.17.0.2 Kafka create\n>test\n```\n\n- `--broker-list`：指定使用哪台broker来生产消息\n- `--topic`：指定要往哪个Topic中生产消息\n\n\n\n## 消费消息\n\n```bash\nkafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning \n\nI'm the 172.17.0.2 Kafka create\ntest\nHello Kafka_data\n```\n\n","source":"_posts/kafka常用命令操作.md","raw":"---\ntitle: kafka常用命令操作\ndate: 2021-04-17 12:04:37\ntags:\n- Kafka\ncategories:\n- 消息中间件\n- Kafka\n- 常用命令\ndescription: kafka的命令行常用操作\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1860660051,254729202&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在kafka中常用的命令行常用操作\n\n更新于 2021-04-17\n\n{% endnote %}\n\n<br>\n\n\n\n# topic相关命令\n\n\n\n## 创建topic\n\n```bash\nkafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data\n```\n\n\n\n- `--bootstrap-server`：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；\n- `--replication-factor`：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；\n- `--partitions`：创建该Topic中的分区(partition)数量；\n- `--topic`：指定Topic名称；\n\n\n\n> 如果创建的topic包含\"_.\"之类的符号会收到警告，但是不会影响创建。\n\n\n\n## 查看topic\n\n```bash\nkafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092\n```\n\n- `--bootstrap-server`：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；\n\n\n\n## 查看topic详情\n\n```bash\nkafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n\nTopic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824\n    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3\n    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1\n    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2\n```\n\n- `Topic:kafka_data`：topic名称\n- `PartitionCount:3`：分片数量\n- `ReplicationFactor:3`：Topic副本数量\n\n\n\n## 修改topic分区数\n\n**注意：topic分区数只能增大，不能减少**\n\n```bash\nkafka-topics.sh --alter --bootstrap-server 9.235.152.125:9092 --topic kafka_data --partitions 30\n```\n\n> 修改topic：kafka_data 的分区数为30\n\n\n\n## 删除topic\n\n```bash\nkafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n```\n\n\n\n> 在node1节点删除了Topic，三台节点会同步更新，所以我们的`kafka_data`在三台node上全部删除\n\n\n\n注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：\n\n```bash\n# 在zookeeper上执行下面的命令登录\nbin/zkCli.sh -server <zookeeper-host:port>\n\n# 登录后执行下面的操作\nrmr /brokers/topics/<topicname>\n```\n\n\n\n<br>\n\n\n\n# 消息相关命令\n\n\n\n## 发送消息\n\n```bash\nkafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data\n>Hello Kafka_data\n>I'm the 172.17.0.2 Kafka create\n>test\n```\n\n- `--broker-list`：指定使用哪台broker来生产消息\n- `--topic`：指定要往哪个Topic中生产消息\n\n\n\n## 消费消息\n\n```bash\nkafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning \n\nI'm the 172.17.0.2 Kafka create\ntest\nHello Kafka_data\n```\n\n","slug":"kafka常用命令操作","published":1,"updated":"2021-04-17T04:09:51.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5l000fp0klh2uv1ds8","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在kafka中常用的命令行常用操作</p><p>更新于 2021-04-17</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"topic相关命令\"><a href=\"#topic相关命令\" class=\"headerlink\" title=\"topic相关命令\"></a>topic相关命令</h1><h2 id=\"创建topic\"><a href=\"#创建topic\" class=\"headerlink\" title=\"创建topic\"></a>创建topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>--bootstrap-server</code>：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；</li>\n<li><code>--replication-factor</code>：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；</li>\n<li><code>--partitions</code>：创建该Topic中的分区(partition)数量；</li>\n<li><code>--topic</code>：指定Topic名称；</li>\n</ul>\n<blockquote>\n<p>如果创建的topic包含”_.”之类的符号会收到警告，但是不会影响创建。</p>\n</blockquote>\n<h2 id=\"查看topic\"><a href=\"#查看topic\" class=\"headerlink\" title=\"查看topic\"></a>查看topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--bootstrap-server</code>：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；</li>\n</ul>\n<h2 id=\"查看topic详情\"><a href=\"#查看topic详情\" class=\"headerlink\" title=\"查看topic详情\"></a>查看topic详情</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\"></span><br><span class=\"line\">Topic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824</span><br><span class=\"line\">    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3</span><br><span class=\"line\">    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1</span><br><span class=\"line\">    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Topic:kafka_data</code>：topic名称</li>\n<li><code>PartitionCount:3</code>：分片数量</li>\n<li><code>ReplicationFactor:3</code>：Topic副本数量</li>\n</ul>\n<h2 id=\"修改topic分区数\"><a href=\"#修改topic分区数\" class=\"headerlink\" title=\"修改topic分区数\"></a>修改topic分区数</h2><p><strong>注意：topic分区数只能增大，不能减少</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --alter --bootstrap-server 9.235.152.125:9092 --topic kafka_data --partitions 30</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改topic：kafka_data 的分区数为30</p>\n</blockquote>\n<h2 id=\"删除topic\"><a href=\"#删除topic\" class=\"headerlink\" title=\"删除topic\"></a>删除topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在node1节点删除了Topic，三台节点会同步更新，所以我们的<code>kafka_data</code>在三台node上全部删除</p>\n</blockquote>\n<p>注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在zookeeper上执行下面的命令登录</span></span><br><span class=\"line\">bin/zkCli.sh -server &lt;zookeeper-host:port&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录后执行下面的操作</span></span><br><span class=\"line\">rmr /brokers/topics/&lt;topicname&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"消息相关命令\"><a href=\"#消息相关命令\" class=\"headerlink\" title=\"消息相关命令\"></a>消息相关命令</h1><h2 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\">&gt;Hello Kafka_data</span><br><span class=\"line\">&gt;I<span class=\"string\">&#x27;m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">&gt;test</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--broker-list</code>：指定使用哪台broker来生产消息</li>\n<li><code>--topic</code>：指定要往哪个Topic中生产消息</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning </span><br><span class=\"line\"></span><br><span class=\"line\">I<span class=\"string\">&#x27;m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">Hello Kafka_data</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在kafka中常用的命令行常用操作</p><p>更新于 2021-04-17</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"topic相关命令\"><a href=\"#topic相关命令\" class=\"headerlink\" title=\"topic相关命令\"></a>topic相关命令</h1><h2 id=\"创建topic\"><a href=\"#创建topic\" class=\"headerlink\" title=\"创建topic\"></a>创建topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>--bootstrap-server</code>：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；</li>\n<li><code>--replication-factor</code>：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；</li>\n<li><code>--partitions</code>：创建该Topic中的分区(partition)数量；</li>\n<li><code>--topic</code>：指定Topic名称；</li>\n</ul>\n<blockquote>\n<p>如果创建的topic包含”_.”之类的符号会收到警告，但是不会影响创建。</p>\n</blockquote>\n<h2 id=\"查看topic\"><a href=\"#查看topic\" class=\"headerlink\" title=\"查看topic\"></a>查看topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--bootstrap-server</code>：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；</li>\n</ul>\n<h2 id=\"查看topic详情\"><a href=\"#查看topic详情\" class=\"headerlink\" title=\"查看topic详情\"></a>查看topic详情</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\"></span><br><span class=\"line\">Topic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824</span><br><span class=\"line\">    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3</span><br><span class=\"line\">    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1</span><br><span class=\"line\">    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Topic:kafka_data</code>：topic名称</li>\n<li><code>PartitionCount:3</code>：分片数量</li>\n<li><code>ReplicationFactor:3</code>：Topic副本数量</li>\n</ul>\n<h2 id=\"修改topic分区数\"><a href=\"#修改topic分区数\" class=\"headerlink\" title=\"修改topic分区数\"></a>修改topic分区数</h2><p><strong>注意：topic分区数只能增大，不能减少</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --alter --bootstrap-server 9.235.152.125:9092 --topic kafka_data --partitions 30</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改topic：kafka_data 的分区数为30</p>\n</blockquote>\n<h2 id=\"删除topic\"><a href=\"#删除topic\" class=\"headerlink\" title=\"删除topic\"></a>删除topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在node1节点删除了Topic，三台节点会同步更新，所以我们的<code>kafka_data</code>在三台node上全部删除</p>\n</blockquote>\n<p>注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在zookeeper上执行下面的命令登录</span></span><br><span class=\"line\">bin/zkCli.sh -server &lt;zookeeper-host:port&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录后执行下面的操作</span></span><br><span class=\"line\">rmr /brokers/topics/&lt;topicname&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"消息相关命令\"><a href=\"#消息相关命令\" class=\"headerlink\" title=\"消息相关命令\"></a>消息相关命令</h1><h2 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\">&gt;Hello Kafka_data</span><br><span class=\"line\">&gt;I<span class=\"string\">&#x27;m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">&gt;test</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--broker-list</code>：指定使用哪台broker来生产消息</li>\n<li><code>--topic</code>：指定要往哪个Topic中生产消息</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning </span><br><span class=\"line\"></span><br><span class=\"line\">I<span class=\"string\">&#x27;m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">Hello Kafka_data</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"redis数据持久化方案","date":"2021-04-18T07:07:59.000Z","description":"Redis的两种数据持久化方案：AOF和RDB","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.linuxdiyf.com%2Flinux%2Fuploads%2Fallimg%2F160228%2F2-16022P94942238.jpg&refer=http%3A%2F%2Fwww.linuxdiyf.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621321738&t=d0e2350d8170a863dbe58a9953fddfb9","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis的两种数据持久化方案：AOF和RDB\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n# RDB方式\n\n\n\n>  RDB方式是利用子进程在指定的时间间隔内，将内存中的数据集生成快照写入磁盘中；默认支持，不需要进行配置\n\n\n\n\n\n## 优势和缺陷\n\n优势：\n\n- redis数据库将只包含一个文件（利于备份）；\n- 利于灾难恢复；\n- 性能最大化，启动效率最高（原理是fork一个子进程进行数据备份）；\n\n缺陷：\n\n- 无法完全保证数据高可用；\n- 数据量大的时候可能在数据持久化的时候导致服务不可用；\n\n\n\n> 如果redis使用的内存很大，例如32G等，如果使用RDB方式则建议磁盘选择ssd，否则会由于备份数据文件过大导致磁盘IO不足。\n\n\n\n## 配置RDB持久化\n在redis.conf配置文件中，有如下的一些关于RDB持久化的配置：\n\n```bash\n// 每900秒至少1个key发生变化就持久化一次\nsave 900 1\n\n// 每300秒至少10个key发生变化就持久化一次\nsave 300 10\n\n// 每60秒至少10000个key发生变化就持久化一次\nsave 60 10000\n\n// 持久化数据文件名\ndbfilename dump.rdb\n\n// 数据文件路径\ndir ./\n\n// 不做持久化则注释上边的选项并打开下边选项的注释\nsave \"\"\n```\n\n\n\n<br>\n\n\n\n# AOF方式\n\n## AOF方式\n\n将以日志的方式记录服务器处理的每一次操作。服务器启动之初会读取日志文件来重建数据库。\n\n\n\n## 优势和缺陷\n\n优势：\n\n- 更高的数据安全性；\n- 不会破坏日志文件的数据完整性；\n- redis可以自动启动日志重写机制，对重复的日志进行合并，减小文件大小；\n- 包含格式清晰的日志文件。可以基于这个日志文件进行数据重建和迁移；\n- AOF将数据库操作顺序写到文件的最后，如果出现误操作，可以在文件中删掉最后一行在进行还原；\n\n\n\n劣势：\n\n- 对于相同的数据集来说，AOF往往比RDB文件大；\n- 效率低于RDB；\n\n\n\n## 配置AOF持久化\n\n在redis.conf配置文件中，有如下的一些关于AOF持久化的配置：\n\n```bash\n// AOF持久化功能开关，默认没有打开，改成yes表示打开\nappendonly yes\n\n// AOF文件名\nappendfilename \"appendonly.aof\"\n\n// AOF同步策略设置\n// 每修改一次同步到磁盘上\nappendfsync always\n\n// 每秒同步一次到磁盘上\nappendfsync everysec\n\n// 不同步\nappendfsync no\n```\n\n<br>\n\n\n\n# 同时使用RDB和AOF需要注意\n\n在同时使用AOF和RDB持久化数据的时候，重启redis后，优先使用AOF进行数据恢复。\n\n","source":"_posts/redis数据持久化方案.md","raw":"---\ntitle: redis数据持久化方案\ndate: 2021-04-18 15:07:59\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 数据持久化和主从复制\ndescription: Redis的两种数据持久化方案：AOF和RDB\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.linuxdiyf.com%2Flinux%2Fuploads%2Fallimg%2F160228%2F2-16022P94942238.jpg&refer=http%3A%2F%2Fwww.linuxdiyf.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621321738&t=d0e2350d8170a863dbe58a9953fddfb9\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis的两种数据持久化方案：AOF和RDB\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n# RDB方式\n\n\n\n>  RDB方式是利用子进程在指定的时间间隔内，将内存中的数据集生成快照写入磁盘中；默认支持，不需要进行配置\n\n\n\n\n\n## 优势和缺陷\n\n优势：\n\n- redis数据库将只包含一个文件（利于备份）；\n- 利于灾难恢复；\n- 性能最大化，启动效率最高（原理是fork一个子进程进行数据备份）；\n\n缺陷：\n\n- 无法完全保证数据高可用；\n- 数据量大的时候可能在数据持久化的时候导致服务不可用；\n\n\n\n> 如果redis使用的内存很大，例如32G等，如果使用RDB方式则建议磁盘选择ssd，否则会由于备份数据文件过大导致磁盘IO不足。\n\n\n\n## 配置RDB持久化\n在redis.conf配置文件中，有如下的一些关于RDB持久化的配置：\n\n```bash\n// 每900秒至少1个key发生变化就持久化一次\nsave 900 1\n\n// 每300秒至少10个key发生变化就持久化一次\nsave 300 10\n\n// 每60秒至少10000个key发生变化就持久化一次\nsave 60 10000\n\n// 持久化数据文件名\ndbfilename dump.rdb\n\n// 数据文件路径\ndir ./\n\n// 不做持久化则注释上边的选项并打开下边选项的注释\nsave \"\"\n```\n\n\n\n<br>\n\n\n\n# AOF方式\n\n## AOF方式\n\n将以日志的方式记录服务器处理的每一次操作。服务器启动之初会读取日志文件来重建数据库。\n\n\n\n## 优势和缺陷\n\n优势：\n\n- 更高的数据安全性；\n- 不会破坏日志文件的数据完整性；\n- redis可以自动启动日志重写机制，对重复的日志进行合并，减小文件大小；\n- 包含格式清晰的日志文件。可以基于这个日志文件进行数据重建和迁移；\n- AOF将数据库操作顺序写到文件的最后，如果出现误操作，可以在文件中删掉最后一行在进行还原；\n\n\n\n劣势：\n\n- 对于相同的数据集来说，AOF往往比RDB文件大；\n- 效率低于RDB；\n\n\n\n## 配置AOF持久化\n\n在redis.conf配置文件中，有如下的一些关于AOF持久化的配置：\n\n```bash\n// AOF持久化功能开关，默认没有打开，改成yes表示打开\nappendonly yes\n\n// AOF文件名\nappendfilename \"appendonly.aof\"\n\n// AOF同步策略设置\n// 每修改一次同步到磁盘上\nappendfsync always\n\n// 每秒同步一次到磁盘上\nappendfsync everysec\n\n// 不同步\nappendfsync no\n```\n\n<br>\n\n\n\n# 同时使用RDB和AOF需要注意\n\n在同时使用AOF和RDB持久化数据的时候，重启redis后，优先使用AOF进行数据恢复。\n\n","slug":"redis数据持久化方案","published":1,"updated":"2021-04-19T13:46:24.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5m000gp0klaxjnc5k6","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis的两种数据持久化方案：AOF和RDB</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"RDB方式\"><a href=\"#RDB方式\" class=\"headerlink\" title=\"RDB方式\"></a>RDB方式</h1><blockquote>\n<p> RDB方式是利用子进程在指定的时间间隔内，将内存中的数据集生成快照写入磁盘中；默认支持，不需要进行配置</p>\n</blockquote>\n<h2 id=\"优势和缺陷\"><a href=\"#优势和缺陷\" class=\"headerlink\" title=\"优势和缺陷\"></a>优势和缺陷</h2><p>优势：</p>\n<ul>\n<li>redis数据库将只包含一个文件（利于备份）；</li>\n<li>利于灾难恢复；</li>\n<li>性能最大化，启动效率最高（原理是fork一个子进程进行数据备份）；</li>\n</ul>\n<p>缺陷：</p>\n<ul>\n<li>无法完全保证数据高可用；</li>\n<li>数据量大的时候可能在数据持久化的时候导致服务不可用；</li>\n</ul>\n<blockquote>\n<p>如果redis使用的内存很大，例如32G等，如果使用RDB方式则建议磁盘选择ssd，否则会由于备份数据文件过大导致磁盘IO不足。</p>\n</blockquote>\n<h2 id=\"配置RDB持久化\"><a href=\"#配置RDB持久化\" class=\"headerlink\" title=\"配置RDB持久化\"></a>配置RDB持久化</h2><p>在redis.conf配置文件中，有如下的一些关于RDB持久化的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 每900秒至少1个key发生变化就持久化一次</span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 每300秒至少10个key发生变化就持久化一次</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\"></span><br><span class=\"line\">// 每60秒至少10000个key发生变化就持久化一次</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\">// 持久化数据文件名</span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据文件路径</span><br><span class=\"line\">dir ./</span><br><span class=\"line\"></span><br><span class=\"line\">// 不做持久化则注释上边的选项并打开下边选项的注释</span><br><span class=\"line\">save <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"AOF方式\"><a href=\"#AOF方式\" class=\"headerlink\" title=\"AOF方式\"></a>AOF方式</h1><h2 id=\"AOF方式-1\"><a href=\"#AOF方式-1\" class=\"headerlink\" title=\"AOF方式\"></a>AOF方式</h2><p>将以日志的方式记录服务器处理的每一次操作。服务器启动之初会读取日志文件来重建数据库。</p>\n<h2 id=\"优势和缺陷-1\"><a href=\"#优势和缺陷-1\" class=\"headerlink\" title=\"优势和缺陷\"></a>优势和缺陷</h2><p>优势：</p>\n<ul>\n<li>更高的数据安全性；</li>\n<li>不会破坏日志文件的数据完整性；</li>\n<li>redis可以自动启动日志重写机制，对重复的日志进行合并，减小文件大小；</li>\n<li>包含格式清晰的日志文件。可以基于这个日志文件进行数据重建和迁移；</li>\n<li>AOF将数据库操作顺序写到文件的最后，如果出现误操作，可以在文件中删掉最后一行在进行还原；</li>\n</ul>\n<p>劣势：</p>\n<ul>\n<li>对于相同的数据集来说，AOF往往比RDB文件大；</li>\n<li>效率低于RDB；</li>\n</ul>\n<h2 id=\"配置AOF持久化\"><a href=\"#配置AOF持久化\" class=\"headerlink\" title=\"配置AOF持久化\"></a>配置AOF持久化</h2><p>在redis.conf配置文件中，有如下的一些关于AOF持久化的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// AOF持久化功能开关，默认没有打开，改成yes表示打开</span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"></span><br><span class=\"line\">// AOF文件名</span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// AOF同步策略设置</span><br><span class=\"line\">// 每修改一次同步到磁盘上</span><br><span class=\"line\">appendfsync always</span><br><span class=\"line\"></span><br><span class=\"line\">// 每秒同步一次到磁盘上</span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\"></span><br><span class=\"line\">// 不同步</span><br><span class=\"line\">appendfsync no</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"同时使用RDB和AOF需要注意\"><a href=\"#同时使用RDB和AOF需要注意\" class=\"headerlink\" title=\"同时使用RDB和AOF需要注意\"></a>同时使用RDB和AOF需要注意</h1><p>在同时使用AOF和RDB持久化数据的时候，重启redis后，优先使用AOF进行数据恢复。</p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis的两种数据持久化方案：AOF和RDB</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"RDB方式\"><a href=\"#RDB方式\" class=\"headerlink\" title=\"RDB方式\"></a>RDB方式</h1><blockquote>\n<p> RDB方式是利用子进程在指定的时间间隔内，将内存中的数据集生成快照写入磁盘中；默认支持，不需要进行配置</p>\n</blockquote>\n<h2 id=\"优势和缺陷\"><a href=\"#优势和缺陷\" class=\"headerlink\" title=\"优势和缺陷\"></a>优势和缺陷</h2><p>优势：</p>\n<ul>\n<li>redis数据库将只包含一个文件（利于备份）；</li>\n<li>利于灾难恢复；</li>\n<li>性能最大化，启动效率最高（原理是fork一个子进程进行数据备份）；</li>\n</ul>\n<p>缺陷：</p>\n<ul>\n<li>无法完全保证数据高可用；</li>\n<li>数据量大的时候可能在数据持久化的时候导致服务不可用；</li>\n</ul>\n<blockquote>\n<p>如果redis使用的内存很大，例如32G等，如果使用RDB方式则建议磁盘选择ssd，否则会由于备份数据文件过大导致磁盘IO不足。</p>\n</blockquote>\n<h2 id=\"配置RDB持久化\"><a href=\"#配置RDB持久化\" class=\"headerlink\" title=\"配置RDB持久化\"></a>配置RDB持久化</h2><p>在redis.conf配置文件中，有如下的一些关于RDB持久化的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 每900秒至少1个key发生变化就持久化一次</span><br><span class=\"line\">save 900 1</span><br><span class=\"line\"></span><br><span class=\"line\">// 每300秒至少10个key发生变化就持久化一次</span><br><span class=\"line\">save 300 10</span><br><span class=\"line\"></span><br><span class=\"line\">// 每60秒至少10000个key发生变化就持久化一次</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\">// 持久化数据文件名</span><br><span class=\"line\">dbfilename dump.rdb</span><br><span class=\"line\"></span><br><span class=\"line\">// 数据文件路径</span><br><span class=\"line\">dir ./</span><br><span class=\"line\"></span><br><span class=\"line\">// 不做持久化则注释上边的选项并打开下边选项的注释</span><br><span class=\"line\">save <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"AOF方式\"><a href=\"#AOF方式\" class=\"headerlink\" title=\"AOF方式\"></a>AOF方式</h1><h2 id=\"AOF方式-1\"><a href=\"#AOF方式-1\" class=\"headerlink\" title=\"AOF方式\"></a>AOF方式</h2><p>将以日志的方式记录服务器处理的每一次操作。服务器启动之初会读取日志文件来重建数据库。</p>\n<h2 id=\"优势和缺陷-1\"><a href=\"#优势和缺陷-1\" class=\"headerlink\" title=\"优势和缺陷\"></a>优势和缺陷</h2><p>优势：</p>\n<ul>\n<li>更高的数据安全性；</li>\n<li>不会破坏日志文件的数据完整性；</li>\n<li>redis可以自动启动日志重写机制，对重复的日志进行合并，减小文件大小；</li>\n<li>包含格式清晰的日志文件。可以基于这个日志文件进行数据重建和迁移；</li>\n<li>AOF将数据库操作顺序写到文件的最后，如果出现误操作，可以在文件中删掉最后一行在进行还原；</li>\n</ul>\n<p>劣势：</p>\n<ul>\n<li>对于相同的数据集来说，AOF往往比RDB文件大；</li>\n<li>效率低于RDB；</li>\n</ul>\n<h2 id=\"配置AOF持久化\"><a href=\"#配置AOF持久化\" class=\"headerlink\" title=\"配置AOF持久化\"></a>配置AOF持久化</h2><p>在redis.conf配置文件中，有如下的一些关于AOF持久化的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// AOF持久化功能开关，默认没有打开，改成yes表示打开</span><br><span class=\"line\">appendonly yes</span><br><span class=\"line\"></span><br><span class=\"line\">// AOF文件名</span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// AOF同步策略设置</span><br><span class=\"line\">// 每修改一次同步到磁盘上</span><br><span class=\"line\">appendfsync always</span><br><span class=\"line\"></span><br><span class=\"line\">// 每秒同步一次到磁盘上</span><br><span class=\"line\">appendfsync everysec</span><br><span class=\"line\"></span><br><span class=\"line\">// 不同步</span><br><span class=\"line\">appendfsync no</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"同时使用RDB和AOF需要注意\"><a href=\"#同时使用RDB和AOF需要注意\" class=\"headerlink\" title=\"同时使用RDB和AOF需要注意\"></a>同时使用RDB和AOF需要注意</h1><p>在同时使用AOF和RDB持久化数据的时候，重启redis后，优先使用AOF进行数据恢复。</p>\n"},{"title":"zookeeper常用命令行操作","date":"2021-04-17T04:14:35.000Z","description":"zookeeper日常用到的操作","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在zookeeper中日常用到的命令行操作\n\n更新于 2021-04-17\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n## 登录zookeeper shell\n\n使用如下命令连接本地的zookeeper：\n\n```bash\nbin/zkCli.sh\n```\n\n\n\n<br>\n\n\n\n## 节点操作\n\n### 查看节点\n\n使用下面的命令查看都有哪些节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 1] ls /\n```\n\n![](./ls.png)\n\n> 默认只有一个zookeeper节点\n\n\n\n### 创建一个节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] create /workers \"\"\nCreated /workers\n[zk: localhost:2181(CONNECTED) 10] ls /\n[workers, zookeeper]\n```\n\n\n\n> 当创建/workers节点后指定了一个空字符串(\"\")，说明此刻不希望在这个znode中保存数据。然而，该接口中的这个参数可以使我们保存任何字符串到ZooKeeper的节点中。比如，可以替 换\"\"为\"workers\"。\n\n\n\n### 创建带序号的节点\n\n如果此时再次支执行`create /workers \"\"`，则会报错：`Node already exists`，此时可以使用`-s`参数表示创建一个带序号的节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] create -s /workers \"\"\nCreated /workers000000002\n```\n\n\n\n> 带序号的节点会把序号追加到节点名字后且全局唯一\n\n\n\n### 创建临时节点\n\n在`create`的时候使用`-e`可以创建临时节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] create -e /tmpnode \"\"\nCreated /tmnpnode\n```\n\n\n\n当创建临时节点的会话中断之后，临时节点就会消失；\n\n\n\n### 注册到节点\n\n通知客户端zookeeper节点数据变化是zookeeper的一个重要功能，使用如下的命令可以将当前会话注册到zookeeper：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] ls -w / \n```\n\n> `-w`表示`watch`，意思是监控当前的节点，如果节点发生变化则会被zookeepr通知\n\n\n\n此时如果`/`节点发生了变化，则这个会话会收到通知：`WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/`\n\n\n\n\n\n### 查看节点状态\n\n使用下面的命令可以查看节点的状态：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] state /workers\n```\n\n\n\n其中会输出如下内容：\n\n- `czxid`：创建节点的事物id；\n- `ctime`：创建该节点的时间；\n- `mZxid`：修改该节点的事物id；\n- `pZxid`：最后一次修改子节点的zxid；\n- `cversion`：子节点修改次数；\n- `dataversion`：当前节点修改次数；\n- `aclVersion`：访问控制列表变化的次数；\n\n\n\n\n\n### 删除节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 11] delete /workers\n[zk: localhost:2181(CONNECTED) 12] ls /\n[zookeeper]\n```\n\n\n\n`delete`只能删除没有子节点的节点，如果要递归删除则使用`deleteall`：\n\n```bash\n[zk: localhost:2181(CONNECTED) 11] deleteall /workers\n```\n\n\n\n<br>\n\n\n\n## 退出shell\n\n```bash\n[zk: localhost:2181(CONNECTED) 13] quit\n\nWATCHER::\n\nWatchedEvent state:Closed type:None path:null\n2020-12-12 15:14:16,594 [myid:] - INFO  [main:ZooKeeper@1422] - Session: 0x100f8067ce90000 closed\n2020-12-12 15:14:16,594 [myid:] - INFO  [main-EventThread:ClientCnxn$EventThread@524] - EventThread shut down for session: 0x100f8067ce90000\n```\n\n","source":"_posts/zookeeper常用命令行操作.md","raw":"---\ntitle: zookeeper常用命令行操作\ndate: 2021-04-17 12:14:35\ntags:\n- Zookeeper\ncategories: \n- Zookeeper\n- 常用操作 \ndescription: zookeeper日常用到的操作\ncover: \n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在zookeeper中日常用到的命令行操作\n\n更新于 2021-04-17\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n## 登录zookeeper shell\n\n使用如下命令连接本地的zookeeper：\n\n```bash\nbin/zkCli.sh\n```\n\n\n\n<br>\n\n\n\n## 节点操作\n\n### 查看节点\n\n使用下面的命令查看都有哪些节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 1] ls /\n```\n\n![](./ls.png)\n\n> 默认只有一个zookeeper节点\n\n\n\n### 创建一个节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] create /workers \"\"\nCreated /workers\n[zk: localhost:2181(CONNECTED) 10] ls /\n[workers, zookeeper]\n```\n\n\n\n> 当创建/workers节点后指定了一个空字符串(\"\")，说明此刻不希望在这个znode中保存数据。然而，该接口中的这个参数可以使我们保存任何字符串到ZooKeeper的节点中。比如，可以替 换\"\"为\"workers\"。\n\n\n\n### 创建带序号的节点\n\n如果此时再次支执行`create /workers \"\"`，则会报错：`Node already exists`，此时可以使用`-s`参数表示创建一个带序号的节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] create -s /workers \"\"\nCreated /workers000000002\n```\n\n\n\n> 带序号的节点会把序号追加到节点名字后且全局唯一\n\n\n\n### 创建临时节点\n\n在`create`的时候使用`-e`可以创建临时节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] create -e /tmpnode \"\"\nCreated /tmnpnode\n```\n\n\n\n当创建临时节点的会话中断之后，临时节点就会消失；\n\n\n\n### 注册到节点\n\n通知客户端zookeeper节点数据变化是zookeeper的一个重要功能，使用如下的命令可以将当前会话注册到zookeeper：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] ls -w / \n```\n\n> `-w`表示`watch`，意思是监控当前的节点，如果节点发生变化则会被zookeepr通知\n\n\n\n此时如果`/`节点发生了变化，则这个会话会收到通知：`WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/`\n\n\n\n\n\n### 查看节点状态\n\n使用下面的命令可以查看节点的状态：\n\n```bash\n[zk: localhost:2181(CONNECTED) 9] state /workers\n```\n\n\n\n其中会输出如下内容：\n\n- `czxid`：创建节点的事物id；\n- `ctime`：创建该节点的时间；\n- `mZxid`：修改该节点的事物id；\n- `pZxid`：最后一次修改子节点的zxid；\n- `cversion`：子节点修改次数；\n- `dataversion`：当前节点修改次数；\n- `aclVersion`：访问控制列表变化的次数；\n\n\n\n\n\n### 删除节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 11] delete /workers\n[zk: localhost:2181(CONNECTED) 12] ls /\n[zookeeper]\n```\n\n\n\n`delete`只能删除没有子节点的节点，如果要递归删除则使用`deleteall`：\n\n```bash\n[zk: localhost:2181(CONNECTED) 11] deleteall /workers\n```\n\n\n\n<br>\n\n\n\n## 退出shell\n\n```bash\n[zk: localhost:2181(CONNECTED) 13] quit\n\nWATCHER::\n\nWatchedEvent state:Closed type:None path:null\n2020-12-12 15:14:16,594 [myid:] - INFO  [main:ZooKeeper@1422] - Session: 0x100f8067ce90000 closed\n2020-12-12 15:14:16,594 [myid:] - INFO  [main-EventThread:ClientCnxn$EventThread@524] - EventThread shut down for session: 0x100f8067ce90000\n```\n\n","slug":"zookeeper常用命令行操作","published":1,"updated":"2021-04-17T04:17:47.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5n000kp0kl1l6wcyod","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在zookeeper中日常用到的命令行操作</p><p>更新于 2021-04-17</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h2 id=\"登录zookeeper-shell\"><a href=\"#登录zookeeper-shell\" class=\"headerlink\" title=\"登录zookeeper shell\"></a>登录zookeeper shell</h2><p>使用如下命令连接本地的zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkCli.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h2><h3 id=\"查看节点\"><a href=\"#查看节点\" class=\"headerlink\" title=\"查看节点\"></a>查看节点</h3><p>使用下面的命令查看都有哪些节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 1] ls /</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./ls.png\" alt=\"\"></p>\n<blockquote>\n<p>默认只有一个zookeeper节点</p>\n</blockquote>\n<h3 id=\"创建一个节点\"><a href=\"#创建一个节点\" class=\"headerlink\" title=\"创建一个节点\"></a>创建一个节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] create /workers <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">Created /workers</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 10] ls /</span><br><span class=\"line\">[workers, zookeeper]</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>当创建/workers节点后指定了一个空字符串(“”)，说明此刻不希望在这个znode中保存数据。然而，该接口中的这个参数可以使我们保存任何字符串到ZooKeeper的节点中。比如，可以替 换””为”workers”。</p>\n</blockquote>\n<h3 id=\"创建带序号的节点\"><a href=\"#创建带序号的节点\" class=\"headerlink\" title=\"创建带序号的节点\"></a>创建带序号的节点</h3><p>如果此时再次支执行<code>create /workers &quot;&quot;</code>，则会报错：<code>Node already exists</code>，此时可以使用<code>-s</code>参数表示创建一个带序号的节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] create -s /workers <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">Created /workers000000002</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>带序号的节点会把序号追加到节点名字后且全局唯一</p>\n</blockquote>\n<h3 id=\"创建临时节点\"><a href=\"#创建临时节点\" class=\"headerlink\" title=\"创建临时节点\"></a>创建临时节点</h3><p>在<code>create</code>的时候使用<code>-e</code>可以创建临时节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] create -e /tmpnode <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">Created /tmnpnode</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当创建临时节点的会话中断之后，临时节点就会消失；</p>\n<h3 id=\"注册到节点\"><a href=\"#注册到节点\" class=\"headerlink\" title=\"注册到节点\"></a>注册到节点</h3><p>通知客户端zookeeper节点数据变化是zookeeper的一个重要功能，使用如下的命令可以将当前会话注册到zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] ls -w / </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-w</code>表示<code>watch</code>，意思是监控当前的节点，如果节点发生变化则会被zookeepr通知</p>\n</blockquote>\n<p>此时如果<code>/</code>节点发生了变化，则这个会话会收到通知：<code>WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/</code></p>\n<h3 id=\"查看节点状态\"><a href=\"#查看节点状态\" class=\"headerlink\" title=\"查看节点状态\"></a>查看节点状态</h3><p>使用下面的命令可以查看节点的状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] state /workers</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中会输出如下内容：</p>\n<ul>\n<li><code>czxid</code>：创建节点的事物id；</li>\n<li><code>ctime</code>：创建该节点的时间；</li>\n<li><code>mZxid</code>：修改该节点的事物id；</li>\n<li><code>pZxid</code>：最后一次修改子节点的zxid；</li>\n<li><code>cversion</code>：子节点修改次数；</li>\n<li><code>dataversion</code>：当前节点修改次数；</li>\n<li><code>aclVersion</code>：访问控制列表变化的次数；</li>\n</ul>\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 11] delete /workers</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 12] ls /</span><br><span class=\"line\">[zookeeper]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>delete</code>只能删除没有子节点的节点，如果要递归删除则使用<code>deleteall</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 11] deleteall /workers</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"退出shell\"><a href=\"#退出shell\" class=\"headerlink\" title=\"退出shell\"></a>退出shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 13] quit</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:Closed <span class=\"built_in\">type</span>:None path:null</span><br><span class=\"line\">2020-12-12 15:14:16,594 [myid:] - INFO  [main:ZooKeeper@1422] - Session: 0x100f8067ce90000 closed</span><br><span class=\"line\">2020-12-12 15:14:16,594 [myid:] - INFO  [main-EventThread:ClientCnxn<span class=\"variable\">$EventThread</span>@524] - EventThread shut down <span class=\"keyword\">for</span> session: 0x100f8067ce90000</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在zookeeper中日常用到的命令行操作</p><p>更新于 2021-04-17</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h2 id=\"登录zookeeper-shell\"><a href=\"#登录zookeeper-shell\" class=\"headerlink\" title=\"登录zookeeper shell\"></a>登录zookeeper shell</h2><p>使用如下命令连接本地的zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkCli.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h2><h3 id=\"查看节点\"><a href=\"#查看节点\" class=\"headerlink\" title=\"查看节点\"></a>查看节点</h3><p>使用下面的命令查看都有哪些节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 1] ls /</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./ls.png\" alt=\"\"></p>\n<blockquote>\n<p>默认只有一个zookeeper节点</p>\n</blockquote>\n<h3 id=\"创建一个节点\"><a href=\"#创建一个节点\" class=\"headerlink\" title=\"创建一个节点\"></a>创建一个节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] create /workers <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">Created /workers</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 10] ls /</span><br><span class=\"line\">[workers, zookeeper]</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>当创建/workers节点后指定了一个空字符串(“”)，说明此刻不希望在这个znode中保存数据。然而，该接口中的这个参数可以使我们保存任何字符串到ZooKeeper的节点中。比如，可以替 换””为”workers”。</p>\n</blockquote>\n<h3 id=\"创建带序号的节点\"><a href=\"#创建带序号的节点\" class=\"headerlink\" title=\"创建带序号的节点\"></a>创建带序号的节点</h3><p>如果此时再次支执行<code>create /workers &quot;&quot;</code>，则会报错：<code>Node already exists</code>，此时可以使用<code>-s</code>参数表示创建一个带序号的节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] create -s /workers <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">Created /workers000000002</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>带序号的节点会把序号追加到节点名字后且全局唯一</p>\n</blockquote>\n<h3 id=\"创建临时节点\"><a href=\"#创建临时节点\" class=\"headerlink\" title=\"创建临时节点\"></a>创建临时节点</h3><p>在<code>create</code>的时候使用<code>-e</code>可以创建临时节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] create -e /tmpnode <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">Created /tmnpnode</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当创建临时节点的会话中断之后，临时节点就会消失；</p>\n<h3 id=\"注册到节点\"><a href=\"#注册到节点\" class=\"headerlink\" title=\"注册到节点\"></a>注册到节点</h3><p>通知客户端zookeeper节点数据变化是zookeeper的一个重要功能，使用如下的命令可以将当前会话注册到zookeeper：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] ls -w / </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>-w</code>表示<code>watch</code>，意思是监控当前的节点，如果节点发生变化则会被zookeepr通知</p>\n</blockquote>\n<p>此时如果<code>/</code>节点发生了变化，则这个会话会收到通知：<code>WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/</code></p>\n<h3 id=\"查看节点状态\"><a href=\"#查看节点状态\" class=\"headerlink\" title=\"查看节点状态\"></a>查看节点状态</h3><p>使用下面的命令可以查看节点的状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 9] state /workers</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中会输出如下内容：</p>\n<ul>\n<li><code>czxid</code>：创建节点的事物id；</li>\n<li><code>ctime</code>：创建该节点的时间；</li>\n<li><code>mZxid</code>：修改该节点的事物id；</li>\n<li><code>pZxid</code>：最后一次修改子节点的zxid；</li>\n<li><code>cversion</code>：子节点修改次数；</li>\n<li><code>dataversion</code>：当前节点修改次数；</li>\n<li><code>aclVersion</code>：访问控制列表变化的次数；</li>\n</ul>\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 11] delete /workers</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 12] ls /</span><br><span class=\"line\">[zookeeper]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>delete</code>只能删除没有子节点的节点，如果要递归删除则使用<code>deleteall</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 11] deleteall /workers</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"退出shell\"><a href=\"#退出shell\" class=\"headerlink\" title=\"退出shell\"></a>退出shell</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 13] quit</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:Closed <span class=\"built_in\">type</span>:None path:null</span><br><span class=\"line\">2020-12-12 15:14:16,594 [myid:] - INFO  [main:ZooKeeper@1422] - Session: 0x100f8067ce90000 closed</span><br><span class=\"line\">2020-12-12 15:14:16,594 [myid:] - INFO  [main-EventThread:ClientCnxn<span class=\"variable\">$EventThread</span>@524] - EventThread shut down <span class=\"keyword\">for</span> session: 0x100f8067ce90000</span><br></pre></td></tr></table></figure>\n\n"},{"title":"yum和源码方式部署redis","date":"2021-05-02T10:51:47.000Z","description":"使用yum和源码两种方式部署redis服务","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ft.ki4.cn%2F2020%2F5%2FFJzaea.jpg&refer=http%3A%2F%2Ft.ki4.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1622544908&t=c091922c5699a3298f6f745bd9e803ec","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍使用yum和源码两种方式部署redis服务\n\n更新于 2021-05-02\n\n{% endnote %}\n\n<br>\n\n\n\n## yum方式部署\n\n### 依赖安装\n\n```bash\nyum install -y epel-release\n```\n\n\n\n###  安装Redis\n\n```bash\nyum install -y redis\nredis-cli --version\n```\n\n\n\n直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：\n\n```bash\nyum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\nyum --enablerepo=remi install redis -y\n```\n\n\n\n###  设置配置文件\n\n修改`/etc/redis.conf`中的`bind`参数为下面的值，监听所有IP地址：\n\n```bash\nbind 0.0.0.0\n```\n\n<br>\n\n\n\n###  设置系统参数\n\n```bash\nsysctl vm.overcommit_memory=1\necho \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n### 启动Redis\n\n```bash\nsystemctl start redis\nsystemctl enable redis\nsystemctl status redis\n```\n\n<br>\n\n------\n\n\n\n## 源码方式安装\n\n### 安装依赖\n\n```bash\nyum install -y gcc gcc-c++\n```\n\n\n\n### 下载并编译\n\n```bash\nwget https://github.com/antirez/redis/archive/5.0.3.tar.gz\ntar zxf 5.0.3.tar.gz\ncd redis-5.0.3\nmake PREFIX=/usr/local/redis install\n```\n\n\n\n###  设置环境变量和系统参数\n\n```bash\necho \"PATH=$PATH:/usr/local/redis/bin\" >> /etc/profile\nsource /etc/profile\n```\n\n\n\n安装后会在`/usr/local/redis`下生成安装目录，安装的命令有如下：\n\n```\n# /usr/local/redis/bin\nredis-benchmark：性能测试工具\nredis-check-aof：文件修复工具\nredis-check-dump：rbd文件检查工具\nredis-cli：客户端命令行工具\nredis-server：服务启动命令\n```\n\n\n\n设置系统参数：\n\n```bash\nsysctl vm.overcommit_memory=1\necho \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n###  设置配置文件\n\n编辑配置文件`/usr/local/redis/redis.conf`，修改`daemonize`参数为下面的值，让redis在后台运行：\n\n```\ndaemonize yes\n```\n\n> 如果没有`redis.conf`，可以拷贝源码包中的配置文件过去\n\n\n\n###  启动Redis\n\n```bash\nredis-server /usr/loca/redis/redis.conf\n\nps -ef | grep redis\nroot      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379\n\nnetstat -ntlp | grep redis\ntcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server\n```\n\n\n\n###  连接Redis\n\n```bash\nredis-cli\n127.0.0.1:6379>\n```\n\n\n\n###  停止Redis\n\n```bash\nredis-cli shutdonw\n```\n\n","source":"_posts/yum和源码方式部署redis.md","raw":"---\ntitle: yum和源码方式部署redis\ndate: 2021-05-02 18:51:47\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 部署\ndescription: 使用yum和源码两种方式部署redis服务\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ft.ki4.cn%2F2020%2F5%2FFJzaea.jpg&refer=http%3A%2F%2Ft.ki4.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1622544908&t=c091922c5699a3298f6f745bd9e803ec\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍使用yum和源码两种方式部署redis服务\n\n更新于 2021-05-02\n\n{% endnote %}\n\n<br>\n\n\n\n## yum方式部署\n\n### 依赖安装\n\n```bash\nyum install -y epel-release\n```\n\n\n\n###  安装Redis\n\n```bash\nyum install -y redis\nredis-cli --version\n```\n\n\n\n直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：\n\n```bash\nyum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\nyum --enablerepo=remi install redis -y\n```\n\n\n\n###  设置配置文件\n\n修改`/etc/redis.conf`中的`bind`参数为下面的值，监听所有IP地址：\n\n```bash\nbind 0.0.0.0\n```\n\n<br>\n\n\n\n###  设置系统参数\n\n```bash\nsysctl vm.overcommit_memory=1\necho \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n### 启动Redis\n\n```bash\nsystemctl start redis\nsystemctl enable redis\nsystemctl status redis\n```\n\n<br>\n\n------\n\n\n\n## 源码方式安装\n\n### 安装依赖\n\n```bash\nyum install -y gcc gcc-c++\n```\n\n\n\n### 下载并编译\n\n```bash\nwget https://github.com/antirez/redis/archive/5.0.3.tar.gz\ntar zxf 5.0.3.tar.gz\ncd redis-5.0.3\nmake PREFIX=/usr/local/redis install\n```\n\n\n\n###  设置环境变量和系统参数\n\n```bash\necho \"PATH=$PATH:/usr/local/redis/bin\" >> /etc/profile\nsource /etc/profile\n```\n\n\n\n安装后会在`/usr/local/redis`下生成安装目录，安装的命令有如下：\n\n```\n# /usr/local/redis/bin\nredis-benchmark：性能测试工具\nredis-check-aof：文件修复工具\nredis-check-dump：rbd文件检查工具\nredis-cli：客户端命令行工具\nredis-server：服务启动命令\n```\n\n\n\n设置系统参数：\n\n```bash\nsysctl vm.overcommit_memory=1\necho \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n###  设置配置文件\n\n编辑配置文件`/usr/local/redis/redis.conf`，修改`daemonize`参数为下面的值，让redis在后台运行：\n\n```\ndaemonize yes\n```\n\n> 如果没有`redis.conf`，可以拷贝源码包中的配置文件过去\n\n\n\n###  启动Redis\n\n```bash\nredis-server /usr/loca/redis/redis.conf\n\nps -ef | grep redis\nroot      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379\n\nnetstat -ntlp | grep redis\ntcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server\n```\n\n\n\n###  连接Redis\n\n```bash\nredis-cli\n127.0.0.1:6379>\n```\n\n\n\n###  停止Redis\n\n```bash\nredis-cli shutdonw\n```\n\n","slug":"yum和源码方式部署redis","published":1,"updated":"2021-05-02T10:56:47.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5o000mp0kl79sl5nqt","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍使用yum和源码两种方式部署redis服务</p><p>更新于 2021-05-02</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"yum方式部署\"><a href=\"#yum方式部署\" class=\"headerlink\" title=\"yum方式部署\"></a>yum方式部署</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装Redis\"><a href=\"#安装Redis\" class=\"headerlink\" title=\"安装Redis\"></a>安装Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y redis</span><br><span class=\"line\">redis-cli --version</span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">yum --enablerepo=remi install redis -y</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>修改<code>/etc/redis.conf</code>中的<code>bind</code>参数为下面的值，监听所有IP地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"设置系统参数\"><a href=\"#设置系统参数\" class=\"headerlink\" title=\"设置系统参数\"></a>设置系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl vm.overcommit_memory=1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;sysctl vm.overcommit_memory=1&quot;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"启动Redis\"><a href=\"#启动Redis\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> redis</span><br><span class=\"line\">systemctl status redis</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载并编译\"><a href=\"#下载并编译\" class=\"headerlink\" title=\"下载并编译\"></a>下载并编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/antirez/redis/archive/5.0.3.tar.gz</span><br><span class=\"line\">tar zxf 5.0.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis-5.0.3</span><br><span class=\"line\">make PREFIX=/usr/<span class=\"built_in\">local</span>/redis install</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置环境变量和系统参数\"><a href=\"#设置环境变量和系统参数\" class=\"headerlink\" title=\"设置环境变量和系统参数\"></a>设置环境变量和系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;PATH=<span class=\"variable\">$PATH</span>:/usr/local/redis/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装后会在<code>/usr/local/redis</code>下生成安装目录，安装的命令有如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class=\"line\">redis-benchmark：性能测试工具</span><br><span class=\"line\">redis-check-aof：文件修复工具</span><br><span class=\"line\">redis-check-dump：rbd文件检查工具</span><br><span class=\"line\">redis-cli：客户端命令行工具</span><br><span class=\"line\">redis-server：服务启动命令</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置系统参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl vm.overcommit_memory=1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;sysctl vm.overcommit_memory=1&quot;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"设置配置文件-1\"><a href=\"#设置配置文件-1\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>编辑配置文件<code>/usr/local/redis/redis.conf</code>，修改<code>daemonize</code>参数为下面的值，让redis在后台运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果没有<code>redis.conf</code>，可以拷贝源码包中的配置文件过去</p>\n</blockquote>\n<h3 id=\"启动Redis-1\"><a href=\"#启动Redis-1\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server /usr/loca/redis/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef | grep redis</span><br><span class=\"line\">root      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -ntlp | grep redis</span><br><span class=\"line\">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接Redis\"><a href=\"#连接Redis\" class=\"headerlink\" title=\"连接Redis\"></a>连接Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"停止Redis\"><a href=\"#停止Redis\" class=\"headerlink\" title=\"停止Redis\"></a>停止Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli shutdonw</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍使用yum和源码两种方式部署redis服务</p><p>更新于 2021-05-02</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"yum方式部署\"><a href=\"#yum方式部署\" class=\"headerlink\" title=\"yum方式部署\"></a>yum方式部署</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装Redis\"><a href=\"#安装Redis\" class=\"headerlink\" title=\"安装Redis\"></a>安装Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y redis</span><br><span class=\"line\">redis-cli --version</span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">yum --enablerepo=remi install redis -y</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>修改<code>/etc/redis.conf</code>中的<code>bind</code>参数为下面的值，监听所有IP地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"设置系统参数\"><a href=\"#设置系统参数\" class=\"headerlink\" title=\"设置系统参数\"></a>设置系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl vm.overcommit_memory=1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;sysctl vm.overcommit_memory=1&quot;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"启动Redis\"><a href=\"#启动Redis\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start redis</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> redis</span><br><span class=\"line\">systemctl status redis</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载并编译\"><a href=\"#下载并编译\" class=\"headerlink\" title=\"下载并编译\"></a>下载并编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/antirez/redis/archive/5.0.3.tar.gz</span><br><span class=\"line\">tar zxf 5.0.3.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis-5.0.3</span><br><span class=\"line\">make PREFIX=/usr/<span class=\"built_in\">local</span>/redis install</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置环境变量和系统参数\"><a href=\"#设置环境变量和系统参数\" class=\"headerlink\" title=\"设置环境变量和系统参数\"></a>设置环境变量和系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;PATH=<span class=\"variable\">$PATH</span>:/usr/local/redis/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装后会在<code>/usr/local/redis</code>下生成安装目录，安装的命令有如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class=\"line\">redis-benchmark：性能测试工具</span><br><span class=\"line\">redis-check-aof：文件修复工具</span><br><span class=\"line\">redis-check-dump：rbd文件检查工具</span><br><span class=\"line\">redis-cli：客户端命令行工具</span><br><span class=\"line\">redis-server：服务启动命令</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置系统参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl vm.overcommit_memory=1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;sysctl vm.overcommit_memory=1&quot;</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"设置配置文件-1\"><a href=\"#设置配置文件-1\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>编辑配置文件<code>/usr/local/redis/redis.conf</code>，修改<code>daemonize</code>参数为下面的值，让redis在后台运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果没有<code>redis.conf</code>，可以拷贝源码包中的配置文件过去</p>\n</blockquote>\n<h3 id=\"启动Redis-1\"><a href=\"#启动Redis-1\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server /usr/loca/redis/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">ps -ef | grep redis</span><br><span class=\"line\">root      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -ntlp | grep redis</span><br><span class=\"line\">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接Redis\"><a href=\"#连接Redis\" class=\"headerlink\" title=\"连接Redis\"></a>连接Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"停止Redis\"><a href=\"#停止Redis\" class=\"headerlink\" title=\"停止Redis\"></a>停止Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli shutdonw</span><br></pre></td></tr></table></figure>\n\n"},{"title":"主从复制","date":"2021-04-18T07:46:13.000Z","description":"redis主从节点复制","cover":"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3326783113,1557854711&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis主从复制的原理和配置方式\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n**redis支持简单且易用的主从复制功能，该功能可以让从服务器成为主服务器的精确复制品。**\n\n<br>\n\n\n\n## redis主从复制重要方面\n\n- redis使用异步复制，redis从服务器会每秒一次向主服务器报告复制流处理进度；\n- 一个主服务器可以有多个从服务器，从服务器也可以有自己的从服务器；\n- 复制功能不会阻塞主服务器，即使有多个从服务器正在进行数据同步；\n- 复制功能不会阻塞从服务器，只要redis.conf进行了配置，即使从服务器进行初次数据同步，服务器也可以使用旧数据进行查询，但是在从服务器删除旧版数据载入新版数据期间会阻塞；\n- 复制功能可以单纯用于数据冗余，也可以通过让从服务器处理只读命令来提升扩展性；\n- 可以通过复制功能让主服务器不进行持久化操作，只要关闭主服务器持久化功能，让从服务器进行持久化即可；\n\n\n\n在使用主从复制时如果关闭了主节点的持久化，则应该避免在主节点服务宕机后自动拉起，例如下面的例子：\n\n1. A节点作为主，关闭了持久化；B和C作为从，从A节点复制数据；\n2. 某时刻A宕机，然后自动或手动重启了A的服务，由于A没有持久化数据导致A的数据为空；\n3. B和C从A复制数据发现数据为空，于是B和C也删除了自己的数据；\n\n\n\n> 所以在主节点关闭持久化的情况下自动拉起服务是非常危险的。\n\n<br>\n\n\n\n## 复制功能原理\n\n1. 当建立一个从服务器时，从服务器向主服务器发送PSYNC命令，接到该命令的主服务器开始执行BGSAVE，并在保存操作执行期间将所有新的写入命令保存到一个缓冲区；\n2. 执行完BGSAVE后，主将保存的rdb文件发送给从，从接受这个文件并将文件中的数据写入自己的内存；\n3. 之后主以redis命令协议的格式将命令缓冲区积累的内容发送到从服务器；\n\n>  每次主从同步的时候都会比较一下和从的数据偏移量是否一致，不一致则全量数据同步，一致则进行部分数据同步。\n\n\n\n如果是大内存并且在高频次写入时进行数据同步会有个问题：\n\n- 主将进行BGSAVE操作，并把操作期间的写入命令保存在缓冲区；由于缓冲区大小有限，如果写入量很大则可能超过缓冲区大小，会导致主从之间不停地进行全量数据同步；\n- 主进行BGSAVE操作产生的rdb文件很大，如果在传输期间有网络波动很可能导致传输失败，不得不重新进行全量同步；\n\n<br>\n\n\n\n## 配置主从复制\n\n从服务器配置，修改配置文件，在配置文件中加入如下的一行，指定主服务器的地址和端口：\n\n```bash\nslaveof 10.10.99.100 6379\n```\n\n\n\n或者使用命令行的方式指定主服务器，在从服务器命令行输入下面的命令开始主从同步：\n\n```bash\n127.0.0.1:6379> SLAVEOF 10.10.99.100 6379\n```\n\n\n\n> 生产建议使用命令的方式指定复制地址；\n\n\n\n创建完成后可以在主和从上分别执行下面的指令查看角色：\n\n```bash\n10.10.62.17:6379> INFO replication\n```\n\n<br>\n\n\n\n## 只读从服务器\n\n如果是从服务器，默认是只读模式，将拒绝任何写入命令\n\n只读模式可以由redi.conf配置文件中`slave-read-only`来进行控制。\n\n<br>\n\n\n\n## 主从切换\n\n在将从服务器提升为主的时候，需要执行下面的命令：\n\n```bash\n127.0.0.1:6379> SLAVEOF NO ONE\n```","source":"_posts/主从复制.md","raw":"---\ntitle: 主从复制\ndate: 2021-04-18 15:46:13\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 数据持久化和主从复制\ndescription: redis主从节点复制\ncover: https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3326783113,1557854711&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis主从复制的原理和配置方式\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n**redis支持简单且易用的主从复制功能，该功能可以让从服务器成为主服务器的精确复制品。**\n\n<br>\n\n\n\n## redis主从复制重要方面\n\n- redis使用异步复制，redis从服务器会每秒一次向主服务器报告复制流处理进度；\n- 一个主服务器可以有多个从服务器，从服务器也可以有自己的从服务器；\n- 复制功能不会阻塞主服务器，即使有多个从服务器正在进行数据同步；\n- 复制功能不会阻塞从服务器，只要redis.conf进行了配置，即使从服务器进行初次数据同步，服务器也可以使用旧数据进行查询，但是在从服务器删除旧版数据载入新版数据期间会阻塞；\n- 复制功能可以单纯用于数据冗余，也可以通过让从服务器处理只读命令来提升扩展性；\n- 可以通过复制功能让主服务器不进行持久化操作，只要关闭主服务器持久化功能，让从服务器进行持久化即可；\n\n\n\n在使用主从复制时如果关闭了主节点的持久化，则应该避免在主节点服务宕机后自动拉起，例如下面的例子：\n\n1. A节点作为主，关闭了持久化；B和C作为从，从A节点复制数据；\n2. 某时刻A宕机，然后自动或手动重启了A的服务，由于A没有持久化数据导致A的数据为空；\n3. B和C从A复制数据发现数据为空，于是B和C也删除了自己的数据；\n\n\n\n> 所以在主节点关闭持久化的情况下自动拉起服务是非常危险的。\n\n<br>\n\n\n\n## 复制功能原理\n\n1. 当建立一个从服务器时，从服务器向主服务器发送PSYNC命令，接到该命令的主服务器开始执行BGSAVE，并在保存操作执行期间将所有新的写入命令保存到一个缓冲区；\n2. 执行完BGSAVE后，主将保存的rdb文件发送给从，从接受这个文件并将文件中的数据写入自己的内存；\n3. 之后主以redis命令协议的格式将命令缓冲区积累的内容发送到从服务器；\n\n>  每次主从同步的时候都会比较一下和从的数据偏移量是否一致，不一致则全量数据同步，一致则进行部分数据同步。\n\n\n\n如果是大内存并且在高频次写入时进行数据同步会有个问题：\n\n- 主将进行BGSAVE操作，并把操作期间的写入命令保存在缓冲区；由于缓冲区大小有限，如果写入量很大则可能超过缓冲区大小，会导致主从之间不停地进行全量数据同步；\n- 主进行BGSAVE操作产生的rdb文件很大，如果在传输期间有网络波动很可能导致传输失败，不得不重新进行全量同步；\n\n<br>\n\n\n\n## 配置主从复制\n\n从服务器配置，修改配置文件，在配置文件中加入如下的一行，指定主服务器的地址和端口：\n\n```bash\nslaveof 10.10.99.100 6379\n```\n\n\n\n或者使用命令行的方式指定主服务器，在从服务器命令行输入下面的命令开始主从同步：\n\n```bash\n127.0.0.1:6379> SLAVEOF 10.10.99.100 6379\n```\n\n\n\n> 生产建议使用命令的方式指定复制地址；\n\n\n\n创建完成后可以在主和从上分别执行下面的指令查看角色：\n\n```bash\n10.10.62.17:6379> INFO replication\n```\n\n<br>\n\n\n\n## 只读从服务器\n\n如果是从服务器，默认是只读模式，将拒绝任何写入命令\n\n只读模式可以由redi.conf配置文件中`slave-read-only`来进行控制。\n\n<br>\n\n\n\n## 主从切换\n\n在将从服务器提升为主的时候，需要执行下面的命令：\n\n```bash\n127.0.0.1:6379> SLAVEOF NO ONE\n```","slug":"主从复制","published":1,"updated":"2021-04-19T13:46:24.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5q000pp0kl2mvy6bnv","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis主从复制的原理和配置方式</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<p><strong>redis支持简单且易用的主从复制功能，该功能可以让从服务器成为主服务器的精确复制品。</strong></p>\n<br>\n\n\n\n<h2 id=\"redis主从复制重要方面\"><a href=\"#redis主从复制重要方面\" class=\"headerlink\" title=\"redis主从复制重要方面\"></a>redis主从复制重要方面</h2><ul>\n<li>redis使用异步复制，redis从服务器会每秒一次向主服务器报告复制流处理进度；</li>\n<li>一个主服务器可以有多个从服务器，从服务器也可以有自己的从服务器；</li>\n<li>复制功能不会阻塞主服务器，即使有多个从服务器正在进行数据同步；</li>\n<li>复制功能不会阻塞从服务器，只要redis.conf进行了配置，即使从服务器进行初次数据同步，服务器也可以使用旧数据进行查询，但是在从服务器删除旧版数据载入新版数据期间会阻塞；</li>\n<li>复制功能可以单纯用于数据冗余，也可以通过让从服务器处理只读命令来提升扩展性；</li>\n<li>可以通过复制功能让主服务器不进行持久化操作，只要关闭主服务器持久化功能，让从服务器进行持久化即可；</li>\n</ul>\n<p>在使用主从复制时如果关闭了主节点的持久化，则应该避免在主节点服务宕机后自动拉起，例如下面的例子：</p>\n<ol>\n<li>A节点作为主，关闭了持久化；B和C作为从，从A节点复制数据；</li>\n<li>某时刻A宕机，然后自动或手动重启了A的服务，由于A没有持久化数据导致A的数据为空；</li>\n<li>B和C从A复制数据发现数据为空，于是B和C也删除了自己的数据；</li>\n</ol>\n<blockquote>\n<p>所以在主节点关闭持久化的情况下自动拉起服务是非常危险的。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"复制功能原理\"><a href=\"#复制功能原理\" class=\"headerlink\" title=\"复制功能原理\"></a>复制功能原理</h2><ol>\n<li>当建立一个从服务器时，从服务器向主服务器发送PSYNC命令，接到该命令的主服务器开始执行BGSAVE，并在保存操作执行期间将所有新的写入命令保存到一个缓冲区；</li>\n<li>执行完BGSAVE后，主将保存的rdb文件发送给从，从接受这个文件并将文件中的数据写入自己的内存；</li>\n<li>之后主以redis命令协议的格式将命令缓冲区积累的内容发送到从服务器；</li>\n</ol>\n<blockquote>\n<p> 每次主从同步的时候都会比较一下和从的数据偏移量是否一致，不一致则全量数据同步，一致则进行部分数据同步。</p>\n</blockquote>\n<p>如果是大内存并且在高频次写入时进行数据同步会有个问题：</p>\n<ul>\n<li>主将进行BGSAVE操作，并把操作期间的写入命令保存在缓冲区；由于缓冲区大小有限，如果写入量很大则可能超过缓冲区大小，会导致主从之间不停地进行全量数据同步；</li>\n<li>主进行BGSAVE操作产生的rdb文件很大，如果在传输期间有网络波动很可能导致传输失败，不得不重新进行全量同步；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"配置主从复制\"><a href=\"#配置主从复制\" class=\"headerlink\" title=\"配置主从复制\"></a>配置主从复制</h2><p>从服务器配置，修改配置文件，在配置文件中加入如下的一行，指定主服务器的地址和端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof 10.10.99.100 6379</span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者使用命令行的方式指定主服务器，在从服务器命令行输入下面的命令开始主从同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SLAVEOF 10.10.99.100 6379</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生产建议使用命令的方式指定复制地址；</p>\n</blockquote>\n<p>创建完成后可以在主和从上分别执行下面的指令查看角色：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.10.62.17:6379&gt; INFO replication</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"只读从服务器\"><a href=\"#只读从服务器\" class=\"headerlink\" title=\"只读从服务器\"></a>只读从服务器</h2><p>如果是从服务器，默认是只读模式，将拒绝任何写入命令</p>\n<p>只读模式可以由redi.conf配置文件中<code>slave-read-only</code>来进行控制。</p>\n<br>\n\n\n\n<h2 id=\"主从切换\"><a href=\"#主从切换\" class=\"headerlink\" title=\"主从切换\"></a>主从切换</h2><p>在将从服务器提升为主的时候，需要执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SLAVEOF NO ONE</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis主从复制的原理和配置方式</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<p><strong>redis支持简单且易用的主从复制功能，该功能可以让从服务器成为主服务器的精确复制品。</strong></p>\n<br>\n\n\n\n<h2 id=\"redis主从复制重要方面\"><a href=\"#redis主从复制重要方面\" class=\"headerlink\" title=\"redis主从复制重要方面\"></a>redis主从复制重要方面</h2><ul>\n<li>redis使用异步复制，redis从服务器会每秒一次向主服务器报告复制流处理进度；</li>\n<li>一个主服务器可以有多个从服务器，从服务器也可以有自己的从服务器；</li>\n<li>复制功能不会阻塞主服务器，即使有多个从服务器正在进行数据同步；</li>\n<li>复制功能不会阻塞从服务器，只要redis.conf进行了配置，即使从服务器进行初次数据同步，服务器也可以使用旧数据进行查询，但是在从服务器删除旧版数据载入新版数据期间会阻塞；</li>\n<li>复制功能可以单纯用于数据冗余，也可以通过让从服务器处理只读命令来提升扩展性；</li>\n<li>可以通过复制功能让主服务器不进行持久化操作，只要关闭主服务器持久化功能，让从服务器进行持久化即可；</li>\n</ul>\n<p>在使用主从复制时如果关闭了主节点的持久化，则应该避免在主节点服务宕机后自动拉起，例如下面的例子：</p>\n<ol>\n<li>A节点作为主，关闭了持久化；B和C作为从，从A节点复制数据；</li>\n<li>某时刻A宕机，然后自动或手动重启了A的服务，由于A没有持久化数据导致A的数据为空；</li>\n<li>B和C从A复制数据发现数据为空，于是B和C也删除了自己的数据；</li>\n</ol>\n<blockquote>\n<p>所以在主节点关闭持久化的情况下自动拉起服务是非常危险的。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"复制功能原理\"><a href=\"#复制功能原理\" class=\"headerlink\" title=\"复制功能原理\"></a>复制功能原理</h2><ol>\n<li>当建立一个从服务器时，从服务器向主服务器发送PSYNC命令，接到该命令的主服务器开始执行BGSAVE，并在保存操作执行期间将所有新的写入命令保存到一个缓冲区；</li>\n<li>执行完BGSAVE后，主将保存的rdb文件发送给从，从接受这个文件并将文件中的数据写入自己的内存；</li>\n<li>之后主以redis命令协议的格式将命令缓冲区积累的内容发送到从服务器；</li>\n</ol>\n<blockquote>\n<p> 每次主从同步的时候都会比较一下和从的数据偏移量是否一致，不一致则全量数据同步，一致则进行部分数据同步。</p>\n</blockquote>\n<p>如果是大内存并且在高频次写入时进行数据同步会有个问题：</p>\n<ul>\n<li>主将进行BGSAVE操作，并把操作期间的写入命令保存在缓冲区；由于缓冲区大小有限，如果写入量很大则可能超过缓冲区大小，会导致主从之间不停地进行全量数据同步；</li>\n<li>主进行BGSAVE操作产生的rdb文件很大，如果在传输期间有网络波动很可能导致传输失败，不得不重新进行全量同步；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"配置主从复制\"><a href=\"#配置主从复制\" class=\"headerlink\" title=\"配置主从复制\"></a>配置主从复制</h2><p>从服务器配置，修改配置文件，在配置文件中加入如下的一行，指定主服务器的地址和端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slaveof 10.10.99.100 6379</span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者使用命令行的方式指定主服务器，在从服务器命令行输入下面的命令开始主从同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SLAVEOF 10.10.99.100 6379</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生产建议使用命令的方式指定复制地址；</p>\n</blockquote>\n<p>创建完成后可以在主和从上分别执行下面的指令查看角色：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.10.62.17:6379&gt; INFO replication</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"只读从服务器\"><a href=\"#只读从服务器\" class=\"headerlink\" title=\"只读从服务器\"></a>只读从服务器</h2><p>如果是从服务器，默认是只读模式，将拒绝任何写入命令</p>\n<p>只读模式可以由redi.conf配置文件中<code>slave-read-only</code>来进行控制。</p>\n<br>\n\n\n\n<h2 id=\"主从切换\"><a href=\"#主从切换\" class=\"headerlink\" title=\"主从切换\"></a>主从切换</h2><p>在将从服务器提升为主的时候，需要执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SLAVEOF NO ONE</span><br></pre></td></tr></table></figure>"},{"title":"二进制方式部署kafka集群","date":"2021-05-02T11:01:37.000Z","description":"使用二进制方式部署kafka集群","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.kailing.pub%2FUploads%2Fimage%2F20190314%2F20190314151109_73755.png&refer=http%3A%2F%2Fwww.kailing.pub&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1622545443&t=c522a6bf51142ae088cea1e60fd9368f","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍使用二进制方式部署kafka集群，版本为kafka_2.12-2.2.1\n\n更新于 2021-05-02\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# 服务器规划\n\n| IP地址     | 主机名      | Kafka版本            | ZooKeeper版本           | JDK版本                    |\n| ---------- | ----------- | -------------------- | ----------------------- | -------------------------- |\n| 172.17.0.2 | kafka_node1 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.3 | kafka_node2 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.4 | kafka_node3 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n\n\n\n<br>\n\n\n\n# 部署JDK\n\n```bash\ntar xf jdk-8u161-linux-x64.tar.gz  -C /usr/local/\n\ncat << EOF >> /etc/profile\n#################JAVA#################\nexport JAVA_HOME=/usr/local/jdk1.8.0_161\nexport JRE_HOME=\\$JAVA_HOME/jre\nexport CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar:\\$JRE_HOME/lib\nexport PATH=\\$JAVA_HOME/bin:\\$JRE_HOME/bin:\\$PATH\nEOF\n\nsource /etc/profile\njava -version\n```\n\n\n\n<br>\n\n\n\n# 部署zookeeper\n\n## 下载\n\n```bash\n# 下载\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\n```\n\n\n\n## 安装\n\n```bash\n# 安装\ntar xf zookeeper-3.4.14.tar.gz  -C /usr/local/\ncp -rf /usr/local/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/local/zookeeper-3.4.14/conf/zoo.cfg\n```\n\n\n\n## 设置配置文件\n\n三个节点的配置需要保持一致。\n\n\n\n```bash\ncat << EOF > /usr/local/zookeeper-3.4.14/conf/zoo.cfg\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/data/zk_data\ndataLogDir=/usr/local/zookeeper-3.4.14/logs\nclientPort=2181\nmaxClientCnxns=60\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=1\nserver.1=172.17.0.2:2888:3888\nserver.2=172.17.0.3:2888:3888\nserver.3=172.17.0.4:2888:3888\nEOF\n```\n\n\n\n## 创建目录\n\n```bash\nmkdir -p /data/zk_data\nmkdir /usr/local/zookeeper-3.4.14/logs\n```\n\n\n\n## 创建ServerID标识\n\n在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件\n\n```bash\n# 在node-1节点\necho '1' > /data/zk_data/myid\n\n# 在node-2节点 \necho '2' > /data/zk_data/myid\n\n# 在node-3节点\necho '3' > /data/zk_data/myid\n```\n\n\n\n## 启动\n\n三个节点全部启动：\n\n\n\n```bash\n/usr/local/zookeeper-3.4.14/bin/zkServer.sh start\n\nZooKeeper JMX enabled by default\nUsing config: /usr/local/zookeeper-3.4.14/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n```\n\n\n\n使用`lsof -i:`命令来查看端口信息：\n\n- 如果是`leader`节点：查看到的连接会是与集群内所有的follower的连接；\n- 如果是`follower`节点：查看到的连接将只会与ZK集群中的leader连接；\n\n\n\n```bash\nlsof -i:2888\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点\n\n\n\n```bash\nlsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)\njava     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby->172.17.0.2:42424 (ESTABLISHED)\njava     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby->172.17.0.4:49420 (ESTABLISHED)\n\n```\n\n\n\n> node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点\n\n\n\n```bash\nlsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node3与node1一样为follower节点\n\n\n\n<br>\n\n\n\n# 部署kafka\n\n## 下载安装\n\n```bash\nwget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz\ntar xf kafka_2.12-2.2.1.tgz -C /usr/local/\n```\n\n\n\n## 修改配置文件\n\n先备份原配置文件：\n\n```bash\ncp -rf /usr/local/kafka_2.12-2.2.1/config/server.properties /usr/local/kafka_2.12-2.2.1/config/server.properties.default\n```\n\n\n\n设置新的配置文件：\n\n```bash\ncat << EOF > /usr/local/kafka_2.12-2.2.1/config/server.properties\nbroker.id=1                                                     #Kafka_node2节点修改为2，3修改为3\nlisteners=PLAINTEXT://172.17.0.2:9092                           #修改Kafka_node的IP地址为各自node本地地址\nnum.network.threads=3\nnum.io.threads=8\nsocket.send.buffer.bytes=102400\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nlog.dirs=/data/kafka-logs/\nnum.partitions=1\nnum.recovery.threads.per.data.dir=1\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\nlog.retention.hours=72\nlog.segment.bytes=1073741824\nlog.retention.check.interval.ms=300000\nzookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181\ndelete.topic.enable=true\nzookeeper.connection.timeout.ms=6000\ngroup.initial.rebalance.delay.ms=3000\nEOF\n```\n\n\n\n## 启动\n\n启动三个节点的服务\n\n```bash\n/usr/local/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/local/kafka_2.12-2.2.1/config/server.properties\n```\n\n\n\n## 检查\n\nZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918\nKafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568\n\n```bash\nnetstat -anplt | egrep \"(2181|9092)\"\ntcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          \ntcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          \ntcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          \ntcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java   \n```\n\n\n\n## 查看kafka连接情况\n\n查看node1的情况：\n\n```bash\nlsof -i:9092\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)\njava    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568->kafka_node1:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc->kafka_node1:55568 (ESTABLISHED)\njava    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094->172.17.0.3:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674->172.17.0.4:XmlIpcRegSvc (ESTABLISHED)\n```\n\n> node1节点同时与node2及node3建立了连接，即node1节点为主节点\n\n\n\n查看node2的情况：\n\n```bash\nlsof -i:9092\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)\njava    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc->172.17.0.2:43094 (ESTABLISHED)\n```\n\n> node2只与node1建立了连接，即它是follower节点\n\n\n\n查看node3的情况：\n\n```bash\nlsof -i:9092\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)\njava    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc->172.17.0.2:45674 (ESTABLISHED)\n```\n\n> node3与node1建立了连接，即它是follower节点\n\n\n\n","source":"_posts/二进制方式部署kafka集群.md","raw":"---\ntitle: 二进制方式部署kafka集群\ndate: 2021-05-02 19:01:37\ntags:\n- Kafka\ncategories:\n- 消息中间件\n- Kafka\n- 部署\ndescription: 使用二进制方式部署kafka集群\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.kailing.pub%2FUploads%2Fimage%2F20190314%2F20190314151109_73755.png&refer=http%3A%2F%2Fwww.kailing.pub&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1622545443&t=c522a6bf51142ae088cea1e60fd9368f\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍使用二进制方式部署kafka集群，版本为kafka_2.12-2.2.1\n\n更新于 2021-05-02\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# 服务器规划\n\n| IP地址     | 主机名      | Kafka版本            | ZooKeeper版本           | JDK版本                    |\n| ---------- | ----------- | -------------------- | ----------------------- | -------------------------- |\n| 172.17.0.2 | kafka_node1 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.3 | kafka_node2 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.4 | kafka_node3 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n\n\n\n<br>\n\n\n\n# 部署JDK\n\n```bash\ntar xf jdk-8u161-linux-x64.tar.gz  -C /usr/local/\n\ncat << EOF >> /etc/profile\n#################JAVA#################\nexport JAVA_HOME=/usr/local/jdk1.8.0_161\nexport JRE_HOME=\\$JAVA_HOME/jre\nexport CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar:\\$JRE_HOME/lib\nexport PATH=\\$JAVA_HOME/bin:\\$JRE_HOME/bin:\\$PATH\nEOF\n\nsource /etc/profile\njava -version\n```\n\n\n\n<br>\n\n\n\n# 部署zookeeper\n\n## 下载\n\n```bash\n# 下载\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\n```\n\n\n\n## 安装\n\n```bash\n# 安装\ntar xf zookeeper-3.4.14.tar.gz  -C /usr/local/\ncp -rf /usr/local/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/local/zookeeper-3.4.14/conf/zoo.cfg\n```\n\n\n\n## 设置配置文件\n\n三个节点的配置需要保持一致。\n\n\n\n```bash\ncat << EOF > /usr/local/zookeeper-3.4.14/conf/zoo.cfg\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/data/zk_data\ndataLogDir=/usr/local/zookeeper-3.4.14/logs\nclientPort=2181\nmaxClientCnxns=60\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=1\nserver.1=172.17.0.2:2888:3888\nserver.2=172.17.0.3:2888:3888\nserver.3=172.17.0.4:2888:3888\nEOF\n```\n\n\n\n## 创建目录\n\n```bash\nmkdir -p /data/zk_data\nmkdir /usr/local/zookeeper-3.4.14/logs\n```\n\n\n\n## 创建ServerID标识\n\n在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件\n\n```bash\n# 在node-1节点\necho '1' > /data/zk_data/myid\n\n# 在node-2节点 \necho '2' > /data/zk_data/myid\n\n# 在node-3节点\necho '3' > /data/zk_data/myid\n```\n\n\n\n## 启动\n\n三个节点全部启动：\n\n\n\n```bash\n/usr/local/zookeeper-3.4.14/bin/zkServer.sh start\n\nZooKeeper JMX enabled by default\nUsing config: /usr/local/zookeeper-3.4.14/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n```\n\n\n\n使用`lsof -i:`命令来查看端口信息：\n\n- 如果是`leader`节点：查看到的连接会是与集群内所有的follower的连接；\n- 如果是`follower`节点：查看到的连接将只会与ZK集群中的leader连接；\n\n\n\n```bash\nlsof -i:2888\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点\n\n\n\n```bash\nlsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)\njava     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby->172.17.0.2:42424 (ESTABLISHED)\njava     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby->172.17.0.4:49420 (ESTABLISHED)\n\n```\n\n\n\n> node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点\n\n\n\n```bash\nlsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node3与node1一样为follower节点\n\n\n\n<br>\n\n\n\n# 部署kafka\n\n## 下载安装\n\n```bash\nwget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz\ntar xf kafka_2.12-2.2.1.tgz -C /usr/local/\n```\n\n\n\n## 修改配置文件\n\n先备份原配置文件：\n\n```bash\ncp -rf /usr/local/kafka_2.12-2.2.1/config/server.properties /usr/local/kafka_2.12-2.2.1/config/server.properties.default\n```\n\n\n\n设置新的配置文件：\n\n```bash\ncat << EOF > /usr/local/kafka_2.12-2.2.1/config/server.properties\nbroker.id=1                                                     #Kafka_node2节点修改为2，3修改为3\nlisteners=PLAINTEXT://172.17.0.2:9092                           #修改Kafka_node的IP地址为各自node本地地址\nnum.network.threads=3\nnum.io.threads=8\nsocket.send.buffer.bytes=102400\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nlog.dirs=/data/kafka-logs/\nnum.partitions=1\nnum.recovery.threads.per.data.dir=1\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\nlog.retention.hours=72\nlog.segment.bytes=1073741824\nlog.retention.check.interval.ms=300000\nzookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181\ndelete.topic.enable=true\nzookeeper.connection.timeout.ms=6000\ngroup.initial.rebalance.delay.ms=3000\nEOF\n```\n\n\n\n## 启动\n\n启动三个节点的服务\n\n```bash\n/usr/local/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/local/kafka_2.12-2.2.1/config/server.properties\n```\n\n\n\n## 检查\n\nZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918\nKafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568\n\n```bash\nnetstat -anplt | egrep \"(2181|9092)\"\ntcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          \ntcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          \ntcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          \ntcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java   \n```\n\n\n\n## 查看kafka连接情况\n\n查看node1的情况：\n\n```bash\nlsof -i:9092\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)\njava    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568->kafka_node1:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc->kafka_node1:55568 (ESTABLISHED)\njava    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094->172.17.0.3:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674->172.17.0.4:XmlIpcRegSvc (ESTABLISHED)\n```\n\n> node1节点同时与node2及node3建立了连接，即node1节点为主节点\n\n\n\n查看node2的情况：\n\n```bash\nlsof -i:9092\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)\njava    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc->172.17.0.2:43094 (ESTABLISHED)\n```\n\n> node2只与node1建立了连接，即它是follower节点\n\n\n\n查看node3的情况：\n\n```bash\nlsof -i:9092\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)\njava    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc->172.17.0.2:45674 (ESTABLISHED)\n```\n\n> node3与node1建立了连接，即它是follower节点\n\n\n\n","slug":"二进制方式部署kafka集群","published":1,"updated":"2021-05-02T11:06:30.167Z","_id":"cko72de5s000rp0klb95tbk22","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍使用二进制方式部署kafka集群，版本为kafka_2.12-2.2.1</p><p>更新于 2021-05-02</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"服务器规划\"><a href=\"#服务器规划\" class=\"headerlink\" title=\"服务器规划\"></a>服务器规划</h1><table>\n<thead>\n<tr>\n<th>IP地址</th>\n<th>主机名</th>\n<th>Kafka版本</th>\n<th>ZooKeeper版本</th>\n<th>JDK版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>172.17.0.2</td>\n<td>kafka_node1</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.3</td>\n<td>kafka_node2</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.4</td>\n<td>kafka_node3</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n</tbody></table>\n<br>\n\n\n\n<h1 id=\"部署JDK\"><a href=\"#部署JDK\" class=\"headerlink\" title=\"部署JDK\"></a>部署JDK</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf jdk-8u161-linux-x64.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt;&gt; /etc/profile</span></span><br><span class=\"line\"><span class=\"string\">#################JAVA#################</span></span><br><span class=\"line\"><span class=\"string\">export JAVA_HOME=/usr/local/jdk1.8.0_161</span></span><br><span class=\"line\"><span class=\"string\">export JRE_HOME=\\$JAVA_HOME/jre</span></span><br><span class=\"line\"><span class=\"string\">export CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar:\\$JRE_HOME/lib</span></span><br><span class=\"line\"><span class=\"string\">export PATH=\\$JAVA_HOME/bin:\\$JRE_HOME/bin:\\$PATH</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署zookeeper\"><a href=\"#部署zookeeper\" class=\"headerlink\" title=\"部署zookeeper\"></a>部署zookeeper</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">tar xf zookeeper-3.4.14.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">cp -rf /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>三个节点的配置需要保持一致。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /usr/local/zookeeper-3.4.14/conf/zoo.cfg</span></span><br><span class=\"line\"><span class=\"string\">tickTime=2000</span></span><br><span class=\"line\"><span class=\"string\">initLimit=10</span></span><br><span class=\"line\"><span class=\"string\">syncLimit=5</span></span><br><span class=\"line\"><span class=\"string\">dataDir=/data/zk_data</span></span><br><span class=\"line\"><span class=\"string\">dataLogDir=/usr/local/zookeeper-3.4.14/logs</span></span><br><span class=\"line\"><span class=\"string\">clientPort=2181</span></span><br><span class=\"line\"><span class=\"string\">maxClientCnxns=60</span></span><br><span class=\"line\"><span class=\"string\">autopurge.snapRetainCount=3</span></span><br><span class=\"line\"><span class=\"string\">autopurge.purgeInterval=1</span></span><br><span class=\"line\"><span class=\"string\">server.1=172.17.0.2:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.2=172.17.0.3:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.3=172.17.0.4:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/zk_data</span><br><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/logs</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建ServerID标识\"><a href=\"#创建ServerID标识\" class=\"headerlink\" title=\"创建ServerID标识\"></a>创建ServerID标识</h2><p>在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在node-1节点</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;1&#x27;</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-2节点 </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;2&#x27;</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-3节点</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;3&#x27;</span> &gt; /data/zk_data/myid</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>三个节点全部启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/zkServer.sh start</span><br><span class=\"line\"></span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用<code>lsof -i:</code>命令来查看端口信息：</p>\n<ul>\n<li>如果是<code>leader</code>节点：查看到的连接会是与集群内所有的follower的连接；</li>\n<li>如果是<code>follower</code>节点：查看到的连接将只会与ZK集群中的leader连接；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:2888</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)</span><br><span class=\"line\">java     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.2:42424 (ESTABLISHED)</span><br><span class=\"line\">java     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.4:49420 (ESTABLISHED)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node3与node1一样为follower节点</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署kafka\"><a href=\"#部署kafka\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h1><h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz</span><br><span class=\"line\">tar xf kafka_2.12-2.2.1.tgz -C /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>先备份原配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -rf /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties.default</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置新的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /usr/local/kafka_2.12-2.2.1/config/server.properties</span></span><br><span class=\"line\"><span class=\"string\">broker.id=1                                                     #Kafka_node2节点修改为2，3修改为3</span></span><br><span class=\"line\"><span class=\"string\">listeners=PLAINTEXT://172.17.0.2:9092                           #修改Kafka_node的IP地址为各自node本地地址</span></span><br><span class=\"line\"><span class=\"string\">num.network.threads=3</span></span><br><span class=\"line\"><span class=\"string\">num.io.threads=8</span></span><br><span class=\"line\"><span class=\"string\">socket.send.buffer.bytes=102400</span></span><br><span class=\"line\"><span class=\"string\">socket.receive.buffer.bytes=102400</span></span><br><span class=\"line\"><span class=\"string\">socket.request.max.bytes=104857600</span></span><br><span class=\"line\"><span class=\"string\">log.dirs=/data/kafka-logs/</span></span><br><span class=\"line\"><span class=\"string\">num.partitions=1</span></span><br><span class=\"line\"><span class=\"string\">num.recovery.threads.per.data.dir=1</span></span><br><span class=\"line\"><span class=\"string\">offsets.topic.replication.factor=1</span></span><br><span class=\"line\"><span class=\"string\">transaction.state.log.replication.factor=1</span></span><br><span class=\"line\"><span class=\"string\">transaction.state.log.min.isr=1</span></span><br><span class=\"line\"><span class=\"string\">log.retention.hours=72</span></span><br><span class=\"line\"><span class=\"string\">log.segment.bytes=1073741824</span></span><br><span class=\"line\"><span class=\"string\">log.retention.check.interval.ms=300000</span></span><br><span class=\"line\"><span class=\"string\">zookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181</span></span><br><span class=\"line\"><span class=\"string\">delete.topic.enable=true</span></span><br><span class=\"line\"><span class=\"string\">zookeeper.connection.timeout.ms=6000</span></span><br><span class=\"line\"><span class=\"string\">group.initial.rebalance.delay.ms=3000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>启动三个节点的服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>ZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918<br>Kafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anplt | egrep <span class=\"string\">&quot;(2181|9092)&quot;</span></span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          </span><br><span class=\"line\">tcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java   </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看kafka连接情况\"><a href=\"#查看kafka连接情况\" class=\"headerlink\" title=\"查看kafka连接情况\"></a>查看kafka连接情况</h2><p>查看node1的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9092</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568-&gt;kafka_node1:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc-&gt;kafka_node1:55568 (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094-&gt;172.17.0.3:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674-&gt;172.17.0.4:XmlIpcRegSvc (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node1节点同时与node2及node3建立了连接，即node1节点为主节点</p>\n</blockquote>\n<p>查看node2的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9092</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc-&gt;172.17.0.2:43094 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node2只与node1建立了连接，即它是follower节点</p>\n</blockquote>\n<p>查看node3的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9092</span><br><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc-&gt;172.17.0.2:45674 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node3与node1建立了连接，即它是follower节点</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍使用二进制方式部署kafka集群，版本为kafka_2.12-2.2.1</p><p>更新于 2021-05-02</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"服务器规划\"><a href=\"#服务器规划\" class=\"headerlink\" title=\"服务器规划\"></a>服务器规划</h1><table>\n<thead>\n<tr>\n<th>IP地址</th>\n<th>主机名</th>\n<th>Kafka版本</th>\n<th>ZooKeeper版本</th>\n<th>JDK版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>172.17.0.2</td>\n<td>kafka_node1</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.3</td>\n<td>kafka_node2</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.4</td>\n<td>kafka_node3</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n</tbody></table>\n<br>\n\n\n\n<h1 id=\"部署JDK\"><a href=\"#部署JDK\" class=\"headerlink\" title=\"部署JDK\"></a>部署JDK</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf jdk-8u161-linux-x64.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt;&gt; /etc/profile</span></span><br><span class=\"line\"><span class=\"string\">#################JAVA#################</span></span><br><span class=\"line\"><span class=\"string\">export JAVA_HOME=/usr/local/jdk1.8.0_161</span></span><br><span class=\"line\"><span class=\"string\">export JRE_HOME=\\$JAVA_HOME/jre</span></span><br><span class=\"line\"><span class=\"string\">export CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar:\\$JRE_HOME/lib</span></span><br><span class=\"line\"><span class=\"string\">export PATH=\\$JAVA_HOME/bin:\\$JRE_HOME/bin:\\$PATH</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署zookeeper\"><a href=\"#部署zookeeper\" class=\"headerlink\" title=\"部署zookeeper\"></a>部署zookeeper</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">tar xf zookeeper-3.4.14.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">cp -rf /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>三个节点的配置需要保持一致。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /usr/local/zookeeper-3.4.14/conf/zoo.cfg</span></span><br><span class=\"line\"><span class=\"string\">tickTime=2000</span></span><br><span class=\"line\"><span class=\"string\">initLimit=10</span></span><br><span class=\"line\"><span class=\"string\">syncLimit=5</span></span><br><span class=\"line\"><span class=\"string\">dataDir=/data/zk_data</span></span><br><span class=\"line\"><span class=\"string\">dataLogDir=/usr/local/zookeeper-3.4.14/logs</span></span><br><span class=\"line\"><span class=\"string\">clientPort=2181</span></span><br><span class=\"line\"><span class=\"string\">maxClientCnxns=60</span></span><br><span class=\"line\"><span class=\"string\">autopurge.snapRetainCount=3</span></span><br><span class=\"line\"><span class=\"string\">autopurge.purgeInterval=1</span></span><br><span class=\"line\"><span class=\"string\">server.1=172.17.0.2:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.2=172.17.0.3:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">server.3=172.17.0.4:2888:3888</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/zk_data</span><br><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/logs</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建ServerID标识\"><a href=\"#创建ServerID标识\" class=\"headerlink\" title=\"创建ServerID标识\"></a>创建ServerID标识</h2><p>在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在node-1节点</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;1&#x27;</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-2节点 </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;2&#x27;</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-3节点</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;3&#x27;</span> &gt; /data/zk_data/myid</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>三个节点全部启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/zkServer.sh start</span><br><span class=\"line\"></span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用<code>lsof -i:</code>命令来查看端口信息：</p>\n<ul>\n<li>如果是<code>leader</code>节点：查看到的连接会是与集群内所有的follower的连接；</li>\n<li>如果是<code>follower</code>节点：查看到的连接将只会与ZK集群中的leader连接；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:2888</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)</span><br><span class=\"line\">java     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.2:42424 (ESTABLISHED)</span><br><span class=\"line\">java     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.4:49420 (ESTABLISHED)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node3与node1一样为follower节点</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署kafka\"><a href=\"#部署kafka\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h1><h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz</span><br><span class=\"line\">tar xf kafka_2.12-2.2.1.tgz -C /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>先备份原配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -rf /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties.default</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置新的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; <span class=\"string\">EOF &gt; /usr/local/kafka_2.12-2.2.1/config/server.properties</span></span><br><span class=\"line\"><span class=\"string\">broker.id=1                                                     #Kafka_node2节点修改为2，3修改为3</span></span><br><span class=\"line\"><span class=\"string\">listeners=PLAINTEXT://172.17.0.2:9092                           #修改Kafka_node的IP地址为各自node本地地址</span></span><br><span class=\"line\"><span class=\"string\">num.network.threads=3</span></span><br><span class=\"line\"><span class=\"string\">num.io.threads=8</span></span><br><span class=\"line\"><span class=\"string\">socket.send.buffer.bytes=102400</span></span><br><span class=\"line\"><span class=\"string\">socket.receive.buffer.bytes=102400</span></span><br><span class=\"line\"><span class=\"string\">socket.request.max.bytes=104857600</span></span><br><span class=\"line\"><span class=\"string\">log.dirs=/data/kafka-logs/</span></span><br><span class=\"line\"><span class=\"string\">num.partitions=1</span></span><br><span class=\"line\"><span class=\"string\">num.recovery.threads.per.data.dir=1</span></span><br><span class=\"line\"><span class=\"string\">offsets.topic.replication.factor=1</span></span><br><span class=\"line\"><span class=\"string\">transaction.state.log.replication.factor=1</span></span><br><span class=\"line\"><span class=\"string\">transaction.state.log.min.isr=1</span></span><br><span class=\"line\"><span class=\"string\">log.retention.hours=72</span></span><br><span class=\"line\"><span class=\"string\">log.segment.bytes=1073741824</span></span><br><span class=\"line\"><span class=\"string\">log.retention.check.interval.ms=300000</span></span><br><span class=\"line\"><span class=\"string\">zookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181</span></span><br><span class=\"line\"><span class=\"string\">delete.topic.enable=true</span></span><br><span class=\"line\"><span class=\"string\">zookeeper.connection.timeout.ms=6000</span></span><br><span class=\"line\"><span class=\"string\">group.initial.rebalance.delay.ms=3000</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>启动三个节点的服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>ZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918<br>Kafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anplt | egrep <span class=\"string\">&quot;(2181|9092)&quot;</span></span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          </span><br><span class=\"line\">tcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java   </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看kafka连接情况\"><a href=\"#查看kafka连接情况\" class=\"headerlink\" title=\"查看kafka连接情况\"></a>查看kafka连接情况</h2><p>查看node1的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9092</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568-&gt;kafka_node1:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc-&gt;kafka_node1:55568 (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094-&gt;172.17.0.3:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674-&gt;172.17.0.4:XmlIpcRegSvc (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node1节点同时与node2及node3建立了连接，即node1节点为主节点</p>\n</blockquote>\n<p>查看node2的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9092</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc-&gt;172.17.0.2:43094 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node2只与node1建立了连接，即它是follower节点</p>\n</blockquote>\n<p>查看node3的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof -i:9092</span><br><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc-&gt;172.17.0.2:45674 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node3与node1建立了连接，即它是follower节点</p>\n</blockquote>\n"},{"title":"使用k3d和traefik快速搭建开发环境","date":"2021-03-28T07:04:38.000Z","description":"使用k3s和treafik快速搭建一个k8s开发环境","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3084171116,3613775985&fm=26&gp=0.jpg","_content":"\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用k3d和traefik快速搭建开发环境\n\n更新于 2021-03-28\n\n{% endnote %}\n\n<br>\n\n\n\n# 介绍\n\n一套完成的k8s系统比较复杂，需要很多的资源，部署起来也需要较长的时间。如果是开发环境，对于集群要求快速停止和开启、可以有多个集群并行、使用最少的资源，k3d就可以满足。\n\n\n\nk3d是一个非常轻量的集群，可以快速构建用于开发的k8s集群，其具有一下的特点：\n\n- 集群默认使用sqlite而不是etcd存储数据；\n- 所有的组件都封装在一个二进制程序中；\n- 在docker内运行，快速启停；\n\n\n\n<br>\n\n\n\n# k3d启动集群\n\n\n\n## 安装k3d\n\n直接运行下面的命令安装k3s：\n\n```bash\ncurl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash\n```\n\n\n\n这个会在系统中安装`k3d`命令程序，使用下面的命令查看帮助信息：\n\n```bash\nk3d -h\n```\n\n\n\n\n\n## 启动集群\n\n使用下面的命令启动集群：\n\n```bash\nk3d cluster create devcluster \\\n--api-port 127.0.0.1:6443 \\\n-p 80:80@loadbalancer \\\n-p 443:443@loadbalancer \\\n--k3s-server-arg \"--no-deploy=traefik\"\n```\n\n\n\n> 默认的k3d绑定的是traefik1，这里使用其他控制器，所以默认不安装\n\n\n\n在某些云环境下，只能使用docker的host网络模式，那么创建集群则使用下面的命令：\n\n```bash\nk3d cluster create devcluster \\\n--network host \\\n--api-port 127.0.0.1:6443 \\\n-p 80:80@loadbalancer \\\n-p 443:443@loadbalancer \\\n--k3s-server-arg \"--no-deploy=traefik\" \\\n--no-hostip\n```\n\n\n\n> 指定network类型为host，并不将宿主机ip地址替换到程序中\n\n\n\n## 查看集群\n\n查看当前创建的集群直接使用下面的命令：\n\n```bash\nk3d cluster ls\n\nNAME         SERVERS   AGENTS   LOADBALANCER\ndevcluster   1/1       0/0      false\n```\n\n\n\n可以看到当前的集群已经创建好了\n\n\n\n## 设置kubectl\n\n首先设置yum源，安装kubectl：\n\n```bash\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\nyum install -y kubectl-1.17.3\n```\n\n\n\n然后获取集群`devcluster`的认证信息：\n\n```bash\nk3d kubeconfig get devcluster > /root/.kube/config\n```\n\n\n\n现在就可以使用kubectl来操作集群了：\n\n```bash\nkubectl get node \nNAME                      STATUS   ROLES    AGE   VERSION\nk3d-devcluster-server-0   Ready    master   26m   v1.19.3+k3s2\n\nkubectl get pod --all-namespaces \nNAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE\nkube-system   metrics-server-7b4f8b595-pghbq           1/1     Running   0          26m\nkube-system   local-path-provisioner-7ff9579c6-hmg6k   1/1     Running   0          26m\nkube-system   coredns-66c464876b-5lpn5                 1/1     Running   0          26m\n```\n\n\n\n<br>\n\n\n\n# 部署traefik 2\n\n## 安装helm3\n\n```bash\nwget https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz\ntar zxf helm-v3.2.1-linux-amd64.tar.gz\ncp linux-amd64/helm /usr/local/bin/\nhelm version\n\nversion.BuildInfo{Version:\"v3.2.1\", GitCommit:\"fe51cd1e31e6a202cba7dead9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.13.10\"}\n```\n\n\n\n## 安装traefik 2\n\n```bash\nhelm repo add traefik https://containous.github.io/traefik-helm-chart\nhelm repo list\nhelm install traefik traefik/traefik\nkubectl get pod -n default\n\nNAME                       READY   STATUS    RESTARTS   AGE\nsvclb-traefik-ldtfr        2/2     Running   0          26s\ntraefik-5fc4947cf9-w695g   1/1     Running   0          26s\n```\n\n\n\n## 设置traefik的dashboard\n\n```bash\nkubectl port-forward $(kubectl get pods --selector \"app.kubernetes.io/name=traefik\" --output=name) --address 0.0.0.0 9000:9000\n```\n\n\n\n通过浏览器访问`http://<宿主机IP>:9000/dashboard/`即可进入traefik的dashboard\n\n![](./dashboard.png)\n\n\n\n<br>\n\n\n\n# 应用部署\n\n这里部署一个`whoami`的测试服务：\n\n```bash\nkubectl create deploy whoami --image containous/whoami\nkubectl expose deploy whoami --port 80\n```\n\n\n\n然后创建一个ingress暴露服务让外部访问：\n\n```yaml\n# whoami-ingress.yaml\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: whoami\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /\n        backend:\n          serviceName: whoami\n          servicePort: 80\n```\n\n\n\n使用下面的命令进行创建：\n\n```bash\nkubectl apply -f whoami-ingress.yaml\nkubectl get ingress\n```\n\n\n\n直接在浏览器，访问：`https://<宿主机IP>`即可：\n\n![](./whoami.png)\n\n","source":"_posts/使用k3d和traefik快速搭建开发环境.md","raw":"---\ntitle: 使用k3d和traefik快速搭建开发环境\ndate: 2021-03-28 15:04:38\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- 集群部署\ndescription: 使用k3s和treafik快速搭建一个k8s开发环境\ncover: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3084171116,3613775985&fm=26&gp=0.jpg\n---\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用k3d和traefik快速搭建开发环境\n\n更新于 2021-03-28\n\n{% endnote %}\n\n<br>\n\n\n\n# 介绍\n\n一套完成的k8s系统比较复杂，需要很多的资源，部署起来也需要较长的时间。如果是开发环境，对于集群要求快速停止和开启、可以有多个集群并行、使用最少的资源，k3d就可以满足。\n\n\n\nk3d是一个非常轻量的集群，可以快速构建用于开发的k8s集群，其具有一下的特点：\n\n- 集群默认使用sqlite而不是etcd存储数据；\n- 所有的组件都封装在一个二进制程序中；\n- 在docker内运行，快速启停；\n\n\n\n<br>\n\n\n\n# k3d启动集群\n\n\n\n## 安装k3d\n\n直接运行下面的命令安装k3s：\n\n```bash\ncurl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash\n```\n\n\n\n这个会在系统中安装`k3d`命令程序，使用下面的命令查看帮助信息：\n\n```bash\nk3d -h\n```\n\n\n\n\n\n## 启动集群\n\n使用下面的命令启动集群：\n\n```bash\nk3d cluster create devcluster \\\n--api-port 127.0.0.1:6443 \\\n-p 80:80@loadbalancer \\\n-p 443:443@loadbalancer \\\n--k3s-server-arg \"--no-deploy=traefik\"\n```\n\n\n\n> 默认的k3d绑定的是traefik1，这里使用其他控制器，所以默认不安装\n\n\n\n在某些云环境下，只能使用docker的host网络模式，那么创建集群则使用下面的命令：\n\n```bash\nk3d cluster create devcluster \\\n--network host \\\n--api-port 127.0.0.1:6443 \\\n-p 80:80@loadbalancer \\\n-p 443:443@loadbalancer \\\n--k3s-server-arg \"--no-deploy=traefik\" \\\n--no-hostip\n```\n\n\n\n> 指定network类型为host，并不将宿主机ip地址替换到程序中\n\n\n\n## 查看集群\n\n查看当前创建的集群直接使用下面的命令：\n\n```bash\nk3d cluster ls\n\nNAME         SERVERS   AGENTS   LOADBALANCER\ndevcluster   1/1       0/0      false\n```\n\n\n\n可以看到当前的集群已经创建好了\n\n\n\n## 设置kubectl\n\n首先设置yum源，安装kubectl：\n\n```bash\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\nyum install -y kubectl-1.17.3\n```\n\n\n\n然后获取集群`devcluster`的认证信息：\n\n```bash\nk3d kubeconfig get devcluster > /root/.kube/config\n```\n\n\n\n现在就可以使用kubectl来操作集群了：\n\n```bash\nkubectl get node \nNAME                      STATUS   ROLES    AGE   VERSION\nk3d-devcluster-server-0   Ready    master   26m   v1.19.3+k3s2\n\nkubectl get pod --all-namespaces \nNAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE\nkube-system   metrics-server-7b4f8b595-pghbq           1/1     Running   0          26m\nkube-system   local-path-provisioner-7ff9579c6-hmg6k   1/1     Running   0          26m\nkube-system   coredns-66c464876b-5lpn5                 1/1     Running   0          26m\n```\n\n\n\n<br>\n\n\n\n# 部署traefik 2\n\n## 安装helm3\n\n```bash\nwget https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz\ntar zxf helm-v3.2.1-linux-amd64.tar.gz\ncp linux-amd64/helm /usr/local/bin/\nhelm version\n\nversion.BuildInfo{Version:\"v3.2.1\", GitCommit:\"fe51cd1e31e6a202cba7dead9552a6d418ded79a\", GitTreeState:\"clean\", GoVersion:\"go1.13.10\"}\n```\n\n\n\n## 安装traefik 2\n\n```bash\nhelm repo add traefik https://containous.github.io/traefik-helm-chart\nhelm repo list\nhelm install traefik traefik/traefik\nkubectl get pod -n default\n\nNAME                       READY   STATUS    RESTARTS   AGE\nsvclb-traefik-ldtfr        2/2     Running   0          26s\ntraefik-5fc4947cf9-w695g   1/1     Running   0          26s\n```\n\n\n\n## 设置traefik的dashboard\n\n```bash\nkubectl port-forward $(kubectl get pods --selector \"app.kubernetes.io/name=traefik\" --output=name) --address 0.0.0.0 9000:9000\n```\n\n\n\n通过浏览器访问`http://<宿主机IP>:9000/dashboard/`即可进入traefik的dashboard\n\n![](./dashboard.png)\n\n\n\n<br>\n\n\n\n# 应用部署\n\n这里部署一个`whoami`的测试服务：\n\n```bash\nkubectl create deploy whoami --image containous/whoami\nkubectl expose deploy whoami --port 80\n```\n\n\n\n然后创建一个ingress暴露服务让外部访问：\n\n```yaml\n# whoami-ingress.yaml\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: whoami\n  annotations:\n    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /\n        backend:\n          serviceName: whoami\n          servicePort: 80\n```\n\n\n\n使用下面的命令进行创建：\n\n```bash\nkubectl apply -f whoami-ingress.yaml\nkubectl get ingress\n```\n\n\n\n直接在浏览器，访问：`https://<宿主机IP>`即可：\n\n![](./whoami.png)\n\n","slug":"使用k3d和traefik快速搭建开发环境","published":1,"updated":"2021-03-28T07:11:16.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5t000vp0klgsgnb03p","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用k3d和traefik快速搭建开发环境</p><p>更新于 2021-03-28</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>一套完成的k8s系统比较复杂，需要很多的资源，部署起来也需要较长的时间。如果是开发环境，对于集群要求快速停止和开启、可以有多个集群并行、使用最少的资源，k3d就可以满足。</p>\n<p>k3d是一个非常轻量的集群，可以快速构建用于开发的k8s集群，其具有一下的特点：</p>\n<ul>\n<li>集群默认使用sqlite而不是etcd存储数据；</li>\n<li>所有的组件都封装在一个二进制程序中；</li>\n<li>在docker内运行，快速启停；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"k3d启动集群\"><a href=\"#k3d启动集群\" class=\"headerlink\" title=\"k3d启动集群\"></a>k3d启动集群</h1><h2 id=\"安装k3d\"><a href=\"#安装k3d\" class=\"headerlink\" title=\"安装k3d\"></a>安装k3d</h2><p>直接运行下面的命令安装k3s：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个会在系统中安装<code>k3d</code>命令程序，使用下面的命令查看帮助信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d -h</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><p>使用下面的命令启动集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster create devcluster \\</span><br><span class=\"line\">--api-port 127.0.0.1:6443 \\</span><br><span class=\"line\">-p 80:80@loadbalancer \\</span><br><span class=\"line\">-p 443:443@loadbalancer \\</span><br><span class=\"line\">--k3s-server-arg <span class=\"string\">&quot;--no-deploy=traefik&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>默认的k3d绑定的是traefik1，这里使用其他控制器，所以默认不安装</p>\n</blockquote>\n<p>在某些云环境下，只能使用docker的host网络模式，那么创建集群则使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster create devcluster \\</span><br><span class=\"line\">--network host \\</span><br><span class=\"line\">--api-port 127.0.0.1:6443 \\</span><br><span class=\"line\">-p 80:80@loadbalancer \\</span><br><span class=\"line\">-p 443:443@loadbalancer \\</span><br><span class=\"line\">--k3s-server-arg <span class=\"string\">&quot;--no-deploy=traefik&quot;</span> \\</span><br><span class=\"line\">--no-hostip</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>指定network类型为host，并不将宿主机ip地址替换到程序中</p>\n</blockquote>\n<h2 id=\"查看集群\"><a href=\"#查看集群\" class=\"headerlink\" title=\"查看集群\"></a>查看集群</h2><p>查看当前创建的集群直接使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster ls</span><br><span class=\"line\"></span><br><span class=\"line\">NAME         SERVERS   AGENTS   LOADBALANCER</span><br><span class=\"line\">devcluster   1/1       0/0      <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到当前的集群已经创建好了</p>\n<h2 id=\"设置kubectl\"><a href=\"#设置kubectl\" class=\"headerlink\" title=\"设置kubectl\"></a>设置kubectl</h2><p>首先设置yum源，安装kubectl：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y kubectl-1.17.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后获取集群<code>devcluster</code>的认证信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d kubeconfig get devcluster &gt; /root/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在就可以使用kubectl来操作集群了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node </span><br><span class=\"line\">NAME                      STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">k3d-devcluster-server-0   Ready    master   26m   v1.19.3+k3s2</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod --all-namespaces </span><br><span class=\"line\">NAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   metrics-server-7b4f8b595-pghbq           1/1     Running   0          26m</span><br><span class=\"line\">kube-system   local-path-provisioner-7ff9579c6-hmg6k   1/1     Running   0          26m</span><br><span class=\"line\">kube-system   coredns-66c464876b-5lpn5                 1/1     Running   0          26m</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署traefik-2\"><a href=\"#部署traefik-2\" class=\"headerlink\" title=\"部署traefik 2\"></a>部署traefik 2</h1><h2 id=\"安装helm3\"><a href=\"#安装helm3\" class=\"headerlink\" title=\"安装helm3\"></a>安装helm3</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz</span><br><span class=\"line\">tar zxf helm-v3.2.1-linux-amd64.tar.gz</span><br><span class=\"line\">cp linux-amd64/helm /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">helm version</span><br><span class=\"line\"></span><br><span class=\"line\">version.BuildInfo&#123;Version:<span class=\"string\">&quot;v3.2.1&quot;</span>, GitCommit:<span class=\"string\">&quot;fe51cd1e31e6a202cba7dead9552a6d418ded79a&quot;</span>, GitTreeState:<span class=\"string\">&quot;clean&quot;</span>, GoVersion:<span class=\"string\">&quot;go1.13.10&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装traefik-2\"><a href=\"#安装traefik-2\" class=\"headerlink\" title=\"安装traefik 2\"></a>安装traefik 2</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add traefik https://containous.github.io/traefik-helm-chart</span><br><span class=\"line\">helm repo list</span><br><span class=\"line\">helm install traefik traefik/traefik</span><br><span class=\"line\">kubectl get pod -n default</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">svclb-traefik-ldtfr        2/2     Running   0          26s</span><br><span class=\"line\">traefik-5fc4947cf9-w695g   1/1     Running   0          26s</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置traefik的dashboard\"><a href=\"#设置traefik的dashboard\" class=\"headerlink\" title=\"设置traefik的dashboard\"></a>设置traefik的dashboard</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl port-forward $(kubectl get pods --selector <span class=\"string\">&quot;app.kubernetes.io/name=traefik&quot;</span> --output=name) --address 0.0.0.0 9000:9000</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问<code>http://&lt;宿主机IP&gt;:9000/dashboard/</code>即可进入traefik的dashboard</p>\n<p><img src= \"/img/loading.gif\" data-src=\"./dashboard.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"应用部署\"><a href=\"#应用部署\" class=\"headerlink\" title=\"应用部署\"></a>应用部署</h1><p>这里部署一个<code>whoami</code>的测试服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deploy whoami --image containous/whoami</span><br><span class=\"line\">kubectl expose deploy whoami --port 80</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建一个ingress暴露服务让外部访问：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># whoami-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">whoami</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class=\"string\">web,websecure</span></span><br><span class=\"line\">    <span class=\"attr\">traefik.ingress.kubernetes.io/router.tls:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">whoami</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f whoami-ingress.yaml</span><br><span class=\"line\">kubectl get ingress</span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接在浏览器，访问：<code>https://&lt;宿主机IP&gt;</code>即可：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"./whoami.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用k3d和traefik快速搭建开发环境</p><p>更新于 2021-03-28</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>一套完成的k8s系统比较复杂，需要很多的资源，部署起来也需要较长的时间。如果是开发环境，对于集群要求快速停止和开启、可以有多个集群并行、使用最少的资源，k3d就可以满足。</p>\n<p>k3d是一个非常轻量的集群，可以快速构建用于开发的k8s集群，其具有一下的特点：</p>\n<ul>\n<li>集群默认使用sqlite而不是etcd存储数据；</li>\n<li>所有的组件都封装在一个二进制程序中；</li>\n<li>在docker内运行，快速启停；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"k3d启动集群\"><a href=\"#k3d启动集群\" class=\"headerlink\" title=\"k3d启动集群\"></a>k3d启动集群</h1><h2 id=\"安装k3d\"><a href=\"#安装k3d\" class=\"headerlink\" title=\"安装k3d\"></a>安装k3d</h2><p>直接运行下面的命令安装k3s：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个会在系统中安装<code>k3d</code>命令程序，使用下面的命令查看帮助信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d -h</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><p>使用下面的命令启动集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster create devcluster \\</span><br><span class=\"line\">--api-port 127.0.0.1:6443 \\</span><br><span class=\"line\">-p 80:80@loadbalancer \\</span><br><span class=\"line\">-p 443:443@loadbalancer \\</span><br><span class=\"line\">--k3s-server-arg <span class=\"string\">&quot;--no-deploy=traefik&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>默认的k3d绑定的是traefik1，这里使用其他控制器，所以默认不安装</p>\n</blockquote>\n<p>在某些云环境下，只能使用docker的host网络模式，那么创建集群则使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster create devcluster \\</span><br><span class=\"line\">--network host \\</span><br><span class=\"line\">--api-port 127.0.0.1:6443 \\</span><br><span class=\"line\">-p 80:80@loadbalancer \\</span><br><span class=\"line\">-p 443:443@loadbalancer \\</span><br><span class=\"line\">--k3s-server-arg <span class=\"string\">&quot;--no-deploy=traefik&quot;</span> \\</span><br><span class=\"line\">--no-hostip</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>指定network类型为host，并不将宿主机ip地址替换到程序中</p>\n</blockquote>\n<h2 id=\"查看集群\"><a href=\"#查看集群\" class=\"headerlink\" title=\"查看集群\"></a>查看集群</h2><p>查看当前创建的集群直接使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d cluster ls</span><br><span class=\"line\"></span><br><span class=\"line\">NAME         SERVERS   AGENTS   LOADBALANCER</span><br><span class=\"line\">devcluster   1/1       0/0      <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到当前的集群已经创建好了</p>\n<h2 id=\"设置kubectl\"><a href=\"#设置kubectl\" class=\"headerlink\" title=\"设置kubectl\"></a>设置kubectl</h2><p>首先设置yum源，安装kubectl：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y kubectl-1.17.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后获取集群<code>devcluster</code>的认证信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k3d kubeconfig get devcluster &gt; /root/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在就可以使用kubectl来操作集群了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node </span><br><span class=\"line\">NAME                      STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">k3d-devcluster-server-0   Ready    master   26m   v1.19.3+k3s2</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get pod --all-namespaces </span><br><span class=\"line\">NAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system   metrics-server-7b4f8b595-pghbq           1/1     Running   0          26m</span><br><span class=\"line\">kube-system   local-path-provisioner-7ff9579c6-hmg6k   1/1     Running   0          26m</span><br><span class=\"line\">kube-system   coredns-66c464876b-5lpn5                 1/1     Running   0          26m</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署traefik-2\"><a href=\"#部署traefik-2\" class=\"headerlink\" title=\"部署traefik 2\"></a>部署traefik 2</h1><h2 id=\"安装helm3\"><a href=\"#安装helm3\" class=\"headerlink\" title=\"安装helm3\"></a>安装helm3</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz</span><br><span class=\"line\">tar zxf helm-v3.2.1-linux-amd64.tar.gz</span><br><span class=\"line\">cp linux-amd64/helm /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">helm version</span><br><span class=\"line\"></span><br><span class=\"line\">version.BuildInfo&#123;Version:<span class=\"string\">&quot;v3.2.1&quot;</span>, GitCommit:<span class=\"string\">&quot;fe51cd1e31e6a202cba7dead9552a6d418ded79a&quot;</span>, GitTreeState:<span class=\"string\">&quot;clean&quot;</span>, GoVersion:<span class=\"string\">&quot;go1.13.10&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装traefik-2\"><a href=\"#安装traefik-2\" class=\"headerlink\" title=\"安装traefik 2\"></a>安装traefik 2</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm repo add traefik https://containous.github.io/traefik-helm-chart</span><br><span class=\"line\">helm repo list</span><br><span class=\"line\">helm install traefik traefik/traefik</span><br><span class=\"line\">kubectl get pod -n default</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">svclb-traefik-ldtfr        2/2     Running   0          26s</span><br><span class=\"line\">traefik-5fc4947cf9-w695g   1/1     Running   0          26s</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置traefik的dashboard\"><a href=\"#设置traefik的dashboard\" class=\"headerlink\" title=\"设置traefik的dashboard\"></a>设置traefik的dashboard</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl port-forward $(kubectl get pods --selector <span class=\"string\">&quot;app.kubernetes.io/name=traefik&quot;</span> --output=name) --address 0.0.0.0 9000:9000</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问<code>http://&lt;宿主机IP&gt;:9000/dashboard/</code>即可进入traefik的dashboard</p>\n<p><img src=\"./dashboard.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"应用部署\"><a href=\"#应用部署\" class=\"headerlink\" title=\"应用部署\"></a>应用部署</h1><p>这里部署一个<code>whoami</code>的测试服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deploy whoami --image containous/whoami</span><br><span class=\"line\">kubectl expose deploy whoami --port 80</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建一个ingress暴露服务让外部访问：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># whoami-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">whoami</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class=\"string\">web,websecure</span></span><br><span class=\"line\">    <span class=\"attr\">traefik.ingress.kubernetes.io/router.tls:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">        <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">whoami</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f whoami-ingress.yaml</span><br><span class=\"line\">kubectl get ingress</span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接在浏览器，访问：<code>https://&lt;宿主机IP&gt;</code>即可：</p>\n<p><img src=\"./whoami.png\" alt=\"\"></p>\n"},{"title":"升级集群到1.18","date":"2021-04-13T00:49:28.000Z","description":"通过kubeadm升级集群到1.18版本","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-63997184325ff1f331454c8d9ae0a495_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620867442&t=ae4310844b4d591ea758de96756b9461","_content":"\n{% note info 'fas fa-bullhorn' %}\n\n在之前的文章 {% post_link kubeadm部署k8s-1-18集群 kubeadm部署1.17集群 %} 中部署了一个1.17版本的集群，这次对这个集群进行升级。\n\n更新于 2021-04-13\n\n{% endnote %}\n\n<br>\n\n\n\n## 检查 kubeadm 可用版本\n\n```bash\nyum list kubeadm --showduplicates\n```\n\n<img src=\"./newversion.png\" style=\"zoom:50%;\" />\n\n\n\n>  这里我们当前的版本为1.17，下面升级到1.18.0。\n\n<br>\n\n\n\n## 升级 kubeadm\n\n建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。\n\n```bash\nyum install -y kubeadm-1.18.0-0\nkubeadm version\n```\n\n![](./update-kubeadm.png)\n\n<br>\n\n\n\n## 隔离 master1\n\n先将master1隔离，使用`drain`命令可以优雅地结束节点的pod并将节点设置为不可调度：\n\n```bash\nkubectl drain sca-lum700007 --ignore-daemonsets\n```\n\n<img src=\"./drain.png\" style=\"zoom:50%;\" />\n\n> 看到第一个master已经处于不可调度的状态了。\n\n<br>\n\n\n\n## 升级 kubernetes\n\n```bash\nkubeadm upgrade apply v1.18.0\n```\n\n当出现下面的输出内容时，表示命令执行成功了。\n\n![](./update.png)\n\n<br>\n\n\n\n## 取消隔离master1\n\n```bash\nkubectl uncordon sca-lum700007\n```\n\n<br>\n\n\n\n## 升级 kubectl 和 kubelet\n\n```bash\nyum install -y kubelet-1.18.0-0 kubectl-1.18.0-0\n```\n\n<br>\n\n\n\n## 重启kubelet\n\n```bash\nsystemctl daemon-reload\nsystemctl restart kubelet\n```\n\n<br>\n\n\n\n## 确认节点升级成功\n\n```bash\nkubectl get node\n```\n\n<img src=\"./carbon.png\" style=\"zoom:50%;\" />\n\n\n\n**可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级**\n\n<br>\n\n\n\n## 升级node节点\n\nnode节点的升级最好也是一个一个来，首先将node节点驱逐：\n\n```bash\nkubectl drain sca-lum700013 --ignore-daemonsets\n```\n\n\n\n然后在节点上执行下面的命令，升级kubernetes：\n\n```bash\nkubeadm upgrade node\n```\n\n![](./update-node.png)\n\n\n\n在master上取消禁止调度：\n\n```bash\nkubectl uncordon sca-lum00013\n```\n\n\n\n升级worker节点上的kubelet：\n\n```bash\nyum install -y kubelet-1.18.0-0\nsystemctl daemon-reload\nsystemctl restart kubelet\n```\n\n\n\n<br>\n\n## 注意事项\n\n\n\n需要注意的是：\n\n- 跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；\n- 升级的时候先从master开始，再升级worker；\n- 升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；\n\n\n\n最后，所有的节点都升级完毕：\n\n<img src=\"./update-res.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/升级集群到1-18.md","raw":"---\ntitle: 升级集群到1.18\ndate: 2021-04-13 08:49:28\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- 集群部署\ndescription: 通过kubeadm升级集群到1.18版本\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-63997184325ff1f331454c8d9ae0a495_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620867442&t=ae4310844b4d591ea758de96756b9461\n---\n\n{% note info 'fas fa-bullhorn' %}\n\n在之前的文章 {% post_link kubeadm部署k8s-1-18集群 kubeadm部署1.17集群 %} 中部署了一个1.17版本的集群，这次对这个集群进行升级。\n\n更新于 2021-04-13\n\n{% endnote %}\n\n<br>\n\n\n\n## 检查 kubeadm 可用版本\n\n```bash\nyum list kubeadm --showduplicates\n```\n\n<img src=\"./newversion.png\" style=\"zoom:50%;\" />\n\n\n\n>  这里我们当前的版本为1.17，下面升级到1.18.0。\n\n<br>\n\n\n\n## 升级 kubeadm\n\n建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。\n\n```bash\nyum install -y kubeadm-1.18.0-0\nkubeadm version\n```\n\n![](./update-kubeadm.png)\n\n<br>\n\n\n\n## 隔离 master1\n\n先将master1隔离，使用`drain`命令可以优雅地结束节点的pod并将节点设置为不可调度：\n\n```bash\nkubectl drain sca-lum700007 --ignore-daemonsets\n```\n\n<img src=\"./drain.png\" style=\"zoom:50%;\" />\n\n> 看到第一个master已经处于不可调度的状态了。\n\n<br>\n\n\n\n## 升级 kubernetes\n\n```bash\nkubeadm upgrade apply v1.18.0\n```\n\n当出现下面的输出内容时，表示命令执行成功了。\n\n![](./update.png)\n\n<br>\n\n\n\n## 取消隔离master1\n\n```bash\nkubectl uncordon sca-lum700007\n```\n\n<br>\n\n\n\n## 升级 kubectl 和 kubelet\n\n```bash\nyum install -y kubelet-1.18.0-0 kubectl-1.18.0-0\n```\n\n<br>\n\n\n\n## 重启kubelet\n\n```bash\nsystemctl daemon-reload\nsystemctl restart kubelet\n```\n\n<br>\n\n\n\n## 确认节点升级成功\n\n```bash\nkubectl get node\n```\n\n<img src=\"./carbon.png\" style=\"zoom:50%;\" />\n\n\n\n**可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级**\n\n<br>\n\n\n\n## 升级node节点\n\nnode节点的升级最好也是一个一个来，首先将node节点驱逐：\n\n```bash\nkubectl drain sca-lum700013 --ignore-daemonsets\n```\n\n\n\n然后在节点上执行下面的命令，升级kubernetes：\n\n```bash\nkubeadm upgrade node\n```\n\n![](./update-node.png)\n\n\n\n在master上取消禁止调度：\n\n```bash\nkubectl uncordon sca-lum00013\n```\n\n\n\n升级worker节点上的kubelet：\n\n```bash\nyum install -y kubelet-1.18.0-0\nsystemctl daemon-reload\nsystemctl restart kubelet\n```\n\n\n\n<br>\n\n## 注意事项\n\n\n\n需要注意的是：\n\n- 跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；\n- 升级的时候先从master开始，再升级worker；\n- 升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；\n\n\n\n最后，所有的节点都升级完毕：\n\n<img src=\"./update-res.png\" style=\"zoom:50%;\" />\n\n","slug":"升级集群到1-18","published":1,"updated":"2021-04-13T00:59:50.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5u000xp0kleb2x269k","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>在之前的文章 <a href=\"/2021/03/28/kubeadm%E9%83%A8%E7%BD%B2k8s-1-18%E9%9B%86%E7%BE%A4/\" title=\"kubeadm部署1.17集群\">kubeadm部署1.17集群</a> 中部署了一个1.17版本的集群，这次对这个集群进行升级。</p><p>更新于 2021-04-13</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"检查-kubeadm-可用版本\"><a href=\"#检查-kubeadm-可用版本\" class=\"headerlink\" title=\"检查 kubeadm 可用版本\"></a>检查 kubeadm 可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list kubeadm --showduplicates</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./newversion.png\" style=\"zoom:50%;\" />\n\n\n\n<blockquote>\n<p> 这里我们当前的版本为1.17，下面升级到1.18.0。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"升级-kubeadm\"><a href=\"#升级-kubeadm\" class=\"headerlink\" title=\"升级 kubeadm\"></a>升级 kubeadm</h2><p>建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubeadm-1.18.0-0</span><br><span class=\"line\">kubeadm version</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./update-kubeadm.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"隔离-master1\"><a href=\"#隔离-master1\" class=\"headerlink\" title=\"隔离 master1\"></a>隔离 master1</h2><p>先将master1隔离，使用<code>drain</code>命令可以优雅地结束节点的pod并将节点设置为不可调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl drain sca-lum700007 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./drain.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>看到第一个master已经处于不可调度的状态了。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"升级-kubernetes\"><a href=\"#升级-kubernetes\" class=\"headerlink\" title=\"升级 kubernetes\"></a>升级 kubernetes</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm upgrade apply v1.18.0</span><br></pre></td></tr></table></figure>\n\n<p>当出现下面的输出内容时，表示命令执行成功了。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"./update.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"取消隔离master1\"><a href=\"#取消隔离master1\" class=\"headerlink\" title=\"取消隔离master1\"></a>取消隔离master1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl uncordon sca-lum700007</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"升级-kubectl-和-kubelet\"><a href=\"#升级-kubectl-和-kubelet\" class=\"headerlink\" title=\"升级 kubectl 和 kubelet\"></a>升级 kubectl 和 kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet-1.18.0-0 kubectl-1.18.0-0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"重启kubelet\"><a href=\"#重启kubelet\" class=\"headerlink\" title=\"重启kubelet\"></a>重启kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"确认节点升级成功\"><a href=\"#确认节点升级成功\" class=\"headerlink\" title=\"确认节点升级成功\"></a>确认节点升级成功</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./carbon.png\" style=\"zoom:50%;\" />\n\n\n\n<p><strong>可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级</strong></p>\n<br>\n\n\n\n<h2 id=\"升级node节点\"><a href=\"#升级node节点\" class=\"headerlink\" title=\"升级node节点\"></a>升级node节点</h2><p>node节点的升级最好也是一个一个来，首先将node节点驱逐：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl drain sca-lum700013 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在节点上执行下面的命令，升级kubernetes：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm upgrade node</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./update-node.png\" alt=\"\"></p>\n<p>在master上取消禁止调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl uncordon sca-lum00013</span><br></pre></td></tr></table></figure>\n\n\n\n<p>升级worker节点上的kubelet：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet-1.18.0-0</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>需要注意的是：</p>\n<ul>\n<li>跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；</li>\n<li>升级的时候先从master开始，再升级worker；</li>\n<li>升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；</li>\n</ul>\n<p>最后，所有的节点都升级完毕：</p>\n<img src= \"/img/loading.gif\" data-src=\"./update-res.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>在之前的文章 <a href=\"/2021/03/28/kubeadm%E9%83%A8%E7%BD%B2k8s-1-18%E9%9B%86%E7%BE%A4/\" title=\"kubeadm部署1.17集群\">kubeadm部署1.17集群</a> 中部署了一个1.17版本的集群，这次对这个集群进行升级。</p><p>更新于 2021-04-13</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"检查-kubeadm-可用版本\"><a href=\"#检查-kubeadm-可用版本\" class=\"headerlink\" title=\"检查 kubeadm 可用版本\"></a>检查 kubeadm 可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list kubeadm --showduplicates</span><br></pre></td></tr></table></figure>\n\n<img src=\"./newversion.png\" style=\"zoom:50%;\" />\n\n\n\n<blockquote>\n<p> 这里我们当前的版本为1.17，下面升级到1.18.0。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"升级-kubeadm\"><a href=\"#升级-kubeadm\" class=\"headerlink\" title=\"升级 kubeadm\"></a>升级 kubeadm</h2><p>建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubeadm-1.18.0-0</span><br><span class=\"line\">kubeadm version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./update-kubeadm.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"隔离-master1\"><a href=\"#隔离-master1\" class=\"headerlink\" title=\"隔离 master1\"></a>隔离 master1</h2><p>先将master1隔离，使用<code>drain</code>命令可以优雅地结束节点的pod并将节点设置为不可调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl drain sca-lum700007 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n<img src=\"./drain.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>看到第一个master已经处于不可调度的状态了。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"升级-kubernetes\"><a href=\"#升级-kubernetes\" class=\"headerlink\" title=\"升级 kubernetes\"></a>升级 kubernetes</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm upgrade apply v1.18.0</span><br></pre></td></tr></table></figure>\n\n<p>当出现下面的输出内容时，表示命令执行成功了。</p>\n<p><img src=\"./update.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"取消隔离master1\"><a href=\"#取消隔离master1\" class=\"headerlink\" title=\"取消隔离master1\"></a>取消隔离master1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl uncordon sca-lum700007</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"升级-kubectl-和-kubelet\"><a href=\"#升级-kubectl-和-kubelet\" class=\"headerlink\" title=\"升级 kubectl 和 kubelet\"></a>升级 kubectl 和 kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet-1.18.0-0 kubectl-1.18.0-0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"重启kubelet\"><a href=\"#重启kubelet\" class=\"headerlink\" title=\"重启kubelet\"></a>重启kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"确认节点升级成功\"><a href=\"#确认节点升级成功\" class=\"headerlink\" title=\"确认节点升级成功\"></a>确认节点升级成功</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src=\"./carbon.png\" style=\"zoom:50%;\" />\n\n\n\n<p><strong>可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级</strong></p>\n<br>\n\n\n\n<h2 id=\"升级node节点\"><a href=\"#升级node节点\" class=\"headerlink\" title=\"升级node节点\"></a>升级node节点</h2><p>node节点的升级最好也是一个一个来，首先将node节点驱逐：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl drain sca-lum700013 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在节点上执行下面的命令，升级kubernetes：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm upgrade node</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./update-node.png\" alt=\"\"></p>\n<p>在master上取消禁止调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl uncordon sca-lum00013</span><br></pre></td></tr></table></figure>\n\n\n\n<p>升级worker节点上的kubelet：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet-1.18.0-0</span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>需要注意的是：</p>\n<ul>\n<li>跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；</li>\n<li>升级的时候先从master开始，再升级worker；</li>\n<li>升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；</li>\n</ul>\n<p>最后，所有的节点都升级完毕：</p>\n<img src=\"./update-res.png\" style=\"zoom:50%;\" />\n\n"},{"title":"在k8s中使用nfs存储","date":"2021-03-23T13:16:14.000Z","description":"在k8s中使用nfs作为底层存储的三种姿势","cover":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=251466455,608736426&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用nfs作为存储，实现PV、PVC和storageclass\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 安装NFS\n\n直接使用yum命令安装nfs：\n\n```bash\nyum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs目录：\n\n```bash\nmkdir -p /opt/nfs/data\necho \"/opt/nfs/data *(rw,no_root_squash)\" >> /etc/exports\n```\n\n> 生产上应该给该目录挂载一个数据盘\n\n\n\n启动nfs：\n\n```bash\nsystemctl start rpcbind\nsystemctl status rpcbind\nsystemctl enable rpcbind\nsystemctl start nfs \nsystemctl status nfs\nsystemctl enable nfs\n```\n\n\n\n在k8s的node和master节点上，都安装`nfs-utils`：\n\n```bash\nyum install -y nfs-utils\n```\n\n\n\n<br>\n\n\n\n# nfs类型的volume\n\n这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        nfs:\n          server: 10.8.138.8\n          path: /opt/nfs/data\n```\n\n\n\n然后直接apply即可创建一个使用nfs类型volume的pod：\n\n```bash\nkubectl apply -f pod-nfs-volume.yaml\n```\n\n<img src=\"./pod-nfs.png\" style=\"zoom:70%;\" />\n\n\n\n然后可以将这个pod作为service暴露出来：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-nfs-svc\n  labels:\n    app: nginx-nfs-svc\nspec:\n  ports:\n  - port: 80\n    targetPort: 80\n  selector:\n    app: nginx-nfs\n```\n\n\n\n```bash\nkubectl apply -f pod-nfs-svc.yaml\n```\n\n<img src=\"./pod-nfs-svc.png\" style=\"zoom:70%;\" />\n\n\n\n验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：\n\n<img src=\"./pod-nfs-test.png\" style=\"zoom:70%;\" />\n\n<br>\n\n\n\n\n\n# nfs类型的pv和pvc\n\n## 创建PV\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfs-pv\nspec:\n  capacity:\n    storage: 500Mi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  nfs:\n    path: /opt/nfs/data\n    server: 10.8.138.8\n```\n\n\n\n这里就创建了一个名为`nfs-pv`的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。\n\n- `accessModes`：pv访问模式，支持如下几个：\n  - `ReadWriteOnce`：读写挂载在一个节点上；\n  - `ReadOnlyMany`：只读挂载多个节点上；\n  - `ReadWriteMany`：读写挂载在多个节点上；\n- `persistentVolumeReclaimPolicy`：回收策略，支持以下几个：\n  - `Retain`：不作任何操作，需要手动删除（默认）\n  - `Recycle`：没有pvc使用时清空数据让其他pvc使用；\n  - `Delete`：删除；\n\n\n\n<img src=\"./pv.png\" style=\"zoom:50%;\" />\n\n\n\n> 可以看到pv目前是可用状态。\n\n\n\n\n\n## 创建PV\n\npod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc01\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 500Mi\n```\n\n> 这里就创建了一个大小为500Mi，名字为`pvc01`的pvc请求。\n\n\n\npvc是自动绑定pv的，有如下两个原则：\n\n- 根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；\n- 根据访问模式匹配，绑定pv和pvc访问模式一致的；\n\n\n\n<img src=\"./pvc.png\" style=\"zoom:50%;\" />\n\n> 可以看到pvc和pv都是绑定状态了。\n\n\n\n## 使用pvc\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        persistentVolumeClaim:\n          claimName: pvc01\n```\n\n\n\n 使用pvc的时候，只需要在`volumes`定义的时候制定pvc名称即可。\n\n\n\n<img src=\"./pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# nfs类型的storageclass\n\n**nfs默认不支持storageclass，需要安装额外的插件**\n\n\n\n## 安装nfs-client插件\n\n{% tabs comments %}\n\n<!-- tab helm方式部署 -->\n\n```bash\nhelm install nfs-storageclass --set nfs.server=10.8.138.8 --set nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner\n```\n\n\n\n![](./nfs-client.png)\n\n> 可以看到nfs-client服务已经创建，storageclass也已经创建了。\n\n<!-- endtab -->\n\n<!-- tab yaml方式部署 -->\n\n使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：\n\n```yaml\n# nfs-cluster-role.yaml\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: nfs-client-provisioner-runner\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumes\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumeclaims\"]\n    verbs: [\"get\", \"list\", \"watch\", \"update\"]\n  - apiGroups: [\"storage.k8s.io\"]\n    resources: [\"storageclasses\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"events\"]\n    verbs: [\"create\", \"update\", \"patch\"]\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: run-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: nfs-client-provisioner-runner \n  apiGroup: rbac.authorization.k8s.io \n\n---\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\n  namespace: kube-system\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: Role \n  name: leader-locking-nfs-client-provisioner\n  apiGroup: rbac.authorization.k8s.io\n```\n\n```yaml\n# nfs-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nfs-client-provisioner\n  namespace: kube-system\n  labels:\n    app: nfs-client-provisioner\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: nfs-client-provisioner\n  template:\n    metadata:\n      annotations:\n      labels:\n        app: nfs-client-provisioner\n    spec:\n      serviceAccountName: nfs-client-provisioner\n      containers:\n        - name: nfs-client-provisioner\n          image: \"quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11\"\n          imagePullPolicy: IfNotPresent\n          volumeMounts:\n            - name: nfs-client-root\n              mountPath: /persistentvolumes\n          env:\n            - name: PROVISIONER_NAME\n              value: cluster.local/nfs-client-provisioner\n            - name: NFS_SERVER\n              value: 10.8.138.8\n            - name: NFS_PATH\n              value: /data/nfs-data\n      volumes:\n        - name: nfs-client-root\n          nfs:\n            server: 10.8.138.8 \n            path: /data/nfs-data\n```\n\n```yaml\n# nfs-service.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: nfs-client-provisioner \n  name: nfs-client-provisioner \n  namespace: kube-system\n```\n\n\n\n直接运行这三个文件即可：\n\n```bash\nkubectl apply -f nfs-cluster-role.yaml\nkubectl apply -f nfs-deployment.yaml\nkubectl apply -f nfs-service.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 创建storageclass\n\n使用类似下面的yaml文件可以创建其他的storageclass：\n\n```yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: es-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n## pvc使用storageclass\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: testclaim\nspec:\n  storageClassName: \"nfs-client\"\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 100Mi\n```\n\n\n\n这里创建一个名为`testclaim`的100Mi的pvc，使用`nfs-client`这个storageclass。\n\n\n\n![](./storageclass-pvc.png)\n\n\n\n\n\n\n\n","source":"_posts/在k8s中使用nfs存储.md","raw":"---\ntitle: 在k8s中使用nfs存储\ndate: 2021-03-23 21:16:14\ntags:\n- NFS\ncategories:\n- Kubernetes\n- 存储\n- NFS\ndescription: 在k8s中使用nfs作为底层存储的三种姿势\ncover: https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=251466455,608736426&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用nfs作为存储，实现PV、PVC和storageclass\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 安装NFS\n\n直接使用yum命令安装nfs：\n\n```bash\nyum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs目录：\n\n```bash\nmkdir -p /opt/nfs/data\necho \"/opt/nfs/data *(rw,no_root_squash)\" >> /etc/exports\n```\n\n> 生产上应该给该目录挂载一个数据盘\n\n\n\n启动nfs：\n\n```bash\nsystemctl start rpcbind\nsystemctl status rpcbind\nsystemctl enable rpcbind\nsystemctl start nfs \nsystemctl status nfs\nsystemctl enable nfs\n```\n\n\n\n在k8s的node和master节点上，都安装`nfs-utils`：\n\n```bash\nyum install -y nfs-utils\n```\n\n\n\n<br>\n\n\n\n# nfs类型的volume\n\n这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        nfs:\n          server: 10.8.138.8\n          path: /opt/nfs/data\n```\n\n\n\n然后直接apply即可创建一个使用nfs类型volume的pod：\n\n```bash\nkubectl apply -f pod-nfs-volume.yaml\n```\n\n<img src=\"./pod-nfs.png\" style=\"zoom:70%;\" />\n\n\n\n然后可以将这个pod作为service暴露出来：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-nfs-svc\n  labels:\n    app: nginx-nfs-svc\nspec:\n  ports:\n  - port: 80\n    targetPort: 80\n  selector:\n    app: nginx-nfs\n```\n\n\n\n```bash\nkubectl apply -f pod-nfs-svc.yaml\n```\n\n<img src=\"./pod-nfs-svc.png\" style=\"zoom:70%;\" />\n\n\n\n验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：\n\n<img src=\"./pod-nfs-test.png\" style=\"zoom:70%;\" />\n\n<br>\n\n\n\n\n\n# nfs类型的pv和pvc\n\n## 创建PV\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfs-pv\nspec:\n  capacity:\n    storage: 500Mi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  nfs:\n    path: /opt/nfs/data\n    server: 10.8.138.8\n```\n\n\n\n这里就创建了一个名为`nfs-pv`的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。\n\n- `accessModes`：pv访问模式，支持如下几个：\n  - `ReadWriteOnce`：读写挂载在一个节点上；\n  - `ReadOnlyMany`：只读挂载多个节点上；\n  - `ReadWriteMany`：读写挂载在多个节点上；\n- `persistentVolumeReclaimPolicy`：回收策略，支持以下几个：\n  - `Retain`：不作任何操作，需要手动删除（默认）\n  - `Recycle`：没有pvc使用时清空数据让其他pvc使用；\n  - `Delete`：删除；\n\n\n\n<img src=\"./pv.png\" style=\"zoom:50%;\" />\n\n\n\n> 可以看到pv目前是可用状态。\n\n\n\n\n\n## 创建PV\n\npod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc01\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 500Mi\n```\n\n> 这里就创建了一个大小为500Mi，名字为`pvc01`的pvc请求。\n\n\n\npvc是自动绑定pv的，有如下两个原则：\n\n- 根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；\n- 根据访问模式匹配，绑定pv和pvc访问模式一致的；\n\n\n\n<img src=\"./pvc.png\" style=\"zoom:50%;\" />\n\n> 可以看到pvc和pv都是绑定状态了。\n\n\n\n## 使用pvc\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        persistentVolumeClaim:\n          claimName: pvc01\n```\n\n\n\n 使用pvc的时候，只需要在`volumes`定义的时候制定pvc名称即可。\n\n\n\n<img src=\"./pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# nfs类型的storageclass\n\n**nfs默认不支持storageclass，需要安装额外的插件**\n\n\n\n## 安装nfs-client插件\n\n{% tabs comments %}\n\n<!-- tab helm方式部署 -->\n\n```bash\nhelm install nfs-storageclass --set nfs.server=10.8.138.8 --set nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner\n```\n\n\n\n![](./nfs-client.png)\n\n> 可以看到nfs-client服务已经创建，storageclass也已经创建了。\n\n<!-- endtab -->\n\n<!-- tab yaml方式部署 -->\n\n使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：\n\n```yaml\n# nfs-cluster-role.yaml\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: nfs-client-provisioner-runner\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumes\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumeclaims\"]\n    verbs: [\"get\", \"list\", \"watch\", \"update\"]\n  - apiGroups: [\"storage.k8s.io\"]\n    resources: [\"storageclasses\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"events\"]\n    verbs: [\"create\", \"update\", \"patch\"]\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: run-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: nfs-client-provisioner-runner \n  apiGroup: rbac.authorization.k8s.io \n\n---\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\n  namespace: kube-system\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: Role \n  name: leader-locking-nfs-client-provisioner\n  apiGroup: rbac.authorization.k8s.io\n```\n\n```yaml\n# nfs-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nfs-client-provisioner\n  namespace: kube-system\n  labels:\n    app: nfs-client-provisioner\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: nfs-client-provisioner\n  template:\n    metadata:\n      annotations:\n      labels:\n        app: nfs-client-provisioner\n    spec:\n      serviceAccountName: nfs-client-provisioner\n      containers:\n        - name: nfs-client-provisioner\n          image: \"quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11\"\n          imagePullPolicy: IfNotPresent\n          volumeMounts:\n            - name: nfs-client-root\n              mountPath: /persistentvolumes\n          env:\n            - name: PROVISIONER_NAME\n              value: cluster.local/nfs-client-provisioner\n            - name: NFS_SERVER\n              value: 10.8.138.8\n            - name: NFS_PATH\n              value: /data/nfs-data\n      volumes:\n        - name: nfs-client-root\n          nfs:\n            server: 10.8.138.8 \n            path: /data/nfs-data\n```\n\n```yaml\n# nfs-service.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: nfs-client-provisioner \n  name: nfs-client-provisioner \n  namespace: kube-system\n```\n\n\n\n直接运行这三个文件即可：\n\n```bash\nkubectl apply -f nfs-cluster-role.yaml\nkubectl apply -f nfs-deployment.yaml\nkubectl apply -f nfs-service.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 创建storageclass\n\n使用类似下面的yaml文件可以创建其他的storageclass：\n\n```yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: es-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n## pvc使用storageclass\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: testclaim\nspec:\n  storageClassName: \"nfs-client\"\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 100Mi\n```\n\n\n\n这里创建一个名为`testclaim`的100Mi的pvc，使用`nfs-client`这个storageclass。\n\n\n\n![](./storageclass-pvc.png)\n\n\n\n\n\n\n\n","slug":"在k8s中使用nfs存储","published":1,"updated":"2021-03-23T13:34:50.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5u0011p0klanorholc","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用nfs作为存储，实现PV、PVC和storageclass</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"安装NFS\"><a href=\"#安装NFS\" class=\"headerlink\" title=\"安装NFS\"></a>安装NFS</h1><p>直接使用yum命令安装nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/nfs/data</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/opt/nfs/data *(rw,no_root_squash)&quot;</span> &gt;&gt; /etc/exports</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>生产上应该给该目录挂载一个数据盘</p>\n</blockquote>\n<p>启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind</span><br><span class=\"line\">systemctl status rpcbind</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">systemctl start nfs </span><br><span class=\"line\">systemctl status nfs</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在k8s的node和master节点上，都安装<code>nfs-utils</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"nfs类型的volume\"><a href=\"#nfs类型的volume\" class=\"headerlink\" title=\"nfs类型的volume\"></a>nfs类型的volume</h1><p>这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">nfs:</span></span><br><span class=\"line\">          <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后直接apply即可创建一个使用nfs类型volume的pod：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f pod-nfs-volume.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./pod-nfs.png\" style=\"zoom:70%;\" />\n\n\n\n<p>然后可以将这个pod作为service暴露出来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f pod-nfs-svc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./pod-nfs-svc.png\" style=\"zoom:70%;\" />\n\n\n\n<p>验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：</p>\n<img src= \"/img/loading.gif\" data-src=\"./pod-nfs-test.png\" style=\"zoom:70%;\" />\n\n<br>\n\n\n\n\n\n<h1 id=\"nfs类型的pv和pvc\"><a href=\"#nfs类型的pv和pvc\" class=\"headerlink\" title=\"nfs类型的pv和pvc\"></a>nfs类型的pv和pvc</h1><h2 id=\"创建PV\"><a href=\"#创建PV\" class=\"headerlink\" title=\"创建PV\"></a>创建PV</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Recycle</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里就创建了一个名为<code>nfs-pv</code>的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。</p>\n<ul>\n<li><code>accessModes</code>：pv访问模式，支持如下几个：<ul>\n<li><code>ReadWriteOnce</code>：读写挂载在一个节点上；</li>\n<li><code>ReadOnlyMany</code>：只读挂载多个节点上；</li>\n<li><code>ReadWriteMany</code>：读写挂载在多个节点上；</li>\n</ul>\n</li>\n<li><code>persistentVolumeReclaimPolicy</code>：回收策略，支持以下几个：<ul>\n<li><code>Retain</code>：不作任何操作，需要手动删除（默认）</li>\n<li><code>Recycle</code>：没有pvc使用时清空数据让其他pvc使用；</li>\n<li><code>Delete</code>：删除；</li>\n</ul>\n</li>\n</ul>\n<img src= \"/img/loading.gif\" data-src=\"./pv.png\" style=\"zoom:50%;\" />\n\n\n\n<blockquote>\n<p>可以看到pv目前是可用状态。</p>\n</blockquote>\n<h2 id=\"创建PV-1\"><a href=\"#创建PV-1\" class=\"headerlink\" title=\"创建PV\"></a>创建PV</h2><p>pod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc01</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里就创建了一个大小为500Mi，名字为<code>pvc01</code>的pvc请求。</p>\n</blockquote>\n<p>pvc是自动绑定pv的，有如下两个原则：</p>\n<ul>\n<li>根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；</li>\n<li>根据访问模式匹配，绑定pv和pvc访问模式一致的；</li>\n</ul>\n<img src= \"/img/loading.gif\" data-src=\"./pvc.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>可以看到pvc和pv都是绑定状态了。</p>\n</blockquote>\n<h2 id=\"使用pvc\"><a href=\"#使用pvc\" class=\"headerlink\" title=\"使用pvc\"></a>使用pvc</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">pvc01</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p> 使用pvc的时候，只需要在<code>volumes</code>定义的时候制定pvc名称即可。</p>\n<img src= \"/img/loading.gif\" data-src=\"./pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"nfs类型的storageclass\"><a href=\"#nfs类型的storageclass\" class=\"headerlink\" title=\"nfs类型的storageclass\"></a>nfs类型的storageclass</h1><p><strong>nfs默认不支持storageclass，需要安装额外的插件</strong></p>\n<h2 id=\"安装nfs-client插件\"><a href=\"#安装nfs-client插件\" class=\"headerlink\" title=\"安装nfs-client插件\"></a>安装nfs-client插件</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">helm方式部署</button></li><li class=\"tab\"><button data-href=\"#comments-2\">yaml方式部署</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install nfs-storageclass --<span class=\"built_in\">set</span> nfs.server=10.8.138.8 --<span class=\"built_in\">set</span> nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"./nfs-client.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到nfs-client服务已经创建，storageclass也已经创建了。</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-cluster-role.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;persistentvolumes&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;update&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;storage.k8s.io&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;storageclasses&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;events&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;endpoints&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">run-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span> </span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;endpoints&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&quot;quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/persistentvolumes</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PROVISIONER_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_SERVER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_PATH</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/data/nfs-data</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">          <span class=\"attr\">nfs:</span></span><br><span class=\"line\">            <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span> </span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/data/nfs-data</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接运行这三个文件即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f nfs-cluster-role.yaml</span><br><span class=\"line\">kubectl apply -f nfs-deployment.yaml</span><br><span class=\"line\">kubectl apply -f nfs-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"创建storageclass\"><a href=\"#创建storageclass\" class=\"headerlink\" title=\"创建storageclass\"></a>创建storageclass</h2><p>使用类似下面的yaml文件可以创建其他的storageclass：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pvc使用storageclass\"><a href=\"#pvc使用storageclass\" class=\"headerlink\" title=\"pvc使用storageclass\"></a>pvc使用storageclass</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">testclaim</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;nfs-client&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里创建一个名为<code>testclaim</code>的100Mi的pvc，使用<code>nfs-client</code>这个storageclass。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"./storageclass-pvc.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用nfs作为存储，实现PV、PVC和storageclass</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"安装NFS\"><a href=\"#安装NFS\" class=\"headerlink\" title=\"安装NFS\"></a>安装NFS</h1><p>直接使用yum命令安装nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/nfs/data</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/opt/nfs/data *(rw,no_root_squash)&quot;</span> &gt;&gt; /etc/exports</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>生产上应该给该目录挂载一个数据盘</p>\n</blockquote>\n<p>启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind</span><br><span class=\"line\">systemctl status rpcbind</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">systemctl start nfs </span><br><span class=\"line\">systemctl status nfs</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在k8s的node和master节点上，都安装<code>nfs-utils</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"nfs类型的volume\"><a href=\"#nfs类型的volume\" class=\"headerlink\" title=\"nfs类型的volume\"></a>nfs类型的volume</h1><p>这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">nfs:</span></span><br><span class=\"line\">          <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后直接apply即可创建一个使用nfs类型volume的pod：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f pod-nfs-volume.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"./pod-nfs.png\" style=\"zoom:70%;\" />\n\n\n\n<p>然后可以将这个pod作为service暴露出来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f pod-nfs-svc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"./pod-nfs-svc.png\" style=\"zoom:70%;\" />\n\n\n\n<p>验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：</p>\n<img src=\"./pod-nfs-test.png\" style=\"zoom:70%;\" />\n\n<br>\n\n\n\n\n\n<h1 id=\"nfs类型的pv和pvc\"><a href=\"#nfs类型的pv和pvc\" class=\"headerlink\" title=\"nfs类型的pv和pvc\"></a>nfs类型的pv和pvc</h1><h2 id=\"创建PV\"><a href=\"#创建PV\" class=\"headerlink\" title=\"创建PV\"></a>创建PV</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Recycle</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里就创建了一个名为<code>nfs-pv</code>的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。</p>\n<ul>\n<li><code>accessModes</code>：pv访问模式，支持如下几个：<ul>\n<li><code>ReadWriteOnce</code>：读写挂载在一个节点上；</li>\n<li><code>ReadOnlyMany</code>：只读挂载多个节点上；</li>\n<li><code>ReadWriteMany</code>：读写挂载在多个节点上；</li>\n</ul>\n</li>\n<li><code>persistentVolumeReclaimPolicy</code>：回收策略，支持以下几个：<ul>\n<li><code>Retain</code>：不作任何操作，需要手动删除（默认）</li>\n<li><code>Recycle</code>：没有pvc使用时清空数据让其他pvc使用；</li>\n<li><code>Delete</code>：删除；</li>\n</ul>\n</li>\n</ul>\n<img src=\"./pv.png\" style=\"zoom:50%;\" />\n\n\n\n<blockquote>\n<p>可以看到pv目前是可用状态。</p>\n</blockquote>\n<h2 id=\"创建PV-1\"><a href=\"#创建PV-1\" class=\"headerlink\" title=\"创建PV\"></a>创建PV</h2><p>pod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc01</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里就创建了一个大小为500Mi，名字为<code>pvc01</code>的pvc请求。</p>\n</blockquote>\n<p>pvc是自动绑定pv的，有如下两个原则：</p>\n<ul>\n<li>根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；</li>\n<li>根据访问模式匹配，绑定pv和pvc访问模式一致的；</li>\n</ul>\n<img src=\"./pvc.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>可以看到pvc和pv都是绑定状态了。</p>\n</blockquote>\n<h2 id=\"使用pvc\"><a href=\"#使用pvc\" class=\"headerlink\" title=\"使用pvc\"></a>使用pvc</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">pvc01</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p> 使用pvc的时候，只需要在<code>volumes</code>定义的时候制定pvc名称即可。</p>\n<img src=\"./pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"nfs类型的storageclass\"><a href=\"#nfs类型的storageclass\" class=\"headerlink\" title=\"nfs类型的storageclass\"></a>nfs类型的storageclass</h1><p><strong>nfs默认不支持storageclass，需要安装额外的插件</strong></p>\n<h2 id=\"安装nfs-client插件\"><a href=\"#安装nfs-client插件\" class=\"headerlink\" title=\"安装nfs-client插件\"></a>安装nfs-client插件</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">helm方式部署</button></li><li class=\"tab\"><button data-href=\"#comments-2\">yaml方式部署</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install nfs-storageclass --<span class=\"built_in\">set</span> nfs.server=10.8.138.8 --<span class=\"built_in\">set</span> nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"./nfs-client.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到nfs-client服务已经创建，storageclass也已经创建了。</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-cluster-role.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;persistentvolumes&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;delete&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;update&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;storage.k8s.io&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;storageclasses&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;events&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;endpoints&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">run-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span> </span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;endpoints&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;list&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;create&quot;</span>, <span class=\"string\">&quot;update&quot;</span>, <span class=\"string\">&quot;patch&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&quot;quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/persistentvolumes</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PROVISIONER_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_SERVER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_PATH</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/data/nfs-data</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">          <span class=\"attr\">nfs:</span></span><br><span class=\"line\">            <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span> </span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/data/nfs-data</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接运行这三个文件即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f nfs-cluster-role.yaml</span><br><span class=\"line\">kubectl apply -f nfs-deployment.yaml</span><br><span class=\"line\">kubectl apply -f nfs-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"创建storageclass\"><a href=\"#创建storageclass\" class=\"headerlink\" title=\"创建storageclass\"></a>创建storageclass</h2><p>使用类似下面的yaml文件可以创建其他的storageclass：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pvc使用storageclass\"><a href=\"#pvc使用storageclass\" class=\"headerlink\" title=\"pvc使用storageclass\"></a>pvc使用storageclass</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">testclaim</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;nfs-client&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里创建一个名为<code>testclaim</code>的100Mi的pvc，使用<code>nfs-client</code>这个storageclass。</p>\n<p><img src=\"./storageclass-pvc.png\" alt=\"\"></p>\n"},{"title":"在k8s中部署Mysql单实例","date":"2021-03-21T09:42:30.000Z","description":"在k8s中部署一个mysql单实例","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=985528186,1328606288&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中部署一个单实例mysql，不具备高可用性只适合于测试开发\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 创建service对象\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  namespace: default\nspec:\n  ports:\n  - port: 3306\n  selector:\n    app: mysql\n  clusterIP: None\n```\n\n\n\n执行下面的命令创建：\n\n```bash\nkubectl create -f mysql-service.yaml\n```\n\n\n\n<br>\n\n\n\n# 创建存储卷\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mysql-pv-volume\n  labels:\n    type: local\nspec:\n  storageClassName: manual\n  capacity:\n    storage: 20Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/mnt/data\"\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-pv-claim\nspec:\n  storageClassName: manual\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 20Gi\n```\n\n\n\n使用下面的命令创建：\n\n```bash\nkubectl create -f mysql-storage.yaml\n```\n\n\n\n<br>\n\n\n\n# 创建deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - image: mysql:5.7\n        name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: password\n        ports:\n        - containerPort: 3306\n          name: mysql\n        volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n      volumes:\n      - name: mysql-persistent-storage\n        persistentVolumeClaim:\n          claimName: mysql-pv-claim\n```\n\n\n\n执行下面的命令创建：\n\n```bash\nkubectl create -f mysql-deployment.yaml\n```\n\n","source":"_posts/在k8s中部署Mysql单实例.md","raw":"---\ntitle: 在k8s中部署Mysql单实例\ndate: 2021-03-21 17:42:30\ntags:\n- MySQL\ncategories:\n- 数据库\n- MySQL\n- 部署\ndescription:  在k8s中部署一个mysql单实例\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=985528186,1328606288&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中部署一个单实例mysql，不具备高可用性只适合于测试开发\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 创建service对象\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  namespace: default\nspec:\n  ports:\n  - port: 3306\n  selector:\n    app: mysql\n  clusterIP: None\n```\n\n\n\n执行下面的命令创建：\n\n```bash\nkubectl create -f mysql-service.yaml\n```\n\n\n\n<br>\n\n\n\n# 创建存储卷\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: mysql-pv-volume\n  labels:\n    type: local\nspec:\n  storageClassName: manual\n  capacity:\n    storage: 20Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/mnt/data\"\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-pv-claim\nspec:\n  storageClassName: manual\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 20Gi\n```\n\n\n\n使用下面的命令创建：\n\n```bash\nkubectl create -f mysql-storage.yaml\n```\n\n\n\n<br>\n\n\n\n# 创建deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - image: mysql:5.7\n        name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: password\n        ports:\n        - containerPort: 3306\n          name: mysql\n        volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n      volumes:\n      - name: mysql-persistent-storage\n        persistentVolumeClaim:\n          claimName: mysql-pv-claim\n```\n\n\n\n执行下面的命令创建：\n\n```bash\nkubectl create -f mysql-deployment.yaml\n```\n\n","slug":"在k8s中部署Mysql单实例","published":1,"updated":"2021-03-21T09:45:32.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5v0013p0klaq3neh6e","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中部署一个单实例mysql，不具备高可用性只适合于测试开发</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"创建service对象\"><a href=\"#创建service对象\" class=\"headerlink\" title=\"创建service对象\"></a>创建service对象</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f mysql-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"创建存储卷\"><a href=\"#创建存储卷\" class=\"headerlink\" title=\"创建存储卷\"></a>创建存储卷</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-pv-volume</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">manual</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mnt/data&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-pv-claim</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">manual</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f mysql-storage.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"创建deployment\"><a href=\"#创建deployment\" class=\"headerlink\" title=\"创建deployment\"></a>创建deployment</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-persistent-storage</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">mysql-pv-claim</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f mysql-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中部署一个单实例mysql，不具备高可用性只适合于测试开发</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"创建service对象\"><a href=\"#创建service对象\" class=\"headerlink\" title=\"创建service对象\"></a>创建service对象</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f mysql-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"创建存储卷\"><a href=\"#创建存储卷\" class=\"headerlink\" title=\"创建存储卷\"></a>创建存储卷</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-pv-volume</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">manual</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mnt/data&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-pv-claim</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">manual</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f mysql-storage.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"创建deployment\"><a href=\"#创建deployment\" class=\"headerlink\" title=\"创建deployment\"></a>创建deployment</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql-persistent-storage</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">mysql-pv-claim</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f mysql-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n"},{"title":"在k8s中部署RabbitMQ","date":"2021-03-20T04:09:11.000Z","description":"本文介绍在k8s中使用有状态服务部署RabbitMQ 3.8.3","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1271185307,1858861969&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个RabbitMQ 3.8.3 版本的集群\n\n更新于 2021-03-20\n\n{% endnote %}\n\n<br>\n\n\n\n# 准备\n\n{% tabs comments %}\n\n<!-- tab K8S集群环境 -->\n\n本文使用的 k8s版本为 `1.20.4`版本，将使用`storageclass`作为持久化存储，底层为`nfs`，使用`default` namespace部署。\n\n<!-- endtab -->\n\n<!-- tab RabbitMq -->\n\n`RabbitMQ`在`k8s`集群中通过`rabbitmq_peer_discovery_k8s plugin`与`k8s apiserver`进行交互，获取各个服务的`URL`，且`RabbitMQ`在`k8s`集群中必须用`statefulset`和`headless service`进行匹配；\n\n> rabbitmq_peer_discovery_k8s`是`RabbitMQ`官方基于第三方开源项目`rabbitmq-autocluster`开发，对`3.7.X`及以上版本提供的`Kubernetes`下的对等发现插件，可实现`rabbitmq`集群在`k8s`中的自动化部署，因此低于3.7.X版本请使用`rabbitmq-autocluster\n\n\n\n这里部署使用的版本是`3.8.3`，其他版本信息可以参看官方文档：[rabbitmq download](https://www.rabbitmq.com/download.html)\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署\n\n\n\n## 创建相关文件\n\n\n\n{% tabs comments %}\n\n<!-- tab 创建configmap -->\n\n创建一个`rabbitmq-configmap.yaml`的文件：\n\n```yaml\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: rabbitmq-cluster-config\n  namespace: default\n  labels:\n    addonmanager.kubernetes.io/mode: Reconcile\ndata:\n    enabled_plugins: |\n      [rabbitmq_management,rabbitmq_peer_discovery_k8s].\n    rabbitmq.conf: |\n      default_user = admin\n      default_pass = 123!@#\n      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s\n      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local\n      cluster_formation.k8s.address_type = hostname\n      cluster_formation.node_cleanup.interval = 30\n      cluster_formation.node_cleanup.only_log_warning = true\n      cluster_partition_handling = autoheal\n      queue_master_locator=min-masters\n      loopback_users.guest = false\n      cluster_formation.randomized_startup_delay_range.min = 0\n      cluster_formation.randomized_startup_delay_range.max = 2\n      cluster_formation.k8s.hostname_suffix = .rabbitmq-cluster.default.svc.cluster.local\n      vm_memory_high_watermark.absolute = 1GB\n      disk_free_limit.absolute = 2GB\n```\n\n\n\n- `enabled_plugins`：声明开启的插件；\n- `default_user/default_pass`：指定用户名和密码；\n- `cluster_formation.k8s.address_type`：从`k8s`返回的`Pod`容器列表中计算对等节点列表，这里只能使用主机名，官方示例中是`ip`，但是默认情况下在`k8s`中`pod`的`ip`都是不固定的，因此可能导致节点的配置和数据丢失，后面的`yaml`中会通过引用元数据的方式固定`pod`的主机名；\n\n<!-- endtab -->\n\n<!-- tab 创建service -->\n\n创建一个`rabbitmq-service.yaml`的文件：\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    app: rabbitmq-cluster\n  name: rabbitmq-cluster\n  namespace: default\nspec:\n  clusterIP: None\n  ports:\n  - name: rmqport\n    port: 5672\n    targetPort: 5672\n  selector:\n    app: rabbitmq-cluster\n\n---\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    app: rabbitmq-cluster\n  name: rabbitmq-cluster-manage\n  namespace: default\nspec:\n  ports:\n  - name: http\n    port: 15672\n    protocol: TCP\n    targetPort: 15672\n  selector:\n    app: rabbitmq-cluster\n  type: NodePort\n```\n\n\n\n> 这里定义了两个service，一个是`NodePort`用于用户通过web访问的管理页面，另一个是用于rabbitmq服务通信；\n\n<!-- endtab -->\n\n<!-- tab RBAC -->\n\n创建一个`rabbitmq-rbac.yaml`的文件：\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: rabbitmq-cluster\n  namespace: default\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: rabbitmq-cluster\n  namespace: default\nrules:\n- apiGroups: [\"\"]\n  resources: [\"endpoints\"]\n  verbs: [\"get\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: rabbitmq-cluster\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: rabbitmq-cluster\nsubjects:\n- kind: ServiceAccount\n  name: rabbitmq-cluster\n  namespace: default\n```\n\n<!-- endtab -->\n\n\n\n<!-- tab 创建statefulset -->\n\n创建一个`rabbitmq-cluster-sts.yaml`的文件：\n\n```yaml\nkind: StatefulSet\napiVersion: apps/v1\nmetadata:\n  labels:\n    app: rabbitmq-cluster\n  name: rabbitmq-cluster\n  namespace: default\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: rabbitmq-cluster\n  serviceName: rabbitmq-cluster\n  template:\n    metadata:\n      labels:\n        app: rabbitmq-cluster\n    spec:\n      containers:\n      - args:\n        - -c\n        - cp -v /etc/rabbitmq/rabbitmq.conf ${RABBITMQ_CONFIG_FILE}; exec docker-entrypoint.sh\n          rabbitmq-server\n        command:\n        - sh\n        env:\n        - name: TZ\n          value: 'Asia/Shanghai'\n        - name: RABBITMQ_ERLANG_COOKIE\n          value: 'SWvCP0Hrqv43NG7GybHC95ntCJKoW8UyNFWnBEWG8TY='\n        - name: K8S_SERVICE_NAME\n          value: rabbitmq-cluster\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: RABBITMQ_USE_LONGNAME\n          value: \"true\"\n        - name: RABBITMQ_NODENAME\n          value: rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local\n        - name: RABBITMQ_CONFIG_FILE\n          value: /var/lib/rabbitmq/rabbitmq.conf\n        image: rabbitmq:3.8.3-management\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          exec:\n            command:\n            - rabbitmq-diagnostics\n            - status\n          initialDelaySeconds: 60\n          periodSeconds: 60\n          timeoutSeconds: 15\n        name: rabbitmq\n        ports:\n        - containerPort: 15672\n          name: http\n          protocol: TCP\n        - containerPort: 5672\n          name: amqp\n          protocol: TCP\n        readinessProbe:\n          exec:\n            command:\n            - rabbitmq-diagnostics\n            - status\n          initialDelaySeconds: 20\n          periodSeconds: 60\n          timeoutSeconds: 10\n        volumeMounts:\n        - mountPath: /etc/rabbitmq\n          name: config-volume\n          readOnly: false\n        - mountPath: /var/lib/rabbitmq\n          name: rabbitmq-storage\n          readOnly: false\n        - name: timezone\n          mountPath: /etc/localtime\n          readOnly: true\n      serviceAccountName: rabbitmq-cluster\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: config-volume\n        configMap:\n          items:\n          - key: rabbitmq.conf\n            path: rabbitmq.conf\n          - key: enabled_plugins\n            path: enabled_plugins\n          name: rabbitmq-cluster-config\n      - name: timezone\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n  volumeClaimTemplates:\n  - metadata:\n      name: rabbitmq-storage\n    spec:\n      accessModes:\n      - ReadWriteMany\n      storageClassName: \"managed-nfs-storage\"\n      resources:\n        requests:\n          storage: 2Gi\n```\n\n> 这里指定了storageclass的名字为：`managed-nfs-storage`，需要根据实际情况调整\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 部署服务\n\n执行下面的命令完成部署：\n\n```bash\nkubectl apply -f .\n```\n\n\n\n## 检查\n\n执行下面的命令检查资源创建情况，确保pod都处于运行状态：\n\n```bash\nkubectl get pod,sts -n default\n```\n\n\n\n<img src=\"./bushu.png\" style=\"zoom:70%;\" />\n\n\n\n检查pod日志，观察集群建立情况：\n\n<img src=\"./log.png\" style=\"zoom:70%;\" />\n\n\n\n进入pod中，通过客户端命令查看集群状态：\n\n```bash\nkubectl exec -ti  rabbitmq-cluster-0 -n default -- rabbitmqctl cluster_status\n```\n\n<img src=\"./client_log.png\" style=\"zoom:70%;\" />\n\n\n\n## 访问管理页面\n\n查看对应service使用的宿主机端口：\n\n```bash\nkubectl get svc -n default\n```\n\n<img src=\"./service.png\" style=\"zoom:70%;\" />\n\n\n\n通过浏览器访问node节点的30888端口即可打开rabbitmq的管理页面：\n\n<img src=\"./web.png\" style=\"zoom:70%;\" />\n\n","source":"_posts/在k8s中部署RabbitMQ.md","raw":"---\ntitle: 在k8s中部署RabbitMQ\ndate: 2021-03-20 12:09:11\ntags:\n- RabbitMQ\ncategories:\n- 消息中间件\n- RabbitMQ\n- 部署\ndescription: 本文介绍在k8s中使用有状态服务部署RabbitMQ 3.8.3\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1271185307,1858861969&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个RabbitMQ 3.8.3 版本的集群\n\n更新于 2021-03-20\n\n{% endnote %}\n\n<br>\n\n\n\n# 准备\n\n{% tabs comments %}\n\n<!-- tab K8S集群环境 -->\n\n本文使用的 k8s版本为 `1.20.4`版本，将使用`storageclass`作为持久化存储，底层为`nfs`，使用`default` namespace部署。\n\n<!-- endtab -->\n\n<!-- tab RabbitMq -->\n\n`RabbitMQ`在`k8s`集群中通过`rabbitmq_peer_discovery_k8s plugin`与`k8s apiserver`进行交互，获取各个服务的`URL`，且`RabbitMQ`在`k8s`集群中必须用`statefulset`和`headless service`进行匹配；\n\n> rabbitmq_peer_discovery_k8s`是`RabbitMQ`官方基于第三方开源项目`rabbitmq-autocluster`开发，对`3.7.X`及以上版本提供的`Kubernetes`下的对等发现插件，可实现`rabbitmq`集群在`k8s`中的自动化部署，因此低于3.7.X版本请使用`rabbitmq-autocluster\n\n\n\n这里部署使用的版本是`3.8.3`，其他版本信息可以参看官方文档：[rabbitmq download](https://www.rabbitmq.com/download.html)\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署\n\n\n\n## 创建相关文件\n\n\n\n{% tabs comments %}\n\n<!-- tab 创建configmap -->\n\n创建一个`rabbitmq-configmap.yaml`的文件：\n\n```yaml\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: rabbitmq-cluster-config\n  namespace: default\n  labels:\n    addonmanager.kubernetes.io/mode: Reconcile\ndata:\n    enabled_plugins: |\n      [rabbitmq_management,rabbitmq_peer_discovery_k8s].\n    rabbitmq.conf: |\n      default_user = admin\n      default_pass = 123!@#\n      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s\n      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local\n      cluster_formation.k8s.address_type = hostname\n      cluster_formation.node_cleanup.interval = 30\n      cluster_formation.node_cleanup.only_log_warning = true\n      cluster_partition_handling = autoheal\n      queue_master_locator=min-masters\n      loopback_users.guest = false\n      cluster_formation.randomized_startup_delay_range.min = 0\n      cluster_formation.randomized_startup_delay_range.max = 2\n      cluster_formation.k8s.hostname_suffix = .rabbitmq-cluster.default.svc.cluster.local\n      vm_memory_high_watermark.absolute = 1GB\n      disk_free_limit.absolute = 2GB\n```\n\n\n\n- `enabled_plugins`：声明开启的插件；\n- `default_user/default_pass`：指定用户名和密码；\n- `cluster_formation.k8s.address_type`：从`k8s`返回的`Pod`容器列表中计算对等节点列表，这里只能使用主机名，官方示例中是`ip`，但是默认情况下在`k8s`中`pod`的`ip`都是不固定的，因此可能导致节点的配置和数据丢失，后面的`yaml`中会通过引用元数据的方式固定`pod`的主机名；\n\n<!-- endtab -->\n\n<!-- tab 创建service -->\n\n创建一个`rabbitmq-service.yaml`的文件：\n\n```yaml\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    app: rabbitmq-cluster\n  name: rabbitmq-cluster\n  namespace: default\nspec:\n  clusterIP: None\n  ports:\n  - name: rmqport\n    port: 5672\n    targetPort: 5672\n  selector:\n    app: rabbitmq-cluster\n\n---\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    app: rabbitmq-cluster\n  name: rabbitmq-cluster-manage\n  namespace: default\nspec:\n  ports:\n  - name: http\n    port: 15672\n    protocol: TCP\n    targetPort: 15672\n  selector:\n    app: rabbitmq-cluster\n  type: NodePort\n```\n\n\n\n> 这里定义了两个service，一个是`NodePort`用于用户通过web访问的管理页面，另一个是用于rabbitmq服务通信；\n\n<!-- endtab -->\n\n<!-- tab RBAC -->\n\n创建一个`rabbitmq-rbac.yaml`的文件：\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: rabbitmq-cluster\n  namespace: default\n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: rabbitmq-cluster\n  namespace: default\nrules:\n- apiGroups: [\"\"]\n  resources: [\"endpoints\"]\n  verbs: [\"get\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: rabbitmq-cluster\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: rabbitmq-cluster\nsubjects:\n- kind: ServiceAccount\n  name: rabbitmq-cluster\n  namespace: default\n```\n\n<!-- endtab -->\n\n\n\n<!-- tab 创建statefulset -->\n\n创建一个`rabbitmq-cluster-sts.yaml`的文件：\n\n```yaml\nkind: StatefulSet\napiVersion: apps/v1\nmetadata:\n  labels:\n    app: rabbitmq-cluster\n  name: rabbitmq-cluster\n  namespace: default\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: rabbitmq-cluster\n  serviceName: rabbitmq-cluster\n  template:\n    metadata:\n      labels:\n        app: rabbitmq-cluster\n    spec:\n      containers:\n      - args:\n        - -c\n        - cp -v /etc/rabbitmq/rabbitmq.conf ${RABBITMQ_CONFIG_FILE}; exec docker-entrypoint.sh\n          rabbitmq-server\n        command:\n        - sh\n        env:\n        - name: TZ\n          value: 'Asia/Shanghai'\n        - name: RABBITMQ_ERLANG_COOKIE\n          value: 'SWvCP0Hrqv43NG7GybHC95ntCJKoW8UyNFWnBEWG8TY='\n        - name: K8S_SERVICE_NAME\n          value: rabbitmq-cluster\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: RABBITMQ_USE_LONGNAME\n          value: \"true\"\n        - name: RABBITMQ_NODENAME\n          value: rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local\n        - name: RABBITMQ_CONFIG_FILE\n          value: /var/lib/rabbitmq/rabbitmq.conf\n        image: rabbitmq:3.8.3-management\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n          exec:\n            command:\n            - rabbitmq-diagnostics\n            - status\n          initialDelaySeconds: 60\n          periodSeconds: 60\n          timeoutSeconds: 15\n        name: rabbitmq\n        ports:\n        - containerPort: 15672\n          name: http\n          protocol: TCP\n        - containerPort: 5672\n          name: amqp\n          protocol: TCP\n        readinessProbe:\n          exec:\n            command:\n            - rabbitmq-diagnostics\n            - status\n          initialDelaySeconds: 20\n          periodSeconds: 60\n          timeoutSeconds: 10\n        volumeMounts:\n        - mountPath: /etc/rabbitmq\n          name: config-volume\n          readOnly: false\n        - mountPath: /var/lib/rabbitmq\n          name: rabbitmq-storage\n          readOnly: false\n        - name: timezone\n          mountPath: /etc/localtime\n          readOnly: true\n      serviceAccountName: rabbitmq-cluster\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: config-volume\n        configMap:\n          items:\n          - key: rabbitmq.conf\n            path: rabbitmq.conf\n          - key: enabled_plugins\n            path: enabled_plugins\n          name: rabbitmq-cluster-config\n      - name: timezone\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n  volumeClaimTemplates:\n  - metadata:\n      name: rabbitmq-storage\n    spec:\n      accessModes:\n      - ReadWriteMany\n      storageClassName: \"managed-nfs-storage\"\n      resources:\n        requests:\n          storage: 2Gi\n```\n\n> 这里指定了storageclass的名字为：`managed-nfs-storage`，需要根据实际情况调整\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 部署服务\n\n执行下面的命令完成部署：\n\n```bash\nkubectl apply -f .\n```\n\n\n\n## 检查\n\n执行下面的命令检查资源创建情况，确保pod都处于运行状态：\n\n```bash\nkubectl get pod,sts -n default\n```\n\n\n\n<img src=\"./bushu.png\" style=\"zoom:70%;\" />\n\n\n\n检查pod日志，观察集群建立情况：\n\n<img src=\"./log.png\" style=\"zoom:70%;\" />\n\n\n\n进入pod中，通过客户端命令查看集群状态：\n\n```bash\nkubectl exec -ti  rabbitmq-cluster-0 -n default -- rabbitmqctl cluster_status\n```\n\n<img src=\"./client_log.png\" style=\"zoom:70%;\" />\n\n\n\n## 访问管理页面\n\n查看对应service使用的宿主机端口：\n\n```bash\nkubectl get svc -n default\n```\n\n<img src=\"./service.png\" style=\"zoom:70%;\" />\n\n\n\n通过浏览器访问node节点的30888端口即可打开rabbitmq的管理页面：\n\n<img src=\"./web.png\" style=\"zoom:70%;\" />\n\n","slug":"在k8s中部署RabbitMQ","published":1,"updated":"2021-03-20T07:16:13.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5w0015p0kl3u3oen9b","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个RabbitMQ 3.8.3 版本的集群</p><p>更新于 2021-03-20</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">K8S集群环境</button></li><li class=\"tab\"><button data-href=\"#comments-2\">RabbitMq</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>本文使用的 k8s版本为 <code>1.20.4</code>版本，将使用<code>storageclass</code>作为持久化存储，底层为<code>nfs</code>，使用<code>default</code> namespace部署。</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><code>RabbitMQ</code>在<code>k8s</code>集群中通过<code>rabbitmq_peer_discovery_k8s plugin</code>与<code>k8s apiserver</code>进行交互，获取各个服务的<code>URL</code>，且<code>RabbitMQ</code>在<code>k8s</code>集群中必须用<code>statefulset</code>和<code>headless service</code>进行匹配；</p>\n<blockquote>\n<p>rabbitmq_peer_discovery_k8s<code>是</code>RabbitMQ<code>官方基于第三方开源项目</code>rabbitmq-autocluster<code>开发，对</code>3.7.X<code>及以上版本提供的</code>Kubernetes<code>下的对等发现插件，可实现</code>rabbitmq<code>集群在</code>k8s<code>中的自动化部署，因此低于3.7.X版本请使用</code>rabbitmq-autocluster</p>\n</blockquote>\n<p>这里部署使用的版本是<code>3.8.3</code>，其他版本信息可以参看官方文档：<a href=\"https://www.rabbitmq.com/download.html\">rabbitmq download</a></p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><h2 id=\"创建相关文件\"><a href=\"#创建相关文件\" class=\"headerlink\" title=\"创建相关文件\"></a>创建相关文件</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建configmap</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">RBAC</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建statefulset</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>创建一个<code>rabbitmq-configmap.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled_plugins:</span> <span class=\"string\">|</span></span><br><span class=\"line\">      [<span class=\"string\">rabbitmq_management</span>,<span class=\"string\">rabbitmq_peer_discovery_k8s</span>]<span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">rabbitmq.conf:</span> <span class=\"string\">|</span></span><br><span class=\"line\">      <span class=\"string\">default_user</span> <span class=\"string\">=</span> <span class=\"string\">admin</span></span><br><span class=\"line\">      <span class=\"string\">default_pass</span> <span class=\"string\">=</span> <span class=\"number\">123</span><span class=\"type\">!@#</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.peer_discovery_backend</span> <span class=\"string\">=</span> <span class=\"string\">rabbit_peer_discovery_k8s</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.k8s.host</span> <span class=\"string\">=</span> <span class=\"string\">kubernetes.default.svc.cluster.local</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.k8s.address_type</span> <span class=\"string\">=</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.node_cleanup.interval</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.node_cleanup.only_log_warning</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"string\">cluster_partition_handling</span> <span class=\"string\">=</span> <span class=\"string\">autoheal</span></span><br><span class=\"line\">      <span class=\"string\">queue_master_locator=min-masters</span></span><br><span class=\"line\">      <span class=\"string\">loopback_users.guest</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.randomized_startup_delay_range.min</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.randomized_startup_delay_range.max</span> <span class=\"string\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.k8s.hostname_suffix</span> <span class=\"string\">=</span> <span class=\"string\">.rabbitmq-cluster.default.svc.cluster.local</span></span><br><span class=\"line\">      <span class=\"string\">vm_memory_high_watermark.absolute</span> <span class=\"string\">=</span> <span class=\"string\">1GB</span></span><br><span class=\"line\">      <span class=\"string\">disk_free_limit.absolute</span> <span class=\"string\">=</span> <span class=\"string\">2GB</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>enabled_plugins</code>：声明开启的插件；</li>\n<li><code>default_user/default_pass</code>：指定用户名和密码；</li>\n<li><code>cluster_formation.k8s.address_type</code>：从<code>k8s</code>返回的<code>Pod</code>容器列表中计算对等节点列表，这里只能使用主机名，官方示例中是<code>ip</code>，但是默认情况下在<code>k8s</code>中<code>pod</code>的<code>ip</code>都是不固定的，因此可能导致节点的配置和数据丢失，后面的<code>yaml</code>中会通过引用元数据的方式固定<code>pod</code>的主机名；</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>创建一个<code>rabbitmq-service.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">rmqport</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster-manage</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里定义了两个service，一个是<code>NodePort</code>用于用户通过web访问的管理页面，另一个是用于rabbitmq服务通信；</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>创建一个<code>rabbitmq-rbac.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;endpoints&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><p>创建一个<code>rabbitmq-cluster-sts.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">-v</span> <span class=\"string\">/etc/rabbitmq/rabbitmq.conf</span> <span class=\"string\">$&#123;RABBITMQ_CONFIG_FILE&#125;;</span> <span class=\"string\">exec</span> <span class=\"string\">docker-entrypoint.sh</span></span><br><span class=\"line\">          <span class=\"string\">rabbitmq-server</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_ERLANG_COOKIE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&#x27;SWvCP0Hrqv43NG7GybHC95ntCJKoW8UyNFWnBEWG8TY=&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">K8S_SERVICE_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAMESPACE</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_USE_LONGNAME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_NODENAME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_CONFIG_FILE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/var/lib/rabbitmq/rabbitmq.conf</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">rabbitmq:3.8.3-management</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq-diagnostics</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">status</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">amqp</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq-diagnostics</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">status</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-storage</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">timezone</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/localtime</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">items:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">rabbitmq.conf</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">rabbitmq.conf</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">enabled_plugins</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">enabled_plugins</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster-config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">timezone</span></span><br><span class=\"line\">        <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/usr/share/zoneinfo/Asia/Shanghai</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-storage</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;managed-nfs-storage&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">2Gi</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里指定了storageclass的名字为：<code>managed-nfs-storage</code>，需要根据实际情况调整</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h2><p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f .</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>执行下面的命令检查资源创建情况，确保pod都处于运行状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,sts -n default</span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"./bushu.png\" style=\"zoom:70%;\" />\n\n\n\n<p>检查pod日志，观察集群建立情况：</p>\n<img src= \"/img/loading.gif\" data-src=\"./log.png\" style=\"zoom:70%;\" />\n\n\n\n<p>进入pod中，通过客户端命令查看集群状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -ti  rabbitmq-cluster-0 -n default -- rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./client_log.png\" style=\"zoom:70%;\" />\n\n\n\n<h2 id=\"访问管理页面\"><a href=\"#访问管理页面\" class=\"headerlink\" title=\"访问管理页面\"></a>访问管理页面</h2><p>查看对应service使用的宿主机端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get svc -n default</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./service.png\" style=\"zoom:70%;\" />\n\n\n\n<p>通过浏览器访问node节点的30888端口即可打开rabbitmq的管理页面：</p>\n<img src= \"/img/loading.gif\" data-src=\"./web.png\" style=\"zoom:70%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个RabbitMQ 3.8.3 版本的集群</p><p>更新于 2021-03-20</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">K8S集群环境</button></li><li class=\"tab\"><button data-href=\"#comments-2\">RabbitMq</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>本文使用的 k8s版本为 <code>1.20.4</code>版本，将使用<code>storageclass</code>作为持久化存储，底层为<code>nfs</code>，使用<code>default</code> namespace部署。</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><code>RabbitMQ</code>在<code>k8s</code>集群中通过<code>rabbitmq_peer_discovery_k8s plugin</code>与<code>k8s apiserver</code>进行交互，获取各个服务的<code>URL</code>，且<code>RabbitMQ</code>在<code>k8s</code>集群中必须用<code>statefulset</code>和<code>headless service</code>进行匹配；</p>\n<blockquote>\n<p>rabbitmq_peer_discovery_k8s<code>是</code>RabbitMQ<code>官方基于第三方开源项目</code>rabbitmq-autocluster<code>开发，对</code>3.7.X<code>及以上版本提供的</code>Kubernetes<code>下的对等发现插件，可实现</code>rabbitmq<code>集群在</code>k8s<code>中的自动化部署，因此低于3.7.X版本请使用</code>rabbitmq-autocluster</p>\n</blockquote>\n<p>这里部署使用的版本是<code>3.8.3</code>，其他版本信息可以参看官方文档：<a href=\"https://www.rabbitmq.com/download.html\">rabbitmq download</a></p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><h2 id=\"创建相关文件\"><a href=\"#创建相关文件\" class=\"headerlink\" title=\"创建相关文件\"></a>创建相关文件</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建configmap</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建service</button></li><li class=\"tab\"><button data-href=\"#comments-3\">RBAC</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建statefulset</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>创建一个<code>rabbitmq-configmap.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled_plugins:</span> <span class=\"string\">|</span></span><br><span class=\"line\">      [<span class=\"string\">rabbitmq_management</span>,<span class=\"string\">rabbitmq_peer_discovery_k8s</span>]<span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">rabbitmq.conf:</span> <span class=\"string\">|</span></span><br><span class=\"line\">      <span class=\"string\">default_user</span> <span class=\"string\">=</span> <span class=\"string\">admin</span></span><br><span class=\"line\">      <span class=\"string\">default_pass</span> <span class=\"string\">=</span> <span class=\"number\">123</span><span class=\"type\">!@#</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.peer_discovery_backend</span> <span class=\"string\">=</span> <span class=\"string\">rabbit_peer_discovery_k8s</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.k8s.host</span> <span class=\"string\">=</span> <span class=\"string\">kubernetes.default.svc.cluster.local</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.k8s.address_type</span> <span class=\"string\">=</span> <span class=\"string\">hostname</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.node_cleanup.interval</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.node_cleanup.only_log_warning</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"string\">cluster_partition_handling</span> <span class=\"string\">=</span> <span class=\"string\">autoheal</span></span><br><span class=\"line\">      <span class=\"string\">queue_master_locator=min-masters</span></span><br><span class=\"line\">      <span class=\"string\">loopback_users.guest</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.randomized_startup_delay_range.min</span> <span class=\"string\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.randomized_startup_delay_range.max</span> <span class=\"string\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"string\">cluster_formation.k8s.hostname_suffix</span> <span class=\"string\">=</span> <span class=\"string\">.rabbitmq-cluster.default.svc.cluster.local</span></span><br><span class=\"line\">      <span class=\"string\">vm_memory_high_watermark.absolute</span> <span class=\"string\">=</span> <span class=\"string\">1GB</span></span><br><span class=\"line\">      <span class=\"string\">disk_free_limit.absolute</span> <span class=\"string\">=</span> <span class=\"string\">2GB</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>enabled_plugins</code>：声明开启的插件；</li>\n<li><code>default_user/default_pass</code>：指定用户名和密码；</li>\n<li><code>cluster_formation.k8s.address_type</code>：从<code>k8s</code>返回的<code>Pod</code>容器列表中计算对等节点列表，这里只能使用主机名，官方示例中是<code>ip</code>，但是默认情况下在<code>k8s</code>中<code>pod</code>的<code>ip</code>都是不固定的，因此可能导致节点的配置和数据丢失，后面的<code>yaml</code>中会通过引用元数据的方式固定<code>pod</code>的主机名；</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>创建一个<code>rabbitmq-service.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">rmqport</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster-manage</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里定义了两个service，一个是<code>NodePort</code>用于用户通过web访问的管理页面，另一个是用于rabbitmq服务通信；</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>创建一个<code>rabbitmq-rbac.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;endpoints&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><p>创建一个<code>rabbitmq-cluster-sts.yaml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">-v</span> <span class=\"string\">/etc/rabbitmq/rabbitmq.conf</span> <span class=\"string\">$&#123;RABBITMQ_CONFIG_FILE&#125;;</span> <span class=\"string\">exec</span> <span class=\"string\">docker-entrypoint.sh</span></span><br><span class=\"line\">          <span class=\"string\">rabbitmq-server</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_ERLANG_COOKIE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&#x27;SWvCP0Hrqv43NG7GybHC95ntCJKoW8UyNFWnBEWG8TY=&#x27;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">K8S_SERVICE_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAMESPACE</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_USE_LONGNAME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_NODENAME</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">RABBITMQ_CONFIG_FILE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">/var/lib/rabbitmq/rabbitmq.conf</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">rabbitmq:3.8.3-management</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq-diagnostics</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">status</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">15672</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5672</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">amqp</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">rabbitmq-diagnostics</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">status</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/rabbitmq</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-storage</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">timezone</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/localtime</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">rabbitmq-cluster</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">items:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">rabbitmq.conf</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">rabbitmq.conf</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">enabled_plugins</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">enabled_plugins</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-cluster-config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">timezone</span></span><br><span class=\"line\">        <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/usr/share/zoneinfo/Asia/Shanghai</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">rabbitmq-storage</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;managed-nfs-storage&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">2Gi</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里指定了storageclass的名字为：<code>managed-nfs-storage</code>，需要根据实际情况调整</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h2><p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f .</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>执行下面的命令检查资源创建情况，确保pod都处于运行状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,sts -n default</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"./bushu.png\" style=\"zoom:70%;\" />\n\n\n\n<p>检查pod日志，观察集群建立情况：</p>\n<img src=\"./log.png\" style=\"zoom:70%;\" />\n\n\n\n<p>进入pod中，通过客户端命令查看集群状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -ti  rabbitmq-cluster-0 -n default -- rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure>\n\n<img src=\"./client_log.png\" style=\"zoom:70%;\" />\n\n\n\n<h2 id=\"访问管理页面\"><a href=\"#访问管理页面\" class=\"headerlink\" title=\"访问管理页面\"></a>访问管理页面</h2><p>查看对应service使用的宿主机端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get svc -n default</span><br></pre></td></tr></table></figure>\n\n<img src=\"./service.png\" style=\"zoom:70%;\" />\n\n\n\n<p>通过浏览器访问node节点的30888端口即可打开rabbitmq的管理页面：</p>\n<img src=\"./web.png\" style=\"zoom:70%;\" />\n\n"},{"title":"在k8s中部署mysql主从集群","date":"2021-03-20T11:49:14.000Z","description":"在k8s中部署一个高可用主从mysql集群","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs3.51cto.com%2Foss%2F201802%2F08%2F63b4c7aed6ae968d015d1996d849e887.jpg-wh_651x-s_1564773166.jpg&refer=http%3A%2F%2Fs3.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618833026&t=075446eb7b37fdf6d30bff2ef6ae2ac7","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个mysql 5.7 版本的主从同步集群\n\n更新于 2021-03-20\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# 目标\n\n- 搭建一个master-slave集群；\n- 读操作可以在master和slave上进行；\n- 写操作只能在master上进行；\n- slave从master同步数据；\n\n\n\n<br>\n\n\n\n# 创建相关文件\n\n{% tabs comments %}\n\n<!-- tab namespace -->\n\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mysql\n  labels:\n    app: mysql\n```\n\n<!-- endtab -->\n\n<!-- tab configmap -->\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql\n  namespace: mysql\n  labels:\n    app: mysql\ndata:\n  master.cnf: |\n    # Master配置\n    [mysqld]\n    log-bin=mysqllog\n    skip-name-resolve\n  slave.cnf: |\n    # Slave配置\n    [mysqld]\n    super-read-only\n    skip-name-resolve\n    log-bin=mysql-bin\n    replicate-ignore-db=mysql\n```\n\n<!-- endtab -->\n\n<!-- tab secret -->\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: mysql\n  labels:\n    app: mysql\ntype: Opaque\ndata:\n  password: MTIzNDU2 # echo -n \"123456\" | base64\n```\n\n<!-- endtab -->\n\n<!-- tab service -->\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  namespace: mysql\n  labels:\n    app: mysql\nspec:\n  ports:\n  - name: mysql\n    port: 3306\n  clusterIP: None\n  selector:\n    app: mysql\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-read\n  namespace: mysql\n  labels:\n    app: mysql\nspec:\n  ports:\n  - name: mysql\n    port: 3306\n  selector:\n    app: mysql\n```\n\n<!-- endtab -->\n\n<!-- tab statefulset -->\n\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql\n  namespace: mysql\n  labels:\n    app: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  serviceName: mysql\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      initContainers:\n      - name: init-mysql\n        image: mysql:5.7\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          # 从 Pod 的序号，生成 server-id\n          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1\n          ordinal=${BASH_REMATCH[1]}\n          echo [mysqld] > /mnt/conf.d/server-id.cnf\n          # 由于 server-id 不能为 0，因此给 ID 加 100 来避开它\n          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf\n          # 如果 Pod 的序号为 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d 目录下\n          # 否则，拷贝 ConfigMap 里的 Slave 的配置文件\n          if [[ ${ordinal} -eq 0 ]]; then\n            cp /mnt/config-map/master.cnf /mnt/conf.d\n          else\n            cp /mnt/config-map/slave.cnf /mnt/conf.d\n          fi\n        volumeMounts:\n        - name: conf\n          mountPath: /mnt/conf.d\n        - name: config-map\n          mountPath: /mnt/config-map\n      - name: clone-mysql\n        image: gcr.io/google-samples/xtrabackup:1.0\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          # 拷贝操作只需要在第一次启动时进行，所以数据已经存在则跳过\n          [[ -d /var/lib/mysql/mysql ]] && exit 0\n          # Master 节点（序号为 0）不需要这个操作\n          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1\n          ordinal=${BASH_REMATCH[1]}\n          [[ $ordinal == 0 ]] && exit 0\n          # 使用 ncat 指令，远程地从前一个节点拷贝数据到本地\n          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql\n          # 执行 --prepare，这样拷贝来的数据就可以用作恢复了\n          xtrabackup --prepare --target-dir=/var/lib/mysql\n        volumeMounts:\n        - name: data\n          mountPath: /var/lib/mysql\n          subPath: mysql\n        - name: conf\n          mountPath: /etc/mysql/conf.d\n      containers:\n      - name: mysql\n        image: mysql:5.7\n        env:\n#        - name: MYSQL_ALLOW_EMPTY_PASSWORD\n#          value: \"1\"\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        ports:\n        - name: mysql\n          containerPort: 3306\n        volumeMounts:\n        - name: data\n          mountPath: /var/lib/mysql\n          subPath: mysql\n        - name: conf\n          mountPath: /etc/mysql/conf.d\n        resources:\n          requests:\n            cpu: 500m\n            memory: 1Gi\n        livenessProbe:\n          exec:\n            command: [\"mysqladmin\", \"ping\", \"-uroot\", \"-p${MYSQL_ROOT_PASSWORD}\"]\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          exec:\n            command: [\"mysqladmin\", \"ping\", \"-uroot\", \"-p${MYSQL_ROOT_PASSWORD}\"]\n          initialDelaySeconds: 5\n          periodSeconds: 2\n          timeoutSeconds: 1\n      - name: xtrabackup\n        image: gcr.io/google-samples/xtrabackup:1.0\n        ports:\n        - name: xtrabackup\n          containerPort: 3307\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          cd /var/lib/mysql\n          # 从备份信息文件里读取 MASTER_LOG_FILE 和 MASTER_LOG_POS 这 2 个字段的值，用来拼装集群初始化 SQL\n          if [[ -f xtrabackup_slave_info ]]; then\n            # 如果 xtrabackup_slave_info 文件存在，说明这个备份数据来自于另一个 Slave 节点\n            # 这种情况下，XtraBackup 工具在备份的时候，就已经在这个文件里自动生成了 \"CHANGE MASTER TO\" SQL 语句\n            # 所以，只需要把这个文件重命名为 change_master_to.sql.in，后面直接使用即可\n            mv xtrabackup_slave_info change_master_to.sql.in\n            # 所以，也就用不着 xtrabackup_binlog_info 了\n            rm -f xtrabackup_binlog_info\n          elif [[ -f xtrabackup_binlog_info ]]; then\n            # 如果只是存在 xtrabackup_binlog_info 文件，说明备份来自于 Master 节点，就需要解析这个备份信息文件，读取所需的两个字段的值\n            [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1\n            rm xtrabackup_binlog_info\n            # 把两个字段的值拼装成 SQL，写入 change_master_to.sql.in 文件\n            echo \"CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\\\n                  MASTER_LOG_POS=${BASH_REMATCH[2]}\" > change_master_to.sql.in\n          fi\n          # 如果存在 change_master_to.sql.in，就意味着需要做集群初始化工作\n          if [[ -f change_master_to.sql.in ]]; then\n            # 但一定要先等 MySQL 容器启动之后才能进行下一步连接 MySQL 的操作\n            echo \"Waiting for mysqld to be ready（accepting connections）\"\n            until mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} -e \"SELECT 1\"; do sleep 1; done\n            echo \"Initializing replication from clone position\"\n            # 将文件 change_master_to.sql.in 改个名字\n            # 防止这个 Container 重启的时候，因为又找到了 change_master_to.sql.in，从而重复执行一遍初始化流程\n            mv change_master_to.sql.in change_master_to.sql.orig\n            # 使用 change_master_to.sql.orig 的内容，也就是前面拼装的 SQL，组成一个完整的初始化和启动 Slave 的 SQL 语句\n            mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} << EOF\n          $(< change_master_to.sql.orig),\n            MASTER_HOST='mysql-0.mysql.mysql',\n            MASTER_USER='root',\n            MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}',\n            MASTER_CONNECT_RETRY=10;\n          START SLAVE;\n          EOF\n          fi\n          # 使用 ncat 监听 3307 端口。\n          # 它的作用是，在收到传输请求的时候，直接执行 xtrabackup --backup 命令，备份 MySQL 的数据并发送给请求者\n          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \\\n            \"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=${MYSQL_ROOT_PASSWORD}\"\n        volumeMounts:\n        - name: data\n          mountPath: /var/lib/mysql\n          subPath: mysql\n        - name: conf\n          mountPath: /etc/mysql/conf.d\n      volumes:\n      - name: conf\n        emptyDir: {}\n      - name: config-map\n        configMap:\n          name: mysql\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes:\n      - \"ReadWriteOnce\"\n      storageClassName: local-storage\n      resources:\n        requests:\n          storage: 3Gi\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 验证服务\n\n## 验证主从\n\n执行下面命令：\n\n```bash\nkubectl -n mysql exec mysql-1 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'show slave status \\G'\"\n```\n\n<img src=\"./zhucong.png\" style=\"zoom:70%;\" />\n\n\n\n> 证明组从同步是正常的\n\n\n\n## 插入数据查看同步\n\n在master上插入数据：\n\n```bash\nkubectl -n mysql exec mysql-0 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'create database test’\"\n\nkubectl -n mysql exec mysql-0 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;create table counter(c int);’\"\n\nkubectl -n mysql exec mysql-0 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;insert into counter values(123)’\"\n```\n\n\n\n在slave上查看数据是否同步：\n\n```bash\nkubectl -n mysql exec mysql-1 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;select * from counter’\"  \n```\n\n\n\n<br>\n\n\n\n# 扩展集群\n\n目前这样的集群是支持slave水平扩展的，只需要增加statefulset的副本数即可：\n\n```bash\nkubectl -n mysql scale statefulset mysql -—replicas=3\n```\n\n\n\n然后新的节点也会自动同步：\n\n```bash\nkubectl -n mysql exec mysql-2 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;select * from counter’\"  \n```\n\n","source":"_posts/在k8s中部署mysql主从集群.md","raw":"---\ntitle: 在k8s中部署mysql主从集群\ndate: 2021-03-20 19:49:14\ntags:\n- MySQL\ncategories:\n- 数据库\n- MySQL\n- 部署\ndescription: 在k8s中部署一个高可用主从mysql集群\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs3.51cto.com%2Foss%2F201802%2F08%2F63b4c7aed6ae968d015d1996d849e887.jpg-wh_651x-s_1564773166.jpg&refer=http%3A%2F%2Fs3.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618833026&t=075446eb7b37fdf6d30bff2ef6ae2ac7\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个mysql 5.7 版本的主从同步集群\n\n更新于 2021-03-20\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# 目标\n\n- 搭建一个master-slave集群；\n- 读操作可以在master和slave上进行；\n- 写操作只能在master上进行；\n- slave从master同步数据；\n\n\n\n<br>\n\n\n\n# 创建相关文件\n\n{% tabs comments %}\n\n<!-- tab namespace -->\n\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mysql\n  labels:\n    app: mysql\n```\n\n<!-- endtab -->\n\n<!-- tab configmap -->\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql\n  namespace: mysql\n  labels:\n    app: mysql\ndata:\n  master.cnf: |\n    # Master配置\n    [mysqld]\n    log-bin=mysqllog\n    skip-name-resolve\n  slave.cnf: |\n    # Slave配置\n    [mysqld]\n    super-read-only\n    skip-name-resolve\n    log-bin=mysql-bin\n    replicate-ignore-db=mysql\n```\n\n<!-- endtab -->\n\n<!-- tab secret -->\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: mysql\n  labels:\n    app: mysql\ntype: Opaque\ndata:\n  password: MTIzNDU2 # echo -n \"123456\" | base64\n```\n\n<!-- endtab -->\n\n<!-- tab service -->\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  namespace: mysql\n  labels:\n    app: mysql\nspec:\n  ports:\n  - name: mysql\n    port: 3306\n  clusterIP: None\n  selector:\n    app: mysql\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-read\n  namespace: mysql\n  labels:\n    app: mysql\nspec:\n  ports:\n  - name: mysql\n    port: 3306\n  selector:\n    app: mysql\n```\n\n<!-- endtab -->\n\n<!-- tab statefulset -->\n\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql\n  namespace: mysql\n  labels:\n    app: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  serviceName: mysql\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      initContainers:\n      - name: init-mysql\n        image: mysql:5.7\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          # 从 Pod 的序号，生成 server-id\n          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1\n          ordinal=${BASH_REMATCH[1]}\n          echo [mysqld] > /mnt/conf.d/server-id.cnf\n          # 由于 server-id 不能为 0，因此给 ID 加 100 来避开它\n          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf\n          # 如果 Pod 的序号为 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d 目录下\n          # 否则，拷贝 ConfigMap 里的 Slave 的配置文件\n          if [[ ${ordinal} -eq 0 ]]; then\n            cp /mnt/config-map/master.cnf /mnt/conf.d\n          else\n            cp /mnt/config-map/slave.cnf /mnt/conf.d\n          fi\n        volumeMounts:\n        - name: conf\n          mountPath: /mnt/conf.d\n        - name: config-map\n          mountPath: /mnt/config-map\n      - name: clone-mysql\n        image: gcr.io/google-samples/xtrabackup:1.0\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          # 拷贝操作只需要在第一次启动时进行，所以数据已经存在则跳过\n          [[ -d /var/lib/mysql/mysql ]] && exit 0\n          # Master 节点（序号为 0）不需要这个操作\n          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1\n          ordinal=${BASH_REMATCH[1]}\n          [[ $ordinal == 0 ]] && exit 0\n          # 使用 ncat 指令，远程地从前一个节点拷贝数据到本地\n          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql\n          # 执行 --prepare，这样拷贝来的数据就可以用作恢复了\n          xtrabackup --prepare --target-dir=/var/lib/mysql\n        volumeMounts:\n        - name: data\n          mountPath: /var/lib/mysql\n          subPath: mysql\n        - name: conf\n          mountPath: /etc/mysql/conf.d\n      containers:\n      - name: mysql\n        image: mysql:5.7\n        env:\n#        - name: MYSQL_ALLOW_EMPTY_PASSWORD\n#          value: \"1\"\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        ports:\n        - name: mysql\n          containerPort: 3306\n        volumeMounts:\n        - name: data\n          mountPath: /var/lib/mysql\n          subPath: mysql\n        - name: conf\n          mountPath: /etc/mysql/conf.d\n        resources:\n          requests:\n            cpu: 500m\n            memory: 1Gi\n        livenessProbe:\n          exec:\n            command: [\"mysqladmin\", \"ping\", \"-uroot\", \"-p${MYSQL_ROOT_PASSWORD}\"]\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          exec:\n            command: [\"mysqladmin\", \"ping\", \"-uroot\", \"-p${MYSQL_ROOT_PASSWORD}\"]\n          initialDelaySeconds: 5\n          periodSeconds: 2\n          timeoutSeconds: 1\n      - name: xtrabackup\n        image: gcr.io/google-samples/xtrabackup:1.0\n        ports:\n        - name: xtrabackup\n          containerPort: 3307\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: password\n        command:\n        - bash\n        - \"-c\"\n        - |\n          set -ex\n          cd /var/lib/mysql\n          # 从备份信息文件里读取 MASTER_LOG_FILE 和 MASTER_LOG_POS 这 2 个字段的值，用来拼装集群初始化 SQL\n          if [[ -f xtrabackup_slave_info ]]; then\n            # 如果 xtrabackup_slave_info 文件存在，说明这个备份数据来自于另一个 Slave 节点\n            # 这种情况下，XtraBackup 工具在备份的时候，就已经在这个文件里自动生成了 \"CHANGE MASTER TO\" SQL 语句\n            # 所以，只需要把这个文件重命名为 change_master_to.sql.in，后面直接使用即可\n            mv xtrabackup_slave_info change_master_to.sql.in\n            # 所以，也就用不着 xtrabackup_binlog_info 了\n            rm -f xtrabackup_binlog_info\n          elif [[ -f xtrabackup_binlog_info ]]; then\n            # 如果只是存在 xtrabackup_binlog_info 文件，说明备份来自于 Master 节点，就需要解析这个备份信息文件，读取所需的两个字段的值\n            [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1\n            rm xtrabackup_binlog_info\n            # 把两个字段的值拼装成 SQL，写入 change_master_to.sql.in 文件\n            echo \"CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\\\n                  MASTER_LOG_POS=${BASH_REMATCH[2]}\" > change_master_to.sql.in\n          fi\n          # 如果存在 change_master_to.sql.in，就意味着需要做集群初始化工作\n          if [[ -f change_master_to.sql.in ]]; then\n            # 但一定要先等 MySQL 容器启动之后才能进行下一步连接 MySQL 的操作\n            echo \"Waiting for mysqld to be ready（accepting connections）\"\n            until mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} -e \"SELECT 1\"; do sleep 1; done\n            echo \"Initializing replication from clone position\"\n            # 将文件 change_master_to.sql.in 改个名字\n            # 防止这个 Container 重启的时候，因为又找到了 change_master_to.sql.in，从而重复执行一遍初始化流程\n            mv change_master_to.sql.in change_master_to.sql.orig\n            # 使用 change_master_to.sql.orig 的内容，也就是前面拼装的 SQL，组成一个完整的初始化和启动 Slave 的 SQL 语句\n            mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} << EOF\n          $(< change_master_to.sql.orig),\n            MASTER_HOST='mysql-0.mysql.mysql',\n            MASTER_USER='root',\n            MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}',\n            MASTER_CONNECT_RETRY=10;\n          START SLAVE;\n          EOF\n          fi\n          # 使用 ncat 监听 3307 端口。\n          # 它的作用是，在收到传输请求的时候，直接执行 xtrabackup --backup 命令，备份 MySQL 的数据并发送给请求者\n          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \\\n            \"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=${MYSQL_ROOT_PASSWORD}\"\n        volumeMounts:\n        - name: data\n          mountPath: /var/lib/mysql\n          subPath: mysql\n        - name: conf\n          mountPath: /etc/mysql/conf.d\n      volumes:\n      - name: conf\n        emptyDir: {}\n      - name: config-map\n        configMap:\n          name: mysql\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes:\n      - \"ReadWriteOnce\"\n      storageClassName: local-storage\n      resources:\n        requests:\n          storage: 3Gi\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 验证服务\n\n## 验证主从\n\n执行下面命令：\n\n```bash\nkubectl -n mysql exec mysql-1 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'show slave status \\G'\"\n```\n\n<img src=\"./zhucong.png\" style=\"zoom:70%;\" />\n\n\n\n> 证明组从同步是正常的\n\n\n\n## 插入数据查看同步\n\n在master上插入数据：\n\n```bash\nkubectl -n mysql exec mysql-0 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'create database test’\"\n\nkubectl -n mysql exec mysql-0 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;create table counter(c int);’\"\n\nkubectl -n mysql exec mysql-0 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;insert into counter values(123)’\"\n```\n\n\n\n在slave上查看数据是否同步：\n\n```bash\nkubectl -n mysql exec mysql-1 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;select * from counter’\"  \n```\n\n\n\n<br>\n\n\n\n# 扩展集群\n\n目前这样的集群是支持slave水平扩展的，只需要增加statefulset的副本数即可：\n\n```bash\nkubectl -n mysql scale statefulset mysql -—replicas=3\n```\n\n\n\n然后新的节点也会自动同步：\n\n```bash\nkubectl -n mysql exec mysql-2 -c mysql -- bash -c \"mysql -uroot -p123456 -e 'use test;select * from counter’\"  \n```\n\n","slug":"在k8s中部署mysql主从集群","published":1,"updated":"2021-03-20T12:02:46.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5x0018p0kl2u9i3550","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个mysql 5.7 版本的主从同步集群</p><p>更新于 2021-03-20</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><ul>\n<li>搭建一个master-slave集群；</li>\n<li>读操作可以在master和slave上进行；</li>\n<li>写操作只能在master上进行；</li>\n<li>slave从master同步数据；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"创建相关文件\"><a href=\"#创建相关文件\" class=\"headerlink\" title=\"创建相关文件\"></a>创建相关文件</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">namespace</button></li><li class=\"tab\"><button data-href=\"#comments-2\">configmap</button></li><li class=\"tab\"><button data-href=\"#comments-3\">secret</button></li><li class=\"tab\"><button data-href=\"#comments-4\">service</button></li><li class=\"tab\"><button data-href=\"#comments-5\">statefulset</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">master.cnf:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\"># Master配置</span></span><br><span class=\"line\">    [<span class=\"string\">mysqld</span>]</span><br><span class=\"line\">    <span class=\"string\">log-bin=mysqllog</span></span><br><span class=\"line\">    <span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\">  <span class=\"attr\">slave.cnf:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\"># Slave配置</span></span><br><span class=\"line\">    [<span class=\"string\">mysqld</span>]</span><br><span class=\"line\">    <span class=\"string\">super-read-only</span></span><br><span class=\"line\">    <span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\">    <span class=\"string\">log-bin=mysql-bin</span></span><br><span class=\"line\">    <span class=\"string\">replicate-ignore-db=mysql</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">MTIzNDU2</span> <span class=\"comment\"># echo -n &quot;123456&quot; | base64</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-read</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">init-mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">bash</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">set</span> <span class=\"string\">-ex</span></span><br><span class=\"line\">          <span class=\"comment\"># 从 Pod 的序号，生成 server-id</span></span><br><span class=\"line\">          [[ <span class=\"string\">$(hostname)</span> <span class=\"string\">=~</span> <span class=\"string\">-(</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]<span class=\"string\">+)$</span> ]] <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"string\">ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class=\"line\">          <span class=\"string\">echo</span> [<span class=\"string\">mysqld</span>] <span class=\"string\">&gt;</span> <span class=\"string\">/mnt/conf.d/server-id.cnf</span></span><br><span class=\"line\">          <span class=\"comment\"># 由于 server-id 不能为 0，因此给 ID 加 100 来避开它</span></span><br><span class=\"line\">          <span class=\"string\">echo</span> <span class=\"string\">server-id=$((100</span> <span class=\"string\">+</span> <span class=\"string\">$ordinal))</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/mnt/conf.d/server-id.cnf</span></span><br><span class=\"line\">          <span class=\"comment\"># 如果 Pod 的序号为 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d 目录下</span></span><br><span class=\"line\">          <span class=\"comment\"># 否则，拷贝 ConfigMap 里的 Slave 的配置文件</span></span><br><span class=\"line\">          <span class=\"string\">if</span> [[ <span class=\"string\">$</span>&#123;<span class=\"string\">ordinal</span>&#125; <span class=\"string\">-eq</span> <span class=\"number\">0</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"string\">cp</span> <span class=\"string\">/mnt/config-map/master.cnf</span> <span class=\"string\">/mnt/conf.d</span></span><br><span class=\"line\">          <span class=\"string\">else</span></span><br><span class=\"line\">            <span class=\"string\">cp</span> <span class=\"string\">/mnt/config-map/slave.cnf</span> <span class=\"string\">/mnt/conf.d</span></span><br><span class=\"line\">          <span class=\"string\">fi</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/mnt/conf.d</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-map</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/mnt/config-map</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">clone-mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">gcr.io/google-samples/xtrabackup:1.0</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">bash</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">set</span> <span class=\"string\">-ex</span></span><br><span class=\"line\">          <span class=\"comment\"># 拷贝操作只需要在第一次启动时进行，所以数据已经存在则跳过</span></span><br><span class=\"line\">          [[ <span class=\"string\">-d</span> <span class=\"string\">/var/lib/mysql/mysql</span> ]] <span class=\"string\">&amp;&amp;</span> <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"comment\"># Master 节点（序号为 0）不需要这个操作</span></span><br><span class=\"line\">          [[ <span class=\"string\">$(hostname)</span> <span class=\"string\">=~</span> <span class=\"string\">-(</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]<span class=\"string\">+)$</span> ]] <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"string\">ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class=\"line\">          [[ <span class=\"string\">$ordinal</span> <span class=\"string\">==</span> <span class=\"number\">0</span> ]] <span class=\"string\">&amp;&amp;</span> <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"comment\"># 使用 ncat 指令，远程地从前一个节点拷贝数据到本地</span></span><br><span class=\"line\">          <span class=\"string\">ncat</span> <span class=\"string\">--recv-only</span> <span class=\"string\">mysql-$(($ordinal-1)).mysql</span> <span class=\"number\">3307</span> <span class=\"string\">|</span> <span class=\"string\">xbstream</span> <span class=\"string\">-x</span> <span class=\"string\">-C</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"comment\"># 执行 --prepare，这样拷贝来的数据就可以用作恢复了</span></span><br><span class=\"line\">          <span class=\"string\">xtrabackup</span> <span class=\"string\">--prepare</span> <span class=\"string\">--target-dir=/var/lib/mysql</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/mysql/conf.d</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: MYSQL_ALLOW_EMPTY_PASSWORD</span></span><br><span class=\"line\"><span class=\"comment\">#          value: &quot;1&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">          <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/mysql/conf.d</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;mysqladmin&quot;</span>, <span class=\"string\">&quot;ping&quot;</span>, <span class=\"string\">&quot;-uroot&quot;</span>, <span class=\"string\">&quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span>]</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;mysqladmin&quot;</span>, <span class=\"string\">&quot;ping&quot;</span>, <span class=\"string\">&quot;-uroot&quot;</span>, <span class=\"string\">&quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span>]</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">2</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">xtrabackup</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">gcr.io/google-samples/xtrabackup:1.0</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">xtrabackup</span></span><br><span class=\"line\">          <span class=\"attr\">containerPort:</span> <span class=\"number\">3307</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">bash</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">set</span> <span class=\"string\">-ex</span></span><br><span class=\"line\">          <span class=\"string\">cd</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"comment\"># 从备份信息文件里读取 MASTER_LOG_FILE 和 MASTER_LOG_POS 这 2 个字段的值，用来拼装集群初始化 SQL</span></span><br><span class=\"line\">          <span class=\"string\">if</span> [[ <span class=\"string\">-f</span> <span class=\"string\">xtrabackup_slave_info</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果 xtrabackup_slave_info 文件存在，说明这个备份数据来自于另一个 Slave 节点</span></span><br><span class=\"line\">            <span class=\"comment\"># 这种情况下，XtraBackup 工具在备份的时候，就已经在这个文件里自动生成了 &quot;CHANGE MASTER TO&quot; SQL 语句</span></span><br><span class=\"line\">            <span class=\"comment\"># 所以，只需要把这个文件重命名为 change_master_to.sql.in，后面直接使用即可</span></span><br><span class=\"line\">            <span class=\"string\">mv</span> <span class=\"string\">xtrabackup_slave_info</span> <span class=\"string\">change_master_to.sql.in</span></span><br><span class=\"line\">            <span class=\"comment\"># 所以，也就用不着 xtrabackup_binlog_info 了</span></span><br><span class=\"line\">            <span class=\"string\">rm</span> <span class=\"string\">-f</span> <span class=\"string\">xtrabackup_binlog_info</span></span><br><span class=\"line\">          <span class=\"string\">elif</span> [[ <span class=\"string\">-f</span> <span class=\"string\">xtrabackup_binlog_info</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果只是存在 xtrabackup_binlog_info 文件，说明备份来自于 Master 节点，就需要解析这个备份信息文件，读取所需的两个字段的值</span></span><br><span class=\"line\">            [[ <span class=\"string\">$(cat</span> <span class=\"string\">xtrabackup_binlog_info)</span> <span class=\"string\">=~</span> <span class=\"string\">^(.*?)</span>[[<span class=\"string\">:space:</span>]]<span class=\"string\">+(.*?)$</span> ]] <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"string\">rm</span> <span class=\"string\">xtrabackup_binlog_info</span></span><br><span class=\"line\">            <span class=\"comment\"># 把两个字段的值拼装成 SQL，写入 change_master_to.sql.in 文件</span></span><br><span class=\"line\">            <span class=\"string\">echo</span> <span class=\"string\">&quot;CHANGE MASTER TO MASTER_LOG_FILE=&#x27;$&#123;BASH_REMATCH[1]&#125;&#x27;,\\</span></span><br><span class=\"line\"><span class=\"string\">                  MASTER_LOG_POS=$&#123;BASH_REMATCH[2]&#125;&quot;</span> <span class=\"string\">&gt;</span> <span class=\"string\">change_master_to.sql.in</span></span><br><span class=\"line\">          <span class=\"string\">fi</span></span><br><span class=\"line\">          <span class=\"comment\"># 如果存在 change_master_to.sql.in，就意味着需要做集群初始化工作</span></span><br><span class=\"line\">          <span class=\"string\">if</span> [[ <span class=\"string\">-f</span> <span class=\"string\">change_master_to.sql.in</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"comment\"># 但一定要先等 MySQL 容器启动之后才能进行下一步连接 MySQL 的操作</span></span><br><span class=\"line\">            <span class=\"string\">echo</span> <span class=\"string\">&quot;Waiting for mysqld to be ready（accepting connections）&quot;</span></span><br><span class=\"line\">            <span class=\"string\">until</span> <span class=\"string\">mysql</span> <span class=\"string\">-h</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"string\">-uroot</span> <span class=\"string\">-p$&#123;MYSQL_ROOT_PASSWORD&#125;</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;SELECT 1&quot;</span><span class=\"string\">;</span> <span class=\"string\">do</span> <span class=\"string\">sleep</span> <span class=\"number\">1</span><span class=\"string\">;</span> <span class=\"string\">done</span></span><br><span class=\"line\">            <span class=\"string\">echo</span> <span class=\"string\">&quot;Initializing replication from clone position&quot;</span></span><br><span class=\"line\">            <span class=\"comment\"># 将文件 change_master_to.sql.in 改个名字</span></span><br><span class=\"line\">            <span class=\"comment\"># 防止这个 Container 重启的时候，因为又找到了 change_master_to.sql.in，从而重复执行一遍初始化流程</span></span><br><span class=\"line\">            <span class=\"string\">mv</span> <span class=\"string\">change_master_to.sql.in</span> <span class=\"string\">change_master_to.sql.orig</span></span><br><span class=\"line\">            <span class=\"comment\"># 使用 change_master_to.sql.orig 的内容，也就是前面拼装的 SQL，组成一个完整的初始化和启动 Slave 的 SQL 语句</span></span><br><span class=\"line\">            <span class=\"string\">mysql</span> <span class=\"string\">-h</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"string\">-uroot</span> <span class=\"string\">-p$&#123;MYSQL_ROOT_PASSWORD&#125;</span> <span class=\"string\">&lt;&lt;</span> <span class=\"string\">EOF</span></span><br><span class=\"line\">          <span class=\"string\">$(&lt;</span> <span class=\"string\">change_master_to.sql.orig),</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_HOST=&#x27;mysql-0.mysql.mysql&#x27;,</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_USER=&#x27;root&#x27;,</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_PASSWORD=&#x27;$&#123;MYSQL_ROOT_PASSWORD&#125;&#x27;,</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_CONNECT_RETRY=10;</span></span><br><span class=\"line\">          <span class=\"string\">START</span> <span class=\"string\">SLAVE;</span></span><br><span class=\"line\">          <span class=\"string\">EOF</span></span><br><span class=\"line\">          <span class=\"string\">fi</span></span><br><span class=\"line\">          <span class=\"comment\"># 使用 ncat 监听 3307 端口。</span></span><br><span class=\"line\">          <span class=\"comment\"># 它的作用是，在收到传输请求的时候，直接执行 xtrabackup --backup 命令，备份 MySQL 的数据并发送给请求者</span></span><br><span class=\"line\">          <span class=\"string\">exec</span> <span class=\"string\">ncat</span> <span class=\"string\">--listen</span> <span class=\"string\">--keep-open</span> <span class=\"string\">--send-only</span> <span class=\"string\">--max-conns=1</span> <span class=\"number\">3307</span> <span class=\"string\">-c</span> <span class=\"string\">\\</span></span><br><span class=\"line\">            <span class=\"string\">&quot;xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/mysql/conf.d</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">        <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-map</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ReadWriteOnce&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">local-storage</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">3Gi</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"验证服务\"><a href=\"#验证服务\" class=\"headerlink\" title=\"验证服务\"></a>验证服务</h1><h2 id=\"验证主从\"><a href=\"#验证主从\" class=\"headerlink\" title=\"验证主从\"></a>验证主从</h2><p>执行下面命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-1 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;show slave status \\G&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./zhucong.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>证明组从同步是正常的</p>\n</blockquote>\n<h2 id=\"插入数据查看同步\"><a href=\"#插入数据查看同步\" class=\"headerlink\" title=\"插入数据查看同步\"></a>插入数据查看同步</h2><p>在master上插入数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-0 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;create database test’&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-0 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;create table counter(c int);’&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-0 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;insert into counter values(123)’&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在slave上查看数据是否同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-1 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;select * from counter’&quot;</span>  </span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"扩展集群\"><a href=\"#扩展集群\" class=\"headerlink\" title=\"扩展集群\"></a>扩展集群</h1><p>目前这样的集群是支持slave水平扩展的，只需要增加statefulset的副本数即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql scale statefulset mysql -—replicas=3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后新的节点也会自动同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-2 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;select * from counter’&quot;</span>  </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个mysql 5.7 版本的主从同步集群</p><p>更新于 2021-03-20</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h1><ul>\n<li>搭建一个master-slave集群；</li>\n<li>读操作可以在master和slave上进行；</li>\n<li>写操作只能在master上进行；</li>\n<li>slave从master同步数据；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"创建相关文件\"><a href=\"#创建相关文件\" class=\"headerlink\" title=\"创建相关文件\"></a>创建相关文件</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">namespace</button></li><li class=\"tab\"><button data-href=\"#comments-2\">configmap</button></li><li class=\"tab\"><button data-href=\"#comments-3\">secret</button></li><li class=\"tab\"><button data-href=\"#comments-4\">service</button></li><li class=\"tab\"><button data-href=\"#comments-5\">statefulset</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">master.cnf:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\"># Master配置</span></span><br><span class=\"line\">    [<span class=\"string\">mysqld</span>]</span><br><span class=\"line\">    <span class=\"string\">log-bin=mysqllog</span></span><br><span class=\"line\">    <span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\">  <span class=\"attr\">slave.cnf:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\"># Slave配置</span></span><br><span class=\"line\">    [<span class=\"string\">mysqld</span>]</span><br><span class=\"line\">    <span class=\"string\">super-read-only</span></span><br><span class=\"line\">    <span class=\"string\">skip-name-resolve</span></span><br><span class=\"line\">    <span class=\"string\">log-bin=mysql-bin</span></span><br><span class=\"line\">    <span class=\"string\">replicate-ignore-db=mysql</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">MTIzNDU2</span> <span class=\"comment\"># echo -n &quot;123456&quot; | base64</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql-read</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">init-mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">bash</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">set</span> <span class=\"string\">-ex</span></span><br><span class=\"line\">          <span class=\"comment\"># 从 Pod 的序号，生成 server-id</span></span><br><span class=\"line\">          [[ <span class=\"string\">$(hostname)</span> <span class=\"string\">=~</span> <span class=\"string\">-(</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]<span class=\"string\">+)$</span> ]] <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"string\">ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class=\"line\">          <span class=\"string\">echo</span> [<span class=\"string\">mysqld</span>] <span class=\"string\">&gt;</span> <span class=\"string\">/mnt/conf.d/server-id.cnf</span></span><br><span class=\"line\">          <span class=\"comment\"># 由于 server-id 不能为 0，因此给 ID 加 100 来避开它</span></span><br><span class=\"line\">          <span class=\"string\">echo</span> <span class=\"string\">server-id=$((100</span> <span class=\"string\">+</span> <span class=\"string\">$ordinal))</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">/mnt/conf.d/server-id.cnf</span></span><br><span class=\"line\">          <span class=\"comment\"># 如果 Pod 的序号为 0，说明它是 Master 节点，从 ConfigMap 里把 Master 的配置文件拷贝到 /mnt/conf.d 目录下</span></span><br><span class=\"line\">          <span class=\"comment\"># 否则，拷贝 ConfigMap 里的 Slave 的配置文件</span></span><br><span class=\"line\">          <span class=\"string\">if</span> [[ <span class=\"string\">$</span>&#123;<span class=\"string\">ordinal</span>&#125; <span class=\"string\">-eq</span> <span class=\"number\">0</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"string\">cp</span> <span class=\"string\">/mnt/config-map/master.cnf</span> <span class=\"string\">/mnt/conf.d</span></span><br><span class=\"line\">          <span class=\"string\">else</span></span><br><span class=\"line\">            <span class=\"string\">cp</span> <span class=\"string\">/mnt/config-map/slave.cnf</span> <span class=\"string\">/mnt/conf.d</span></span><br><span class=\"line\">          <span class=\"string\">fi</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/mnt/conf.d</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-map</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/mnt/config-map</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">clone-mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">gcr.io/google-samples/xtrabackup:1.0</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">bash</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">set</span> <span class=\"string\">-ex</span></span><br><span class=\"line\">          <span class=\"comment\"># 拷贝操作只需要在第一次启动时进行，所以数据已经存在则跳过</span></span><br><span class=\"line\">          [[ <span class=\"string\">-d</span> <span class=\"string\">/var/lib/mysql/mysql</span> ]] <span class=\"string\">&amp;&amp;</span> <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"comment\"># Master 节点（序号为 0）不需要这个操作</span></span><br><span class=\"line\">          [[ <span class=\"string\">$(hostname)</span> <span class=\"string\">=~</span> <span class=\"string\">-(</span>[<span class=\"number\">0</span><span class=\"number\">-9</span>]<span class=\"string\">+)$</span> ]] <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"string\">ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class=\"line\">          [[ <span class=\"string\">$ordinal</span> <span class=\"string\">==</span> <span class=\"number\">0</span> ]] <span class=\"string\">&amp;&amp;</span> <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"comment\"># 使用 ncat 指令，远程地从前一个节点拷贝数据到本地</span></span><br><span class=\"line\">          <span class=\"string\">ncat</span> <span class=\"string\">--recv-only</span> <span class=\"string\">mysql-$(($ordinal-1)).mysql</span> <span class=\"number\">3307</span> <span class=\"string\">|</span> <span class=\"string\">xbstream</span> <span class=\"string\">-x</span> <span class=\"string\">-C</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"comment\"># 执行 --prepare，这样拷贝来的数据就可以用作恢复了</span></span><br><span class=\"line\">          <span class=\"string\">xtrabackup</span> <span class=\"string\">--prepare</span> <span class=\"string\">--target-dir=/var/lib/mysql</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/mysql/conf.d</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"comment\">#        - name: MYSQL_ALLOW_EMPTY_PASSWORD</span></span><br><span class=\"line\"><span class=\"comment\">#          value: &quot;1&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">          <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/mysql/conf.d</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;mysqladmin&quot;</span>, <span class=\"string\">&quot;ping&quot;</span>, <span class=\"string\">&quot;-uroot&quot;</span>, <span class=\"string\">&quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span>]</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">exec:</span></span><br><span class=\"line\">            <span class=\"attr\">command:</span> [<span class=\"string\">&quot;mysqladmin&quot;</span>, <span class=\"string\">&quot;ping&quot;</span>, <span class=\"string\">&quot;-uroot&quot;</span>, <span class=\"string\">&quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span>]</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">2</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">xtrabackup</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">gcr.io/google-samples/xtrabackup:1.0</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">xtrabackup</span></span><br><span class=\"line\">          <span class=\"attr\">containerPort:</span> <span class=\"number\">3307</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">mysql-secret</span></span><br><span class=\"line\">              <span class=\"attr\">key:</span> <span class=\"string\">password</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">bash</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">set</span> <span class=\"string\">-ex</span></span><br><span class=\"line\">          <span class=\"string\">cd</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"comment\"># 从备份信息文件里读取 MASTER_LOG_FILE 和 MASTER_LOG_POS 这 2 个字段的值，用来拼装集群初始化 SQL</span></span><br><span class=\"line\">          <span class=\"string\">if</span> [[ <span class=\"string\">-f</span> <span class=\"string\">xtrabackup_slave_info</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果 xtrabackup_slave_info 文件存在，说明这个备份数据来自于另一个 Slave 节点</span></span><br><span class=\"line\">            <span class=\"comment\"># 这种情况下，XtraBackup 工具在备份的时候，就已经在这个文件里自动生成了 &quot;CHANGE MASTER TO&quot; SQL 语句</span></span><br><span class=\"line\">            <span class=\"comment\"># 所以，只需要把这个文件重命名为 change_master_to.sql.in，后面直接使用即可</span></span><br><span class=\"line\">            <span class=\"string\">mv</span> <span class=\"string\">xtrabackup_slave_info</span> <span class=\"string\">change_master_to.sql.in</span></span><br><span class=\"line\">            <span class=\"comment\"># 所以，也就用不着 xtrabackup_binlog_info 了</span></span><br><span class=\"line\">            <span class=\"string\">rm</span> <span class=\"string\">-f</span> <span class=\"string\">xtrabackup_binlog_info</span></span><br><span class=\"line\">          <span class=\"string\">elif</span> [[ <span class=\"string\">-f</span> <span class=\"string\">xtrabackup_binlog_info</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"comment\"># 如果只是存在 xtrabackup_binlog_info 文件，说明备份来自于 Master 节点，就需要解析这个备份信息文件，读取所需的两个字段的值</span></span><br><span class=\"line\">            [[ <span class=\"string\">$(cat</span> <span class=\"string\">xtrabackup_binlog_info)</span> <span class=\"string\">=~</span> <span class=\"string\">^(.*?)</span>[[<span class=\"string\">:space:</span>]]<span class=\"string\">+(.*?)$</span> ]] <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"string\">rm</span> <span class=\"string\">xtrabackup_binlog_info</span></span><br><span class=\"line\">            <span class=\"comment\"># 把两个字段的值拼装成 SQL，写入 change_master_to.sql.in 文件</span></span><br><span class=\"line\">            <span class=\"string\">echo</span> <span class=\"string\">&quot;CHANGE MASTER TO MASTER_LOG_FILE=&#x27;$&#123;BASH_REMATCH[1]&#125;&#x27;,\\</span></span><br><span class=\"line\"><span class=\"string\">                  MASTER_LOG_POS=$&#123;BASH_REMATCH[2]&#125;&quot;</span> <span class=\"string\">&gt;</span> <span class=\"string\">change_master_to.sql.in</span></span><br><span class=\"line\">          <span class=\"string\">fi</span></span><br><span class=\"line\">          <span class=\"comment\"># 如果存在 change_master_to.sql.in，就意味着需要做集群初始化工作</span></span><br><span class=\"line\">          <span class=\"string\">if</span> [[ <span class=\"string\">-f</span> <span class=\"string\">change_master_to.sql.in</span> ]]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">            <span class=\"comment\"># 但一定要先等 MySQL 容器启动之后才能进行下一步连接 MySQL 的操作</span></span><br><span class=\"line\">            <span class=\"string\">echo</span> <span class=\"string\">&quot;Waiting for mysqld to be ready（accepting connections）&quot;</span></span><br><span class=\"line\">            <span class=\"string\">until</span> <span class=\"string\">mysql</span> <span class=\"string\">-h</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"string\">-uroot</span> <span class=\"string\">-p$&#123;MYSQL_ROOT_PASSWORD&#125;</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;SELECT 1&quot;</span><span class=\"string\">;</span> <span class=\"string\">do</span> <span class=\"string\">sleep</span> <span class=\"number\">1</span><span class=\"string\">;</span> <span class=\"string\">done</span></span><br><span class=\"line\">            <span class=\"string\">echo</span> <span class=\"string\">&quot;Initializing replication from clone position&quot;</span></span><br><span class=\"line\">            <span class=\"comment\"># 将文件 change_master_to.sql.in 改个名字</span></span><br><span class=\"line\">            <span class=\"comment\"># 防止这个 Container 重启的时候，因为又找到了 change_master_to.sql.in，从而重复执行一遍初始化流程</span></span><br><span class=\"line\">            <span class=\"string\">mv</span> <span class=\"string\">change_master_to.sql.in</span> <span class=\"string\">change_master_to.sql.orig</span></span><br><span class=\"line\">            <span class=\"comment\"># 使用 change_master_to.sql.orig 的内容，也就是前面拼装的 SQL，组成一个完整的初始化和启动 Slave 的 SQL 语句</span></span><br><span class=\"line\">            <span class=\"string\">mysql</span> <span class=\"string\">-h</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"string\">-uroot</span> <span class=\"string\">-p$&#123;MYSQL_ROOT_PASSWORD&#125;</span> <span class=\"string\">&lt;&lt;</span> <span class=\"string\">EOF</span></span><br><span class=\"line\">          <span class=\"string\">$(&lt;</span> <span class=\"string\">change_master_to.sql.orig),</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_HOST=&#x27;mysql-0.mysql.mysql&#x27;,</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_USER=&#x27;root&#x27;,</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_PASSWORD=&#x27;$&#123;MYSQL_ROOT_PASSWORD&#125;&#x27;,</span></span><br><span class=\"line\">            <span class=\"string\">MASTER_CONNECT_RETRY=10;</span></span><br><span class=\"line\">          <span class=\"string\">START</span> <span class=\"string\">SLAVE;</span></span><br><span class=\"line\">          <span class=\"string\">EOF</span></span><br><span class=\"line\">          <span class=\"string\">fi</span></span><br><span class=\"line\">          <span class=\"comment\"># 使用 ncat 监听 3307 端口。</span></span><br><span class=\"line\">          <span class=\"comment\"># 它的作用是，在收到传输请求的时候，直接执行 xtrabackup --backup 命令，备份 MySQL 的数据并发送给请求者</span></span><br><span class=\"line\">          <span class=\"string\">exec</span> <span class=\"string\">ncat</span> <span class=\"string\">--listen</span> <span class=\"string\">--keep-open</span> <span class=\"string\">--send-only</span> <span class=\"string\">--max-conns=1</span> <span class=\"number\">3307</span> <span class=\"string\">-c</span> <span class=\"string\">\\</span></span><br><span class=\"line\">            <span class=\"string\">&quot;xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/mysql/conf.d</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">        <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-map</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ReadWriteOnce&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">local-storage</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">3Gi</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"验证服务\"><a href=\"#验证服务\" class=\"headerlink\" title=\"验证服务\"></a>验证服务</h1><h2 id=\"验证主从\"><a href=\"#验证主从\" class=\"headerlink\" title=\"验证主从\"></a>验证主从</h2><p>执行下面命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-1 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;show slave status \\G&#x27;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"./zhucong.png\" style=\"zoom:70%;\" />\n\n\n\n<blockquote>\n<p>证明组从同步是正常的</p>\n</blockquote>\n<h2 id=\"插入数据查看同步\"><a href=\"#插入数据查看同步\" class=\"headerlink\" title=\"插入数据查看同步\"></a>插入数据查看同步</h2><p>在master上插入数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-0 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;create database test’&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-0 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;create table counter(c int);’&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-0 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;insert into counter values(123)’&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在slave上查看数据是否同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-1 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;select * from counter’&quot;</span>  </span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"扩展集群\"><a href=\"#扩展集群\" class=\"headerlink\" title=\"扩展集群\"></a>扩展集群</h1><p>目前这样的集群是支持slave水平扩展的，只需要增加statefulset的副本数即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql scale statefulset mysql -—replicas=3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后新的节点也会自动同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl -n mysql <span class=\"built_in\">exec</span> mysql-2 -c mysql -- bash -c <span class=\"string\">&quot;mysql -uroot -p123456 -e &#x27;use test;select * from counter’&quot;</span>  </span><br></pre></td></tr></table></figure>\n\n"},{"title":"在k8s中部署redis集群","date":"2021-03-20T11:28:27.000Z","description":"在k8s中部署一个高可用redis集群","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618831808&t=b7f7e1ea802b755f7896decb0502c6a3","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个redis 5.0.5 版本的集群\n\n更新于 2021-03-20\n\n{% endnote %}\n\n<br>\n\n\n\n# 创建相关文件\n\n{% tabs comments %}\n\n<!-- tab configmap -->\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis-cluster\ndata:\n  update-node.sh: |\n    #!/bin/sh\n    REDIS_NODES=\"/data/nodes.conf\"\n    sed -i -e \"/myself/ s/[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}/${POD_IP}/\" ${REDIS_NODES}\n    exec \"$@\"\n  redis.conf: |+\n    cluster-enabled yes\n    cluster-require-full-coverage no\n    cluster-node-timeout 15000\n    cluster-config-file /data/nodes.conf\n    cluster-migration-barrier 1\n    appendonly yes\n    protected-mode no\n```\n\n<!-- endtab -->\n\n<!-- tab statefulset -->\n\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: redis-cluster\nspec:\n  serviceName: redis-cluster\n  replicas: 6\n  selector:\n    matchLabels:\n      app: redis-cluster\n  template:\n    metadata:\n      labels:\n        app: redis-cluster\n    spec:\n      containers:\n      - name: redis\n        image: redis:5.0.5-alpine\n        ports:\n        - containerPort: 6379\n          name: client\n        - containerPort: 16379\n          name: gossip\n        command: [\"/conf/update-node.sh\", \"redis-server\", \"/conf/redis.conf\"]\n        env:\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        volumeMounts:\n        - name: conf\n          mountPath: /conf\n          readOnly: false\n        - name: data\n          mountPath: /data\n          readOnly: false\n      volumes:\n      - name: conf\n        configMap:\n          name: redis-cluster\n          defaultMode: 0755\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 5Gi\n      storageClassName: standard\n```\n\n<!-- endtab -->\n\n<!-- tab service -->\n\n```yaml\napiVersion: v1  \nkind: Service  \nmetadata:  \n  name: redis-cluster  \nspec:  \n  type: ClusterIP  \n  ports:  \n  - port: 6379  \n    targetPort: 6379  \n    name: client  \n  - port: 16379  \n    targetPort: 16379  \n    name: gossip  \n  selector:  \n    app: redis-cluster  \n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# 创建服务\n\n执行下面的命令创建服务：\n\n```bash\nkubectl apply -f configmap.yaml\nkubectl apply -f statefulset.yaml\nkubectl apply -f service.yaml\n```\n\n<img src=\"./create.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n# 初始化集群\n\n将前三个节点作为主，后面节点作为从：\n\n```bash\nkubectl exec -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath='{range.items[*]}{.status.podIP}:6379 ')  \n```\n\n<img src=\"./cluster.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n# 验证集群\n\n使用下面的命令验证集群是否正常：\n\n```bash\nkubectl exec -it redis-cluster-0 -- redis-cli cluster info  \n\nfor x in $(seq 0 5); do echo \"redis-cluster-$x\"; kubectl exec redis-cluster-$x -- redis-cli role; echo; done \n```\n\n<img src=\"./info.png\" style=\"zoom:70%;\" />\n\n<img src=\"./detail.png\" style=\"zoom:70%;\" />\n\n","source":"_posts/在k8s中部署redis集群.md","raw":"---\ntitle: 在k8s中部署redis集群\ndate: 2021-03-20 19:28:27\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 部署\ndescription: 在k8s中部署一个高可用redis集群\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618831808&t=b7f7e1ea802b755f7896decb0502c6a3\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个redis 5.0.5 版本的集群\n\n更新于 2021-03-20\n\n{% endnote %}\n\n<br>\n\n\n\n# 创建相关文件\n\n{% tabs comments %}\n\n<!-- tab configmap -->\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis-cluster\ndata:\n  update-node.sh: |\n    #!/bin/sh\n    REDIS_NODES=\"/data/nodes.conf\"\n    sed -i -e \"/myself/ s/[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}/${POD_IP}/\" ${REDIS_NODES}\n    exec \"$@\"\n  redis.conf: |+\n    cluster-enabled yes\n    cluster-require-full-coverage no\n    cluster-node-timeout 15000\n    cluster-config-file /data/nodes.conf\n    cluster-migration-barrier 1\n    appendonly yes\n    protected-mode no\n```\n\n<!-- endtab -->\n\n<!-- tab statefulset -->\n\n```yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: redis-cluster\nspec:\n  serviceName: redis-cluster\n  replicas: 6\n  selector:\n    matchLabels:\n      app: redis-cluster\n  template:\n    metadata:\n      labels:\n        app: redis-cluster\n    spec:\n      containers:\n      - name: redis\n        image: redis:5.0.5-alpine\n        ports:\n        - containerPort: 6379\n          name: client\n        - containerPort: 16379\n          name: gossip\n        command: [\"/conf/update-node.sh\", \"redis-server\", \"/conf/redis.conf\"]\n        env:\n        - name: POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n        volumeMounts:\n        - name: conf\n          mountPath: /conf\n          readOnly: false\n        - name: data\n          mountPath: /data\n          readOnly: false\n      volumes:\n      - name: conf\n        configMap:\n          name: redis-cluster\n          defaultMode: 0755\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 5Gi\n      storageClassName: standard\n```\n\n<!-- endtab -->\n\n<!-- tab service -->\n\n```yaml\napiVersion: v1  \nkind: Service  \nmetadata:  \n  name: redis-cluster  \nspec:  \n  type: ClusterIP  \n  ports:  \n  - port: 6379  \n    targetPort: 6379  \n    name: client  \n  - port: 16379  \n    targetPort: 16379  \n    name: gossip  \n  selector:  \n    app: redis-cluster  \n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# 创建服务\n\n执行下面的命令创建服务：\n\n```bash\nkubectl apply -f configmap.yaml\nkubectl apply -f statefulset.yaml\nkubectl apply -f service.yaml\n```\n\n<img src=\"./create.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n# 初始化集群\n\n将前三个节点作为主，后面节点作为从：\n\n```bash\nkubectl exec -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath='{range.items[*]}{.status.podIP}:6379 ')  \n```\n\n<img src=\"./cluster.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n# 验证集群\n\n使用下面的命令验证集群是否正常：\n\n```bash\nkubectl exec -it redis-cluster-0 -- redis-cli cluster info  \n\nfor x in $(seq 0 5); do echo \"redis-cluster-$x\"; kubectl exec redis-cluster-$x -- redis-cli role; echo; done \n```\n\n<img src=\"./info.png\" style=\"zoom:70%;\" />\n\n<img src=\"./detail.png\" style=\"zoom:70%;\" />\n\n","slug":"在k8s中部署redis集群","published":1,"updated":"2021-03-20T11:50:07.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5y001ap0kl0h2se7eu","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个redis 5.0.5 版本的集群</p><p>更新于 2021-03-20</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"创建相关文件\"><a href=\"#创建相关文件\" class=\"headerlink\" title=\"创建相关文件\"></a>创建相关文件</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">configmap</button></li><li class=\"tab\"><button data-href=\"#comments-2\">statefulset</button></li><li class=\"tab\"><button data-href=\"#comments-3\">service</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">update-node.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">    <span class=\"string\">REDIS_NODES=&quot;/data/nodes.conf&quot;</span></span><br><span class=\"line\">    <span class=\"string\">sed</span> <span class=\"string\">-i</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;/myself/ s/[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;/$&#123;POD_IP&#125;/&quot;</span> <span class=\"string\">$&#123;REDIS_NODES&#125;</span></span><br><span class=\"line\">    <span class=\"string\">exec</span> <span class=\"string\">&quot;$@&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">redis.conf:</span> <span class=\"string\">|+</span></span><br><span class=\"line\">    <span class=\"string\">cluster-enabled</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"string\">cluster-require-full-coverage</span> <span class=\"literal\">no</span></span><br><span class=\"line\">    <span class=\"string\">cluster-node-timeout</span> <span class=\"number\">15000</span></span><br><span class=\"line\">    <span class=\"string\">cluster-config-file</span> <span class=\"string\">/data/nodes.conf</span></span><br><span class=\"line\">    <span class=\"string\">cluster-migration-barrier</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">appendonly</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"string\">protected-mode</span> <span class=\"literal\">no</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">6</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">redis:5.0.5-alpine</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">16379</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">gossip</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/conf/update-node.sh&quot;</span>, <span class=\"string\">&quot;redis-server&quot;</span>, <span class=\"string\">&quot;/conf/redis.conf&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/conf</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">          <span class=\"attr\">defaultMode:</span> <span class=\"number\">0755</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span> [ <span class=\"string\">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">standard</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>  </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>  </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>  </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span>  </span><br><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span>  </span><br><span class=\"line\">  <span class=\"attr\">ports:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">6379</span>  </span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">6379</span>  </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">client</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">16379</span>  </span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">16379</span>  </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gossip</span>  </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>  </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">redis-cluster</span>  </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h1><p>执行下面的命令创建服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f configmap.yaml</span><br><span class=\"line\">kubectl apply -f statefulset.yaml</span><br><span class=\"line\">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./create.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n<h1 id=\"初始化集群\"><a href=\"#初始化集群\" class=\"headerlink\" title=\"初始化集群\"></a>初始化集群</h1><p>将前三个节点作为主，后面节点作为从：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath=<span class=\"string\">&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#x27;</span>)  </span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./cluster.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"验证集群\"><a href=\"#验证集群\" class=\"headerlink\" title=\"验证集群\"></a>验证集群</h1><p>使用下面的命令验证集群是否正常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it redis-cluster-0 -- redis-cli cluster info  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> $(seq 0 5); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;redis-cluster-<span class=\"variable\">$x</span>&quot;</span>; kubectl <span class=\"built_in\">exec</span> redis-cluster-<span class=\"variable\">$x</span> -- redis-cli role; <span class=\"built_in\">echo</span>; <span class=\"keyword\">done</span> </span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./info.png\" style=\"zoom:70%;\" />\n\n<img src= \"/img/loading.gif\" data-src=\"./detail.png\" style=\"zoom:70%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用有状态服务Statfulset方式部署一个redis 5.0.5 版本的集群</p><p>更新于 2021-03-20</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"创建相关文件\"><a href=\"#创建相关文件\" class=\"headerlink\" title=\"创建相关文件\"></a>创建相关文件</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">configmap</button></li><li class=\"tab\"><button data-href=\"#comments-2\">statefulset</button></li><li class=\"tab\"><button data-href=\"#comments-3\">service</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">update-node.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\">    <span class=\"string\">REDIS_NODES=&quot;/data/nodes.conf&quot;</span></span><br><span class=\"line\">    <span class=\"string\">sed</span> <span class=\"string\">-i</span> <span class=\"string\">-e</span> <span class=\"string\">&quot;/myself/ s/[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;\\.[0-9]\\&#123;1,3\\&#125;/$&#123;POD_IP&#125;/&quot;</span> <span class=\"string\">$&#123;REDIS_NODES&#125;</span></span><br><span class=\"line\">    <span class=\"string\">exec</span> <span class=\"string\">&quot;$@&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">redis.conf:</span> <span class=\"string\">|+</span></span><br><span class=\"line\">    <span class=\"string\">cluster-enabled</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"string\">cluster-require-full-coverage</span> <span class=\"literal\">no</span></span><br><span class=\"line\">    <span class=\"string\">cluster-node-timeout</span> <span class=\"number\">15000</span></span><br><span class=\"line\">    <span class=\"string\">cluster-config-file</span> <span class=\"string\">/data/nodes.conf</span></span><br><span class=\"line\">    <span class=\"string\">cluster-migration-barrier</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">appendonly</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"string\">protected-mode</span> <span class=\"literal\">no</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">6</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">redis:5.0.5-alpine</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">16379</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">gossip</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span> [<span class=\"string\">&quot;/conf/update-node.sh&quot;</span>, <span class=\"string\">&quot;redis-server&quot;</span>, <span class=\"string\">&quot;/conf/redis.conf&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/conf</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">          <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">conf</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span></span><br><span class=\"line\">          <span class=\"attr\">defaultMode:</span> <span class=\"number\">0755</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">accessModes:</span> [ <span class=\"string\">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">requests:</span></span><br><span class=\"line\">          <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">      <span class=\"attr\">storageClassName:</span> <span class=\"string\">standard</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span>  </span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span>  </span><br><span class=\"line\"><span class=\"attr\">metadata:</span>  </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-cluster</span>  </span><br><span class=\"line\"><span class=\"attr\">spec:</span>  </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span>  </span><br><span class=\"line\">  <span class=\"attr\">ports:</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">6379</span>  </span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">6379</span>  </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">client</span>  </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">16379</span>  </span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">16379</span>  </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gossip</span>  </span><br><span class=\"line\">  <span class=\"attr\">selector:</span>  </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">redis-cluster</span>  </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h1><p>执行下面的命令创建服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f configmap.yaml</span><br><span class=\"line\">kubectl apply -f statefulset.yaml</span><br><span class=\"line\">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"./create.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n<h1 id=\"初始化集群\"><a href=\"#初始化集群\" class=\"headerlink\" title=\"初始化集群\"></a>初始化集群</h1><p>将前三个节点作为主，后面节点作为从：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath=<span class=\"string\">&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#x27;</span>)  </span><br></pre></td></tr></table></figure>\n\n<img src=\"./cluster.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"验证集群\"><a href=\"#验证集群\" class=\"headerlink\" title=\"验证集群\"></a>验证集群</h1><p>使用下面的命令验证集群是否正常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it redis-cluster-0 -- redis-cli cluster info  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> $(seq 0 5); <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> <span class=\"string\">&quot;redis-cluster-<span class=\"variable\">$x</span>&quot;</span>; kubectl <span class=\"built_in\">exec</span> redis-cluster-<span class=\"variable\">$x</span> -- redis-cli role; <span class=\"built_in\">echo</span>; <span class=\"keyword\">done</span> </span><br></pre></td></tr></table></figure>\n\n<img src=\"./info.png\" style=\"zoom:70%;\" />\n\n<img src=\"./detail.png\" style=\"zoom:70%;\" />\n\n"},{"title":"常见类型命令操作","date":"2021-04-18T05:43:40.000Z","description":"介绍了redis多种常用数据类型的基本命令行操作","cover":"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2451921005,155161323&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis中常见的几种数据类型的基本命令行操作\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n# String类型\n\n> 字符串是redis中最基础的数据类型，最多可以容纳512M的数据长度。\n\n\n\n## 数据增删改查\n\n{% tabs comments %}\n\n<!-- tab 设置键值对 -->\n\n使用`set`指令可以在redis中存string类型的数据，格式如下：\n\n```bash\n# 存数据\nset [key] [value]\n```\n\n\n\n> redis数据都是键值对，所以需要一个key和对应的value；key不要过长，否则会消耗很多内存，最好有统一的命名规范保证可读性。\n\n<!-- endtab -->\n\n<!-- tab 查询key对应的value -->\n\n使用`get`指令可以在redis中取string类型的数据，格式如下：\n\n```bash\n# 取数据\nget [key]\n```\n\n\n\n<img src=\"set-get.png\" style=\"zoom:67%;\" />\n\n<!-- endtab -->\n\n<!-- tab 获取所有的key -->\n\n获取所有的key，可以使用如下的方式：\n\n<img src=\"./keys.png\" style=\"zoom:67%;\" />\n\n<!-- endtab -->\n\n<!-- tab 删除数据 -->\n\n使用`del`指令可以删除指定key下的数据，其格式如下：\n\n```shell\ndel [key]\n```\n\n\n\n例如：\n\n<img src=\"de-keys.png\" style=\"zoom:67%;\" />\n\n\n\n> 返回1说明删除成功，再次获取这个key对应的value的时候返回nil\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## getset重新赋值\n\n`getset`命令会先获取key对应的value值，然后在对key重新复制，其格式如下：\n\n```shell\ngetset [key] [value]\n```\n\n\n\n例如：\n\n<img src=\"./getset.png\" style=\"zoom:67%;\" />\n\n\n\n## value自增和自减\n\n`incr`和`decr`命令可以分别让key对应的value自增1和自减1：\n\n- 如果value是整型，则自增或自减1；\n- 如果无法转换成整型，则报错；\n- 如果key不存在，则创建这个key并并赋初始值0，然后自增或自减1；\n\n\n\n其格式如下：\n\n```shell\nincr [key]\ndecr [key]\n```\n\n\n\n###  数值类型自增\n\n<img src=\"./incr-decr.png\" style=\"zoom:67%;\" />\n\n\n\n### key不存在时\n\n<img src=\"./nokey.png\" style=\"zoom:67%;\" />\n\n\n\n### value无法转换为整型\n\n<img src=\"./nochange.png\" style=\"zoom:67%;\" />\n\n\n\n### 指定步长\n\n默认`incr`和`decr`的步长都是1，但是`incrby`和`decrby`可以指定自增和自减的步长单位，其用法和`incr`与`decr`一致，格式如下：\n\n```shell\nincrby [key] [步长]\ndecrby [key] [步长]\n```\n\n\n\n例如：\n\n<img src=\"./step.png\" style=\"zoom:67%;\" />\n\n\n\n## 字符串追加\n\n`append`命令可以在指定key的value后面追加字符串。如果key不存在，则会创建这个key并将需要追加的内容作为value赋值，其格式如下：\n\n```shell\nappend [key] [追加的内容]\n```\n\n\n\n例如：\n\n<img src=\"./append.png\" style=\"zoom:67%;\" />\n\n<br>\n\n\n\n# hash类型\n\nRedis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。Redis 中每个 hash 可以存储海量的键值对。\n\n<br>\n\n\n\n{% tabs comments %}\n\n<!-- tab 存取数据 -->\n\n使用`hset`和`hget`可以分别对hash类型的数据进行存取操作，`hset`和`hget`只能一次存入和读取一对键值对，使用`hmset`和`hmget`可以一次存入和读取多个键值对。\n\n\n\n使用hgetall可以获取到hash数据的所有值，其格式如下：\n\n```bash\nhset [key] [属性key] [属性value]\nhget [key] [属性的key] \nhmset [key] [属性key1] [属性value1] [属性key2] [属性value2]  ...\nhget [key] [属性的key1] [属性key2] ...\nhgetall [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-getset.png\" style=\"zoom: 50%;\" />\n\n<!-- endtab -->\n\n<!-- tab 删除数据 -->\n\n`hdel`和`del`可以删除hash类型数据中属性以及其值，格式如下：\n\n```bash\nhdel [key] [属性1] [属性2]...\ndel [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-del.png\" style=\"zoom: 50%;\" />\n\n\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n\n\n## hash类型自增\n\n`hincrby`操作可以给hash类型属性的值增加指定的单位，其格式如下：\n\n```bash\nhincrby [key] [属性] [步长]\n```\n\n\n\n例如：\n\n<img src=\"./hash-incry.png\" style=\"zoom:50%;\" />\n\n \n\n<br>\n\n\n\n## 获取所有属性名称和值\n\n`hkeys`和`hvals`分别可以获得hash中所有的keys和所有的values，其格式如下：\n\n```bash\nhkeys [key]\n\nhvals [ley]\n```\n\n\n\n例如：\n\n<img src=\"./hash-all.png\" style=\"zoom:50%;\" />\n\n \n\n## 获取属性的个数\n\n`hlen`可以获得hash中属性的个数，其格式如下：\n\n```bash\nhlen [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-hlen.png\" style=\"zoom:50%;\" />\n\n \n\n## 判断属性是否存在\n\n`hexists`可以判断hash中某个属性是否存在，存在则返回1，不存在则返回0，其格式如下：\n\n```bash\nhexists [key] [属性]\n```\n\n\n\n例如：\n\n<img src=\"./hash-exist.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# list类型\n\nlist类型是按照插入顺序排序的字符串列表，和数据结构中普通列表是一样的。可以在其头部和尾部插入新元素。插入时如果key不存在，则会为其创建新的列表；如果列表中的所有元素都被移除，那么这个key也会从数据库中移除。\n\n \n\n向列表头尾插入和删除元素是比较高效的。如果插入和删除操作位于列表中间，则效率比较低。\n\n \n\n## 列表两端添加\n\n`lpush`可以从左侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：\n\n```bash\nlpush [key] [value1] [value2] ...\n```\n\n\n\n 例如：\n\n<img src=\"./list-lpush.png\" style=\"zoom:50%;\" />\n\n> 第一次添加将创建名为mylist的列表，从返回值可以看出，经过两次添加，列表长度为6。先添加的数据会被后添加的数据挤到右侧。\n\n \n\n`rpush`可以从右侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：\n\n```bash\nrpush [key] [value1] [value2] ...\n```\n\n \n\n例如：\n\n<img src=\"./hash-rpush.png\" style=\"zoom:50%;\" />\n\n>  先添加的数据会被后添加的数据挤到左侧。\n\n <br>\n\n\n\n## 查看列表\n\n`lrange`可以从左侧为起点查看列表，`lrange`也可以指定起始和结束的索引位置，其格式如下：\n\n```bash\nlrange [key] [起始索引] [结束索引]\n```\n\n\n\n \n\n例如：\n\n<img src=\"./hash-lrange.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 两端弹出\n\n`lpop`和`rpop`可以实现左端和右端弹出列表第一个元素，如果不存在则弹出nil，其格式如下：\n\n```bash\nlpop [key] \nrpop [key] \n```\n\n\n\n例如：\n\n<img src=\"./hash-rpop.png\" style=\"zoom:50%;\" />\n\n> 注意，只要是弹出，则这个元素在列表中将不再存在。\n\n <br>\n\n\n\n## 获取元素个数\n\n`llen`可以获取指定list中的元素的个数，其格式如下：\n\n```bash\nllen [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-llen.png\" style=\"zoom:50%;\" />\n\n<br>\n\n \n\n## 在头部添加元素\n\n`lpushx`和`rpush`可以在指定的list的头部和尾部添加元素，其格式如下：\n\n```bash\nlpushx [key] [value]\nrpushx [key] [value]\n```\n\n\n\n \n\n例如：\n\n<img src=\"./hash-pushx.png\" style=\"zoom: 43%;\" />\n\n \n\n>  这种方式仅对已存在的list有效，如果指定的key为不存在的list，则返回0。\n\n <br>\n\n\n\n## 删除元素\n\n`lrem`可以删除在指定list中count个值为value的元素，如果count大于0则在删除时从头部到尾部依次遍历删除，如果count小于0则在删除时从尾部到头部部依次遍历删除，如果count为0则删除所有值为value的元素，其格式如下：\n\n```bash\nlrem [key] [count] [value]\n```\n\n\n\n例如：\n\n<img src=\"./hash-lrem.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 插入元素\n\n`lset`来通过索引来添加元素，其格式为：\n\n```bash\nlset [key] [index] [value]\n```\n\n\n\n例如：\n\n<img src=\"./hash-lset.png\" style=\"zoom:50%;\" /> \n\n\n\n使用`linsert`在指定的元素前或后插入新的元素，其格式如下：\n\n```bash\nlinsert [key] [before|after] [已存在的元素] [value] \n```\n\n\n\n例如：\n\n<img src=\"./hash-linsert.png\" style=\"zoom:43%;\" />\n\n<br>\n\n \n\n## rpoplpush指令\n\n`rpoplpush`指令可以将一个list的尾部元素弹出，并加入另一个list的头部，其格式如下：\n\n```bash\nrpoplpush [source list] [target list]\n```\n\n\n\n例如：\n\n<img src=\"./hash-lpoprpush.png\" style=\"zoom:43%;\" />\n\n \n\n这个指令的使用场景是：使用redis作为消息队列时，消费者从队列中取出数据进行处理。若此时消费者程序错误崩溃，那么此时取出的数据可以认为已经丢失，这将对业务数据的完整性造成影响。rpoplpush可以让消费者程序将消息从主队列取出放到备份队列中，实现备份的功能。\n\n \n\n\n\n<br>\n\n\n\n# set类型\n\nset类型可以看做没有排序的字符集合，可以对其执行添加、删除等操作。和list不同的是，set集合不允许出现重复元素。如果对set类型反复存入多个相同的元素，则只会保存一个。set最大包含40亿个元素。\n\n \n\n## 添加元素\n\n`sadd`可以向set中添加元素，其格式如下：\n\n```bash\nsadd [key] [value1] [value2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-add.png\" style=\"zoom:50%;\" />\n\n>  从返回值看，第二次添加a元素失败了，因为a已经存在，set不允许重复\n\n <br>\n\n\n\n## 查看元素\n\n`smembers`来查看set中的元素，其格式如下：\n\n```bash\nsmembers [key]\n```\n\n \n\n例如：\n\n<img src=\"./set-smembers.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 删除元素\n\n`srem`可以删除set中的元素，其格式如下：\n\n```bash\nsrem [key] [value1] [value2] ... \n```\n\n\n\n例如：\n\n<img src=\"./set-srem.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n## 判断元素是否存在\n\n`sismember`可以判断指定元素是否存在于set中，其格式如下：\n\n```bash\nsismember [key] [target]\n```\n\n\n\n例如：\n\n<img src=\"./set-sismember.png\" style=\"zoom:50%;\" />\n\n>  存在则返回1，不存在则返回0。\n\n <br>\n\n\n\n## 差集运算\n\n`sdiff`可以计算出两个set集合的差集，其格式如下：\n\n```bash\nsdiff [key1] [key2] ...\n```\n\n\n\n其中key的顺序将影响计算的结果，计算方式是第一个key中有的而后面key中没有的，例如：\n\n<img src=\"./set-sdiff.png\" style=\"zoom:43%;\" /> \n\n<br>\n\n\n\n可以使用`sdiffstore`将集合的差集存储到新的set中，其格式如下：\n\n```bash\nsdiffstore [new set] [key1] [key2] ...\n```\n\n \n\n例如：\n\n<img src=\"./set-sdiffstore.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n## 交集运算\n\n使用sinter可以计算set集合的交集，其格式如下：\n\n```bash\nsinter [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sinter.png\" style=\"zoom:50%;\" />\n\n \n\n<br>\n\n\n\n可以使用`sinterstore`将集合的交集存储到新的集合中，其格式如下：\n\n```bash\nsinterstore [new set] [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sinterstore.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 并集运算\n\n使用`sunion`可以计算集合的并集，其格式如下：\n\n```bash\nsunion [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sunion.png\" style=\"zoom:50%;\" />\n\n<br>\n\n \n\n可以使用`sunionstore`将集合的并集存储到新的set中，其格式如下:\n\n```bash\nsunionstore [new set] [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sunionstore.png\" style=\"zoom:44%;\" />\n\n<br>\n\n \n\n## 获取元素个数\n\n使用`scard`可以获取集合中元素的个数，其格式如下：\n\n```bash\nscard [key]\n```\n\n\n\n例如：\n\n<img src=\"./set-scard.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 随机返回set元素\n\n`srandmember`可以随机返回set中的一个元素，其格式如下：\n\n```bash\nsrandmember [key]\n```\n\n\n\n例如：\n\n<img src=\"./set-srandmember.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 其他操作\n\n## 查看key\n\nkeys指令如果跟上 * 则表示查看所有的key，也可以和正则表达式结合来查看指定规则的key，例如：\n\n```bash\n127.0.0.1:6379> keys my?\n\n1) \"my2\"\n\n2) \"my3\"\n\n127.0.0.1:6379> keys c*\n\n1) \"company\"\n```\n\n\n\n<br>\n\n \n\n## 判断key是否存在\n\n使用`exists`可以判断key是否存在，存在则返回1，不存在则返回0，例如：\n\n```bash\n127.0.0.1:6379> exists company\n\n(integer) 1\n\n127.0.0.1:6379> exists hello\n\n(integer) 0\n```\n\n\n\n <br>\n\n\n\n## key重命名\n\n使用`rename`可以将一个key重命名，例如：\n\n```bash\n127.0.0.1:6379> get company\n\n\"alibaba\"\n\n127.0.0.1:6379> rename company newcompany\n\nOK\n\n127.0.0.1:6379> get company\n\n(nil)\n\n127.0.0.1:6379> get newcompany\n\n\"alibaba\"\n```\n\n<br>\n\n \n\n## 设置key过期时间\n\n可以使用`expire`来设置key的过期时间，单位是秒，过期后key将被删除，配套使用ttl可以看到key所剩余的时间，例如：\n\n```bash\n127.0.0.1:6379> expire newcompany 10\n\n(integer) 1\n\n127.0.0.1:6379> ttl newcompany\n\n(integer) 1\n\n127.0.0.1:6379> get newcompany\n\n(nil)\n\n127.0.0.1:6379> ttl newcompany\n\n(integer) -2\n```\n\n\n\n***\\*没有设置超时时间的key在使用ttl指令时会返回-1。\\****\n\n\n\n<br>\n\n \n\n## 获取key的类型\n\n使用`type`可以获取到key的类型，例如：\n\n```bash\n127.0.0.1:6379> type myb2\n\nset\n\n127.0.0.1:6379> type mylist\n\nlist\n\n127.0.0.1:6379> type mysort\n\nzset\n\n127.0.0.1:6379> type qq\n\nstring\n\n127.0.0.1:6379> type myhash\n\nhash\n```","source":"_posts/常见类型命令操作.md","raw":"---\ntitle: 常见类型命令操作\ndate: 2021-04-18 13:43:40\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 常用操作\ndescription: 介绍了redis多种常用数据类型的基本命令行操作\ncover: https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2451921005,155161323&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis中常见的几种数据类型的基本命令行操作\n\n更新于 2021-04-18\n\n{% endnote %}\n\n<br>\n\n\n\n# String类型\n\n> 字符串是redis中最基础的数据类型，最多可以容纳512M的数据长度。\n\n\n\n## 数据增删改查\n\n{% tabs comments %}\n\n<!-- tab 设置键值对 -->\n\n使用`set`指令可以在redis中存string类型的数据，格式如下：\n\n```bash\n# 存数据\nset [key] [value]\n```\n\n\n\n> redis数据都是键值对，所以需要一个key和对应的value；key不要过长，否则会消耗很多内存，最好有统一的命名规范保证可读性。\n\n<!-- endtab -->\n\n<!-- tab 查询key对应的value -->\n\n使用`get`指令可以在redis中取string类型的数据，格式如下：\n\n```bash\n# 取数据\nget [key]\n```\n\n\n\n<img src=\"set-get.png\" style=\"zoom:67%;\" />\n\n<!-- endtab -->\n\n<!-- tab 获取所有的key -->\n\n获取所有的key，可以使用如下的方式：\n\n<img src=\"./keys.png\" style=\"zoom:67%;\" />\n\n<!-- endtab -->\n\n<!-- tab 删除数据 -->\n\n使用`del`指令可以删除指定key下的数据，其格式如下：\n\n```shell\ndel [key]\n```\n\n\n\n例如：\n\n<img src=\"de-keys.png\" style=\"zoom:67%;\" />\n\n\n\n> 返回1说明删除成功，再次获取这个key对应的value的时候返回nil\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## getset重新赋值\n\n`getset`命令会先获取key对应的value值，然后在对key重新复制，其格式如下：\n\n```shell\ngetset [key] [value]\n```\n\n\n\n例如：\n\n<img src=\"./getset.png\" style=\"zoom:67%;\" />\n\n\n\n## value自增和自减\n\n`incr`和`decr`命令可以分别让key对应的value自增1和自减1：\n\n- 如果value是整型，则自增或自减1；\n- 如果无法转换成整型，则报错；\n- 如果key不存在，则创建这个key并并赋初始值0，然后自增或自减1；\n\n\n\n其格式如下：\n\n```shell\nincr [key]\ndecr [key]\n```\n\n\n\n###  数值类型自增\n\n<img src=\"./incr-decr.png\" style=\"zoom:67%;\" />\n\n\n\n### key不存在时\n\n<img src=\"./nokey.png\" style=\"zoom:67%;\" />\n\n\n\n### value无法转换为整型\n\n<img src=\"./nochange.png\" style=\"zoom:67%;\" />\n\n\n\n### 指定步长\n\n默认`incr`和`decr`的步长都是1，但是`incrby`和`decrby`可以指定自增和自减的步长单位，其用法和`incr`与`decr`一致，格式如下：\n\n```shell\nincrby [key] [步长]\ndecrby [key] [步长]\n```\n\n\n\n例如：\n\n<img src=\"./step.png\" style=\"zoom:67%;\" />\n\n\n\n## 字符串追加\n\n`append`命令可以在指定key的value后面追加字符串。如果key不存在，则会创建这个key并将需要追加的内容作为value赋值，其格式如下：\n\n```shell\nappend [key] [追加的内容]\n```\n\n\n\n例如：\n\n<img src=\"./append.png\" style=\"zoom:67%;\" />\n\n<br>\n\n\n\n# hash类型\n\nRedis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。Redis 中每个 hash 可以存储海量的键值对。\n\n<br>\n\n\n\n{% tabs comments %}\n\n<!-- tab 存取数据 -->\n\n使用`hset`和`hget`可以分别对hash类型的数据进行存取操作，`hset`和`hget`只能一次存入和读取一对键值对，使用`hmset`和`hmget`可以一次存入和读取多个键值对。\n\n\n\n使用hgetall可以获取到hash数据的所有值，其格式如下：\n\n```bash\nhset [key] [属性key] [属性value]\nhget [key] [属性的key] \nhmset [key] [属性key1] [属性value1] [属性key2] [属性value2]  ...\nhget [key] [属性的key1] [属性key2] ...\nhgetall [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-getset.png\" style=\"zoom: 50%;\" />\n\n<!-- endtab -->\n\n<!-- tab 删除数据 -->\n\n`hdel`和`del`可以删除hash类型数据中属性以及其值，格式如下：\n\n```bash\nhdel [key] [属性1] [属性2]...\ndel [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-del.png\" style=\"zoom: 50%;\" />\n\n\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n\n\n## hash类型自增\n\n`hincrby`操作可以给hash类型属性的值增加指定的单位，其格式如下：\n\n```bash\nhincrby [key] [属性] [步长]\n```\n\n\n\n例如：\n\n<img src=\"./hash-incry.png\" style=\"zoom:50%;\" />\n\n \n\n<br>\n\n\n\n## 获取所有属性名称和值\n\n`hkeys`和`hvals`分别可以获得hash中所有的keys和所有的values，其格式如下：\n\n```bash\nhkeys [key]\n\nhvals [ley]\n```\n\n\n\n例如：\n\n<img src=\"./hash-all.png\" style=\"zoom:50%;\" />\n\n \n\n## 获取属性的个数\n\n`hlen`可以获得hash中属性的个数，其格式如下：\n\n```bash\nhlen [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-hlen.png\" style=\"zoom:50%;\" />\n\n \n\n## 判断属性是否存在\n\n`hexists`可以判断hash中某个属性是否存在，存在则返回1，不存在则返回0，其格式如下：\n\n```bash\nhexists [key] [属性]\n```\n\n\n\n例如：\n\n<img src=\"./hash-exist.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# list类型\n\nlist类型是按照插入顺序排序的字符串列表，和数据结构中普通列表是一样的。可以在其头部和尾部插入新元素。插入时如果key不存在，则会为其创建新的列表；如果列表中的所有元素都被移除，那么这个key也会从数据库中移除。\n\n \n\n向列表头尾插入和删除元素是比较高效的。如果插入和删除操作位于列表中间，则效率比较低。\n\n \n\n## 列表两端添加\n\n`lpush`可以从左侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：\n\n```bash\nlpush [key] [value1] [value2] ...\n```\n\n\n\n 例如：\n\n<img src=\"./list-lpush.png\" style=\"zoom:50%;\" />\n\n> 第一次添加将创建名为mylist的列表，从返回值可以看出，经过两次添加，列表长度为6。先添加的数据会被后添加的数据挤到右侧。\n\n \n\n`rpush`可以从右侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：\n\n```bash\nrpush [key] [value1] [value2] ...\n```\n\n \n\n例如：\n\n<img src=\"./hash-rpush.png\" style=\"zoom:50%;\" />\n\n>  先添加的数据会被后添加的数据挤到左侧。\n\n <br>\n\n\n\n## 查看列表\n\n`lrange`可以从左侧为起点查看列表，`lrange`也可以指定起始和结束的索引位置，其格式如下：\n\n```bash\nlrange [key] [起始索引] [结束索引]\n```\n\n\n\n \n\n例如：\n\n<img src=\"./hash-lrange.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 两端弹出\n\n`lpop`和`rpop`可以实现左端和右端弹出列表第一个元素，如果不存在则弹出nil，其格式如下：\n\n```bash\nlpop [key] \nrpop [key] \n```\n\n\n\n例如：\n\n<img src=\"./hash-rpop.png\" style=\"zoom:50%;\" />\n\n> 注意，只要是弹出，则这个元素在列表中将不再存在。\n\n <br>\n\n\n\n## 获取元素个数\n\n`llen`可以获取指定list中的元素的个数，其格式如下：\n\n```bash\nllen [key]\n```\n\n\n\n例如：\n\n<img src=\"./hash-llen.png\" style=\"zoom:50%;\" />\n\n<br>\n\n \n\n## 在头部添加元素\n\n`lpushx`和`rpush`可以在指定的list的头部和尾部添加元素，其格式如下：\n\n```bash\nlpushx [key] [value]\nrpushx [key] [value]\n```\n\n\n\n \n\n例如：\n\n<img src=\"./hash-pushx.png\" style=\"zoom: 43%;\" />\n\n \n\n>  这种方式仅对已存在的list有效，如果指定的key为不存在的list，则返回0。\n\n <br>\n\n\n\n## 删除元素\n\n`lrem`可以删除在指定list中count个值为value的元素，如果count大于0则在删除时从头部到尾部依次遍历删除，如果count小于0则在删除时从尾部到头部部依次遍历删除，如果count为0则删除所有值为value的元素，其格式如下：\n\n```bash\nlrem [key] [count] [value]\n```\n\n\n\n例如：\n\n<img src=\"./hash-lrem.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 插入元素\n\n`lset`来通过索引来添加元素，其格式为：\n\n```bash\nlset [key] [index] [value]\n```\n\n\n\n例如：\n\n<img src=\"./hash-lset.png\" style=\"zoom:50%;\" /> \n\n\n\n使用`linsert`在指定的元素前或后插入新的元素，其格式如下：\n\n```bash\nlinsert [key] [before|after] [已存在的元素] [value] \n```\n\n\n\n例如：\n\n<img src=\"./hash-linsert.png\" style=\"zoom:43%;\" />\n\n<br>\n\n \n\n## rpoplpush指令\n\n`rpoplpush`指令可以将一个list的尾部元素弹出，并加入另一个list的头部，其格式如下：\n\n```bash\nrpoplpush [source list] [target list]\n```\n\n\n\n例如：\n\n<img src=\"./hash-lpoprpush.png\" style=\"zoom:43%;\" />\n\n \n\n这个指令的使用场景是：使用redis作为消息队列时，消费者从队列中取出数据进行处理。若此时消费者程序错误崩溃，那么此时取出的数据可以认为已经丢失，这将对业务数据的完整性造成影响。rpoplpush可以让消费者程序将消息从主队列取出放到备份队列中，实现备份的功能。\n\n \n\n\n\n<br>\n\n\n\n# set类型\n\nset类型可以看做没有排序的字符集合，可以对其执行添加、删除等操作。和list不同的是，set集合不允许出现重复元素。如果对set类型反复存入多个相同的元素，则只会保存一个。set最大包含40亿个元素。\n\n \n\n## 添加元素\n\n`sadd`可以向set中添加元素，其格式如下：\n\n```bash\nsadd [key] [value1] [value2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-add.png\" style=\"zoom:50%;\" />\n\n>  从返回值看，第二次添加a元素失败了，因为a已经存在，set不允许重复\n\n <br>\n\n\n\n## 查看元素\n\n`smembers`来查看set中的元素，其格式如下：\n\n```bash\nsmembers [key]\n```\n\n \n\n例如：\n\n<img src=\"./set-smembers.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 删除元素\n\n`srem`可以删除set中的元素，其格式如下：\n\n```bash\nsrem [key] [value1] [value2] ... \n```\n\n\n\n例如：\n\n<img src=\"./set-srem.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n## 判断元素是否存在\n\n`sismember`可以判断指定元素是否存在于set中，其格式如下：\n\n```bash\nsismember [key] [target]\n```\n\n\n\n例如：\n\n<img src=\"./set-sismember.png\" style=\"zoom:50%;\" />\n\n>  存在则返回1，不存在则返回0。\n\n <br>\n\n\n\n## 差集运算\n\n`sdiff`可以计算出两个set集合的差集，其格式如下：\n\n```bash\nsdiff [key1] [key2] ...\n```\n\n\n\n其中key的顺序将影响计算的结果，计算方式是第一个key中有的而后面key中没有的，例如：\n\n<img src=\"./set-sdiff.png\" style=\"zoom:43%;\" /> \n\n<br>\n\n\n\n可以使用`sdiffstore`将集合的差集存储到新的set中，其格式如下：\n\n```bash\nsdiffstore [new set] [key1] [key2] ...\n```\n\n \n\n例如：\n\n<img src=\"./set-sdiffstore.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n## 交集运算\n\n使用sinter可以计算set集合的交集，其格式如下：\n\n```bash\nsinter [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sinter.png\" style=\"zoom:50%;\" />\n\n \n\n<br>\n\n\n\n可以使用`sinterstore`将集合的交集存储到新的集合中，其格式如下：\n\n```bash\nsinterstore [new set] [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sinterstore.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n## 并集运算\n\n使用`sunion`可以计算集合的并集，其格式如下：\n\n```bash\nsunion [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sunion.png\" style=\"zoom:50%;\" />\n\n<br>\n\n \n\n可以使用`sunionstore`将集合的并集存储到新的set中，其格式如下:\n\n```bash\nsunionstore [new set] [key1] [key2] ...\n```\n\n\n\n例如：\n\n<img src=\"./set-sunionstore.png\" style=\"zoom:44%;\" />\n\n<br>\n\n \n\n## 获取元素个数\n\n使用`scard`可以获取集合中元素的个数，其格式如下：\n\n```bash\nscard [key]\n```\n\n\n\n例如：\n\n<img src=\"./set-scard.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 随机返回set元素\n\n`srandmember`可以随机返回set中的一个元素，其格式如下：\n\n```bash\nsrandmember [key]\n```\n\n\n\n例如：\n\n<img src=\"./set-srandmember.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 其他操作\n\n## 查看key\n\nkeys指令如果跟上 * 则表示查看所有的key，也可以和正则表达式结合来查看指定规则的key，例如：\n\n```bash\n127.0.0.1:6379> keys my?\n\n1) \"my2\"\n\n2) \"my3\"\n\n127.0.0.1:6379> keys c*\n\n1) \"company\"\n```\n\n\n\n<br>\n\n \n\n## 判断key是否存在\n\n使用`exists`可以判断key是否存在，存在则返回1，不存在则返回0，例如：\n\n```bash\n127.0.0.1:6379> exists company\n\n(integer) 1\n\n127.0.0.1:6379> exists hello\n\n(integer) 0\n```\n\n\n\n <br>\n\n\n\n## key重命名\n\n使用`rename`可以将一个key重命名，例如：\n\n```bash\n127.0.0.1:6379> get company\n\n\"alibaba\"\n\n127.0.0.1:6379> rename company newcompany\n\nOK\n\n127.0.0.1:6379> get company\n\n(nil)\n\n127.0.0.1:6379> get newcompany\n\n\"alibaba\"\n```\n\n<br>\n\n \n\n## 设置key过期时间\n\n可以使用`expire`来设置key的过期时间，单位是秒，过期后key将被删除，配套使用ttl可以看到key所剩余的时间，例如：\n\n```bash\n127.0.0.1:6379> expire newcompany 10\n\n(integer) 1\n\n127.0.0.1:6379> ttl newcompany\n\n(integer) 1\n\n127.0.0.1:6379> get newcompany\n\n(nil)\n\n127.0.0.1:6379> ttl newcompany\n\n(integer) -2\n```\n\n\n\n***\\*没有设置超时时间的key在使用ttl指令时会返回-1。\\****\n\n\n\n<br>\n\n \n\n## 获取key的类型\n\n使用`type`可以获取到key的类型，例如：\n\n```bash\n127.0.0.1:6379> type myb2\n\nset\n\n127.0.0.1:6379> type mylist\n\nlist\n\n127.0.0.1:6379> type mysort\n\nzset\n\n127.0.0.1:6379> type qq\n\nstring\n\n127.0.0.1:6379> type myhash\n\nhash\n```","slug":"常见类型命令操作","published":1,"updated":"2021-04-19T13:46:24.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de5z001dp0klc7toekwg","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis中常见的几种数据类型的基本命令行操作</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h1><blockquote>\n<p>字符串是redis中最基础的数据类型，最多可以容纳512M的数据长度。</p>\n</blockquote>\n<h2 id=\"数据增删改查\"><a href=\"#数据增删改查\" class=\"headerlink\" title=\"数据增删改查\"></a>数据增删改查</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">设置键值对</button></li><li class=\"tab\"><button data-href=\"#comments-2\">查询key对应的value</button></li><li class=\"tab\"><button data-href=\"#comments-3\">获取所有的key</button></li><li class=\"tab\"><button data-href=\"#comments-4\">删除数据</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>使用<code>set</code>指令可以在redis中存string类型的数据，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 存数据</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> [key] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>redis数据都是键值对，所以需要一个key和对应的value；key不要过长，否则会消耗很多内存，最好有统一的命名规范保证可读性。</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用<code>get</code>指令可以在redis中取string类型的数据，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取数据</span></span><br><span class=\"line\">get [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"set-get.png\" style=\"zoom:67%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>获取所有的key，可以使用如下的方式：</p>\n<img src= \"/img/loading.gif\" data-src=\"./keys.png\" style=\"zoom:67%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><p>使用<code>del</code>指令可以删除指定key下的数据，其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"de-keys.png\" style=\"zoom:67%;\" />\n\n\n\n<blockquote>\n<p>返回1说明删除成功，再次获取这个key对应的value的时候返回nil</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"getset重新赋值\"><a href=\"#getset重新赋值\" class=\"headerlink\" title=\"getset重新赋值\"></a>getset重新赋值</h2><p><code>getset</code>命令会先获取key对应的value值，然后在对key重新复制，其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getset [key] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./getset.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"value自增和自减\"><a href=\"#value自增和自减\" class=\"headerlink\" title=\"value自增和自减\"></a>value自增和自减</h2><p><code>incr</code>和<code>decr</code>命令可以分别让key对应的value自增1和自减1：</p>\n<ul>\n<li>如果value是整型，则自增或自减1；</li>\n<li>如果无法转换成整型，则报错；</li>\n<li>如果key不存在，则创建这个key并并赋初始值0，然后自增或自减1；</li>\n</ul>\n<p>其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incr [key]</span><br><span class=\"line\">decr [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数值类型自增\"><a href=\"#数值类型自增\" class=\"headerlink\" title=\"数值类型自增\"></a>数值类型自增</h3><img src= \"/img/loading.gif\" data-src=\"./incr-decr.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"key不存在时\"><a href=\"#key不存在时\" class=\"headerlink\" title=\"key不存在时\"></a>key不存在时</h3><img src= \"/img/loading.gif\" data-src=\"./nokey.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"value无法转换为整型\"><a href=\"#value无法转换为整型\" class=\"headerlink\" title=\"value无法转换为整型\"></a>value无法转换为整型</h3><img src= \"/img/loading.gif\" data-src=\"./nochange.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"指定步长\"><a href=\"#指定步长\" class=\"headerlink\" title=\"指定步长\"></a>指定步长</h3><p>默认<code>incr</code>和<code>decr</code>的步长都是1，但是<code>incrby</code>和<code>decrby</code>可以指定自增和自减的步长单位，其用法和<code>incr</code>与<code>decr</code>一致，格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby [key] [步长]</span><br><span class=\"line\">decrby [key] [步长]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./step.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"字符串追加\"><a href=\"#字符串追加\" class=\"headerlink\" title=\"字符串追加\"></a>字符串追加</h2><p><code>append</code>命令可以在指定key的value后面追加字符串。如果key不存在，则会创建这个key并将需要追加的内容作为value赋值，其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append [key] [追加的内容]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./append.png\" style=\"zoom:67%;\" />\n\n<br>\n\n\n\n<h1 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h1><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。Redis 中每个 hash 可以存储海量的键值对。</p>\n<br>\n\n\n\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">存取数据</button></li><li class=\"tab\"><button data-href=\"#comments-2\">删除数据</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>使用<code>hset</code>和<code>hget</code>可以分别对hash类型的数据进行存取操作，<code>hset</code>和<code>hget</code>只能一次存入和读取一对键值对，使用<code>hmset</code>和<code>hmget</code>可以一次存入和读取多个键值对。</p>\n<p>使用hgetall可以获取到hash数据的所有值，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset [key] [属性key] [属性value]</span><br><span class=\"line\">hget [key] [属性的key] </span><br><span class=\"line\">hmset [key] [属性key1] [属性value1] [属性key2] [属性value2]  ...</span><br><span class=\"line\">hget [key] [属性的key1] [属性key2] ...</span><br><span class=\"line\">hgetall [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-getset.png\" style=\"zoom: 50%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><code>hdel</code>和<code>del</code>可以删除hash类型数据中属性以及其值，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdel [key] [属性1] [属性2]...</span><br><span class=\"line\">del [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-del.png\" style=\"zoom: 50%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n\n\n<h2 id=\"hash类型自增\"><a href=\"#hash类型自增\" class=\"headerlink\" title=\"hash类型自增\"></a>hash类型自增</h2><p><code>hincrby</code>操作可以给hash类型属性的值增加指定的单位，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hincrby [key] [属性] [步长]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-incry.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"获取所有属性名称和值\"><a href=\"#获取所有属性名称和值\" class=\"headerlink\" title=\"获取所有属性名称和值\"></a>获取所有属性名称和值</h2><p><code>hkeys</code>和<code>hvals</code>分别可以获得hash中所有的keys和所有的values，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hkeys [key]</span><br><span class=\"line\"></span><br><span class=\"line\">hvals [ley]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-all.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"获取属性的个数\"><a href=\"#获取属性的个数\" class=\"headerlink\" title=\"获取属性的个数\"></a>获取属性的个数</h2><p><code>hlen</code>可以获得hash中属性的个数，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hlen [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-hlen.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"判断属性是否存在\"><a href=\"#判断属性是否存在\" class=\"headerlink\" title=\"判断属性是否存在\"></a>判断属性是否存在</h2><p><code>hexists</code>可以判断hash中某个属性是否存在，存在则返回1，不存在则返回0，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexists [key] [属性]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-exist.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"list类型\"><a href=\"#list类型\" class=\"headerlink\" title=\"list类型\"></a>list类型</h1><p>list类型是按照插入顺序排序的字符串列表，和数据结构中普通列表是一样的。可以在其头部和尾部插入新元素。插入时如果key不存在，则会为其创建新的列表；如果列表中的所有元素都被移除，那么这个key也会从数据库中移除。</p>\n<p>向列表头尾插入和删除元素是比较高效的。如果插入和删除操作位于列表中间，则效率比较低。</p>\n<h2 id=\"列表两端添加\"><a href=\"#列表两端添加\" class=\"headerlink\" title=\"列表两端添加\"></a>列表两端添加</h2><p><code>lpush</code>可以从左侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpush [key] [value1] [value2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./list-lpush.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>第一次添加将创建名为mylist的列表，从返回值可以看出，经过两次添加，列表长度为6。先添加的数据会被后添加的数据挤到右侧。</p>\n</blockquote>\n<p><code>rpush</code>可以从右侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpush [key] [value1] [value2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-rpush.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p> 先添加的数据会被后添加的数据挤到左侧。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"查看列表\"><a href=\"#查看列表\" class=\"headerlink\" title=\"查看列表\"></a>查看列表</h2><p><code>lrange</code>可以从左侧为起点查看列表，<code>lrange</code>也可以指定起始和结束的索引位置，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrange [key] [起始索引] [结束索引]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-lrange.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"两端弹出\"><a href=\"#两端弹出\" class=\"headerlink\" title=\"两端弹出\"></a>两端弹出</h2><p><code>lpop</code>和<code>rpop</code>可以实现左端和右端弹出列表第一个元素，如果不存在则弹出nil，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpop [key] </span><br><span class=\"line\">rpop [key] </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-rpop.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>注意，只要是弹出，则这个元素在列表中将不再存在。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"获取元素个数\"><a href=\"#获取元素个数\" class=\"headerlink\" title=\"获取元素个数\"></a>获取元素个数</h2><p><code>llen</code>可以获取指定list中的元素的个数，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llen [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-llen.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"在头部添加元素\"><a href=\"#在头部添加元素\" class=\"headerlink\" title=\"在头部添加元素\"></a>在头部添加元素</h2><p><code>lpushx</code>和<code>rpush</code>可以在指定的list的头部和尾部添加元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpushx [key] [value]</span><br><span class=\"line\">rpushx [key] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-pushx.png\" style=\"zoom: 43%;\" />\n\n\n\n<blockquote>\n<p> 这种方式仅对已存在的list有效，如果指定的key为不存在的list，则返回0。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><p><code>lrem</code>可以删除在指定list中count个值为value的元素，如果count大于0则在删除时从头部到尾部依次遍历删除，如果count小于0则在删除时从尾部到头部部依次遍历删除，如果count为0则删除所有值为value的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrem [key] [count] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-lrem.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h2><p><code>lset</code>来通过索引来添加元素，其格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lset [key] [index] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-lset.png\" style=\"zoom:50%;\" /> \n\n\n\n<p>使用<code>linsert</code>在指定的元素前或后插入新的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linsert [key] [before|after] [已存在的元素] [value] </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-linsert.png\" style=\"zoom:43%;\" />\n\n<br>\n\n\n\n<h2 id=\"rpoplpush指令\"><a href=\"#rpoplpush指令\" class=\"headerlink\" title=\"rpoplpush指令\"></a>rpoplpush指令</h2><p><code>rpoplpush</code>指令可以将一个list的尾部元素弹出，并加入另一个list的头部，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpoplpush [<span class=\"built_in\">source</span> list] [target list]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./hash-lpoprpush.png\" style=\"zoom:43%;\" />\n\n\n\n<p>这个指令的使用场景是：使用redis作为消息队列时，消费者从队列中取出数据进行处理。若此时消费者程序错误崩溃，那么此时取出的数据可以认为已经丢失，这将对业务数据的完整性造成影响。rpoplpush可以让消费者程序将消息从主队列取出放到备份队列中，实现备份的功能。</p>\n<br>\n\n\n\n<h1 id=\"set类型\"><a href=\"#set类型\" class=\"headerlink\" title=\"set类型\"></a>set类型</h1><p>set类型可以看做没有排序的字符集合，可以对其执行添加、删除等操作。和list不同的是，set集合不允许出现重复元素。如果对set类型反复存入多个相同的元素，则只会保存一个。set最大包含40亿个元素。</p>\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><p><code>sadd</code>可以向set中添加元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd [key] [value1] [value2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-add.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p> 从返回值看，第二次添加a元素失败了，因为a已经存在，set不允许重复</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"查看元素\"><a href=\"#查看元素\" class=\"headerlink\" title=\"查看元素\"></a>查看元素</h2><p><code>smembers</code>来查看set中的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smembers [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-smembers.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"删除元素-1\"><a href=\"#删除元素-1\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><p><code>srem</code>可以删除set中的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srem [key] [value1] [value2] ... </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-srem.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n<h2 id=\"判断元素是否存在\"><a href=\"#判断元素是否存在\" class=\"headerlink\" title=\"判断元素是否存在\"></a>判断元素是否存在</h2><p><code>sismember</code>可以判断指定元素是否存在于set中，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sismember [key] [target]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-sismember.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p> 存在则返回1，不存在则返回0。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"差集运算\"><a href=\"#差集运算\" class=\"headerlink\" title=\"差集运算\"></a>差集运算</h2><p><code>sdiff</code>可以计算出两个set集合的差集，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiff [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中key的顺序将影响计算的结果，计算方式是第一个key中有的而后面key中没有的，例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-sdiff.png\" style=\"zoom:43%;\" /> \n\n<br>\n\n\n\n<p>可以使用<code>sdiffstore</code>将集合的差集存储到新的set中，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiffstore [new <span class=\"built_in\">set</span>] [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-sdiffstore.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n<h2 id=\"交集运算\"><a href=\"#交集运算\" class=\"headerlink\" title=\"交集运算\"></a>交集运算</h2><p>使用sinter可以计算set集合的交集，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-sinter.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<p>可以使用<code>sinterstore</code>将集合的交集存储到新的集合中，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinterstore [new <span class=\"built_in\">set</span>] [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-sinterstore.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"并集运算\"><a href=\"#并集运算\" class=\"headerlink\" title=\"并集运算\"></a>并集运算</h2><p>使用<code>sunion</code>可以计算集合的并集，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunion [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-sunion.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<p>可以使用<code>sunionstore</code>将集合的并集存储到新的set中，其格式如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunionstore [new <span class=\"built_in\">set</span>] [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-sunionstore.png\" style=\"zoom:44%;\" />\n\n<br>\n\n\n\n<h2 id=\"获取元素个数-1\"><a href=\"#获取元素个数-1\" class=\"headerlink\" title=\"获取元素个数\"></a>获取元素个数</h2><p>使用<code>scard</code>可以获取集合中元素的个数，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scard [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-scard.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"随机返回set元素\"><a href=\"#随机返回set元素\" class=\"headerlink\" title=\"随机返回set元素\"></a>随机返回set元素</h2><p><code>srandmember</code>可以随机返回set中的一个元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src= \"/img/loading.gif\" data-src=\"./set-srandmember.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h1><h2 id=\"查看key\"><a href=\"#查看key\" class=\"headerlink\" title=\"查看key\"></a>查看key</h2><p>keys指令如果跟上 * 则表示查看所有的key，也可以和正则表达式结合来查看指定规则的key，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; keys my?</span><br><span class=\"line\"></span><br><span class=\"line\">1) <span class=\"string\">&quot;my2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">2) <span class=\"string\">&quot;my3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; keys c*</span><br><span class=\"line\"></span><br><span class=\"line\">1) <span class=\"string\">&quot;company&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"判断key是否存在\"><a href=\"#判断key是否存在\" class=\"headerlink\" title=\"判断key是否存在\"></a>判断key是否存在</h2><p>使用<code>exists</code>可以判断key是否存在，存在则返回1，不存在则返回0，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; exists company</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; exists hello</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n\n\n <br>\n\n\n\n<h2 id=\"key重命名\"><a href=\"#key重命名\" class=\"headerlink\" title=\"key重命名\"></a>key重命名</h2><p>使用<code>rename</code>可以将一个key重命名，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get company</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;alibaba&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; rename company newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get company</span><br><span class=\"line\"></span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get newcompany</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;alibaba&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"设置key过期时间\"><a href=\"#设置key过期时间\" class=\"headerlink\" title=\"设置key过期时间\"></a>设置key过期时间</h2><p>可以使用<code>expire</code>来设置key的过期时间，单位是秒，过期后key将被删除，配套使用ttl可以看到key所剩余的时间，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; expire newcompany 10</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong><em>\\</em>没有设置超时时间的key在使用ttl指令时会返回-1。**</strong></p>\n<br>\n\n\n\n<h2 id=\"获取key的类型\"><a href=\"#获取key的类型\" class=\"headerlink\" title=\"获取key的类型\"></a>获取key的类型</h2><p>使用<code>type</code>可以获取到key的类型，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> myb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> mylist</span><br><span class=\"line\"></span><br><span class=\"line\">list</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> mysort</span><br><span class=\"line\"></span><br><span class=\"line\">zset</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> qq</span><br><span class=\"line\"></span><br><span class=\"line\">string</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> myhash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis中常见的几种数据类型的基本命令行操作</p><p>更新于 2021-04-18</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h1><blockquote>\n<p>字符串是redis中最基础的数据类型，最多可以容纳512M的数据长度。</p>\n</blockquote>\n<h2 id=\"数据增删改查\"><a href=\"#数据增删改查\" class=\"headerlink\" title=\"数据增删改查\"></a>数据增删改查</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">设置键值对</button></li><li class=\"tab\"><button data-href=\"#comments-2\">查询key对应的value</button></li><li class=\"tab\"><button data-href=\"#comments-3\">获取所有的key</button></li><li class=\"tab\"><button data-href=\"#comments-4\">删除数据</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>使用<code>set</code>指令可以在redis中存string类型的数据，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 存数据</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> [key] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>redis数据都是键值对，所以需要一个key和对应的value；key不要过长，否则会消耗很多内存，最好有统一的命名规范保证可读性。</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用<code>get</code>指令可以在redis中取string类型的数据，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取数据</span></span><br><span class=\"line\">get [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"set-get.png\" style=\"zoom:67%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>获取所有的key，可以使用如下的方式：</p>\n<img src=\"./keys.png\" style=\"zoom:67%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><p>使用<code>del</code>指令可以删除指定key下的数据，其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">del [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"de-keys.png\" style=\"zoom:67%;\" />\n\n\n\n<blockquote>\n<p>返回1说明删除成功，再次获取这个key对应的value的时候返回nil</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"getset重新赋值\"><a href=\"#getset重新赋值\" class=\"headerlink\" title=\"getset重新赋值\"></a>getset重新赋值</h2><p><code>getset</code>命令会先获取key对应的value值，然后在对key重新复制，其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getset [key] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./getset.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"value自增和自减\"><a href=\"#value自增和自减\" class=\"headerlink\" title=\"value自增和自减\"></a>value自增和自减</h2><p><code>incr</code>和<code>decr</code>命令可以分别让key对应的value自增1和自减1：</p>\n<ul>\n<li>如果value是整型，则自增或自减1；</li>\n<li>如果无法转换成整型，则报错；</li>\n<li>如果key不存在，则创建这个key并并赋初始值0，然后自增或自减1；</li>\n</ul>\n<p>其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incr [key]</span><br><span class=\"line\">decr [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数值类型自增\"><a href=\"#数值类型自增\" class=\"headerlink\" title=\"数值类型自增\"></a>数值类型自增</h3><img src=\"./incr-decr.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"key不存在时\"><a href=\"#key不存在时\" class=\"headerlink\" title=\"key不存在时\"></a>key不存在时</h3><img src=\"./nokey.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"value无法转换为整型\"><a href=\"#value无法转换为整型\" class=\"headerlink\" title=\"value无法转换为整型\"></a>value无法转换为整型</h3><img src=\"./nochange.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"指定步长\"><a href=\"#指定步长\" class=\"headerlink\" title=\"指定步长\"></a>指定步长</h3><p>默认<code>incr</code>和<code>decr</code>的步长都是1，但是<code>incrby</code>和<code>decrby</code>可以指定自增和自减的步长单位，其用法和<code>incr</code>与<code>decr</code>一致，格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrby [key] [步长]</span><br><span class=\"line\">decrby [key] [步长]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./step.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"字符串追加\"><a href=\"#字符串追加\" class=\"headerlink\" title=\"字符串追加\"></a>字符串追加</h2><p><code>append</code>命令可以在指定key的value后面追加字符串。如果key不存在，则会创建这个key并将需要追加的内容作为value赋值，其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append [key] [追加的内容]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./append.png\" style=\"zoom:67%;\" />\n\n<br>\n\n\n\n<h1 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h1><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。Redis 中每个 hash 可以存储海量的键值对。</p>\n<br>\n\n\n\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">存取数据</button></li><li class=\"tab\"><button data-href=\"#comments-2\">删除数据</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>使用<code>hset</code>和<code>hget</code>可以分别对hash类型的数据进行存取操作，<code>hset</code>和<code>hget</code>只能一次存入和读取一对键值对，使用<code>hmset</code>和<code>hmget</code>可以一次存入和读取多个键值对。</p>\n<p>使用hgetall可以获取到hash数据的所有值，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset [key] [属性key] [属性value]</span><br><span class=\"line\">hget [key] [属性的key] </span><br><span class=\"line\">hmset [key] [属性key1] [属性value1] [属性key2] [属性value2]  ...</span><br><span class=\"line\">hget [key] [属性的key1] [属性key2] ...</span><br><span class=\"line\">hgetall [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-getset.png\" style=\"zoom: 50%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><code>hdel</code>和<code>del</code>可以删除hash类型数据中属性以及其值，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdel [key] [属性1] [属性2]...</span><br><span class=\"line\">del [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-del.png\" style=\"zoom: 50%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n\n\n<h2 id=\"hash类型自增\"><a href=\"#hash类型自增\" class=\"headerlink\" title=\"hash类型自增\"></a>hash类型自增</h2><p><code>hincrby</code>操作可以给hash类型属性的值增加指定的单位，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hincrby [key] [属性] [步长]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-incry.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"获取所有属性名称和值\"><a href=\"#获取所有属性名称和值\" class=\"headerlink\" title=\"获取所有属性名称和值\"></a>获取所有属性名称和值</h2><p><code>hkeys</code>和<code>hvals</code>分别可以获得hash中所有的keys和所有的values，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hkeys [key]</span><br><span class=\"line\"></span><br><span class=\"line\">hvals [ley]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-all.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"获取属性的个数\"><a href=\"#获取属性的个数\" class=\"headerlink\" title=\"获取属性的个数\"></a>获取属性的个数</h2><p><code>hlen</code>可以获得hash中属性的个数，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hlen [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-hlen.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"判断属性是否存在\"><a href=\"#判断属性是否存在\" class=\"headerlink\" title=\"判断属性是否存在\"></a>判断属性是否存在</h2><p><code>hexists</code>可以判断hash中某个属性是否存在，存在则返回1，不存在则返回0，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexists [key] [属性]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-exist.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"list类型\"><a href=\"#list类型\" class=\"headerlink\" title=\"list类型\"></a>list类型</h1><p>list类型是按照插入顺序排序的字符串列表，和数据结构中普通列表是一样的。可以在其头部和尾部插入新元素。插入时如果key不存在，则会为其创建新的列表；如果列表中的所有元素都被移除，那么这个key也会从数据库中移除。</p>\n<p>向列表头尾插入和删除元素是比较高效的。如果插入和删除操作位于列表中间，则效率比较低。</p>\n<h2 id=\"列表两端添加\"><a href=\"#列表两端添加\" class=\"headerlink\" title=\"列表两端添加\"></a>列表两端添加</h2><p><code>lpush</code>可以从左侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpush [key] [value1] [value2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 例如：</p>\n<img src=\"./list-lpush.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>第一次添加将创建名为mylist的列表，从返回值可以看出，经过两次添加，列表长度为6。先添加的数据会被后添加的数据挤到右侧。</p>\n</blockquote>\n<p><code>rpush</code>可以从右侧向列表中添加数据，如果添加的key不存在，则会创建，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpush [key] [value1] [value2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-rpush.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p> 先添加的数据会被后添加的数据挤到左侧。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"查看列表\"><a href=\"#查看列表\" class=\"headerlink\" title=\"查看列表\"></a>查看列表</h2><p><code>lrange</code>可以从左侧为起点查看列表，<code>lrange</code>也可以指定起始和结束的索引位置，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrange [key] [起始索引] [结束索引]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>例如：</p>\n<img src=\"./hash-lrange.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"两端弹出\"><a href=\"#两端弹出\" class=\"headerlink\" title=\"两端弹出\"></a>两端弹出</h2><p><code>lpop</code>和<code>rpop</code>可以实现左端和右端弹出列表第一个元素，如果不存在则弹出nil，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpop [key] </span><br><span class=\"line\">rpop [key] </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-rpop.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>注意，只要是弹出，则这个元素在列表中将不再存在。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"获取元素个数\"><a href=\"#获取元素个数\" class=\"headerlink\" title=\"获取元素个数\"></a>获取元素个数</h2><p><code>llen</code>可以获取指定list中的元素的个数，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llen [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-llen.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"在头部添加元素\"><a href=\"#在头部添加元素\" class=\"headerlink\" title=\"在头部添加元素\"></a>在头部添加元素</h2><p><code>lpushx</code>和<code>rpush</code>可以在指定的list的头部和尾部添加元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lpushx [key] [value]</span><br><span class=\"line\">rpushx [key] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>例如：</p>\n<img src=\"./hash-pushx.png\" style=\"zoom: 43%;\" />\n\n\n\n<blockquote>\n<p> 这种方式仅对已存在的list有效，如果指定的key为不存在的list，则返回0。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><p><code>lrem</code>可以删除在指定list中count个值为value的元素，如果count大于0则在删除时从头部到尾部依次遍历删除，如果count小于0则在删除时从尾部到头部部依次遍历删除，如果count为0则删除所有值为value的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lrem [key] [count] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-lrem.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h2><p><code>lset</code>来通过索引来添加元素，其格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lset [key] [index] [value]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-lset.png\" style=\"zoom:50%;\" /> \n\n\n\n<p>使用<code>linsert</code>在指定的元素前或后插入新的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linsert [key] [before|after] [已存在的元素] [value] </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-linsert.png\" style=\"zoom:43%;\" />\n\n<br>\n\n\n\n<h2 id=\"rpoplpush指令\"><a href=\"#rpoplpush指令\" class=\"headerlink\" title=\"rpoplpush指令\"></a>rpoplpush指令</h2><p><code>rpoplpush</code>指令可以将一个list的尾部元素弹出，并加入另一个list的头部，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpoplpush [<span class=\"built_in\">source</span> list] [target list]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./hash-lpoprpush.png\" style=\"zoom:43%;\" />\n\n\n\n<p>这个指令的使用场景是：使用redis作为消息队列时，消费者从队列中取出数据进行处理。若此时消费者程序错误崩溃，那么此时取出的数据可以认为已经丢失，这将对业务数据的完整性造成影响。rpoplpush可以让消费者程序将消息从主队列取出放到备份队列中，实现备份的功能。</p>\n<br>\n\n\n\n<h1 id=\"set类型\"><a href=\"#set类型\" class=\"headerlink\" title=\"set类型\"></a>set类型</h1><p>set类型可以看做没有排序的字符集合，可以对其执行添加、删除等操作。和list不同的是，set集合不允许出现重复元素。如果对set类型反复存入多个相同的元素，则只会保存一个。set最大包含40亿个元素。</p>\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><p><code>sadd</code>可以向set中添加元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sadd [key] [value1] [value2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-add.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p> 从返回值看，第二次添加a元素失败了，因为a已经存在，set不允许重复</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"查看元素\"><a href=\"#查看元素\" class=\"headerlink\" title=\"查看元素\"></a>查看元素</h2><p><code>smembers</code>来查看set中的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">smembers [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-smembers.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"删除元素-1\"><a href=\"#删除元素-1\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><p><code>srem</code>可以删除set中的元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srem [key] [value1] [value2] ... </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-srem.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n<h2 id=\"判断元素是否存在\"><a href=\"#判断元素是否存在\" class=\"headerlink\" title=\"判断元素是否存在\"></a>判断元素是否存在</h2><p><code>sismember</code>可以判断指定元素是否存在于set中，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sismember [key] [target]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-sismember.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p> 存在则返回1，不存在则返回0。</p>\n</blockquote>\n <br>\n\n\n\n<h2 id=\"差集运算\"><a href=\"#差集运算\" class=\"headerlink\" title=\"差集运算\"></a>差集运算</h2><p><code>sdiff</code>可以计算出两个set集合的差集，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiff [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中key的顺序将影响计算的结果，计算方式是第一个key中有的而后面key中没有的，例如：</p>\n<img src=\"./set-sdiff.png\" style=\"zoom:43%;\" /> \n\n<br>\n\n\n\n<p>可以使用<code>sdiffstore</code>将集合的差集存储到新的set中，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdiffstore [new <span class=\"built_in\">set</span>] [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-sdiffstore.png\" style=\"zoom:44%;\" />\n\n <br>\n\n\n\n<h2 id=\"交集运算\"><a href=\"#交集运算\" class=\"headerlink\" title=\"交集运算\"></a>交集运算</h2><p>使用sinter可以计算set集合的交集，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinter [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-sinter.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<p>可以使用<code>sinterstore</code>将集合的交集存储到新的集合中，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sinterstore [new <span class=\"built_in\">set</span>] [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-sinterstore.png\" style=\"zoom:50%;\" />\n\n <br>\n\n\n\n<h2 id=\"并集运算\"><a href=\"#并集运算\" class=\"headerlink\" title=\"并集运算\"></a>并集运算</h2><p>使用<code>sunion</code>可以计算集合的并集，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunion [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-sunion.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<p>可以使用<code>sunionstore</code>将集合的并集存储到新的set中，其格式如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sunionstore [new <span class=\"built_in\">set</span>] [key1] [key2] ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-sunionstore.png\" style=\"zoom:44%;\" />\n\n<br>\n\n\n\n<h2 id=\"获取元素个数-1\"><a href=\"#获取元素个数-1\" class=\"headerlink\" title=\"获取元素个数\"></a>获取元素个数</h2><p>使用<code>scard</code>可以获取集合中元素的个数，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scard [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-scard.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"随机返回set元素\"><a href=\"#随机返回set元素\" class=\"headerlink\" title=\"随机返回set元素\"></a>随机返回set元素</h2><p><code>srandmember</code>可以随机返回set中的一个元素，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srandmember [key]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<img src=\"./set-srandmember.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h1><h2 id=\"查看key\"><a href=\"#查看key\" class=\"headerlink\" title=\"查看key\"></a>查看key</h2><p>keys指令如果跟上 * 则表示查看所有的key，也可以和正则表达式结合来查看指定规则的key，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; keys my?</span><br><span class=\"line\"></span><br><span class=\"line\">1) <span class=\"string\">&quot;my2&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">2) <span class=\"string\">&quot;my3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; keys c*</span><br><span class=\"line\"></span><br><span class=\"line\">1) <span class=\"string\">&quot;company&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"判断key是否存在\"><a href=\"#判断key是否存在\" class=\"headerlink\" title=\"判断key是否存在\"></a>判断key是否存在</h2><p>使用<code>exists</code>可以判断key是否存在，存在则返回1，不存在则返回0，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; exists company</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; exists hello</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n\n\n <br>\n\n\n\n<h2 id=\"key重命名\"><a href=\"#key重命名\" class=\"headerlink\" title=\"key重命名\"></a>key重命名</h2><p>使用<code>rename</code>可以将一个key重命名，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get company</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;alibaba&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; rename company newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">OK</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get company</span><br><span class=\"line\"></span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get newcompany</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;alibaba&quot;</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"设置key过期时间\"><a href=\"#设置key过期时间\" class=\"headerlink\" title=\"设置key过期时间\"></a>设置key过期时间</h2><p>可以使用<code>expire</code>来设置key的过期时间，单位是秒，过期后key将被删除，配套使用ttl可以看到key所剩余的时间，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; expire newcompany 10</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; get newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; ttl newcompany</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong><em>\\</em>没有设置超时时间的key在使用ttl指令时会返回-1。**</strong></p>\n<br>\n\n\n\n<h2 id=\"获取key的类型\"><a href=\"#获取key的类型\" class=\"headerlink\" title=\"获取key的类型\"></a>获取key的类型</h2><p>使用<code>type</code>可以获取到key的类型，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> myb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> mylist</span><br><span class=\"line\"></span><br><span class=\"line\">list</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> mysort</span><br><span class=\"line\"></span><br><span class=\"line\">zset</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> qq</span><br><span class=\"line\"></span><br><span class=\"line\">string</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> myhash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>"},{"title":"部署Ingress","date":"2021-03-20T07:13:31.000Z","description":"在k8s集群中部署ingress-nginx","cover":"https://www.kubernetes.org.cn/img/2019/10/fe9890c6467aa42ebd24d536416942d3-768x442.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中部署Ingress-nginx。\n\n更新于 2021-03-20\n\n{% endnote %}\n\n<br>\n\n\n\n# 什么是Ingress\n\nIngress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：\n\n- `Ingress NGINX`: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；\n- `F5 BIG-IP Controller`: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；\n- `Ingress Kong`: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；\n- `Traefik`: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；\n- `Voyager`: 一套以 HAProxy 为底的 Ingress Controller；\n\n\n\n这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。\n\n\n\n<br>\n\n\n\n## 部署Ingress Nginx\n\n官方维护的配置yaml文件在 [官方YAML文件](https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml)，可以直接执行下面的命令部署：\n\n```bash\n$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\n```\n\n\n\n这个文件会创建一个名为：`ingress-nginx`的namespace，相关的pod会部署在这个namespace下面。\n\n\n\n有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：\n\n```yaml\nspec:\n      hostNetwork: true\n      dnsPolicy: ClusterFirst\n      containers:\n        - name: controller\n          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0\n          imagePullPolicy: IfNotPresent\n```\n\n> 这里增加了`hostNetwork: true`，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。\n\n\n\n使用下面的命令进行部署：\n\n```bash\nkubectl apply -f deploy.yaml\n```\n\n\n\n<br>\n\n","source":"_posts/部署Ingress.md","raw":"---\ntitle: 部署Ingress\ndate: 2021-03-20 15:13:31\ntags:\n- Ingress\ncategories:\n- Kubernetes\n- Ingress-nginx\ndescription: 在k8s集群中部署ingress-nginx\ncover: https://www.kubernetes.org.cn/img/2019/10/fe9890c6467aa42ebd24d536416942d3-768x442.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中部署Ingress-nginx。\n\n更新于 2021-03-20\n\n{% endnote %}\n\n<br>\n\n\n\n# 什么是Ingress\n\nIngress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：\n\n- `Ingress NGINX`: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；\n- `F5 BIG-IP Controller`: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；\n- `Ingress Kong`: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；\n- `Traefik`: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；\n- `Voyager`: 一套以 HAProxy 为底的 Ingress Controller；\n\n\n\n这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。\n\n\n\n<br>\n\n\n\n## 部署Ingress Nginx\n\n官方维护的配置yaml文件在 [官方YAML文件](https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml)，可以直接执行下面的命令部署：\n\n```bash\n$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\n```\n\n\n\n这个文件会创建一个名为：`ingress-nginx`的namespace，相关的pod会部署在这个namespace下面。\n\n\n\n有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：\n\n```yaml\nspec:\n      hostNetwork: true\n      dnsPolicy: ClusterFirst\n      containers:\n        - name: controller\n          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0\n          imagePullPolicy: IfNotPresent\n```\n\n> 这里增加了`hostNetwork: true`，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。\n\n\n\n使用下面的命令进行部署：\n\n```bash\nkubectl apply -f deploy.yaml\n```\n\n\n\n<br>\n\n","slug":"部署Ingress","published":1,"updated":"2021-03-20T07:33:34.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de60001fp0kl41cdbmr8","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中部署Ingress-nginx。</p><p>更新于 2021-03-20</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"什么是Ingress\"><a href=\"#什么是Ingress\" class=\"headerlink\" title=\"什么是Ingress\"></a>什么是Ingress</h1><p>Ingress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：</p>\n<ul>\n<li><code>Ingress NGINX</code>: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；</li>\n<li><code>F5 BIG-IP Controller</code>: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；</li>\n<li><code>Ingress Kong</code>: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；</li>\n<li><code>Traefik</code>: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；</li>\n<li><code>Voyager</code>: 一套以 HAProxy 为底的 Ingress Controller；</li>\n</ul>\n<p>这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。</p>\n<br>\n\n\n\n<h2 id=\"部署Ingress-Nginx\"><a href=\"#部署Ingress-Nginx\" class=\"headerlink\" title=\"部署Ingress Nginx\"></a>部署Ingress Nginx</h2><p>官方维护的配置yaml文件在 <a href=\"https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\">官方YAML文件</a>，可以直接执行下面的命令部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个文件会创建一个名为：<code>ingress-nginx</code>的namespace，相关的pod会部署在这个namespace下面。</p>\n<p>有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">controller</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里增加了<code>hostNetwork: true</code>，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。</p>\n</blockquote>\n<p>使用下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f deploy.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中部署Ingress-nginx。</p><p>更新于 2021-03-20</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"什么是Ingress\"><a href=\"#什么是Ingress\" class=\"headerlink\" title=\"什么是Ingress\"></a>什么是Ingress</h1><p>Ingress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：</p>\n<ul>\n<li><code>Ingress NGINX</code>: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；</li>\n<li><code>F5 BIG-IP Controller</code>: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；</li>\n<li><code>Ingress Kong</code>: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；</li>\n<li><code>Traefik</code>: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；</li>\n<li><code>Voyager</code>: 一套以 HAProxy 为底的 Ingress Controller；</li>\n</ul>\n<p>这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。</p>\n<br>\n\n\n\n<h2 id=\"部署Ingress-Nginx\"><a href=\"#部署Ingress-Nginx\" class=\"headerlink\" title=\"部署Ingress Nginx\"></a>部署Ingress Nginx</h2><p>官方维护的配置yaml文件在 <a href=\"https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\">官方YAML文件</a>，可以直接执行下面的命令部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个文件会创建一个名为：<code>ingress-nginx</code>的namespace，相关的pod会部署在这个namespace下面。</p>\n<p>有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">controller</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里增加了<code>hostNetwork: true</code>，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。</p>\n</blockquote>\n<p>使用下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f deploy.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n"},{"title":"部署Mysql5.7","date":"2021-03-21T09:30:43.000Z","description":"使用RPM和源码两种方式部署一个单节点mysql 5.7服务","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-c16b7d2b9e1ee5bccad87488ea69e352_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618911539&t=69fb2b2d94fdfe5deb68e606202bc923","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用RPM和源码两种方式部署一个单节点mysql 5.7服务，实验环境为centos7\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# RPM方式部署\n\n## 卸载旧版本\n\n首先检查是否存在旧的mysql：\n\n```bash\nrpm -qa | grep -i mysql\n```\n\n\n\n如果存在就需要卸载：\n\n```bash\nrpm -ev [旧的mysql包名]\n```\n\n\n\n## 下载\n\n下载mysql5.7官方prm包\n\n```bash\nwget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar\n```\n\n\n\n然后解压，可以看到解压出如下的一些安装包：\n\n```bash\ntar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar \n\nmysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-5.7.26-1.el7.x86_64.rpm\nmysql-community-test-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm\nmysql-community-common-5.7.26-1.el7.x86_64.rpm\nmysql-community-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-client-5.7.26-1.el7.x86_64.rpm\nmysql-community-server-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm\n```\n\n- mysql-community-client：客户端的安装包；\n- mysql-community-server：服务端的安装包；\n- mysql-community-devel：包含开发库文件的安装包；\n- mysql-community-test：包含测试的安装包；\n- mysql-community-embedded：嵌入式mysql安装包；\n\n\n\n## 安装\n\n一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：\n\n```bash\nrpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm\nrpm -ivh mysql-community-libs*\nrpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm\nrpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm\nyum install -y perl libaio libaio-devel numactl net-tools\nrpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm\n```\n\n\n\n## 启动服务\n\n启动mysql服务\n\n```bash\nsystemctl start mysqld.service\n```\n\n\n\n## 获取初始密码\n\n查看mysql日志，找到类似下面的这一行：\n\n```bash\ncat /var/log/mysql.log\n\n[Note] A temporary password is generated for root@localhost: <wqB!ebdk6b4\n```\n\n> mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码\n\n\n\n## 修改密码并连接\n\n可以通过下面的命令修改root密码并删除测试数据库和匿名用户\n\n```bash\n# 设置root用户密码\nmysqladmin -u root -p'<wqB!ebdk6b4' password Root123?\n\n# 删除测试数据库和匿名用户\nmysql_secure_installation\n```\n\n> mysql密码需要符合一定的密码规则，否则设置会失败\n\n\n\n下面就可以连接mysql了：\n\n```bash\n$ mysql -uroot -pRoot123?\n```\n\n\n\n<br>\n\n\n\n# 源码方式安装\n\n## 依赖安装\n\n安装依赖包：\n\n```bash\nyum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel\n```\n\n\n\n## 下载源码包\n\n首先下载mysql5.7源码包：\n\n```bash\nwget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz\n```\n\n\n\n## 创建安装目录\n\n创建安装目录和数据目录，安装目录一般放在 `/usr/local/` 下，数据目录使用单独的磁盘：\n\n```bash\nmkdir /usr/local/mysql\nmkdir -p /data/3306/data\nmkdir -p /data/3306/binlog\n```\n\n\n\n## 安装boost库\n\n> 从mysql5.7开始，boost库是必须依赖的\n\n```bash\nmkdir /usr/local/boost\ncd /usr/local/boost\nwget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz\ntar zxf boost_1_59_0.tar.gz\n```\n\n\n\n## 编译安装mysql\n\n编译源码：\n\n```bash\ntar zxf mysql-boost-5.7.26.tar.gz\ncd mysql-5.7.26/\n\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\   \n-DMYSQL_DATADIR=/data/3306/data \\\n-DSYSCONFDIR=/data/3306 \\\n-DWITH_MYISAM_STORAGE_ENGINE=1 \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_MEMORY_STORAGE_ENGINE=1 \\\n-DWITH_READLINE=1 \\\n-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\\n-DMYSQL_TCP_PORT=3306 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_PARTITION_STORAGE_ENGINE=1 \\\n-DEXTRA_CHARSETS=all \\\n-DDEFAULT_CHARSET=utf8mb4 \\\n-DDEFAULT_COLLATION=utf8mb4_general_ci \\\n-DWITH_BOOST=/usr/local/boost\n```\n\n- `DCMAKE_INSTALL_PREFIX` ：安装的根目录；\n- `DMYSQL_DATADIR`：数据目录；\n- `DSYSCONFDIR`：配置文件目录；\n- `DWITH_MYISAM_STORAGE_ENGINE=1`：编译myisam存储引擎，默认的存储引擎，不加也可以；\n- `DWITH_INNOBASE_STORAGE_ENGINE=1`：支持InnoDB存储引擎，这个也是默认安装的；\n- `DWITH_MEMORY_STORAGE_ENGINE=1`： 持MEMORY引擎；\n- `DWITH_READLINE=1`：使用readline功能；\n- `DMYSQL_UNIX_ADDR`：sock文件存放目录；\n- `DMYSQL_TCP_PORT=3306` ：数据库端口；\n- `DENABLED_LOCAL_INFILE=1`：可以使用load data infile命令从本地导入文件；\n- `DWITH_PARTITION_STORAGE_ENGINE=1`： 安装数据库分区；\n- `DEXTRA_CHARSETS=all`： 支持所有字符集；\n- `DDEFAULT_CHARSET=utf8mb4`：默认字符集；\n- `DDEFAULT_COLLATION=utf8mb4_general_ci` ：默认效验字符集排序规则，要和`DDEFAULT_CHARSET`一起用；\n- `DWITH_BOOST=/usr/local/boost`：指定boost库位置，从5.7.5开始Boost库是必需的；\n\n\n\n编译成功后进行安装：\n\n```bash\nmake && make install\nmake clean\n```\n\n\n\n## 添加用户并初始化\n\n```bash\ngroupadd mysql\nuseradd -g mysql mysql\nchown -R mysql:mysql /usr/local/mysql\nchown -R mysql:mysql /data/3306\ncd /usr/local/mysql\n./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/3306/data/ \n```\n\n\n\n观察初始化输出，找到类似于如下的一行：\n\n```\n2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &leFGSPpM4sC\n```\n\n> **这个是初始化设置的mysql默认root密码，需要暂时记住。**\n\n\n\n## 环境设置\n\n设置环境变量：\n\n```bash\necho \"export PATH=$PATH:/usr/local/mysql/bin\" >> /etc/profile\nsource /etc/profile\n```\n\n\n\n设置mysql启动文件：\n\n```bash\ncd /usr/local/mysql/support-files\ncp mysql.server /etc/init.d/mysqld\nchmod 755 /etc/init.d/mysqld\n```\n\n\n\n修改mysql启动脚本，设置数据目录和根目录：\n\n```bash\nvim /etc/init.d/mysqld\n\n// 修改下面的项目指定根目录\nbasedir=/usr/local/mysql/\ndatadir=/data/3306/data/\n```\n\n\n\n修改配置文件：\n\n```bash\nvim /etc/my.cnf\n\n// 修改为如下的形式\n[mysqld]\nbasedir=/usr/local/mysql\ndatadir=/data/3306/data/\nsocket=/data/3306/mysql.sock\nuser=mysql\ntmpdir=/data/3306/\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\n[mysqld_safe]\nlog-error=/data/3306/data/error.log\npid-file=/data/3306/data/mysql.pid\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\n```\n\n\n\n## 启动服务并连接\n\n启动mysql：\n\n```bash\nservice mysqld start \nnetstat -ntlp | grep mysqld\ntcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld        \n```\n\n\n\n现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：\n\n```bash\n# 设置root用户密码\nmysqladmin -u root -p'&leFGSPpM4sC' password Root123?\n\n# 删除测试数据库和匿名用户\nmysql_secure_installation\nmysql -uroot -pRoot123?\n```\n\n","source":"_posts/部署Mysql5-7.md","raw":"---\ntitle: 部署Mysql5.7\ndate: 2021-03-21 17:30:43\ntags:\n- MySQL\ncategories:\n- 数据库\n- MySQL\n- 部署\ndescription: 使用RPM和源码两种方式部署一个单节点mysql 5.7服务\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-c16b7d2b9e1ee5bccad87488ea69e352_1200x500.jpg&refer=http%3A%2F%2Fpic2.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1618911539&t=69fb2b2d94fdfe5deb68e606202bc923\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用RPM和源码两种方式部署一个单节点mysql 5.7服务，实验环境为centos7\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# RPM方式部署\n\n## 卸载旧版本\n\n首先检查是否存在旧的mysql：\n\n```bash\nrpm -qa | grep -i mysql\n```\n\n\n\n如果存在就需要卸载：\n\n```bash\nrpm -ev [旧的mysql包名]\n```\n\n\n\n## 下载\n\n下载mysql5.7官方prm包\n\n```bash\nwget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar\n```\n\n\n\n然后解压，可以看到解压出如下的一些安装包：\n\n```bash\ntar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar \n\nmysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-5.7.26-1.el7.x86_64.rpm\nmysql-community-test-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm\nmysql-community-common-5.7.26-1.el7.x86_64.rpm\nmysql-community-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-client-5.7.26-1.el7.x86_64.rpm\nmysql-community-server-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm\n```\n\n- mysql-community-client：客户端的安装包；\n- mysql-community-server：服务端的安装包；\n- mysql-community-devel：包含开发库文件的安装包；\n- mysql-community-test：包含测试的安装包；\n- mysql-community-embedded：嵌入式mysql安装包；\n\n\n\n## 安装\n\n一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：\n\n```bash\nrpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm\nrpm -ivh mysql-community-libs*\nrpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm\nrpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm\nyum install -y perl libaio libaio-devel numactl net-tools\nrpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm\n```\n\n\n\n## 启动服务\n\n启动mysql服务\n\n```bash\nsystemctl start mysqld.service\n```\n\n\n\n## 获取初始密码\n\n查看mysql日志，找到类似下面的这一行：\n\n```bash\ncat /var/log/mysql.log\n\n[Note] A temporary password is generated for root@localhost: <wqB!ebdk6b4\n```\n\n> mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码\n\n\n\n## 修改密码并连接\n\n可以通过下面的命令修改root密码并删除测试数据库和匿名用户\n\n```bash\n# 设置root用户密码\nmysqladmin -u root -p'<wqB!ebdk6b4' password Root123?\n\n# 删除测试数据库和匿名用户\nmysql_secure_installation\n```\n\n> mysql密码需要符合一定的密码规则，否则设置会失败\n\n\n\n下面就可以连接mysql了：\n\n```bash\n$ mysql -uroot -pRoot123?\n```\n\n\n\n<br>\n\n\n\n# 源码方式安装\n\n## 依赖安装\n\n安装依赖包：\n\n```bash\nyum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel\n```\n\n\n\n## 下载源码包\n\n首先下载mysql5.7源码包：\n\n```bash\nwget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz\n```\n\n\n\n## 创建安装目录\n\n创建安装目录和数据目录，安装目录一般放在 `/usr/local/` 下，数据目录使用单独的磁盘：\n\n```bash\nmkdir /usr/local/mysql\nmkdir -p /data/3306/data\nmkdir -p /data/3306/binlog\n```\n\n\n\n## 安装boost库\n\n> 从mysql5.7开始，boost库是必须依赖的\n\n```bash\nmkdir /usr/local/boost\ncd /usr/local/boost\nwget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz\ntar zxf boost_1_59_0.tar.gz\n```\n\n\n\n## 编译安装mysql\n\n编译源码：\n\n```bash\ntar zxf mysql-boost-5.7.26.tar.gz\ncd mysql-5.7.26/\n\ncmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\   \n-DMYSQL_DATADIR=/data/3306/data \\\n-DSYSCONFDIR=/data/3306 \\\n-DWITH_MYISAM_STORAGE_ENGINE=1 \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_MEMORY_STORAGE_ENGINE=1 \\\n-DWITH_READLINE=1 \\\n-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\\n-DMYSQL_TCP_PORT=3306 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_PARTITION_STORAGE_ENGINE=1 \\\n-DEXTRA_CHARSETS=all \\\n-DDEFAULT_CHARSET=utf8mb4 \\\n-DDEFAULT_COLLATION=utf8mb4_general_ci \\\n-DWITH_BOOST=/usr/local/boost\n```\n\n- `DCMAKE_INSTALL_PREFIX` ：安装的根目录；\n- `DMYSQL_DATADIR`：数据目录；\n- `DSYSCONFDIR`：配置文件目录；\n- `DWITH_MYISAM_STORAGE_ENGINE=1`：编译myisam存储引擎，默认的存储引擎，不加也可以；\n- `DWITH_INNOBASE_STORAGE_ENGINE=1`：支持InnoDB存储引擎，这个也是默认安装的；\n- `DWITH_MEMORY_STORAGE_ENGINE=1`： 持MEMORY引擎；\n- `DWITH_READLINE=1`：使用readline功能；\n- `DMYSQL_UNIX_ADDR`：sock文件存放目录；\n- `DMYSQL_TCP_PORT=3306` ：数据库端口；\n- `DENABLED_LOCAL_INFILE=1`：可以使用load data infile命令从本地导入文件；\n- `DWITH_PARTITION_STORAGE_ENGINE=1`： 安装数据库分区；\n- `DEXTRA_CHARSETS=all`： 支持所有字符集；\n- `DDEFAULT_CHARSET=utf8mb4`：默认字符集；\n- `DDEFAULT_COLLATION=utf8mb4_general_ci` ：默认效验字符集排序规则，要和`DDEFAULT_CHARSET`一起用；\n- `DWITH_BOOST=/usr/local/boost`：指定boost库位置，从5.7.5开始Boost库是必需的；\n\n\n\n编译成功后进行安装：\n\n```bash\nmake && make install\nmake clean\n```\n\n\n\n## 添加用户并初始化\n\n```bash\ngroupadd mysql\nuseradd -g mysql mysql\nchown -R mysql:mysql /usr/local/mysql\nchown -R mysql:mysql /data/3306\ncd /usr/local/mysql\n./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/3306/data/ \n```\n\n\n\n观察初始化输出，找到类似于如下的一行：\n\n```\n2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &leFGSPpM4sC\n```\n\n> **这个是初始化设置的mysql默认root密码，需要暂时记住。**\n\n\n\n## 环境设置\n\n设置环境变量：\n\n```bash\necho \"export PATH=$PATH:/usr/local/mysql/bin\" >> /etc/profile\nsource /etc/profile\n```\n\n\n\n设置mysql启动文件：\n\n```bash\ncd /usr/local/mysql/support-files\ncp mysql.server /etc/init.d/mysqld\nchmod 755 /etc/init.d/mysqld\n```\n\n\n\n修改mysql启动脚本，设置数据目录和根目录：\n\n```bash\nvim /etc/init.d/mysqld\n\n// 修改下面的项目指定根目录\nbasedir=/usr/local/mysql/\ndatadir=/data/3306/data/\n```\n\n\n\n修改配置文件：\n\n```bash\nvim /etc/my.cnf\n\n// 修改为如下的形式\n[mysqld]\nbasedir=/usr/local/mysql\ndatadir=/data/3306/data/\nsocket=/data/3306/mysql.sock\nuser=mysql\ntmpdir=/data/3306/\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\n[mysqld_safe]\nlog-error=/data/3306/data/error.log\npid-file=/data/3306/data/mysql.pid\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\n```\n\n\n\n## 启动服务并连接\n\n启动mysql：\n\n```bash\nservice mysqld start \nnetstat -ntlp | grep mysqld\ntcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld        \n```\n\n\n\n现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：\n\n```bash\n# 设置root用户密码\nmysqladmin -u root -p'&leFGSPpM4sC' password Root123?\n\n# 删除测试数据库和匿名用户\nmysql_secure_installation\nmysql -uroot -pRoot123?\n```\n\n","slug":"部署Mysql5-7","published":1,"updated":"2021-03-21T09:39:11.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de61001jp0kl0r8t22qq","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用RPM和源码两种方式部署一个单节点mysql 5.7服务，实验环境为centos7</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"RPM方式部署\"><a href=\"#RPM方式部署\" class=\"headerlink\" title=\"RPM方式部署\"></a>RPM方式部署</h1><h2 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h2><p>首先检查是否存在旧的mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果存在就需要卸载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ev [旧的mysql包名]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载mysql5.7官方prm包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后解压，可以看到解压出如下的一些安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar </span><br><span class=\"line\"></span><br><span class=\"line\">mysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-test-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mysql-community-client：客户端的安装包；</li>\n<li>mysql-community-server：服务端的安装包；</li>\n<li>mysql-community-devel：包含开发库文件的安装包；</li>\n<li>mysql-community-test：包含测试的安装包；</li>\n<li>mysql-community-embedded：嵌入式mysql安装包；</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-libs*</span><br><span class=\"line\">rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">yum install -y perl libaio libaio-devel numactl net-tools</span><br><span class=\"line\">rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><p>启动mysql服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"获取初始密码\"><a href=\"#获取初始密码\" class=\"headerlink\" title=\"获取初始密码\"></a>获取初始密码</h2><p>查看mysql日志，找到类似下面的这一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/<span class=\"built_in\">log</span>/mysql.log</span><br><span class=\"line\"></span><br><span class=\"line\">[Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: &lt;wqB!ebdk6b4</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码</p>\n</blockquote>\n<h2 id=\"修改密码并连接\"><a href=\"#修改密码并连接\" class=\"headerlink\" title=\"修改密码并连接\"></a>修改密码并连接</h2><p>可以通过下面的命令修改root密码并删除测试数据库和匿名用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">mysqladmin -u root -p<span class=\"string\">&#x27;&lt;wqB!ebdk6b4&#x27;</span> password Root123?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql密码需要符合一定的密码规则，否则设置会失败</p>\n</blockquote>\n<p>下面就可以连接mysql了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h1><h2 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h2><p>安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h2><p>首先下载mysql5.7源码包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建安装目录\"><a href=\"#创建安装目录\" class=\"headerlink\" title=\"创建安装目录\"></a>创建安装目录</h2><p>创建安装目录和数据目录，安装目录一般放在 <code>/usr/local/</code> 下，数据目录使用单独的磁盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">mkdir -p /data/3306/data</span><br><span class=\"line\">mkdir -p /data/3306/binlog</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装boost库\"><a href=\"#安装boost库\" class=\"headerlink\" title=\"安装boost库\"></a>安装boost库</h2><blockquote>\n<p>从mysql5.7开始，boost库是必须依赖的</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\">wget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class=\"line\">tar zxf boost_1_59_0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编译安装mysql\"><a href=\"#编译安装mysql\" class=\"headerlink\" title=\"编译安装mysql\"></a>编译安装mysql</h2><p>编译源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf mysql-boost-5.7.26.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> mysql-5.7.26/</span><br><span class=\"line\"></span><br><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span>/mysql \\   </span><br><span class=\"line\">-DMYSQL_DATADIR=/data/3306/data \\</span><br><span class=\"line\">-DSYSCONFDIR=/data/3306 \\</span><br><span class=\"line\">-DWITH_MYISAM_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_MEMORY_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_READLINE=1 \\</span><br><span class=\"line\">-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\</span><br><span class=\"line\">-DMYSQL_TCP_PORT=3306 \\</span><br><span class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</span><br><span class=\"line\">-DWITH_PARTITION_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DEXTRA_CHARSETS=all \\</span><br><span class=\"line\">-DDEFAULT_CHARSET=utf8mb4 \\</span><br><span class=\"line\">-DDEFAULT_COLLATION=utf8mb4_general_ci \\</span><br><span class=\"line\">-DWITH_BOOST=/usr/<span class=\"built_in\">local</span>/boost</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>DCMAKE_INSTALL_PREFIX</code> ：安装的根目录；</li>\n<li><code>DMYSQL_DATADIR</code>：数据目录；</li>\n<li><code>DSYSCONFDIR</code>：配置文件目录；</li>\n<li><code>DWITH_MYISAM_STORAGE_ENGINE=1</code>：编译myisam存储引擎，默认的存储引擎，不加也可以；</li>\n<li><code>DWITH_INNOBASE_STORAGE_ENGINE=1</code>：支持InnoDB存储引擎，这个也是默认安装的；</li>\n<li><code>DWITH_MEMORY_STORAGE_ENGINE=1</code>： 持MEMORY引擎；</li>\n<li><code>DWITH_READLINE=1</code>：使用readline功能；</li>\n<li><code>DMYSQL_UNIX_ADDR</code>：sock文件存放目录；</li>\n<li><code>DMYSQL_TCP_PORT=3306</code> ：数据库端口；</li>\n<li><code>DENABLED_LOCAL_INFILE=1</code>：可以使用load data infile命令从本地导入文件；</li>\n<li><code>DWITH_PARTITION_STORAGE_ENGINE=1</code>： 安装数据库分区；</li>\n<li><code>DEXTRA_CHARSETS=all</code>： 支持所有字符集；</li>\n<li><code>DDEFAULT_CHARSET=utf8mb4</code>：默认字符集；</li>\n<li><code>DDEFAULT_COLLATION=utf8mb4_general_ci</code> ：默认效验字符集排序规则，要和<code>DDEFAULT_CHARSET</code>一起用；</li>\n<li><code>DWITH_BOOST=/usr/local/boost</code>：指定boost库位置，从5.7.5开始Boost库是必需的；</li>\n</ul>\n<p>编译成功后进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">make clean</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加用户并初始化\"><a href=\"#添加用户并初始化\" class=\"headerlink\" title=\"添加用户并初始化\"></a>添加用户并初始化</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br><span class=\"line\">chown -R mysql:mysql /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">chown -R mysql:mysql /data/3306</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">./bin/mysqld --initialize --user=mysql --basedir=/usr/<span class=\"built_in\">local</span>/mysql --datadir=/data/3306/data/ </span><br></pre></td></tr></table></figure>\n\n\n\n<p>观察初始化输出，找到类似于如下的一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &amp;leFGSPpM4sC</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>这个是初始化设置的mysql默认root密码，需要暂时记住。</strong></p>\n</blockquote>\n<h2 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h2><p>设置环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:/usr/local/mysql/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置mysql启动文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql/support-files</span><br><span class=\"line\">cp mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">chmod 755 /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改mysql启动脚本，设置数据目录和根目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改下面的项目指定根目录</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\">datadir=/data/3306/data/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改为如下的形式</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/3306/data/</span><br><span class=\"line\">socket=/data/3306/mysql.sock</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">tmpdir=/data/3306/</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\"><span class=\"comment\"># Settings user and group are ignored when systemd is used.</span></span><br><span class=\"line\"><span class=\"comment\"># If you need to run mysqld under a different user or group,</span></span><br><span class=\"line\"><span class=\"comment\"># customize your systemd unit file for mariadb according to the</span></span><br><span class=\"line\"><span class=\"comment\"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log-error=/data/3306/data/error.log</span><br><span class=\"line\">pid-file=/data/3306/data/mysql.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># include all files from the config directory</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动服务并连接\"><a href=\"#启动服务并连接\" class=\"headerlink\" title=\"启动服务并连接\"></a>启动服务并连接</h2><p>启动mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start </span><br><span class=\"line\">netstat -ntlp | grep mysqld</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld        </span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">mysqladmin -u root -p<span class=\"string\">&#x27;&amp;leFGSPpM4sC&#x27;</span> password Root123?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">mysql_secure_installation</span><br><span class=\"line\">mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用RPM和源码两种方式部署一个单节点mysql 5.7服务，实验环境为centos7</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"RPM方式部署\"><a href=\"#RPM方式部署\" class=\"headerlink\" title=\"RPM方式部署\"></a>RPM方式部署</h1><h2 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h2><p>首先检查是否存在旧的mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果存在就需要卸载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ev [旧的mysql包名]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载mysql5.7官方prm包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后解压，可以看到解压出如下的一些安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar </span><br><span class=\"line\"></span><br><span class=\"line\">mysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-test-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mysql-community-client：客户端的安装包；</li>\n<li>mysql-community-server：服务端的安装包；</li>\n<li>mysql-community-devel：包含开发库文件的安装包；</li>\n<li>mysql-community-test：包含测试的安装包；</li>\n<li>mysql-community-embedded：嵌入式mysql安装包；</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-libs*</span><br><span class=\"line\">rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">yum install -y perl libaio libaio-devel numactl net-tools</span><br><span class=\"line\">rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><p>启动mysql服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"获取初始密码\"><a href=\"#获取初始密码\" class=\"headerlink\" title=\"获取初始密码\"></a>获取初始密码</h2><p>查看mysql日志，找到类似下面的这一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/<span class=\"built_in\">log</span>/mysql.log</span><br><span class=\"line\"></span><br><span class=\"line\">[Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: &lt;wqB!ebdk6b4</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码</p>\n</blockquote>\n<h2 id=\"修改密码并连接\"><a href=\"#修改密码并连接\" class=\"headerlink\" title=\"修改密码并连接\"></a>修改密码并连接</h2><p>可以通过下面的命令修改root密码并删除测试数据库和匿名用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">mysqladmin -u root -p<span class=\"string\">&#x27;&lt;wqB!ebdk6b4&#x27;</span> password Root123?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql密码需要符合一定的密码规则，否则设置会失败</p>\n</blockquote>\n<p>下面就可以连接mysql了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h1><h2 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h2><p>安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h2><p>首先下载mysql5.7源码包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建安装目录\"><a href=\"#创建安装目录\" class=\"headerlink\" title=\"创建安装目录\"></a>创建安装目录</h2><p>创建安装目录和数据目录，安装目录一般放在 <code>/usr/local/</code> 下，数据目录使用单独的磁盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">mkdir -p /data/3306/data</span><br><span class=\"line\">mkdir -p /data/3306/binlog</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装boost库\"><a href=\"#安装boost库\" class=\"headerlink\" title=\"安装boost库\"></a>安装boost库</h2><blockquote>\n<p>从mysql5.7开始，boost库是必须依赖的</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\">wget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class=\"line\">tar zxf boost_1_59_0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编译安装mysql\"><a href=\"#编译安装mysql\" class=\"headerlink\" title=\"编译安装mysql\"></a>编译安装mysql</h2><p>编译源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf mysql-boost-5.7.26.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> mysql-5.7.26/</span><br><span class=\"line\"></span><br><span class=\"line\">cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span>/mysql \\   </span><br><span class=\"line\">-DMYSQL_DATADIR=/data/3306/data \\</span><br><span class=\"line\">-DSYSCONFDIR=/data/3306 \\</span><br><span class=\"line\">-DWITH_MYISAM_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_MEMORY_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_READLINE=1 \\</span><br><span class=\"line\">-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\</span><br><span class=\"line\">-DMYSQL_TCP_PORT=3306 \\</span><br><span class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</span><br><span class=\"line\">-DWITH_PARTITION_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DEXTRA_CHARSETS=all \\</span><br><span class=\"line\">-DDEFAULT_CHARSET=utf8mb4 \\</span><br><span class=\"line\">-DDEFAULT_COLLATION=utf8mb4_general_ci \\</span><br><span class=\"line\">-DWITH_BOOST=/usr/<span class=\"built_in\">local</span>/boost</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>DCMAKE_INSTALL_PREFIX</code> ：安装的根目录；</li>\n<li><code>DMYSQL_DATADIR</code>：数据目录；</li>\n<li><code>DSYSCONFDIR</code>：配置文件目录；</li>\n<li><code>DWITH_MYISAM_STORAGE_ENGINE=1</code>：编译myisam存储引擎，默认的存储引擎，不加也可以；</li>\n<li><code>DWITH_INNOBASE_STORAGE_ENGINE=1</code>：支持InnoDB存储引擎，这个也是默认安装的；</li>\n<li><code>DWITH_MEMORY_STORAGE_ENGINE=1</code>： 持MEMORY引擎；</li>\n<li><code>DWITH_READLINE=1</code>：使用readline功能；</li>\n<li><code>DMYSQL_UNIX_ADDR</code>：sock文件存放目录；</li>\n<li><code>DMYSQL_TCP_PORT=3306</code> ：数据库端口；</li>\n<li><code>DENABLED_LOCAL_INFILE=1</code>：可以使用load data infile命令从本地导入文件；</li>\n<li><code>DWITH_PARTITION_STORAGE_ENGINE=1</code>： 安装数据库分区；</li>\n<li><code>DEXTRA_CHARSETS=all</code>： 支持所有字符集；</li>\n<li><code>DDEFAULT_CHARSET=utf8mb4</code>：默认字符集；</li>\n<li><code>DDEFAULT_COLLATION=utf8mb4_general_ci</code> ：默认效验字符集排序规则，要和<code>DDEFAULT_CHARSET</code>一起用；</li>\n<li><code>DWITH_BOOST=/usr/local/boost</code>：指定boost库位置，从5.7.5开始Boost库是必需的；</li>\n</ul>\n<p>编译成功后进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">make clean</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加用户并初始化\"><a href=\"#添加用户并初始化\" class=\"headerlink\" title=\"添加用户并初始化\"></a>添加用户并初始化</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br><span class=\"line\">chown -R mysql:mysql /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">chown -R mysql:mysql /data/3306</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">./bin/mysqld --initialize --user=mysql --basedir=/usr/<span class=\"built_in\">local</span>/mysql --datadir=/data/3306/data/ </span><br></pre></td></tr></table></figure>\n\n\n\n<p>观察初始化输出，找到类似于如下的一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &amp;leFGSPpM4sC</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>这个是初始化设置的mysql默认root密码，需要暂时记住。</strong></p>\n</blockquote>\n<h2 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h2><p>设置环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:/usr/local/mysql/bin&quot;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置mysql启动文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql/support-files</span><br><span class=\"line\">cp mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">chmod 755 /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改mysql启动脚本，设置数据目录和根目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改下面的项目指定根目录</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\">datadir=/data/3306/data/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改为如下的形式</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/3306/data/</span><br><span class=\"line\">socket=/data/3306/mysql.sock</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">tmpdir=/data/3306/</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\"><span class=\"comment\"># Settings user and group are ignored when systemd is used.</span></span><br><span class=\"line\"><span class=\"comment\"># If you need to run mysqld under a different user or group,</span></span><br><span class=\"line\"><span class=\"comment\"># customize your systemd unit file for mariadb according to the</span></span><br><span class=\"line\"><span class=\"comment\"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log-error=/data/3306/data/error.log</span><br><span class=\"line\">pid-file=/data/3306/data/mysql.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># include all files from the config directory</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动服务并连接\"><a href=\"#启动服务并连接\" class=\"headerlink\" title=\"启动服务并连接\"></a>启动服务并连接</h2><p>启动mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start </span><br><span class=\"line\">netstat -ntlp | grep mysqld</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld        </span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">mysqladmin -u root -p<span class=\"string\">&#x27;&amp;leFGSPpM4sC&#x27;</span> password Root123?</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">mysql_secure_installation</span><br><span class=\"line\">mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n"},{"title":"部署Nginx","date":"2021-04-13T00:38:54.000Z","description":"使用yum和源码两种方式部署nginx服务","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.nd9p.com%2Fuploads%2Fallimg%2F160529%2F2143353111_0.jpg&refer=http%3A%2F%2Fwww.nd9p.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620866496&t=e367c0adebb6cf217109959821f24a66","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用yum和源码两种方式部署nginx服务\n\n更新于 2021-04-13\n\n{% endnote %}\n\n<br>\n\n\n\n# yum方式部署\n\n## 安装依赖\n\n```bash\nyum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n 有些工具包也可以选择安装：\n\n```bash\nyum install -y wget http-tools vim\n```\n\n‌\n\n## 添加yum源\n\n```bash\ncat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n```\n\n‌\n\n## 安装nginx\n\n```bash\n# 查看nginx版本\nyum list | grep nginx\n\n# 安装最新版\nyum install -y nginx\n```\n\n\n\n## 查看nginx版本和编译参数\n\n```bash\n# 查看nginx版本\nnginx -v\n\n# 查看nginx编译参数\nnginx -V\n```\n\n\n\n## 默认安装的目录和文件\n\n使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：\n\n```bash\nrpm -ql nginx\n```\n\n\n\n重要的配置文件如下：\n\n- `/etc/logrotate.d/nginx`：nginx配置logrotate日志切割的配置文件；\n- `/etc/nginx`：安装目录；\n- `/etc/nginx/nginx.conf`：主配置文件；\n- `/etc/nginx/conf.d`：其他配置存放的目录；\n- `/etc/nginx/conf.d/default.conf`：默认加载的配置；\n- `/etc/nginx/fastcgi_params`：fastcgi配置文件；\n- `/etc/nginx/scgi_params`：scgi配置文件；\n- `/etc/nginx/uwsgi_params`：uwsgi配置文件；\n- `/etc/nginx/{koi-win, koi-utf, win-utf}`：编码转换配置文件；\n- `/etc/nginx/mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n- `/var/cache/nginx`：用于缓存的目录；\n- `/var/log/nginx`：日志目录；\n\n\n\n## nginx启动\n\n```bash\n# 启动\nsystemctl start nginx\n\n# 开机自启动\nsystemctl enable nginx\n\n# 查看nginx状态\nsystemctl status nginx\n\n# 停止nginx\nsystemctl stop nginx\n\n# 重启\nsystemctl restart nginx\n```\n\n<br>\n\n\n\n# 源码方式部署\n\n## 安装依赖\n\n```bash\nyum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n## 下载源码包\n\n这里我使用的是1.18.0版本\n\n```bash\nwget http://nginx.org/download/nginx-1.18.0.tar.gz\n```\n\n\n\n## 编译安装\n\n```bash\n# 添加用户和组\ngroupadd nginx\nuseradd -g nginx nginx \n\n# 编译安装\ntar zxf nginx-1.18.0.tar.gz\ncd nginx-1.18.0\n./configure \\\n--user=nginx \\\n--group=nginx \\\n--prefix=/usr/local/nginx \\\n--with-http_ssl_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-threads\n\nmake && make install\n\n# 设置环境变量\necho \"export PATH=$PATH:/usr/local/nginx/sbin\" >> /etc/profile\nsource /etc/profile\n```\n\n> 根据实际需求增减编译的模块\n\n\n\n## 检查\n\n```bash\nnginx -v\nnginx -V\n```\n\n\n\n![](./install_source.png)\n\n\n\n## 设置启动文件\n\n```bash\ncat > /usr/lib/systemd/system/nginx.service << EOF\n[Unit]\nDescription=nginx service\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s quit\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n\n\n## 启动nginx\n\n```bash\nsystemctl daemon-reload\nsystemctl start nginx\nsystemctl enable nginx\nsystemctl status nginx\n```\n\n\n\n## 安装的文件\n\n在编译的时候指定了nginx的安装目录为：`--prefix=/usr/local/nginx`，安装后会有以下文件：\n\n- `conf`：配置文件目录；\n  - `fastcgi.conf`：fastcgi配置文件；\n  - `mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n  - `uwsgi_params`：uwsgi配置文件；\n  - `koi-win, koi-utf, win-utf`：编码转换配置文件；\n  - `scgi_params`：scgi配置文件；\n  - `fastcgi_params`：fastcgi配置文件；\n  - `nginx.conf`：nginx主配置文件；\n- `html`：默认的静态文件根目录；\n- `sbin`：二进制命令文件目录；\n\n","source":"_posts/部署Nginx.md","raw":"---\ntitle: 部署Nginx\ndate: 2021-04-13 08:38:54\ntags:\n- Nginx\ncategories:\n- Nginx\n- 部署\ndescription: 使用yum和源码两种方式部署nginx服务\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.nd9p.com%2Fuploads%2Fallimg%2F160529%2F2143353111_0.jpg&refer=http%3A%2F%2Fwww.nd9p.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620866496&t=e367c0adebb6cf217109959821f24a66\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用yum和源码两种方式部署nginx服务\n\n更新于 2021-04-13\n\n{% endnote %}\n\n<br>\n\n\n\n# yum方式部署\n\n## 安装依赖\n\n```bash\nyum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n 有些工具包也可以选择安装：\n\n```bash\nyum install -y wget http-tools vim\n```\n\n‌\n\n## 添加yum源\n\n```bash\ncat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n```\n\n‌\n\n## 安装nginx\n\n```bash\n# 查看nginx版本\nyum list | grep nginx\n\n# 安装最新版\nyum install -y nginx\n```\n\n\n\n## 查看nginx版本和编译参数\n\n```bash\n# 查看nginx版本\nnginx -v\n\n# 查看nginx编译参数\nnginx -V\n```\n\n\n\n## 默认安装的目录和文件\n\n使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：\n\n```bash\nrpm -ql nginx\n```\n\n\n\n重要的配置文件如下：\n\n- `/etc/logrotate.d/nginx`：nginx配置logrotate日志切割的配置文件；\n- `/etc/nginx`：安装目录；\n- `/etc/nginx/nginx.conf`：主配置文件；\n- `/etc/nginx/conf.d`：其他配置存放的目录；\n- `/etc/nginx/conf.d/default.conf`：默认加载的配置；\n- `/etc/nginx/fastcgi_params`：fastcgi配置文件；\n- `/etc/nginx/scgi_params`：scgi配置文件；\n- `/etc/nginx/uwsgi_params`：uwsgi配置文件；\n- `/etc/nginx/{koi-win, koi-utf, win-utf}`：编码转换配置文件；\n- `/etc/nginx/mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n- `/var/cache/nginx`：用于缓存的目录；\n- `/var/log/nginx`：日志目录；\n\n\n\n## nginx启动\n\n```bash\n# 启动\nsystemctl start nginx\n\n# 开机自启动\nsystemctl enable nginx\n\n# 查看nginx状态\nsystemctl status nginx\n\n# 停止nginx\nsystemctl stop nginx\n\n# 重启\nsystemctl restart nginx\n```\n\n<br>\n\n\n\n# 源码方式部署\n\n## 安装依赖\n\n```bash\nyum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n## 下载源码包\n\n这里我使用的是1.18.0版本\n\n```bash\nwget http://nginx.org/download/nginx-1.18.0.tar.gz\n```\n\n\n\n## 编译安装\n\n```bash\n# 添加用户和组\ngroupadd nginx\nuseradd -g nginx nginx \n\n# 编译安装\ntar zxf nginx-1.18.0.tar.gz\ncd nginx-1.18.0\n./configure \\\n--user=nginx \\\n--group=nginx \\\n--prefix=/usr/local/nginx \\\n--with-http_ssl_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-threads\n\nmake && make install\n\n# 设置环境变量\necho \"export PATH=$PATH:/usr/local/nginx/sbin\" >> /etc/profile\nsource /etc/profile\n```\n\n> 根据实际需求增减编译的模块\n\n\n\n## 检查\n\n```bash\nnginx -v\nnginx -V\n```\n\n\n\n![](./install_source.png)\n\n\n\n## 设置启动文件\n\n```bash\ncat > /usr/lib/systemd/system/nginx.service << EOF\n[Unit]\nDescription=nginx service\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s quit\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n\n\n## 启动nginx\n\n```bash\nsystemctl daemon-reload\nsystemctl start nginx\nsystemctl enable nginx\nsystemctl status nginx\n```\n\n\n\n## 安装的文件\n\n在编译的时候指定了nginx的安装目录为：`--prefix=/usr/local/nginx`，安装后会有以下文件：\n\n- `conf`：配置文件目录；\n  - `fastcgi.conf`：fastcgi配置文件；\n  - `mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n  - `uwsgi_params`：uwsgi配置文件；\n  - `koi-win, koi-utf, win-utf`：编码转换配置文件；\n  - `scgi_params`：scgi配置文件；\n  - `fastcgi_params`：fastcgi配置文件；\n  - `nginx.conf`：nginx主配置文件；\n- `html`：默认的静态文件根目录；\n- `sbin`：二进制命令文件目录；\n\n","slug":"部署Nginx","published":1,"updated":"2021-04-13T00:54:30.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de62001lp0kl4st0789e","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用yum和源码两种方式部署nginx服务</p><p>更新于 2021-04-13</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"yum方式部署\"><a href=\"#yum方式部署\" class=\"headerlink\" title=\"yum方式部署\"></a>yum方式部署</h1><h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 有些工具包也可以选择安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget http-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"添加yum源\"><a href=\"#添加yum源\" class=\"headerlink\" title=\"添加yum源\"></a>添加yum源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[nginx-stable]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx stable repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[nginx-mainline]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx mainline repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">yum list | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装最新版</span></span><br><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看nginx版本和编译参数\"><a href=\"#查看nginx版本和编译参数\" class=\"headerlink\" title=\"查看nginx版本和编译参数\"></a>查看nginx版本和编译参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx编译参数</span></span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"默认安装的目录和文件\"><a href=\"#默认安装的目录和文件\" class=\"headerlink\" title=\"默认安装的目录和文件\"></a>默认安装的目录和文件</h2><p>使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重要的配置文件如下：</p>\n<ul>\n<li><code>/etc/logrotate.d/nginx</code>：nginx配置logrotate日志切割的配置文件；</li>\n<li><code>/etc/nginx</code>：安装目录；</li>\n<li><code>/etc/nginx/nginx.conf</code>：主配置文件；</li>\n<li><code>/etc/nginx/conf.d</code>：其他配置存放的目录；</li>\n<li><code>/etc/nginx/conf.d/default.conf</code>：默认加载的配置；</li>\n<li><code>/etc/nginx/fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>/etc/nginx/scgi_params</code>：scgi配置文件；</li>\n<li><code>/etc/nginx/uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>/etc/nginx/&#123;koi-win, koi-utf, win-utf&#125;</code>：编码转换配置文件；</li>\n<li><code>/etc/nginx/mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>/var/cache/nginx</code>：用于缓存的目录；</li>\n<li><code>/var/log/nginx</code>：日志目录；</li>\n</ul>\n<h2 id=\"nginx启动\"><a href=\"#nginx启动\" class=\"headerlink\" title=\"nginx启动\"></a>nginx启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx状态</span></span><br><span class=\"line\">systemctl status nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止nginx</span></span><br><span class=\"line\">systemctl stop nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"源码方式部署\"><a href=\"#源码方式部署\" class=\"headerlink\" title=\"源码方式部署\"></a>源码方式部署</h1><h2 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h2><p>这里我使用的是1.18.0版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加用户和组</span></span><br><span class=\"line\">groupadd nginx</span><br><span class=\"line\">useradd -g nginx nginx </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">tar zxf nginx-1.18.0.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.18.0</span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-threads</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:/usr/local/nginx/sbin&quot;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>根据实际需求增减编译的模块</p>\n</blockquote>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"./install_source.png\" alt=\"\"></p>\n<h2 id=\"设置启动文件\"><a href=\"#设置启动文件\" class=\"headerlink\" title=\"设置启动文件\"></a>设置启动文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/nginx.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=nginx service</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=forking</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\"><span class=\"string\">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span></span><br><span class=\"line\"><span class=\"string\">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span></span><br><span class=\"line\"><span class=\"string\">PrivateTmp=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\">systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装的文件\"><a href=\"#安装的文件\" class=\"headerlink\" title=\"安装的文件\"></a>安装的文件</h2><p>在编译的时候指定了nginx的安装目录为：<code>--prefix=/usr/local/nginx</code>，安装后会有以下文件：</p>\n<ul>\n<li><code>conf</code>：配置文件目录；<ul>\n<li><code>fastcgi.conf</code>：fastcgi配置文件；</li>\n<li><code>mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>koi-win, koi-utf, win-utf</code>：编码转换配置文件；</li>\n<li><code>scgi_params</code>：scgi配置文件；</li>\n<li><code>fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>nginx.conf</code>：nginx主配置文件；</li>\n</ul>\n</li>\n<li><code>html</code>：默认的静态文件根目录；</li>\n<li><code>sbin</code>：二进制命令文件目录；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用yum和源码两种方式部署nginx服务</p><p>更新于 2021-04-13</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"yum方式部署\"><a href=\"#yum方式部署\" class=\"headerlink\" title=\"yum方式部署\"></a>yum方式部署</h1><h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 有些工具包也可以选择安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y wget http-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"添加yum源\"><a href=\"#添加yum源\" class=\"headerlink\" title=\"添加yum源\"></a>添加yum源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[nginx-stable]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx stable repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[nginx-mainline]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx mainline repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">yum list | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装最新版</span></span><br><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看nginx版本和编译参数\"><a href=\"#查看nginx版本和编译参数\" class=\"headerlink\" title=\"查看nginx版本和编译参数\"></a>查看nginx版本和编译参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx编译参数</span></span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"默认安装的目录和文件\"><a href=\"#默认安装的目录和文件\" class=\"headerlink\" title=\"默认安装的目录和文件\"></a>默认安装的目录和文件</h2><p>使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重要的配置文件如下：</p>\n<ul>\n<li><code>/etc/logrotate.d/nginx</code>：nginx配置logrotate日志切割的配置文件；</li>\n<li><code>/etc/nginx</code>：安装目录；</li>\n<li><code>/etc/nginx/nginx.conf</code>：主配置文件；</li>\n<li><code>/etc/nginx/conf.d</code>：其他配置存放的目录；</li>\n<li><code>/etc/nginx/conf.d/default.conf</code>：默认加载的配置；</li>\n<li><code>/etc/nginx/fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>/etc/nginx/scgi_params</code>：scgi配置文件；</li>\n<li><code>/etc/nginx/uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>/etc/nginx/&#123;koi-win, koi-utf, win-utf&#125;</code>：编码转换配置文件；</li>\n<li><code>/etc/nginx/mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>/var/cache/nginx</code>：用于缓存的目录；</li>\n<li><code>/var/log/nginx</code>：日志目录；</li>\n</ul>\n<h2 id=\"nginx启动\"><a href=\"#nginx启动\" class=\"headerlink\" title=\"nginx启动\"></a>nginx启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx状态</span></span><br><span class=\"line\">systemctl status nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止nginx</span></span><br><span class=\"line\">systemctl stop nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"源码方式部署\"><a href=\"#源码方式部署\" class=\"headerlink\" title=\"源码方式部署\"></a>源码方式部署</h1><h2 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h2><p>这里我使用的是1.18.0版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加用户和组</span></span><br><span class=\"line\">groupadd nginx</span><br><span class=\"line\">useradd -g nginx nginx </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">tar zxf nginx-1.18.0.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.18.0</span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-threads</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;export PATH=<span class=\"variable\">$PATH</span>:/usr/local/nginx/sbin&quot;</span> &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>根据实际需求增减编译的模块</p>\n</blockquote>\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"./install_source.png\" alt=\"\"></p>\n<h2 id=\"设置启动文件\"><a href=\"#设置启动文件\" class=\"headerlink\" title=\"设置启动文件\"></a>设置启动文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/nginx.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=nginx service</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=forking</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/local/nginx/sbin/nginx</span></span><br><span class=\"line\"><span class=\"string\">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span></span><br><span class=\"line\"><span class=\"string\">ExecStop=/usr/local/nginx/sbin/nginx -s quit</span></span><br><span class=\"line\"><span class=\"string\">PrivateTmp=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\">systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装的文件\"><a href=\"#安装的文件\" class=\"headerlink\" title=\"安装的文件\"></a>安装的文件</h2><p>在编译的时候指定了nginx的安装目录为：<code>--prefix=/usr/local/nginx</code>，安装后会有以下文件：</p>\n<ul>\n<li><code>conf</code>：配置文件目录；<ul>\n<li><code>fastcgi.conf</code>：fastcgi配置文件；</li>\n<li><code>mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>koi-win, koi-utf, win-utf</code>：编码转换配置文件；</li>\n<li><code>scgi_params</code>：scgi配置文件；</li>\n<li><code>fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>nginx.conf</code>：nginx主配置文件；</li>\n</ul>\n</li>\n<li><code>html</code>：默认的静态文件根目录；</li>\n<li><code>sbin</code>：二进制命令文件目录；</li>\n</ul>\n"},{"title":"部署docker-ce","date":"2021-04-05T07:46:52.000Z","description":"使用yum方式部署docker-ce","cover":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4156517757,536988701&fm=26&gp=0.jpg","_content":"\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用yum方式部署docker-ce环境，版本为18.06\n\ndocker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。\n\n更新于 2021-04-05\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n# 卸载旧版docker\n\n```bash\nyum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n```\n\n<br>\n\n\n\n# 安装依赖\n\n```bash\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n<br>\n\n\n\n\n\n# 添加docker源\n\n```bash\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n<br>\n\n\n\n# 【可选】挂载数据目录\n\n一般docker会把数据存储在`/var/lib/docker`下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。\n\n<br>\n\n\n\n\n\n# 安装Docker CE\n\n## 查看可用版本\n\n```bash\nyum list docker-ce --showduplicates|sort -r\n```\n\n‌\n\n## 安装最新版本\n\n```bash\nyum install -y docker-ce\n```\n\n‌\n\n## 安装指定版本\n\n```bash\nyum install -y docker-ce-18.06.1.ce-1.el7.centos\n```\n\n\n\n<br>\n\n\n\n#  启动docker\n\n```bash\nsystemctl start docker\nsystemctl enable docker\n```\n\n<br>\n\n\n\n# 验证安装\n\n```bash\n# 查看docker server和client的版本\ndocker version\n```\n\n<img src=\"./docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 卸载docker\n\n首先卸载docker软件包：\n\n```bash\nyum remove docker-ce\n```\n\n\n\n然后需要手动删除docker镜像、容器等相关文件：\n\n```bash\nrm -rf /var/lib/docker\n```\n\n","source":"_posts/部署docker-ce.md","raw":"---\ntitle: 部署docker-ce\ndate: 2021-04-05 15:46:52\ntags:\n- Docker\ncategories:\n- Docker\n- 部署\ndescription: 使用yum方式部署docker-ce\ncover: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4156517757,536988701&fm=26&gp=0.jpg\n---\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用yum方式部署docker-ce环境，版本为18.06\n\ndocker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。\n\n更新于 2021-04-05\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n# 卸载旧版docker\n\n```bash\nyum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n```\n\n<br>\n\n\n\n# 安装依赖\n\n```bash\nyum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n<br>\n\n\n\n\n\n# 添加docker源\n\n```bash\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n<br>\n\n\n\n# 【可选】挂载数据目录\n\n一般docker会把数据存储在`/var/lib/docker`下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。\n\n<br>\n\n\n\n\n\n# 安装Docker CE\n\n## 查看可用版本\n\n```bash\nyum list docker-ce --showduplicates|sort -r\n```\n\n‌\n\n## 安装最新版本\n\n```bash\nyum install -y docker-ce\n```\n\n‌\n\n## 安装指定版本\n\n```bash\nyum install -y docker-ce-18.06.1.ce-1.el7.centos\n```\n\n\n\n<br>\n\n\n\n#  启动docker\n\n```bash\nsystemctl start docker\nsystemctl enable docker\n```\n\n<br>\n\n\n\n# 验证安装\n\n```bash\n# 查看docker server和client的版本\ndocker version\n```\n\n<img src=\"./docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 卸载docker\n\n首先卸载docker软件包：\n\n```bash\nyum remove docker-ce\n```\n\n\n\n然后需要手动删除docker镜像、容器等相关文件：\n\n```bash\nrm -rf /var/lib/docker\n```\n\n","slug":"部署docker-ce","published":1,"updated":"2021-04-05T07:52:53.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de63001pp0kl1om0f1c9","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用yum方式部署docker-ce环境，版本为18.06</p><p>docker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。</p><p>更新于 2021-04-05</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h1 id=\"卸载旧版docker\"><a href=\"#卸载旧版docker\" class=\"headerlink\" title=\"卸载旧版docker\"></a>卸载旧版docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"添加docker源\"><a href=\"#添加docker源\" class=\"headerlink\" title=\"添加docker源\"></a>添加docker源</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"【可选】挂载数据目录\"><a href=\"#【可选】挂载数据目录\" class=\"headerlink\" title=\"【可选】挂载数据目录\"></a>【可选】挂载数据目录</h1><p>一般docker会把数据存储在<code>/var/lib/docker</code>下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。</p>\n<br>\n\n\n\n\n\n<h1 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h1><h2 id=\"查看可用版本\"><a href=\"#查看可用版本\" class=\"headerlink\" title=\"查看可用版本\"></a>查看可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates|sort -r</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装最新版本\"><a href=\"#安装最新版本\" class=\"headerlink\" title=\"安装最新版本\"></a>安装最新版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce-18.06.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker server和client的版本</span></span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"卸载docker\"><a href=\"#卸载docker\" class=\"headerlink\" title=\"卸载docker\"></a>卸载docker</h1><p>首先卸载docker软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker-ce</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后需要手动删除docker镜像、容器等相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用yum方式部署docker-ce环境，版本为18.06</p><p>docker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。</p><p>更新于 2021-04-05</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h1 id=\"卸载旧版docker\"><a href=\"#卸载旧版docker\" class=\"headerlink\" title=\"卸载旧版docker\"></a>卸载旧版docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"添加docker源\"><a href=\"#添加docker源\" class=\"headerlink\" title=\"添加docker源\"></a>添加docker源</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"【可选】挂载数据目录\"><a href=\"#【可选】挂载数据目录\" class=\"headerlink\" title=\"【可选】挂载数据目录\"></a>【可选】挂载数据目录</h1><p>一般docker会把数据存储在<code>/var/lib/docker</code>下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。</p>\n<br>\n\n\n\n\n\n<h1 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h1><h2 id=\"查看可用版本\"><a href=\"#查看可用版本\" class=\"headerlink\" title=\"查看可用版本\"></a>查看可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates|sort -r</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装最新版本\"><a href=\"#安装最新版本\" class=\"headerlink\" title=\"安装最新版本\"></a>安装最新版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y docker-ce-18.06.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker server和client的版本</span></span><br><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n\n<img src=\"./docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"卸载docker\"><a href=\"#卸载docker\" class=\"headerlink\" title=\"卸载docker\"></a>卸载docker</h1><p>首先卸载docker软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove docker-ce</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后需要手动删除docker镜像、容器等相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>\n\n"},{"title":"部署harbor镜像仓库","date":"2021-04-05T07:54:11.000Z","description":"使用docker-compose编排部署一个docker镜像仓库","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2179907255,3839696735&fm=11&gp=0.jpg","_content":"\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用docker-compose编排部署一个harbor镜像仓库\n\n更新于 2021-04-05\n\n{% endnote %}\n\n<br>\n\n\n\n# 环境规划\n\n{% tabs comments %}\n\n<!-- tab 软件环境 -->\n\n|      软件      |      版本       |\n| :------------: | :-------------: |\n|     docker     | docker-ce-18.06 |\n|     harbor     |  1.5.2-offline  |\n| docker-compose |      1.9.0      |\n\n<!-- endtab -->\n\n<!-- tab 硬件规划 -->\n\n两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n\n\n# 初始化设置\n\n{% tabs comments %}\n\n<!-- tab 挂载数据目录 -->\n\n镜像仓库会存储很多镜像占据大量空间，所以建议单独设置一个磁盘或者使用分布式存储\n\n```bash\nmkdir /data\nmkfs.xfs /dev/vdb1\necho \"/dev/vdb1 /data xfs defaults 0 0\" >> /etc/fstab\nmount -a \n```\n\n<!-- endtab -->\n\n<!-- tab 安装epel源 -->\n\n```bash\nyum install -y epel-release\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# docker安装\n\n{% tabs comments %}\n\n<!-- tab 安装docker -->\n\ndocker安装可以参考：{% post_link 部署docker-ce  %}\n\n<!-- endtab -->\n\n<!-- tab 安装docker-compose -->\n\nharbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。\n\n```bash\nyum list | grep docker-compose\nyum install -y docker-compose\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# 安装harbor\n\n## 下载harbor\n\n```bash\nmkdir /use/local/harbor1.5.2\nwget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/local/harbor1.5.2\ncd /usr/local/harbor1.5.2\ntar zxf harbor-offline-installer-v1.5.2.tgz\n```\n\n\n\n## 配置harbor\n\nharbor配置文件为 `harbor.cfg` ，这里编辑这个文件，设置harbor相关参数：\n\n```bash\ncd /usr/local/harbor1.5.2/harbor\n\n# 编辑 harbor.cfg文件，根据需要修改下面项目\n\n// harbor管理UI地址\nhostname = harbor.example.com\n\n// UI界面协议\nui_url_protocol = https\n\n// 最大复制工作数，默认为3，根据自身网络及机器配置调整\nmax_job_workers = 3\n\n// 如果使用https协议，则修改这里为自己的证书\nssl_cert = /data/cert/server.crt\nssl_cert_key = /data/cert/server.key\n\n// 用于在复制策略中加密或解密远程注册表的密码的密钥路径\nsecretkey_path = /data\n\n// 设置邮件服务器和邮箱账户，发送邮件使用\nemail_server = mail.example.com\nemail_server_port = 25\nemail_username = harbor@example.com\nemail_password = harbor123\nemail_from = harbor@example.com\n\n// harbor管理员密码\nharbor_admin_password = Harbor12345\n```\n\n\n\n## 编辑docker-compose.yml文件\n\n这里需要修改该文件中 `volumes` 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。\n\n\n\n## 安装harbor\n\nharbor已经提供了安装脚本 `install.sh` ，改脚本安装分为4个步骤：\n\n- 加载harbor镜像；\n- 准备环境；\n- 检查harbor实例；\n- 启动harbor；\n\n\n\n如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。\n\n\n\n```bash\nsh install.sh\n```\n\n\n\n## 检查启动情况\n\n```bash\n$ netstat -ntlp | grep docker-proxy\ntcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   \ntcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   \ntcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   \ntcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  \n\n$ docker ps \nCONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES\n1fd5462b0933        vmware/harbor-jobservice:v1.5.2        \"/harbor/start.sh\"       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice\n8627ade5943b        vmware/nginx-photon:v1.5.2             \"nginx -g 'daemon of…\"   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80->80/tcp, 10.15.0.164:443->443/tcp, 10.15.0.164:4443->4443/tcp   nginx\n5a3e9fef92a9        vmware/harbor-ui:v1.5.2                \"/harbor/start.sh\"       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui\n49481d00dae8        vmware/harbor-adminserver:v1.5.2       \"/harbor/start.sh\"       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver\n751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   \"/entrypoint.sh serv…\"   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry\n9e058c908747        vmware/harbor-db:v1.5.2                \"/usr/local/bin/dock…\"   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db\n3125d3428e36        vmware/redis-photon:v1.5.2             \"docker-entrypoint.s…\"   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis\ne4362a273d57        vmware/harbor-log:v1.5.2               \"/bin/sh -c /usr/loc…\"   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514->10514/tcp                                                      harbor-log\n\n```\n\n\n\n<br>\n\n\n\n# 使用harbor\n\n## 访问harbor\n\n安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：\n\n<img src=\"./harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n默认用户名是`admin`，密码是在 `harbor.cfg` 中设置的 `admin_password` 字段的值。\n\n\n\n## 新建项目\n\n默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。\n\n<img src=\"./create.png\" style=\"zoom:75%;\" />\n\n>  这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。\n\n\n\n## 创建用户\n\n默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 --> 创建用户：\n\n<img src=\"./create-user.png\" style=\"zoom:75%;\" />\n\n\n\n## 上传、拉取镜像\n\n这里在本机下载一个nginx作为测试：\n\n```bash\ndocker pull nginx\n```\n\n\n\n首先需要登录镜像仓库：\n\n```bash\ndocker login 10.10.99.226\n```\n\n**根据提示输入用户名密码**\n\n\n\n上传前需要给待上传的镜像打标签：\n\n```bash\ndocker tag nginx 10.10.99.226/test/nginx:v1\n```\n\n> 标签格式为 `[harbor地址]/仓库名/镜像名:[版本]`\n\n\n\n打完标签就可以上传镜像了：\n\n```bash\ndocker push 10.10.99.226/test/nginx:v1\n```\n\n\n\n<img src=\"./upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：\n\n```bash\ndocker pull 10.10.99.226/test/nginx:v1\n```\n\n> 如果是私有仓库，则需要先登录\n\n","source":"_posts/部署harbor镜像仓库.md","raw":"---\ntitle: 部署harbor镜像仓库\ndate: 2021-04-05 15:54:11\ntags:\n- Harbor\ncategories:\n- Docker\n- 镜像仓库\ndescription: 使用docker-compose编排部署一个docker镜像仓库\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2179907255,3839696735&fm=11&gp=0.jpg\n---\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用docker-compose编排部署一个harbor镜像仓库\n\n更新于 2021-04-05\n\n{% endnote %}\n\n<br>\n\n\n\n# 环境规划\n\n{% tabs comments %}\n\n<!-- tab 软件环境 -->\n\n|      软件      |      版本       |\n| :------------: | :-------------: |\n|     docker     | docker-ce-18.06 |\n|     harbor     |  1.5.2-offline  |\n| docker-compose |      1.9.0      |\n\n<!-- endtab -->\n\n<!-- tab 硬件规划 -->\n\n两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n\n\n# 初始化设置\n\n{% tabs comments %}\n\n<!-- tab 挂载数据目录 -->\n\n镜像仓库会存储很多镜像占据大量空间，所以建议单独设置一个磁盘或者使用分布式存储\n\n```bash\nmkdir /data\nmkfs.xfs /dev/vdb1\necho \"/dev/vdb1 /data xfs defaults 0 0\" >> /etc/fstab\nmount -a \n```\n\n<!-- endtab -->\n\n<!-- tab 安装epel源 -->\n\n```bash\nyum install -y epel-release\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# docker安装\n\n{% tabs comments %}\n\n<!-- tab 安装docker -->\n\ndocker安装可以参考：{% post_link 部署docker-ce  %}\n\n<!-- endtab -->\n\n<!-- tab 安装docker-compose -->\n\nharbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。\n\n```bash\nyum list | grep docker-compose\nyum install -y docker-compose\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# 安装harbor\n\n## 下载harbor\n\n```bash\nmkdir /use/local/harbor1.5.2\nwget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/local/harbor1.5.2\ncd /usr/local/harbor1.5.2\ntar zxf harbor-offline-installer-v1.5.2.tgz\n```\n\n\n\n## 配置harbor\n\nharbor配置文件为 `harbor.cfg` ，这里编辑这个文件，设置harbor相关参数：\n\n```bash\ncd /usr/local/harbor1.5.2/harbor\n\n# 编辑 harbor.cfg文件，根据需要修改下面项目\n\n// harbor管理UI地址\nhostname = harbor.example.com\n\n// UI界面协议\nui_url_protocol = https\n\n// 最大复制工作数，默认为3，根据自身网络及机器配置调整\nmax_job_workers = 3\n\n// 如果使用https协议，则修改这里为自己的证书\nssl_cert = /data/cert/server.crt\nssl_cert_key = /data/cert/server.key\n\n// 用于在复制策略中加密或解密远程注册表的密码的密钥路径\nsecretkey_path = /data\n\n// 设置邮件服务器和邮箱账户，发送邮件使用\nemail_server = mail.example.com\nemail_server_port = 25\nemail_username = harbor@example.com\nemail_password = harbor123\nemail_from = harbor@example.com\n\n// harbor管理员密码\nharbor_admin_password = Harbor12345\n```\n\n\n\n## 编辑docker-compose.yml文件\n\n这里需要修改该文件中 `volumes` 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。\n\n\n\n## 安装harbor\n\nharbor已经提供了安装脚本 `install.sh` ，改脚本安装分为4个步骤：\n\n- 加载harbor镜像；\n- 准备环境；\n- 检查harbor实例；\n- 启动harbor；\n\n\n\n如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。\n\n\n\n```bash\nsh install.sh\n```\n\n\n\n## 检查启动情况\n\n```bash\n$ netstat -ntlp | grep docker-proxy\ntcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   \ntcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   \ntcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   \ntcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  \n\n$ docker ps \nCONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES\n1fd5462b0933        vmware/harbor-jobservice:v1.5.2        \"/harbor/start.sh\"       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice\n8627ade5943b        vmware/nginx-photon:v1.5.2             \"nginx -g 'daemon of…\"   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80->80/tcp, 10.15.0.164:443->443/tcp, 10.15.0.164:4443->4443/tcp   nginx\n5a3e9fef92a9        vmware/harbor-ui:v1.5.2                \"/harbor/start.sh\"       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui\n49481d00dae8        vmware/harbor-adminserver:v1.5.2       \"/harbor/start.sh\"       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver\n751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   \"/entrypoint.sh serv…\"   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry\n9e058c908747        vmware/harbor-db:v1.5.2                \"/usr/local/bin/dock…\"   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db\n3125d3428e36        vmware/redis-photon:v1.5.2             \"docker-entrypoint.s…\"   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis\ne4362a273d57        vmware/harbor-log:v1.5.2               \"/bin/sh -c /usr/loc…\"   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514->10514/tcp                                                      harbor-log\n\n```\n\n\n\n<br>\n\n\n\n# 使用harbor\n\n## 访问harbor\n\n安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：\n\n<img src=\"./harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n默认用户名是`admin`，密码是在 `harbor.cfg` 中设置的 `admin_password` 字段的值。\n\n\n\n## 新建项目\n\n默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。\n\n<img src=\"./create.png\" style=\"zoom:75%;\" />\n\n>  这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。\n\n\n\n## 创建用户\n\n默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 --> 创建用户：\n\n<img src=\"./create-user.png\" style=\"zoom:75%;\" />\n\n\n\n## 上传、拉取镜像\n\n这里在本机下载一个nginx作为测试：\n\n```bash\ndocker pull nginx\n```\n\n\n\n首先需要登录镜像仓库：\n\n```bash\ndocker login 10.10.99.226\n```\n\n**根据提示输入用户名密码**\n\n\n\n上传前需要给待上传的镜像打标签：\n\n```bash\ndocker tag nginx 10.10.99.226/test/nginx:v1\n```\n\n> 标签格式为 `[harbor地址]/仓库名/镜像名:[版本]`\n\n\n\n打完标签就可以上传镜像了：\n\n```bash\ndocker push 10.10.99.226/test/nginx:v1\n```\n\n\n\n<img src=\"./upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：\n\n```bash\ndocker pull 10.10.99.226/test/nginx:v1\n```\n\n> 如果是私有仓库，则需要先登录\n\n","slug":"部署harbor镜像仓库","published":1,"updated":"2021-04-05T08:08:21.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de63001rp0kl2d1g3gfl","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用docker-compose编排部署一个harbor镜像仓库</p><p>更新于 2021-04-05</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"环境规划\"><a href=\"#环境规划\" class=\"headerlink\" title=\"环境规划\"></a>环境规划</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">软件环境</button></li><li class=\"tab\"><button data-href=\"#comments-2\">硬件规划</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><table>\n<thead>\n<tr>\n<th align=\"center\">软件</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker</td>\n<td align=\"center\">docker-ce-18.06</td>\n</tr>\n<tr>\n<td align=\"center\">harbor</td>\n<td align=\"center\">1.5.2-offline</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose</td>\n<td align=\"center\">1.9.0</td>\n</tr>\n</tbody></table><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n\n\n<h1 id=\"初始化设置\"><a href=\"#初始化设置\" class=\"headerlink\" title=\"初始化设置\"></a>初始化设置</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">挂载数据目录</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装epel源</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>镜像仓库会存储很多镜像占据大量空间，所以建议单独设置一个磁盘或者使用分布式存储</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br><span class=\"line\">mkfs.xfs /dev/vdb1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/dev/vdb1 /data xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装docker</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装docker-compose</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>docker安装可以参考：<a href=\"/2021/04/05/%E9%83%A8%E7%BD%B2docker-ce/\" title=\"部署docker-ce\">部署docker-ce</a></p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>harbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep docker-compose</span><br><span class=\"line\">yum install -y docker-compose</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"安装harbor\"><a href=\"#安装harbor\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h1><h2 id=\"下载harbor\"><a href=\"#下载harbor\" class=\"headerlink\" title=\"下载harbor\"></a>下载harbor</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /use/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">wget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">tar zxf harbor-offline-installer-v1.5.2.tgz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置harbor\"><a href=\"#配置harbor\" class=\"headerlink\" title=\"配置harbor\"></a>配置harbor</h2><p>harbor配置文件为 <code>harbor.cfg</code> ，这里编辑这个文件，设置harbor相关参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2/harbor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 harbor.cfg文件，根据需要修改下面项目</span></span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理UI地址</span><br><span class=\"line\">hostname = harbor.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// UI界面协议</span><br><span class=\"line\">ui_url_protocol = https</span><br><span class=\"line\"></span><br><span class=\"line\">// 最大复制工作数，默认为3，根据自身网络及机器配置调整</span><br><span class=\"line\">max_job_workers = 3</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果使用https协议，则修改这里为自己的证书</span><br><span class=\"line\">ssl_cert = /data/cert/server.crt</span><br><span class=\"line\">ssl_cert_key = /data/cert/server.key</span><br><span class=\"line\"></span><br><span class=\"line\">// 用于在复制策略中加密或解密远程注册表的密码的密钥路径</span><br><span class=\"line\">secretkey_path = /data</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置邮件服务器和邮箱账户，发送邮件使用</span><br><span class=\"line\">email_server = mail.example.com</span><br><span class=\"line\">email_server_port = 25</span><br><span class=\"line\">email_username = harbor@example.com</span><br><span class=\"line\">email_password = harbor123</span><br><span class=\"line\">email_from = harbor@example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理员密码</span><br><span class=\"line\">harbor_admin_password = Harbor12345</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编辑docker-compose-yml文件\"><a href=\"#编辑docker-compose-yml文件\" class=\"headerlink\" title=\"编辑docker-compose.yml文件\"></a>编辑docker-compose.yml文件</h2><p>这里需要修改该文件中 <code>volumes</code> 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。</p>\n<h2 id=\"安装harbor-1\"><a href=\"#安装harbor-1\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h2><p>harbor已经提供了安装脚本 <code>install.sh</code> ，改脚本安装分为4个步骤：</p>\n<ul>\n<li>加载harbor镜像；</li>\n<li>准备环境；</li>\n<li>检查harbor实例；</li>\n<li>启动harbor；</li>\n</ul>\n<p>如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh install.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查启动情况\"><a href=\"#检查启动情况\" class=\"headerlink\" title=\"检查启动情况\"></a>检查启动情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep docker-proxy</span><br><span class=\"line\">tcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  </span><br><span class=\"line\"></span><br><span class=\"line\">$ docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES</span><br><span class=\"line\">1fd5462b0933        vmware/harbor-jobservice:v1.5.2        <span class=\"string\">&quot;/harbor/start.sh&quot;</span>       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice</span><br><span class=\"line\">8627ade5943b        vmware/nginx-photon:v1.5.2             <span class=\"string\">&quot;nginx -g &#x27;daemon of…&quot;</span>   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80-&gt;80/tcp, 10.15.0.164:443-&gt;443/tcp, 10.15.0.164:4443-&gt;4443/tcp   nginx</span><br><span class=\"line\">5a3e9fef92a9        vmware/harbor-ui:v1.5.2                <span class=\"string\">&quot;/harbor/start.sh&quot;</span>       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui</span><br><span class=\"line\">49481d00dae8        vmware/harbor-adminserver:v1.5.2       <span class=\"string\">&quot;/harbor/start.sh&quot;</span>       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver</span><br><span class=\"line\">751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   <span class=\"string\">&quot;/entrypoint.sh serv…&quot;</span>   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry</span><br><span class=\"line\">9e058c908747        vmware/harbor-db:v1.5.2                <span class=\"string\">&quot;/usr/local/bin/dock…&quot;</span>   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db</span><br><span class=\"line\">3125d3428e36        vmware/redis-photon:v1.5.2             <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis</span><br><span class=\"line\">e4362a273d57        vmware/harbor-log:v1.5.2               <span class=\"string\">&quot;/bin/sh -c /usr/loc…&quot;</span>   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514-&gt;10514/tcp                                                      harbor-log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"使用harbor\"><a href=\"#使用harbor\" class=\"headerlink\" title=\"使用harbor\"></a>使用harbor</h1><h2 id=\"访问harbor\"><a href=\"#访问harbor\" class=\"headerlink\" title=\"访问harbor\"></a>访问harbor</h2><p>安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：</p>\n<img src= \"/img/loading.gif\" data-src=\"./harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n<p>默认用户名是<code>admin</code>，密码是在 <code>harbor.cfg</code> 中设置的 <code>admin_password</code> 字段的值。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。</p>\n<img src= \"/img/loading.gif\" data-src=\"./create.png\" style=\"zoom:75%;\" />\n\n<blockquote>\n<p> 这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。</p>\n</blockquote>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p>默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 –&gt; 创建用户：</p>\n<img src= \"/img/loading.gif\" data-src=\"./create-user.png\" style=\"zoom:75%;\" />\n\n\n\n<h2 id=\"上传、拉取镜像\"><a href=\"#上传、拉取镜像\" class=\"headerlink\" title=\"上传、拉取镜像\"></a>上传、拉取镜像</h2><p>这里在本机下载一个nginx作为测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先需要登录镜像仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login 10.10.99.226</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据提示输入用户名密码</strong></p>\n<p>上传前需要给待上传的镜像打标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag nginx 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>标签格式为 <code>[harbor地址]/仓库名/镜像名:[版本]</code></p>\n</blockquote>\n<p>打完标签就可以上传镜像了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"./upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n<p>下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是私有仓库，则需要先登录</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用docker-compose编排部署一个harbor镜像仓库</p><p>更新于 2021-04-05</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"环境规划\"><a href=\"#环境规划\" class=\"headerlink\" title=\"环境规划\"></a>环境规划</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">软件环境</button></li><li class=\"tab\"><button data-href=\"#comments-2\">硬件规划</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><table>\n<thead>\n<tr>\n<th align=\"center\">软件</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker</td>\n<td align=\"center\">docker-ce-18.06</td>\n</tr>\n<tr>\n<td align=\"center\">harbor</td>\n<td align=\"center\">1.5.2-offline</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose</td>\n<td align=\"center\">1.9.0</td>\n</tr>\n</tbody></table><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n\n\n<h1 id=\"初始化设置\"><a href=\"#初始化设置\" class=\"headerlink\" title=\"初始化设置\"></a>初始化设置</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">挂载数据目录</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装epel源</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>镜像仓库会存储很多镜像占据大量空间，所以建议单独设置一个磁盘或者使用分布式存储</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br><span class=\"line\">mkfs.xfs /dev/vdb1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/dev/vdb1 /data xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y epel-release</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"docker安装\"><a href=\"#docker安装\" class=\"headerlink\" title=\"docker安装\"></a>docker安装</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装docker</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装docker-compose</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>docker安装可以参考：<a href=\"/2021/04/05/%E9%83%A8%E7%BD%B2docker-ce/\" title=\"部署docker-ce\">部署docker-ce</a></p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>harbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep docker-compose</span><br><span class=\"line\">yum install -y docker-compose</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"安装harbor\"><a href=\"#安装harbor\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h1><h2 id=\"下载harbor\"><a href=\"#下载harbor\" class=\"headerlink\" title=\"下载harbor\"></a>下载harbor</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /use/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">wget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">tar zxf harbor-offline-installer-v1.5.2.tgz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置harbor\"><a href=\"#配置harbor\" class=\"headerlink\" title=\"配置harbor\"></a>配置harbor</h2><p>harbor配置文件为 <code>harbor.cfg</code> ，这里编辑这个文件，设置harbor相关参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2/harbor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 harbor.cfg文件，根据需要修改下面项目</span></span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理UI地址</span><br><span class=\"line\">hostname = harbor.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// UI界面协议</span><br><span class=\"line\">ui_url_protocol = https</span><br><span class=\"line\"></span><br><span class=\"line\">// 最大复制工作数，默认为3，根据自身网络及机器配置调整</span><br><span class=\"line\">max_job_workers = 3</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果使用https协议，则修改这里为自己的证书</span><br><span class=\"line\">ssl_cert = /data/cert/server.crt</span><br><span class=\"line\">ssl_cert_key = /data/cert/server.key</span><br><span class=\"line\"></span><br><span class=\"line\">// 用于在复制策略中加密或解密远程注册表的密码的密钥路径</span><br><span class=\"line\">secretkey_path = /data</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置邮件服务器和邮箱账户，发送邮件使用</span><br><span class=\"line\">email_server = mail.example.com</span><br><span class=\"line\">email_server_port = 25</span><br><span class=\"line\">email_username = harbor@example.com</span><br><span class=\"line\">email_password = harbor123</span><br><span class=\"line\">email_from = harbor@example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理员密码</span><br><span class=\"line\">harbor_admin_password = Harbor12345</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编辑docker-compose-yml文件\"><a href=\"#编辑docker-compose-yml文件\" class=\"headerlink\" title=\"编辑docker-compose.yml文件\"></a>编辑docker-compose.yml文件</h2><p>这里需要修改该文件中 <code>volumes</code> 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。</p>\n<h2 id=\"安装harbor-1\"><a href=\"#安装harbor-1\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h2><p>harbor已经提供了安装脚本 <code>install.sh</code> ，改脚本安装分为4个步骤：</p>\n<ul>\n<li>加载harbor镜像；</li>\n<li>准备环境；</li>\n<li>检查harbor实例；</li>\n<li>启动harbor；</li>\n</ul>\n<p>如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh install.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查启动情况\"><a href=\"#检查启动情况\" class=\"headerlink\" title=\"检查启动情况\"></a>检查启动情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep docker-proxy</span><br><span class=\"line\">tcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  </span><br><span class=\"line\"></span><br><span class=\"line\">$ docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES</span><br><span class=\"line\">1fd5462b0933        vmware/harbor-jobservice:v1.5.2        <span class=\"string\">&quot;/harbor/start.sh&quot;</span>       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice</span><br><span class=\"line\">8627ade5943b        vmware/nginx-photon:v1.5.2             <span class=\"string\">&quot;nginx -g &#x27;daemon of…&quot;</span>   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80-&gt;80/tcp, 10.15.0.164:443-&gt;443/tcp, 10.15.0.164:4443-&gt;4443/tcp   nginx</span><br><span class=\"line\">5a3e9fef92a9        vmware/harbor-ui:v1.5.2                <span class=\"string\">&quot;/harbor/start.sh&quot;</span>       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui</span><br><span class=\"line\">49481d00dae8        vmware/harbor-adminserver:v1.5.2       <span class=\"string\">&quot;/harbor/start.sh&quot;</span>       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver</span><br><span class=\"line\">751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   <span class=\"string\">&quot;/entrypoint.sh serv…&quot;</span>   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry</span><br><span class=\"line\">9e058c908747        vmware/harbor-db:v1.5.2                <span class=\"string\">&quot;/usr/local/bin/dock…&quot;</span>   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db</span><br><span class=\"line\">3125d3428e36        vmware/redis-photon:v1.5.2             <span class=\"string\">&quot;docker-entrypoint.s…&quot;</span>   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis</span><br><span class=\"line\">e4362a273d57        vmware/harbor-log:v1.5.2               <span class=\"string\">&quot;/bin/sh -c /usr/loc…&quot;</span>   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514-&gt;10514/tcp                                                      harbor-log</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"使用harbor\"><a href=\"#使用harbor\" class=\"headerlink\" title=\"使用harbor\"></a>使用harbor</h1><h2 id=\"访问harbor\"><a href=\"#访问harbor\" class=\"headerlink\" title=\"访问harbor\"></a>访问harbor</h2><p>安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：</p>\n<img src=\"./harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n<p>默认用户名是<code>admin</code>，密码是在 <code>harbor.cfg</code> 中设置的 <code>admin_password</code> 字段的值。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。</p>\n<img src=\"./create.png\" style=\"zoom:75%;\" />\n\n<blockquote>\n<p> 这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。</p>\n</blockquote>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p>默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 –&gt; 创建用户：</p>\n<img src=\"./create-user.png\" style=\"zoom:75%;\" />\n\n\n\n<h2 id=\"上传、拉取镜像\"><a href=\"#上传、拉取镜像\" class=\"headerlink\" title=\"上传、拉取镜像\"></a>上传、拉取镜像</h2><p>这里在本机下载一个nginx作为测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先需要登录镜像仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login 10.10.99.226</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据提示输入用户名密码</strong></p>\n<p>上传前需要给待上传的镜像打标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag nginx 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>标签格式为 <code>[harbor地址]/仓库名/镜像名:[版本]</code></p>\n</blockquote>\n<p>打完标签就可以上传镜像了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"./upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n<p>下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是私有仓库，则需要先登录</p>\n</blockquote>\n"},{"title":"部署nfs存储","date":"2021-03-23T13:38:44.000Z","description":"在Linux服务器上部署NFS存储","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=773960014,3839457367&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了什么是NFS存储并且在linux服务器上部署nfs服务\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# NFS介绍\n\nNFS是`Network File System`的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。\n\n\n\nNFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。\n\n\n\n>  可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。\n\n\n\n<br>\n\n\n\n# 部署NFS\n\nNFS依赖于`nfs-utils`和`rpcbind`，所以先安装这两个软件包：\n\n```bash\nyum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs数据目录：\n\n```bash\nmkdir /nfs-data\n```\n\n> 一般这个目录会挂载一个数据盘\n\n\n\nNFS共享存储需要将存储的地址配置在`/etc/exporters`下，例如这里配置为：\n\n```bash\n/nfs-data *(rw,no_root_squash)\n```\n\n> 星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制\n\n\n\n其中支持的参数为：\n\n- `ro`：只读；\n- `rw`：读写；\n- `root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；\n- `no_root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；\n- `all_squash`：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；\n- `sync`：同时将数据写入到内存与硬盘中，保证不丢失数据；\n- `async`：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；\n\n\n\n启动服务：\n\n```bash\nsystemctl start rpcbind\nsystemctl enable rpcbind\nsystemctl start nfs-server\nsystemctl enable nfs-server\n```\n\n\n\n其他客户端想要使用nfs存储，则首先需要安装`nfs-utils`，然后可以使用下面的命令将nfs的目录挂载到本地：\n\n```bash\nyum install -y nfs-utils\nmount -t nfs <nfs服务器地址>:/nfs-data /nfsdata\n```\n\n","source":"_posts/部署nfs存储.md","raw":"---\ntitle: 部署nfs存储\ndate: 2021-03-23 21:38:44\ntags:\n- NFS\ncategories:\n- 存储\n- NFS\n- 部署\ndescription: 在Linux服务器上部署NFS存储\ncover: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=773960014,3839457367&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了什么是NFS存储并且在linux服务器上部署nfs服务\n\n更新于 2021-03-21\n\n{% endnote %}\n\n<br>\n\n\n\n# NFS介绍\n\nNFS是`Network File System`的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。\n\n\n\nNFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。\n\n\n\n>  可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。\n\n\n\n<br>\n\n\n\n# 部署NFS\n\nNFS依赖于`nfs-utils`和`rpcbind`，所以先安装这两个软件包：\n\n```bash\nyum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs数据目录：\n\n```bash\nmkdir /nfs-data\n```\n\n> 一般这个目录会挂载一个数据盘\n\n\n\nNFS共享存储需要将存储的地址配置在`/etc/exporters`下，例如这里配置为：\n\n```bash\n/nfs-data *(rw,no_root_squash)\n```\n\n> 星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制\n\n\n\n其中支持的参数为：\n\n- `ro`：只读；\n- `rw`：读写；\n- `root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；\n- `no_root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；\n- `all_squash`：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；\n- `sync`：同时将数据写入到内存与硬盘中，保证不丢失数据；\n- `async`：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；\n\n\n\n启动服务：\n\n```bash\nsystemctl start rpcbind\nsystemctl enable rpcbind\nsystemctl start nfs-server\nsystemctl enable nfs-server\n```\n\n\n\n其他客户端想要使用nfs存储，则首先需要安装`nfs-utils`，然后可以使用下面的命令将nfs的目录挂载到本地：\n\n```bash\nyum install -y nfs-utils\nmount -t nfs <nfs服务器地址>:/nfs-data /nfsdata\n```\n\n","slug":"部署nfs存储","published":1,"updated":"2021-03-23T13:43:52.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de64001up0klb5qagbu0","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了什么是NFS存储并且在linux服务器上部署nfs服务</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"NFS介绍\"><a href=\"#NFS介绍\" class=\"headerlink\" title=\"NFS介绍\"></a>NFS介绍</h1><p>NFS是<code>Network File System</code>的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。</p>\n<p>NFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。</p>\n<blockquote>\n<p> 可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署NFS\"><a href=\"#部署NFS\" class=\"headerlink\" title=\"部署NFS\"></a>部署NFS</h1><p>NFS依赖于<code>nfs-utils</code>和<code>rpcbind</code>，所以先安装这两个软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /nfs-data</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一般这个目录会挂载一个数据盘</p>\n</blockquote>\n<p>NFS共享存储需要将存储的地址配置在<code>/etc/exporters</code>下，例如这里配置为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/nfs-data *(rw,no_root_squash)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制</p>\n</blockquote>\n<p>其中支持的参数为：</p>\n<ul>\n<li><code>ro</code>：只读；</li>\n<li><code>rw</code>：读写；</li>\n<li><code>root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；</li>\n<li><code>no_root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；</li>\n<li><code>all_squash</code>：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；</li>\n<li><code>sync</code>：同时将数据写入到内存与硬盘中，保证不丢失数据；</li>\n<li><code>async</code>：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；</li>\n</ul>\n<p>启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">systemctl start nfs-server</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs-server</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他客户端想要使用nfs存储，则首先需要安装<code>nfs-utils</code>，然后可以使用下面的命令将nfs的目录挂载到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils</span><br><span class=\"line\">mount -t nfs &lt;nfs服务器地址&gt;:/nfs-data /nfsdata</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了什么是NFS存储并且在linux服务器上部署nfs服务</p><p>更新于 2021-03-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"NFS介绍\"><a href=\"#NFS介绍\" class=\"headerlink\" title=\"NFS介绍\"></a>NFS介绍</h1><p>NFS是<code>Network File System</code>的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。</p>\n<p>NFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。</p>\n<blockquote>\n<p> 可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署NFS\"><a href=\"#部署NFS\" class=\"headerlink\" title=\"部署NFS\"></a>部署NFS</h1><p>NFS依赖于<code>nfs-utils</code>和<code>rpcbind</code>，所以先安装这两个软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /nfs-data</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一般这个目录会挂载一个数据盘</p>\n</blockquote>\n<p>NFS共享存储需要将存储的地址配置在<code>/etc/exporters</code>下，例如这里配置为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/nfs-data *(rw,no_root_squash)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制</p>\n</blockquote>\n<p>其中支持的参数为：</p>\n<ul>\n<li><code>ro</code>：只读；</li>\n<li><code>rw</code>：读写；</li>\n<li><code>root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；</li>\n<li><code>no_root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；</li>\n<li><code>all_squash</code>：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；</li>\n<li><code>sync</code>：同时将数据写入到内存与硬盘中，保证不丢失数据；</li>\n<li><code>async</code>：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；</li>\n</ul>\n<p>启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rpcbind</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">systemctl start nfs-server</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs-server</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他客户端想要使用nfs存储，则首先需要安装<code>nfs-utils</code>，然后可以使用下面的命令将nfs的目录挂载到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils</span><br><span class=\"line\">mount -t nfs &lt;nfs服务器地址&gt;:/nfs-data /nfsdata</span><br></pre></td></tr></table></figure>\n\n"},{"title":"部署zookeeper集群","date":"2021-04-17T04:20:08.000Z","description":"部署一个三节点的zookeeper集群","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了部署一个三节点的zookeeper集群\n\n更新于 2021-04-017\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n## 下载\n\n下载地址：http://archive.apache.org/dist/zookeeper/\n\n>  需要下载的包必须带`bin`，这个是编译好的，否则运行会报错\n\n\n\n```bash\nwget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz\n```\n\n\n\n<br>\n\n\n\n## 安装\n\n下载好的zookeeper压缩包已经经过编译，直接解压就可以用：\n\n```bash\n# 在每个节点都下载\ntar zxf apache-zookeeper-3.5.5-bin.tar.gz \ncd cd apache-zookeeper-3.5.5-bin\n```\n\n\n\n<br>\n\n\n\n## 建立配置文件\n\n默认没有配置文件，可以直接复制配置文件模板：\n\n```bash\n# 在每个节点都执行\nmv conf/zoo_sample.cfg conf/zoo.cfg\n```\n\n\n\n<br>\n\n## 创建数据目录\n\n虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：\n\n```bash\n# 在每个节点都执行\nmkdir /data/zookeeper\n```\n\n\n\n然后在每个节点都修改配置文件的如下字段，使用数据目录：\n\n```bash\n# conf/zoo.cfg\ndataDir=/data/zookeeper\n```\n\n<br>\n\n\n\n## 添加zookeeper节点\n\n在每个节点的配置文件`zoo.cfg`中，添加zookeeper集群每台节点的地址，例如我这里是三节点的集群：\n\n```bash\n# conf/zoo.cfg\n# 增加如下的内容\nserver.2=192.168.12.12:2888:3888\nserver.3=192.168.12.13:2888:3888\nserver.4=192.168.12.14:2888:3888\n```\n\n\n\n> `2888`为zookeeper节点间的通信端口号，`3888`为选举的端口号；主从关系通过`3888`自动选举产生，配置中不需要指定；\n>\n> `server`后面的数字为集群中节点的id，可以随便起但是不能相同；\n\n<br>\n\n## 添加id文件\n\n在上一步中添加了三个节点：\n\n```bash\nserver.2=192.168.12.12:2888:3888\nserver.3=192.168.12.13:2888:3888\nserver.4=192.168.12.14:2888:3888\n```\n\n\n\n现在到`192.168.12.12`这个节点的zookeeper数据目录`/data/zookeeper`下，设置节点id文件：\n\n```bash\ncd /data/zookeeper\necho 2 > myid\n```\n\n\n\n> `myid`这个文件名是固定的不能变；文件的内容就是这个节点的id号，根据配置文件中指定的数字配置；\n\n\n\n其他的节点，需要执行相同的操作，注意id设置为自己的id；\n\n<br>\n\n## 设置日志位置\n\n默认日志位置是放在安装目录下的logs下，可以在`bin/zkENV.sh`中，修改下面的代码进行重新设置：\n\n```bash\n# bin/zkENV.sh\nif [ \"x${ZOO_LOG_DIR}\" = \"x\" ]\nthen\n    ZOO_LOG_DIR=\"/data/zookeeper/logs\"\nfi\n```\n\n\n\n然后创建日志目录：\n\n```bash\nmkdir /data/zookeeper/logs\n```\n\n<br>\n\n## 设置JAVA_HOME\n\n如果需要设置`JAVA_HOME`变量，则可以在`bin/zkENV.sh`的前面设置一个环境变量即可：\n\n```bash\n# bin/zkENV.sh\nexport JAVA_HOME=/java/home/dir\n```\n\n<br>\n\n## 启动\n\n在每个节点都执行启动命令：\n\n```bash\nbin/zkServer.sh start\n```\n\n<br>\n\n## 查看状态\n\n当集群一半以上的节点都启动之后，整个集群才会正常工作，此时执行下面的命令查看服务状态：\n\n```bash\nbin/zkServer.sh status \n```\n\n\n\n如果出现`Mode: follower`则表示该节点为从节点；如果出现`Mode: leader`则表示该节点为主节点\n\n\n\n","source":"_posts/部署zookeeper集群.md","raw":"---\ntitle: 部署zookeeper集群\ndate: 2021-04-17 12:20:08\ntags:\n- Zookeeper\ncategories:\n- Zookeeper\n- 部署\ndescription: 部署一个三节点的zookeeper集群\ncover: \n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了部署一个三节点的zookeeper集群\n\n更新于 2021-04-017\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n## 下载\n\n下载地址：http://archive.apache.org/dist/zookeeper/\n\n>  需要下载的包必须带`bin`，这个是编译好的，否则运行会报错\n\n\n\n```bash\nwget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz\n```\n\n\n\n<br>\n\n\n\n## 安装\n\n下载好的zookeeper压缩包已经经过编译，直接解压就可以用：\n\n```bash\n# 在每个节点都下载\ntar zxf apache-zookeeper-3.5.5-bin.tar.gz \ncd cd apache-zookeeper-3.5.5-bin\n```\n\n\n\n<br>\n\n\n\n## 建立配置文件\n\n默认没有配置文件，可以直接复制配置文件模板：\n\n```bash\n# 在每个节点都执行\nmv conf/zoo_sample.cfg conf/zoo.cfg\n```\n\n\n\n<br>\n\n## 创建数据目录\n\n虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：\n\n```bash\n# 在每个节点都执行\nmkdir /data/zookeeper\n```\n\n\n\n然后在每个节点都修改配置文件的如下字段，使用数据目录：\n\n```bash\n# conf/zoo.cfg\ndataDir=/data/zookeeper\n```\n\n<br>\n\n\n\n## 添加zookeeper节点\n\n在每个节点的配置文件`zoo.cfg`中，添加zookeeper集群每台节点的地址，例如我这里是三节点的集群：\n\n```bash\n# conf/zoo.cfg\n# 增加如下的内容\nserver.2=192.168.12.12:2888:3888\nserver.3=192.168.12.13:2888:3888\nserver.4=192.168.12.14:2888:3888\n```\n\n\n\n> `2888`为zookeeper节点间的通信端口号，`3888`为选举的端口号；主从关系通过`3888`自动选举产生，配置中不需要指定；\n>\n> `server`后面的数字为集群中节点的id，可以随便起但是不能相同；\n\n<br>\n\n## 添加id文件\n\n在上一步中添加了三个节点：\n\n```bash\nserver.2=192.168.12.12:2888:3888\nserver.3=192.168.12.13:2888:3888\nserver.4=192.168.12.14:2888:3888\n```\n\n\n\n现在到`192.168.12.12`这个节点的zookeeper数据目录`/data/zookeeper`下，设置节点id文件：\n\n```bash\ncd /data/zookeeper\necho 2 > myid\n```\n\n\n\n> `myid`这个文件名是固定的不能变；文件的内容就是这个节点的id号，根据配置文件中指定的数字配置；\n\n\n\n其他的节点，需要执行相同的操作，注意id设置为自己的id；\n\n<br>\n\n## 设置日志位置\n\n默认日志位置是放在安装目录下的logs下，可以在`bin/zkENV.sh`中，修改下面的代码进行重新设置：\n\n```bash\n# bin/zkENV.sh\nif [ \"x${ZOO_LOG_DIR}\" = \"x\" ]\nthen\n    ZOO_LOG_DIR=\"/data/zookeeper/logs\"\nfi\n```\n\n\n\n然后创建日志目录：\n\n```bash\nmkdir /data/zookeeper/logs\n```\n\n<br>\n\n## 设置JAVA_HOME\n\n如果需要设置`JAVA_HOME`变量，则可以在`bin/zkENV.sh`的前面设置一个环境变量即可：\n\n```bash\n# bin/zkENV.sh\nexport JAVA_HOME=/java/home/dir\n```\n\n<br>\n\n## 启动\n\n在每个节点都执行启动命令：\n\n```bash\nbin/zkServer.sh start\n```\n\n<br>\n\n## 查看状态\n\n当集群一半以上的节点都启动之后，整个集群才会正常工作，此时执行下面的命令查看服务状态：\n\n```bash\nbin/zkServer.sh status \n```\n\n\n\n如果出现`Mode: follower`则表示该节点为从节点；如果出现`Mode: leader`则表示该节点为主节点\n\n\n\n","slug":"部署zookeeper集群","published":1,"updated":"2021-04-17T04:25:02.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de65001wp0kl59c90vk9","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了部署一个三节点的zookeeper集群</p><p>更新于 2021-04-017</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"http://archive.apache.org/dist/zookeeper/\">http://archive.apache.org/dist/zookeeper/</a></p>\n<blockquote>\n<p> 需要下载的包必须带<code>bin</code>，这个是编译好的，否则运行会报错</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好的zookeeper压缩包已经经过编译，直接解压就可以用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在每个节点都下载</span></span><br><span class=\"line\">tar zxf apache-zookeeper-3.5.5-bin.tar.gz </span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">cd</span> apache-zookeeper-3.5.5-bin</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"建立配置文件\"><a href=\"#建立配置文件\" class=\"headerlink\" title=\"建立配置文件\"></a>建立配置文件</h2><p>默认没有配置文件，可以直接复制配置文件模板：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在每个节点都执行</span></span><br><span class=\"line\">mv conf/zoo_sample.cfg conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><p>虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在每个节点都执行</span></span><br><span class=\"line\">mkdir /data/zookeeper</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在每个节点都修改配置文件的如下字段，使用数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># conf/zoo.cfg</span></span><br><span class=\"line\">dataDir=/data/zookeeper</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"添加zookeeper节点\"><a href=\"#添加zookeeper节点\" class=\"headerlink\" title=\"添加zookeeper节点\"></a>添加zookeeper节点</h2><p>在每个节点的配置文件<code>zoo.cfg</code>中，添加zookeeper集群每台节点的地址，例如我这里是三节点的集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># conf/zoo.cfg</span></span><br><span class=\"line\"><span class=\"comment\"># 增加如下的内容</span></span><br><span class=\"line\">server.2=192.168.12.12:2888:3888</span><br><span class=\"line\">server.3=192.168.12.13:2888:3888</span><br><span class=\"line\">server.4=192.168.12.14:2888:3888</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>2888</code>为zookeeper节点间的通信端口号，<code>3888</code>为选举的端口号；主从关系通过<code>3888</code>自动选举产生，配置中不需要指定；</p>\n<p><code>server</code>后面的数字为集群中节点的id，可以随便起但是不能相同；</p>\n</blockquote>\n<br>\n\n<h2 id=\"添加id文件\"><a href=\"#添加id文件\" class=\"headerlink\" title=\"添加id文件\"></a>添加id文件</h2><p>在上一步中添加了三个节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.2=192.168.12.12:2888:3888</span><br><span class=\"line\">server.3=192.168.12.13:2888:3888</span><br><span class=\"line\">server.4=192.168.12.14:2888:3888</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在到<code>192.168.12.12</code>这个节点的zookeeper数据目录<code>/data/zookeeper</code>下，设置节点id文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /data/zookeeper</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; myid</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>myid</code>这个文件名是固定的不能变；文件的内容就是这个节点的id号，根据配置文件中指定的数字配置；</p>\n</blockquote>\n<p>其他的节点，需要执行相同的操作，注意id设置为自己的id；</p>\n<br>\n\n<h2 id=\"设置日志位置\"><a href=\"#设置日志位置\" class=\"headerlink\" title=\"设置日志位置\"></a>设置日志位置</h2><p>默认日志位置是放在安装目录下的logs下，可以在<code>bin/zkENV.sh</code>中，修改下面的代码进行重新设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bin/zkENV.sh</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;x<span class=\"variable\">$&#123;ZOO_LOG_DIR&#125;</span>&quot;</span> = <span class=\"string\">&quot;x&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    ZOO_LOG_DIR=<span class=\"string\">&quot;/data/zookeeper/logs&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建日志目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/zookeeper/logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"设置JAVA-HOME\"><a href=\"#设置JAVA-HOME\" class=\"headerlink\" title=\"设置JAVA_HOME\"></a>设置JAVA_HOME</h2><p>如果需要设置<code>JAVA_HOME</code>变量，则可以在<code>bin/zkENV.sh</code>的前面设置一个环境变量即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bin/zkENV.sh</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/java/home/dir</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>在每个节点都执行启动命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h2><p>当集群一半以上的节点都启动之后，整个集群才会正常工作，此时执行下面的命令查看服务状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh status </span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果出现<code>Mode: follower</code>则表示该节点为从节点；如果出现<code>Mode: leader</code>则表示该节点为主节点</p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了部署一个三节点的zookeeper集群</p><p>更新于 2021-04-017</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"http://archive.apache.org/dist/zookeeper/\">http://archive.apache.org/dist/zookeeper/</a></p>\n<blockquote>\n<p> 需要下载的包必须带<code>bin</code>，这个是编译好的，否则运行会报错</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好的zookeeper压缩包已经经过编译，直接解压就可以用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在每个节点都下载</span></span><br><span class=\"line\">tar zxf apache-zookeeper-3.5.5-bin.tar.gz </span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">cd</span> apache-zookeeper-3.5.5-bin</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"建立配置文件\"><a href=\"#建立配置文件\" class=\"headerlink\" title=\"建立配置文件\"></a>建立配置文件</h2><p>默认没有配置文件，可以直接复制配置文件模板：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在每个节点都执行</span></span><br><span class=\"line\">mv conf/zoo_sample.cfg conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><p>虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在每个节点都执行</span></span><br><span class=\"line\">mkdir /data/zookeeper</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在每个节点都修改配置文件的如下字段，使用数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># conf/zoo.cfg</span></span><br><span class=\"line\">dataDir=/data/zookeeper</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"添加zookeeper节点\"><a href=\"#添加zookeeper节点\" class=\"headerlink\" title=\"添加zookeeper节点\"></a>添加zookeeper节点</h2><p>在每个节点的配置文件<code>zoo.cfg</code>中，添加zookeeper集群每台节点的地址，例如我这里是三节点的集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># conf/zoo.cfg</span></span><br><span class=\"line\"><span class=\"comment\"># 增加如下的内容</span></span><br><span class=\"line\">server.2=192.168.12.12:2888:3888</span><br><span class=\"line\">server.3=192.168.12.13:2888:3888</span><br><span class=\"line\">server.4=192.168.12.14:2888:3888</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>2888</code>为zookeeper节点间的通信端口号，<code>3888</code>为选举的端口号；主从关系通过<code>3888</code>自动选举产生，配置中不需要指定；</p>\n<p><code>server</code>后面的数字为集群中节点的id，可以随便起但是不能相同；</p>\n</blockquote>\n<br>\n\n<h2 id=\"添加id文件\"><a href=\"#添加id文件\" class=\"headerlink\" title=\"添加id文件\"></a>添加id文件</h2><p>在上一步中添加了三个节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.2=192.168.12.12:2888:3888</span><br><span class=\"line\">server.3=192.168.12.13:2888:3888</span><br><span class=\"line\">server.4=192.168.12.14:2888:3888</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在到<code>192.168.12.12</code>这个节点的zookeeper数据目录<code>/data/zookeeper</code>下，设置节点id文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /data/zookeeper</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2 &gt; myid</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>myid</code>这个文件名是固定的不能变；文件的内容就是这个节点的id号，根据配置文件中指定的数字配置；</p>\n</blockquote>\n<p>其他的节点，需要执行相同的操作，注意id设置为自己的id；</p>\n<br>\n\n<h2 id=\"设置日志位置\"><a href=\"#设置日志位置\" class=\"headerlink\" title=\"设置日志位置\"></a>设置日志位置</h2><p>默认日志位置是放在安装目录下的logs下，可以在<code>bin/zkENV.sh</code>中，修改下面的代码进行重新设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bin/zkENV.sh</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;x<span class=\"variable\">$&#123;ZOO_LOG_DIR&#125;</span>&quot;</span> = <span class=\"string\">&quot;x&quot;</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    ZOO_LOG_DIR=<span class=\"string\">&quot;/data/zookeeper/logs&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建日志目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/zookeeper/logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"设置JAVA-HOME\"><a href=\"#设置JAVA-HOME\" class=\"headerlink\" title=\"设置JAVA_HOME\"></a>设置JAVA_HOME</h2><p>如果需要设置<code>JAVA_HOME</code>变量，则可以在<code>bin/zkENV.sh</code>的前面设置一个环境变量即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bin/zkENV.sh</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/java/home/dir</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>在每个节点都执行启动命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"查看状态\"><a href=\"#查看状态\" class=\"headerlink\" title=\"查看状态\"></a>查看状态</h2><p>当集群一半以上的节点都启动之后，整个集群才会正常工作，此时执行下面的命令查看服务状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh status </span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果出现<code>Mode: follower</code>则表示该节点为从节点；如果出现<code>Mode: leader</code>则表示该节点为主节点</p>\n"},{"title":"部署单点zookeeper","date":"2021-04-06T06:57:30.000Z","description":"部署一个单点的适合于开发测试场景的zookeeper服务","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","_content":"\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了部署一个单点的zookeeper3.5.5服务\n\n更新于 2021-04-06\n\n{% endnote %}\n\n<br>\n\n\n\n## 下载\n\n下载地址：http://archive.apache.org/dist/zookeeper/\n\n>  需要下载的包必须带`bin`，这个是编译好的，否则运行会报错\n\n\n\n```bash\nwget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz\n```\n\n\n\n<br>\n\n\n\n## 安装\n\n下载好的zookeeper压缩包已经经过编译，直接解压就可以用：\n\n```bash\ntar zxf apache-zookeeper-3.5.5-bin.tar.gz \ncd apache-zookeeper-3.5.5-bin\n```\n\n<br>\n\n## 建立配置文件\n\n默认没有配置文件，可以直接复制配置文件模板：\n\n```bash\nmv conf/zoo_sample.cfg conf/zoo.cfg\n```\n\n<br>\n\n## 创建数据目录\n\n虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：\n\n```bash\nmkdir /data/zookeeper\n```\n\n\n\n然后修改配置文件的如下字段，使用数据目录：\n\n```bash\n# conf/zoo.cfg\ndataDir=/data/zookeeper\n```\n\n<br>\n\n## 后台方式启动服务\n\n```bash\nbin/zkServer.sh start\n```\n\n![](./start.png)\n\n\n\n## 前台方式启动\n\n```bash\nbin/zkServer.sh start-foreground\n```\n\n<br>\n\n\n\n## 查看服务状态\n\n```bash\nbin/zkServer.sh status \n```\n\n![](./status.png)\n\n<br>\n\n## 查看日志\n\n如果是后台方式启动，日志默认存放在安装目录下的logs中，文件名包含主机名：\n\n```bash\ntail -f apache-zookeeper-3.5.5-bin/logs/zookeeper-root-server-localhost.out\n```\n\n\n\n\n\n## 停止zookeeper服务\n\n```bash\nbin/zkServer.sh stop \n```\n\n![](./stop.png)\n\n\n\n<br>","source":"_posts/部署单点zookeeper.md","raw":"---\ntitle: 部署单点zookeeper\ndate: 2021-04-06 14:57:30\ntags:\n- Zookeeper\ncategories:\n- Zookeeper\n- 部署\ndescription: 部署一个单点的适合于开发测试场景的zookeeper服务\ncover:\n---\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了部署一个单点的zookeeper3.5.5服务\n\n更新于 2021-04-06\n\n{% endnote %}\n\n<br>\n\n\n\n## 下载\n\n下载地址：http://archive.apache.org/dist/zookeeper/\n\n>  需要下载的包必须带`bin`，这个是编译好的，否则运行会报错\n\n\n\n```bash\nwget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz\n```\n\n\n\n<br>\n\n\n\n## 安装\n\n下载好的zookeeper压缩包已经经过编译，直接解压就可以用：\n\n```bash\ntar zxf apache-zookeeper-3.5.5-bin.tar.gz \ncd apache-zookeeper-3.5.5-bin\n```\n\n<br>\n\n## 建立配置文件\n\n默认没有配置文件，可以直接复制配置文件模板：\n\n```bash\nmv conf/zoo_sample.cfg conf/zoo.cfg\n```\n\n<br>\n\n## 创建数据目录\n\n虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：\n\n```bash\nmkdir /data/zookeeper\n```\n\n\n\n然后修改配置文件的如下字段，使用数据目录：\n\n```bash\n# conf/zoo.cfg\ndataDir=/data/zookeeper\n```\n\n<br>\n\n## 后台方式启动服务\n\n```bash\nbin/zkServer.sh start\n```\n\n![](./start.png)\n\n\n\n## 前台方式启动\n\n```bash\nbin/zkServer.sh start-foreground\n```\n\n<br>\n\n\n\n## 查看服务状态\n\n```bash\nbin/zkServer.sh status \n```\n\n![](./status.png)\n\n<br>\n\n## 查看日志\n\n如果是后台方式启动，日志默认存放在安装目录下的logs中，文件名包含主机名：\n\n```bash\ntail -f apache-zookeeper-3.5.5-bin/logs/zookeeper-root-server-localhost.out\n```\n\n\n\n\n\n## 停止zookeeper服务\n\n```bash\nbin/zkServer.sh stop \n```\n\n![](./stop.png)\n\n\n\n<br>","slug":"部署单点zookeeper","published":1,"updated":"2021-04-06T07:08:31.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de660020p0kl1nopdwm9","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了部署一个单点的zookeeper3.5.5服务</p><p>更新于 2021-04-06</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"http://archive.apache.org/dist/zookeeper/\">http://archive.apache.org/dist/zookeeper/</a></p>\n<blockquote>\n<p> 需要下载的包必须带<code>bin</code>，这个是编译好的，否则运行会报错</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好的zookeeper压缩包已经经过编译，直接解压就可以用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf apache-zookeeper-3.5.5-bin.tar.gz </span><br><span class=\"line\"><span class=\"built_in\">cd</span> apache-zookeeper-3.5.5-bin</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"建立配置文件\"><a href=\"#建立配置文件\" class=\"headerlink\" title=\"建立配置文件\"></a>建立配置文件</h2><p>默认没有配置文件，可以直接复制配置文件模板：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv conf/zoo_sample.cfg conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><p>虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/zookeeper</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后修改配置文件的如下字段，使用数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># conf/zoo.cfg</span></span><br><span class=\"line\">dataDir=/data/zookeeper</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"后台方式启动服务\"><a href=\"#后台方式启动服务\" class=\"headerlink\" title=\"后台方式启动服务\"></a>后台方式启动服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./start.png\" alt=\"\"></p>\n<h2 id=\"前台方式启动\"><a href=\"#前台方式启动\" class=\"headerlink\" title=\"前台方式启动\"></a>前台方式启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start-foreground</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh status </span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./status.png\" alt=\"\"></p>\n<br>\n\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><p>如果是后台方式启动，日志默认存放在安装目录下的logs中，文件名包含主机名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f apache-zookeeper-3.5.5-bin/logs/zookeeper-root-server-localhost.out</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"停止zookeeper服务\"><a href=\"#停止zookeeper服务\" class=\"headerlink\" title=\"停止zookeeper服务\"></a>停止zookeeper服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh stop </span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./stop.png\" alt=\"\"></p>\n<br>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了部署一个单点的zookeeper3.5.5服务</p><p>更新于 2021-04-06</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下载地址：<a href=\"http://archive.apache.org/dist/zookeeper/\">http://archive.apache.org/dist/zookeeper/</a></p>\n<blockquote>\n<p> 需要下载的包必须带<code>bin</code>，这个是编译好的，否则运行会报错</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>下载好的zookeeper压缩包已经经过编译，直接解压就可以用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxf apache-zookeeper-3.5.5-bin.tar.gz </span><br><span class=\"line\"><span class=\"built_in\">cd</span> apache-zookeeper-3.5.5-bin</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"建立配置文件\"><a href=\"#建立配置文件\" class=\"headerlink\" title=\"建立配置文件\"></a>建立配置文件</h2><p>默认没有配置文件，可以直接复制配置文件模板：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv conf/zoo_sample.cfg conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><p>虽然zookeeper一般数据量不大，但是还是推荐使用单独的数据盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data/zookeeper</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后修改配置文件的如下字段，使用数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># conf/zoo.cfg</span></span><br><span class=\"line\">dataDir=/data/zookeeper</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"后台方式启动服务\"><a href=\"#后台方式启动服务\" class=\"headerlink\" title=\"后台方式启动服务\"></a>后台方式启动服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./start.png\" alt=\"\"></p>\n<h2 id=\"前台方式启动\"><a href=\"#前台方式启动\" class=\"headerlink\" title=\"前台方式启动\"></a>前台方式启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start-foreground</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh status </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./status.png\" alt=\"\"></p>\n<br>\n\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><p>如果是后台方式启动，日志默认存放在安装目录下的logs中，文件名包含主机名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f apache-zookeeper-3.5.5-bin/logs/zookeeper-root-server-localhost.out</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"停止zookeeper服务\"><a href=\"#停止zookeeper服务\" class=\"headerlink\" title=\"停止zookeeper服务\"></a>停止zookeeper服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh stop </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./stop.png\" alt=\"\"></p>\n<br>"},{"title":"部署单节点kafka","date":"2021-04-19T13:49:44.000Z","description":"使用docker-compose部署单点kafka服务","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.kailing.pub%2FUploads%2Fimage%2F20190314%2F20190314151109_73755.png&refer=http%3A%2F%2Fwww.kailing.pub&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621432273&t=9d4c537f9a720233047a49967f071162","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍使用docker-compose部署一个适合于开发、测试的单点kafka环境\n\n更新于 2021-04-19\n\n{% endnote %}\n\n<br>\n\n\n\n> 单机版适合学习和测试，不适合生产\n\n\n\n# 创建docker-compose.yaml文件\n\n创建一个名为`zk-single-kafka-single.yml `的文件：\n\n```yaml\nversion: '2.1'\n\nservices:\n  zoo1:\n    image: zookeeper:3.4.9\n    hostname: zoo1\n    ports:\n      - \"2181:2181\"\n    environment:\n      ZOO_MY_ID: 1\n      ZOO_PORT: 2181\n      ZOO_SERVERS: server.1=zoo1:2888:3888\n    volumes:\n      -./zk-single-kafka-single/zoo1/data:/data\n      -./zk-single-kafka-single/zoo1/datalog:/datalog\n kafka1:\n   image: confluentinc/cp-kafka:5.3.1\n   hostname: kafka1\n   ports:\n     - \"9092:9092\"\n   environment:\n     KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL//kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092\n     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n     KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n     KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181\"\n     KAFKA_BROKER_ID: 1\n     KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n   volumes:\n     -./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data\n   depends_on:\n   \t - zoo1\n```\n\n\n\n# 启动服务\n\n```bash\ndocker-compose -f zk-single-kafka-single.yml up\n```\n\n\n\n# 停止服务\n\n```bash\ndocker-compose -f zk-single-kafka-single.yml down\n```","source":"_posts/部署单节点kafka.md","raw":"---\ntitle: 部署单节点kafka\ndate: 2021-04-19 21:49:44\ntags:\n- Kafka\ncategories:\n- 消息中间件\n- Kafka\n- 部署\ndescription: 使用docker-compose部署单点kafka服务\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.kailing.pub%2FUploads%2Fimage%2F20190314%2F20190314151109_73755.png&refer=http%3A%2F%2Fwww.kailing.pub&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1621432273&t=9d4c537f9a720233047a49967f071162\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍使用docker-compose部署一个适合于开发、测试的单点kafka环境\n\n更新于 2021-04-19\n\n{% endnote %}\n\n<br>\n\n\n\n> 单机版适合学习和测试，不适合生产\n\n\n\n# 创建docker-compose.yaml文件\n\n创建一个名为`zk-single-kafka-single.yml `的文件：\n\n```yaml\nversion: '2.1'\n\nservices:\n  zoo1:\n    image: zookeeper:3.4.9\n    hostname: zoo1\n    ports:\n      - \"2181:2181\"\n    environment:\n      ZOO_MY_ID: 1\n      ZOO_PORT: 2181\n      ZOO_SERVERS: server.1=zoo1:2888:3888\n    volumes:\n      -./zk-single-kafka-single/zoo1/data:/data\n      -./zk-single-kafka-single/zoo1/datalog:/datalog\n kafka1:\n   image: confluentinc/cp-kafka:5.3.1\n   hostname: kafka1\n   ports:\n     - \"9092:9092\"\n   environment:\n     KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL//kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092\n     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n     KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n     KAFKA_ZOOKEEPER_CONNECT: \"zoo1:2181\"\n     KAFKA_BROKER_ID: 1\n     KAFKA_LOG4J_LOGGERS: \"kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO\"\n     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n   volumes:\n     -./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data\n   depends_on:\n   \t - zoo1\n```\n\n\n\n# 启动服务\n\n```bash\ndocker-compose -f zk-single-kafka-single.yml up\n```\n\n\n\n# 停止服务\n\n```bash\ndocker-compose -f zk-single-kafka-single.yml down\n```","slug":"部署单节点kafka","published":1,"updated":"2021-05-02T10:58:04.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de670022p0klh5bvh8lx","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍使用docker-compose部署一个适合于开发、测试的单点kafka环境</p><p>更新于 2021-04-19</p>\n          </div>\n\n<br>\n\n\n\n<blockquote>\n<p>单机版适合学习和测试，不适合生产</p>\n</blockquote>\n<h1 id=\"创建docker-compose-yaml文件\"><a href=\"#创建docker-compose-yaml文件\" class=\"headerlink\" title=\"创建docker-compose.yaml文件\"></a>创建docker-compose.yaml文件</h1><p>创建一个名为<code>zk-single-kafka-single.yml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zoo1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2181:2181&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">      <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"string\">-./zk-single-kafka-single/zoo1/data:/data</span></span><br><span class=\"line\">      <span class=\"string\">-./zk-single-kafka-single/zoo1/datalog:/datalog</span></span><br><span class=\"line\"> <span class=\"attr\">kafka1:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.3.1</span></span><br><span class=\"line\">   <span class=\"attr\">hostname:</span> <span class=\"string\">kafka1</span></span><br><span class=\"line\">   <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&quot;9092:9092&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL//kafka1:19092,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9092</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class=\"number\">1</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"string\">-./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data</span></span><br><span class=\"line\">   <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">   \t <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -f zk-single-kafka-single.yml up</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -f zk-single-kafka-single.yml down</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍使用docker-compose部署一个适合于开发、测试的单点kafka环境</p><p>更新于 2021-04-19</p>\n          </div>\n\n<br>\n\n\n\n<blockquote>\n<p>单机版适合学习和测试，不适合生产</p>\n</blockquote>\n<h1 id=\"创建docker-compose-yaml文件\"><a href=\"#创建docker-compose-yaml文件\" class=\"headerlink\" title=\"创建docker-compose.yaml文件\"></a>创建docker-compose.yaml文件</h1><p>创建一个名为<code>zk-single-kafka-single.yml</code>的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;2.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zoo1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper:3.4.9</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">zoo1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;2181:2181&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ZOO_MY_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">ZOO_PORT:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">      <span class=\"attr\">ZOO_SERVERS:</span> <span class=\"string\">server.1=zoo1:2888:3888</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"string\">-./zk-single-kafka-single/zoo1/data:/data</span></span><br><span class=\"line\">      <span class=\"string\">-./zk-single-kafka-single/zoo1/datalog:/datalog</span></span><br><span class=\"line\"> <span class=\"attr\">kafka1:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">confluentinc/cp-kafka:5.3.1</span></span><br><span class=\"line\">   <span class=\"attr\">hostname:</span> <span class=\"string\">kafka1</span></span><br><span class=\"line\">   <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&quot;9092:9092&quot;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL//kafka1:19092,LISTENER_DOCKER_EXTERNAL://$&#123;DOCKER_HOST_IP:-127.0.0.1&#125;:9092</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_INTER_BROKER_LISTENER_NAME:</span> <span class=\"string\">LISTENER_DOCKER_INTERNAL</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"string\">&quot;zoo1:2181&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_LOG4J_LOGGERS:</span> <span class=\"string\">&quot;kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO&quot;</span></span><br><span class=\"line\">     <span class=\"attr\">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR:</span> <span class=\"number\">1</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"string\">-./zk-single-kafka-single/kafka1/data:/var/lib/kafka/data</span></span><br><span class=\"line\">   <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">   \t <span class=\"bullet\">-</span> <span class=\"string\">zoo1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -f zk-single-kafka-single.yml up</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"停止服务\"><a href=\"#停止服务\" class=\"headerlink\" title=\"停止服务\"></a>停止服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -f zk-single-kafka-single.yml down</span><br></pre></td></tr></table></figure>"},{"title":"kubeadm部署k8s 1.17集群","date":"2021-03-28T06:32:13.000Z","description":"通过kubeadm部署3master节点高可用k8s 1.17.3集群","cover":"https://raw.githubusercontent.com/kubernetes/kubeadm/master/logos/stacked/color/kubeadm-stacked-color.png","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了通过kubeadm部署3master节点高可用k8s 1.17.3集群 \n\n更新于 2021-03-28\n\n{% endnote %}\n\n<br>\n\n\n\n# 集群规划\n\n|    主机名     |   IP地址    |        用途        |\n| :-----------: | :---------: | :----------------: |\n| SCA-LUM700011 | 10.8.138.8  | nginx+nfs+运维节点 |\n| SCA-LUM700007 | 10.8.138.5  |      master-1      |\n| SCA-LUM700008 | 10.8.138.6  |      Master-2      |\n| SCA-LUM700012 | 10.8.138.10 |      Master-3      |\n| SCA-LUM700013 | 10.8.138.9  |       Node-1       |\n| SCA-LUM700014 | 10.8.138.11 |       node-2       |\n\n\n\n操作系统`centos7.6`，前端还有一个elb，地址为`10.8.138.12`，代理master的apiserver。kube-proxy使用`ipvs`模式，集群使用`1.17.3`版本\n\n\n\n<br>\n\n\n\n# 安装工具\n\n{% tabs comments %}\n\n<!-- tab 安装nfs -->\n\nnfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在`SCA-LUM700011`这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：\n\n```bash\nmkfs.xfs /dev/vdb -f\nmkdir -p /data/nfs-data\necho \"/dev/vdb /data/nfs-data xfs defaults 0 0\" >> /etc/fstab\nmount -a\ndf -h\n```\n\n\n\n安装nfs相关服务并启动nfs：\n\n```bash\nyum install -y nfs-utils rpcbind\necho \"/data/nfs-data *(rw,no_root_squash)\" >> /etc/exports\nsystemctl start rpcbind\nsystemctl status rpcbind\nsystemctl enable rpcbind\nsystemctl start nfs \nsystemctl status nfs\nsystemctl enable nfs\n```\n\n\n\n在集群的每一个节点上执行下面的命令安装`nfs-utils`工具：\n\n```bash\nyum install -y nfs-utils \n```\n\n<!-- endtab -->\n\n<!-- tab 安装nginx -->\n\nnginx将作为一个代理，代理集群中的服务，这里使用yum方式安装nginx。\n\n```bash\n# 安装依赖\nyum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n\n# 添加yum源\ncat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\n# 安装nginx\nyum install -y nginx\n\n# 检查\nnginx -v\nnginx -V\n\n# 启动nginx\nsystemctl start nginx\nsystenctl status nginx\nsystenctl enable nginx\n```\n\n<!-- endtab -->\n\n<!-- tab 安装ansible -->\n\n`ansible`可以方便批量执行指令，首先在`SCA-LUM700011`这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。\n\n```bash\nssh-keygen\nssh-copy-id 10.8.138.5\nssh-copy-id 10.8.138.6\nssh-copy-id 10.8.138.10\nssh-copy-id 10.8.138.9\nssh-copy-id 10.8.138.11\n```\n\n\n\n安装ansible：\n\n```bash\nyum install -y ansible\n\n# 设置配置文件\ncat > /etc/ansible/ansible.cfg <<EOF\n[defaults]\nlog_path = /var/log/ansible.log\nforks = 20\nhost_key_checking = False\nretry_files_enabled = False\ndeprecation_warnings = False\nnocows = True\nremote_user = root\nroles_path = roles/\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = /etc/ansible/facts\nfact_caching_timeout = 600\ncallback_whitelist = profile_tasks\ninventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini\ntimeout = 30\n\n[inventory]\nunparsed_is_failed=true\n\n[ssh_connection]\npipelining = True\nssh_args = -o ControlMaster=auto -o ControlPersist=600s\ntimeout = 10\ncontrol_path = %(directory)s/%%h-%%r\nEOF\n\n# 设置host文件\ncat > /etc/ansible/hosts <<EOF\n[cluster]\n10.8.138.5  hostname='SCA-LUM700007'\n10.8.138.6  hostname='SCA-LUM700008'\n10.8.138.10 hostname='SCA-LUM700012'\n10.8.138.9  hostname='SCA-LUM700013'\n10.8.138.11 hostname='SCA-LUM700014'\n\n[ans]\n10.8.138.8\n\n[master]\n10.8.138.5\n10.8.138.6\n10.8.138.10\n\n[worker]\n10.8.138.9\n10.8.138.11\nEOF\n\n# 检查ansible\nansible cluster -m ping \n```\n\n<img src=\"./ansible-check.png\" style=\"zoom:40%;\" />\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n\n\n<br>\n\n# 内核优化\n\n{% tabs comments %}\n\n<!-- tab 升级内核版本 -->\n\n**注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下**\n\n```bash\n# 载入公钥\nrpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n\n# 安装 ELRepo 最新版本\nyum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm\n\n# 列出可以使用的 kernel 包版本\nyum list available --disablerepo=* --enablerepo=elrepo-kernel\n\n# 安装内核\nyum install -y kernel-lt-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel\n\n# 查看可用内核\ncat /boot/grub2/grub.cfg | grep menuentry\n\nmenuentry 'CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)' --class centos （略）\nmenuentry 'CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)' --class centos ...（略）\n\n# 设置从新的内核起动\ngrub2-set-default \"CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\"\n\n# 查看内核启动项\ngrub2-editenv list\n\nsaved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\n\n# 重启\nreboot\n```\n\n<!-- endtab -->\n\n<!-- tab 设置内核参数 -->\n\n```bash\ncat > /etc/k8s.conf << EOF\nfs.file-max=6815744\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nnet.ipv4.tcp_tw_recycle=0\nvm.swappiness=0\nvm.panic_on_oom=0\n\n# 当内核维护的arp表过于庞大时候，可以考虑优化\nnet.ipv4.neigh.default.gc_thresh1=1024\nnet.ipv4.neigh.default.gc_thresh2=4096\nnet.ipv4.neigh.default.gc_thresh3=8192\n\n# netfilter优化\nnet.netfilter.nf_conntrack_max=10485760\nnet.netfilter.nf_conntrack_tcp_timeout_established=300\nnet.netfilter.nf_conntrack_buckets=655360\n\nnet.core.netdev_max_backlog=10000\nfs.inotify.max_user_instances=524288\nfs.inotify.max_user_watches=524288\n\nEOF\n```\n\n- `fs.file-max`表示系统级别最大文件句柄数量；\n- `net.ipv4.neigh.default.gc_thresh1`表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；\n- `net.ipv4.neigh.default.gc_thresh2`保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；\n- `net.ipv4.neigh.default.gc_thresh3`保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；\n- `net.netfilter.nf_conntrack_max`内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；\n- `net.netfilter.nf_conntrack_buckets`哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;\n- `net.core.netdev_max_backlog`网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；\n- `fs.inotify.max_user_instances`默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；\n- `fs.inotify.max_user_watches`默认值: 8192 指定了每个inotify instance相关联的watches的上限；\n\n\n\n执行下面的命令在每个节点生效配置：\n\n```bash\nansible cluster -m copy -a 'src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755'\nansible cluster -m shell -a 'sysctl -p /etc/sysctl.d/k8s.conf'\nansible cluster -m shell -a 'echo \"/sbin/sysctl -p /etc/sysctl.d/k8s.conf\" >> /etc/rc.local'\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署前准备\n\n{% tabs comments %}\n\n<!-- tab 设置host -->\n\n通过`ansible`为每个节点设置host文件：\n\n```bash\nansible cluster -m shell -a 'cat >> /etc/hosts <<EOF\n10.8.138.5  SCA-LUM700007 sca-lum700007 master1\n10.8.138.6  SCA-LUM700008 sca-lum700008 master2\n10.8.138.10 SCA-LUM700012 sca-lum700012 master3\n10.8.138.9  SCA-LUM700013 sca-lum700013 node1\n10.8.138.11 SCA-LUM700014 sca-lum700014 node2\nEOF'\n```\n\n<!-- endtab -->\n\n<!-- tab 安装docker -->\n\n**需要给集群所有的节点安装docker**\n\n\n\n首先添加repo文件：\n\n```bash\nansible cluster -m shell -a 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'\n```\n\n\n\n设置存储目录，一般docker的数据存放路径为`/var/lib/docker`，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：\n\n```bash\nmkdir /var/lib/docker\nmkfs.xfs -f /dev/vdb\necho \"/dev/vdb /var/lib/docker xfs defaults 0 0\" >> /etc/fstab\nmount -a\ndf -h\n```\n\n\n\n安装docker\n\n```bash\n# 查看当前可用的版本\nyum list docker-ce --showduplicates|sort -r\n\n# 安装docker\nansible cluster -m shell -a 'yum install -y docker-ce-18.06.3.ce-3.el7'\n```\n\n\n\n设置配置文件：\n\n```bash\ncat > daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\",\n    \"max-file\": \"5\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n\n# 分发到集群节点\nansible cluster -m shell -a 'mkdir /etc/docker'\nansible cluster -m copy -a 'src=daemon.json dest=/etc/docker/daemon.json'\n```\n\n\n\n启动服务：\n\n```bash\nansible cluster -m shell -a 'systemctl daemon-reload'\nansible cluster -m shell -a 'systemctl restart docker'\nansible cluster -m shell -a 'systemctl status docker'\nansible cluster -m shell -a 'systemctl enable docker'\n```\n\n<!-- endtab -->\n\n<!-- tab 关闭swap -->\n\n```bash\nansible cluster -m shell -a 'swapoff -a'\nansible cluster -m shell -a 'sed -i \"/swap/s/^/#/g\" /etc/fstab'\n```\n\n<!-- endtab -->\n\n<!-- tab 开启ipvs -->\n\n本集群的service网络采用ipvs模式：\n\n```bash\n# 配置内核参数\nansible cluster -m sysctl -a 'name=net.ipv4.ip_forward value=1 state=present'\nansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-iptables value=1 state=present'\nansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-ip6tables value=1 state=present'\n\n# 加载ipvs模块\ncat > /tmp/ipvs.modules <<EOF\n#!/bin/bash\nipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"\nfor kernel_module in \\${ipvs_modules}; do\n    /sbin/modinfo -F filename \\${kernel_module} > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        /sbin/modprobe \\${kernel_module}\n    fi\ndone\nEOF\n\nansible cluster -m copy -a 'src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755'\nansible cluster -m shell -a 'sh /root/ipvs.modules'\n\n# 设置开机启动执行该脚本\nansible cluster -m shell -a 'echo \"sh /root/ipvs.modules\" >> /etc/rc.local'\n\n# 验证 ipvs 支持\nansible cluster -m shell -a 'lsmod | grep ip_vs'\n\n# 安装ipvsadm\nansible cluster -m yum -a 'name=ipvsadm state=present'\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 安装基础服务\n\n## 添加yum源\n\n```bash\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n# 分发文件\nansible cluster -m copy -a 'src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo'\n```\n\n\n\n## 安装kubelet、kubectl、kubeadm\n\n这里安装的是`1.17.3`版本：\n\n```bash\n# 安装kubectl、kubeadm、kubelet\nansible cluster -m shell -a 'yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3'\n\n# 检查\nansible cluster -m shell -a 'ls /usr/bin/kube*'\n\n# 设置kubelet自启动\nansible cluster -m shell -a 'systemctl enable kubelet'\n```\n\n\n\n<br>\n\n\n\n# 部署master节点\n\n这一步在任意一个master上执行，这里我在`master1`上执行。需要配置下kubeadm的相关参数。\n\n\n\n## 配置kubeadm参数\n\n```bash\ncat > kubeadm-config.yaml << EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 0.0.0.0\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n  kubeletExtraArgs:\n    cgroup-driver: \"systemd\"\n  ignorePreflightErrors:\n  - IsPrivilegedUser\n---\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\ncontrolPlaneEndpoint: 10.8.138.12:6443\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\napiServer:\n  timeoutForControlPlane: 5m0s\n  extraArgs:\n    authorization-mode: \"Node,RBAC\"\n  certSANs:\n  - \"10.8.138.12\"\n  - \"14.116.177.22\"\n  - \"kubernetes\"\n  - \"kubernetes.default\"\n  - \"kubernetes.default.svc\"\n  - \"kubernetes.default.svc.cluster\"\n  - \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    \"node-cidr-mask-size\": \"20\"\nscheduler:\n  extraArgs:\n    address: \"0.0.0.0\"\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\n#    extraArgs:\n#      listen-client-urls: \"http://10.100.0.1:2379\"\n#    serverCertSANs:\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\nkubernetesVersion: v1.17.3\nnetworking:\n  dnsDomain: cluster.local\n  serviceSubnet: 172.24.0.0/16\n  podSubnet: 172.21.0.0/16\n---\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nkind: KubeProxyConfiguration\nbindAddress: 0.0.0.0\n#clusterCIDR:\nmode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。\nipvs:\n  scheduler: lc\n  syncPeriod: 30s\n  minSyncPeriod: 5s\n  tcpTimeout: 0s\n  tcpFinTimeout: 0s\n  udpTimeout: 0s\n---\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\nEOF\n```\n\n- 其中`10.8.138.12`为我前端slb的IP地址，代理后端三个master节点的6443；\n- 根据实际情况在`certSANs`中添加IP和域名；\n- 注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）\n\n\n\n## 验证配置\n\n下面的命令可以验证配置是否有误，并不会真正执行：\n\n```bash\nkubeadm init --config=kubeadm-config.yaml --upload-certs --dry-run\n```\n\n\n\n## 创建集群\n\n```bash\n# 创建集群\nkubeadm init --config=kubeadm-config.yaml --upload-certs\n```\n\n\n\n执行成功的话，会出现下面的信息：\n\n![](./kubeadm-init.png)\n\n\n\n从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：\n\n```shell\n# 添加master\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n    \n# 添加node节点\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n> 命令中的token有两个小时时效，时效后需要重新获取\n\n\n\n## 添加其他的master节点\n\n在剩下的两个master节点`SCA-LUM700008`和`SCA-LUM700012`执行下面的命令：\n\n```shell\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n```\n\n> 不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver去配置信息；\n\n\n\n## 设置kubectl\n\n\n\n```bash\n# 自动补全\nansible master -m shell -a 'echo \"source <(kubectl completion bash)\" >> ~/.bashrc'\n\n# 设置kubectl证书\ncp /etc/kubernetes/admin.conf /root/.kube/config\n```\n\n\n\n## 验证master部署情况\n\n```bash\n# 查看master\nkubectl get node --kubeconfig /etc/kubernetes/admin.conf\n\n# 查看pod\nkubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf\n```\n\n![](check-master.png)\n\n\n\n> 这里有些pod没有启动是正常的，因为集群还没部署完成。\n\n\n\n## 确认kubeproxy开启了ipvs\n\n首先查看网卡信息，多了一个kube-ipvs0网卡：\n\n```bash\n$ ip a s\n```\n\n<img src=\"./ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n查看ipvs规则：\n\n```bash\n$ ipvsadm -Ln\n```\n\n<img src=\"./ipvs-rule.png\" style=\"zoom:40%;\" />\n\n\n\n<br>\n\n\n\n# 部署etcd\n\n## 更新etcd配置\n\n更新后会自动重启服务：\n\n```bash\nansible master -m shell -a 'sed -i \"/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380\" /etc/kubernetes/manifests/etcd.yaml'\n\n# apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。\nansible master -m shell -a 'sed -i \"/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379\" /etc/kubernetes/manifests/kube-apiserver.yaml'\n```\n\n\n\n## 查看etcd节点状态\n\n```bash\n# 下载etcdctl\ncurl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz\ntar xzf etcd-v3.4.3-linux-amd64.tar.gz\nmv etcd-v3.4.3-linux-amd64/etcd* /usr/local/bin/\n\n# 查看状态\nETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list\n```\n\n![](./etcd-member.png)\n\n\n\n## 查看集群状态\n\n```bash\nETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status\n```\n\n![](./etcd-cluster.png)\n\n\n\n## etcd节点健康状态\n\n```bash\nETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health\n```\n\n![](./etcd-helth.png)\n\n<br>\n\n\n\n# 部署node节点\n\n在所有node节点上执行下面的命令：\n\n```bash\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n\n\n查看：\n\n```bash\nkubectl get node \n```\n\n<img src=\"./getnode.png\" style=\"zoom:67%;\" />\n\n\n\n*节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。*\n\n<br>\n\n\n\n# 部署calico\n\n## 下载calico\n\n```bash\n# 下载calico的yaml文件\ncurl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml\n```\n\n\n\n## 部署calico\n\n修改calico.yaml：\n\n```yaml\n# 修改为pod网段\n- name: CALICO_IPV4POOL_CIDR\n  value: \"172.21.0.0/16\"\n  \n# 增加该参数，设定端口范围\n- name: FELIX_KUBENODEPORTRANGES\n  value: \"30000:50000\"\n```\n\n\n\n部署calico：\n\n```bash\nkubectl apply -f calico.yaml\n```\n\n\n\n部署完成后，查看节点状态，应该都READY：\n\n```bash\nkubectl get node\n```\n\n<img src=\"./nodes.png\" style=\"zoom:50%;\" />\n\n\n\n## 设置calico命令行工具\n\n下载calico命令行工具：\n\n```bash\n# 下载\ncurl -L -o /usr/local/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64\n\n# 配置\nmkdir -p /etc/calico\ncat > /etc/calico/calicoctl.cfg <<EOF\napiVersion: projectcalico.org/v3\nkind: CalicoAPIConfig\nmetadata:\nspec:\n  datastoreType: kubernetes\n  kubeconfig: /etc/kubernetes/admin.conf  # 使用 admin 配置\n  #k8sAPIEndpoint: https://10.8.138.12:6443\n  #k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt\n  #k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key\n  #k8sCAFile: /etc/kubernetes/pki/ca.crt\nEOF\n```\n\n\n\n## 查看calico节点\n\n```bash\ncalicoctl node status\n```\n\n<img src=\"./calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n## 查看ippool\n\n```bash\ncalicoctl get ippool -o wide\n\nNAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR\ndefault-ipv4-ippool   172.21.0.0/16   true   Always     Never       false      all()\n```\n\n\n\n## 查看ip状态\n\n```bash\ncalicoctl ipam show\n```\n\n![](./calico-ip.png)\n\n<br>\n\n\n\n# 集群校验\n\n```bash\nkubectl config get-clusters\nkubectl cluster-info\n```\n\n![](./cluster-check.png)\n\n\n\n<br>\n\n\n\n# nginx服务其配置\n\n`SCA-LUM700011`作为nginx服务器，将会代理ingress服务，所以先设置一下。\n\n\n\n## 自签证书\n\n```bash\n# 确认安装了openssl\nopenssl version\n\n# 确定nginx安装了https模块(应该有--with-http_ssl_module)\nnginx -V\n\n# 创建整数目录\ncd /etc/nginx/\nmkdir ssl\ncd ssl\n\n# 生成秘钥\nopenssl genrsa -out nginx.key 2048\nGenerating RSA private key, 2048 bit long modulus\n..............................................+++\n.....................................................................+++\ne is 65537 (0x10001)\n\n# 生成签名请求文件（csr），输入上边的密码，并输入相关的信息\nopenssl req -new -key nginx.key -out nginx.csr\n\n# 也可以在一行，不用交互式输入\nopenssl req -subj \"/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com\" -new -key nginx.key -out nginx.csr\n\n# 生成自签名证书，指定过期时间3650天，输入密码即可生成\nopenssl x509 -req -days 3650 -in nginx.csr -signkey nginx.key -out nginx.crt\n\n# 查看生成的文件\n$ ls\nnginx.crt  nginx.csr  nginx.key\n```\n\n\n\n## 修改nginx主配置文件\n\n修改`/etc/nginx/nginx.conf`文件为如下内容：\n\n```nginx\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n\n\n这里使用`include`导入其他的配置文件，所有服务的nginx配置都放在`/etc/nginx/conf.d`下，如果目录不存在需要自己创建。\n\n\n\n在``/etc/nginx/conf.d`下先创建一个通用配置文件`common.ini`，这个是所有配置文件都要用的，所以抽离出来：\n\n```nginx\nlocation = /favicon.ico {\n    log_not_found off;\n    access_log off;\n}\n\nlocation ~* /\\.(svn|git)/ {\n    return 404;\n}\n```\n\n\n\n### 创建一个测试配置\n\n在`/etc/nginx/conf.d`下新建一个配置文件`https.conf`：\n\n```nginx\nserver {\n  listen 80;\n  server_name https-server.example.com;\n\n  rewrite ^(.*) https://$host$1 permanent;\n\n}\n\nserver {\n    listen 443 ssl;\n    server_name https-server.example.com;\n\n    ssl_certificate /etc/nginx/ssl/new/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/new/nginx.key;\n\n    access_log /var/log/nginx/https-server.example.com_access.log main;\n    error_log /var/log/nginx/https-server.example.com_error.log;\n\n    location / {\n      root /usr/share/nginx/html;\n      index index.html index.htm;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n在`/usr/share/nginx/html`下创建测试页面：\n\n```bash\n$ echo \"this is https page\" > /usr/share/nginx/html/index.html\n```\n\n\n\n### 绑定host\n\n因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。\n\n\n\n### 重启nginx并访问\n\n执行下面的命令检查配置并重新加载：\n\n```bash\nnginx -t\nnginx -s reload \n```\n\n\n\n然后通过浏览器访问域名：`https-server.example.com`，应该就可以看到设置的https页面了。\n\n> 注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。\n\n\n\n","source":"_posts/kubeadm部署k8s-1-18集群.md","raw":"---\ntitle: kubeadm部署k8s 1.17集群\ndate: 2021-03-28 14:32:13\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- 集群部署\ndescription: 通过kubeadm部署3master节点高可用k8s 1.17.3集群 \ncover: https://raw.githubusercontent.com/kubernetes/kubeadm/master/logos/stacked/color/kubeadm-stacked-color.png\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了通过kubeadm部署3master节点高可用k8s 1.17.3集群 \n\n更新于 2021-03-28\n\n{% endnote %}\n\n<br>\n\n\n\n# 集群规划\n\n|    主机名     |   IP地址    |        用途        |\n| :-----------: | :---------: | :----------------: |\n| SCA-LUM700011 | 10.8.138.8  | nginx+nfs+运维节点 |\n| SCA-LUM700007 | 10.8.138.5  |      master-1      |\n| SCA-LUM700008 | 10.8.138.6  |      Master-2      |\n| SCA-LUM700012 | 10.8.138.10 |      Master-3      |\n| SCA-LUM700013 | 10.8.138.9  |       Node-1       |\n| SCA-LUM700014 | 10.8.138.11 |       node-2       |\n\n\n\n操作系统`centos7.6`，前端还有一个elb，地址为`10.8.138.12`，代理master的apiserver。kube-proxy使用`ipvs`模式，集群使用`1.17.3`版本\n\n\n\n<br>\n\n\n\n# 安装工具\n\n{% tabs comments %}\n\n<!-- tab 安装nfs -->\n\nnfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在`SCA-LUM700011`这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：\n\n```bash\nmkfs.xfs /dev/vdb -f\nmkdir -p /data/nfs-data\necho \"/dev/vdb /data/nfs-data xfs defaults 0 0\" >> /etc/fstab\nmount -a\ndf -h\n```\n\n\n\n安装nfs相关服务并启动nfs：\n\n```bash\nyum install -y nfs-utils rpcbind\necho \"/data/nfs-data *(rw,no_root_squash)\" >> /etc/exports\nsystemctl start rpcbind\nsystemctl status rpcbind\nsystemctl enable rpcbind\nsystemctl start nfs \nsystemctl status nfs\nsystemctl enable nfs\n```\n\n\n\n在集群的每一个节点上执行下面的命令安装`nfs-utils`工具：\n\n```bash\nyum install -y nfs-utils \n```\n\n<!-- endtab -->\n\n<!-- tab 安装nginx -->\n\nnginx将作为一个代理，代理集群中的服务，这里使用yum方式安装nginx。\n\n```bash\n# 安装依赖\nyum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n\n# 添加yum源\ncat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\n# 安装nginx\nyum install -y nginx\n\n# 检查\nnginx -v\nnginx -V\n\n# 启动nginx\nsystemctl start nginx\nsystenctl status nginx\nsystenctl enable nginx\n```\n\n<!-- endtab -->\n\n<!-- tab 安装ansible -->\n\n`ansible`可以方便批量执行指令，首先在`SCA-LUM700011`这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。\n\n```bash\nssh-keygen\nssh-copy-id 10.8.138.5\nssh-copy-id 10.8.138.6\nssh-copy-id 10.8.138.10\nssh-copy-id 10.8.138.9\nssh-copy-id 10.8.138.11\n```\n\n\n\n安装ansible：\n\n```bash\nyum install -y ansible\n\n# 设置配置文件\ncat > /etc/ansible/ansible.cfg <<EOF\n[defaults]\nlog_path = /var/log/ansible.log\nforks = 20\nhost_key_checking = False\nretry_files_enabled = False\ndeprecation_warnings = False\nnocows = True\nremote_user = root\nroles_path = roles/\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = /etc/ansible/facts\nfact_caching_timeout = 600\ncallback_whitelist = profile_tasks\ninventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini\ntimeout = 30\n\n[inventory]\nunparsed_is_failed=true\n\n[ssh_connection]\npipelining = True\nssh_args = -o ControlMaster=auto -o ControlPersist=600s\ntimeout = 10\ncontrol_path = %(directory)s/%%h-%%r\nEOF\n\n# 设置host文件\ncat > /etc/ansible/hosts <<EOF\n[cluster]\n10.8.138.5  hostname='SCA-LUM700007'\n10.8.138.6  hostname='SCA-LUM700008'\n10.8.138.10 hostname='SCA-LUM700012'\n10.8.138.9  hostname='SCA-LUM700013'\n10.8.138.11 hostname='SCA-LUM700014'\n\n[ans]\n10.8.138.8\n\n[master]\n10.8.138.5\n10.8.138.6\n10.8.138.10\n\n[worker]\n10.8.138.9\n10.8.138.11\nEOF\n\n# 检查ansible\nansible cluster -m ping \n```\n\n<img src=\"./ansible-check.png\" style=\"zoom:40%;\" />\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n\n\n<br>\n\n# 内核优化\n\n{% tabs comments %}\n\n<!-- tab 升级内核版本 -->\n\n**注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下**\n\n```bash\n# 载入公钥\nrpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n\n# 安装 ELRepo 最新版本\nyum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm\n\n# 列出可以使用的 kernel 包版本\nyum list available --disablerepo=* --enablerepo=elrepo-kernel\n\n# 安装内核\nyum install -y kernel-lt-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel\n\n# 查看可用内核\ncat /boot/grub2/grub.cfg | grep menuentry\n\nmenuentry 'CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)' --class centos （略）\nmenuentry 'CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)' --class centos ...（略）\n\n# 设置从新的内核起动\ngrub2-set-default \"CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\"\n\n# 查看内核启动项\ngrub2-editenv list\n\nsaved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\n\n# 重启\nreboot\n```\n\n<!-- endtab -->\n\n<!-- tab 设置内核参数 -->\n\n```bash\ncat > /etc/k8s.conf << EOF\nfs.file-max=6815744\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nnet.ipv4.tcp_tw_recycle=0\nvm.swappiness=0\nvm.panic_on_oom=0\n\n# 当内核维护的arp表过于庞大时候，可以考虑优化\nnet.ipv4.neigh.default.gc_thresh1=1024\nnet.ipv4.neigh.default.gc_thresh2=4096\nnet.ipv4.neigh.default.gc_thresh3=8192\n\n# netfilter优化\nnet.netfilter.nf_conntrack_max=10485760\nnet.netfilter.nf_conntrack_tcp_timeout_established=300\nnet.netfilter.nf_conntrack_buckets=655360\n\nnet.core.netdev_max_backlog=10000\nfs.inotify.max_user_instances=524288\nfs.inotify.max_user_watches=524288\n\nEOF\n```\n\n- `fs.file-max`表示系统级别最大文件句柄数量；\n- `net.ipv4.neigh.default.gc_thresh1`表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；\n- `net.ipv4.neigh.default.gc_thresh2`保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；\n- `net.ipv4.neigh.default.gc_thresh3`保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；\n- `net.netfilter.nf_conntrack_max`内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；\n- `net.netfilter.nf_conntrack_buckets`哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;\n- `net.core.netdev_max_backlog`网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；\n- `fs.inotify.max_user_instances`默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；\n- `fs.inotify.max_user_watches`默认值: 8192 指定了每个inotify instance相关联的watches的上限；\n\n\n\n执行下面的命令在每个节点生效配置：\n\n```bash\nansible cluster -m copy -a 'src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755'\nansible cluster -m shell -a 'sysctl -p /etc/sysctl.d/k8s.conf'\nansible cluster -m shell -a 'echo \"/sbin/sysctl -p /etc/sysctl.d/k8s.conf\" >> /etc/rc.local'\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署前准备\n\n{% tabs comments %}\n\n<!-- tab 设置host -->\n\n通过`ansible`为每个节点设置host文件：\n\n```bash\nansible cluster -m shell -a 'cat >> /etc/hosts <<EOF\n10.8.138.5  SCA-LUM700007 sca-lum700007 master1\n10.8.138.6  SCA-LUM700008 sca-lum700008 master2\n10.8.138.10 SCA-LUM700012 sca-lum700012 master3\n10.8.138.9  SCA-LUM700013 sca-lum700013 node1\n10.8.138.11 SCA-LUM700014 sca-lum700014 node2\nEOF'\n```\n\n<!-- endtab -->\n\n<!-- tab 安装docker -->\n\n**需要给集群所有的节点安装docker**\n\n\n\n首先添加repo文件：\n\n```bash\nansible cluster -m shell -a 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'\n```\n\n\n\n设置存储目录，一般docker的数据存放路径为`/var/lib/docker`，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：\n\n```bash\nmkdir /var/lib/docker\nmkfs.xfs -f /dev/vdb\necho \"/dev/vdb /var/lib/docker xfs defaults 0 0\" >> /etc/fstab\nmount -a\ndf -h\n```\n\n\n\n安装docker\n\n```bash\n# 查看当前可用的版本\nyum list docker-ce --showduplicates|sort -r\n\n# 安装docker\nansible cluster -m shell -a 'yum install -y docker-ce-18.06.3.ce-3.el7'\n```\n\n\n\n设置配置文件：\n\n```bash\ncat > daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\",\n    \"max-file\": \"5\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n\n# 分发到集群节点\nansible cluster -m shell -a 'mkdir /etc/docker'\nansible cluster -m copy -a 'src=daemon.json dest=/etc/docker/daemon.json'\n```\n\n\n\n启动服务：\n\n```bash\nansible cluster -m shell -a 'systemctl daemon-reload'\nansible cluster -m shell -a 'systemctl restart docker'\nansible cluster -m shell -a 'systemctl status docker'\nansible cluster -m shell -a 'systemctl enable docker'\n```\n\n<!-- endtab -->\n\n<!-- tab 关闭swap -->\n\n```bash\nansible cluster -m shell -a 'swapoff -a'\nansible cluster -m shell -a 'sed -i \"/swap/s/^/#/g\" /etc/fstab'\n```\n\n<!-- endtab -->\n\n<!-- tab 开启ipvs -->\n\n本集群的service网络采用ipvs模式：\n\n```bash\n# 配置内核参数\nansible cluster -m sysctl -a 'name=net.ipv4.ip_forward value=1 state=present'\nansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-iptables value=1 state=present'\nansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-ip6tables value=1 state=present'\n\n# 加载ipvs模块\ncat > /tmp/ipvs.modules <<EOF\n#!/bin/bash\nipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"\nfor kernel_module in \\${ipvs_modules}; do\n    /sbin/modinfo -F filename \\${kernel_module} > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        /sbin/modprobe \\${kernel_module}\n    fi\ndone\nEOF\n\nansible cluster -m copy -a 'src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755'\nansible cluster -m shell -a 'sh /root/ipvs.modules'\n\n# 设置开机启动执行该脚本\nansible cluster -m shell -a 'echo \"sh /root/ipvs.modules\" >> /etc/rc.local'\n\n# 验证 ipvs 支持\nansible cluster -m shell -a 'lsmod | grep ip_vs'\n\n# 安装ipvsadm\nansible cluster -m yum -a 'name=ipvsadm state=present'\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 安装基础服务\n\n## 添加yum源\n\n```bash\ncat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n# 分发文件\nansible cluster -m copy -a 'src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo'\n```\n\n\n\n## 安装kubelet、kubectl、kubeadm\n\n这里安装的是`1.17.3`版本：\n\n```bash\n# 安装kubectl、kubeadm、kubelet\nansible cluster -m shell -a 'yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3'\n\n# 检查\nansible cluster -m shell -a 'ls /usr/bin/kube*'\n\n# 设置kubelet自启动\nansible cluster -m shell -a 'systemctl enable kubelet'\n```\n\n\n\n<br>\n\n\n\n# 部署master节点\n\n这一步在任意一个master上执行，这里我在`master1`上执行。需要配置下kubeadm的相关参数。\n\n\n\n## 配置kubeadm参数\n\n```bash\ncat > kubeadm-config.yaml << EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 0.0.0.0\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n  kubeletExtraArgs:\n    cgroup-driver: \"systemd\"\n  ignorePreflightErrors:\n  - IsPrivilegedUser\n---\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\ncontrolPlaneEndpoint: 10.8.138.12:6443\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\napiServer:\n  timeoutForControlPlane: 5m0s\n  extraArgs:\n    authorization-mode: \"Node,RBAC\"\n  certSANs:\n  - \"10.8.138.12\"\n  - \"14.116.177.22\"\n  - \"kubernetes\"\n  - \"kubernetes.default\"\n  - \"kubernetes.default.svc\"\n  - \"kubernetes.default.svc.cluster\"\n  - \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    \"node-cidr-mask-size\": \"20\"\nscheduler:\n  extraArgs:\n    address: \"0.0.0.0\"\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\n#    extraArgs:\n#      listen-client-urls: \"http://10.100.0.1:2379\"\n#    serverCertSANs:\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\nkubernetesVersion: v1.17.3\nnetworking:\n  dnsDomain: cluster.local\n  serviceSubnet: 172.24.0.0/16\n  podSubnet: 172.21.0.0/16\n---\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nkind: KubeProxyConfiguration\nbindAddress: 0.0.0.0\n#clusterCIDR:\nmode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。\nipvs:\n  scheduler: lc\n  syncPeriod: 30s\n  minSyncPeriod: 5s\n  tcpTimeout: 0s\n  tcpFinTimeout: 0s\n  udpTimeout: 0s\n---\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\nEOF\n```\n\n- 其中`10.8.138.12`为我前端slb的IP地址，代理后端三个master节点的6443；\n- 根据实际情况在`certSANs`中添加IP和域名；\n- 注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）\n\n\n\n## 验证配置\n\n下面的命令可以验证配置是否有误，并不会真正执行：\n\n```bash\nkubeadm init --config=kubeadm-config.yaml --upload-certs --dry-run\n```\n\n\n\n## 创建集群\n\n```bash\n# 创建集群\nkubeadm init --config=kubeadm-config.yaml --upload-certs\n```\n\n\n\n执行成功的话，会出现下面的信息：\n\n![](./kubeadm-init.png)\n\n\n\n从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：\n\n```shell\n# 添加master\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n    \n# 添加node节点\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n> 命令中的token有两个小时时效，时效后需要重新获取\n\n\n\n## 添加其他的master节点\n\n在剩下的两个master节点`SCA-LUM700008`和`SCA-LUM700012`执行下面的命令：\n\n```shell\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n```\n\n> 不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver去配置信息；\n\n\n\n## 设置kubectl\n\n\n\n```bash\n# 自动补全\nansible master -m shell -a 'echo \"source <(kubectl completion bash)\" >> ~/.bashrc'\n\n# 设置kubectl证书\ncp /etc/kubernetes/admin.conf /root/.kube/config\n```\n\n\n\n## 验证master部署情况\n\n```bash\n# 查看master\nkubectl get node --kubeconfig /etc/kubernetes/admin.conf\n\n# 查看pod\nkubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf\n```\n\n![](check-master.png)\n\n\n\n> 这里有些pod没有启动是正常的，因为集群还没部署完成。\n\n\n\n## 确认kubeproxy开启了ipvs\n\n首先查看网卡信息，多了一个kube-ipvs0网卡：\n\n```bash\n$ ip a s\n```\n\n<img src=\"./ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n查看ipvs规则：\n\n```bash\n$ ipvsadm -Ln\n```\n\n<img src=\"./ipvs-rule.png\" style=\"zoom:40%;\" />\n\n\n\n<br>\n\n\n\n# 部署etcd\n\n## 更新etcd配置\n\n更新后会自动重启服务：\n\n```bash\nansible master -m shell -a 'sed -i \"/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380\" /etc/kubernetes/manifests/etcd.yaml'\n\n# apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。\nansible master -m shell -a 'sed -i \"/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379\" /etc/kubernetes/manifests/kube-apiserver.yaml'\n```\n\n\n\n## 查看etcd节点状态\n\n```bash\n# 下载etcdctl\ncurl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz\ntar xzf etcd-v3.4.3-linux-amd64.tar.gz\nmv etcd-v3.4.3-linux-amd64/etcd* /usr/local/bin/\n\n# 查看状态\nETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list\n```\n\n![](./etcd-member.png)\n\n\n\n## 查看集群状态\n\n```bash\nETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status\n```\n\n![](./etcd-cluster.png)\n\n\n\n## etcd节点健康状态\n\n```bash\nETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health\n```\n\n![](./etcd-helth.png)\n\n<br>\n\n\n\n# 部署node节点\n\n在所有node节点上执行下面的命令：\n\n```bash\nkubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n\n\n查看：\n\n```bash\nkubectl get node \n```\n\n<img src=\"./getnode.png\" style=\"zoom:67%;\" />\n\n\n\n*节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。*\n\n<br>\n\n\n\n# 部署calico\n\n## 下载calico\n\n```bash\n# 下载calico的yaml文件\ncurl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml\n```\n\n\n\n## 部署calico\n\n修改calico.yaml：\n\n```yaml\n# 修改为pod网段\n- name: CALICO_IPV4POOL_CIDR\n  value: \"172.21.0.0/16\"\n  \n# 增加该参数，设定端口范围\n- name: FELIX_KUBENODEPORTRANGES\n  value: \"30000:50000\"\n```\n\n\n\n部署calico：\n\n```bash\nkubectl apply -f calico.yaml\n```\n\n\n\n部署完成后，查看节点状态，应该都READY：\n\n```bash\nkubectl get node\n```\n\n<img src=\"./nodes.png\" style=\"zoom:50%;\" />\n\n\n\n## 设置calico命令行工具\n\n下载calico命令行工具：\n\n```bash\n# 下载\ncurl -L -o /usr/local/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64\n\n# 配置\nmkdir -p /etc/calico\ncat > /etc/calico/calicoctl.cfg <<EOF\napiVersion: projectcalico.org/v3\nkind: CalicoAPIConfig\nmetadata:\nspec:\n  datastoreType: kubernetes\n  kubeconfig: /etc/kubernetes/admin.conf  # 使用 admin 配置\n  #k8sAPIEndpoint: https://10.8.138.12:6443\n  #k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt\n  #k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key\n  #k8sCAFile: /etc/kubernetes/pki/ca.crt\nEOF\n```\n\n\n\n## 查看calico节点\n\n```bash\ncalicoctl node status\n```\n\n<img src=\"./calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n## 查看ippool\n\n```bash\ncalicoctl get ippool -o wide\n\nNAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR\ndefault-ipv4-ippool   172.21.0.0/16   true   Always     Never       false      all()\n```\n\n\n\n## 查看ip状态\n\n```bash\ncalicoctl ipam show\n```\n\n![](./calico-ip.png)\n\n<br>\n\n\n\n# 集群校验\n\n```bash\nkubectl config get-clusters\nkubectl cluster-info\n```\n\n![](./cluster-check.png)\n\n\n\n<br>\n\n\n\n# nginx服务其配置\n\n`SCA-LUM700011`作为nginx服务器，将会代理ingress服务，所以先设置一下。\n\n\n\n## 自签证书\n\n```bash\n# 确认安装了openssl\nopenssl version\n\n# 确定nginx安装了https模块(应该有--with-http_ssl_module)\nnginx -V\n\n# 创建整数目录\ncd /etc/nginx/\nmkdir ssl\ncd ssl\n\n# 生成秘钥\nopenssl genrsa -out nginx.key 2048\nGenerating RSA private key, 2048 bit long modulus\n..............................................+++\n.....................................................................+++\ne is 65537 (0x10001)\n\n# 生成签名请求文件（csr），输入上边的密码，并输入相关的信息\nopenssl req -new -key nginx.key -out nginx.csr\n\n# 也可以在一行，不用交互式输入\nopenssl req -subj \"/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com\" -new -key nginx.key -out nginx.csr\n\n# 生成自签名证书，指定过期时间3650天，输入密码即可生成\nopenssl x509 -req -days 3650 -in nginx.csr -signkey nginx.key -out nginx.crt\n\n# 查看生成的文件\n$ ls\nnginx.crt  nginx.csr  nginx.key\n```\n\n\n\n## 修改nginx主配置文件\n\n修改`/etc/nginx/nginx.conf`文件为如下内容：\n\n```nginx\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n\n\n这里使用`include`导入其他的配置文件，所有服务的nginx配置都放在`/etc/nginx/conf.d`下，如果目录不存在需要自己创建。\n\n\n\n在``/etc/nginx/conf.d`下先创建一个通用配置文件`common.ini`，这个是所有配置文件都要用的，所以抽离出来：\n\n```nginx\nlocation = /favicon.ico {\n    log_not_found off;\n    access_log off;\n}\n\nlocation ~* /\\.(svn|git)/ {\n    return 404;\n}\n```\n\n\n\n### 创建一个测试配置\n\n在`/etc/nginx/conf.d`下新建一个配置文件`https.conf`：\n\n```nginx\nserver {\n  listen 80;\n  server_name https-server.example.com;\n\n  rewrite ^(.*) https://$host$1 permanent;\n\n}\n\nserver {\n    listen 443 ssl;\n    server_name https-server.example.com;\n\n    ssl_certificate /etc/nginx/ssl/new/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/new/nginx.key;\n\n    access_log /var/log/nginx/https-server.example.com_access.log main;\n    error_log /var/log/nginx/https-server.example.com_error.log;\n\n    location / {\n      root /usr/share/nginx/html;\n      index index.html index.htm;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n在`/usr/share/nginx/html`下创建测试页面：\n\n```bash\n$ echo \"this is https page\" > /usr/share/nginx/html/index.html\n```\n\n\n\n### 绑定host\n\n因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。\n\n\n\n### 重启nginx并访问\n\n执行下面的命令检查配置并重新加载：\n\n```bash\nnginx -t\nnginx -s reload \n```\n\n\n\n然后通过浏览器访问域名：`https-server.example.com`，应该就可以看到设置的https页面了。\n\n> 注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。\n\n\n\n","slug":"kubeadm部署k8s-1-18集群","published":1,"updated":"2021-03-28T07:03:40.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de6v005lp0kl5qhfd7ob","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了通过kubeadm部署3master节点高可用k8s 1.17.3集群 </p><p>更新于 2021-03-28</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h1><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SCA-LUM700011</td>\n<td align=\"center\">10.8.138.8</td>\n<td align=\"center\">nginx+nfs+运维节点</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700007</td>\n<td align=\"center\">10.8.138.5</td>\n<td align=\"center\">master-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700008</td>\n<td align=\"center\">10.8.138.6</td>\n<td align=\"center\">Master-2</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700012</td>\n<td align=\"center\">10.8.138.10</td>\n<td align=\"center\">Master-3</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700013</td>\n<td align=\"center\">10.8.138.9</td>\n<td align=\"center\">Node-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700014</td>\n<td align=\"center\">10.8.138.11</td>\n<td align=\"center\">node-2</td>\n</tr>\n</tbody></table>\n<p>操作系统<code>centos7.6</code>，前端还有一个elb，地址为<code>10.8.138.12</code>，代理master的apiserver。kube-proxy使用<code>ipvs</code>模式，集群使用<code>1.17.3</code>版本</p>\n<br>\n\n\n\n<h1 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装nfs</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装nginx</button></li><li class=\"tab\"><button data-href=\"#comments-3\">安装ansible</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>nfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在<code>SCA-LUM700011</code>这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.xfs /dev/vdb -f</span><br><span class=\"line\">mkdir -p /data/nfs-data</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/dev/vdb /data/nfs-data xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装nfs相关服务并启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils rpcbind</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/data/nfs-data *(rw,no_root_squash)&quot;</span> &gt;&gt; /etc/exports</span><br><span class=\"line\">systemctl start rpcbind</span><br><span class=\"line\">systemctl status rpcbind</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">systemctl start nfs </span><br><span class=\"line\">systemctl status nfs</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在集群的每一个节点上执行下面的命令安装<code>nfs-utils</code>工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>nginx将作为一个代理，代理集群中的服务，这里使用yum方式安装nginx。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加yum源</span></span><br><span class=\"line\">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[nginx-stable]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx stable repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[nginx-mainline]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx mainline repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装nginx</span></span><br><span class=\"line\">yum install -y nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systenctl status nginx</span><br><span class=\"line\">systenctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p><code>ansible</code>可以方便批量执行指令，首先在<code>SCA-LUM700011</code>这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id 10.8.138.5</span><br><span class=\"line\">ssh-copy-id 10.8.138.6</span><br><span class=\"line\">ssh-copy-id 10.8.138.10</span><br><span class=\"line\">ssh-copy-id 10.8.138.9</span><br><span class=\"line\">ssh-copy-id 10.8.138.11</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装ansible：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y ansible</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置配置文件</span></span><br><span class=\"line\">cat &gt; /etc/ansible/ansible.cfg &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[defaults]</span></span><br><span class=\"line\"><span class=\"string\">log_path = /var/log/ansible.log</span></span><br><span class=\"line\"><span class=\"string\">forks = 20</span></span><br><span class=\"line\"><span class=\"string\">host_key_checking = False</span></span><br><span class=\"line\"><span class=\"string\">retry_files_enabled = False</span></span><br><span class=\"line\"><span class=\"string\">deprecation_warnings = False</span></span><br><span class=\"line\"><span class=\"string\">nocows = True</span></span><br><span class=\"line\"><span class=\"string\">remote_user = root</span></span><br><span class=\"line\"><span class=\"string\">roles_path = roles/</span></span><br><span class=\"line\"><span class=\"string\">gathering = smart</span></span><br><span class=\"line\"><span class=\"string\">fact_caching = jsonfile</span></span><br><span class=\"line\"><span class=\"string\">fact_caching_connection = /etc/ansible/facts</span></span><br><span class=\"line\"><span class=\"string\">fact_caching_timeout = 600</span></span><br><span class=\"line\"><span class=\"string\">callback_whitelist = profile_tasks</span></span><br><span class=\"line\"><span class=\"string\">inventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini</span></span><br><span class=\"line\"><span class=\"string\">timeout = 30</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[inventory]</span></span><br><span class=\"line\"><span class=\"string\">unparsed_is_failed=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[ssh_connection]</span></span><br><span class=\"line\"><span class=\"string\">pipelining = True</span></span><br><span class=\"line\"><span class=\"string\">ssh_args = -o ControlMaster=auto -o ControlPersist=600s</span></span><br><span class=\"line\"><span class=\"string\">timeout = 10</span></span><br><span class=\"line\"><span class=\"string\">control_path = %(directory)s/%%h-%%r</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置host文件</span></span><br><span class=\"line\">cat &gt; /etc/ansible/hosts &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[cluster]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5  hostname=&#x27;SCA-LUM700007&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6  hostname=&#x27;SCA-LUM700008&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10 hostname=&#x27;SCA-LUM700012&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9  hostname=&#x27;SCA-LUM700013&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11 hostname=&#x27;SCA-LUM700014&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[ans]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.8</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[master]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[worker]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查ansible</span></span><br><span class=\"line\">ansible cluster -m ping </span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./ansible-check.png\" style=\"zoom:40%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n\n\n<br>\n\n<h1 id=\"内核优化\"><a href=\"#内核优化\" class=\"headerlink\" title=\"内核优化\"></a>内核优化</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">升级内核版本</button></li><li class=\"tab\"><button data-href=\"#comments-2\">设置内核参数</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p><strong>注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 载入公钥</span></span><br><span class=\"line\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 ELRepo 最新版本</span></span><br><span class=\"line\">yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出可以使用的 kernel 包版本</span></span><br><span class=\"line\">yum list available --disablerepo=* --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装内核</span></span><br><span class=\"line\">yum install -y kernel-lt-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可用内核</span></span><br><span class=\"line\">cat /boot/grub2/grub.cfg | grep menuentry</span><br><span class=\"line\"></span><br><span class=\"line\">menuentry <span class=\"string\">&#x27;CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)&#x27;</span> --class centos （略）</span><br><span class=\"line\">menuentry <span class=\"string\">&#x27;CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)&#x27;</span> --class centos ...（略）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置从新的内核起动</span></span><br><span class=\"line\">grub2-set-default <span class=\"string\">&quot;CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核启动项</span></span><br><span class=\"line\">grub2-editenv list</span><br><span class=\"line\"></span><br><span class=\"line\">saved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/k8s.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">fs.file-max=6815744</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_tw_recycle=0</span></span><br><span class=\"line\"><span class=\"string\">vm.swappiness=0</span></span><br><span class=\"line\"><span class=\"string\">vm.panic_on_oom=0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 当内核维护的arp表过于庞大时候，可以考虑优化</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.neigh.default.gc_thresh1=1024</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.neigh.default.gc_thresh2=4096</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.neigh.default.gc_thresh3=8192</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># netfilter优化</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_max=10485760</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_tcp_timeout_established=300</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_buckets=655360</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">net.core.netdev_max_backlog=10000</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_instances=524288</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_watches=524288</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>fs.file-max</code>表示系统级别最大文件句柄数量；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh1</code>表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh2</code>保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh3</code>保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；</li>\n<li><code>net.netfilter.nf_conntrack_max</code>内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；</li>\n<li><code>net.netfilter.nf_conntrack_buckets</code>哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;</li>\n<li><code>net.core.netdev_max_backlog</code>网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；</li>\n<li><code>fs.inotify.max_user_instances</code>默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；</li>\n<li><code>fs.inotify.max_user_watches</code>默认值: 8192 指定了每个inotify instance相关联的watches的上限；</li>\n</ul>\n<p>执行下面的命令在每个节点生效配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;sysctl -p /etc/sysctl.d/k8s.conf&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;echo &quot;/sbin/sysctl -p /etc/sysctl.d/k8s.conf&quot; &gt;&gt; /etc/rc.local&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署前准备\"><a href=\"#部署前准备\" class=\"headerlink\" title=\"部署前准备\"></a>部署前准备</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">设置host</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装docker</button></li><li class=\"tab\"><button data-href=\"#comments-3\">关闭swap</button></li><li class=\"tab\"><button data-href=\"#comments-4\">开启ipvs</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>通过<code>ansible</code>为每个节点设置host文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5  SCA-LUM700007 sca-lum700007 master1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6  SCA-LUM700008 sca-lum700008 master2</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10 SCA-LUM700012 sca-lum700012 master3</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9  SCA-LUM700013 sca-lum700013 node1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11 SCA-LUM700014 sca-lum700014 node2</span></span><br><span class=\"line\"><span class=\"string\">EOF&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><strong>需要给集群所有的节点安装docker</strong></p>\n<p>首先添加repo文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置存储目录，一般docker的数据存放路径为<code>/var/lib/docker</code>，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/lib/docker</span><br><span class=\"line\">mkfs.xfs -f /dev/vdb</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/dev/vdb /var/lib/docker xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前可用的版本</span></span><br><span class=\"line\">yum list docker-ce --showduplicates|sort -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装docker</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;yum install -y docker-ce-18.06.3.ce-3.el7&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; daemon.json &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-opts&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;max-size&quot;: &quot;100m&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;max-file&quot;: &quot;5&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发到集群节点</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;mkdir /etc/docker&#x27;</span></span><br><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=daemon.json dest=/etc/docker/daemon.json&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl daemon-reload&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl restart docker&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl status docker&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl enable docker&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;swapoff -a&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;sed -i &quot;/swap/s/^/#/g&quot; /etc/fstab&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><p>本集群的service网络采用ipvs模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置内核参数</span></span><br><span class=\"line\">ansible cluster -m sysctl -a <span class=\"string\">&#x27;name=net.ipv4.ip_forward value=1 state=present&#x27;</span></span><br><span class=\"line\">ansible cluster -m sysctl -a <span class=\"string\">&#x27;name=net.bridge.bridge-nf-call-iptables value=1 state=present&#x27;</span></span><br><span class=\"line\">ansible cluster -m sysctl -a <span class=\"string\">&#x27;name=net.bridge.bridge-nf-call-ip6tables value=1 state=present&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载ipvs模块</span></span><br><span class=\"line\">cat &gt; /tmp/ipvs.modules &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&quot;</span></span><br><span class=\"line\"><span class=\"string\">for kernel_module in \\$&#123;ipvs_modules&#125;; do</span></span><br><span class=\"line\"><span class=\"string\">    /sbin/modinfo -F filename \\$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1</span></span><br><span class=\"line\"><span class=\"string\">    if [ $? -eq 0 ]; then</span></span><br><span class=\"line\"><span class=\"string\">        /sbin/modprobe \\$&#123;kernel_module&#125;</span></span><br><span class=\"line\"><span class=\"string\">    fi</span></span><br><span class=\"line\"><span class=\"string\">done</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;sh /root/ipvs.modules&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动执行该脚本</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;echo &quot;sh /root/ipvs.modules&quot; &gt;&gt; /etc/rc.local&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 ipvs 支持</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;lsmod | grep ip_vs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装ipvsadm</span></span><br><span class=\"line\">ansible cluster -m yum -a <span class=\"string\">&#x27;name=ipvsadm state=present&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装基础服务\"><a href=\"#安装基础服务\" class=\"headerlink\" title=\"安装基础服务\"></a>安装基础服务</h1><h2 id=\"添加yum源\"><a href=\"#添加yum源\" class=\"headerlink\" title=\"添加yum源\"></a>添加yum源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发文件</span></span><br><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装kubelet、kubectl、kubeadm\"><a href=\"#安装kubelet、kubectl、kubeadm\" class=\"headerlink\" title=\"安装kubelet、kubectl、kubeadm\"></a>安装kubelet、kubectl、kubeadm</h2><p>这里安装的是<code>1.17.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装kubectl、kubeadm、kubelet</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;ls /usr/bin/kube*&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置kubelet自启动</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl enable kubelet&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署master节点\"><a href=\"#部署master节点\" class=\"headerlink\" title=\"部署master节点\"></a>部署master节点</h1><p>这一步在任意一个master上执行，这里我在<code>master1</code>上执行。需要配置下kubeadm的相关参数。</p>\n<h2 id=\"配置kubeadm参数\"><a href=\"#配置kubeadm参数\" class=\"headerlink\" title=\"配置kubeadm参数\"></a>配置kubeadm参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; kubeadm-config.yaml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"string\">kind: InitConfiguration</span></span><br><span class=\"line\"><span class=\"string\">localAPIEndpoint:</span></span><br><span class=\"line\"><span class=\"string\">  advertiseAddress: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">  bindPort: 6443</span></span><br><span class=\"line\"><span class=\"string\">nodeRegistration:</span></span><br><span class=\"line\"><span class=\"string\">  criSocket: /var/run/dockershim.sock</span></span><br><span class=\"line\"><span class=\"string\">  taints:</span></span><br><span class=\"line\"><span class=\"string\">  - effect: NoSchedule</span></span><br><span class=\"line\"><span class=\"string\">    key: node-role.kubernetes.io/master</span></span><br><span class=\"line\"><span class=\"string\">  kubeletExtraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    cgroup-driver: &quot;systemd&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ignorePreflightErrors:</span></span><br><span class=\"line\"><span class=\"string\">  - IsPrivilegedUser</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"string\">controlPlaneEndpoint: 10.8.138.12:6443</span></span><br><span class=\"line\"><span class=\"string\">certificatesDir: /etc/kubernetes/pki</span></span><br><span class=\"line\"><span class=\"string\">clusterName: kubernetes</span></span><br><span class=\"line\"><span class=\"string\">apiServer:</span></span><br><span class=\"line\"><span class=\"string\">  timeoutForControlPlane: 5m0s</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    authorization-mode: &quot;Node,RBAC&quot;</span></span><br><span class=\"line\"><span class=\"string\">  certSANs:</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;10.8.138.12&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;14.116.177.22&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default.svc&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default.svc.cluster&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\"><span class=\"string\">controllerManager:</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;node-cidr-mask-size&quot;: &quot;20&quot;</span></span><br><span class=\"line\"><span class=\"string\">scheduler:</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    address: &quot;0.0.0.0&quot;</span></span><br><span class=\"line\"><span class=\"string\">dns:</span></span><br><span class=\"line\"><span class=\"string\">  type: CoreDNS</span></span><br><span class=\"line\"><span class=\"string\">etcd:</span></span><br><span class=\"line\"><span class=\"string\">  local:</span></span><br><span class=\"line\"><span class=\"string\">    dataDir: /var/lib/etcd</span></span><br><span class=\"line\"><span class=\"string\">#    extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">#      listen-client-urls: &quot;http://10.100.0.1:2379&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span></span><br><span class=\"line\"><span class=\"string\">kubernetesVersion: v1.17.3</span></span><br><span class=\"line\"><span class=\"string\">networking:</span></span><br><span class=\"line\"><span class=\"string\">  dnsDomain: cluster.local</span></span><br><span class=\"line\"><span class=\"string\">  serviceSubnet: 172.24.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">  podSubnet: 172.21.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"string\">bindAddress: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">#clusterCIDR:</span></span><br><span class=\"line\"><span class=\"string\">mode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。</span></span><br><span class=\"line\"><span class=\"string\">ipvs:</span></span><br><span class=\"line\"><span class=\"string\">  scheduler: lc</span></span><br><span class=\"line\"><span class=\"string\">  syncPeriod: 30s</span></span><br><span class=\"line\"><span class=\"string\">  minSyncPeriod: 5s</span></span><br><span class=\"line\"><span class=\"string\">  tcpTimeout: 0s</span></span><br><span class=\"line\"><span class=\"string\">  tcpFinTimeout: 0s</span></span><br><span class=\"line\"><span class=\"string\">  udpTimeout: 0s</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中<code>10.8.138.12</code>为我前端slb的IP地址，代理后端三个master节点的6443；</li>\n<li>根据实际情况在<code>certSANs</code>中添加IP和域名；</li>\n<li>注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）</li>\n</ul>\n<h2 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h2><p>下面的命令可以验证配置是否有误，并不会真正执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs --dry-run</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建集群\"><a href=\"#创建集群\" class=\"headerlink\" title=\"创建集群\"></a>创建集群</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建集群</span></span><br><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行成功的话，会出现下面的信息：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"./kubeadm-init.png\" alt=\"\"></p>\n<p>从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加master</span></span><br><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加node节点</span></span><br><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令中的token有两个小时时效，时效后需要重新获取</p>\n</blockquote>\n<h2 id=\"添加其他的master节点\"><a href=\"#添加其他的master节点\" class=\"headerlink\" title=\"添加其他的master节点\"></a>添加其他的master节点</h2><p>在剩下的两个master节点<code>SCA-LUM700008</code>和<code>SCA-LUM700012</code>执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver去配置信息；</p>\n</blockquote>\n<h2 id=\"设置kubectl\"><a href=\"#设置kubectl\" class=\"headerlink\" title=\"设置kubectl\"></a>设置kubectl</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动补全</span></span><br><span class=\"line\">ansible master -m shell -a <span class=\"string\">&#x27;echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置kubectl证书</span></span><br><span class=\"line\">cp /etc/kubernetes/admin.conf /root/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"验证master部署情况\"><a href=\"#验证master部署情况\" class=\"headerlink\" title=\"验证master部署情况\"></a>验证master部署情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看master</span></span><br><span class=\"line\">kubectl get node --kubeconfig /etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">kubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"check-master.png\" alt=\"\"></p>\n<blockquote>\n<p>这里有些pod没有启动是正常的，因为集群还没部署完成。</p>\n</blockquote>\n<h2 id=\"确认kubeproxy开启了ipvs\"><a href=\"#确认kubeproxy开启了ipvs\" class=\"headerlink\" title=\"确认kubeproxy开启了ipvs\"></a>确认kubeproxy开启了ipvs</h2><p>首先查看网卡信息，多了一个kube-ipvs0网卡：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip a s</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n<p>查看ipvs规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./ipvs-rule.png\" style=\"zoom:40%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"部署etcd\"><a href=\"#部署etcd\" class=\"headerlink\" title=\"部署etcd\"></a>部署etcd</h1><h2 id=\"更新etcd配置\"><a href=\"#更新etcd配置\" class=\"headerlink\" title=\"更新etcd配置\"></a>更新etcd配置</h2><p>更新后会自动重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible master -m shell -a <span class=\"string\">&#x27;sed -i &quot;/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380&quot; /etc/kubernetes/manifests/etcd.yaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。</span></span><br><span class=\"line\">ansible master -m shell -a <span class=\"string\">&#x27;sed -i &quot;/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379&quot; /etc/kubernetes/manifests/kube-apiserver.yaml&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看etcd节点状态\"><a href=\"#查看etcd节点状态\" class=\"headerlink\" title=\"查看etcd节点状态\"></a>查看etcd节点状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载etcdctl</span></span><br><span class=\"line\">curl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">tar xzf etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">mv etcd-v3.4.3-linux-amd64/etcd* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">ETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./etcd-member.png\" alt=\"\"></p>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./etcd-cluster.png\" alt=\"\"></p>\n<h2 id=\"etcd节点健康状态\"><a href=\"#etcd节点健康状态\" class=\"headerlink\" title=\"etcd节点健康状态\"></a>etcd节点健康状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./etcd-helth.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"部署node节点\"><a href=\"#部署node节点\" class=\"headerlink\" title=\"部署node节点\"></a>部署node节点</h1><p>在所有node节点上执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node </span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./getnode.png\" style=\"zoom:67%;\" />\n\n\n\n<p><em>节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。</em></p>\n<br>\n\n\n\n<h1 id=\"部署calico\"><a href=\"#部署calico\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h1><h2 id=\"下载calico\"><a href=\"#下载calico\" class=\"headerlink\" title=\"下载calico\"></a>下载calico</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载calico的yaml文件</span></span><br><span class=\"line\">curl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"部署calico-1\"><a href=\"#部署calico-1\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h2><p>修改calico.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改为pod网段</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CALICO_IPV4POOL_CIDR</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">&quot;172.21.0.0/16&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 增加该参数，设定端口范围</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">FELIX_KUBENODEPORTRANGES</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">&quot;30000:50000&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署calico：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署完成后，查看节点状态，应该都READY：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./nodes.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"设置calico命令行工具\"><a href=\"#设置calico命令行工具\" class=\"headerlink\" title=\"设置calico命令行工具\"></a>设置calico命令行工具</h2><p>下载calico命令行工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">curl -L -o /usr/<span class=\"built_in\">local</span>/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置</span></span><br><span class=\"line\">mkdir -p /etc/calico</span><br><span class=\"line\">cat &gt; /etc/calico/calicoctl.cfg &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: projectcalico.org/v3</span></span><br><span class=\"line\"><span class=\"string\">kind: CalicoAPIConfig</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  datastoreType: kubernetes</span></span><br><span class=\"line\"><span class=\"string\">  kubeconfig: /etc/kubernetes/admin.conf  # 使用 admin 配置</span></span><br><span class=\"line\"><span class=\"string\">  #k8sAPIEndpoint: https://10.8.138.12:6443</span></span><br><span class=\"line\"><span class=\"string\">  #k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span><br><span class=\"line\"><span class=\"string\">  #k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key</span></span><br><span class=\"line\"><span class=\"string\">  #k8sCAFile: /etc/kubernetes/pki/ca.crt</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看calico节点\"><a href=\"#查看calico节点\" class=\"headerlink\" title=\"查看calico节点\"></a>查看calico节点</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl node status</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"查看ippool\"><a href=\"#查看ippool\" class=\"headerlink\" title=\"查看ippool\"></a>查看ippool</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl get ippool -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR</span><br><span class=\"line\">default-ipv4-ippool   172.21.0.0/16   <span class=\"literal\">true</span>   Always     Never       <span class=\"literal\">false</span>      all()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看ip状态\"><a href=\"#查看ip状态\" class=\"headerlink\" title=\"查看ip状态\"></a>查看ip状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl ipam show</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./calico-ip.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"集群校验\"><a href=\"#集群校验\" class=\"headerlink\" title=\"集群校验\"></a>集群校验</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config get-clusters</span><br><span class=\"line\">kubectl cluster-info</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"./cluster-check.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"nginx服务其配置\"><a href=\"#nginx服务其配置\" class=\"headerlink\" title=\"nginx服务其配置\"></a>nginx服务其配置</h1><p><code>SCA-LUM700011</code>作为nginx服务器，将会代理ingress服务，所以先设置一下。</p>\n<h2 id=\"自签证书\"><a href=\"#自签证书\" class=\"headerlink\" title=\"自签证书\"></a>自签证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确认安装了openssl</span></span><br><span class=\"line\">openssl version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定nginx安装了https模块(应该有--with-http_ssl_module)</span></span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建整数目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">mkdir ssl</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ssl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成秘钥</span></span><br><span class=\"line\">openssl genrsa -out nginx.key 2048</span><br><span class=\"line\">Generating RSA private key, 2048 bit long modulus</span><br><span class=\"line\">..............................................+++</span><br><span class=\"line\">.....................................................................+++</span><br><span class=\"line\">e is 65537 (0x10001)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成签名请求文件（csr），输入上边的密码，并输入相关的信息</span></span><br><span class=\"line\">openssl req -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以在一行，不用交互式输入</span></span><br><span class=\"line\">openssl req -subj <span class=\"string\">&quot;/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com&quot;</span> -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成自签名证书，指定过期时间3650天，输入密码即可生成</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> nginx.csr -signkey nginx.key -out nginx.crt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看生成的文件</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">nginx.crt  nginx.csr  nginx.key</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改nginx主配置文件\"><a href=\"#修改nginx主配置文件\" class=\"headerlink\" title=\"修改nginx主配置文件\"></a>修改nginx主配置文件</h2><p>修改<code>/etc/nginx/nginx.conf</code>文件为如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"literal\">warn</span>;</span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里使用<code>include</code>导入其他的配置文件，所有服务的nginx配置都放在<code>/etc/nginx/conf.d</code>下，如果目录不存在需要自己创建。</p>\n<p>在``/etc/nginx/conf.d<code>下先创建一个通用配置文件</code>common.ini`，这个是所有配置文件都要用的，所以抽离出来：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">    <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建一个测试配置\"><a href=\"#创建一个测试配置\" class=\"headerlink\" title=\"创建一个测试配置\"></a>创建一个测试配置</h3><p>在<code>/etc/nginx/conf.d</code>下新建一个配置文件<code>https.conf</code>：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/new/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/new/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/https-server.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/https-server.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在<code>/usr/share/nginx/html</code>下创建测试页面：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;this is https page&quot;</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绑定host\"><a href=\"#绑定host\" class=\"headerlink\" title=\"绑定host\"></a>绑定host</h3><p>因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。</p>\n<h3 id=\"重启nginx并访问\"><a href=\"#重启nginx并访问\" class=\"headerlink\" title=\"重启nginx并访问\"></a>重启nginx并访问</h3><p>执行下面的命令检查配置并重新加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload </span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后通过浏览器访问域名：<code>https-server.example.com</code>，应该就可以看到设置的https页面了。</p>\n<blockquote>\n<p>注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了通过kubeadm部署3master节点高可用k8s 1.17.3集群 </p><p>更新于 2021-03-28</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h1><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SCA-LUM700011</td>\n<td align=\"center\">10.8.138.8</td>\n<td align=\"center\">nginx+nfs+运维节点</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700007</td>\n<td align=\"center\">10.8.138.5</td>\n<td align=\"center\">master-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700008</td>\n<td align=\"center\">10.8.138.6</td>\n<td align=\"center\">Master-2</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700012</td>\n<td align=\"center\">10.8.138.10</td>\n<td align=\"center\">Master-3</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700013</td>\n<td align=\"center\">10.8.138.9</td>\n<td align=\"center\">Node-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700014</td>\n<td align=\"center\">10.8.138.11</td>\n<td align=\"center\">node-2</td>\n</tr>\n</tbody></table>\n<p>操作系统<code>centos7.6</code>，前端还有一个elb，地址为<code>10.8.138.12</code>，代理master的apiserver。kube-proxy使用<code>ipvs</code>模式，集群使用<code>1.17.3</code>版本</p>\n<br>\n\n\n\n<h1 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装nfs</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装nginx</button></li><li class=\"tab\"><button data-href=\"#comments-3\">安装ansible</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>nfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在<code>SCA-LUM700011</code>这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.xfs /dev/vdb -f</span><br><span class=\"line\">mkdir -p /data/nfs-data</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/dev/vdb /data/nfs-data xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装nfs相关服务并启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils rpcbind</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/data/nfs-data *(rw,no_root_squash)&quot;</span> &gt;&gt; /etc/exports</span><br><span class=\"line\">systemctl start rpcbind</span><br><span class=\"line\">systemctl status rpcbind</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">systemctl start nfs </span><br><span class=\"line\">systemctl status nfs</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在集群的每一个节点上执行下面的命令安装<code>nfs-utils</code>工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nfs-utils </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>nginx将作为一个代理，代理集群中的服务，这里使用yum方式安装nginx。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加yum源</span></span><br><span class=\"line\">cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[nginx-stable]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx stable repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[nginx-mainline]</span></span><br><span class=\"line\"><span class=\"string\">name=nginx mainline repo</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=1</span></span><br><span class=\"line\"><span class=\"string\">enabled=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class=\"line\"><span class=\"string\">module_hotfixes=true</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装nginx</span></span><br><span class=\"line\">yum install -y nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">nginx -v</span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systenctl status nginx</span><br><span class=\"line\">systenctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p><code>ansible</code>可以方便批量执行指令，首先在<code>SCA-LUM700011</code>这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id 10.8.138.5</span><br><span class=\"line\">ssh-copy-id 10.8.138.6</span><br><span class=\"line\">ssh-copy-id 10.8.138.10</span><br><span class=\"line\">ssh-copy-id 10.8.138.9</span><br><span class=\"line\">ssh-copy-id 10.8.138.11</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装ansible：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y ansible</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置配置文件</span></span><br><span class=\"line\">cat &gt; /etc/ansible/ansible.cfg &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[defaults]</span></span><br><span class=\"line\"><span class=\"string\">log_path = /var/log/ansible.log</span></span><br><span class=\"line\"><span class=\"string\">forks = 20</span></span><br><span class=\"line\"><span class=\"string\">host_key_checking = False</span></span><br><span class=\"line\"><span class=\"string\">retry_files_enabled = False</span></span><br><span class=\"line\"><span class=\"string\">deprecation_warnings = False</span></span><br><span class=\"line\"><span class=\"string\">nocows = True</span></span><br><span class=\"line\"><span class=\"string\">remote_user = root</span></span><br><span class=\"line\"><span class=\"string\">roles_path = roles/</span></span><br><span class=\"line\"><span class=\"string\">gathering = smart</span></span><br><span class=\"line\"><span class=\"string\">fact_caching = jsonfile</span></span><br><span class=\"line\"><span class=\"string\">fact_caching_connection = /etc/ansible/facts</span></span><br><span class=\"line\"><span class=\"string\">fact_caching_timeout = 600</span></span><br><span class=\"line\"><span class=\"string\">callback_whitelist = profile_tasks</span></span><br><span class=\"line\"><span class=\"string\">inventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini</span></span><br><span class=\"line\"><span class=\"string\">timeout = 30</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[inventory]</span></span><br><span class=\"line\"><span class=\"string\">unparsed_is_failed=true</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[ssh_connection]</span></span><br><span class=\"line\"><span class=\"string\">pipelining = True</span></span><br><span class=\"line\"><span class=\"string\">ssh_args = -o ControlMaster=auto -o ControlPersist=600s</span></span><br><span class=\"line\"><span class=\"string\">timeout = 10</span></span><br><span class=\"line\"><span class=\"string\">control_path = %(directory)s/%%h-%%r</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置host文件</span></span><br><span class=\"line\">cat &gt; /etc/ansible/hosts &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[cluster]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5  hostname=&#x27;SCA-LUM700007&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6  hostname=&#x27;SCA-LUM700008&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10 hostname=&#x27;SCA-LUM700012&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9  hostname=&#x27;SCA-LUM700013&#x27;</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11 hostname=&#x27;SCA-LUM700014&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[ans]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.8</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[master]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[worker]</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查ansible</span></span><br><span class=\"line\">ansible cluster -m ping </span><br></pre></td></tr></table></figure>\n\n<img src=\"./ansible-check.png\" style=\"zoom:40%;\" /><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n\n\n<br>\n\n<h1 id=\"内核优化\"><a href=\"#内核优化\" class=\"headerlink\" title=\"内核优化\"></a>内核优化</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">升级内核版本</button></li><li class=\"tab\"><button data-href=\"#comments-2\">设置内核参数</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p><strong>注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 载入公钥</span></span><br><span class=\"line\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 ELRepo 最新版本</span></span><br><span class=\"line\">yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出可以使用的 kernel 包版本</span></span><br><span class=\"line\">yum list available --disablerepo=* --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装内核</span></span><br><span class=\"line\">yum install -y kernel-lt-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可用内核</span></span><br><span class=\"line\">cat /boot/grub2/grub.cfg | grep menuentry</span><br><span class=\"line\"></span><br><span class=\"line\">menuentry <span class=\"string\">&#x27;CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)&#x27;</span> --class centos （略）</span><br><span class=\"line\">menuentry <span class=\"string\">&#x27;CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)&#x27;</span> --class centos ...（略）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置从新的内核起动</span></span><br><span class=\"line\">grub2-set-default <span class=\"string\">&quot;CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核启动项</span></span><br><span class=\"line\">grub2-editenv list</span><br><span class=\"line\"></span><br><span class=\"line\">saved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/k8s.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">fs.file-max=6815744</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables=1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.ip_forward=1</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.tcp_tw_recycle=0</span></span><br><span class=\"line\"><span class=\"string\">vm.swappiness=0</span></span><br><span class=\"line\"><span class=\"string\">vm.panic_on_oom=0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 当内核维护的arp表过于庞大时候，可以考虑优化</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.neigh.default.gc_thresh1=1024</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.neigh.default.gc_thresh2=4096</span></span><br><span class=\"line\"><span class=\"string\">net.ipv4.neigh.default.gc_thresh3=8192</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># netfilter优化</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_max=10485760</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_tcp_timeout_established=300</span></span><br><span class=\"line\"><span class=\"string\">net.netfilter.nf_conntrack_buckets=655360</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">net.core.netdev_max_backlog=10000</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_instances=524288</span></span><br><span class=\"line\"><span class=\"string\">fs.inotify.max_user_watches=524288</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>fs.file-max</code>表示系统级别最大文件句柄数量；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh1</code>表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh2</code>保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh3</code>保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；</li>\n<li><code>net.netfilter.nf_conntrack_max</code>内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；</li>\n<li><code>net.netfilter.nf_conntrack_buckets</code>哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;</li>\n<li><code>net.core.netdev_max_backlog</code>网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；</li>\n<li><code>fs.inotify.max_user_instances</code>默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；</li>\n<li><code>fs.inotify.max_user_watches</code>默认值: 8192 指定了每个inotify instance相关联的watches的上限；</li>\n</ul>\n<p>执行下面的命令在每个节点生效配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;sysctl -p /etc/sysctl.d/k8s.conf&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;echo &quot;/sbin/sysctl -p /etc/sysctl.d/k8s.conf&quot; &gt;&gt; /etc/rc.local&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署前准备\"><a href=\"#部署前准备\" class=\"headerlink\" title=\"部署前准备\"></a>部署前准备</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">设置host</button></li><li class=\"tab\"><button data-href=\"#comments-2\">安装docker</button></li><li class=\"tab\"><button data-href=\"#comments-3\">关闭swap</button></li><li class=\"tab\"><button data-href=\"#comments-4\">开启ipvs</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>通过<code>ansible</code>为每个节点设置host文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5  SCA-LUM700007 sca-lum700007 master1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6  SCA-LUM700008 sca-lum700008 master2</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10 SCA-LUM700012 sca-lum700012 master3</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9  SCA-LUM700013 sca-lum700013 node1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11 SCA-LUM700014 sca-lum700014 node2</span></span><br><span class=\"line\"><span class=\"string\">EOF&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><strong>需要给集群所有的节点安装docker</strong></p>\n<p>首先添加repo文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置存储目录，一般docker的数据存放路径为<code>/var/lib/docker</code>，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /var/lib/docker</span><br><span class=\"line\">mkfs.xfs -f /dev/vdb</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/dev/vdb /var/lib/docker xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">mount -a</span><br><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前可用的版本</span></span><br><span class=\"line\">yum list docker-ce --showduplicates|sort -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装docker</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;yum install -y docker-ce-18.06.3.ce-3.el7&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; daemon.json &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;log-opts&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;max-size&quot;: &quot;100m&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;max-file&quot;: &quot;5&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发到集群节点</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;mkdir /etc/docker&#x27;</span></span><br><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=daemon.json dest=/etc/docker/daemon.json&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl daemon-reload&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl restart docker&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl status docker&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl enable docker&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;swapoff -a&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;sed -i &quot;/swap/s/^/#/g&quot; /etc/fstab&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><p>本集群的service网络采用ipvs模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置内核参数</span></span><br><span class=\"line\">ansible cluster -m sysctl -a <span class=\"string\">&#x27;name=net.ipv4.ip_forward value=1 state=present&#x27;</span></span><br><span class=\"line\">ansible cluster -m sysctl -a <span class=\"string\">&#x27;name=net.bridge.bridge-nf-call-iptables value=1 state=present&#x27;</span></span><br><span class=\"line\">ansible cluster -m sysctl -a <span class=\"string\">&#x27;name=net.bridge.bridge-nf-call-ip6tables value=1 state=present&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载ipvs模块</span></span><br><span class=\"line\">cat &gt; /tmp/ipvs.modules &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"string\">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&quot;</span></span><br><span class=\"line\"><span class=\"string\">for kernel_module in \\$&#123;ipvs_modules&#125;; do</span></span><br><span class=\"line\"><span class=\"string\">    /sbin/modinfo -F filename \\$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1</span></span><br><span class=\"line\"><span class=\"string\">    if [ $? -eq 0 ]; then</span></span><br><span class=\"line\"><span class=\"string\">        /sbin/modprobe \\$&#123;kernel_module&#125;</span></span><br><span class=\"line\"><span class=\"string\">    fi</span></span><br><span class=\"line\"><span class=\"string\">done</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755&#x27;</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;sh /root/ipvs.modules&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动执行该脚本</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;echo &quot;sh /root/ipvs.modules&quot; &gt;&gt; /etc/rc.local&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 ipvs 支持</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;lsmod | grep ip_vs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装ipvsadm</span></span><br><span class=\"line\">ansible cluster -m yum -a <span class=\"string\">&#x27;name=ipvsadm state=present&#x27;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装基础服务\"><a href=\"#安装基础服务\" class=\"headerlink\" title=\"安装基础服务\"></a>安装基础服务</h1><h2 id=\"添加yum源\"><a href=\"#添加yum源\" class=\"headerlink\" title=\"添加yum源\"></a>添加yum源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发文件</span></span><br><span class=\"line\">ansible cluster -m copy -a <span class=\"string\">&#x27;src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装kubelet、kubectl、kubeadm\"><a href=\"#安装kubelet、kubectl、kubeadm\" class=\"headerlink\" title=\"安装kubelet、kubectl、kubeadm\"></a>安装kubelet、kubectl、kubeadm</h2><p>这里安装的是<code>1.17.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装kubectl、kubeadm、kubelet</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;ls /usr/bin/kube*&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置kubelet自启动</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">&#x27;systemctl enable kubelet&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署master节点\"><a href=\"#部署master节点\" class=\"headerlink\" title=\"部署master节点\"></a>部署master节点</h1><p>这一步在任意一个master上执行，这里我在<code>master1</code>上执行。需要配置下kubeadm的相关参数。</p>\n<h2 id=\"配置kubeadm参数\"><a href=\"#配置kubeadm参数\" class=\"headerlink\" title=\"配置kubeadm参数\"></a>配置kubeadm参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; kubeadm-config.yaml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"string\">kind: InitConfiguration</span></span><br><span class=\"line\"><span class=\"string\">localAPIEndpoint:</span></span><br><span class=\"line\"><span class=\"string\">  advertiseAddress: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">  bindPort: 6443</span></span><br><span class=\"line\"><span class=\"string\">nodeRegistration:</span></span><br><span class=\"line\"><span class=\"string\">  criSocket: /var/run/dockershim.sock</span></span><br><span class=\"line\"><span class=\"string\">  taints:</span></span><br><span class=\"line\"><span class=\"string\">  - effect: NoSchedule</span></span><br><span class=\"line\"><span class=\"string\">    key: node-role.kubernetes.io/master</span></span><br><span class=\"line\"><span class=\"string\">  kubeletExtraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    cgroup-driver: &quot;systemd&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ignorePreflightErrors:</span></span><br><span class=\"line\"><span class=\"string\">  - IsPrivilegedUser</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"string\">controlPlaneEndpoint: 10.8.138.12:6443</span></span><br><span class=\"line\"><span class=\"string\">certificatesDir: /etc/kubernetes/pki</span></span><br><span class=\"line\"><span class=\"string\">clusterName: kubernetes</span></span><br><span class=\"line\"><span class=\"string\">apiServer:</span></span><br><span class=\"line\"><span class=\"string\">  timeoutForControlPlane: 5m0s</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    authorization-mode: &quot;Node,RBAC&quot;</span></span><br><span class=\"line\"><span class=\"string\">  certSANs:</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;10.8.138.12&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;14.116.177.22&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default.svc&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default.svc.cluster&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\"><span class=\"string\">controllerManager:</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;node-cidr-mask-size&quot;: &quot;20&quot;</span></span><br><span class=\"line\"><span class=\"string\">scheduler:</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    address: &quot;0.0.0.0&quot;</span></span><br><span class=\"line\"><span class=\"string\">dns:</span></span><br><span class=\"line\"><span class=\"string\">  type: CoreDNS</span></span><br><span class=\"line\"><span class=\"string\">etcd:</span></span><br><span class=\"line\"><span class=\"string\">  local:</span></span><br><span class=\"line\"><span class=\"string\">    dataDir: /var/lib/etcd</span></span><br><span class=\"line\"><span class=\"string\">#    extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">#      listen-client-urls: &quot;http://10.100.0.1:2379&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span></span><br><span class=\"line\"><span class=\"string\">kubernetesVersion: v1.17.3</span></span><br><span class=\"line\"><span class=\"string\">networking:</span></span><br><span class=\"line\"><span class=\"string\">  dnsDomain: cluster.local</span></span><br><span class=\"line\"><span class=\"string\">  serviceSubnet: 172.24.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">  podSubnet: 172.21.0.0/16</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"string\">bindAddress: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">#clusterCIDR:</span></span><br><span class=\"line\"><span class=\"string\">mode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。</span></span><br><span class=\"line\"><span class=\"string\">ipvs:</span></span><br><span class=\"line\"><span class=\"string\">  scheduler: lc</span></span><br><span class=\"line\"><span class=\"string\">  syncPeriod: 30s</span></span><br><span class=\"line\"><span class=\"string\">  minSyncPeriod: 5s</span></span><br><span class=\"line\"><span class=\"string\">  tcpTimeout: 0s</span></span><br><span class=\"line\"><span class=\"string\">  tcpFinTimeout: 0s</span></span><br><span class=\"line\"><span class=\"string\">  udpTimeout: 0s</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中<code>10.8.138.12</code>为我前端slb的IP地址，代理后端三个master节点的6443；</li>\n<li>根据实际情况在<code>certSANs</code>中添加IP和域名；</li>\n<li>注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）</li>\n</ul>\n<h2 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h2><p>下面的命令可以验证配置是否有误，并不会真正执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs --dry-run</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建集群\"><a href=\"#创建集群\" class=\"headerlink\" title=\"创建集群\"></a>创建集群</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建集群</span></span><br><span class=\"line\">kubeadm init --config=kubeadm-config.yaml --upload-certs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行成功的话，会出现下面的信息：</p>\n<p><img src=\"./kubeadm-init.png\" alt=\"\"></p>\n<p>从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加master</span></span><br><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加node节点</span></span><br><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令中的token有两个小时时效，时效后需要重新获取</p>\n</blockquote>\n<h2 id=\"添加其他的master节点\"><a href=\"#添加其他的master节点\" class=\"headerlink\" title=\"添加其他的master节点\"></a>添加其他的master节点</h2><p>在剩下的两个master节点<code>SCA-LUM700008</code>和<code>SCA-LUM700012</code>执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver去配置信息；</p>\n</blockquote>\n<h2 id=\"设置kubectl\"><a href=\"#设置kubectl\" class=\"headerlink\" title=\"设置kubectl\"></a>设置kubectl</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动补全</span></span><br><span class=\"line\">ansible master -m shell -a <span class=\"string\">&#x27;echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置kubectl证书</span></span><br><span class=\"line\">cp /etc/kubernetes/admin.conf /root/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"验证master部署情况\"><a href=\"#验证master部署情况\" class=\"headerlink\" title=\"验证master部署情况\"></a>验证master部署情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看master</span></span><br><span class=\"line\">kubectl get node --kubeconfig /etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">kubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"check-master.png\" alt=\"\"></p>\n<blockquote>\n<p>这里有些pod没有启动是正常的，因为集群还没部署完成。</p>\n</blockquote>\n<h2 id=\"确认kubeproxy开启了ipvs\"><a href=\"#确认kubeproxy开启了ipvs\" class=\"headerlink\" title=\"确认kubeproxy开启了ipvs\"></a>确认kubeproxy开启了ipvs</h2><p>首先查看网卡信息，多了一个kube-ipvs0网卡：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip a s</span><br></pre></td></tr></table></figure>\n\n<img src=\"./ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n<p>查看ipvs规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n\n<img src=\"./ipvs-rule.png\" style=\"zoom:40%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"部署etcd\"><a href=\"#部署etcd\" class=\"headerlink\" title=\"部署etcd\"></a>部署etcd</h1><h2 id=\"更新etcd配置\"><a href=\"#更新etcd配置\" class=\"headerlink\" title=\"更新etcd配置\"></a>更新etcd配置</h2><p>更新后会自动重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible master -m shell -a <span class=\"string\">&#x27;sed -i &quot;/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380&quot; /etc/kubernetes/manifests/etcd.yaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。</span></span><br><span class=\"line\">ansible master -m shell -a <span class=\"string\">&#x27;sed -i &quot;/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379&quot; /etc/kubernetes/manifests/kube-apiserver.yaml&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看etcd节点状态\"><a href=\"#查看etcd节点状态\" class=\"headerlink\" title=\"查看etcd节点状态\"></a>查看etcd节点状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载etcdctl</span></span><br><span class=\"line\">curl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">tar xzf etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">mv etcd-v3.4.3-linux-amd64/etcd* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">ETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./etcd-member.png\" alt=\"\"></p>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./etcd-cluster.png\" alt=\"\"></p>\n<h2 id=\"etcd节点健康状态\"><a href=\"#etcd节点健康状态\" class=\"headerlink\" title=\"etcd节点健康状态\"></a>etcd节点健康状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./etcd-helth.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"部署node节点\"><a href=\"#部署node节点\" class=\"headerlink\" title=\"部署node节点\"></a>部署node节点</h1><p>在所有node节点上执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node </span><br></pre></td></tr></table></figure>\n\n<img src=\"./getnode.png\" style=\"zoom:67%;\" />\n\n\n\n<p><em>节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。</em></p>\n<br>\n\n\n\n<h1 id=\"部署calico\"><a href=\"#部署calico\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h1><h2 id=\"下载calico\"><a href=\"#下载calico\" class=\"headerlink\" title=\"下载calico\"></a>下载calico</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载calico的yaml文件</span></span><br><span class=\"line\">curl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"部署calico-1\"><a href=\"#部署calico-1\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h2><p>修改calico.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改为pod网段</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CALICO_IPV4POOL_CIDR</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">&quot;172.21.0.0/16&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 增加该参数，设定端口范围</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">FELIX_KUBENODEPORTRANGES</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">&quot;30000:50000&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署calico：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署完成后，查看节点状态，应该都READY：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src=\"./nodes.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"设置calico命令行工具\"><a href=\"#设置calico命令行工具\" class=\"headerlink\" title=\"设置calico命令行工具\"></a>设置calico命令行工具</h2><p>下载calico命令行工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">curl -L -o /usr/<span class=\"built_in\">local</span>/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置</span></span><br><span class=\"line\">mkdir -p /etc/calico</span><br><span class=\"line\">cat &gt; /etc/calico/calicoctl.cfg &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: projectcalico.org/v3</span></span><br><span class=\"line\"><span class=\"string\">kind: CalicoAPIConfig</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">spec:</span></span><br><span class=\"line\"><span class=\"string\">  datastoreType: kubernetes</span></span><br><span class=\"line\"><span class=\"string\">  kubeconfig: /etc/kubernetes/admin.conf  # 使用 admin 配置</span></span><br><span class=\"line\"><span class=\"string\">  #k8sAPIEndpoint: https://10.8.138.12:6443</span></span><br><span class=\"line\"><span class=\"string\">  #k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span><br><span class=\"line\"><span class=\"string\">  #k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key</span></span><br><span class=\"line\"><span class=\"string\">  #k8sCAFile: /etc/kubernetes/pki/ca.crt</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看calico节点\"><a href=\"#查看calico节点\" class=\"headerlink\" title=\"查看calico节点\"></a>查看calico节点</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl node status</span><br></pre></td></tr></table></figure>\n\n<img src=\"./calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"查看ippool\"><a href=\"#查看ippool\" class=\"headerlink\" title=\"查看ippool\"></a>查看ippool</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl get ippool -o wide</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR</span><br><span class=\"line\">default-ipv4-ippool   172.21.0.0/16   <span class=\"literal\">true</span>   Always     Never       <span class=\"literal\">false</span>      all()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看ip状态\"><a href=\"#查看ip状态\" class=\"headerlink\" title=\"查看ip状态\"></a>查看ip状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">calicoctl ipam show</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./calico-ip.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"集群校验\"><a href=\"#集群校验\" class=\"headerlink\" title=\"集群校验\"></a>集群校验</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config get-clusters</span><br><span class=\"line\">kubectl cluster-info</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"./cluster-check.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"nginx服务其配置\"><a href=\"#nginx服务其配置\" class=\"headerlink\" title=\"nginx服务其配置\"></a>nginx服务其配置</h1><p><code>SCA-LUM700011</code>作为nginx服务器，将会代理ingress服务，所以先设置一下。</p>\n<h2 id=\"自签证书\"><a href=\"#自签证书\" class=\"headerlink\" title=\"自签证书\"></a>自签证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确认安装了openssl</span></span><br><span class=\"line\">openssl version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定nginx安装了https模块(应该有--with-http_ssl_module)</span></span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建整数目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">mkdir ssl</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ssl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成秘钥</span></span><br><span class=\"line\">openssl genrsa -out nginx.key 2048</span><br><span class=\"line\">Generating RSA private key, 2048 bit long modulus</span><br><span class=\"line\">..............................................+++</span><br><span class=\"line\">.....................................................................+++</span><br><span class=\"line\">e is 65537 (0x10001)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成签名请求文件（csr），输入上边的密码，并输入相关的信息</span></span><br><span class=\"line\">openssl req -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以在一行，不用交互式输入</span></span><br><span class=\"line\">openssl req -subj <span class=\"string\">&quot;/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com&quot;</span> -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成自签名证书，指定过期时间3650天，输入密码即可生成</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> nginx.csr -signkey nginx.key -out nginx.crt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看生成的文件</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">nginx.crt  nginx.csr  nginx.key</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改nginx主配置文件\"><a href=\"#修改nginx主配置文件\" class=\"headerlink\" title=\"修改nginx主配置文件\"></a>修改nginx主配置文件</h2><p>修改<code>/etc/nginx/nginx.conf</code>文件为如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"literal\">warn</span>;</span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里使用<code>include</code>导入其他的配置文件，所有服务的nginx配置都放在<code>/etc/nginx/conf.d</code>下，如果目录不存在需要自己创建。</p>\n<p>在``/etc/nginx/conf.d<code>下先创建一个通用配置文件</code>common.ini`，这个是所有配置文件都要用的，所以抽离出来：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">    <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建一个测试配置\"><a href=\"#创建一个测试配置\" class=\"headerlink\" title=\"创建一个测试配置\"></a>创建一个测试配置</h3><p>在<code>/etc/nginx/conf.d</code>下新建一个配置文件<code>https.conf</code>：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/new/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/new/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/https-server.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/https-server.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在<code>/usr/share/nginx/html</code>下创建测试页面：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">&quot;this is https page&quot;</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绑定host\"><a href=\"#绑定host\" class=\"headerlink\" title=\"绑定host\"></a>绑定host</h3><p>因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。</p>\n<h3 id=\"重启nginx并访问\"><a href=\"#重启nginx并访问\" class=\"headerlink\" title=\"重启nginx并访问\"></a>重启nginx并访问</h3><p>执行下面的命令检查配置并重新加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload </span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后通过浏览器访问域名：<code>https-server.example.com</code>，应该就可以看到设置的https页面了。</p>\n<blockquote>\n<p>注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。</p>\n</blockquote>\n"},{"title":"二进制方式部署kubernetes 1.20","date":"2021-04-11T03:11:26.000Z","description":"使用二进制方式安装kubernetes 1.20版本集群","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180613%2Fa12e8e321ae040e08c0a1edac71aeb2f.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620702740&t=d5454a9fbcd5da397ea7ec9d6531d1ab","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用二进制方式安装kubernetes 1.20版本集群\n\n更新于 2021-04-11\n\n{% endnote %}\n\n<br>\n\n\n\n# 集群规划\n\n{% tabs comments %}\n\n<!-- tab 部署流程 -->\n\n先部署一个单master节点的k8s集群，然后再扩展集群为多master节点实现高可用；\n\n<!-- endtab -->\n\n<!-- tab 服务器规划 -->\n\n| 角色       | IP            | 组件                                                         |\n| ---------- | ------------- | ------------------------------------------------------------ |\n| k8s-master | 192.168.31.71 | kube-apiserver，kube-controller-manager，kube-scheduler，etcd |\n| k8s-node1  | 192.168.31.72 | kubelet，kube-proxy，docker，etcd                            |\n| k8s-node2  | 192.168.31.73 | kubelet，kube-proxy，docker，etcd                            |\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 初始化配置\n\n**下面的初始化操作在所有服务器上进行**\n\n{% tabs comments %}\n\n<!-- tab 关闭防火墙 -->\n\n```bash\nsystemctl stop firewalld \nsystemctl disable firewalld \n```\n\n\n\n> 生产环境其实建议按需按端口开放\n\n<!-- endtab -->\n\n<!-- tab 关闭selinux和swap -->\n\n```bash\n# 关闭selinux \nsed -i 's/enforcing/disabled/' /etc/selinux/config  \nsetenforce 0  \n \n# 关闭swap \nswapoff -a \nsed -ri 's/.*swap.*/#&/' /etc/fstab   \n\n```\n\n<!-- endtab -->\n\n<!-- tab 添加host -->\n\n```bash\ncat >> /etc/hosts << EOF \n192.168.31.71 k8s-master1 \n192.168.31.72 k8s-node1 \n192.168.31.73 k8s-node2 \nEOF \n```\n\n<!-- endtab -->\n\n<!-- tab 内核参数设置 -->\n\n```bash\ncat > /etc/sysctl.d/k8s.conf << EOF \nnet.bridge.bridge-nf-call-ip6tables = 1 \nnet.bridge.bridge-nf-call-iptables = 1 \nEOF \n\n# 生效配置\nsysctl --system  \n```\n\n<!-- endtab -->\n\n<!-- tab 时间同步 -->\n\n```bash\nyum install -y  ntpdate \nntpdate time.windows.com\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署etcd\n\n{% note info 'fas fa-bullhorn' %}\n\n根据规划，我们将在三个节点上部署服务，形成一个etcd集群\n\n{% endnote %}\n\n\n\n## 创建证书\n\n{% tabs comments %}\n\n<!-- tab 安装cfssl -->\n\n安装cfssl用于生成证书文件，这里我在master节点上进行安装\n\n```bash\nwget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64\nchmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64\nmv cfssl_linux-amd64 /usr/local/bin/cfssl\nmv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nmv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo \n```\n\n<!-- endtab -->\n\n<!-- tab 创建CA -->\n\n```bash\n# 创建证书目录\nmkdir -p ~/TLS/{etcd,k8s}\ncd ~/TLS/etcd\n\n# 自签CA\ncat > ca-config.json << EOF\n{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"www\": {\n         \"expiry\": \"87600h\",\n         \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ]\n      }\n    }\n  }\n}\nEOF\n\ncat > ca-csr.json << EOF\n{\n    \"CN\": \"etcd CA\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"Beijing\",\n            \"ST\": \"Beijing\"\n        }\n    ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n```\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n执行完成后会生成`ca.pem`和`ca-key.pem`文件\n\n{% endnote %}\n\n<!-- endtab -->\n\n<!-- tab 签发etcd证书 -->\n\n```bash\n# 创建申请文件\ncat > server-csr.json << EOF\n{\n    \"CN\": \"etcd\",\n    \"hosts\": [\n    \"192.168.31.71\",\n    \"192.168.31.72\",\n    \"192.168.31.73\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\"\n        }\n    ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n执行完成后会生成`server.pem`和`server-key.pem`文件\n\n{% endnote %}\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 部署etcd集群\n\n\n\n{% tabs comments %}\n\n<!-- tab 安装 -->\n\n```bash\nwget https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz\n\n# 创建工作目录\nmkdir /opt/etcd/{bin,cfg,ssl} -p\ntar zxvf etcd-v3.4.9-linux-amd64.tar.gz\nmv etcd-v3.4.9-linux-amd64/{etcd,etcdctl} /opt/etcd/bin/\n```\n\n<!-- endtab -->\n\n\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/etcd/cfg/etcd.conf << EOF\n#[Member]\nETCD_NAME=\"etcd-1\"\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\nETCD_LISTEN_PEER_URLS=\"https://192.168.31.71:2380\"\nETCD_LISTEN_CLIENT_URLS=\"https://192.168.31.71:2379\"\n\n#[Clustering]\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://192.168.31.71:2380\"\nETCD_ADVERTISE_CLIENT_URLS=\"https://192.168.31.71:2379\"\nETCD_INITIAL_CLUSTER=\"etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380\"\nETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\nEOF\n```\n\n-  ETCD_NAME：节点名称，集群中唯一\n- ETCD_DATA_DIR：数据目录\n- ETCD_LISTEN_PEER_URLS：集群通信监听地址\n- ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址\n- ETCD_INITIAL_ADVERTISE_PEERURLS：集群通告地址\n- ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址\n- ETCD_INITIAL_CLUSTER：集群节点地址\n- ETCD_INITIALCLUSTER_TOKEN：集群Token\n- ETCD_INITIALCLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群\n\n<!-- endtab -->\n\n<!-- tab 创建服务启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/etcd.service << EOF\n[Unit]\nDescription=Etcd Server\nAfter=network.target\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=notify\nEnvironmentFile=/opt/etcd/cfg/etcd.conf\nExecStart=/opt/etcd/bin/etcd \\\n--cert-file=/opt/etcd/ssl/server.pem \\\n--key-file=/opt/etcd/ssl/server-key.pem \\\n--peer-cert-file=/opt/etcd/ssl/server.pem \\\n--peer-key-file=/opt/etcd/ssl/server-key.pem \\\n--trusted-ca-file=/opt/etcd/ssl/ca.pem \\\n--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \\\n--logger=zap\nRestart=on-failure\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 拷贝证书 -->\n\n```bash\ncp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动集群\n\n首先启动第一个节点：\n\n```bash\nsystemctl daemon-reload\nsystemctl start etcd\nsystemctl enable etcd\n```\n\n\n\n将上一步中的文件都拷贝到其他节点上：\n\n```bash\nscp -r /opt/etcd/ root@192.168.31.72:/opt/\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.72:/usr/lib/systemd/system/\nscp -r /opt/etcd/ root@192.168.31.73:/opt/\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.73:/usr/lib/systemd/system/\n```\n\n\n\n注意，拷贝过去后需要修改一下配置文件的内容，将IP和节点名称修改为当前所在服务器的地址：\n\n```bash\ncat /opt/etcd/cfg/etcd.conf\n#[Member]\nETCD_NAME=\"etcd-1\"   # 修改此处，节点2改为etcd-2，节点3改为etcd-3\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\nETCD_LISTEN_PEER_URLS=\"https://192.168.31.71:2380\"   # 修改此处为当前服务器IP\nETCD_LISTEN_CLIENT_URLS=\"https://192.168.31.71:2379\" # 修改此处为当前服务器IP\n\n#[Clustering]\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://192.168.31.71:2380\" # 修改此处为当前服务器IP\nETCD_ADVERTISE_CLIENT_URLS=\"https://192.168.31.71:2379\" # 修改此处为当前服务器IP\nETCD_INITIAL_CLUSTER=\"etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380\"\nETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\n```\n\n\n\n然后在启动剩下的两个节点，步骤同上。\n\n\n\n## 查看集群状态\n\n```bash\nETCDCTL_API=3 /opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=\"https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379\" endpoint health --write-out=table\n\n+----------------------------+--------+-------------+-------+\n|          ENDPOINT    | HEALTH |    TOOK     | ERROR |\n+----------------------------+--------+-------------+-------+\n| https://192.168.31.71:2379 |   true | 10.301506ms |    |\n| https://192.168.31.73:2379 |   true | 12.87467ms |     |\n| https://192.168.31.72:2379 |   true | 13.225954ms |    |\n+----------------------------+--------+-------------+-------+\n\n```\n\n\n\n{% note success 'fas fa-bullhorn' %}\n\n可以看到集群是正常的，部署成功\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# 安装docker\n\n{% note info 'fas fa-bullhorn' %}\n\n在所有的节点都安装docker，也可以换成其他的容器引擎如containerd\n\n{% endnote %}\n\n\n\n## 下载安装 \n\n```bash\nwget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz\ntar zxvf docker-19.03.9.tgz\nmv docker/* /usr/bin\n```\n\n\n\n##  创建服务启动文件 \n\n```bash\ncat > /usr/lib/systemd/system/docker.service << EOF\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network-online.target firewalld.service\nWants=network-online.target\n\n[Service]\nType=notify\nExecStart=/usr/bin/dockerd\nExecReload=/bin/kill -s HUP $MAINPID\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\nTimeoutStartSec=0\nDelegate=yes\nKillMode=process\nRestart=on-failure\nStartLimitBurst=3\nStartLimitInterval=60s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n\n\n## 创建配置文件 \n\n```bash\nmkdir /etc/docker\ncat > /etc/docker/daemon.json << EOF\n{\n  \"registry-mirrors\": [\"https://b9pmyelo.mirror.aliyuncs.com\"]\n}\nEOF\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n这里使用了阿里云镜像加速器\n\n{% endnote %}\n\n\n\n\n\n## 启动服务 \n\n```bash\nsystemctl daemon-reload\nsystemctl start docker\nsystemctl enable docker\n```\n\n\n\n\n\n<br>\n\n\n\n# 部署master节点\n\n## 生成kube-apiserver证书\n\n{% tabs comments %}\n\n<!-- tab 自签CA -->\n\n```bash\ncd ~/TLS/k8s\n\ncat > ca-config.json << EOF\n{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"kubernetes\": {\n         \"expiry\": \"87600h\",\n         \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ]\n      }\n    }\n  }\n}\nEOF\ncat > ca-csr.json << EOF\n{\n    \"CN\": \"kubernetes\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"Beijing\",\n            \"ST\": \"Beijing\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 生成证书 -->\n\n```bash\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n会生成`ca.pem`和`ca-key.pem`文件。\n\n{% endnote %}\n\n<!-- endtab -->\n\n<!-- tab 签发kube-apiserver证书 -->\n\n```bash\ncat > server-csr.json << EOF\n{\n    \"CN\": \"kubernetes\",\n    \"hosts\": [\n      \"10.0.0.1\",\n      \"127.0.0.1\",\n      \"192.168.31.71\",\n      \"192.168.31.72\",\n      \"192.168.31.73\",\n      \"192.168.31.88\",\n      \"kubernetes\",\n      \"kubernetes.default\",\n      \"kubernetes.default.svc\",\n      \"kubernetes.default.svc.cluster\",\n      \"kubernetes.default.svc.cluster.local\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\nEOF\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n文件hosts字段中IP为所有Master/LB/VIP IP，一个都不能少！为了方便后期扩容可以多写几个预留的IP\n\n{% endnote %}\n\n<!-- endtab -->\n\n<!-- tab 生成证书 -->\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 安装kube-apiserver\n\n**https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md，在这里下载1.20版本的安装包，下载server包就够了，包含了Master和Worker Node二进制文件。**\n\n{% tabs comments %}\n\n<!-- tab 安装 -->\n\n```bash\nmkdir -p /opt/kubernetes/{bin,cfg,ssl,logs} \ntar zxvf kubernetes-server-linux-amd64.tar.gz\ncd kubernetes/server/bin\ncp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin\ncp kubectl /usr/bin/\n\n# 拷贝证书\ncp ~/TLS/k8s/ca*pem ~/TLS/k8s/server*pem /opt/kubernetes/ssl/\n```\n\n<!-- endtab -->\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-apiserver.conf << EOF\nKUBE_APISERVER_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--etcd-servers=https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379 \\\\\n--bind-address=192.168.31.71 \\\\\n--secure-port=6443 \\\\\n--advertise-address=192.168.31.71 \\\\\n--allow-privileged=true \\\\\n--service-cluster-ip-range=10.0.0.0/24 \\\\\n--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\\\\n--authorization-mode=RBAC,Node \\\\\n--enable-bootstrap-token-auth=true \\\\\n--token-auth-file=/opt/kubernetes/cfg/token.csv \\\\\n--service-node-port-range=30000-32767 \\\\\n--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\\\\n--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\\\\n--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\\\\n--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\\\\n--client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\\n--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\\n--service-account-issuer=api \\\\\n--service-account-signing-key-file=/opt/kubernetes/ssl/server-key.pem \\\\\n--etcd-cafile=/opt/etcd/ssl/ca.pem \\\\\n--etcd-certfile=/opt/etcd/ssl/server.pem \\\\\n--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\\\\n--requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\\n--proxy-client-cert-file=/opt/kubernetes/ssl/server.pem \\\\\n--proxy-client-key-file=/opt/kubernetes/ssl/server-key.pem \\\\\n--requestheader-allowed-names=kubernetes \\\\\n--requestheader-extra-headers-prefix=X-Remote-Extra- \\\\\n--requestheader-group-headers=X-Remote-Group \\\\\n--requestheader-username-headers=X-Remote-User \\\\\n--enable-aggregator-routing=true \\\\\n--audit-log-maxage=30 \\\\\n--audit-log-maxbackup=3 \\\\\n--audit-log-maxsize=100 \\\\\n--audit-log-path=/opt/kubernetes/logs/k8s-audit.log\"\nEOF\n```\n\n- --logtostderr：启用日志\n- ---v：日志等级\n- --log-dir：日志目录\n- --etcd-servers：etcd集群地址\n- --bind-address：监听地址\n- --secure-port：https安全端口\n- --advertise-address：集群通告地址\n- --allow-privileged：启用授权\n- --service-cluster-ip-range：Service虚拟IP地址段\n- --enable-admission-plugins：准入控制模块\n- --authorization-mode：认证授权，启用RBAC授权和节点自管理\n- --enable-bootstrap-token-auth：启用TLS bootstrap机制\n- --token-auth-file：bootstrap token文件\n- --service-node-port-range：Service nodeport类型默认分配端口范围\n- --kubelet-client-xxx：apiserver访问kubelet客户端证书\n- --tls-xxx-file：apiserver https证书\n- --etcd-xxxfile：连接Etcd集群证书\n- --audit-log-xxx：审计日志\n\n1.20版本必须加的参数：\n\n- --service-account-issuer\n- --service-account-signing-key-file\n\n启动聚合层相关配置：\n\n- --requestheader-client-ca-file\n- --proxy-client-cert-file\n- --proxy-client-key-file\n- --requestheader-allowed-names\n- --requestheader-extra-headers-prefix\n- --requestheader-group-headers\n- --requestheader-username-headers\n- --enable-aggregator-routing\n\n<!-- endtab -->\n\n<!-- tab 创建TLS Token -->\n\n```bash\n# 生成一个token\nhead -c 16 /dev/urandom | od -An -t x | tr -d ' '\n\n# 创建文件\ncat > /opt/kubernetes/cfg/token.csv << EOF\nc47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,\"system:node-bootstrapper\"\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-apiserver.service << EOF\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf\nExecStart=/opt/kubernetes/bin/kube-apiserver \\$KUBE_APISERVER_OPTS\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-apiserver\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-apiserver \nsystemctl enable kube-apiserver\n```\n\n\n\n\n\n## 部署kube-controller-manager\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-controller-manager.conf << EOF\nKUBE_CONTROLLER_MANAGER_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--leader-elect=true \\\\\n--kubeconfig=/opt/kubernetes/cfg/kube-controller-manager.kubeconfig \\\\\n--bind-address=127.0.0.1 \\\\\n--allocate-node-cidrs=true \\\\\n--cluster-cidr=10.244.0.0/16 \\\\\n--service-cluster-ip-range=10.0.0.0/24 \\\\\n--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\\\\n--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\\\\n--root-ca-file=/opt/kubernetes/ssl/ca.pem \\\\\n--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\\n--cluster-signing-duration=87600h0m0s\"\nEOF\n```\n\n- --kubeconfig：连接apiserver配置文件\n- --leader-elect：当该组件启动多个时，自动选举（HA）\n- --cluster-signing-cert-file/--cluster-signing-key-file：自动为kubelet颁发证书的CA，与apiserver保持一致\n\n<!-- endtab -->\n\n<!-- tab 创建证书 -->\n\n```bash\ncd ~/TLS/k8s\n\n# 创建证书请求文件\ncat > kube-controller-manager-csr.json << EOF\n{\n  \"CN\": \"system:kube-controller-manager\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\", \n      \"ST\": \"BeiJing\",\n      \"O\": \"system:masters\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/kube-controller-manager.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials kube-controller-manager \\\n  --client-certificate=./kube-controller-manager.pem \\\n  --client-key=./kube-controller-manager-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=kube-controller-manager \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-controller-manager.service << EOF\n[Unit]\nDescription=Kubernetes Controller Manager\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf\nExecStart=/opt/kubernetes/bin/kube-controller-manager \\$KUBE_CONTROLLER_MANAGER_OPTS\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-controller-manager\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-controller-manager\nsystemctl enable kube-controller-manager\n```\n\n\n\n## 部署kube-scheduler\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-scheduler.conf << EOF\nKUBE_SCHEDULER_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--leader-elect \\\\\n--kubeconfig=/opt/kubernetes/cfg/kube-scheduler.kubeconfig \\\\\n--bind-address=127.0.0.1\"\nEOF\n```\n\n- --kubeconfig：连接apiserver配置文件\n- --leader-elect：当该组件启动多个时，自动选举（HA）\n\n<!-- endtab -->\n\n<!-- tab 创建证书 -->\n\n```bash\ncd ~/TLS/k8s\n\n# 创建证书请求文件\ncat > kube-scheduler-csr.json << EOF\n{\n  \"CN\": \"system:kube-scheduler\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\",\n      \"ST\": \"BeiJing\",\n      \"O\": \"system:masters\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/kube-scheduler.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials kube-scheduler \\\n  --client-certificate=./kube-scheduler.pem \\\n  --client-key=./kube-scheduler-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=kube-scheduler \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-scheduler.service << EOF\n[Unit]\nDescription=Kubernetes Scheduler\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf\nExecStart=/opt/kubernetes/bin/kube-scheduler \\$KUBE_SCHEDULER_OPTS\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-scheduler\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-scheduler\nsystemctl enable kube-scheduler\n```\n\n\n\n## 创建kubectl证书文件连接集群\n\n```bash\n# 生成证书\ncat > admin-csr.json <<EOF\n{\n  \"CN\": \"admin\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\",\n      \"ST\": \"BeiJing\",\n      \"O\": \"system:masters\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin\n\n# 生成kubeconfig\nmkdir /root/.kube\n\nKUBE_CONFIG=\"/root/.kube/config\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials cluster-admin \\\n  --client-certificate=./admin.pem \\\n  --client-key=./admin-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=cluster-admin \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n\n\n## 查看集群状态\n\n```bash\nkubectl get cs\nNAME                STATUS    MESSAGE             ERROR\nscheduler             Healthy   ok                  \ncontroller-manager       Healthy   ok                  \netcd-2               Healthy   {\"health\":\"true\"}   \netcd-1               Healthy   {\"health\":\"true\"}   \netcd-0               Healthy   {\"health\":\"true\"}  \n```\n\n{% note info 'fas fa-bullhorn' %}\n\n都是`health`表示集群现在是健康状态\n\n{% endnote %}\n\n\n\n## 授权kubelet-bootstrap用户允许请求证书\n\n```bash\nkubectl create clusterrolebinding kubelet-bootstrap \\\n--clusterrole=system:node-bootstrapper \\\n--user=kubelet-bootstrap\n```\n\n\n\n<br>\n\n\n\n# 部署node节点\n\n## 创建工作目录并拷贝二进制文件\n\n```bash\nmkdir -p /opt/kubernetes/{bin,cfg,ssl,logs} \ncd kubernetes/server/bin\ncp kubelet kube-proxy /opt/kubernetes/bin  \n```\n\n\n\n\n\n## 部署kubelet\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kubelet.conf << EOF\nKUBELET_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--hostname-override=k8s-master1 \\\\\n--network-plugin=cni \\\\\n--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\\\\n--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\\\\n--config=/opt/kubernetes/cfg/kubelet-config.yml \\\\\n--cert-dir=/opt/kubernetes/ssl \\\\\n--pod-infra-container-image=lizhenliang/pause-amd64:3.0\"\nEOF\n```\n\n- --hostname-override：显示名称，集群中唯一\n- --network-plugin：启用CNI\n- --kubeconfig：空路径，会自动生成，后面用于连接apiserver\n- --bootstrap-kubeconfig：首次启动向apiserver申请证书\n- --config：配置参数文件\n- --cert-dir：kubelet证书生成目录\n- --pod-infra-container-image：管理Pod网络容器的镜像\n\n<!-- endtab -->\n\n<!-- tab 创建配置参数文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kubelet-config.yml << EOF\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\naddress: 0.0.0.0\nport: 10250\nreadOnlyPort: 10255\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.0.0.2\nclusterDomain: cluster.local \nfailSwapOn: false\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 2m0s\n    enabled: true\n  x509:\n    clientCAFile: /opt/kubernetes/ssl/ca.pem \nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 5m0s\n    cacheUnauthorizedTTL: 30s\nevictionHard:\n  imagefs.available: 15%\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\nmaxOpenFiles: 1000000\nmaxPods: 110\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/bootstrap.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\" # apiserver IP:PORT\nTOKEN=\"c47ffb939f5ca36231d9e3121a252940\" # 与token.csv里保持一致\n\n# 生成 kubelet bootstrap kubeconfig 配置文件\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials \"kubelet-bootstrap\" \\\n  --token=${TOKEN} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=\"kubelet-bootstrap\" \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kubelet.service << EOF\n[Unit]\nDescription=Kubernetes Kubelet\nAfter=docker.service\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kubelet.conf\nExecStart=/opt/kubernetes/bin/kubelet \\$KUBELET_OPTS\nRestart=on-failure\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kubelet\n\n```bash\nsystemctl daemon-reload\nsystemctl start kubelet\nsystemctl enable kubelet\n```\n\n\n\n## 审批kubelet证书申请并加入集群\n\n```bash\n# 查看kubelet证书请求\nkubectl get csr\nNAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION\nnode-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A   6m3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending\n\n# 批准申请\nkubectl certificate approve node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A\n\n# 查看节点\nkubectl get node\nNAME         STATUS     ROLES    AGE   VERSION\nk8s-master1   NotReady   <none>   7s    v1.18.3\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n由于网络插件还没有部署，节点会没有准备就绪 NotReady\n\n{% endnote %}\n\n\n\n## 部署kube-proxy\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-proxy.conf << EOF\nKUBE_PROXY_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--config=/opt/kubernetes/cfg/kube-proxy-config.yml\"\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建配置参数文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-proxy-config.yml << EOF\nkind: KubeProxyConfiguration\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nbindAddress: 0.0.0.0\nmetricsBindAddress: 0.0.0.0:10249\nclientConnection:\n  kubeconfig: /opt/kubernetes/cfg/kube-proxy.kubeconfig\nhostnameOverride: k8s-master1\nclusterCIDR: 10.0.0.0/24\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kube-proxy证书 -->\n\n```bash\ncd ~/TLS/k8s\n\n# 创建证书请求文件\ncat > kube-proxy-csr.json << EOF\n{\n  \"CN\": \"system:kube-proxy\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\",\n      \"ST\": \"BeiJing\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/kube-proxy.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials kube-proxy \\\n  --client-certificate=./kube-proxy.pem \\\n  --client-key=./kube-proxy-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=kube-proxy \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-proxy.service << EOF\n[Unit]\nDescription=Kubernetes Proxy\nAfter=network.target\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-proxy.conf\nExecStart=/opt/kubernetes/bin/kube-proxy \\$KUBE_PROXY_OPTS\nRestart=on-failure\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-proxy\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-proxy\nsystemctl enable kube-proxy\n```\n\n\n\n<br>\n\n\n\n## 部署网络插件callico\n\n```bash\nkubectl apply -f calico.yaml\nkubectl get pods -n kube-system\n```\n\n\n\n## 检查集群pod状态\n\n```bash\nkubectl get node\nNAME         STATUS   ROLES    AGE   VERSION\nk8s-master   Ready    <none>   37m   v1.20.4\n```\n\n\n\n## 授权apiserver访问kubelet\n\n```bash\ncat > apiserver-to-kubelet-rbac.yaml << EOF\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  labels:\n    kubernetes.io/bootstrapping: rbac-defaults\n  name: system:kube-apiserver-to-kubelet\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - nodes/proxy\n      - nodes/stats\n      - nodes/log\n      - nodes/spec\n      - nodes/metrics\n      - pods/log\n    verbs:\n      - \"*\"\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:kube-apiserver\n  namespace: \"\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-apiserver-to-kubelet\nsubjects:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: kubernetes\nEOF\n\nkubectl apply -f apiserver-to-kubelet-rbac.yaml\n```\n\n\n\n## node节点扩容\n\n```bash\n# 拷贝相关文件\nscp -r /opt/kubernetes root@192.168.31.72:/opt/\n\nscp -r /usr/lib/systemd/system/{kubelet,kube-proxy}.service root@192.168.31.72:/usr/lib/systemd/system\n\nscp /opt/kubernetes/ssl/ca.pem root@192.168.31.72:/opt/kubernetes/ssl\n\n# 在node节点上删除kubeconfig文件\nrm -f /opt/kubernetes/cfg/kubelet.kubeconfig \nrm -f /opt/kubernetes/ssl/kubelet*\n\n# 修改kubelet配置文件\nvi /opt/kubernetes/cfg/kubelet.conf\n--hostname-override=k8s-node1 ## 修改这一项\n\nvi /opt/kubernetes/cfg/kube-proxy-config.yml\nhostnameOverride: k8s-node1  ## 修改这一项\n\n\n# 启动\nsystemctl daemon-reload\nsystemctl start kubelet kube-proxy\nsystemctl enable kubelet kube-proxy\nsystemctl start kubelet kubelet\nsystemctl enable kubelet kubelet\n\n# 在master上批准请求\n# 查看证书请求\nkubectl get csr\nNAME           AGE   SIGNERNAME                    REQUESTOR           CONDITION\nnode-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro   89s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending\n\n# 授权请求\nkubectl certificate approve node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro\n\n# 查看node状态\nkubectl get node\nNAME       STATUS   ROLES    AGE     VERSION\nk8s-master1   Ready    <none>   47m     v1.20.4\nk8s-node1    Ready    <none>   6m49s   v1.20.4\n```\n\n\n\n<br>\n\n\n\n# 常用插件部署\n\n## 部署dashboard\n\n```bash\nkubectl apply -f kubernetes-dashboard.yaml\nkubectl get pods,svc -n kubernetes-dashboard\n\n# 创建serviceaccount\nkubectl create serviceaccount dashboard-admin -n kube-system\nkubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin\nkubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')\n```\n\n\n\n上一步将输出一个token，访问：https://NodeIP:30001，输入token即可进入页面\n\n\n\n## 部署coredns\n\n```bash\nkubectl apply -f coredns.yaml \n \nkubectl get pods -n kube-system  \nNAME                          READY   STATUS    RESTARTS   AGE \ncoredns-5ffbfd976d-j6shb      1/1     Running   0          32s\n\n# 测试解析\nkubectl run -it --rm dns-test --image=busybox:1.28.4 sh \nIf you don't see a command prompt, try pressing enter. \n \n/ # nslookup kubernetes \nServer:    10.0.0.2 \nAddress 1: 10.0.0.2 kube-dns.kube-system.svc.cluster.local \n \nName:      kubernetes \nAddress 1: 10.0.0.1 kubernetes.default.svc.cluster.local\n\n```\n\n","source":"_posts/二进制方式部署kubernetes-1-20.md","raw":"---\ntitle: 二进制方式部署kubernetes 1.20\ndate: 2021-04-11 11:11:26\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- 集群部署\ndescription: 使用二进制方式安装kubernetes 1.20版本集群\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180613%2Fa12e8e321ae040e08c0a1edac71aeb2f.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1620702740&t=d5454a9fbcd5da397ea7ec9d6531d1ab\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了使用二进制方式安装kubernetes 1.20版本集群\n\n更新于 2021-04-11\n\n{% endnote %}\n\n<br>\n\n\n\n# 集群规划\n\n{% tabs comments %}\n\n<!-- tab 部署流程 -->\n\n先部署一个单master节点的k8s集群，然后再扩展集群为多master节点实现高可用；\n\n<!-- endtab -->\n\n<!-- tab 服务器规划 -->\n\n| 角色       | IP            | 组件                                                         |\n| ---------- | ------------- | ------------------------------------------------------------ |\n| k8s-master | 192.168.31.71 | kube-apiserver，kube-controller-manager，kube-scheduler，etcd |\n| k8s-node1  | 192.168.31.72 | kubelet，kube-proxy，docker，etcd                            |\n| k8s-node2  | 192.168.31.73 | kubelet，kube-proxy，docker，etcd                            |\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 初始化配置\n\n**下面的初始化操作在所有服务器上进行**\n\n{% tabs comments %}\n\n<!-- tab 关闭防火墙 -->\n\n```bash\nsystemctl stop firewalld \nsystemctl disable firewalld \n```\n\n\n\n> 生产环境其实建议按需按端口开放\n\n<!-- endtab -->\n\n<!-- tab 关闭selinux和swap -->\n\n```bash\n# 关闭selinux \nsed -i 's/enforcing/disabled/' /etc/selinux/config  \nsetenforce 0  \n \n# 关闭swap \nswapoff -a \nsed -ri 's/.*swap.*/#&/' /etc/fstab   \n\n```\n\n<!-- endtab -->\n\n<!-- tab 添加host -->\n\n```bash\ncat >> /etc/hosts << EOF \n192.168.31.71 k8s-master1 \n192.168.31.72 k8s-node1 \n192.168.31.73 k8s-node2 \nEOF \n```\n\n<!-- endtab -->\n\n<!-- tab 内核参数设置 -->\n\n```bash\ncat > /etc/sysctl.d/k8s.conf << EOF \nnet.bridge.bridge-nf-call-ip6tables = 1 \nnet.bridge.bridge-nf-call-iptables = 1 \nEOF \n\n# 生效配置\nsysctl --system  \n```\n\n<!-- endtab -->\n\n<!-- tab 时间同步 -->\n\n```bash\nyum install -y  ntpdate \nntpdate time.windows.com\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署etcd\n\n{% note info 'fas fa-bullhorn' %}\n\n根据规划，我们将在三个节点上部署服务，形成一个etcd集群\n\n{% endnote %}\n\n\n\n## 创建证书\n\n{% tabs comments %}\n\n<!-- tab 安装cfssl -->\n\n安装cfssl用于生成证书文件，这里我在master节点上进行安装\n\n```bash\nwget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64\nchmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64\nmv cfssl_linux-amd64 /usr/local/bin/cfssl\nmv cfssljson_linux-amd64 /usr/local/bin/cfssljson\nmv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo \n```\n\n<!-- endtab -->\n\n<!-- tab 创建CA -->\n\n```bash\n# 创建证书目录\nmkdir -p ~/TLS/{etcd,k8s}\ncd ~/TLS/etcd\n\n# 自签CA\ncat > ca-config.json << EOF\n{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"www\": {\n         \"expiry\": \"87600h\",\n         \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ]\n      }\n    }\n  }\n}\nEOF\n\ncat > ca-csr.json << EOF\n{\n    \"CN\": \"etcd CA\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"Beijing\",\n            \"ST\": \"Beijing\"\n        }\n    ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n```\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n执行完成后会生成`ca.pem`和`ca-key.pem`文件\n\n{% endnote %}\n\n<!-- endtab -->\n\n<!-- tab 签发etcd证书 -->\n\n```bash\n# 创建申请文件\ncat > server-csr.json << EOF\n{\n    \"CN\": \"etcd\",\n    \"hosts\": [\n    \"192.168.31.71\",\n    \"192.168.31.72\",\n    \"192.168.31.73\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\"\n        }\n    ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n执行完成后会生成`server.pem`和`server-key.pem`文件\n\n{% endnote %}\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 部署etcd集群\n\n\n\n{% tabs comments %}\n\n<!-- tab 安装 -->\n\n```bash\nwget https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz\n\n# 创建工作目录\nmkdir /opt/etcd/{bin,cfg,ssl} -p\ntar zxvf etcd-v3.4.9-linux-amd64.tar.gz\nmv etcd-v3.4.9-linux-amd64/{etcd,etcdctl} /opt/etcd/bin/\n```\n\n<!-- endtab -->\n\n\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/etcd/cfg/etcd.conf << EOF\n#[Member]\nETCD_NAME=\"etcd-1\"\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\nETCD_LISTEN_PEER_URLS=\"https://192.168.31.71:2380\"\nETCD_LISTEN_CLIENT_URLS=\"https://192.168.31.71:2379\"\n\n#[Clustering]\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://192.168.31.71:2380\"\nETCD_ADVERTISE_CLIENT_URLS=\"https://192.168.31.71:2379\"\nETCD_INITIAL_CLUSTER=\"etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380\"\nETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\nEOF\n```\n\n-  ETCD_NAME：节点名称，集群中唯一\n- ETCD_DATA_DIR：数据目录\n- ETCD_LISTEN_PEER_URLS：集群通信监听地址\n- ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址\n- ETCD_INITIAL_ADVERTISE_PEERURLS：集群通告地址\n- ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址\n- ETCD_INITIAL_CLUSTER：集群节点地址\n- ETCD_INITIALCLUSTER_TOKEN：集群Token\n- ETCD_INITIALCLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群\n\n<!-- endtab -->\n\n<!-- tab 创建服务启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/etcd.service << EOF\n[Unit]\nDescription=Etcd Server\nAfter=network.target\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=notify\nEnvironmentFile=/opt/etcd/cfg/etcd.conf\nExecStart=/opt/etcd/bin/etcd \\\n--cert-file=/opt/etcd/ssl/server.pem \\\n--key-file=/opt/etcd/ssl/server-key.pem \\\n--peer-cert-file=/opt/etcd/ssl/server.pem \\\n--peer-key-file=/opt/etcd/ssl/server-key.pem \\\n--trusted-ca-file=/opt/etcd/ssl/ca.pem \\\n--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \\\n--logger=zap\nRestart=on-failure\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 拷贝证书 -->\n\n```bash\ncp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动集群\n\n首先启动第一个节点：\n\n```bash\nsystemctl daemon-reload\nsystemctl start etcd\nsystemctl enable etcd\n```\n\n\n\n将上一步中的文件都拷贝到其他节点上：\n\n```bash\nscp -r /opt/etcd/ root@192.168.31.72:/opt/\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.72:/usr/lib/systemd/system/\nscp -r /opt/etcd/ root@192.168.31.73:/opt/\nscp /usr/lib/systemd/system/etcd.service root@192.168.31.73:/usr/lib/systemd/system/\n```\n\n\n\n注意，拷贝过去后需要修改一下配置文件的内容，将IP和节点名称修改为当前所在服务器的地址：\n\n```bash\ncat /opt/etcd/cfg/etcd.conf\n#[Member]\nETCD_NAME=\"etcd-1\"   # 修改此处，节点2改为etcd-2，节点3改为etcd-3\nETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"\nETCD_LISTEN_PEER_URLS=\"https://192.168.31.71:2380\"   # 修改此处为当前服务器IP\nETCD_LISTEN_CLIENT_URLS=\"https://192.168.31.71:2379\" # 修改此处为当前服务器IP\n\n#[Clustering]\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://192.168.31.71:2380\" # 修改此处为当前服务器IP\nETCD_ADVERTISE_CLIENT_URLS=\"https://192.168.31.71:2379\" # 修改此处为当前服务器IP\nETCD_INITIAL_CLUSTER=\"etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380\"\nETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"\nETCD_INITIAL_CLUSTER_STATE=\"new\"\n```\n\n\n\n然后在启动剩下的两个节点，步骤同上。\n\n\n\n## 查看集群状态\n\n```bash\nETCDCTL_API=3 /opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=\"https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379\" endpoint health --write-out=table\n\n+----------------------------+--------+-------------+-------+\n|          ENDPOINT    | HEALTH |    TOOK     | ERROR |\n+----------------------------+--------+-------------+-------+\n| https://192.168.31.71:2379 |   true | 10.301506ms |    |\n| https://192.168.31.73:2379 |   true | 12.87467ms |     |\n| https://192.168.31.72:2379 |   true | 13.225954ms |    |\n+----------------------------+--------+-------------+-------+\n\n```\n\n\n\n{% note success 'fas fa-bullhorn' %}\n\n可以看到集群是正常的，部署成功\n\n{% endnote %}\n\n\n\n<br>\n\n\n\n# 安装docker\n\n{% note info 'fas fa-bullhorn' %}\n\n在所有的节点都安装docker，也可以换成其他的容器引擎如containerd\n\n{% endnote %}\n\n\n\n## 下载安装 \n\n```bash\nwget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz\ntar zxvf docker-19.03.9.tgz\nmv docker/* /usr/bin\n```\n\n\n\n##  创建服务启动文件 \n\n```bash\ncat > /usr/lib/systemd/system/docker.service << EOF\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network-online.target firewalld.service\nWants=network-online.target\n\n[Service]\nType=notify\nExecStart=/usr/bin/dockerd\nExecReload=/bin/kill -s HUP $MAINPID\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\nTimeoutStartSec=0\nDelegate=yes\nKillMode=process\nRestart=on-failure\nStartLimitBurst=3\nStartLimitInterval=60s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n\n\n## 创建配置文件 \n\n```bash\nmkdir /etc/docker\ncat > /etc/docker/daemon.json << EOF\n{\n  \"registry-mirrors\": [\"https://b9pmyelo.mirror.aliyuncs.com\"]\n}\nEOF\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n这里使用了阿里云镜像加速器\n\n{% endnote %}\n\n\n\n\n\n## 启动服务 \n\n```bash\nsystemctl daemon-reload\nsystemctl start docker\nsystemctl enable docker\n```\n\n\n\n\n\n<br>\n\n\n\n# 部署master节点\n\n## 生成kube-apiserver证书\n\n{% tabs comments %}\n\n<!-- tab 自签CA -->\n\n```bash\ncd ~/TLS/k8s\n\ncat > ca-config.json << EOF\n{\n  \"signing\": {\n    \"default\": {\n      \"expiry\": \"87600h\"\n    },\n    \"profiles\": {\n      \"kubernetes\": {\n         \"expiry\": \"87600h\",\n         \"usages\": [\n            \"signing\",\n            \"key encipherment\",\n            \"server auth\",\n            \"client auth\"\n        ]\n      }\n    }\n  }\n}\nEOF\ncat > ca-csr.json << EOF\n{\n    \"CN\": \"kubernetes\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"Beijing\",\n            \"ST\": \"Beijing\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 生成证书 -->\n\n```bash\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n会生成`ca.pem`和`ca-key.pem`文件。\n\n{% endnote %}\n\n<!-- endtab -->\n\n<!-- tab 签发kube-apiserver证书 -->\n\n```bash\ncat > server-csr.json << EOF\n{\n    \"CN\": \"kubernetes\",\n    \"hosts\": [\n      \"10.0.0.1\",\n      \"127.0.0.1\",\n      \"192.168.31.71\",\n      \"192.168.31.72\",\n      \"192.168.31.73\",\n      \"192.168.31.88\",\n      \"kubernetes\",\n      \"kubernetes.default\",\n      \"kubernetes.default.svc\",\n      \"kubernetes.default.svc.cluster\",\n      \"kubernetes.default.svc.cluster.local\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"L\": \"BeiJing\",\n            \"ST\": \"BeiJing\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\nEOF\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n文件hosts字段中IP为所有Master/LB/VIP IP，一个都不能少！为了方便后期扩容可以多写几个预留的IP\n\n{% endnote %}\n\n<!-- endtab -->\n\n<!-- tab 生成证书 -->\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 安装kube-apiserver\n\n**https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md，在这里下载1.20版本的安装包，下载server包就够了，包含了Master和Worker Node二进制文件。**\n\n{% tabs comments %}\n\n<!-- tab 安装 -->\n\n```bash\nmkdir -p /opt/kubernetes/{bin,cfg,ssl,logs} \ntar zxvf kubernetes-server-linux-amd64.tar.gz\ncd kubernetes/server/bin\ncp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin\ncp kubectl /usr/bin/\n\n# 拷贝证书\ncp ~/TLS/k8s/ca*pem ~/TLS/k8s/server*pem /opt/kubernetes/ssl/\n```\n\n<!-- endtab -->\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-apiserver.conf << EOF\nKUBE_APISERVER_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--etcd-servers=https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379 \\\\\n--bind-address=192.168.31.71 \\\\\n--secure-port=6443 \\\\\n--advertise-address=192.168.31.71 \\\\\n--allow-privileged=true \\\\\n--service-cluster-ip-range=10.0.0.0/24 \\\\\n--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\\\\n--authorization-mode=RBAC,Node \\\\\n--enable-bootstrap-token-auth=true \\\\\n--token-auth-file=/opt/kubernetes/cfg/token.csv \\\\\n--service-node-port-range=30000-32767 \\\\\n--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\\\\n--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\\\\n--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\\\\n--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\\\\n--client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\\n--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\\n--service-account-issuer=api \\\\\n--service-account-signing-key-file=/opt/kubernetes/ssl/server-key.pem \\\\\n--etcd-cafile=/opt/etcd/ssl/ca.pem \\\\\n--etcd-certfile=/opt/etcd/ssl/server.pem \\\\\n--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\\\\n--requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\\n--proxy-client-cert-file=/opt/kubernetes/ssl/server.pem \\\\\n--proxy-client-key-file=/opt/kubernetes/ssl/server-key.pem \\\\\n--requestheader-allowed-names=kubernetes \\\\\n--requestheader-extra-headers-prefix=X-Remote-Extra- \\\\\n--requestheader-group-headers=X-Remote-Group \\\\\n--requestheader-username-headers=X-Remote-User \\\\\n--enable-aggregator-routing=true \\\\\n--audit-log-maxage=30 \\\\\n--audit-log-maxbackup=3 \\\\\n--audit-log-maxsize=100 \\\\\n--audit-log-path=/opt/kubernetes/logs/k8s-audit.log\"\nEOF\n```\n\n- --logtostderr：启用日志\n- ---v：日志等级\n- --log-dir：日志目录\n- --etcd-servers：etcd集群地址\n- --bind-address：监听地址\n- --secure-port：https安全端口\n- --advertise-address：集群通告地址\n- --allow-privileged：启用授权\n- --service-cluster-ip-range：Service虚拟IP地址段\n- --enable-admission-plugins：准入控制模块\n- --authorization-mode：认证授权，启用RBAC授权和节点自管理\n- --enable-bootstrap-token-auth：启用TLS bootstrap机制\n- --token-auth-file：bootstrap token文件\n- --service-node-port-range：Service nodeport类型默认分配端口范围\n- --kubelet-client-xxx：apiserver访问kubelet客户端证书\n- --tls-xxx-file：apiserver https证书\n- --etcd-xxxfile：连接Etcd集群证书\n- --audit-log-xxx：审计日志\n\n1.20版本必须加的参数：\n\n- --service-account-issuer\n- --service-account-signing-key-file\n\n启动聚合层相关配置：\n\n- --requestheader-client-ca-file\n- --proxy-client-cert-file\n- --proxy-client-key-file\n- --requestheader-allowed-names\n- --requestheader-extra-headers-prefix\n- --requestheader-group-headers\n- --requestheader-username-headers\n- --enable-aggregator-routing\n\n<!-- endtab -->\n\n<!-- tab 创建TLS Token -->\n\n```bash\n# 生成一个token\nhead -c 16 /dev/urandom | od -An -t x | tr -d ' '\n\n# 创建文件\ncat > /opt/kubernetes/cfg/token.csv << EOF\nc47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,\"system:node-bootstrapper\"\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-apiserver.service << EOF\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf\nExecStart=/opt/kubernetes/bin/kube-apiserver \\$KUBE_APISERVER_OPTS\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-apiserver\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-apiserver \nsystemctl enable kube-apiserver\n```\n\n\n\n\n\n## 部署kube-controller-manager\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-controller-manager.conf << EOF\nKUBE_CONTROLLER_MANAGER_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--leader-elect=true \\\\\n--kubeconfig=/opt/kubernetes/cfg/kube-controller-manager.kubeconfig \\\\\n--bind-address=127.0.0.1 \\\\\n--allocate-node-cidrs=true \\\\\n--cluster-cidr=10.244.0.0/16 \\\\\n--service-cluster-ip-range=10.0.0.0/24 \\\\\n--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\\\\n--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\\\\n--root-ca-file=/opt/kubernetes/ssl/ca.pem \\\\\n--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\\n--cluster-signing-duration=87600h0m0s\"\nEOF\n```\n\n- --kubeconfig：连接apiserver配置文件\n- --leader-elect：当该组件启动多个时，自动选举（HA）\n- --cluster-signing-cert-file/--cluster-signing-key-file：自动为kubelet颁发证书的CA，与apiserver保持一致\n\n<!-- endtab -->\n\n<!-- tab 创建证书 -->\n\n```bash\ncd ~/TLS/k8s\n\n# 创建证书请求文件\ncat > kube-controller-manager-csr.json << EOF\n{\n  \"CN\": \"system:kube-controller-manager\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\", \n      \"ST\": \"BeiJing\",\n      \"O\": \"system:masters\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/kube-controller-manager.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials kube-controller-manager \\\n  --client-certificate=./kube-controller-manager.pem \\\n  --client-key=./kube-controller-manager-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=kube-controller-manager \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-controller-manager.service << EOF\n[Unit]\nDescription=Kubernetes Controller Manager\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf\nExecStart=/opt/kubernetes/bin/kube-controller-manager \\$KUBE_CONTROLLER_MANAGER_OPTS\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-controller-manager\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-controller-manager\nsystemctl enable kube-controller-manager\n```\n\n\n\n## 部署kube-scheduler\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-scheduler.conf << EOF\nKUBE_SCHEDULER_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--leader-elect \\\\\n--kubeconfig=/opt/kubernetes/cfg/kube-scheduler.kubeconfig \\\\\n--bind-address=127.0.0.1\"\nEOF\n```\n\n- --kubeconfig：连接apiserver配置文件\n- --leader-elect：当该组件启动多个时，自动选举（HA）\n\n<!-- endtab -->\n\n<!-- tab 创建证书 -->\n\n```bash\ncd ~/TLS/k8s\n\n# 创建证书请求文件\ncat > kube-scheduler-csr.json << EOF\n{\n  \"CN\": \"system:kube-scheduler\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\",\n      \"ST\": \"BeiJing\",\n      \"O\": \"system:masters\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/kube-scheduler.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials kube-scheduler \\\n  --client-certificate=./kube-scheduler.pem \\\n  --client-key=./kube-scheduler-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=kube-scheduler \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-scheduler.service << EOF\n[Unit]\nDescription=Kubernetes Scheduler\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf\nExecStart=/opt/kubernetes/bin/kube-scheduler \\$KUBE_SCHEDULER_OPTS\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-scheduler\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-scheduler\nsystemctl enable kube-scheduler\n```\n\n\n\n## 创建kubectl证书文件连接集群\n\n```bash\n# 生成证书\ncat > admin-csr.json <<EOF\n{\n  \"CN\": \"admin\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\",\n      \"ST\": \"BeiJing\",\n      \"O\": \"system:masters\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin\n\n# 生成kubeconfig\nmkdir /root/.kube\n\nKUBE_CONFIG=\"/root/.kube/config\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials cluster-admin \\\n  --client-certificate=./admin.pem \\\n  --client-key=./admin-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=cluster-admin \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n\n\n## 查看集群状态\n\n```bash\nkubectl get cs\nNAME                STATUS    MESSAGE             ERROR\nscheduler             Healthy   ok                  \ncontroller-manager       Healthy   ok                  \netcd-2               Healthy   {\"health\":\"true\"}   \netcd-1               Healthy   {\"health\":\"true\"}   \netcd-0               Healthy   {\"health\":\"true\"}  \n```\n\n{% note info 'fas fa-bullhorn' %}\n\n都是`health`表示集群现在是健康状态\n\n{% endnote %}\n\n\n\n## 授权kubelet-bootstrap用户允许请求证书\n\n```bash\nkubectl create clusterrolebinding kubelet-bootstrap \\\n--clusterrole=system:node-bootstrapper \\\n--user=kubelet-bootstrap\n```\n\n\n\n<br>\n\n\n\n# 部署node节点\n\n## 创建工作目录并拷贝二进制文件\n\n```bash\nmkdir -p /opt/kubernetes/{bin,cfg,ssl,logs} \ncd kubernetes/server/bin\ncp kubelet kube-proxy /opt/kubernetes/bin  \n```\n\n\n\n\n\n## 部署kubelet\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kubelet.conf << EOF\nKUBELET_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--hostname-override=k8s-master1 \\\\\n--network-plugin=cni \\\\\n--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\\\\n--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\\\\n--config=/opt/kubernetes/cfg/kubelet-config.yml \\\\\n--cert-dir=/opt/kubernetes/ssl \\\\\n--pod-infra-container-image=lizhenliang/pause-amd64:3.0\"\nEOF\n```\n\n- --hostname-override：显示名称，集群中唯一\n- --network-plugin：启用CNI\n- --kubeconfig：空路径，会自动生成，后面用于连接apiserver\n- --bootstrap-kubeconfig：首次启动向apiserver申请证书\n- --config：配置参数文件\n- --cert-dir：kubelet证书生成目录\n- --pod-infra-container-image：管理Pod网络容器的镜像\n\n<!-- endtab -->\n\n<!-- tab 创建配置参数文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kubelet-config.yml << EOF\nkind: KubeletConfiguration\napiVersion: kubelet.config.k8s.io/v1beta1\naddress: 0.0.0.0\nport: 10250\nreadOnlyPort: 10255\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.0.0.2\nclusterDomain: cluster.local \nfailSwapOn: false\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 2m0s\n    enabled: true\n  x509:\n    clientCAFile: /opt/kubernetes/ssl/ca.pem \nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 5m0s\n    cacheUnauthorizedTTL: 30s\nevictionHard:\n  imagefs.available: 15%\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\nmaxOpenFiles: 1000000\nmaxPods: 110\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/bootstrap.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\" # apiserver IP:PORT\nTOKEN=\"c47ffb939f5ca36231d9e3121a252940\" # 与token.csv里保持一致\n\n# 生成 kubelet bootstrap kubeconfig 配置文件\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials \"kubelet-bootstrap\" \\\n  --token=${TOKEN} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=\"kubelet-bootstrap\" \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kubelet.service << EOF\n[Unit]\nDescription=Kubernetes Kubelet\nAfter=docker.service\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kubelet.conf\nExecStart=/opt/kubernetes/bin/kubelet \\$KUBELET_OPTS\nRestart=on-failure\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kubelet\n\n```bash\nsystemctl daemon-reload\nsystemctl start kubelet\nsystemctl enable kubelet\n```\n\n\n\n## 审批kubelet证书申请并加入集群\n\n```bash\n# 查看kubelet证书请求\nkubectl get csr\nNAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION\nnode-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A   6m3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending\n\n# 批准申请\nkubectl certificate approve node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A\n\n# 查看节点\nkubectl get node\nNAME         STATUS     ROLES    AGE   VERSION\nk8s-master1   NotReady   <none>   7s    v1.18.3\n```\n\n{% note info 'fas fa-bullhorn' %}\n\n由于网络插件还没有部署，节点会没有准备就绪 NotReady\n\n{% endnote %}\n\n\n\n## 部署kube-proxy\n\n{% tabs comments %}\n\n<!-- tab 创建配置文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-proxy.conf << EOF\nKUBE_PROXY_OPTS=\"--logtostderr=false \\\\\n--v=2 \\\\\n--log-dir=/opt/kubernetes/logs \\\\\n--config=/opt/kubernetes/cfg/kube-proxy-config.yml\"\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建配置参数文件 -->\n\n```bash\ncat > /opt/kubernetes/cfg/kube-proxy-config.yml << EOF\nkind: KubeProxyConfiguration\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nbindAddress: 0.0.0.0\nmetricsBindAddress: 0.0.0.0:10249\nclientConnection:\n  kubeconfig: /opt/kubernetes/cfg/kube-proxy.kubeconfig\nhostnameOverride: k8s-master1\nclusterCIDR: 10.0.0.0/24\nEOF\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kube-proxy证书 -->\n\n```bash\ncd ~/TLS/k8s\n\n# 创建证书请求文件\ncat > kube-proxy-csr.json << EOF\n{\n  \"CN\": \"system:kube-proxy\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"L\": \"BeiJing\",\n      \"ST\": \"BeiJing\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\nEOF\n\n# 生成证书\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy\n```\n\n<!-- endtab -->\n\n<!-- tab 创建kubeconfig文件 -->\n\n```bash\nKUBE_CONFIG=\"/opt/kubernetes/cfg/kube-proxy.kubeconfig\"\nKUBE_APISERVER=\"https://192.168.31.71:6443\"\n\nkubectl config set-cluster kubernetes \\\n  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\\n  --embed-certs=true \\\n  --server=${KUBE_APISERVER} \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-credentials kube-proxy \\\n  --client-certificate=./kube-proxy.pem \\\n  --client-key=./kube-proxy-key.pem \\\n  --embed-certs=true \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config set-context default \\\n  --cluster=kubernetes \\\n  --user=kube-proxy \\\n  --kubeconfig=${KUBE_CONFIG}\n\nkubectl config use-context default --kubeconfig=${KUBE_CONFIG}\n```\n\n<!-- endtab -->\n\n<!-- tab 创建启动文件 -->\n\n```bash\ncat > /usr/lib/systemd/system/kube-proxy.service << EOF\n[Unit]\nDescription=Kubernetes Proxy\nAfter=network.target\n\n[Service]\nEnvironmentFile=/opt/kubernetes/cfg/kube-proxy.conf\nExecStart=/opt/kubernetes/bin/kube-proxy \\$KUBE_PROXY_OPTS\nRestart=on-failure\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 启动kube-proxy\n\n```bash\nsystemctl daemon-reload\nsystemctl start kube-proxy\nsystemctl enable kube-proxy\n```\n\n\n\n<br>\n\n\n\n## 部署网络插件callico\n\n```bash\nkubectl apply -f calico.yaml\nkubectl get pods -n kube-system\n```\n\n\n\n## 检查集群pod状态\n\n```bash\nkubectl get node\nNAME         STATUS   ROLES    AGE   VERSION\nk8s-master   Ready    <none>   37m   v1.20.4\n```\n\n\n\n## 授权apiserver访问kubelet\n\n```bash\ncat > apiserver-to-kubelet-rbac.yaml << EOF\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  annotations:\n    rbac.authorization.kubernetes.io/autoupdate: \"true\"\n  labels:\n    kubernetes.io/bootstrapping: rbac-defaults\n  name: system:kube-apiserver-to-kubelet\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - nodes/proxy\n      - nodes/stats\n      - nodes/log\n      - nodes/spec\n      - nodes/metrics\n      - pods/log\n    verbs:\n      - \"*\"\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:kube-apiserver\n  namespace: \"\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:kube-apiserver-to-kubelet\nsubjects:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: User\n    name: kubernetes\nEOF\n\nkubectl apply -f apiserver-to-kubelet-rbac.yaml\n```\n\n\n\n## node节点扩容\n\n```bash\n# 拷贝相关文件\nscp -r /opt/kubernetes root@192.168.31.72:/opt/\n\nscp -r /usr/lib/systemd/system/{kubelet,kube-proxy}.service root@192.168.31.72:/usr/lib/systemd/system\n\nscp /opt/kubernetes/ssl/ca.pem root@192.168.31.72:/opt/kubernetes/ssl\n\n# 在node节点上删除kubeconfig文件\nrm -f /opt/kubernetes/cfg/kubelet.kubeconfig \nrm -f /opt/kubernetes/ssl/kubelet*\n\n# 修改kubelet配置文件\nvi /opt/kubernetes/cfg/kubelet.conf\n--hostname-override=k8s-node1 ## 修改这一项\n\nvi /opt/kubernetes/cfg/kube-proxy-config.yml\nhostnameOverride: k8s-node1  ## 修改这一项\n\n\n# 启动\nsystemctl daemon-reload\nsystemctl start kubelet kube-proxy\nsystemctl enable kubelet kube-proxy\nsystemctl start kubelet kubelet\nsystemctl enable kubelet kubelet\n\n# 在master上批准请求\n# 查看证书请求\nkubectl get csr\nNAME           AGE   SIGNERNAME                    REQUESTOR           CONDITION\nnode-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro   89s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending\n\n# 授权请求\nkubectl certificate approve node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro\n\n# 查看node状态\nkubectl get node\nNAME       STATUS   ROLES    AGE     VERSION\nk8s-master1   Ready    <none>   47m     v1.20.4\nk8s-node1    Ready    <none>   6m49s   v1.20.4\n```\n\n\n\n<br>\n\n\n\n# 常用插件部署\n\n## 部署dashboard\n\n```bash\nkubectl apply -f kubernetes-dashboard.yaml\nkubectl get pods,svc -n kubernetes-dashboard\n\n# 创建serviceaccount\nkubectl create serviceaccount dashboard-admin -n kube-system\nkubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin\nkubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print $1}')\n```\n\n\n\n上一步将输出一个token，访问：https://NodeIP:30001，输入token即可进入页面\n\n\n\n## 部署coredns\n\n```bash\nkubectl apply -f coredns.yaml \n \nkubectl get pods -n kube-system  \nNAME                          READY   STATUS    RESTARTS   AGE \ncoredns-5ffbfd976d-j6shb      1/1     Running   0          32s\n\n# 测试解析\nkubectl run -it --rm dns-test --image=busybox:1.28.4 sh \nIf you don't see a command prompt, try pressing enter. \n \n/ # nslookup kubernetes \nServer:    10.0.0.2 \nAddress 1: 10.0.0.2 kube-dns.kube-system.svc.cluster.local \n \nName:      kubernetes \nAddress 1: 10.0.0.1 kubernetes.default.svc.cluster.local\n\n```\n\n","slug":"二进制方式部署kubernetes-1-20","published":1,"updated":"2021-04-11T05:01:08.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de6x005pp0kldvd6e8jg","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用二进制方式安装kubernetes 1.20版本集群</p><p>更新于 2021-04-11</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">部署流程</button></li><li class=\"tab\"><button data-href=\"#comments-2\">服务器规划</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>先部署一个单master节点的k8s集群，然后再扩展集群为多master节点实现高可用；</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n<th>组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>k8s-master</td>\n<td>192.168.31.71</td>\n<td>kube-apiserver，kube-controller-manager，kube-scheduler，etcd</td>\n</tr>\n<tr>\n<td>k8s-node1</td>\n<td>192.168.31.72</td>\n<td>kubelet，kube-proxy，docker，etcd</td>\n</tr>\n<tr>\n<td>k8s-node2</td>\n<td>192.168.31.73</td>\n<td>kubelet，kube-proxy，docker，etcd</td>\n</tr>\n</tbody></table><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h1><p><strong>下面的初始化操作在所有服务器上进行</strong></p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">关闭防火墙</button></li><li class=\"tab\"><button data-href=\"#comments-2\">关闭selinux和swap</button></li><li class=\"tab\"><button data-href=\"#comments-3\">添加host</button></li><li class=\"tab\"><button data-href=\"#comments-4\">内核参数设置</button></li><li class=\"tab\"><button data-href=\"#comments-5\">时间同步</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld </span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld </span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生产环境其实建议按需按端口开放</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭selinux </span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  </span><br><span class=\"line\">setenforce 0  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 关闭swap </span></span><br><span class=\"line\">swapoff -a </span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">192.168.31.71 k8s-master1 </span></span><br><span class=\"line\"><span class=\"string\">192.168.31.72 k8s-node1 </span></span><br><span class=\"line\"><span class=\"string\">192.168.31.73 k8s-node2 </span></span><br><span class=\"line\"><span class=\"string\">EOF</span> </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1 </span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1 </span></span><br><span class=\"line\"><span class=\"string\">EOF</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生效配置</span></span><br><span class=\"line\">sysctl --system  </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y  ntpdate </span><br><span class=\"line\">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署etcd\"><a href=\"#部署etcd\" class=\"headerlink\" title=\"部署etcd\"></a>部署etcd</h1><div class=\"note info fas fa-bullhorn\">\n            <p>根据规划，我们将在三个节点上部署服务，形成一个etcd集群</p>\n          </div>\n\n\n\n<h2 id=\"创建证书\"><a href=\"#创建证书\" class=\"headerlink\" title=\"创建证书\"></a>创建证书</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装cfssl</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建CA</button></li><li class=\"tab\"><button data-href=\"#comments-3\">签发etcd证书</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>安装cfssl用于生成证书文件，这里我在master节点上进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class=\"line\">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class=\"line\">mv cfssl_linux-amd64 /usr/<span class=\"built_in\">local</span>/bin/cfssl</span><br><span class=\"line\">mv cfssljson_linux-amd64 /usr/<span class=\"built_in\">local</span>/bin/cfssljson</span><br><span class=\"line\">mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建证书目录</span></span><br><span class=\"line\">mkdir -p ~/TLS/&#123;etcd,k8s&#125;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/etcd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自签CA</span></span><br><span class=\"line\">cat &gt; ca-config.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;signing&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;default&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;expiry&quot;: &quot;87600h&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;profiles&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;www&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">         &quot;expiry&quot;: &quot;87600h&quot;,</span></span><br><span class=\"line\"><span class=\"string\">         &quot;usages&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">            &quot;signing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;key encipherment&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;server auth&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;client auth&quot;</span></span><br><span class=\"line\"><span class=\"string\">        ]</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; ca-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd CA&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;Beijing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;Beijing&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>执行完成后会生成<code>ca.pem</code>和<code>ca-key.pem</code>文件</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建申请文件</span></span><br><span class=\"line\">cat &gt; server-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;hosts&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.31.71&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.31.72&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.31.73&quot;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;BeiJing&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>执行完成后会生成<code>server.pem</code>和<code>server-key.pem</code>文件</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"部署etcd集群\"><a href=\"#部署etcd集群\" class=\"headerlink\" title=\"部署etcd集群\"></a>部署etcd集群</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建服务启动文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">拷贝证书</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建工作目录</span></span><br><span class=\"line\">mkdir /opt/etcd/&#123;bin,cfg,ssl&#125; -p</span><br><span class=\"line\">tar zxvf etcd-v3.4.9-linux-amd64.tar.gz</span><br><span class=\"line\">mv etcd-v3.4.9-linux-amd64/&#123;etcd,etcdctl&#125; /opt/etcd/bin/</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#[Member]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_NAME=&quot;etcd-1&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.31.71:2380&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.31.71:2379&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#[Clustering]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.31.71:2380&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.31.71:2379&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ETCD_NAME：节点名称，集群中唯一</li>\n<li>ETCD_DATA_DIR：数据目录</li>\n<li>ETCD_LISTEN_PEER_URLS：集群通信监听地址</li>\n<li>ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址</li>\n<li>ETCD_INITIAL_ADVERTISE_PEERURLS：集群通告地址</li>\n<li>ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址</li>\n<li>ETCD_INITIAL_CLUSTER：集群节点地址</li>\n<li>ETCD_INITIALCLUSTER_TOKEN：集群Token</li>\n<li>ETCD_INITIALCLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Etcd Server</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=network-online.target</span></span><br><span class=\"line\"><span class=\"string\">Wants=network-online.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=notify</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/etcd/cfg/etcd.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/etcd/bin/etcd \\</span></span><br><span class=\"line\"><span class=\"string\">--cert-file=/opt/etcd/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--key-file=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-cert-file=/opt/etcd/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-key-file=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--trusted-ca-file=/opt/etcd/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--logger=zap</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><p>首先启动第一个节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start etcd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> etcd</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将上一步中的文件都拷贝到其他节点上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /opt/etcd/ root@192.168.31.72:/opt/</span><br><span class=\"line\">scp /usr/lib/systemd/system/etcd.service root@192.168.31.72:/usr/lib/systemd/system/</span><br><span class=\"line\">scp -r /opt/etcd/ root@192.168.31.73:/opt/</span><br><span class=\"line\">scp /usr/lib/systemd/system/etcd.service root@192.168.31.73:/usr/lib/systemd/system/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意，拷贝过去后需要修改一下配置文件的内容，将IP和节点名称修改为当前所在服务器的地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /opt/etcd/cfg/etcd.conf</span><br><span class=\"line\"><span class=\"comment\">#[Member]</span></span><br><span class=\"line\">ETCD_NAME=<span class=\"string\">&quot;etcd-1&quot;</span>   <span class=\"comment\"># 修改此处，节点2改为etcd-2，节点3改为etcd-3</span></span><br><span class=\"line\">ETCD_DATA_DIR=<span class=\"string\">&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=<span class=\"string\">&quot;https://192.168.31.71:2380&quot;</span>   <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.31.71:2379&quot;</span> <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[Clustering]</span></span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class=\"string\">&quot;https://192.168.31.71:2380&quot;</span> <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.31.71:2379&quot;</span> <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER=<span class=\"string\">&quot;etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380&quot;</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_TOKEN=<span class=\"string\">&quot;etcd-cluster&quot;</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_STATE=<span class=\"string\">&quot;new&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在启动剩下的两个节点，步骤同上。</p>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETCDCTL_API=3 /opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=<span class=\"string\">&quot;https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379&quot;</span> endpoint health --write-out=table</span><br><span class=\"line\"></span><br><span class=\"line\">+----------------------------+--------+-------------+-------+</span><br><span class=\"line\">|          ENDPOINT    | HEALTH |    TOOK     | ERROR |</span><br><span class=\"line\">+----------------------------+--------+-------------+-------+</span><br><span class=\"line\">| https://192.168.31.71:2379 |   <span class=\"literal\">true</span> | 10.301506ms |    |</span><br><span class=\"line\">| https://192.168.31.73:2379 |   <span class=\"literal\">true</span> | 12.87467ms |     |</span><br><span class=\"line\">| https://192.168.31.72:2379 |   <span class=\"literal\">true</span> | 13.225954ms |    |</span><br><span class=\"line\">+----------------------------+--------+-------------+-------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"note success fas fa-bullhorn\">\n            <p>可以看到集群是正常的，部署成功</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><div class=\"note info fas fa-bullhorn\">\n            <p>在所有的节点都安装docker，也可以换成其他的容器引擎如containerd</p>\n          </div>\n\n\n\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz</span><br><span class=\"line\">tar zxvf docker-19.03.9.tgz</span><br><span class=\"line\">mv docker/* /usr/bin</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建服务启动文件\"><a href=\"#创建服务启动文件\" class=\"headerlink\" title=\"创建服务启动文件\"></a>创建服务启动文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Docker Application Container Engine</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://docs.docker.com</span></span><br><span class=\"line\"><span class=\"string\">After=network-online.target firewalld.service</span></span><br><span class=\"line\"><span class=\"string\">Wants=network-online.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=notify</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/bin/dockerd</span></span><br><span class=\"line\"><span class=\"string\">ExecReload=/bin/kill -s HUP $MAINPID</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=infinity</span></span><br><span class=\"line\"><span class=\"string\">LimitNPROC=infinity</span></span><br><span class=\"line\"><span class=\"string\">LimitCORE=infinity</span></span><br><span class=\"line\"><span class=\"string\">TimeoutStartSec=0</span></span><br><span class=\"line\"><span class=\"string\">Delegate=yes</span></span><br><span class=\"line\"><span class=\"string\">KillMode=process</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">StartLimitBurst=3</span></span><br><span class=\"line\"><span class=\"string\">StartLimitInterval=60s</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/docker</span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>这里使用了阿里云镜像加速器</p>\n          </div>\n\n\n\n\n\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"部署master节点\"><a href=\"#部署master节点\" class=\"headerlink\" title=\"部署master节点\"></a>部署master节点</h1><h2 id=\"生成kube-apiserver证书\"><a href=\"#生成kube-apiserver证书\" class=\"headerlink\" title=\"生成kube-apiserver证书\"></a>生成kube-apiserver证书</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">自签CA</button></li><li class=\"tab\"><button data-href=\"#comments-2\">生成证书</button></li><li class=\"tab\"><button data-href=\"#comments-3\">签发kube-apiserver证书</button></li><li class=\"tab\"><button data-href=\"#comments-4\">生成证书</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; ca-config.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;signing&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;default&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;expiry&quot;: &quot;87600h&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;profiles&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">         &quot;expiry&quot;: &quot;87600h&quot;,</span></span><br><span class=\"line\"><span class=\"string\">         &quot;usages&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">            &quot;signing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;key encipherment&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;server auth&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;client auth&quot;</span></span><br><span class=\"line\"><span class=\"string\">        ]</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">cat &gt; ca-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;Beijing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;Beijing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>会生成<code>ca.pem</code>和<code>ca-key.pem</code>文件。</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; server-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;hosts&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">      &quot;10.0.0.1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;127.0.0.1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.71&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.72&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.73&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.88&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default.svc&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default.svc.cluster&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>文件hosts字段中IP为所有Master/LB/VIP IP，一个都不能少！为了方便后期扩容可以多写几个预留的IP</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"安装kube-apiserver\"><a href=\"#安装kube-apiserver\" class=\"headerlink\" title=\"安装kube-apiserver\"></a>安装kube-apiserver</h2><p><strong><a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md，在这里下载1.20版本的安装包，下载server包就够了，包含了Master和Worker\">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md，在这里下载1.20版本的安装包，下载server包就够了，包含了Master和Worker</a> Node二进制文件。</strong></p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建TLS Token</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; </span><br><span class=\"line\">tar zxvf kubernetes-server-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> kubernetes/server/bin</span><br><span class=\"line\">cp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin</span><br><span class=\"line\">cp kubectl /usr/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝证书</span></span><br><span class=\"line\">cp ~/TLS/k8s/ca*pem ~/TLS/k8s/server*pem /opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_APISERVER_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-servers=https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=192.168.31.71 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--secure-port=6443 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--advertise-address=192.168.31.71 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--allow-privileged=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-cluster-ip-range=10.0.0.0/24 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\\\</span></span><br><span class=\"line\"><span class=\"string\">--authorization-mode=RBAC,Node \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-bootstrap-token-auth=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--token-auth-file=/opt/kubernetes/cfg/token.csv \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-node-port-range=30000-32767 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\\\</span></span><br><span class=\"line\"><span class=\"string\">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-issuer=api \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-signing-key-file=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-cafile=/opt/etcd/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-certfile=/opt/etcd/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-cert-file=/opt/kubernetes/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-key-file=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-allowed-names=kubernetes \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-extra-headers-prefix=X-Remote-Extra- \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-group-headers=X-Remote-Group \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-username-headers=X-Remote-User \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-aggregator-routing=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxage=30 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxbackup=3 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxsize=100 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-path=/opt/kubernetes/logs/k8s-audit.log&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–logtostderr：启用日志</li>\n<li>—v：日志等级</li>\n<li>–log-dir：日志目录</li>\n<li>–etcd-servers：etcd集群地址</li>\n<li>–bind-address：监听地址</li>\n<li>–secure-port：https安全端口</li>\n<li>–advertise-address：集群通告地址</li>\n<li>–allow-privileged：启用授权</li>\n<li>–service-cluster-ip-range：Service虚拟IP地址段</li>\n<li>–enable-admission-plugins：准入控制模块</li>\n<li>–authorization-mode：认证授权，启用RBAC授权和节点自管理</li>\n<li>–enable-bootstrap-token-auth：启用TLS bootstrap机制</li>\n<li>–token-auth-file：bootstrap token文件</li>\n<li>–service-node-port-range：Service nodeport类型默认分配端口范围</li>\n<li>–kubelet-client-xxx：apiserver访问kubelet客户端证书</li>\n<li>–tls-xxx-file：apiserver https证书</li>\n<li>–etcd-xxxfile：连接Etcd集群证书</li>\n<li>–audit-log-xxx：审计日志</li>\n</ul>\n<p>1.20版本必须加的参数：</p>\n<ul>\n<li>–service-account-issuer</li>\n<li>–service-account-signing-key-file</li>\n</ul>\n<p>启动聚合层相关配置：</p>\n<ul>\n<li>–requestheader-client-ca-file</li>\n<li>–proxy-client-cert-file</li>\n<li>–proxy-client-key-file</li>\n<li>–requestheader-allowed-names</li>\n<li>–requestheader-extra-headers-prefix</li>\n<li>–requestheader-group-headers</li>\n<li>–requestheader-username-headers</li>\n<li>–enable-aggregator-routing</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个token</span></span><br><span class=\"line\">head -c 16 /dev/urandom | od -An -t x | tr -d <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件</span></span><br><span class=\"line\">cat &gt; /opt/kubernetes/cfg/token.csv &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">c47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,&quot;system:node-bootstrapper&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes API Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://github.com/kubernetes/kubernetes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-apiserver \\$KUBE_APISERVER_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-apiserver\"><a href=\"#启动kube-apiserver\" class=\"headerlink\" title=\"启动kube-apiserver\"></a>启动kube-apiserver</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-apiserver </span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-apiserver</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"部署kube-controller-manager\"><a href=\"#部署kube-controller-manager\" class=\"headerlink\" title=\"部署kube-controller-manager\"></a>部署kube-controller-manager</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建证书</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--leader-elect=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubeconfig=/opt/kubernetes/cfg/kube-controller-manager.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=127.0.0.1 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--allocate-node-cidrs=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-cidr=10.244.0.0/16 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-cluster-ip-range=10.0.0.0/24 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\\\</span></span><br><span class=\"line\"><span class=\"string\">--root-ca-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-duration=87600h0m0s&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–kubeconfig：连接apiserver配置文件</li>\n<li>–leader-elect：当该组件启动多个时，自动选举（HA）</li>\n<li>–cluster-signing-cert-file/–cluster-signing-key-file：自动为kubelet颁发证书的CA，与apiserver保持一致</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建证书请求文件</span></span><br><span class=\"line\">cat &gt; kube-controller-manager-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;system:kube-controller-manager&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;, </span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/kube-controller-manager.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials kube-controller-manager \\</span><br><span class=\"line\">  --client-certificate=./kube-controller-manager.pem \\</span><br><span class=\"line\">  --client-key=./kube-controller-manager-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=kube-controller-manager \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Controller Manager</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://github.com/kubernetes/kubernetes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-controller-manager \\$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-controller-manager\"><a href=\"#启动kube-controller-manager\" class=\"headerlink\" title=\"启动kube-controller-manager\"></a>启动kube-controller-manager</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-controller-manager</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-controller-manager</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"部署kube-scheduler\"><a href=\"#部署kube-scheduler\" class=\"headerlink\" title=\"部署kube-scheduler\"></a>部署kube-scheduler</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建证书</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_SCHEDULER_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--leader-elect \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubeconfig=/opt/kubernetes/cfg/kube-scheduler.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–kubeconfig：连接apiserver配置文件</li>\n<li>–leader-elect：当该组件启动多个时，自动选举（HA）</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建证书请求文件</span></span><br><span class=\"line\">cat &gt; kube-scheduler-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;system:kube-scheduler&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/kube-scheduler.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials kube-scheduler \\</span><br><span class=\"line\">  --client-certificate=./kube-scheduler.pem \\</span><br><span class=\"line\">  --client-key=./kube-scheduler-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=kube-scheduler \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Scheduler</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://github.com/kubernetes/kubernetes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-scheduler \\$KUBE_SCHEDULER_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-scheduler\"><a href=\"#启动kube-scheduler\" class=\"headerlink\" title=\"启动kube-scheduler\"></a>启动kube-scheduler</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-scheduler</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-scheduler</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建kubectl证书文件连接集群\"><a href=\"#创建kubectl证书文件连接集群\" class=\"headerlink\" title=\"创建kubectl证书文件连接集群\"></a>创建kubectl证书文件连接集群</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cat &gt; admin-csr.json &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;admin&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成kubeconfig</span></span><br><span class=\"line\">mkdir /root/.kube</span><br><span class=\"line\"></span><br><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/root/.kube/config&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials cluster-admin \\</span><br><span class=\"line\">  --client-certificate=./admin.pem \\</span><br><span class=\"line\">  --client-key=./admin-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=cluster-admin \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看集群状态-1\"><a href=\"#查看集群状态-1\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get cs</span><br><span class=\"line\">NAME                STATUS    MESSAGE             ERROR</span><br><span class=\"line\">scheduler             Healthy   ok                  </span><br><span class=\"line\">controller-manager       Healthy   ok                  </span><br><span class=\"line\">etcd-2               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;   </span><br><span class=\"line\">etcd-1               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;   </span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;  </span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>都是<code>health</code>表示集群现在是健康状态</p>\n          </div>\n\n\n\n<h2 id=\"授权kubelet-bootstrap用户允许请求证书\"><a href=\"#授权kubelet-bootstrap用户允许请求证书\" class=\"headerlink\" title=\"授权kubelet-bootstrap用户允许请求证书\"></a>授权kubelet-bootstrap用户允许请求证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create clusterrolebinding kubelet-bootstrap \\</span><br><span class=\"line\">--clusterrole=system:node-bootstrapper \\</span><br><span class=\"line\">--user=kubelet-bootstrap</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署node节点\"><a href=\"#部署node节点\" class=\"headerlink\" title=\"部署node节点\"></a>部署node节点</h1><h2 id=\"创建工作目录并拷贝二进制文件\"><a href=\"#创建工作目录并拷贝二进制文件\" class=\"headerlink\" title=\"创建工作目录并拷贝二进制文件\"></a>创建工作目录并拷贝二进制文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; </span><br><span class=\"line\"><span class=\"built_in\">cd</span> kubernetes/server/bin</span><br><span class=\"line\">cp kubelet kube-proxy /opt/kubernetes/bin  </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"部署kubelet\"><a href=\"#部署kubelet\" class=\"headerlink\" title=\"部署kubelet\"></a>部署kubelet</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置参数文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBELET_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--hostname-override=k8s-master1 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--network-plugin=cni \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--config=/opt/kubernetes/cfg/kubelet-config.yml \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cert-dir=/opt/kubernetes/ssl \\\\</span></span><br><span class=\"line\"><span class=\"string\">--pod-infra-container-image=lizhenliang/pause-amd64:3.0&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–hostname-override：显示名称，集群中唯一</li>\n<li>–network-plugin：启用CNI</li>\n<li>–kubeconfig：空路径，会自动生成，后面用于连接apiserver</li>\n<li>–bootstrap-kubeconfig：首次启动向apiserver申请证书</li>\n<li>–config：配置参数文件</li>\n<li>–cert-dir：kubelet证书生成目录</li>\n<li>–pod-infra-container-image：管理Pod网络容器的镜像</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kubelet-config.yml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"string\">address: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">port: 10250</span></span><br><span class=\"line\"><span class=\"string\">readOnlyPort: 10255</span></span><br><span class=\"line\"><span class=\"string\">cgroupDriver: cgroupfs</span></span><br><span class=\"line\"><span class=\"string\">clusterDNS:</span></span><br><span class=\"line\"><span class=\"string\">- 10.0.0.2</span></span><br><span class=\"line\"><span class=\"string\">clusterDomain: cluster.local </span></span><br><span class=\"line\"><span class=\"string\">failSwapOn: false</span></span><br><span class=\"line\"><span class=\"string\">authentication:</span></span><br><span class=\"line\"><span class=\"string\">  anonymous:</span></span><br><span class=\"line\"><span class=\"string\">    enabled: false</span></span><br><span class=\"line\"><span class=\"string\">  webhook:</span></span><br><span class=\"line\"><span class=\"string\">    cacheTTL: 2m0s</span></span><br><span class=\"line\"><span class=\"string\">    enabled: true</span></span><br><span class=\"line\"><span class=\"string\">  x509:</span></span><br><span class=\"line\"><span class=\"string\">    clientCAFile: /opt/kubernetes/ssl/ca.pem </span></span><br><span class=\"line\"><span class=\"string\">authorization:</span></span><br><span class=\"line\"><span class=\"string\">  mode: Webhook</span></span><br><span class=\"line\"><span class=\"string\">  webhook:</span></span><br><span class=\"line\"><span class=\"string\">    cacheAuthorizedTTL: 5m0s</span></span><br><span class=\"line\"><span class=\"string\">    cacheUnauthorizedTTL: 30s</span></span><br><span class=\"line\"><span class=\"string\">evictionHard:</span></span><br><span class=\"line\"><span class=\"string\">  imagefs.available: 15%</span></span><br><span class=\"line\"><span class=\"string\">  memory.available: 100Mi</span></span><br><span class=\"line\"><span class=\"string\">  nodefs.available: 10%</span></span><br><span class=\"line\"><span class=\"string\">  nodefs.inodesFree: 5%</span></span><br><span class=\"line\"><span class=\"string\">maxOpenFiles: 1000000</span></span><br><span class=\"line\"><span class=\"string\">maxPods: 110</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/bootstrap.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span> <span class=\"comment\"># apiserver IP:PORT</span></span><br><span class=\"line\">TOKEN=<span class=\"string\">&quot;c47ffb939f5ca36231d9e3121a252940&quot;</span> <span class=\"comment\"># 与token.csv里保持一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成 kubelet bootstrap kubeconfig 配置文件</span></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials <span class=\"string\">&quot;kubelet-bootstrap&quot;</span> \\</span><br><span class=\"line\">  --token=<span class=\"variable\">$&#123;TOKEN&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=<span class=\"string\">&quot;kubelet-bootstrap&quot;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Kubelet</span></span><br><span class=\"line\"><span class=\"string\">After=docker.service</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kubelet.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kubelet \\$KUBELET_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kubelet\"><a href=\"#启动kubelet\" class=\"headerlink\" title=\"启动kubelet\"></a>启动kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"审批kubelet证书申请并加入集群\"><a href=\"#审批kubelet证书申请并加入集群\" class=\"headerlink\" title=\"审批kubelet证书申请并加入集群\"></a>审批kubelet证书申请并加入集群</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看kubelet证书请求</span></span><br><span class=\"line\">kubectl get csr</span><br><span class=\"line\">NAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION</span><br><span class=\"line\">node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A   6m3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批准申请</span></span><br><span class=\"line\">kubectl certificate approve node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点</span></span><br><span class=\"line\">kubectl get node</span><br><span class=\"line\">NAME         STATUS     ROLES    AGE   VERSION</span><br><span class=\"line\">k8s-master1   NotReady   &lt;none&gt;   7s    v1.18.3</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>由于网络插件还没有部署，节点会没有准备就绪 NotReady</p>\n          </div>\n\n\n\n<h2 id=\"部署kube-proxy\"><a href=\"#部署kube-proxy\" class=\"headerlink\" title=\"部署kube-proxy\"></a>部署kube-proxy</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置参数文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kube-proxy证书</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-5\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-proxy.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_PROXY_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--config=/opt/kubernetes/cfg/kube-proxy-config.yml&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-proxy-config.yml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"string\">bindAddress: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">metricsBindAddress: 0.0.0.0:10249</span></span><br><span class=\"line\"><span class=\"string\">clientConnection:</span></span><br><span class=\"line\"><span class=\"string\">  kubeconfig: /opt/kubernetes/cfg/kube-proxy.kubeconfig</span></span><br><span class=\"line\"><span class=\"string\">hostnameOverride: k8s-master1</span></span><br><span class=\"line\"><span class=\"string\">clusterCIDR: 10.0.0.0/24</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建证书请求文件</span></span><br><span class=\"line\">cat &gt; kube-proxy-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/kube-proxy.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials kube-proxy \\</span><br><span class=\"line\">  --client-certificate=./kube-proxy.pem \\</span><br><span class=\"line\">  --client-key=./kube-proxy-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=kube-proxy \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Proxy</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-proxy.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-proxy \\$KUBE_PROXY_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-proxy\"><a href=\"#启动kube-proxy\" class=\"headerlink\" title=\"启动kube-proxy\"></a>启动kube-proxy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-proxy</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-proxy</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署网络插件callico\"><a href=\"#部署网络插件callico\" class=\"headerlink\" title=\"部署网络插件callico\"></a>部署网络插件callico</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查集群pod状态\"><a href=\"#检查集群pod状态\" class=\"headerlink\" title=\"检查集群pod状态\"></a>检查集群pod状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node</span><br><span class=\"line\">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">k8s-master   Ready    &lt;none&gt;   37m   v1.20.4</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"授权apiserver访问kubelet\"><a href=\"#授权apiserver访问kubelet\" class=\"headerlink\" title=\"授权apiserver访问kubelet\"></a>授权apiserver访问kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; apiserver-to-kubelet-rbac.yaml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterRole</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  annotations:</span></span><br><span class=\"line\"><span class=\"string\">    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"string\">  labels:</span></span><br><span class=\"line\"><span class=\"string\">    kubernetes.io/bootstrapping: rbac-defaults</span></span><br><span class=\"line\"><span class=\"string\">  name: system:kube-apiserver-to-kubelet</span></span><br><span class=\"line\"><span class=\"string\">rules:</span></span><br><span class=\"line\"><span class=\"string\">  - apiGroups:</span></span><br><span class=\"line\"><span class=\"string\">      - &quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    resources:</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/proxy</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/stats</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/log</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/spec</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/metrics</span></span><br><span class=\"line\"><span class=\"string\">      - pods/log</span></span><br><span class=\"line\"><span class=\"string\">    verbs:</span></span><br><span class=\"line\"><span class=\"string\">      - &quot;*&quot;</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: system:kube-apiserver</span></span><br><span class=\"line\"><span class=\"string\">  namespace: &quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">roleRef:</span></span><br><span class=\"line\"><span class=\"string\">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"string\">  kind: ClusterRole</span></span><br><span class=\"line\"><span class=\"string\">  name: system:kube-apiserver-to-kubelet</span></span><br><span class=\"line\"><span class=\"string\">subjects:</span></span><br><span class=\"line\"><span class=\"string\">  - apiGroup: rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"string\">    kind: User</span></span><br><span class=\"line\"><span class=\"string\">    name: kubernetes</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f apiserver-to-kubelet-rbac.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"node节点扩容\"><a href=\"#node节点扩容\" class=\"headerlink\" title=\"node节点扩容\"></a>node节点扩容</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拷贝相关文件</span></span><br><span class=\"line\">scp -r /opt/kubernetes root@192.168.31.72:/opt/</span><br><span class=\"line\"></span><br><span class=\"line\">scp -r /usr/lib/systemd/system/&#123;kubelet,kube-proxy&#125;.service root@192.168.31.72:/usr/lib/systemd/system</span><br><span class=\"line\"></span><br><span class=\"line\">scp /opt/kubernetes/ssl/ca.pem root@192.168.31.72:/opt/kubernetes/ssl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node节点上删除kubeconfig文件</span></span><br><span class=\"line\">rm -f /opt/kubernetes/cfg/kubelet.kubeconfig </span><br><span class=\"line\">rm -f /opt/kubernetes/ssl/kubelet*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改kubelet配置文件</span></span><br><span class=\"line\">vi /opt/kubernetes/cfg/kubelet.conf</span><br><span class=\"line\">--hostname-override=k8s-node1 <span class=\"comment\">## 修改这一项</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /opt/kubernetes/cfg/kube-proxy-config.yml</span><br><span class=\"line\">hostnameOverride: k8s-node1  <span class=\"comment\">## 修改这一项</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kubelet kube-proxy</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet kube-proxy</span><br><span class=\"line\">systemctl start kubelet kubelet</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet kubelet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在master上批准请求</span></span><br><span class=\"line\"><span class=\"comment\"># 查看证书请求</span></span><br><span class=\"line\">kubectl get csr</span><br><span class=\"line\">NAME           AGE   SIGNERNAME                    REQUESTOR           CONDITION</span><br><span class=\"line\">node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro   89s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 授权请求</span></span><br><span class=\"line\">kubectl certificate approve node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看node状态</span></span><br><span class=\"line\">kubectl get node</span><br><span class=\"line\">NAME       STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">k8s-master1   Ready    &lt;none&gt;   47m     v1.20.4</span><br><span class=\"line\">k8s-node1    Ready    &lt;none&gt;   6m49s   v1.20.4</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"常用插件部署\"><a href=\"#常用插件部署\" class=\"headerlink\" title=\"常用插件部署\"></a>常用插件部署</h1><h2 id=\"部署dashboard\"><a href=\"#部署dashboard\" class=\"headerlink\" title=\"部署dashboard\"></a>部署dashboard</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class=\"line\">kubectl get pods,svc -n kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建serviceaccount</span></span><br><span class=\"line\">kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class=\"line\">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class=\"line\">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class=\"string\">&#x27;/dashboard-admin/&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上一步将输出一个token，访问：<a href=\"https://NodeIP:30001，输入token即可进入页面\">https://NodeIP:30001，输入token即可进入页面</a></p>\n<h2 id=\"部署coredns\"><a href=\"#部署coredns\" class=\"headerlink\" title=\"部署coredns\"></a>部署coredns</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f coredns.yaml </span><br><span class=\"line\"> </span><br><span class=\"line\">kubectl get pods -n kube-system  </span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE </span><br><span class=\"line\">coredns-5ffbfd976d-j6shb      1/1     Running   0          32s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试解析</span></span><br><span class=\"line\">kubectl run -it --rm dns-test --image=busybox:1.28.4 sh </span><br><span class=\"line\">If you don<span class=\"string\">&#x27;t see a command prompt, try pressing enter. </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">/ # nslookup kubernetes </span></span><br><span class=\"line\"><span class=\"string\">Server:    10.0.0.2 </span></span><br><span class=\"line\"><span class=\"string\">Address 1: 10.0.0.2 kube-dns.kube-system.svc.cluster.local </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">Name:      kubernetes </span></span><br><span class=\"line\"><span class=\"string\">Address 1: 10.0.0.1 kubernetes.default.svc.cluster.local</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了使用二进制方式安装kubernetes 1.20版本集群</p><p>更新于 2021-04-11</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">部署流程</button></li><li class=\"tab\"><button data-href=\"#comments-2\">服务器规划</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>先部署一个单master节点的k8s集群，然后再扩展集群为多master节点实现高可用；</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n<th>组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>k8s-master</td>\n<td>192.168.31.71</td>\n<td>kube-apiserver，kube-controller-manager，kube-scheduler，etcd</td>\n</tr>\n<tr>\n<td>k8s-node1</td>\n<td>192.168.31.72</td>\n<td>kubelet，kube-proxy，docker，etcd</td>\n</tr>\n<tr>\n<td>k8s-node2</td>\n<td>192.168.31.73</td>\n<td>kubelet，kube-proxy，docker，etcd</td>\n</tr>\n</tbody></table><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"初始化配置\"><a href=\"#初始化配置\" class=\"headerlink\" title=\"初始化配置\"></a>初始化配置</h1><p><strong>下面的初始化操作在所有服务器上进行</strong></p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">关闭防火墙</button></li><li class=\"tab\"><button data-href=\"#comments-2\">关闭selinux和swap</button></li><li class=\"tab\"><button data-href=\"#comments-3\">添加host</button></li><li class=\"tab\"><button data-href=\"#comments-4\">内核参数设置</button></li><li class=\"tab\"><button data-href=\"#comments-5\">时间同步</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld </span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld </span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>生产环境其实建议按需按端口开放</p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭selinux </span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config  </span><br><span class=\"line\">setenforce 0  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 关闭swap </span></span><br><span class=\"line\">swapoff -a </span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/hosts &lt;&lt; <span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">192.168.31.71 k8s-master1 </span></span><br><span class=\"line\"><span class=\"string\">192.168.31.72 k8s-node1 </span></span><br><span class=\"line\"><span class=\"string\">192.168.31.73 k8s-node2 </span></span><br><span class=\"line\"><span class=\"string\">EOF</span> </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class=\"string\">EOF </span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1 </span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1 </span></span><br><span class=\"line\"><span class=\"string\">EOF</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生效配置</span></span><br><span class=\"line\">sysctl --system  </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y  ntpdate </span><br><span class=\"line\">ntpdate time.windows.com</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署etcd\"><a href=\"#部署etcd\" class=\"headerlink\" title=\"部署etcd\"></a>部署etcd</h1><div class=\"note info fas fa-bullhorn\">\n            <p>根据规划，我们将在三个节点上部署服务，形成一个etcd集群</p>\n          </div>\n\n\n\n<h2 id=\"创建证书\"><a href=\"#创建证书\" class=\"headerlink\" title=\"创建证书\"></a>创建证书</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装cfssl</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建CA</button></li><li class=\"tab\"><button data-href=\"#comments-3\">签发etcd证书</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>安装cfssl用于生成证书文件，这里我在master节点上进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class=\"line\">chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64</span><br><span class=\"line\">mv cfssl_linux-amd64 /usr/<span class=\"built_in\">local</span>/bin/cfssl</span><br><span class=\"line\">mv cfssljson_linux-amd64 /usr/<span class=\"built_in\">local</span>/bin/cfssljson</span><br><span class=\"line\">mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo </span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建证书目录</span></span><br><span class=\"line\">mkdir -p ~/TLS/&#123;etcd,k8s&#125;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/etcd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自签CA</span></span><br><span class=\"line\">cat &gt; ca-config.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;signing&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;default&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;expiry&quot;: &quot;87600h&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;profiles&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;www&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">         &quot;expiry&quot;: &quot;87600h&quot;,</span></span><br><span class=\"line\"><span class=\"string\">         &quot;usages&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">            &quot;signing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;key encipherment&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;server auth&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;client auth&quot;</span></span><br><span class=\"line\"><span class=\"string\">        ]</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; ca-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd CA&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;Beijing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;Beijing&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>执行完成后会生成<code>ca.pem</code>和<code>ca-key.pem</code>文件</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建申请文件</span></span><br><span class=\"line\">cat &gt; server-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;etcd&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;hosts&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.31.71&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.31.72&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;192.168.31.73&quot;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;BeiJing&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>执行完成后会生成<code>server.pem</code>和<code>server-key.pem</code>文件</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"部署etcd集群\"><a href=\"#部署etcd集群\" class=\"headerlink\" title=\"部署etcd集群\"></a>部署etcd集群</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建服务启动文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">拷贝证书</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建工作目录</span></span><br><span class=\"line\">mkdir /opt/etcd/&#123;bin,cfg,ssl&#125; -p</span><br><span class=\"line\">tar zxvf etcd-v3.4.9-linux-amd64.tar.gz</span><br><span class=\"line\">mv etcd-v3.4.9-linux-amd64/&#123;etcd,etcdctl&#125; /opt/etcd/bin/</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">#[Member]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_NAME=&quot;etcd-1&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.31.71:2380&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.31.71:2379&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#[Clustering]</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.31.71:2380&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.31.71:2379&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span></span><br><span class=\"line\"><span class=\"string\">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ETCD_NAME：节点名称，集群中唯一</li>\n<li>ETCD_DATA_DIR：数据目录</li>\n<li>ETCD_LISTEN_PEER_URLS：集群通信监听地址</li>\n<li>ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址</li>\n<li>ETCD_INITIAL_ADVERTISE_PEERURLS：集群通告地址</li>\n<li>ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址</li>\n<li>ETCD_INITIAL_CLUSTER：集群节点地址</li>\n<li>ETCD_INITIALCLUSTER_TOKEN：集群Token</li>\n<li>ETCD_INITIALCLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Etcd Server</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\">After=network-online.target</span></span><br><span class=\"line\"><span class=\"string\">Wants=network-online.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=notify</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/etcd/cfg/etcd.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/etcd/bin/etcd \\</span></span><br><span class=\"line\"><span class=\"string\">--cert-file=/opt/etcd/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--key-file=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-cert-file=/opt/etcd/ssl/server.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-key-file=/opt/etcd/ssl/server-key.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--trusted-ca-file=/opt/etcd/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \\</span></span><br><span class=\"line\"><span class=\"string\">--logger=zap</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><p>首先启动第一个节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start etcd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> etcd</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将上一步中的文件都拷贝到其他节点上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /opt/etcd/ root@192.168.31.72:/opt/</span><br><span class=\"line\">scp /usr/lib/systemd/system/etcd.service root@192.168.31.72:/usr/lib/systemd/system/</span><br><span class=\"line\">scp -r /opt/etcd/ root@192.168.31.73:/opt/</span><br><span class=\"line\">scp /usr/lib/systemd/system/etcd.service root@192.168.31.73:/usr/lib/systemd/system/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意，拷贝过去后需要修改一下配置文件的内容，将IP和节点名称修改为当前所在服务器的地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /opt/etcd/cfg/etcd.conf</span><br><span class=\"line\"><span class=\"comment\">#[Member]</span></span><br><span class=\"line\">ETCD_NAME=<span class=\"string\">&quot;etcd-1&quot;</span>   <span class=\"comment\"># 修改此处，节点2改为etcd-2，节点3改为etcd-3</span></span><br><span class=\"line\">ETCD_DATA_DIR=<span class=\"string\">&quot;/var/lib/etcd/default.etcd&quot;</span></span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=<span class=\"string\">&quot;https://192.168.31.71:2380&quot;</span>   <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.31.71:2379&quot;</span> <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[Clustering]</span></span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class=\"string\">&quot;https://192.168.31.71:2380&quot;</span> <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=<span class=\"string\">&quot;https://192.168.31.71:2379&quot;</span> <span class=\"comment\"># 修改此处为当前服务器IP</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER=<span class=\"string\">&quot;etcd-1=https://192.168.31.71:2380,etcd-2=https://192.168.31.72:2380,etcd-3=https://192.168.31.73:2380&quot;</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_TOKEN=<span class=\"string\">&quot;etcd-cluster&quot;</span></span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_STATE=<span class=\"string\">&quot;new&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在启动剩下的两个节点，步骤同上。</p>\n<h2 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ETCDCTL_API=3 /opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=<span class=\"string\">&quot;https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379&quot;</span> endpoint health --write-out=table</span><br><span class=\"line\"></span><br><span class=\"line\">+----------------------------+--------+-------------+-------+</span><br><span class=\"line\">|          ENDPOINT    | HEALTH |    TOOK     | ERROR |</span><br><span class=\"line\">+----------------------------+--------+-------------+-------+</span><br><span class=\"line\">| https://192.168.31.71:2379 |   <span class=\"literal\">true</span> | 10.301506ms |    |</span><br><span class=\"line\">| https://192.168.31.73:2379 |   <span class=\"literal\">true</span> | 12.87467ms |     |</span><br><span class=\"line\">| https://192.168.31.72:2379 |   <span class=\"literal\">true</span> | 13.225954ms |    |</span><br><span class=\"line\">+----------------------------+--------+-------------+-------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<div class=\"note success fas fa-bullhorn\">\n            <p>可以看到集群是正常的，部署成功</p>\n          </div>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><div class=\"note info fas fa-bullhorn\">\n            <p>在所有的节点都安装docker，也可以换成其他的容器引擎如containerd</p>\n          </div>\n\n\n\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz</span><br><span class=\"line\">tar zxvf docker-19.03.9.tgz</span><br><span class=\"line\">mv docker/* /usr/bin</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建服务启动文件\"><a href=\"#创建服务启动文件\" class=\"headerlink\" title=\"创建服务启动文件\"></a>创建服务启动文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Docker Application Container Engine</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://docs.docker.com</span></span><br><span class=\"line\"><span class=\"string\">After=network-online.target firewalld.service</span></span><br><span class=\"line\"><span class=\"string\">Wants=network-online.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=notify</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/usr/bin/dockerd</span></span><br><span class=\"line\"><span class=\"string\">ExecReload=/bin/kill -s HUP $MAINPID</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=infinity</span></span><br><span class=\"line\"><span class=\"string\">LimitNPROC=infinity</span></span><br><span class=\"line\"><span class=\"string\">LimitCORE=infinity</span></span><br><span class=\"line\"><span class=\"string\">TimeoutStartSec=0</span></span><br><span class=\"line\"><span class=\"string\">Delegate=yes</span></span><br><span class=\"line\"><span class=\"string\">KillMode=process</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">StartLimitBurst=3</span></span><br><span class=\"line\"><span class=\"string\">StartLimitInterval=60s</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /etc/docker</span><br><span class=\"line\">cat &gt; /etc/docker/daemon.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;registry-mirrors&quot;: [&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>这里使用了阿里云镜像加速器</p>\n          </div>\n\n\n\n\n\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"部署master节点\"><a href=\"#部署master节点\" class=\"headerlink\" title=\"部署master节点\"></a>部署master节点</h1><h2 id=\"生成kube-apiserver证书\"><a href=\"#生成kube-apiserver证书\" class=\"headerlink\" title=\"生成kube-apiserver证书\"></a>生成kube-apiserver证书</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">自签CA</button></li><li class=\"tab\"><button data-href=\"#comments-2\">生成证书</button></li><li class=\"tab\"><button data-href=\"#comments-3\">签发kube-apiserver证书</button></li><li class=\"tab\"><button data-href=\"#comments-4\">生成证书</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\">cat &gt; ca-config.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;signing&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;default&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;expiry&quot;: &quot;87600h&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;profiles&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">         &quot;expiry&quot;: &quot;87600h&quot;,</span></span><br><span class=\"line\"><span class=\"string\">         &quot;usages&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">            &quot;signing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;key encipherment&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;server auth&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;client auth&quot;</span></span><br><span class=\"line\"><span class=\"string\">        ]</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">cat &gt; ca-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;Beijing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;Beijing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>会生成<code>ca.pem</code>和<code>ca-key.pem</code>文件。</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; server-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;CN&quot;: &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;hosts&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">      &quot;10.0.0.1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;127.0.0.1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.71&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.72&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.73&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;192.168.31.88&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default.svc&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default.svc.cluster&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">        &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">    &#125;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">            &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>文件hosts字段中IP为所有Master/LB/VIP IP，一个都不能少！为了方便后期扩容可以多写几个预留的IP</p>\n          </div><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"安装kube-apiserver\"><a href=\"#安装kube-apiserver\" class=\"headerlink\" title=\"安装kube-apiserver\"></a>安装kube-apiserver</h2><p><strong><a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md，在这里下载1.20版本的安装包，下载server包就够了，包含了Master和Worker\">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md，在这里下载1.20版本的安装包，下载server包就够了，包含了Master和Worker</a> Node二进制文件。</strong></p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">安装</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建TLS Token</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; </span><br><span class=\"line\">tar zxvf kubernetes-server-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> kubernetes/server/bin</span><br><span class=\"line\">cp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin</span><br><span class=\"line\">cp kubectl /usr/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝证书</span></span><br><span class=\"line\">cp ~/TLS/k8s/ca*pem ~/TLS/k8s/server*pem /opt/kubernetes/ssl/</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_APISERVER_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-servers=https://192.168.31.71:2379,https://192.168.31.72:2379,https://192.168.31.73:2379 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=192.168.31.71 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--secure-port=6443 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--advertise-address=192.168.31.71 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--allow-privileged=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-cluster-ip-range=10.0.0.0/24 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\\\</span></span><br><span class=\"line\"><span class=\"string\">--authorization-mode=RBAC,Node \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-bootstrap-token-auth=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--token-auth-file=/opt/kubernetes/cfg/token.csv \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-node-port-range=30000-32767 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--tls-cert-file=/opt/kubernetes/ssl/server.pem  \\\\</span></span><br><span class=\"line\"><span class=\"string\">--tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-issuer=api \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-signing-key-file=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-cafile=/opt/etcd/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-certfile=/opt/etcd/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--etcd-keyfile=/opt/etcd/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-cert-file=/opt/kubernetes/ssl/server.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-key-file=/opt/kubernetes/ssl/server-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-allowed-names=kubernetes \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-extra-headers-prefix=X-Remote-Extra- \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-group-headers=X-Remote-Group \\\\</span></span><br><span class=\"line\"><span class=\"string\">--requestheader-username-headers=X-Remote-User \\\\</span></span><br><span class=\"line\"><span class=\"string\">--enable-aggregator-routing=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxage=30 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxbackup=3 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-maxsize=100 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--audit-log-path=/opt/kubernetes/logs/k8s-audit.log&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–logtostderr：启用日志</li>\n<li>—v：日志等级</li>\n<li>–log-dir：日志目录</li>\n<li>–etcd-servers：etcd集群地址</li>\n<li>–bind-address：监听地址</li>\n<li>–secure-port：https安全端口</li>\n<li>–advertise-address：集群通告地址</li>\n<li>–allow-privileged：启用授权</li>\n<li>–service-cluster-ip-range：Service虚拟IP地址段</li>\n<li>–enable-admission-plugins：准入控制模块</li>\n<li>–authorization-mode：认证授权，启用RBAC授权和节点自管理</li>\n<li>–enable-bootstrap-token-auth：启用TLS bootstrap机制</li>\n<li>–token-auth-file：bootstrap token文件</li>\n<li>–service-node-port-range：Service nodeport类型默认分配端口范围</li>\n<li>–kubelet-client-xxx：apiserver访问kubelet客户端证书</li>\n<li>–tls-xxx-file：apiserver https证书</li>\n<li>–etcd-xxxfile：连接Etcd集群证书</li>\n<li>–audit-log-xxx：审计日志</li>\n</ul>\n<p>1.20版本必须加的参数：</p>\n<ul>\n<li>–service-account-issuer</li>\n<li>–service-account-signing-key-file</li>\n</ul>\n<p>启动聚合层相关配置：</p>\n<ul>\n<li>–requestheader-client-ca-file</li>\n<li>–proxy-client-cert-file</li>\n<li>–proxy-client-key-file</li>\n<li>–requestheader-allowed-names</li>\n<li>–requestheader-extra-headers-prefix</li>\n<li>–requestheader-group-headers</li>\n<li>–requestheader-username-headers</li>\n<li>–enable-aggregator-routing</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个token</span></span><br><span class=\"line\">head -c 16 /dev/urandom | od -An -t x | tr -d <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件</span></span><br><span class=\"line\">cat &gt; /opt/kubernetes/cfg/token.csv &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">c47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,&quot;system:node-bootstrapper&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes API Server</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://github.com/kubernetes/kubernetes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-apiserver \\$KUBE_APISERVER_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-apiserver\"><a href=\"#启动kube-apiserver\" class=\"headerlink\" title=\"启动kube-apiserver\"></a>启动kube-apiserver</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-apiserver </span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-apiserver</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"部署kube-controller-manager\"><a href=\"#部署kube-controller-manager\" class=\"headerlink\" title=\"部署kube-controller-manager\"></a>部署kube-controller-manager</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建证书</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--leader-elect=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubeconfig=/opt/kubernetes/cfg/kube-controller-manager.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=127.0.0.1 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--allocate-node-cidrs=true \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-cidr=10.244.0.0/16 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-cluster-ip-range=10.0.0.0/24 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\\\</span></span><br><span class=\"line\"><span class=\"string\">--root-ca-file=/opt/kubernetes/ssl/ca.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cluster-signing-duration=87600h0m0s&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–kubeconfig：连接apiserver配置文件</li>\n<li>–leader-elect：当该组件启动多个时，自动选举（HA）</li>\n<li>–cluster-signing-cert-file/–cluster-signing-key-file：自动为kubelet颁发证书的CA，与apiserver保持一致</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建证书请求文件</span></span><br><span class=\"line\">cat &gt; kube-controller-manager-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;system:kube-controller-manager&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;, </span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/kube-controller-manager.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials kube-controller-manager \\</span><br><span class=\"line\">  --client-certificate=./kube-controller-manager.pem \\</span><br><span class=\"line\">  --client-key=./kube-controller-manager-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=kube-controller-manager \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Controller Manager</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://github.com/kubernetes/kubernetes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-controller-manager \\$KUBE_CONTROLLER_MANAGER_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-controller-manager\"><a href=\"#启动kube-controller-manager\" class=\"headerlink\" title=\"启动kube-controller-manager\"></a>启动kube-controller-manager</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-controller-manager</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-controller-manager</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"部署kube-scheduler\"><a href=\"#部署kube-scheduler\" class=\"headerlink\" title=\"部署kube-scheduler\"></a>部署kube-scheduler</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建证书</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_SCHEDULER_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--leader-elect \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubeconfig=/opt/kubernetes/cfg/kube-scheduler.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bind-address=127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–kubeconfig：连接apiserver配置文件</li>\n<li>–leader-elect：当该组件启动多个时，自动选举（HA）</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建证书请求文件</span></span><br><span class=\"line\">cat &gt; kube-scheduler-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;system:kube-scheduler&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/kube-scheduler.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials kube-scheduler \\</span><br><span class=\"line\">  --client-certificate=./kube-scheduler.pem \\</span><br><span class=\"line\">  --client-key=./kube-scheduler-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=kube-scheduler \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Scheduler</span></span><br><span class=\"line\"><span class=\"string\">Documentation=https://github.com/kubernetes/kubernetes</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-scheduler \\$KUBE_SCHEDULER_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-scheduler\"><a href=\"#启动kube-scheduler\" class=\"headerlink\" title=\"启动kube-scheduler\"></a>启动kube-scheduler</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-scheduler</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-scheduler</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建kubectl证书文件连接集群\"><a href=\"#创建kubectl证书文件连接集群\" class=\"headerlink\" title=\"创建kubectl证书文件连接集群\"></a>创建kubectl证书文件连接集群</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cat &gt; admin-csr.json &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;admin&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;system:masters&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成kubeconfig</span></span><br><span class=\"line\">mkdir /root/.kube</span><br><span class=\"line\"></span><br><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/root/.kube/config&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials cluster-admin \\</span><br><span class=\"line\">  --client-certificate=./admin.pem \\</span><br><span class=\"line\">  --client-key=./admin-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=cluster-admin \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看集群状态-1\"><a href=\"#查看集群状态-1\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get cs</span><br><span class=\"line\">NAME                STATUS    MESSAGE             ERROR</span><br><span class=\"line\">scheduler             Healthy   ok                  </span><br><span class=\"line\">controller-manager       Healthy   ok                  </span><br><span class=\"line\">etcd-2               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;   </span><br><span class=\"line\">etcd-1               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;   </span><br><span class=\"line\">etcd-0               Healthy   &#123;<span class=\"string\">&quot;health&quot;</span>:<span class=\"string\">&quot;true&quot;</span>&#125;  </span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>都是<code>health</code>表示集群现在是健康状态</p>\n          </div>\n\n\n\n<h2 id=\"授权kubelet-bootstrap用户允许请求证书\"><a href=\"#授权kubelet-bootstrap用户允许请求证书\" class=\"headerlink\" title=\"授权kubelet-bootstrap用户允许请求证书\"></a>授权kubelet-bootstrap用户允许请求证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create clusterrolebinding kubelet-bootstrap \\</span><br><span class=\"line\">--clusterrole=system:node-bootstrapper \\</span><br><span class=\"line\">--user=kubelet-bootstrap</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署node节点\"><a href=\"#部署node节点\" class=\"headerlink\" title=\"部署node节点\"></a>部署node节点</h1><h2 id=\"创建工作目录并拷贝二进制文件\"><a href=\"#创建工作目录并拷贝二进制文件\" class=\"headerlink\" title=\"创建工作目录并拷贝二进制文件\"></a>创建工作目录并拷贝二进制文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; </span><br><span class=\"line\"><span class=\"built_in\">cd</span> kubernetes/server/bin</span><br><span class=\"line\">cp kubelet kube-proxy /opt/kubernetes/bin  </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"部署kubelet\"><a href=\"#部署kubelet\" class=\"headerlink\" title=\"部署kubelet\"></a>部署kubelet</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置参数文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBELET_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--hostname-override=k8s-master1 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--network-plugin=cni \\\\</span></span><br><span class=\"line\"><span class=\"string\">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\\\</span></span><br><span class=\"line\"><span class=\"string\">--config=/opt/kubernetes/cfg/kubelet-config.yml \\\\</span></span><br><span class=\"line\"><span class=\"string\">--cert-dir=/opt/kubernetes/ssl \\\\</span></span><br><span class=\"line\"><span class=\"string\">--pod-infra-container-image=lizhenliang/pause-amd64:3.0&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–hostname-override：显示名称，集群中唯一</li>\n<li>–network-plugin：启用CNI</li>\n<li>–kubeconfig：空路径，会自动生成，后面用于连接apiserver</li>\n<li>–bootstrap-kubeconfig：首次启动向apiserver申请证书</li>\n<li>–config：配置参数文件</li>\n<li>–cert-dir：kubelet证书生成目录</li>\n<li>–pod-infra-container-image：管理Pod网络容器的镜像</li>\n</ul><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kubelet-config.yml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeletConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubelet.config.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"string\">address: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">port: 10250</span></span><br><span class=\"line\"><span class=\"string\">readOnlyPort: 10255</span></span><br><span class=\"line\"><span class=\"string\">cgroupDriver: cgroupfs</span></span><br><span class=\"line\"><span class=\"string\">clusterDNS:</span></span><br><span class=\"line\"><span class=\"string\">- 10.0.0.2</span></span><br><span class=\"line\"><span class=\"string\">clusterDomain: cluster.local </span></span><br><span class=\"line\"><span class=\"string\">failSwapOn: false</span></span><br><span class=\"line\"><span class=\"string\">authentication:</span></span><br><span class=\"line\"><span class=\"string\">  anonymous:</span></span><br><span class=\"line\"><span class=\"string\">    enabled: false</span></span><br><span class=\"line\"><span class=\"string\">  webhook:</span></span><br><span class=\"line\"><span class=\"string\">    cacheTTL: 2m0s</span></span><br><span class=\"line\"><span class=\"string\">    enabled: true</span></span><br><span class=\"line\"><span class=\"string\">  x509:</span></span><br><span class=\"line\"><span class=\"string\">    clientCAFile: /opt/kubernetes/ssl/ca.pem </span></span><br><span class=\"line\"><span class=\"string\">authorization:</span></span><br><span class=\"line\"><span class=\"string\">  mode: Webhook</span></span><br><span class=\"line\"><span class=\"string\">  webhook:</span></span><br><span class=\"line\"><span class=\"string\">    cacheAuthorizedTTL: 5m0s</span></span><br><span class=\"line\"><span class=\"string\">    cacheUnauthorizedTTL: 30s</span></span><br><span class=\"line\"><span class=\"string\">evictionHard:</span></span><br><span class=\"line\"><span class=\"string\">  imagefs.available: 15%</span></span><br><span class=\"line\"><span class=\"string\">  memory.available: 100Mi</span></span><br><span class=\"line\"><span class=\"string\">  nodefs.available: 10%</span></span><br><span class=\"line\"><span class=\"string\">  nodefs.inodesFree: 5%</span></span><br><span class=\"line\"><span class=\"string\">maxOpenFiles: 1000000</span></span><br><span class=\"line\"><span class=\"string\">maxPods: 110</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/bootstrap.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span> <span class=\"comment\"># apiserver IP:PORT</span></span><br><span class=\"line\">TOKEN=<span class=\"string\">&quot;c47ffb939f5ca36231d9e3121a252940&quot;</span> <span class=\"comment\"># 与token.csv里保持一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成 kubelet bootstrap kubeconfig 配置文件</span></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials <span class=\"string\">&quot;kubelet-bootstrap&quot;</span> \\</span><br><span class=\"line\">  --token=<span class=\"variable\">$&#123;TOKEN&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=<span class=\"string\">&quot;kubelet-bootstrap&quot;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Kubelet</span></span><br><span class=\"line\"><span class=\"string\">After=docker.service</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kubelet.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kubelet \\$KUBELET_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kubelet\"><a href=\"#启动kubelet\" class=\"headerlink\" title=\"启动kubelet\"></a>启动kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kubelet</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"审批kubelet证书申请并加入集群\"><a href=\"#审批kubelet证书申请并加入集群\" class=\"headerlink\" title=\"审批kubelet证书申请并加入集群\"></a>审批kubelet证书申请并加入集群</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看kubelet证书请求</span></span><br><span class=\"line\">kubectl get csr</span><br><span class=\"line\">NAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION</span><br><span class=\"line\">node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A   6m3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批准申请</span></span><br><span class=\"line\">kubectl certificate approve node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点</span></span><br><span class=\"line\">kubectl get node</span><br><span class=\"line\">NAME         STATUS     ROLES    AGE   VERSION</span><br><span class=\"line\">k8s-master1   NotReady   &lt;none&gt;   7s    v1.18.3</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info fas fa-bullhorn\">\n            <p>由于网络插件还没有部署，节点会没有准备就绪 NotReady</p>\n          </div>\n\n\n\n<h2 id=\"部署kube-proxy\"><a href=\"#部署kube-proxy\" class=\"headerlink\" title=\"部署kube-proxy\"></a>部署kube-proxy</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置参数文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建kube-proxy证书</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建kubeconfig文件</button></li><li class=\"tab\"><button data-href=\"#comments-5\">创建启动文件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-proxy.conf &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">KUBE_PROXY_OPTS=&quot;--logtostderr=false \\\\</span></span><br><span class=\"line\"><span class=\"string\">--v=2 \\\\</span></span><br><span class=\"line\"><span class=\"string\">--log-dir=/opt/kubernetes/logs \\\\</span></span><br><span class=\"line\"><span class=\"string\">--config=/opt/kubernetes/cfg/kube-proxy-config.yml&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /opt/kubernetes/cfg/kube-proxy-config.yml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">kind: KubeProxyConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class=\"line\"><span class=\"string\">bindAddress: 0.0.0.0</span></span><br><span class=\"line\"><span class=\"string\">metricsBindAddress: 0.0.0.0:10249</span></span><br><span class=\"line\"><span class=\"string\">clientConnection:</span></span><br><span class=\"line\"><span class=\"string\">  kubeconfig: /opt/kubernetes/cfg/kube-proxy.kubeconfig</span></span><br><span class=\"line\"><span class=\"string\">hostnameOverride: k8s-master1</span></span><br><span class=\"line\"><span class=\"string\">clusterCIDR: 10.0.0.0/24</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/TLS/k8s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建证书请求文件</span></span><br><span class=\"line\">cat &gt; kube-proxy-csr.json &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;hosts&quot;: [],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;key&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;algo&quot;: &quot;rsa&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;size&quot;: 2048</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;names&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &#123;</span></span><br><span class=\"line\"><span class=\"string\">      &quot;C&quot;: &quot;CN&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;L&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;ST&quot;: &quot;BeiJing&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;O&quot;: &quot;k8s&quot;,</span></span><br><span class=\"line\"><span class=\"string\">      &quot;OU&quot;: &quot;System&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成证书</span></span><br><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KUBE_CONFIG=<span class=\"string\">&quot;/opt/kubernetes/cfg/kube-proxy.kubeconfig&quot;</span></span><br><span class=\"line\">KUBE_APISERVER=<span class=\"string\">&quot;https://192.168.31.71:6443&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-cluster kubernetes \\</span><br><span class=\"line\">  --certificate-authority=/opt/kubernetes/ssl/ca.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --server=<span class=\"variable\">$&#123;KUBE_APISERVER&#125;</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-credentials kube-proxy \\</span><br><span class=\"line\">  --client-certificate=./kube-proxy.pem \\</span><br><span class=\"line\">  --client-key=./kube-proxy-key.pem \\</span><br><span class=\"line\">  --embed-certs=<span class=\"literal\">true</span> \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config set-context default \\</span><br><span class=\"line\">  --cluster=kubernetes \\</span><br><span class=\"line\">  --user=kube-proxy \\</span><br><span class=\"line\">  --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config use-context default --kubeconfig=<span class=\"variable\">$&#123;KUBE_CONFIG&#125;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=Kubernetes Proxy</span></span><br><span class=\"line\"><span class=\"string\">After=network.target</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">EnvironmentFile=/opt/kubernetes/cfg/kube-proxy.conf</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=/opt/kubernetes/bin/kube-proxy \\$KUBE_PROXY_OPTS</span></span><br><span class=\"line\"><span class=\"string\">Restart=on-failure</span></span><br><span class=\"line\"><span class=\"string\">LimitNOFILE=65536</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"启动kube-proxy\"><a href=\"#启动kube-proxy\" class=\"headerlink\" title=\"启动kube-proxy\"></a>启动kube-proxy</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kube-proxy</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kube-proxy</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署网络插件callico\"><a href=\"#部署网络插件callico\" class=\"headerlink\" title=\"部署网络插件callico\"></a>部署网络插件callico</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f calico.yaml</span><br><span class=\"line\">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查集群pod状态\"><a href=\"#检查集群pod状态\" class=\"headerlink\" title=\"检查集群pod状态\"></a>检查集群pod状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get node</span><br><span class=\"line\">NAME         STATUS   ROLES    AGE   VERSION</span><br><span class=\"line\">k8s-master   Ready    &lt;none&gt;   37m   v1.20.4</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"授权apiserver访问kubelet\"><a href=\"#授权apiserver访问kubelet\" class=\"headerlink\" title=\"授权apiserver访问kubelet\"></a>授权apiserver访问kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; apiserver-to-kubelet-rbac.yaml &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterRole</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  annotations:</span></span><br><span class=\"line\"><span class=\"string\">    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span></span><br><span class=\"line\"><span class=\"string\">  labels:</span></span><br><span class=\"line\"><span class=\"string\">    kubernetes.io/bootstrapping: rbac-defaults</span></span><br><span class=\"line\"><span class=\"string\">  name: system:kube-apiserver-to-kubelet</span></span><br><span class=\"line\"><span class=\"string\">rules:</span></span><br><span class=\"line\"><span class=\"string\">  - apiGroups:</span></span><br><span class=\"line\"><span class=\"string\">      - &quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    resources:</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/proxy</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/stats</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/log</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/spec</span></span><br><span class=\"line\"><span class=\"string\">      - nodes/metrics</span></span><br><span class=\"line\"><span class=\"string\">      - pods/log</span></span><br><span class=\"line\"><span class=\"string\">    verbs:</span></span><br><span class=\"line\"><span class=\"string\">      - &quot;*&quot;</span></span><br><span class=\"line\"><span class=\"string\">---</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"string\">metadata:</span></span><br><span class=\"line\"><span class=\"string\">  name: system:kube-apiserver</span></span><br><span class=\"line\"><span class=\"string\">  namespace: &quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">roleRef:</span></span><br><span class=\"line\"><span class=\"string\">  apiGroup: rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"string\">  kind: ClusterRole</span></span><br><span class=\"line\"><span class=\"string\">  name: system:kube-apiserver-to-kubelet</span></span><br><span class=\"line\"><span class=\"string\">subjects:</span></span><br><span class=\"line\"><span class=\"string\">  - apiGroup: rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"string\">    kind: User</span></span><br><span class=\"line\"><span class=\"string\">    name: kubernetes</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f apiserver-to-kubelet-rbac.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"node节点扩容\"><a href=\"#node节点扩容\" class=\"headerlink\" title=\"node节点扩容\"></a>node节点扩容</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拷贝相关文件</span></span><br><span class=\"line\">scp -r /opt/kubernetes root@192.168.31.72:/opt/</span><br><span class=\"line\"></span><br><span class=\"line\">scp -r /usr/lib/systemd/system/&#123;kubelet,kube-proxy&#125;.service root@192.168.31.72:/usr/lib/systemd/system</span><br><span class=\"line\"></span><br><span class=\"line\">scp /opt/kubernetes/ssl/ca.pem root@192.168.31.72:/opt/kubernetes/ssl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node节点上删除kubeconfig文件</span></span><br><span class=\"line\">rm -f /opt/kubernetes/cfg/kubelet.kubeconfig </span><br><span class=\"line\">rm -f /opt/kubernetes/ssl/kubelet*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改kubelet配置文件</span></span><br><span class=\"line\">vi /opt/kubernetes/cfg/kubelet.conf</span><br><span class=\"line\">--hostname-override=k8s-node1 <span class=\"comment\">## 修改这一项</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi /opt/kubernetes/cfg/kube-proxy-config.yml</span><br><span class=\"line\">hostnameOverride: k8s-node1  <span class=\"comment\">## 修改这一项</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start kubelet kube-proxy</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet kube-proxy</span><br><span class=\"line\">systemctl start kubelet kubelet</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> kubelet kubelet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在master上批准请求</span></span><br><span class=\"line\"><span class=\"comment\"># 查看证书请求</span></span><br><span class=\"line\">kubectl get csr</span><br><span class=\"line\">NAME           AGE   SIGNERNAME                    REQUESTOR           CONDITION</span><br><span class=\"line\">node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro   89s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 授权请求</span></span><br><span class=\"line\">kubectl certificate approve node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看node状态</span></span><br><span class=\"line\">kubectl get node</span><br><span class=\"line\">NAME       STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">k8s-master1   Ready    &lt;none&gt;   47m     v1.20.4</span><br><span class=\"line\">k8s-node1    Ready    &lt;none&gt;   6m49s   v1.20.4</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"常用插件部署\"><a href=\"#常用插件部署\" class=\"headerlink\" title=\"常用插件部署\"></a>常用插件部署</h1><h2 id=\"部署dashboard\"><a href=\"#部署dashboard\" class=\"headerlink\" title=\"部署dashboard\"></a>部署dashboard</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kubernetes-dashboard.yaml</span><br><span class=\"line\">kubectl get pods,svc -n kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建serviceaccount</span></span><br><span class=\"line\">kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class=\"line\">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class=\"line\">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class=\"string\">&#x27;/dashboard-admin/&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上一步将输出一个token，访问：<a href=\"https://NodeIP:30001，输入token即可进入页面\">https://NodeIP:30001，输入token即可进入页面</a></p>\n<h2 id=\"部署coredns\"><a href=\"#部署coredns\" class=\"headerlink\" title=\"部署coredns\"></a>部署coredns</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f coredns.yaml </span><br><span class=\"line\"> </span><br><span class=\"line\">kubectl get pods -n kube-system  </span><br><span class=\"line\">NAME                          READY   STATUS    RESTARTS   AGE </span><br><span class=\"line\">coredns-5ffbfd976d-j6shb      1/1     Running   0          32s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试解析</span></span><br><span class=\"line\">kubectl run -it --rm dns-test --image=busybox:1.28.4 sh </span><br><span class=\"line\">If you don<span class=\"string\">&#x27;t see a command prompt, try pressing enter. </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">/ # nslookup kubernetes </span></span><br><span class=\"line\"><span class=\"string\">Server:    10.0.0.2 </span></span><br><span class=\"line\"><span class=\"string\">Address 1: 10.0.0.2 kube-dns.kube-system.svc.cluster.local </span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">Name:      kubernetes </span></span><br><span class=\"line\"><span class=\"string\">Address 1: 10.0.0.1 kubernetes.default.svc.cluster.local</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"在k8s中使用EFLK进行日志收集","date":"2021-03-27T04:31:50.000Z","description":"在kubernetes中使用ELFK进行日志收集和展示","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用filebeat、kafka、logstash、elasticsearch、kibana进行日志收集\n\n更新于 2021-03-27\n\n{% endnote %}\n\n<br>\n\n\n\n# 架构方案\n\n## 架构\n\n整体收集方案使用如下的组件：\n\n- `filebeat`：采集节点和容器日志，发送到kafka；\n- `kafka`：接收filebeat发送的日志消息；\n- `logstash`：从kafka中消费日志消息并进行处理；\n- `elasticsearch`：进行日志存储；\n- `kibana`：日志可视化展示；\n\n\n\n> 日志文件 --> filebeat --> kafka --> logstash --> elasticsearch --> kibana\n\n\n\n## 版本选择\n\n- `filebeat`：7.6.2；\n- `kafka`：2.12-2.5.0；\n- `zookeeper`：3.5.7；\n- `logstash`：7.8.0；\n- `elasticsearch`：7.8.0；\n- `kibana`：7.8.0；\n\n\n\n## 方案可能存在的问题\n\n这套日志收集方案可能存在下面的问题：\n\n- elasticsearch可能存在瓶颈（es还需要进一步调优）；\n- logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；\n- ......\n\n\n\n<br>\n\n\n\n# 准备工作\n\n{% tabs comments %}\n\n<!-- tab 准备nfs相关资源 -->\n\n这里使用nfs作为底层存储，相关的创建方法可以参考：{% post_link 在k8s中使用nfs存储 %}，当然也可以使用其他的存储系统。\n\n<!-- endtab -->\n\n<!-- tab 创建namespace -->\n\n使用下面的yaml文件创建一个namespace：\n\n```yaml\n# namesapce.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: logging\n```\n\n\n\n```bash\nkubectl apply -f namespace.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 设置elasticsearch密码 -->\n\nelasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：\n\n```bash\nespassword=\"elastic\"\n\nkubectl create secret generic es-logging-password --from-literal=elastic='elastic' -n logging\n```\n\n\n\n> 这里讲elasticsearch密码设置为：`elastic`\n\n<!-- endtab -->\n\n\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署elasticsearch\n\n## 部署相关资源\n\n{% tabs comments %}\n\n<!-- tab 创建elasticsearch配置 -->\n\n```yaml\n# elasticsearch-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: es-logging-config\n  namespace: logging\ndata:\n  elasticsearch.yml: |\n    cluster.name: es-logging-cluster\n    node.name: ${NODE_NAME}\n    network.host: 0.0.0.0\n    http.port: 9200\n    transport.port: 9300\n    discovery.seed_hosts: [\"es-logging-cluster\"]\n    cluster.initial_master_nodes:\n      - es-logging-0\n      - es-logging-1\n      - es-logging-2\n    xpack.monitoring.collection.enabled: true\n    xpack.security.enabled: true\n    xpack.license.self_generated.type: basic\n    indices.lifecycle.history_index_enabled: false\n    xpack.ilm.enabled: true\n    \n    cluster.routing.allocation.disk.threshold_enabled: false\n\n    # xpack.security.transport.ssl.enabled: true\n    # xpack.security.transport.ssl.verification_mode: certificate\n    # xpack.security.transport.ssl.key: certs/es-logging-service.key\n    # xpack.security.transport.ssl.certificate: certs/es-logging-service.crt\n    # xpack.security.transport.ssl.certificate_authorities: certs/ca.crt\n    # xpack.security.http.ssl.enabled: false\n    # xpack.security.authc.realms:\n    #   native.realm1:\n    #     order: 0\n  es_check.sh: >\n    #!/bin/bash\n\n    ES_REST_BASEURL=http://localhost:9200\n\n    EXPECTED_RESPONSE_CODE=200\n\n    max_time=${READINESS_PROBE_TIMEOUT:-30}\n\n\n    function check_if_ready() {\n      path=\"$1\"\n      err_msg=\"$2\"\n      response_code=$(curl -s -k --head \\\n          -u elastic:${ELASTIC_PASSWORD} \\\n          --max-time $max_time \\\n          -o /dev/null \\\n          -w '%{response_code}' \\\n          \"${ES_REST_BASEURL}${path}\")\n\n      if [ \"${response_code}\" != ${EXPECTED_RESPONSE_CODE} ]; then\n        echo \"${err_msg} [response code: ${response_code}]\"\n        exit 1\n      fi\n      exit 0\n    }\n\n\n    check_if_ready \"/\" \"Elasticsearch node is not ready to accept HTTP requests yet\"\n```\n\n\n\n配置中的相关参数解释：\n\n- `cluster.name`：设置es集群名称，用于唯一标识一个集群；\n- `network.host`：监听的地址；\n- `discovery.seed_hosts`：节点发现方式；\n- `xpack.security.enabled`起用xpack安全组件；\n- `cluster.routing.allocation.disk.threshold_enabled`是否启动磁盘分配器；\n\n> `cluster.routing.allocation.disk.threshold_enabled`这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。[相关文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation)\n\n\n\nes启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：\n\n```bash\nkubectl apply -f elasticsearch-config.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建elasticsearch集群 -->\n\n使用下面的yaml文件创建一个namespace：\n\n```yaml\n# elasticsearch-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: es-logging\n  serviceName: es-logging-cluster\n  template:\n    metadata:\n      labels:\n        app: es-logging\n      name: es-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - es-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: ES_JAVA_OPTS\n              value: '-Xms2g -Xmx2g'\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'docker.elastic.co/elasticsearch/elasticsearch:7.8.0'\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          name: es-logging\n          ports:\n            - containerPort: 9200\n              name: tcp-9200\n              protocol: TCP\n            - containerPort: 9300\n              name: tcp-9300\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n          volumeMounts:\n            - mountPath: /usr/share/elasticsearch/data\n              name: es7x-data\n            - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\n              name: es7x-config\n              subPath: elasticsearch.yml\n            - mountPath: /usr/share/elasticsearch/config/es_check.sh\n              name: es7x-config\n              subPath: es_check.sh\n            # - mountPath: /usr/share/elasticsearch/config/certs\n            #   name: es-certs\n            #   readOnly: true\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n            - name: ES_URI\n              value: 'http://elastic:$(ELASTIC_PASSWORD)@localhost:9200'\n            - name: ES_INDICES\n              value: 'true'\n            - name: ES_ALL\n              value: 'true'\n            - name: ES_INDICES_SETTINGS\n              value: 'true'\n          image: 'justwatch/elasticsearch_exporter:1.1.0'\n          imagePullPolicy: IfNotPresent\n          name: elasticsearch-exporter\n          ports:\n            - containerPort: 9114\n              name: tcp-9114\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 200Mi\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sysctl\n            - '-w'\n            - vm.max_map_count=262144\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-vm-max-map\n          securityContext:\n            privileged: true\n            runAsUser: 0\n        - command:\n            - sh\n            - '-c'\n            - ulimit -n 65536\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-fd-ulimit\n          securityContext:\n            privileged: true\n            runAsUser: 0\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n    #   serviceAccount: es-logging-sa\n    #   serviceAccountName: es-logging-sa\n      terminationGracePeriodSeconds: 10\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: es-logging-config\n          name: es7x-config\n        # - name: es-certs\n        #   secret:\n        #     defaultMode: 420\n        #     secretName: es-logging-certs\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        labels:\n          name: es-logging\n        name: es7x-data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\nes集群使用了statefulset方式部署，其中storageclass`logging-storageclass`需要自己手动创建，执行下面的命令完成部署。\n\n```bash\nkubectl apply -f elasticsearch-cluster.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建service -->\n\n```yaml\n# elasticsearch-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-9200\n      port: 9200\n      protocol: TCP\n      targetPort: 9200\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n    monitor-app: elasticsearch-exporter\n  name: es-logging-cluster\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: tcp-9300\n      port: 9300\n      protocol: TCP\n      targetPort: 9300\n    - name: tcp-9114\n      port: 9114\n      protocol: TCP\n      targetPort: 9114\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面的命令完成部署：\n\n```bash\nkubeclt apply -f elasticsearch-service.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查\n\n首先确保所有的pod都处于running状态：\n\n```bash\nkubectl get pod -n logging | grep es\n```\n\n<img src=\"./es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n然后执行下面的命令：\n\n```bash\nkubectl logs -f es-logging-1 -n logging -c es-logging\n```\n\n\n\n如果输出的日志中有`Cluster health status changed from [YELLOW] to [GREEN]`，说明集群正常了。\n\n\n\n<br>\n\n\n\n# 部署kafka\n\n## 部署zookeeper\n\n{% tabs comments %}\n\n<!-- tab 部署zookeeper集群 -->\n\n```yaml\n# zookeeper-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: zk-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zk-logging\n  serviceName: zk-logging-headless\n  template:\n    metadata:\n      labels:\n        app: zk-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - zk-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: ZOO_SERVERS\n              value: >-\n                server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n            - name: ZOO_4LW_COMMANDS_WHITELIST\n              value: 'ruok,srvr,conf,stat'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'zookeeper:3.5.7'\n          imagePullPolicy: Always\n          name: zk-logging\n          ports:\n            - containerPort: 2181\n              name: client\n              protocol: TCP\n            - containerPort: 2888\n              name: server\n              protocol: TCP\n            - containerPort: 3888\n              name: leader-election\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - >-\n              echo $(( $(echo ${POD_NAME} | awk -F \"-\" '{print $NF}') + 1 )) >\n              /data/myid\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: init-zk-logging\n          resources: {}\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n    #   nodeSelector:\n        # node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n    #   serviceAccount: zk-logging-sa\n    #   serviceAccountName: zk-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 5Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n使用下面的命令完成部署：\n\n```bash\nkubectl apply -f zookeeper-cluster.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署service对象 -->\n\n```yaml\n# zookeeper-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: client\n      port: 2181\n      protocol: TCP\n      targetPort: 2181\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-headless\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 2888\n      protocol: TCP\n      targetPort: 2888\n    - name: leader-election\n      port: 3888\n      protocol: TCP\n      targetPort: 3888\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面命令完成部署：\n\n```bash\nkubectl apply -f zookeeper-service.yaml\n```\n\n\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 部署kafka\n\n{% tabs comments %}\n\n<!-- tab 部署kafka集群 -->\n\n```yaml\n# kafka-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: kafka-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kafka-logging\n  serviceName: kafka-logging-service\n  template:\n    metadata:\n      labels:\n        app: kafka-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - kafka-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: KAFKA_REPLICAS\n              value: '3'\n            - name: KAFKA_ZK_LOCAL\n              value: 'false'\n            - name: KAFKA_HEAP_OPTS\n              value: '-Xmx1024M -Xms1024M'\n            - name: SERVER_num_partitions\n              value: '3'\n            - name: SERVER_delete_topic_enable\n              value: 'true'\n            - name: SERVER_log_retention_hours\n              value: '2147483647'\n            - name: KAFKA_ADVERTISED_PORT\n              value: '9092'\n            - name: SERVER_zookeeper_connection_timeout_ms\n              value: '6000'\n            - name: SERVER_log_dirs\n              value: /opt/kafka/data/logs\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: KAFKA_ZOOKEEPER_CONNECT\n              value: 'zk-logging-service.logging.svc.cluster.local:2181'\n            - name: BROKER_ID_COMMAND\n              value: 'hostname | awk -F ''-'' ''{print $NF}'''\n            - name: KAFKA_PORT_NUMBER\n              value: '9092'\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              value: >-\n                $(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'wurstmeister/kafka:2.12-2.5.0'\n          imagePullPolicy: Always\n          name: kafka-logging\n          ports:\n            - containerPort: 9092\n              name: server\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /kafka\n              name: datadir\n      dnsPolicy: ClusterFirst\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 0\n        runAsUser: 0\n    #   serviceAccount: kafka-logging-sa\n    #   serviceAccountName: kafka-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n使用下面的命令完成部署：\n\n```bash\nkubectl apply -f kafka-cluster.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署service对象 -->\n\n```yaml\n# kafka-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-logging\n  name: kafka-logging-service\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 9092\n      protocol: TCP\n      targetPort: 9092\n  selector:\n    app: kafka-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面命令完成部署：\n\n```bash\nkubectl apply -f kafka-service.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署kafka-manager -->\n\nkafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。\n\n```yaml\n# kafka-manager.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kafka-manager\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kafka-manager\n    spec:\n      containers:\n        - env:\n            - name: ZK_HOSTS\n              value: 'zk-logging-service.logging.svc:2181'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'kafkamanager/kafka-manager:2.0.0.2'\n          imagePullPolicy: IfNotPresent\n          name: kafka-manager\n          ports:\n            - containerPort: 9000\n              name: tcp-9000\n              protocol: TCP\n          resources: {}\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  ports:\n    - name: kafka-manager\n      port: 9000\n      protocol: TCP\n      targetPort: 9000\n  selector:\n    app: kafka-manager\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面命令完成部署：\n\n```bash\nkubectl apply -f kafka-manager.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建ingress -->\n\n```yaml\n# kafka-manager-ingress.yaml\nkind: Ingress\nmetadata:\n   name: kafka-manager\n   namespace: logging\nspec:\n   rules:\n   - host: kafka-manager.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kafka-manager\n          servicePort: 9000\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\nkubectl apply -f kafka-manager-ingress.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查服务\n\n检查所有的pod都正常运行：\n\n```bash\nkubectl get pod,svc,ingress -n logging | grep -E 'kafka|zk'\n```\n\n<img src=\"./kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n## 创建nginx配置\n\n在nginx服务器上增加kafka-manager配置，代理kafka服务：\n\n```nginx\n# /etc/nginx/conf.d/kafka-manager.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kafka-manager.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kafka-manager.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kafka-manager.example.com_access.log main;\n    error_log /var/log/nginx/kafka-manager.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查配置并重载nginx：\n\n```bash\nnginx -t \nnginx -s reload \n```\n\n\n\n## 访问并配置kafka-manager\n\n通过浏览器访问kafka-manager的域名`kafka-manager.example.com`即可进入kafka-manager的控制页面，点击上边的`Cluster`，然后选择`Add Cluster`添加kafka集群，需要填入下面几个信息：\n\n<img src=\"./add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"./add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n最后点击`save`后集群信息添加完成。\n\n\n\n<br>\n\n\n\n# 部署logstash\n\n##  创建logstash配置\n\nlogstash相关的配置文件可以在[logstash配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`efk-template.json`, `init_efk.sh`, `k8s-log.json`, `logstash.conf`, `logstash.yml`, `systemd-log.json` 放入一个目录下，例如`logstash-conf`下：\n\n- `efk-template.json`：定义的是针对索引的日志策略；\n- `init_efk.sh`：操作es ，初始化一些配置；\n- `k8s-log.json`：收集k8s日志的配置；\n- `logstash.conf`：logstash的流水线配置；\n- `logstash.yml`：logstash配置文件；\n- `systemd-log.json`：收集系统日志的配置；\n\n\n\n然后执行下面的命令：\n\n```bash\nkubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging \n```\n\n\n\n<img src=\"./configmap.png\" style=\"zoom:50%;\" />\n\n\n\n## 部署logstash\n\nlogstash不需要很多实例，所以使用`deployment`方式部署，可以根据需要进行扩展：\n\n```yaml\n# logstash-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: logstash-logging\n  name: logstash-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: logstash-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: logstash-logging\n      name: logstash-logging\n    spec:\n      containers:\n        - env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'logstash:7.8.0'\n          imagePullPolicy: IfNotPresent\n          name: logstash-logging\n          ports:\n            - containerPort: 5044\n              name: tcp-5044\n              protocol: TCP\n            - containerPort: 9600\n              name: tcp-9600\n              protocol: TCP\n          resources: {}\n          securityContext:\n            privileged: true\n            runAsUser: 1000\n          volumeMounts:\n            - mountPath: /usr/share/logstash/config/logstash.yml\n              name: logstash-config\n              subPath: logstash.yml\n            - mountPath: /usr/share/logstash/pipeline/logstash.conf\n              name: logstash-config\n              subPath: logstash.conf\n            - mountPath: /usr/share/logstash/config/efk-template.json\n              name: logstash-config\n              subPath: efk-template.json\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_efk.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-efk\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_efk.sh\n              name: logstash-config\n              subPath: init_efk.sh\n            - mountPath: /tmp/k8s-log.json\n              name: logstash-config\n              subPath: k8s-log.json\n            - mountPath: /tmp/systemd-log.json\n              name: logstash-config\n              subPath: systemd-log.json\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: logstash-logging-config\n          name: logstash-config\n```\n\n\n\n直接运行下面的命令部署logstash：\n\n```bash\nkubectl apply -f logstash-deployment.yaml\n```\n\n\n\n## 检查服务\n\n确保所有的pod都处于Running状态：\n\n```bash\nkubectl get pod -n logging | grep logstash\n```\n\n<img src=\"./logstash-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 部署filebeat\n\n## 部署相关资源\n\n{% tabs comments %}\n\n<!-- tab 创建权限 -->\n\n```yaml\n# filebeat-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: filebeat-logging-sa\n  namespace: logging\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: filebeat-logging-bind\nsubjects:\n- kind: ServiceAccount\n  name: filebeat-logging-sa\n  namespace: logging\nroleRef:\n  kind: ClusterRole\n  name: filebeat-logging-clusterrole\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: filebeat-logging-clusterrole\nrules:\n- apiGroups: [\"\"] # \"\" indicates the core API group\n  resources:\n  - namespaces\n  - pods\n  verbs:\n  - get\n  - watch\n  - list\n```\n\n\n\n执行下面的命令完成创建：\n\n```yaml\nkubectl apply -f filebeat-rbac.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建相关配置 -->\n\n```yaml\n# filebeat-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: filebeat-logging-config\n  namespace: logging\ndata:\n  filebeat.yml: |\n    name: \"filebeat-k8s\"\n    filebeat.registry.path: /var/log/filebeat/registry\n    logging.level: warning\n    filebeat.inputs:\n    - type: container\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/lib/docker/containers/*/*-json.log\n      multiline.pattern: '^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+'\n      multiline.negate: false\n      multiline.match: after\n      multiline.max_lines: 500\n      multiline.timeout: 5s\n      fields_under_root: true\n      overwrite_keys: true\n\n    - type: log\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/log/messages\n      fields_under_root: true\n      overwrite_keys: true\n\n    processors:\n      - add_kubernetes_metadata:\n          in_cluster: true\n      - add_host_metadata: \n          netinfo.enabled: true\n      - add_locale: ~\n      - add_fields:\n          target: host\n          fields:\n            name: ${NODE_NAME}\n            ip: ${NODE_IP}\n            podip: ${POD_IP}\n      - drop_fields:\n          fields: [\"agent.ephemeral_id\",\"agent.id\",\"log.offset\",\"suricata.eve.timestamp\",\"host.os.codename\",\"host.hostname\"]\n          ignore_missing: false\n\n    output.kafka:\n      hosts: [\"kafka-logging-service:9092\"]\n      version: 2.0.0\n      worker: 3\n      topics: \n        - topic: \"k8s-log.%{[kubernetes.namespace]}\"\n          when.contains: \n            input.type: \"container\"\n        - topic: \"systemd-log.%{[host.name]}\"\n          when.contains: \n            input.type: \"log\"\n      partition.round_robin:\n        reachable_only: false\n      required_acks: 1\n      compression: gzip\n      max_message_bytes: 1000000\n\n\n    xpack.monitoring.enabled: true\n    xpack.monitoring.elasticsearch.hosts: [ \"es-logging-service:9200\" ]\n    xpack.monitoring.elasticsearch.protocol: \"http\"\n    xpack.monitoring.elasticsearch.username: \"elastic\" \n    xpack.monitoring.elasticsearch.password: \"${ELASTIC_PASSWORD}\"\n```\n\n\n\n在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。执行下面的命令完成创建：\n\n```bash\nkubectl apply -f filebeat-configmap.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署filebeat -->\n\n每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：\n\n```yaml\n# fileat-daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: filebeat-logging\n    version: v1\n  name: filebeat-logging\n  namespace: logging\nspec:\n  selector:\n    matchLabels:\n      app: filebeat-logging\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: filebeat-logging\n        version: v1\n    spec:\n      containers:\n        - args:\n            - '-c'\n            - /home/filebeat-config/filebeat.yml\n            - '-e'\n          env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: spec.nodeName\n            - name: NODE_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.hostIP\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'elastic/filebeat:7.6.8'\n          imagePullPolicy: IfNotPresent\n          name: filebeat-logging\n          securityContext:\n            privileged: true\n            runAsUser: 0\n          volumeMounts:\n            - mountPath: /var/log\n              name: filebeat-storage\n            - mountPath: /var/log/pods\n              name: varlogpods\n            - mountPath: /var/lib/docker/containers\n              name: varlibdockercontainers\n            - mountPath: /home/filebeat-config\n              name: filebeat-volume\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      serviceAccount: filebeat-logging-sa\n      serviceAccountName: filebeat-logging-sa\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - hostPath:\n            path: /var/log\n            type: ''\n          name: filebeat-storage\n        - hostPath:\n            path: /var/log/pods\n            type: ''\n          name: varlogpods\n        - hostPath:\n            path: /var/lib/docker/containers\n            type: ''\n          name: varlibdockercontainers\n        - configMap:\n            defaultMode: 420\n            name: filebeat-logging-config\n          name: filebeat-volume\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 1\n    type: RollingUpdate\n```\n\n\n\n在yaml文件中，将`/var/lib/docker/containers`和`/var/log`挂载到了容器中，方便容器进行日志收集。\n\n```bash\nkubectl apply -f filebeat-daemonset.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查服务\n\n确保所有pod都正常运行：\n\n```bash\nkubectl get pod -n logging | grep filebeat\n```\n\n<img src=\"./pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 部署kibana\n\n## 部署相关资源\n\n{% tabs comments %}\n\n<!-- tab 创建初始化配置 -->\n\nKibana相关的配置文件可以在[kibana配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`init_kibana.sh` 放入一个目录下，例如`kibana-conf`下，然后执行下面的命令：\n\n```bash\nkubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging\n```\n\n<!-- endtab -->\n\n<!-- tab 创建配置文件 -->\n\n```yaml\n# kibana-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kibana-logging-config\n  namespace: logging\ndata:\n  kibana.yml: |\n    server.port: 5601\n    server.host: \"0.0.0.0\"\n    server.name: \"kibana-logging\"\n    elasticsearch.hosts: [\"http://es-logging-service:9200\"]\n    xpack.monitoring.ui.container.elasticsearch.enabled: true\n    xpack.security.enabled: true\n    elasticsearch.username: \"kibana\"\n    elasticsearch.password: \"${KIBANA_PASSWORD}\"\n    elasticsearch.requestHeadersWhitelist: [ 'es-security-runas-user',\n    'authorization', 'X-Proxy-Remote-User', 'x-forwarded-for',\n    'x-forwarded-access-token' ]\n    elasticsearch.requestTimeout: 300000\n    kibana.index: \".kibana\"\n    logging.quiet: true\n  kibana_check.sh: |\n    #!/bin/bash\n    KIBANA_REST_BASEURL=http://localhost:5601/login\n    EXPECTED_RESPONSE_CODE=200\n    max_time=\"${max_time:-4}\"\n\n    response_code=\"$(\n        curl --silent                          \\\n             --request HEAD                    \\\n             --head                            \\\n             --output /dev/null                \\\n             --max-time \"${max_time}\"          \\\n             --write-out '%{response_code}'    \\\n             \"${KIBANA_REST_BASEURL}\"\n    )\"\n\n    if [ \"${response_code}\" == \"${EXPECTED_RESPONSE_CODE}\" ]; then\n        exit 0\n    else\n        echo \"Kibana node is not ready to accept HTTP requests yet [response code: ${response_code}]\"\n        exit 1\n    fi\n```\n\n\n\n执行下面的命令完成部署：\n\n```bash\nkubectl apply -f kibana-config.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署kibana -->\n\n```yaml\n# kibana-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kibana-logging\n  name: kibana-logging\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kibana-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kibana-logging\n      name: kibana-logging\n    spec:\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: TZ\n              value: Asia/Shanghai\n            - name: KIBANA_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'kibana:7.8.0'\n          name: kibana-logging\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          ports:\n            - containerPort: 5601\n              name: tcp-5601\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n              memory: 2Gi\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /usr/share/kibana/config/kibana.yml\n              name: kibana-config\n              subPath: kibana.yml\n            - mountPath: /usr/share/kibana/config/kibana_check.sh\n              name: kibana-config\n              subPath: kibana_check.sh\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_kibana.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-kibana\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_kibana.sh\n              name: kibana-init\n              subPath: init_kibana.sh\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-config\n          name: kibana-config\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-init-config\n          name: kibana-init\n```\n\n\n\n执行下面的命令完成部署：\n\n```bash\nkubectl apply -f kibana-deployment.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建service对象 -->\n\n```yaml\n# kibana-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kibana-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-5601\n      port: 5601\n      protocol: TCP\n      targetPort: 5601\n  selector:\n    app: kibana-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\nkubectl apply -f kibana-service.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建ingress对象 -->\n\n```yaml\n# kibana-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: kibana\n   namespace: logging\nspec:\n   rules:\n   - host: kibana.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kibana-logging-service\n          servicePort: 5601\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\nkubectl apply -f kibana-ingress.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 配置nginx暴露服务\n\n新增下面的nginx配置:\n\n```nginx\n# /etc/nginx/conf.d/kibana.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kibana.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kibana.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kibana.example.com_access.log main;\n    error_log /var/log/nginx/kibana.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查并重载nginx：\n\n```bash\nnginx -t\nnginx -s reload\n```\n\n\n\n## 检查服务\n\n确保相关pod都处在Running状态：\n\n```bash\nkubectl get pod,svc,ingress -n logging | grep kibana\n```\n\n<img src=\"./kibana-pod.png\" style=\"zoom:50%;\" />\n\n\n\n## 访问页面\n\n通过浏览器访问`kibana.example.com`即可进入kibana的页面，输入在部署elasticsearch中设置的初始账号密码：`elastic/elastic`。然后在kibana中创建`Index patterns`就可以了。\n\n<img src=\"./kibana.png\" style=\"zoom:50%;\" />\n\n\n\n访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：\n\n<img src=\"./kafka.png\" style=\"zoom:50%;\" />\n\n\n\n","source":"_posts/在k8s中使用EFLK进行日志收集.md","raw":"---\ntitle: 在k8s中使用EFLK进行日志收集\ndate: 2021-03-27 12:31:50\ntags:\n- K8S\n- 日志收集\ncategories:\n- Kubernetes\n- 日志收集\ndescription: 在kubernetes中使用ELFK进行日志收集和展示\ncover: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在k8s中使用filebeat、kafka、logstash、elasticsearch、kibana进行日志收集\n\n更新于 2021-03-27\n\n{% endnote %}\n\n<br>\n\n\n\n# 架构方案\n\n## 架构\n\n整体收集方案使用如下的组件：\n\n- `filebeat`：采集节点和容器日志，发送到kafka；\n- `kafka`：接收filebeat发送的日志消息；\n- `logstash`：从kafka中消费日志消息并进行处理；\n- `elasticsearch`：进行日志存储；\n- `kibana`：日志可视化展示；\n\n\n\n> 日志文件 --> filebeat --> kafka --> logstash --> elasticsearch --> kibana\n\n\n\n## 版本选择\n\n- `filebeat`：7.6.2；\n- `kafka`：2.12-2.5.0；\n- `zookeeper`：3.5.7；\n- `logstash`：7.8.0；\n- `elasticsearch`：7.8.0；\n- `kibana`：7.8.0；\n\n\n\n## 方案可能存在的问题\n\n这套日志收集方案可能存在下面的问题：\n\n- elasticsearch可能存在瓶颈（es还需要进一步调优）；\n- logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；\n- ......\n\n\n\n<br>\n\n\n\n# 准备工作\n\n{% tabs comments %}\n\n<!-- tab 准备nfs相关资源 -->\n\n这里使用nfs作为底层存储，相关的创建方法可以参考：{% post_link 在k8s中使用nfs存储 %}，当然也可以使用其他的存储系统。\n\n<!-- endtab -->\n\n<!-- tab 创建namespace -->\n\n使用下面的yaml文件创建一个namespace：\n\n```yaml\n# namesapce.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: logging\n```\n\n\n\n```bash\nkubectl apply -f namespace.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 设置elasticsearch密码 -->\n\nelasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：\n\n```bash\nespassword=\"elastic\"\n\nkubectl create secret generic es-logging-password --from-literal=elastic='elastic' -n logging\n```\n\n\n\n> 这里讲elasticsearch密码设置为：`elastic`\n\n<!-- endtab -->\n\n\n\n{% endtabs %}\n\n\n\n<br>\n\n\n\n# 部署elasticsearch\n\n## 部署相关资源\n\n{% tabs comments %}\n\n<!-- tab 创建elasticsearch配置 -->\n\n```yaml\n# elasticsearch-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: es-logging-config\n  namespace: logging\ndata:\n  elasticsearch.yml: |\n    cluster.name: es-logging-cluster\n    node.name: ${NODE_NAME}\n    network.host: 0.0.0.0\n    http.port: 9200\n    transport.port: 9300\n    discovery.seed_hosts: [\"es-logging-cluster\"]\n    cluster.initial_master_nodes:\n      - es-logging-0\n      - es-logging-1\n      - es-logging-2\n    xpack.monitoring.collection.enabled: true\n    xpack.security.enabled: true\n    xpack.license.self_generated.type: basic\n    indices.lifecycle.history_index_enabled: false\n    xpack.ilm.enabled: true\n    \n    cluster.routing.allocation.disk.threshold_enabled: false\n\n    # xpack.security.transport.ssl.enabled: true\n    # xpack.security.transport.ssl.verification_mode: certificate\n    # xpack.security.transport.ssl.key: certs/es-logging-service.key\n    # xpack.security.transport.ssl.certificate: certs/es-logging-service.crt\n    # xpack.security.transport.ssl.certificate_authorities: certs/ca.crt\n    # xpack.security.http.ssl.enabled: false\n    # xpack.security.authc.realms:\n    #   native.realm1:\n    #     order: 0\n  es_check.sh: >\n    #!/bin/bash\n\n    ES_REST_BASEURL=http://localhost:9200\n\n    EXPECTED_RESPONSE_CODE=200\n\n    max_time=${READINESS_PROBE_TIMEOUT:-30}\n\n\n    function check_if_ready() {\n      path=\"$1\"\n      err_msg=\"$2\"\n      response_code=$(curl -s -k --head \\\n          -u elastic:${ELASTIC_PASSWORD} \\\n          --max-time $max_time \\\n          -o /dev/null \\\n          -w '%{response_code}' \\\n          \"${ES_REST_BASEURL}${path}\")\n\n      if [ \"${response_code}\" != ${EXPECTED_RESPONSE_CODE} ]; then\n        echo \"${err_msg} [response code: ${response_code}]\"\n        exit 1\n      fi\n      exit 0\n    }\n\n\n    check_if_ready \"/\" \"Elasticsearch node is not ready to accept HTTP requests yet\"\n```\n\n\n\n配置中的相关参数解释：\n\n- `cluster.name`：设置es集群名称，用于唯一标识一个集群；\n- `network.host`：监听的地址；\n- `discovery.seed_hosts`：节点发现方式；\n- `xpack.security.enabled`起用xpack安全组件；\n- `cluster.routing.allocation.disk.threshold_enabled`是否启动磁盘分配器；\n\n> `cluster.routing.allocation.disk.threshold_enabled`这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。[相关文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation)\n\n\n\nes启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：\n\n```bash\nkubectl apply -f elasticsearch-config.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建elasticsearch集群 -->\n\n使用下面的yaml文件创建一个namespace：\n\n```yaml\n# elasticsearch-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: es-logging\n  serviceName: es-logging-cluster\n  template:\n    metadata:\n      labels:\n        app: es-logging\n      name: es-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - es-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: ES_JAVA_OPTS\n              value: '-Xms2g -Xmx2g'\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'docker.elastic.co/elasticsearch/elasticsearch:7.8.0'\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          name: es-logging\n          ports:\n            - containerPort: 9200\n              name: tcp-9200\n              protocol: TCP\n            - containerPort: 9300\n              name: tcp-9300\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n          volumeMounts:\n            - mountPath: /usr/share/elasticsearch/data\n              name: es7x-data\n            - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\n              name: es7x-config\n              subPath: elasticsearch.yml\n            - mountPath: /usr/share/elasticsearch/config/es_check.sh\n              name: es7x-config\n              subPath: es_check.sh\n            # - mountPath: /usr/share/elasticsearch/config/certs\n            #   name: es-certs\n            #   readOnly: true\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n            - name: ES_URI\n              value: 'http://elastic:$(ELASTIC_PASSWORD)@localhost:9200'\n            - name: ES_INDICES\n              value: 'true'\n            - name: ES_ALL\n              value: 'true'\n            - name: ES_INDICES_SETTINGS\n              value: 'true'\n          image: 'justwatch/elasticsearch_exporter:1.1.0'\n          imagePullPolicy: IfNotPresent\n          name: elasticsearch-exporter\n          ports:\n            - containerPort: 9114\n              name: tcp-9114\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 200Mi\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sysctl\n            - '-w'\n            - vm.max_map_count=262144\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-vm-max-map\n          securityContext:\n            privileged: true\n            runAsUser: 0\n        - command:\n            - sh\n            - '-c'\n            - ulimit -n 65536\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-fd-ulimit\n          securityContext:\n            privileged: true\n            runAsUser: 0\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n    #   serviceAccount: es-logging-sa\n    #   serviceAccountName: es-logging-sa\n      terminationGracePeriodSeconds: 10\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: es-logging-config\n          name: es7x-config\n        # - name: es-certs\n        #   secret:\n        #     defaultMode: 420\n        #     secretName: es-logging-certs\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        labels:\n          name: es-logging\n        name: es7x-data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\nes集群使用了statefulset方式部署，其中storageclass`logging-storageclass`需要自己手动创建，执行下面的命令完成部署。\n\n```bash\nkubectl apply -f elasticsearch-cluster.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建service -->\n\n```yaml\n# elasticsearch-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-9200\n      port: 9200\n      protocol: TCP\n      targetPort: 9200\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n    monitor-app: elasticsearch-exporter\n  name: es-logging-cluster\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: tcp-9300\n      port: 9300\n      protocol: TCP\n      targetPort: 9300\n    - name: tcp-9114\n      port: 9114\n      protocol: TCP\n      targetPort: 9114\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面的命令完成部署：\n\n```bash\nkubeclt apply -f elasticsearch-service.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查\n\n首先确保所有的pod都处于running状态：\n\n```bash\nkubectl get pod -n logging | grep es\n```\n\n<img src=\"./es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n然后执行下面的命令：\n\n```bash\nkubectl logs -f es-logging-1 -n logging -c es-logging\n```\n\n\n\n如果输出的日志中有`Cluster health status changed from [YELLOW] to [GREEN]`，说明集群正常了。\n\n\n\n<br>\n\n\n\n# 部署kafka\n\n## 部署zookeeper\n\n{% tabs comments %}\n\n<!-- tab 部署zookeeper集群 -->\n\n```yaml\n# zookeeper-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: zk-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zk-logging\n  serviceName: zk-logging-headless\n  template:\n    metadata:\n      labels:\n        app: zk-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - zk-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: ZOO_SERVERS\n              value: >-\n                server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n            - name: ZOO_4LW_COMMANDS_WHITELIST\n              value: 'ruok,srvr,conf,stat'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'zookeeper:3.5.7'\n          imagePullPolicy: Always\n          name: zk-logging\n          ports:\n            - containerPort: 2181\n              name: client\n              protocol: TCP\n            - containerPort: 2888\n              name: server\n              protocol: TCP\n            - containerPort: 3888\n              name: leader-election\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - >-\n              echo $(( $(echo ${POD_NAME} | awk -F \"-\" '{print $NF}') + 1 )) >\n              /data/myid\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: init-zk-logging\n          resources: {}\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n    #   nodeSelector:\n        # node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n    #   serviceAccount: zk-logging-sa\n    #   serviceAccountName: zk-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 5Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n使用下面的命令完成部署：\n\n```bash\nkubectl apply -f zookeeper-cluster.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署service对象 -->\n\n```yaml\n# zookeeper-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: client\n      port: 2181\n      protocol: TCP\n      targetPort: 2181\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-headless\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 2888\n      protocol: TCP\n      targetPort: 2888\n    - name: leader-election\n      port: 3888\n      protocol: TCP\n      targetPort: 3888\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面命令完成部署：\n\n```bash\nkubectl apply -f zookeeper-service.yaml\n```\n\n\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 部署kafka\n\n{% tabs comments %}\n\n<!-- tab 部署kafka集群 -->\n\n```yaml\n# kafka-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: kafka-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kafka-logging\n  serviceName: kafka-logging-service\n  template:\n    metadata:\n      labels:\n        app: kafka-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - kafka-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: KAFKA_REPLICAS\n              value: '3'\n            - name: KAFKA_ZK_LOCAL\n              value: 'false'\n            - name: KAFKA_HEAP_OPTS\n              value: '-Xmx1024M -Xms1024M'\n            - name: SERVER_num_partitions\n              value: '3'\n            - name: SERVER_delete_topic_enable\n              value: 'true'\n            - name: SERVER_log_retention_hours\n              value: '2147483647'\n            - name: KAFKA_ADVERTISED_PORT\n              value: '9092'\n            - name: SERVER_zookeeper_connection_timeout_ms\n              value: '6000'\n            - name: SERVER_log_dirs\n              value: /opt/kafka/data/logs\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: KAFKA_ZOOKEEPER_CONNECT\n              value: 'zk-logging-service.logging.svc.cluster.local:2181'\n            - name: BROKER_ID_COMMAND\n              value: 'hostname | awk -F ''-'' ''{print $NF}'''\n            - name: KAFKA_PORT_NUMBER\n              value: '9092'\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              value: >-\n                $(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'wurstmeister/kafka:2.12-2.5.0'\n          imagePullPolicy: Always\n          name: kafka-logging\n          ports:\n            - containerPort: 9092\n              name: server\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /kafka\n              name: datadir\n      dnsPolicy: ClusterFirst\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 0\n        runAsUser: 0\n    #   serviceAccount: kafka-logging-sa\n    #   serviceAccountName: kafka-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n使用下面的命令完成部署：\n\n```bash\nkubectl apply -f kafka-cluster.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署service对象 -->\n\n```yaml\n# kafka-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-logging\n  name: kafka-logging-service\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 9092\n      protocol: TCP\n      targetPort: 9092\n  selector:\n    app: kafka-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面命令完成部署：\n\n```bash\nkubectl apply -f kafka-service.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署kafka-manager -->\n\nkafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。\n\n```yaml\n# kafka-manager.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kafka-manager\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kafka-manager\n    spec:\n      containers:\n        - env:\n            - name: ZK_HOSTS\n              value: 'zk-logging-service.logging.svc:2181'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'kafkamanager/kafka-manager:2.0.0.2'\n          imagePullPolicy: IfNotPresent\n          name: kafka-manager\n          ports:\n            - containerPort: 9000\n              name: tcp-9000\n              protocol: TCP\n          resources: {}\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  ports:\n    - name: kafka-manager\n      port: 9000\n      protocol: TCP\n      targetPort: 9000\n  selector:\n    app: kafka-manager\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面命令完成部署：\n\n```bash\nkubectl apply -f kafka-manager.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建ingress -->\n\n```yaml\n# kafka-manager-ingress.yaml\nkind: Ingress\nmetadata:\n   name: kafka-manager\n   namespace: logging\nspec:\n   rules:\n   - host: kafka-manager.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kafka-manager\n          servicePort: 9000\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\nkubectl apply -f kafka-manager-ingress.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查服务\n\n检查所有的pod都正常运行：\n\n```bash\nkubectl get pod,svc,ingress -n logging | grep -E 'kafka|zk'\n```\n\n<img src=\"./kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n## 创建nginx配置\n\n在nginx服务器上增加kafka-manager配置，代理kafka服务：\n\n```nginx\n# /etc/nginx/conf.d/kafka-manager.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kafka-manager.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kafka-manager.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kafka-manager.example.com_access.log main;\n    error_log /var/log/nginx/kafka-manager.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查配置并重载nginx：\n\n```bash\nnginx -t \nnginx -s reload \n```\n\n\n\n## 访问并配置kafka-manager\n\n通过浏览器访问kafka-manager的域名`kafka-manager.example.com`即可进入kafka-manager的控制页面，点击上边的`Cluster`，然后选择`Add Cluster`添加kafka集群，需要填入下面几个信息：\n\n<img src=\"./add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"./add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n最后点击`save`后集群信息添加完成。\n\n\n\n<br>\n\n\n\n# 部署logstash\n\n##  创建logstash配置\n\nlogstash相关的配置文件可以在[logstash配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`efk-template.json`, `init_efk.sh`, `k8s-log.json`, `logstash.conf`, `logstash.yml`, `systemd-log.json` 放入一个目录下，例如`logstash-conf`下：\n\n- `efk-template.json`：定义的是针对索引的日志策略；\n- `init_efk.sh`：操作es ，初始化一些配置；\n- `k8s-log.json`：收集k8s日志的配置；\n- `logstash.conf`：logstash的流水线配置；\n- `logstash.yml`：logstash配置文件；\n- `systemd-log.json`：收集系统日志的配置；\n\n\n\n然后执行下面的命令：\n\n```bash\nkubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging \n```\n\n\n\n<img src=\"./configmap.png\" style=\"zoom:50%;\" />\n\n\n\n## 部署logstash\n\nlogstash不需要很多实例，所以使用`deployment`方式部署，可以根据需要进行扩展：\n\n```yaml\n# logstash-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: logstash-logging\n  name: logstash-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: logstash-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: logstash-logging\n      name: logstash-logging\n    spec:\n      containers:\n        - env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'logstash:7.8.0'\n          imagePullPolicy: IfNotPresent\n          name: logstash-logging\n          ports:\n            - containerPort: 5044\n              name: tcp-5044\n              protocol: TCP\n            - containerPort: 9600\n              name: tcp-9600\n              protocol: TCP\n          resources: {}\n          securityContext:\n            privileged: true\n            runAsUser: 1000\n          volumeMounts:\n            - mountPath: /usr/share/logstash/config/logstash.yml\n              name: logstash-config\n              subPath: logstash.yml\n            - mountPath: /usr/share/logstash/pipeline/logstash.conf\n              name: logstash-config\n              subPath: logstash.conf\n            - mountPath: /usr/share/logstash/config/efk-template.json\n              name: logstash-config\n              subPath: efk-template.json\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_efk.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-efk\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_efk.sh\n              name: logstash-config\n              subPath: init_efk.sh\n            - mountPath: /tmp/k8s-log.json\n              name: logstash-config\n              subPath: k8s-log.json\n            - mountPath: /tmp/systemd-log.json\n              name: logstash-config\n              subPath: systemd-log.json\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: logstash-logging-config\n          name: logstash-config\n```\n\n\n\n直接运行下面的命令部署logstash：\n\n```bash\nkubectl apply -f logstash-deployment.yaml\n```\n\n\n\n## 检查服务\n\n确保所有的pod都处于Running状态：\n\n```bash\nkubectl get pod -n logging | grep logstash\n```\n\n<img src=\"./logstash-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 部署filebeat\n\n## 部署相关资源\n\n{% tabs comments %}\n\n<!-- tab 创建权限 -->\n\n```yaml\n# filebeat-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: filebeat-logging-sa\n  namespace: logging\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: filebeat-logging-bind\nsubjects:\n- kind: ServiceAccount\n  name: filebeat-logging-sa\n  namespace: logging\nroleRef:\n  kind: ClusterRole\n  name: filebeat-logging-clusterrole\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: filebeat-logging-clusterrole\nrules:\n- apiGroups: [\"\"] # \"\" indicates the core API group\n  resources:\n  - namespaces\n  - pods\n  verbs:\n  - get\n  - watch\n  - list\n```\n\n\n\n执行下面的命令完成创建：\n\n```yaml\nkubectl apply -f filebeat-rbac.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建相关配置 -->\n\n```yaml\n# filebeat-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: filebeat-logging-config\n  namespace: logging\ndata:\n  filebeat.yml: |\n    name: \"filebeat-k8s\"\n    filebeat.registry.path: /var/log/filebeat/registry\n    logging.level: warning\n    filebeat.inputs:\n    - type: container\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/lib/docker/containers/*/*-json.log\n      multiline.pattern: '^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+'\n      multiline.negate: false\n      multiline.match: after\n      multiline.max_lines: 500\n      multiline.timeout: 5s\n      fields_under_root: true\n      overwrite_keys: true\n\n    - type: log\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/log/messages\n      fields_under_root: true\n      overwrite_keys: true\n\n    processors:\n      - add_kubernetes_metadata:\n          in_cluster: true\n      - add_host_metadata: \n          netinfo.enabled: true\n      - add_locale: ~\n      - add_fields:\n          target: host\n          fields:\n            name: ${NODE_NAME}\n            ip: ${NODE_IP}\n            podip: ${POD_IP}\n      - drop_fields:\n          fields: [\"agent.ephemeral_id\",\"agent.id\",\"log.offset\",\"suricata.eve.timestamp\",\"host.os.codename\",\"host.hostname\"]\n          ignore_missing: false\n\n    output.kafka:\n      hosts: [\"kafka-logging-service:9092\"]\n      version: 2.0.0\n      worker: 3\n      topics: \n        - topic: \"k8s-log.%{[kubernetes.namespace]}\"\n          when.contains: \n            input.type: \"container\"\n        - topic: \"systemd-log.%{[host.name]}\"\n          when.contains: \n            input.type: \"log\"\n      partition.round_robin:\n        reachable_only: false\n      required_acks: 1\n      compression: gzip\n      max_message_bytes: 1000000\n\n\n    xpack.monitoring.enabled: true\n    xpack.monitoring.elasticsearch.hosts: [ \"es-logging-service:9200\" ]\n    xpack.monitoring.elasticsearch.protocol: \"http\"\n    xpack.monitoring.elasticsearch.username: \"elastic\" \n    xpack.monitoring.elasticsearch.password: \"${ELASTIC_PASSWORD}\"\n```\n\n\n\n在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。执行下面的命令完成创建：\n\n```bash\nkubectl apply -f filebeat-configmap.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署filebeat -->\n\n每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：\n\n```yaml\n# fileat-daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: filebeat-logging\n    version: v1\n  name: filebeat-logging\n  namespace: logging\nspec:\n  selector:\n    matchLabels:\n      app: filebeat-logging\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: filebeat-logging\n        version: v1\n    spec:\n      containers:\n        - args:\n            - '-c'\n            - /home/filebeat-config/filebeat.yml\n            - '-e'\n          env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: spec.nodeName\n            - name: NODE_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.hostIP\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'elastic/filebeat:7.6.8'\n          imagePullPolicy: IfNotPresent\n          name: filebeat-logging\n          securityContext:\n            privileged: true\n            runAsUser: 0\n          volumeMounts:\n            - mountPath: /var/log\n              name: filebeat-storage\n            - mountPath: /var/log/pods\n              name: varlogpods\n            - mountPath: /var/lib/docker/containers\n              name: varlibdockercontainers\n            - mountPath: /home/filebeat-config\n              name: filebeat-volume\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      serviceAccount: filebeat-logging-sa\n      serviceAccountName: filebeat-logging-sa\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - hostPath:\n            path: /var/log\n            type: ''\n          name: filebeat-storage\n        - hostPath:\n            path: /var/log/pods\n            type: ''\n          name: varlogpods\n        - hostPath:\n            path: /var/lib/docker/containers\n            type: ''\n          name: varlibdockercontainers\n        - configMap:\n            defaultMode: 420\n            name: filebeat-logging-config\n          name: filebeat-volume\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 1\n    type: RollingUpdate\n```\n\n\n\n在yaml文件中，将`/var/lib/docker/containers`和`/var/log`挂载到了容器中，方便容器进行日志收集。\n\n```bash\nkubectl apply -f filebeat-daemonset.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 检查服务\n\n确保所有pod都正常运行：\n\n```bash\nkubectl get pod -n logging | grep filebeat\n```\n\n<img src=\"./pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 部署kibana\n\n## 部署相关资源\n\n{% tabs comments %}\n\n<!-- tab 创建初始化配置 -->\n\nKibana相关的配置文件可以在[kibana配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`init_kibana.sh` 放入一个目录下，例如`kibana-conf`下，然后执行下面的命令：\n\n```bash\nkubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging\n```\n\n<!-- endtab -->\n\n<!-- tab 创建配置文件 -->\n\n```yaml\n# kibana-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kibana-logging-config\n  namespace: logging\ndata:\n  kibana.yml: |\n    server.port: 5601\n    server.host: \"0.0.0.0\"\n    server.name: \"kibana-logging\"\n    elasticsearch.hosts: [\"http://es-logging-service:9200\"]\n    xpack.monitoring.ui.container.elasticsearch.enabled: true\n    xpack.security.enabled: true\n    elasticsearch.username: \"kibana\"\n    elasticsearch.password: \"${KIBANA_PASSWORD}\"\n    elasticsearch.requestHeadersWhitelist: [ 'es-security-runas-user',\n    'authorization', 'X-Proxy-Remote-User', 'x-forwarded-for',\n    'x-forwarded-access-token' ]\n    elasticsearch.requestTimeout: 300000\n    kibana.index: \".kibana\"\n    logging.quiet: true\n  kibana_check.sh: |\n    #!/bin/bash\n    KIBANA_REST_BASEURL=http://localhost:5601/login\n    EXPECTED_RESPONSE_CODE=200\n    max_time=\"${max_time:-4}\"\n\n    response_code=\"$(\n        curl --silent                          \\\n             --request HEAD                    \\\n             --head                            \\\n             --output /dev/null                \\\n             --max-time \"${max_time}\"          \\\n             --write-out '%{response_code}'    \\\n             \"${KIBANA_REST_BASEURL}\"\n    )\"\n\n    if [ \"${response_code}\" == \"${EXPECTED_RESPONSE_CODE}\" ]; then\n        exit 0\n    else\n        echo \"Kibana node is not ready to accept HTTP requests yet [response code: ${response_code}]\"\n        exit 1\n    fi\n```\n\n\n\n执行下面的命令完成部署：\n\n```bash\nkubectl apply -f kibana-config.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 部署kibana -->\n\n```yaml\n# kibana-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kibana-logging\n  name: kibana-logging\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kibana-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kibana-logging\n      name: kibana-logging\n    spec:\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: TZ\n              value: Asia/Shanghai\n            - name: KIBANA_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'kibana:7.8.0'\n          name: kibana-logging\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          ports:\n            - containerPort: 5601\n              name: tcp-5601\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n              memory: 2Gi\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /usr/share/kibana/config/kibana.yml\n              name: kibana-config\n              subPath: kibana.yml\n            - mountPath: /usr/share/kibana/config/kibana_check.sh\n              name: kibana-config\n              subPath: kibana_check.sh\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_kibana.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-kibana\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_kibana.sh\n              name: kibana-init\n              subPath: init_kibana.sh\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-config\n          name: kibana-config\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-init-config\n          name: kibana-init\n```\n\n\n\n执行下面的命令完成部署：\n\n```bash\nkubectl apply -f kibana-deployment.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建service对象 -->\n\n```yaml\n# kibana-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kibana-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-5601\n      port: 5601\n      protocol: TCP\n      targetPort: 5601\n  selector:\n    app: kibana-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\nkubectl apply -f kibana-service.yaml\n```\n\n<!-- endtab -->\n\n<!-- tab 创建ingress对象 -->\n\n```yaml\n# kibana-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: kibana\n   namespace: logging\nspec:\n   rules:\n   - host: kibana.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kibana-logging-service\n          servicePort: 5601\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\nkubectl apply -f kibana-ingress.yaml\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n## 配置nginx暴露服务\n\n新增下面的nginx配置:\n\n```nginx\n# /etc/nginx/conf.d/kibana.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kibana.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kibana.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kibana.example.com_access.log main;\n    error_log /var/log/nginx/kibana.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查并重载nginx：\n\n```bash\nnginx -t\nnginx -s reload\n```\n\n\n\n## 检查服务\n\n确保相关pod都处在Running状态：\n\n```bash\nkubectl get pod,svc,ingress -n logging | grep kibana\n```\n\n<img src=\"./kibana-pod.png\" style=\"zoom:50%;\" />\n\n\n\n## 访问页面\n\n通过浏览器访问`kibana.example.com`即可进入kibana的页面，输入在部署elasticsearch中设置的初始账号密码：`elastic/elastic`。然后在kibana中创建`Index patterns`就可以了。\n\n<img src=\"./kibana.png\" style=\"zoom:50%;\" />\n\n\n\n访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：\n\n<img src=\"./kafka.png\" style=\"zoom:50%;\" />\n\n\n\n","slug":"在k8s中使用EFLK进行日志收集","published":1,"updated":"2021-03-27T05:20:12.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cko72de6x005qp0klg7ch9wn8","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用filebeat、kafka、logstash、elasticsearch、kibana进行日志收集</p><p>更新于 2021-03-27</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"架构方案\"><a href=\"#架构方案\" class=\"headerlink\" title=\"架构方案\"></a>架构方案</h1><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>整体收集方案使用如下的组件：</p>\n<ul>\n<li><code>filebeat</code>：采集节点和容器日志，发送到kafka；</li>\n<li><code>kafka</code>：接收filebeat发送的日志消息；</li>\n<li><code>logstash</code>：从kafka中消费日志消息并进行处理；</li>\n<li><code>elasticsearch</code>：进行日志存储；</li>\n<li><code>kibana</code>：日志可视化展示；</li>\n</ul>\n<blockquote>\n<p>日志文件 –&gt; filebeat –&gt; kafka –&gt; logstash –&gt; elasticsearch –&gt; kibana</p>\n</blockquote>\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><ul>\n<li><code>filebeat</code>：7.6.2；</li>\n<li><code>kafka</code>：2.12-2.5.0；</li>\n<li><code>zookeeper</code>：3.5.7；</li>\n<li><code>logstash</code>：7.8.0；</li>\n<li><code>elasticsearch</code>：7.8.0；</li>\n<li><code>kibana</code>：7.8.0；</li>\n</ul>\n<h2 id=\"方案可能存在的问题\"><a href=\"#方案可能存在的问题\" class=\"headerlink\" title=\"方案可能存在的问题\"></a>方案可能存在的问题</h2><p>这套日志收集方案可能存在下面的问题：</p>\n<ul>\n<li>elasticsearch可能存在瓶颈（es还需要进一步调优）；</li>\n<li>logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；</li>\n<li>……</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">准备nfs相关资源</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建namespace</button></li><li class=\"tab\"><button data-href=\"#comments-3\">设置elasticsearch密码</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>这里使用nfs作为底层存储，相关的创建方法可以参考：<a href=\"/2021/03/23/%E5%9C%A8k8s%E4%B8%AD%E4%BD%BF%E7%94%A8nfs%E5%AD%98%E5%82%A8/\" title=\"在k8s中使用nfs存储\">在k8s中使用nfs存储</a>，当然也可以使用其他的存储系统。</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用下面的yaml文件创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namesapce.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logging</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f namespace.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>elasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">espassword=<span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl create secret generic es-logging-password --from-literal=elastic=<span class=\"string\">&#x27;elastic&#x27;</span> -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里讲elasticsearch密码设置为：<code>elastic</code></p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署elasticsearch\"><a href=\"#部署elasticsearch\" class=\"headerlink\" title=\"部署elasticsearch\"></a>部署elasticsearch</h1><h2 id=\"部署相关资源\"><a href=\"#部署相关资源\" class=\"headerlink\" title=\"部署相关资源\"></a>部署相关资源</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建elasticsearch配置</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建elasticsearch集群</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建service</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">cluster.name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">node.name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    <span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">    <span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;es-logging-cluster&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">cluster.initial_master_nodes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-2</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.collection.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">basic</span></span><br><span class=\"line\">    <span class=\"attr\">indices.lifecycle.history_index_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.ilm.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">cluster.routing.allocation.disk.threshold_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.enabled: true</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.verification_mode: certificate</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.key: certs/es-logging-service.key</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate: certs/es-logging-service.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate_authorities: certs/ca.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.http.ssl.enabled: false</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.authc.realms:</span></span><br><span class=\"line\">    <span class=\"comment\">#   native.realm1:</span></span><br><span class=\"line\">    <span class=\"comment\">#     order: 0</span></span><br><span class=\"line\">  <span class=\"attr\">es_check.sh:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">ES_REST_BASEURL=http://localhost:9200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">max_time=$&#123;READINESS_PROBE_TIMEOUT:-30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">function</span> <span class=\"string\">check_if_ready()</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">path=&quot;$1&quot;</span></span><br><span class=\"line\">      <span class=\"string\">err_msg=&quot;$2&quot;</span></span><br><span class=\"line\">      <span class=\"string\">response_code=$(curl</span> <span class=\"string\">-s</span> <span class=\"string\">-k</span> <span class=\"string\">--head</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-u</span> <span class=\"string\">elastic:$</span>&#123;<span class=\"string\">ELASTIC_PASSWORD</span>&#125; <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">--max-time</span> <span class=\"string\">$max_time</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-o</span> <span class=\"string\">/dev/null</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-w</span> <span class=\"string\">&#x27;<span class=\"template-variable\">%&#123;response_code&#125;</span>&#x27;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">&quot;$&#123;ES_REST_BASEURL&#125;$&#123;path&#125;&quot;</span><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">if</span> [ <span class=\"string\">&quot;$&#123;response_code&#125;&quot;</span> <span class=\"type\">!=</span> <span class=\"string\">$</span>&#123;<span class=\"string\">EXPECTED_RESPONSE_CODE</span>&#125; ]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">&quot;$&#123;err_msg&#125; [response code: $&#123;response_code&#125;]&quot;</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"string\">fi</span></span><br><span class=\"line\">      <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">check_if_ready</span> <span class=\"string\">&quot;/&quot;</span> <span class=\"string\">&quot;Elasticsearch node is not ready to accept HTTP requests yet&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置中的相关参数解释：</p>\n<ul>\n<li><code>cluster.name</code>：设置es集群名称，用于唯一标识一个集群；</li>\n<li><code>network.host</code>：监听的地址；</li>\n<li><code>discovery.seed_hosts</code>：节点发现方式；</li>\n<li><code>xpack.security.enabled</code>起用xpack安全组件；</li>\n<li><code>cluster.routing.allocation.disk.threshold_enabled</code>是否启动磁盘分配器；</li>\n</ul>\n<blockquote>\n<p><code>cluster.routing.allocation.disk.threshold_enabled</code>这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation\">相关文档</a></p>\n</blockquote>\n<p>es启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f elasticsearch-config.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用下面的yaml文件创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - es-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_JAVA_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;-Xms2g -Xmx2g&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;docker.elastic.co/elasticsearch/elasticsearch:7.8.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">elasticsearch.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">es_check.sh</span></span><br><span class=\"line\">            <span class=\"comment\"># - mountPath: /usr/share/elasticsearch/config/certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   name: es-certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   readOnly: true</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_URI</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;http://elastic:$(ELASTIC_PASSWORD)@localhost:9200&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_ALL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES_SETTINGS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;justwatch/elasticsearch_exporter:1.1.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sysctl</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-w&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">vm.max_map_count=262144</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;busybox:1.31.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-vm-max-map</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ulimit</span> <span class=\"string\">-n</span> <span class=\"number\">65536</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;busybox:1.31.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-fd-ulimit</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">&#x27;s0:c13,c12&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: es-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: es-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">        <span class=\"comment\"># - name: es-certs</span></span><br><span class=\"line\">        <span class=\"comment\">#   secret:</span></span><br><span class=\"line\">        <span class=\"comment\">#     defaultMode: 420</span></span><br><span class=\"line\">        <span class=\"comment\">#     secretName: es-logging-certs</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>es集群使用了statefulset方式部署，其中storageclass<code>logging-storageclass</code>需要自己手动创建，执行下面的命令完成部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f elasticsearch-cluster.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">monitor-app:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeclt apply -f elasticsearch-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>首先确保所有的pod都处于running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n logging | grep es</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl logs -f es-logging-1 -n logging -c es-logging</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果输出的日志中有<code>Cluster health status changed from [YELLOW] to [GREEN]</code>，说明集群正常了。</p>\n<br>\n\n\n\n<h1 id=\"部署kafka\"><a href=\"#部署kafka\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h1><h2 id=\"部署zookeeper\"><a href=\"#部署zookeeper\" class=\"headerlink\" title=\"部署zookeeper\"></a>部署zookeeper</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">部署zookeeper集群</button></li><li class=\"tab\"><button data-href=\"#comments-2\">部署service对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - zk-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_SERVERS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_4LW_COMMANDS_WHITELIST</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;ruok,srvr,conf,stat&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;zookeeper:3.5.7&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">              <span class=\"string\">echo</span> <span class=\"string\">$((</span> <span class=\"string\">$(echo</span> <span class=\"string\">$&#123;POD_NAME&#125;</span> <span class=\"string\">|</span> <span class=\"string\">awk</span> <span class=\"string\">-F</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span><span class=\"string\">)</span> <span class=\"string\">+</span> <span class=\"number\">1</span> <span class=\"string\">))</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">              <span class=\"string\">/data/myid</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;busybox:1.31.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">        <span class=\"comment\"># node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: zk-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: zk-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f zookeeper-cluster.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f zookeeper-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"部署kafka-1\"><a href=\"#部署kafka-1\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">部署kafka集群</button></li><li class=\"tab\"><button data-href=\"#comments-2\">部署service对象</button></li><li class=\"tab\"><button data-href=\"#comments-3\">部署kafka-manager</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建ingress</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - kafka-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_REPLICAS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZK_LOCAL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_HEAP_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;-Xmx1024M -Xms1024M&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_num_partitions</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_delete_topic_enable</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_retention_hours</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;2147483647&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_PORT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;9092&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_zookeeper_connection_timeout_ms</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;6000&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_dirs</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/opt/kafka/data/logs</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZOOKEEPER_CONNECT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;zk-logging-service.logging.svc.cluster.local:2181&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">BROKER_ID_COMMAND</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;hostname | awk -F &#x27;</span><span class=\"string\">&#x27;-&#x27;</span><span class=\"string\">&#x27; &#x27;</span><span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_PORT_NUMBER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;9092&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">$(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;wurstmeister/kafka:2.12-2.5.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/kafka</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: kafka-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: kafka-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-cluster.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>kafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZK_HOSTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;zk-logging-service.logging.svc:2181&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;kafkamanager/kafka-manager:2.0.0.2&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9000</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-manager.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kafka-manager.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-manager-ingress.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>检查所有的pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,svc,ingress -n logging | grep -E <span class=\"string\">&#x27;kafka|zk&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"创建nginx配置\"><a href=\"#创建nginx配置\" class=\"headerlink\" title=\"创建nginx配置\"></a>创建nginx配置</h2><p>在nginx服务器上增加kafka-manager配置，代理kafka服务：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kafka-manager.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kafka-manager.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kafka-manager.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host $http_host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t </span><br><span class=\"line\">nginx -s reload </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问并配置kafka-manager\"><a href=\"#访问并配置kafka-manager\" class=\"headerlink\" title=\"访问并配置kafka-manager\"></a>访问并配置kafka-manager</h2><p>通过浏览器访问kafka-manager的域名<code>kafka-manager.example.com</code>即可进入kafka-manager的控制页面，点击上边的<code>Cluster</code>，然后选择<code>Add Cluster</code>添加kafka集群，需要填入下面几个信息：</p>\n<img src= \"/img/loading.gif\" data-src=\"./add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"./add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n<p>最后点击<code>save</code>后集群信息添加完成。</p>\n<br>\n\n\n\n<h1 id=\"部署logstash\"><a href=\"#部署logstash\" class=\"headerlink\" title=\"部署logstash\"></a>部署logstash</h1><h2 id=\"创建logstash配置\"><a href=\"#创建logstash配置\" class=\"headerlink\" title=\"创建logstash配置\"></a>创建logstash配置</h2><p>logstash相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\">logstash配置文件</a> 找到，这里需要将<code>efk-template.json</code>, <code>init_efk.sh</code>, <code>k8s-log.json</code>, <code>logstash.conf</code>, <code>logstash.yml</code>, <code>systemd-log.json</code> 放入一个目录下，例如<code>logstash-conf</code>下：</p>\n<ul>\n<li><code>efk-template.json</code>：定义的是针对索引的日志策略；</li>\n<li><code>init_efk.sh</code>：操作es ，初始化一些配置；</li>\n<li><code>k8s-log.json</code>：收集k8s日志的配置；</li>\n<li><code>logstash.conf</code>：logstash的流水线配置；</li>\n<li><code>logstash.yml</code>：logstash配置文件；</li>\n<li><code>systemd-log.json</code>：收集系统日志的配置；</li>\n</ul>\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging </span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"./configmap.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"部署logstash-1\"><a href=\"#部署logstash-1\" class=\"headerlink\" title=\"部署logstash\"></a>部署logstash</h2><p>logstash不需要很多实例，所以使用<code>deployment</code>方式部署，可以根据需要进行扩展：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logstash-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;logstash:7.8.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5044</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5044</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9600</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9600</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/logstash.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.conf</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/efk-template.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">efk-template.json</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;curlimages/curl:latest&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-efk</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_efk.sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/k8s-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">k8s-log.json</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/systemd-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">systemd-log.json</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">&#x27;s0:c13,c12&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接运行下面的命令部署logstash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f logstash-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查服务-1\"><a href=\"#检查服务-1\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有的pod都处于Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n logging | grep logstash</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./logstash-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"部署filebeat\"><a href=\"#部署filebeat\" class=\"headerlink\" title=\"部署filebeat\"></a>部署filebeat</h1><h2 id=\"部署相关资源-1\"><a href=\"#部署相关资源-1\" class=\"headerlink\" title=\"部署相关资源\"></a>部署相关资源</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建权限</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建相关配置</button></li><li class=\"tab\"><button data-href=\"#comments-3\">部署filebeat</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-bind</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>] <span class=\"comment\"># &quot;&quot; indicates the core API group</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">filebeat-rbac.yaml</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-configmap.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&quot;filebeat-k8s&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.registry.path:</span> <span class=\"string\">/var/log/filebeat/registry</span></span><br><span class=\"line\">    <span class=\"attr\">logging.level:</span> <span class=\"string\">warning</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">container</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/lib/docker/containers/*/*-json.log</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.pattern:</span> <span class=\"string\">&#x27;^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.negate:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.match:</span> <span class=\"string\">after</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.max_lines:</span> <span class=\"number\">500</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/log/messages</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">processors:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_kubernetes_metadata:</span></span><br><span class=\"line\">          <span class=\"attr\">in_cluster:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_host_metadata:</span> </span><br><span class=\"line\">          <span class=\"attr\">netinfo.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_locale:</span> <span class=\"string\">~</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">target:</span> <span class=\"string\">host</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">ip:</span> <span class=\"string\">$&#123;NODE_IP&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">podip:</span> <span class=\"string\">$&#123;POD_IP&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">drop_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span> [<span class=\"string\">&quot;agent.ephemeral_id&quot;</span>,<span class=\"string\">&quot;agent.id&quot;</span>,<span class=\"string\">&quot;log.offset&quot;</span>,<span class=\"string\">&quot;suricata.eve.timestamp&quot;</span>,<span class=\"string\">&quot;host.os.codename&quot;</span>,<span class=\"string\">&quot;host.hostname&quot;</span>]</span><br><span class=\"line\">          <span class=\"attr\">ignore_missing:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output.kafka:</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span> [<span class=\"string\">&quot;kafka-logging-service:9092&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"number\">2.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"attr\">worker:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">topics:</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">&quot;k8s-log.<span class=\"template-variable\">%&#123;[kubernetes.namespace]&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">&quot;container&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">&quot;systemd-log.<span class=\"template-variable\">%&#123;[host.name]&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">partition.round_robin:</span></span><br><span class=\"line\">        <span class=\"attr\">reachable_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">required_acks:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">compression:</span> <span class=\"string\">gzip</span></span><br><span class=\"line\">      <span class=\"attr\">max_message_bytes:</span> <span class=\"number\">1000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.hosts:</span> [ <span class=\"string\">&quot;es-logging-service:9200&quot;</span> ]</span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.protocol:</span> <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.username:</span> <span class=\"string\">&quot;elastic&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.password:</span> <span class=\"string\">&quot;$&#123;ELASTIC_PASSWORD&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f filebeat-configmap.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># fileat-daemonset.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/home/filebeat-config/filebeat.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-e&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">spec.nodeName</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.hostIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;elastic/filebeat:7.6.8&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/home/filebeat-config</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">420</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在yaml文件中，将<code>/var/lib/docker/containers</code>和<code>/var/log</code>挂载到了容器中，方便容器进行日志收集。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f filebeat-daemonset.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查服务-2\"><a href=\"#检查服务-2\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n logging | grep filebeat</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"部署kibana\"><a href=\"#部署kibana\" class=\"headerlink\" title=\"部署kibana\"></a>部署kibana</h1><h2 id=\"部署相关资源-2\"><a href=\"#部署相关资源-2\" class=\"headerlink\" title=\"部署相关资源\"></a>部署相关资源</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建初始化配置</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">部署kibana</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建service对象</button></li><li class=\"tab\"><button data-href=\"#comments-5\">创建ingress对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>Kibana相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\">kibana配置文件</a> 找到，这里需要将<code>init_kibana.sh</code> 放入一个目录下，例如<code>kibana-conf</code>下，然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">kibana.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">    <span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">server.name:</span> <span class=\"string\">&quot;kibana-logging&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://es-logging-service:9200&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.username:</span> <span class=\"string\">&quot;kibana&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.password:</span> <span class=\"string\">&quot;$&#123;KIBANA_PASSWORD&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestHeadersWhitelist:</span> [ <span class=\"string\">&#x27;es-security-runas-user&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;authorization&#x27;</span>, <span class=\"string\">&#x27;X-Proxy-Remote-User&#x27;</span>, <span class=\"string\">&#x27;x-forwarded-for&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;x-forwarded-access-token&#x27;</span> ]</span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestTimeout:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">kibana.index:</span> <span class=\"string\">&quot;.kibana&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">logging.quiet:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">kibana_check.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    <span class=\"string\">KIBANA_REST_BASEURL=http://localhost:5601/login</span></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\">    <span class=\"string\">max_time=&quot;$&#123;max_time:-4&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">response_code=&quot;$(</span></span><br><span class=\"line\">        <span class=\"string\">curl</span> <span class=\"string\">--silent</span>                          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--request</span> <span class=\"string\">HEAD</span>                    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--head</span>                            <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--output</span> <span class=\"string\">/dev/null</span>                <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--max-time</span> <span class=\"string\">&quot;$&#123;max_time&#125;&quot;</span>          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--write-out</span> <span class=\"string\">&#x27;<span class=\"template-variable\">%&#123;response_code&#125;</span>&#x27;</span>    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">&quot;$&#123;KIBANA_REST_BASEURL&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">if</span> [ <span class=\"string\">&quot;$&#123;response_code&#125;&quot;</span> <span class=\"string\">==</span> <span class=\"string\">&quot;$&#123;EXPECTED_RESPONSE_CODE&#125;&quot;</span> ]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">else</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">&quot;Kibana node is not ready to accept HTTP requests yet [response code: $&#123;response_code&#125;]&quot;</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">fi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-config.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KIBANA_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;kibana:7.8.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana_check.sh</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;curlimages/curl:latest&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-kibana</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_kibana.sh</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-init-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-deployment.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kibana.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">5601</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-ingress.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"配置nginx暴露服务\"><a href=\"#配置nginx暴露服务\" class=\"headerlink\" title=\"配置nginx暴露服务\"></a>配置nginx暴露服务</h2><p>新增下面的nginx配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kibana.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kibana.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kibana.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host $http_host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查服务-3\"><a href=\"#检查服务-3\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保相关pod都处在Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,svc,ingress -n logging | grep kibana</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"./kibana-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h2><p>通过浏览器访问<code>kibana.example.com</code>即可进入kibana的页面，输入在部署elasticsearch中设置的初始账号密码：<code>elastic/elastic</code>。然后在kibana中创建<code>Index patterns</code>就可以了。</p>\n<img src= \"/img/loading.gif\" data-src=\"./kibana.png\" style=\"zoom:50%;\" />\n\n\n\n<p>访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：</p>\n<img src= \"/img/loading.gif\" data-src=\"./kafka.png\" style=\"zoom:50%;\" />\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在k8s中使用filebeat、kafka、logstash、elasticsearch、kibana进行日志收集</p><p>更新于 2021-03-27</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"架构方案\"><a href=\"#架构方案\" class=\"headerlink\" title=\"架构方案\"></a>架构方案</h1><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>整体收集方案使用如下的组件：</p>\n<ul>\n<li><code>filebeat</code>：采集节点和容器日志，发送到kafka；</li>\n<li><code>kafka</code>：接收filebeat发送的日志消息；</li>\n<li><code>logstash</code>：从kafka中消费日志消息并进行处理；</li>\n<li><code>elasticsearch</code>：进行日志存储；</li>\n<li><code>kibana</code>：日志可视化展示；</li>\n</ul>\n<blockquote>\n<p>日志文件 –&gt; filebeat –&gt; kafka –&gt; logstash –&gt; elasticsearch –&gt; kibana</p>\n</blockquote>\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><ul>\n<li><code>filebeat</code>：7.6.2；</li>\n<li><code>kafka</code>：2.12-2.5.0；</li>\n<li><code>zookeeper</code>：3.5.7；</li>\n<li><code>logstash</code>：7.8.0；</li>\n<li><code>elasticsearch</code>：7.8.0；</li>\n<li><code>kibana</code>：7.8.0；</li>\n</ul>\n<h2 id=\"方案可能存在的问题\"><a href=\"#方案可能存在的问题\" class=\"headerlink\" title=\"方案可能存在的问题\"></a>方案可能存在的问题</h2><p>这套日志收集方案可能存在下面的问题：</p>\n<ul>\n<li>elasticsearch可能存在瓶颈（es还需要进一步调优）；</li>\n<li>logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；</li>\n<li>……</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">准备nfs相关资源</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建namespace</button></li><li class=\"tab\"><button data-href=\"#comments-3\">设置elasticsearch密码</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>这里使用nfs作为底层存储，相关的创建方法可以参考：<a href=\"/2021/03/23/%E5%9C%A8k8s%E4%B8%AD%E4%BD%BF%E7%94%A8nfs%E5%AD%98%E5%82%A8/\" title=\"在k8s中使用nfs存储\">在k8s中使用nfs存储</a>，当然也可以使用其他的存储系统。</p><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用下面的yaml文件创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namesapce.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logging</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f namespace.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>elasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">espassword=<span class=\"string\">&quot;elastic&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl create secret generic es-logging-password --from-literal=elastic=<span class=\"string\">&#x27;elastic&#x27;</span> -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里讲elasticsearch密码设置为：<code>elastic</code></p>\n</blockquote><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署elasticsearch\"><a href=\"#部署elasticsearch\" class=\"headerlink\" title=\"部署elasticsearch\"></a>部署elasticsearch</h1><h2 id=\"部署相关资源\"><a href=\"#部署相关资源\" class=\"headerlink\" title=\"部署相关资源\"></a>部署相关资源</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建elasticsearch配置</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建elasticsearch集群</button></li><li class=\"tab\"><button data-href=\"#comments-3\">创建service</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">cluster.name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">node.name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    <span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">    <span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"attr\">discovery.seed_hosts:</span> [<span class=\"string\">&quot;es-logging-cluster&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">cluster.initial_master_nodes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-2</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.collection.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">basic</span></span><br><span class=\"line\">    <span class=\"attr\">indices.lifecycle.history_index_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.ilm.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">cluster.routing.allocation.disk.threshold_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.enabled: true</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.verification_mode: certificate</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.key: certs/es-logging-service.key</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate: certs/es-logging-service.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate_authorities: certs/ca.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.http.ssl.enabled: false</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.authc.realms:</span></span><br><span class=\"line\">    <span class=\"comment\">#   native.realm1:</span></span><br><span class=\"line\">    <span class=\"comment\">#     order: 0</span></span><br><span class=\"line\">  <span class=\"attr\">es_check.sh:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">ES_REST_BASEURL=http://localhost:9200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">max_time=$&#123;READINESS_PROBE_TIMEOUT:-30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">function</span> <span class=\"string\">check_if_ready()</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">path=&quot;$1&quot;</span></span><br><span class=\"line\">      <span class=\"string\">err_msg=&quot;$2&quot;</span></span><br><span class=\"line\">      <span class=\"string\">response_code=$(curl</span> <span class=\"string\">-s</span> <span class=\"string\">-k</span> <span class=\"string\">--head</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-u</span> <span class=\"string\">elastic:$</span>&#123;<span class=\"string\">ELASTIC_PASSWORD</span>&#125; <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">--max-time</span> <span class=\"string\">$max_time</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-o</span> <span class=\"string\">/dev/null</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-w</span> <span class=\"string\">&#x27;<span class=\"template-variable\">%&#123;response_code&#125;</span>&#x27;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">&quot;$&#123;ES_REST_BASEURL&#125;$&#123;path&#125;&quot;</span><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">if</span> [ <span class=\"string\">&quot;$&#123;response_code&#125;&quot;</span> <span class=\"type\">!=</span> <span class=\"string\">$</span>&#123;<span class=\"string\">EXPECTED_RESPONSE_CODE</span>&#125; ]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">&quot;$&#123;err_msg&#125; [response code: $&#123;response_code&#125;]&quot;</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"string\">fi</span></span><br><span class=\"line\">      <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">check_if_ready</span> <span class=\"string\">&quot;/&quot;</span> <span class=\"string\">&quot;Elasticsearch node is not ready to accept HTTP requests yet&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置中的相关参数解释：</p>\n<ul>\n<li><code>cluster.name</code>：设置es集群名称，用于唯一标识一个集群；</li>\n<li><code>network.host</code>：监听的地址；</li>\n<li><code>discovery.seed_hosts</code>：节点发现方式；</li>\n<li><code>xpack.security.enabled</code>起用xpack安全组件；</li>\n<li><code>cluster.routing.allocation.disk.threshold_enabled</code>是否启动磁盘分配器；</li>\n</ul>\n<blockquote>\n<p><code>cluster.routing.allocation.disk.threshold_enabled</code>这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation\">相关文档</a></p>\n</blockquote>\n<p>es启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f elasticsearch-config.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p>使用下面的yaml文件创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - es-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_JAVA_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;-Xms2g -Xmx2g&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;docker.elastic.co/elasticsearch/elasticsearch:7.8.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">elasticsearch.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">es_check.sh</span></span><br><span class=\"line\">            <span class=\"comment\"># - mountPath: /usr/share/elasticsearch/config/certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   name: es-certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   readOnly: true</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_URI</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;http://elastic:$(ELASTIC_PASSWORD)@localhost:9200&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_ALL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES_SETTINGS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;justwatch/elasticsearch_exporter:1.1.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sysctl</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-w&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">vm.max_map_count=262144</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;busybox:1.31.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-vm-max-map</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ulimit</span> <span class=\"string\">-n</span> <span class=\"number\">65536</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;busybox:1.31.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-fd-ulimit</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">&#x27;s0:c13,c12&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: es-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: es-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">        <span class=\"comment\"># - name: es-certs</span></span><br><span class=\"line\">        <span class=\"comment\">#   secret:</span></span><br><span class=\"line\">        <span class=\"comment\">#     defaultMode: 420</span></span><br><span class=\"line\">        <span class=\"comment\">#     secretName: es-logging-certs</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>es集群使用了statefulset方式部署，其中storageclass<code>logging-storageclass</code>需要自己手动创建，执行下面的命令完成部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f elasticsearch-cluster.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">monitor-app:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeclt apply -f elasticsearch-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>首先确保所有的pod都处于running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n logging | grep es</span><br></pre></td></tr></table></figure>\n\n<img src=\"./es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl logs -f es-logging-1 -n logging -c es-logging</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果输出的日志中有<code>Cluster health status changed from [YELLOW] to [GREEN]</code>，说明集群正常了。</p>\n<br>\n\n\n\n<h1 id=\"部署kafka\"><a href=\"#部署kafka\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h1><h2 id=\"部署zookeeper\"><a href=\"#部署zookeeper\" class=\"headerlink\" title=\"部署zookeeper\"></a>部署zookeeper</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">部署zookeeper集群</button></li><li class=\"tab\"><button data-href=\"#comments-2\">部署service对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - zk-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_SERVERS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_4LW_COMMANDS_WHITELIST</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;ruok,srvr,conf,stat&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;zookeeper:3.5.7&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">              <span class=\"string\">echo</span> <span class=\"string\">$((</span> <span class=\"string\">$(echo</span> <span class=\"string\">$&#123;POD_NAME&#125;</span> <span class=\"string\">|</span> <span class=\"string\">awk</span> <span class=\"string\">-F</span> <span class=\"string\">&quot;-&quot;</span> <span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span><span class=\"string\">)</span> <span class=\"string\">+</span> <span class=\"number\">1</span> <span class=\"string\">))</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">              <span class=\"string\">/data/myid</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;busybox:1.31.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">        <span class=\"comment\"># node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: zk-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: zk-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f zookeeper-cluster.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f zookeeper-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"部署kafka-1\"><a href=\"#部署kafka-1\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">部署kafka集群</button></li><li class=\"tab\"><button data-href=\"#comments-2\">部署service对象</button></li><li class=\"tab\"><button data-href=\"#comments-3\">部署kafka-manager</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建ingress</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - kafka-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_REPLICAS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZK_LOCAL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_HEAP_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;-Xmx1024M -Xms1024M&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_num_partitions</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_delete_topic_enable</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_retention_hours</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;2147483647&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_PORT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;9092&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_zookeeper_connection_timeout_ms</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;6000&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_dirs</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/opt/kafka/data/logs</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZOOKEEPER_CONNECT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;zk-logging-service.logging.svc.cluster.local:2181&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">BROKER_ID_COMMAND</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;hostname | awk -F &#x27;</span><span class=\"string\">&#x27;-&#x27;</span><span class=\"string\">&#x27; &#x27;</span><span class=\"string\">&#x27;&#123;print $NF&#125;&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_PORT_NUMBER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;9092&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">$(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;wurstmeister/kafka:2.12-2.5.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/kafka</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: kafka-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: kafka-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-cluster.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>kafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZK_HOSTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&#x27;zk-logging-service.logging.svc:2181&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;kafkamanager/kafka-manager:2.0.0.2&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9000</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-manager.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kafka-manager.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kafka-manager-ingress.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>检查所有的pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,svc,ingress -n logging | grep -E <span class=\"string\">&#x27;kafka|zk&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"./kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"创建nginx配置\"><a href=\"#创建nginx配置\" class=\"headerlink\" title=\"创建nginx配置\"></a>创建nginx配置</h2><p>在nginx服务器上增加kafka-manager配置，代理kafka服务：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kafka-manager.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kafka-manager.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kafka-manager.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host $http_host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t </span><br><span class=\"line\">nginx -s reload </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问并配置kafka-manager\"><a href=\"#访问并配置kafka-manager\" class=\"headerlink\" title=\"访问并配置kafka-manager\"></a>访问并配置kafka-manager</h2><p>通过浏览器访问kafka-manager的域名<code>kafka-manager.example.com</code>即可进入kafka-manager的控制页面，点击上边的<code>Cluster</code>，然后选择<code>Add Cluster</code>添加kafka集群，需要填入下面几个信息：</p>\n<img src=\"./add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"./add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n<p>最后点击<code>save</code>后集群信息添加完成。</p>\n<br>\n\n\n\n<h1 id=\"部署logstash\"><a href=\"#部署logstash\" class=\"headerlink\" title=\"部署logstash\"></a>部署logstash</h1><h2 id=\"创建logstash配置\"><a href=\"#创建logstash配置\" class=\"headerlink\" title=\"创建logstash配置\"></a>创建logstash配置</h2><p>logstash相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\">logstash配置文件</a> 找到，这里需要将<code>efk-template.json</code>, <code>init_efk.sh</code>, <code>k8s-log.json</code>, <code>logstash.conf</code>, <code>logstash.yml</code>, <code>systemd-log.json</code> 放入一个目录下，例如<code>logstash-conf</code>下：</p>\n<ul>\n<li><code>efk-template.json</code>：定义的是针对索引的日志策略；</li>\n<li><code>init_efk.sh</code>：操作es ，初始化一些配置；</li>\n<li><code>k8s-log.json</code>：收集k8s日志的配置；</li>\n<li><code>logstash.conf</code>：logstash的流水线配置；</li>\n<li><code>logstash.yml</code>：logstash配置文件；</li>\n<li><code>systemd-log.json</code>：收集系统日志的配置；</li>\n</ul>\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging </span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"./configmap.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"部署logstash-1\"><a href=\"#部署logstash-1\" class=\"headerlink\" title=\"部署logstash\"></a>部署logstash</h2><p>logstash不需要很多实例，所以使用<code>deployment</code>方式部署，可以根据需要进行扩展：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logstash-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;logstash:7.8.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5044</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5044</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9600</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9600</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/logstash.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.conf</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/efk-template.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">efk-template.json</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;curlimages/curl:latest&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-efk</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_efk.sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/k8s-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">k8s-log.json</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/systemd-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">systemd-log.json</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">&#x27;s0:c13,c12&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接运行下面的命令部署logstash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f logstash-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查服务-1\"><a href=\"#检查服务-1\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有的pod都处于Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n logging | grep logstash</span><br></pre></td></tr></table></figure>\n\n<img src=\"./logstash-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"部署filebeat\"><a href=\"#部署filebeat\" class=\"headerlink\" title=\"部署filebeat\"></a>部署filebeat</h1><h2 id=\"部署相关资源-1\"><a href=\"#部署相关资源-1\" class=\"headerlink\" title=\"部署相关资源\"></a>部署相关资源</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建权限</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建相关配置</button></li><li class=\"tab\"><button data-href=\"#comments-3\">部署filebeat</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-bind</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>] <span class=\"comment\"># &quot;&quot; indicates the core API group</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">filebeat-rbac.yaml</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-configmap.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&quot;filebeat-k8s&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.registry.path:</span> <span class=\"string\">/var/log/filebeat/registry</span></span><br><span class=\"line\">    <span class=\"attr\">logging.level:</span> <span class=\"string\">warning</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">container</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/lib/docker/containers/*/*-json.log</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.pattern:</span> <span class=\"string\">&#x27;^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.negate:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.match:</span> <span class=\"string\">after</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.max_lines:</span> <span class=\"number\">500</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/log/messages</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">processors:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_kubernetes_metadata:</span></span><br><span class=\"line\">          <span class=\"attr\">in_cluster:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_host_metadata:</span> </span><br><span class=\"line\">          <span class=\"attr\">netinfo.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_locale:</span> <span class=\"string\">~</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">target:</span> <span class=\"string\">host</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">ip:</span> <span class=\"string\">$&#123;NODE_IP&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">podip:</span> <span class=\"string\">$&#123;POD_IP&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">drop_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span> [<span class=\"string\">&quot;agent.ephemeral_id&quot;</span>,<span class=\"string\">&quot;agent.id&quot;</span>,<span class=\"string\">&quot;log.offset&quot;</span>,<span class=\"string\">&quot;suricata.eve.timestamp&quot;</span>,<span class=\"string\">&quot;host.os.codename&quot;</span>,<span class=\"string\">&quot;host.hostname&quot;</span>]</span><br><span class=\"line\">          <span class=\"attr\">ignore_missing:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output.kafka:</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span> [<span class=\"string\">&quot;kafka-logging-service:9092&quot;</span>]</span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"number\">2.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"attr\">worker:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">topics:</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">&quot;k8s-log.<span class=\"template-variable\">%&#123;[kubernetes.namespace]&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">&quot;container&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">&quot;systemd-log.<span class=\"template-variable\">%&#123;[host.name]&#125;</span>&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">partition.round_robin:</span></span><br><span class=\"line\">        <span class=\"attr\">reachable_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">required_acks:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">compression:</span> <span class=\"string\">gzip</span></span><br><span class=\"line\">      <span class=\"attr\">max_message_bytes:</span> <span class=\"number\">1000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.hosts:</span> [ <span class=\"string\">&quot;es-logging-service:9200&quot;</span> ]</span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.protocol:</span> <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.username:</span> <span class=\"string\">&quot;elastic&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.password:</span> <span class=\"string\">&quot;$&#123;ELASTIC_PASSWORD&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f filebeat-configmap.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p>每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># fileat-daemonset.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/home/filebeat-config/filebeat.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-e&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">spec.nodeName</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.hostIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;elastic/filebeat:7.6.8&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/home/filebeat-config</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">420</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在yaml文件中，将<code>/var/lib/docker/containers</code>和<code>/var/log</code>挂载到了容器中，方便容器进行日志收集。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f filebeat-daemonset.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"检查服务-2\"><a href=\"#检查服务-2\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n logging | grep filebeat</span><br></pre></td></tr></table></figure>\n\n<img src=\"./pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"部署kibana\"><a href=\"#部署kibana\" class=\"headerlink\" title=\"部署kibana\"></a>部署kibana</h1><h2 id=\"部署相关资源-2\"><a href=\"#部署相关资源-2\" class=\"headerlink\" title=\"部署相关资源\"></a>部署相关资源</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">创建初始化配置</button></li><li class=\"tab\"><button data-href=\"#comments-2\">创建配置文件</button></li><li class=\"tab\"><button data-href=\"#comments-3\">部署kibana</button></li><li class=\"tab\"><button data-href=\"#comments-4\">创建service对象</button></li><li class=\"tab\"><button data-href=\"#comments-5\">创建ingress对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p>Kibana相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\">kibana配置文件</a> 找到，这里需要将<code>init_kibana.sh</code> 放入一个目录下，例如<code>kibana-conf</code>下，然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">kibana.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">    <span class=\"attr\">server.host:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">server.name:</span> <span class=\"string\">&quot;kibana-logging&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://es-logging-service:9200&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.username:</span> <span class=\"string\">&quot;kibana&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.password:</span> <span class=\"string\">&quot;$&#123;KIBANA_PASSWORD&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestHeadersWhitelist:</span> [ <span class=\"string\">&#x27;es-security-runas-user&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;authorization&#x27;</span>, <span class=\"string\">&#x27;X-Proxy-Remote-User&#x27;</span>, <span class=\"string\">&#x27;x-forwarded-for&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;x-forwarded-access-token&#x27;</span> ]</span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestTimeout:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">kibana.index:</span> <span class=\"string\">&quot;.kibana&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">logging.quiet:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">kibana_check.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    <span class=\"string\">KIBANA_REST_BASEURL=http://localhost:5601/login</span></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\">    <span class=\"string\">max_time=&quot;$&#123;max_time:-4&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">response_code=&quot;$(</span></span><br><span class=\"line\">        <span class=\"string\">curl</span> <span class=\"string\">--silent</span>                          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--request</span> <span class=\"string\">HEAD</span>                    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--head</span>                            <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--output</span> <span class=\"string\">/dev/null</span>                <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--max-time</span> <span class=\"string\">&quot;$&#123;max_time&#125;&quot;</span>          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--write-out</span> <span class=\"string\">&#x27;<span class=\"template-variable\">%&#123;response_code&#125;</span>&#x27;</span>    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">&quot;$&#123;KIBANA_REST_BASEURL&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">if</span> [ <span class=\"string\">&quot;$&#123;response_code&#125;&quot;</span> <span class=\"string\">==</span> <span class=\"string\">&quot;$&#123;EXPECTED_RESPONSE_CODE&#125;&quot;</span> ]<span class=\"string\">;</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">else</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">&quot;Kibana node is not ready to accept HTTP requests yet [response code: $&#123;response_code&#125;]&quot;</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">fi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-config.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KIBANA_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;kibana:7.8.0&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">&#x27;2&#x27;</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana_check.sh</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&#x27;-c&#x27;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">&#x27;curlimages/curl:latest&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-kibana</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> &#123;&#125;</span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_kibana.sh</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: &#x27;true&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-init-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-deployment.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-service.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-5\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kibana.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">5601</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f kibana-ingress.yaml</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h2 id=\"配置nginx暴露服务\"><a href=\"#配置nginx暴露服务\" class=\"headerlink\" title=\"配置nginx暴露服务\"></a>配置nginx暴露服务</h2><p>新增下面的nginx配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kibana.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kibana.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kibana.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host $http_host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查服务-3\"><a href=\"#检查服务-3\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保相关pod都处在Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod,svc,ingress -n logging | grep kibana</span><br></pre></td></tr></table></figure>\n\n<img src=\"./kibana-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h2><p>通过浏览器访问<code>kibana.example.com</code>即可进入kibana的页面，输入在部署elasticsearch中设置的初始账号密码：<code>elastic/elastic</code>。然后在kibana中创建<code>Index patterns</code>就可以了。</p>\n<img src=\"./kibana.png\" style=\"zoom:50%;\" />\n\n\n\n<p>访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：</p>\n<img src=\"./kafka.png\" style=\"zoom:50%;\" />\n\n\n\n"},{"title":"Redis分布式锁","date":"2021-06-06T10:00:58.000Z","description":"redis中分布式锁的原理和使用方法","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.php.cn%2Fupload%2Farticle%2F000%2F000%2F029%2F5cda85b2be126130.jpg&refer=http%3A%2F%2Fimg.php.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1611641043&t=dc5360df5690a298d45dddbf1299fad2","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis中常见的几种数据类型的基本命令行操作\n\n更新于 2021-06-06\n\n{% endnote %}\n\n<br>\n\n\n\n## 分布式应用遇到的问题\n\n分布式应用在逻辑处理时常会遇到并发的问题。\n\n\n\n![](./fenbushi.png)\n\n一个修改用户状态的操作是从redis中读取数据修改然后写回redis，但这样的操作如果同时又多个操作在进行，就会出现并发的问题，因为读和写不是原子操作。\n\n\n\n> 原子操作是指不会被线程调度机制打断的操作，这种操作从开始到结束中间不会有线程切换\n\n\n\n这种时候最好是通过redis的分布式锁方式进行解决。\n\n\n\n<br>\n\n\n\n## 分布式锁的原理\n\n分布式锁的本质类似于一个令牌，当进程想要操作redis的时候会先尝试获取这个令牌，如果发现这个令牌已经被别的进程占有，则会放弃或者稍后再试；\n\n\n\n### 占用和释放锁\n\n一般使用`setnx`占用锁，用完后使用`del`释放锁，例如：\n\n```bash\n127.0.0.1:6379> setnx lock:hole true\nOK\n```\n\n\n\n这样就占据了锁，然后就进行自己的处理逻辑即可，完成后需要将锁释放：\n\n```bash\n127.0.0.1:6379> del lock:hole\n(integer) 1\n```\n\n\n\n### 避免死锁\n\n如果程序占用锁后，自己的处理逻辑出现异常导致所不能释放，那么会出现死锁，其他程序也就无法调用，这时候可以给锁加上一个过期时间，到了时间锁会强制释放：\n\n```bash\n127.0.0.1:6379> setnx lock:hole true\nOK\n127.0.0.1:6379> expire lock:hole 5\n```\n\n\n\n>  这里是添加了5秒的过期时间\n\n\n\n但是这两个操作`setnx`和`expire`不是原子操作，假设`setnx`和`expire`操作之间出现问题，也会出现死锁的现象，所以推荐使用下面的方式，抢占锁的同时设置过期时间：\n\n```bash\n127.0.0.1:6379> set lock:hole true ex 5 nx\n```\n\n\n\n<br>\n\n\n\n## 超时问题\n\n使用锁的时候都会设置超时时间，如果当逻辑执行时间太长，已经到了锁释放时间还没执行完，就会导致第二个线程持有了这个锁。所以redis锁不适合那种执行时间长的任务。\n\n\n\n一种避免这个问题的方法是在设置锁的时候设置一个随机数：\n\n```python\ntag = random.nextint()\n\nif redis.set(key, tag, nx=True, ex=5):\n  do_somthing()\n  redis.delifequals(key, tag)\n```\n\n\n\n","source":"_posts/Redis分布式锁.md","raw":"---\ntitle: Redis分布式锁\ndate: 2021-06-06 18:00:58\ntags:\n- Redis\ncategories:\n- 数据库\n- Redis\n- 常用操作\ndescription: redis中分布式锁的原理和使用方法\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.php.cn%2Fupload%2Farticle%2F000%2F000%2F029%2F5cda85b2be126130.jpg&refer=http%3A%2F%2Fimg.php.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1611641043&t=dc5360df5690a298d45dddbf1299fad2\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍redis中常见的几种数据类型的基本命令行操作\n\n更新于 2021-06-06\n\n{% endnote %}\n\n<br>\n\n\n\n## 分布式应用遇到的问题\n\n分布式应用在逻辑处理时常会遇到并发的问题。\n\n\n\n![](./fenbushi.png)\n\n一个修改用户状态的操作是从redis中读取数据修改然后写回redis，但这样的操作如果同时又多个操作在进行，就会出现并发的问题，因为读和写不是原子操作。\n\n\n\n> 原子操作是指不会被线程调度机制打断的操作，这种操作从开始到结束中间不会有线程切换\n\n\n\n这种时候最好是通过redis的分布式锁方式进行解决。\n\n\n\n<br>\n\n\n\n## 分布式锁的原理\n\n分布式锁的本质类似于一个令牌，当进程想要操作redis的时候会先尝试获取这个令牌，如果发现这个令牌已经被别的进程占有，则会放弃或者稍后再试；\n\n\n\n### 占用和释放锁\n\n一般使用`setnx`占用锁，用完后使用`del`释放锁，例如：\n\n```bash\n127.0.0.1:6379> setnx lock:hole true\nOK\n```\n\n\n\n这样就占据了锁，然后就进行自己的处理逻辑即可，完成后需要将锁释放：\n\n```bash\n127.0.0.1:6379> del lock:hole\n(integer) 1\n```\n\n\n\n### 避免死锁\n\n如果程序占用锁后，自己的处理逻辑出现异常导致所不能释放，那么会出现死锁，其他程序也就无法调用，这时候可以给锁加上一个过期时间，到了时间锁会强制释放：\n\n```bash\n127.0.0.1:6379> setnx lock:hole true\nOK\n127.0.0.1:6379> expire lock:hole 5\n```\n\n\n\n>  这里是添加了5秒的过期时间\n\n\n\n但是这两个操作`setnx`和`expire`不是原子操作，假设`setnx`和`expire`操作之间出现问题，也会出现死锁的现象，所以推荐使用下面的方式，抢占锁的同时设置过期时间：\n\n```bash\n127.0.0.1:6379> set lock:hole true ex 5 nx\n```\n\n\n\n<br>\n\n\n\n## 超时问题\n\n使用锁的时候都会设置超时时间，如果当逻辑执行时间太长，已经到了锁释放时间还没执行完，就会导致第二个线程持有了这个锁。所以redis锁不适合那种执行时间长的任务。\n\n\n\n一种避免这个问题的方法是在设置锁的时候设置一个随机数：\n\n```python\ntag = random.nextint()\n\nif redis.set(key, tag, nx=True, ex=5):\n  do_somthing()\n  redis.delifequals(key, tag)\n```\n\n\n\n","slug":"Redis分布式锁","published":1,"updated":"2021-06-06T10:02:13.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpl0nvur0000ccklbymd8oa7","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis中常见的几种数据类型的基本命令行操作</p><p>更新于 2021-06-06</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"分布式应用遇到的问题\"><a href=\"#分布式应用遇到的问题\" class=\"headerlink\" title=\"分布式应用遇到的问题\"></a>分布式应用遇到的问题</h2><p>分布式应用在逻辑处理时常会遇到并发的问题。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"./fenbushi.png\" alt=\"\"></p>\n<p>一个修改用户状态的操作是从redis中读取数据修改然后写回redis，但这样的操作如果同时又多个操作在进行，就会出现并发的问题，因为读和写不是原子操作。</p>\n<blockquote>\n<p>原子操作是指不会被线程调度机制打断的操作，这种操作从开始到结束中间不会有线程切换</p>\n</blockquote>\n<p>这种时候最好是通过redis的分布式锁方式进行解决。</p>\n<br>\n\n\n\n<h2 id=\"分布式锁的原理\"><a href=\"#分布式锁的原理\" class=\"headerlink\" title=\"分布式锁的原理\"></a>分布式锁的原理</h2><p>分布式锁的本质类似于一个令牌，当进程想要操作redis的时候会先尝试获取这个令牌，如果发现这个令牌已经被别的进程占有，则会放弃或者稍后再试；</p>\n<h3 id=\"占用和释放锁\"><a href=\"#占用和释放锁\" class=\"headerlink\" title=\"占用和释放锁\"></a>占用和释放锁</h3><p>一般使用<code>setnx</code>占用锁，用完后使用<code>del</code>释放锁，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setnx lock:hole <span class=\"literal\">true</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样就占据了锁，然后就进行自己的处理逻辑即可，完成后需要将锁释放：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del lock:hole</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h3><p>如果程序占用锁后，自己的处理逻辑出现异常导致所不能释放，那么会出现死锁，其他程序也就无法调用，这时候可以给锁加上一个过期时间，到了时间锁会强制释放：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setnx lock:hole <span class=\"literal\">true</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; expire lock:hole 5</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 这里是添加了5秒的过期时间</p>\n</blockquote>\n<p>但是这两个操作<code>setnx</code>和<code>expire</code>不是原子操作，假设<code>setnx</code>和<code>expire</code>操作之间出现问题，也会出现死锁的现象，所以推荐使用下面的方式，抢占锁的同时设置过期时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> lock:hole <span class=\"literal\">true</span> ex 5 nx</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"超时问题\"><a href=\"#超时问题\" class=\"headerlink\" title=\"超时问题\"></a>超时问题</h2><p>使用锁的时候都会设置超时时间，如果当逻辑执行时间太长，已经到了锁释放时间还没执行完，就会导致第二个线程持有了这个锁。所以redis锁不适合那种执行时间长的任务。</p>\n<p>一种避免这个问题的方法是在设置锁的时候设置一个随机数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag = random.nextint()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> redis.<span class=\"built_in\">set</span>(key, tag, nx=<span class=\"literal\">True</span>, ex=<span class=\"number\">5</span>):</span><br><span class=\"line\">  do_somthing()</span><br><span class=\"line\">  redis.delifequals(key, tag)</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍redis中常见的几种数据类型的基本命令行操作</p><p>更新于 2021-06-06</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"分布式应用遇到的问题\"><a href=\"#分布式应用遇到的问题\" class=\"headerlink\" title=\"分布式应用遇到的问题\"></a>分布式应用遇到的问题</h2><p>分布式应用在逻辑处理时常会遇到并发的问题。</p>\n<p><img src=\"./fenbushi.png\" alt=\"\"></p>\n<p>一个修改用户状态的操作是从redis中读取数据修改然后写回redis，但这样的操作如果同时又多个操作在进行，就会出现并发的问题，因为读和写不是原子操作。</p>\n<blockquote>\n<p>原子操作是指不会被线程调度机制打断的操作，这种操作从开始到结束中间不会有线程切换</p>\n</blockquote>\n<p>这种时候最好是通过redis的分布式锁方式进行解决。</p>\n<br>\n\n\n\n<h2 id=\"分布式锁的原理\"><a href=\"#分布式锁的原理\" class=\"headerlink\" title=\"分布式锁的原理\"></a>分布式锁的原理</h2><p>分布式锁的本质类似于一个令牌，当进程想要操作redis的时候会先尝试获取这个令牌，如果发现这个令牌已经被别的进程占有，则会放弃或者稍后再试；</p>\n<h3 id=\"占用和释放锁\"><a href=\"#占用和释放锁\" class=\"headerlink\" title=\"占用和释放锁\"></a>占用和释放锁</h3><p>一般使用<code>setnx</code>占用锁，用完后使用<code>del</code>释放锁，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setnx lock:hole <span class=\"literal\">true</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样就占据了锁，然后就进行自己的处理逻辑即可，完成后需要将锁释放：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; del lock:hole</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h3><p>如果程序占用锁后，自己的处理逻辑出现异常导致所不能释放，那么会出现死锁，其他程序也就无法调用，这时候可以给锁加上一个过期时间，到了时间锁会强制释放：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setnx lock:hole <span class=\"literal\">true</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; expire lock:hole 5</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 这里是添加了5秒的过期时间</p>\n</blockquote>\n<p>但是这两个操作<code>setnx</code>和<code>expire</code>不是原子操作，假设<code>setnx</code>和<code>expire</code>操作之间出现问题，也会出现死锁的现象，所以推荐使用下面的方式，抢占锁的同时设置过期时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> lock:hole <span class=\"literal\">true</span> ex 5 nx</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"超时问题\"><a href=\"#超时问题\" class=\"headerlink\" title=\"超时问题\"></a>超时问题</h2><p>使用锁的时候都会设置超时时间，如果当逻辑执行时间太长，已经到了锁释放时间还没执行完，就会导致第二个线程持有了这个锁。所以redis锁不适合那种执行时间长的任务。</p>\n<p>一种避免这个问题的方法是在设置锁的时候设置一个随机数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag = random.nextint()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> redis.<span class=\"built_in\">set</span>(key, tag, nx=<span class=\"literal\">True</span>, ex=<span class=\"number\">5</span>):</span><br><span class=\"line\">  do_somthing()</span><br><span class=\"line\">  redis.delifequals(key, tag)</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"使用fileinput操作文件","date":"2021-06-07T12:33:31.000Z","description":"使用 fileinput操作文件","cover":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=4163938920,38528075&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\nfileinput 是对 open 函数的再次封装，在仅需读取数据的场景中， fileinput 显然比 open 做得更专业、更人性。本文主要介绍了使用 fileinput来进行文件操作\n\n更新于 2021-06-07\n\n{% endnote %}\n\n<br>\n\n\n\n## 从标准输入中读取\n\n```python\nimport fileinput\n\nfor line in fileinput.input():\n    print(line) \n```\n\n\n\n当没有传入任何参数的时候， fileinput会将标准输入作为输入源；\n\n\n\n## 从文件读取\n\n```python\nimport fileinput\n\nwith fileinput.input(files=('a.txt',)) as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n```\n\n\n\n例如`a.txt`的内容为：\n\n```\nhello\nworld\nxxx\n```\n\n\n\n那么实例代码的输出为：\n\n```python\na.txt 第1行: hello\na.txt 第2行: world\na.txt 第3行：xxx\n```\n\n\n\nfileinput默认使用的模式为`mode='r'`，调整模式可以添加参数，如读取二进制文件：`mode='rb'`，但是fileinput只有这两种模式；\n\n\n\n## 打开多个文件\n\nfileinput的参数`files`可以接收包含多个文件的list或者tuple，例如：\n\n```python\nimport fileinput\n\nwith fileinput.input(files=('a.txt', 'b.txt')) as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n```\n\n\n\n`a.txt` 和 `b.txt` 的内容分别是：\n\n```bash\n$ cat a.txt\nhello\nworld\n\n$ cat b.txt\nhello\npython\n```\n\n\n\n那么示例程序的输出结果为：\n\n```python\na.txt 第1行: hello\na.txt 第2行: world\nb.txt 第3行: hello\nb.txt 第4行: python\n```\n\n\n\n可以看到输出的内容是对的，但是行号不是真正的行号，如果想获取文件的真正行号，可以使用`fileinput.filelineno()`方法：\n\n```python\nimport fileinput\n\nwith fileinput.input(files=('a.txt', 'b.txt')) as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.filelineno()}行: {line}', end='') \n```\n\n\n\n这样输出的就是文件真实行号了：\n\n```python\na.txt 第1行: hello\na.txt 第2行: world\nb.txt 第1行: hello\nb.txt 第2行: python\n```\n\n\n\n## 读取的同时备份文件\n\nfileinput的`backup`参数可以指定后缀名：\n\n```python\nimport fileinput\n\n\nwith fileinput.input(files=(\"a.txt\",), backup=\".bak\") as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n```\n\n\n\n运行后，会多出一个备份文件：\n\n```bash\n$ ls -l a.txt*\n-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt\n\n$ python demo.py\na.txt 第1行: hello\na.txt 第2行: world\n\n$ ls -l a.txt*\n-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt\n-rw-r--r--  1 MING  staff  42  2 27 10:39 a.txt.bak\n```\n\n\n\n## 标准输出重定向替换\n\n`fileinput.input` 有一个 inplace 参数，表示是否将标准输出的结果写回文件，默认不取代\n\n```python\nimport fileinput\n\nwith fileinput.input(files=(\"a.txt\",), inplace=True) as file:\n    print(\"[INFO] task is started...\") \n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n    print(\"[INFO] task is closed...\") \n```\n\n\n\n运行后，会发现在 for 循环体内的 print 内容会写回到原文件中了。而在 for 循环体外的 print 则没有变化:\n\n```bash\n$ cat a.txt\nhello\nworld\n\n$ python demo.py\n[INFO] task is started...\n[INFO] task is closed...\n\n$ cat a.txt \na.txt 第1行: hello\na.txt 第2行: world\n```\n\n\n\n## 常用的方法\n\n- `fileinput.filenam()`\n  返回当前被读取的文件名。在第一行被读取之前，返回 `None`。\n- `fileinput.fileno()`\n  返回以整数表示的当前文件“文件描述符”。当未打开文件时（处在第一行和文件之间），返回 `-1`。\n- `fileinput.lineno()`\n  返回已被读取的累计行号。在第一行被读取之前，返回 `0`。在最后一个文件的最后一行被读取之后，返回该行的行号。\n- `fileinput.filelineno()`\n  返回当前文件中的行号。在第一行被读取之前，返回 `0`。在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。\n\n- `fileinput.isfirstline()`\n  如果刚读取的行是其所在文件的第一行则返回 `True`，否则返回 `False`。\n- `fileinput.isstdin()`\n  如果最后读取的行来自 `sys.stdin` 则返回 `True`，否则返回 `False`。\n- `fileinput.nextfile()`\n  关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。直到下一个文件的第一行被读取之后文件名才会改变。在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。在最后一个文件的最后一行被读取之后，此函数将不再生效。\n- `fileinput.close()`\n  关闭序列。\n\n\n\n## 实例\n\n### 将CRLF转换为LF\n\n```python\nimport sys\nimport fileinput\n\nfor line in fileinput.input(files=('a.txt', ), inplace=True):\n    #将Windows/DOS格式下的文本文件转为Linux的文件\n    if line[-2:] == \"\\r\\n\":  \n        line = line + \"\\n\"\n    sys.stdout.write(line)\n```\n\n\n\n## 结合re进行日志分析\n\n```bash\n#--样本文件--：error.log\naaa\n1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...\nbbb\n1970-01-02 10:20:30  Error: **** Due to System Out of Memory...\nccc\n```\n\n\n\n```python\nimport re\nimport fileinput\nimport sys\n\npattern = '\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}'\n\nfor line in fileinput.input('error.log',backup='.bak',inplace=1):\n    if re.search(pattern,line):\n        sys.stdout.write(\"=> \")\n        sys.stdout.write(line)\n```\n\n\n\n```\n#---测试结果---\n=> 1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...\n=> 1970-01-02 10:20:30  Error: **** Due to System Out of Memory...\n```\n\n\n\n## 实现类似grep功能\n\n```python\nimport sys\nimport re\nimport fileinput\n\npattern= re.compile(sys.argv[1])\nfor line in fileinput.input(sys.argv[2]):\n    if pattern.match(line):\n        print(fileinput.filename(), fileinput.filelineno(), line)\n```\n\n\n\n```bash\n$ ./demo.py import.*re *.py\n#查找所有py文件中，含import re字样的\naddressBook.py  2   import re\naddressBook1.py 10  import re\naddressBook2.py 18  import re\ntest.py         238 import re\n```\n\n","source":"_posts/python操作文件.md","raw":"---\ntitle: 使用fileinput操作文件\ndate: 2021-06-07 20:33:31\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- 文件I/O\ndescription: 使用 fileinput操作文件\ncover: https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=4163938920,38528075&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\nfileinput 是对 open 函数的再次封装，在仅需读取数据的场景中， fileinput 显然比 open 做得更专业、更人性。本文主要介绍了使用 fileinput来进行文件操作\n\n更新于 2021-06-07\n\n{% endnote %}\n\n<br>\n\n\n\n## 从标准输入中读取\n\n```python\nimport fileinput\n\nfor line in fileinput.input():\n    print(line) \n```\n\n\n\n当没有传入任何参数的时候， fileinput会将标准输入作为输入源；\n\n\n\n## 从文件读取\n\n```python\nimport fileinput\n\nwith fileinput.input(files=('a.txt',)) as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n```\n\n\n\n例如`a.txt`的内容为：\n\n```\nhello\nworld\nxxx\n```\n\n\n\n那么实例代码的输出为：\n\n```python\na.txt 第1行: hello\na.txt 第2行: world\na.txt 第3行：xxx\n```\n\n\n\nfileinput默认使用的模式为`mode='r'`，调整模式可以添加参数，如读取二进制文件：`mode='rb'`，但是fileinput只有这两种模式；\n\n\n\n## 打开多个文件\n\nfileinput的参数`files`可以接收包含多个文件的list或者tuple，例如：\n\n```python\nimport fileinput\n\nwith fileinput.input(files=('a.txt', 'b.txt')) as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n```\n\n\n\n`a.txt` 和 `b.txt` 的内容分别是：\n\n```bash\n$ cat a.txt\nhello\nworld\n\n$ cat b.txt\nhello\npython\n```\n\n\n\n那么示例程序的输出结果为：\n\n```python\na.txt 第1行: hello\na.txt 第2行: world\nb.txt 第3行: hello\nb.txt 第4行: python\n```\n\n\n\n可以看到输出的内容是对的，但是行号不是真正的行号，如果想获取文件的真正行号，可以使用`fileinput.filelineno()`方法：\n\n```python\nimport fileinput\n\nwith fileinput.input(files=('a.txt', 'b.txt')) as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.filelineno()}行: {line}', end='') \n```\n\n\n\n这样输出的就是文件真实行号了：\n\n```python\na.txt 第1行: hello\na.txt 第2行: world\nb.txt 第1行: hello\nb.txt 第2行: python\n```\n\n\n\n## 读取的同时备份文件\n\nfileinput的`backup`参数可以指定后缀名：\n\n```python\nimport fileinput\n\n\nwith fileinput.input(files=(\"a.txt\",), backup=\".bak\") as file:\n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n```\n\n\n\n运行后，会多出一个备份文件：\n\n```bash\n$ ls -l a.txt*\n-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt\n\n$ python demo.py\na.txt 第1行: hello\na.txt 第2行: world\n\n$ ls -l a.txt*\n-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt\n-rw-r--r--  1 MING  staff  42  2 27 10:39 a.txt.bak\n```\n\n\n\n## 标准输出重定向替换\n\n`fileinput.input` 有一个 inplace 参数，表示是否将标准输出的结果写回文件，默认不取代\n\n```python\nimport fileinput\n\nwith fileinput.input(files=(\"a.txt\",), inplace=True) as file:\n    print(\"[INFO] task is started...\") \n    for line in file:\n        print(f'{fileinput.filename()} 第{fileinput.lineno()}行: {line}', end='') \n    print(\"[INFO] task is closed...\") \n```\n\n\n\n运行后，会发现在 for 循环体内的 print 内容会写回到原文件中了。而在 for 循环体外的 print 则没有变化:\n\n```bash\n$ cat a.txt\nhello\nworld\n\n$ python demo.py\n[INFO] task is started...\n[INFO] task is closed...\n\n$ cat a.txt \na.txt 第1行: hello\na.txt 第2行: world\n```\n\n\n\n## 常用的方法\n\n- `fileinput.filenam()`\n  返回当前被读取的文件名。在第一行被读取之前，返回 `None`。\n- `fileinput.fileno()`\n  返回以整数表示的当前文件“文件描述符”。当未打开文件时（处在第一行和文件之间），返回 `-1`。\n- `fileinput.lineno()`\n  返回已被读取的累计行号。在第一行被读取之前，返回 `0`。在最后一个文件的最后一行被读取之后，返回该行的行号。\n- `fileinput.filelineno()`\n  返回当前文件中的行号。在第一行被读取之前，返回 `0`。在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。\n\n- `fileinput.isfirstline()`\n  如果刚读取的行是其所在文件的第一行则返回 `True`，否则返回 `False`。\n- `fileinput.isstdin()`\n  如果最后读取的行来自 `sys.stdin` 则返回 `True`，否则返回 `False`。\n- `fileinput.nextfile()`\n  关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。直到下一个文件的第一行被读取之后文件名才会改变。在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。在最后一个文件的最后一行被读取之后，此函数将不再生效。\n- `fileinput.close()`\n  关闭序列。\n\n\n\n## 实例\n\n### 将CRLF转换为LF\n\n```python\nimport sys\nimport fileinput\n\nfor line in fileinput.input(files=('a.txt', ), inplace=True):\n    #将Windows/DOS格式下的文本文件转为Linux的文件\n    if line[-2:] == \"\\r\\n\":  \n        line = line + \"\\n\"\n    sys.stdout.write(line)\n```\n\n\n\n## 结合re进行日志分析\n\n```bash\n#--样本文件--：error.log\naaa\n1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...\nbbb\n1970-01-02 10:20:30  Error: **** Due to System Out of Memory...\nccc\n```\n\n\n\n```python\nimport re\nimport fileinput\nimport sys\n\npattern = '\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}'\n\nfor line in fileinput.input('error.log',backup='.bak',inplace=1):\n    if re.search(pattern,line):\n        sys.stdout.write(\"=> \")\n        sys.stdout.write(line)\n```\n\n\n\n```\n#---测试结果---\n=> 1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...\n=> 1970-01-02 10:20:30  Error: **** Due to System Out of Memory...\n```\n\n\n\n## 实现类似grep功能\n\n```python\nimport sys\nimport re\nimport fileinput\n\npattern= re.compile(sys.argv[1])\nfor line in fileinput.input(sys.argv[2]):\n    if pattern.match(line):\n        print(fileinput.filename(), fileinput.filelineno(), line)\n```\n\n\n\n```bash\n$ ./demo.py import.*re *.py\n#查找所有py文件中，含import re字样的\naddressBook.py  2   import re\naddressBook1.py 10  import re\naddressBook2.py 18  import re\ntest.py         238 import re\n```\n\n","slug":"python操作文件","published":1,"updated":"2021-11-14T10:12:38.418Z","_id":"ckpmlsyqd0000udkl3hjpckc8","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>fileinput 是对 open 函数的再次封装，在仅需读取数据的场景中， fileinput 显然比 open 做得更专业、更人性。本文主要介绍了使用 fileinput来进行文件操作</p><p>更新于 2021-06-07</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"从标准输入中读取\"><a href=\"#从标准输入中读取\" class=\"headerlink\" title=\"从标准输入中读取\"></a>从标准输入中读取</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>():</span><br><span class=\"line\">    print(line) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>当没有传入任何参数的时候， fileinput会将标准输入作为输入源；</p>\n<h2 id=\"从文件读取\"><a href=\"#从文件读取\" class=\"headerlink\" title=\"从文件读取\"></a>从文件读取</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>,)) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如<code>a.txt</code>的内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">xxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>那么实例代码的输出为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">a.txt 第<span class=\"number\">2</span>行: world</span><br><span class=\"line\">a.txt 第<span class=\"number\">3</span>行：xxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>fileinput默认使用的模式为<code>mode=&#39;r&#39;</code>，调整模式可以添加参数，如读取二进制文件：<code>mode=&#39;rb&#39;</code>，但是fileinput只有这两种模式；</p>\n<h2 id=\"打开多个文件\"><a href=\"#打开多个文件\" class=\"headerlink\" title=\"打开多个文件\"></a>打开多个文件</h2><p>fileinput的参数<code>files</code>可以接收包含多个文件的list或者tuple，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;b.txt&#x27;</span>)) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>a.txt</code> 和 <code>b.txt</code> 的内容分别是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat a.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat b.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n\n\n\n<p>那么示例程序的输出结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">a.txt 第<span class=\"number\">2</span>行: world</span><br><span class=\"line\">b.txt 第<span class=\"number\">3</span>行: hello</span><br><span class=\"line\">b.txt 第<span class=\"number\">4</span>行: python</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到输出的内容是对的，但是行号不是真正的行号，如果想获取文件的真正行号，可以使用<code>fileinput.filelineno()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;b.txt&#x27;</span>)) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.filelineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样输出的就是文件真实行号了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">a.txt 第<span class=\"number\">2</span>行: world</span><br><span class=\"line\">b.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">b.txt 第<span class=\"number\">2</span>行: python</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"读取的同时备份文件\"><a href=\"#读取的同时备份文件\" class=\"headerlink\" title=\"读取的同时备份文件\"></a>读取的同时备份文件</h2><p>fileinput的<code>backup</code>参数可以指定后缀名：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&quot;a.txt&quot;</span>,), backup=<span class=\"string\">&quot;.bak&quot;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行后，会多出一个备份文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l a.txt*</span><br><span class=\"line\">-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ python demo.py</span><br><span class=\"line\">a.txt 第1行: hello</span><br><span class=\"line\">a.txt 第2行: world</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l a.txt*</span><br><span class=\"line\">-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt</span><br><span class=\"line\">-rw-r--r--  1 MING  staff  42  2 27 10:39 a.txt.bak</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"标准输出重定向替换\"><a href=\"#标准输出重定向替换\" class=\"headerlink\" title=\"标准输出重定向替换\"></a>标准输出重定向替换</h2><p><code>fileinput.input</code> 有一个 inplace 参数，表示是否将标准输出的结果写回文件，默认不取代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&quot;a.txt&quot;</span>,), inplace=<span class=\"literal\">True</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;[INFO] task is started...&quot;</span>) </span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br><span class=\"line\">    print(<span class=\"string\">&quot;[INFO] task is closed...&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行后，会发现在 for 循环体内的 print 内容会写回到原文件中了。而在 for 循环体外的 print 则没有变化:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat a.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\"></span><br><span class=\"line\">$ python demo.py</span><br><span class=\"line\">[INFO] task is started...</span><br><span class=\"line\">[INFO] task is closed...</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat a.txt </span><br><span class=\"line\">a.txt 第1行: hello</span><br><span class=\"line\">a.txt 第2行: world</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><ul>\n<li><p><code>fileinput.filenam()</code><br>返回当前被读取的文件名。在第一行被读取之前，返回 <code>None</code>。</p>\n</li>\n<li><p><code>fileinput.fileno()</code><br>返回以整数表示的当前文件“文件描述符”。当未打开文件时（处在第一行和文件之间），返回 <code>-1</code>。</p>\n</li>\n<li><p><code>fileinput.lineno()</code><br>返回已被读取的累计行号。在第一行被读取之前，返回 <code>0</code>。在最后一个文件的最后一行被读取之后，返回该行的行号。</p>\n</li>\n<li><p><code>fileinput.filelineno()</code><br>返回当前文件中的行号。在第一行被读取之前，返回 <code>0</code>。在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。</p>\n</li>\n<li><p><code>fileinput.isfirstline()</code><br>如果刚读取的行是其所在文件的第一行则返回 <code>True</code>，否则返回 <code>False</code>。</p>\n</li>\n<li><p><code>fileinput.isstdin()</code><br>如果最后读取的行来自 <code>sys.stdin</code> 则返回 <code>True</code>，否则返回 <code>False</code>。</p>\n</li>\n<li><p><code>fileinput.nextfile()</code><br>关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。直到下一个文件的第一行被读取之后文件名才会改变。在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。在最后一个文件的最后一行被读取之后，此函数将不再生效。</p>\n</li>\n<li><p><code>fileinput.close()</code><br>关闭序列。</p>\n</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"将CRLF转换为LF\"><a href=\"#将CRLF转换为LF\" class=\"headerlink\" title=\"将CRLF转换为LF\"></a>将CRLF转换为LF</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>, ), inplace=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"comment\">#将Windows/DOS格式下的文本文件转为Linux的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> line[-<span class=\"number\">2</span>:] == <span class=\"string\">&quot;\\r\\n&quot;</span>:  </span><br><span class=\"line\">        line = line + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"结合re进行日志分析\"><a href=\"#结合re进行日志分析\" class=\"headerlink\" title=\"结合re进行日志分析\"></a>结合re进行日志分析</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#--样本文件--：error.log</span></span><br><span class=\"line\">aaa</span><br><span class=\"line\">1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...</span><br><span class=\"line\">bbb</span><br><span class=\"line\">1970-01-02 10:20:30  Error: **** Due to System Out of Memory...</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">&#x27;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;error.log&#x27;</span>,backup=<span class=\"string\">&#x27;.bak&#x27;</span>,inplace=<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> re.search(pattern,line):</span><br><span class=\"line\">        sys.stdout.write(<span class=\"string\">&quot;=&gt; &quot;</span>)</span><br><span class=\"line\">        sys.stdout.write(line)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#---测试结果---</span><br><span class=\"line\">&#x3D;&gt; 1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...</span><br><span class=\"line\">&#x3D;&gt; 1970-01-02 10:20:30  Error: **** Due to System Out of Memory...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现类似grep功能\"><a href=\"#实现类似grep功能\" class=\"headerlink\" title=\"实现类似grep功能\"></a>实现类似grep功能</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\">pattern= re.<span class=\"built_in\">compile</span>(sys.argv[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>(sys.argv[<span class=\"number\">2</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pattern.match(line):</span><br><span class=\"line\">        print(fileinput.filename(), fileinput.filelineno(), line)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./demo.py import.*re *.py</span><br><span class=\"line\"><span class=\"comment\">#查找所有py文件中，含import re字样的</span></span><br><span class=\"line\">addressBook.py  2   import re</span><br><span class=\"line\">addressBook1.py 10  import re</span><br><span class=\"line\">addressBook2.py 18  import re</span><br><span class=\"line\">test.py         238 import re</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>fileinput 是对 open 函数的再次封装，在仅需读取数据的场景中， fileinput 显然比 open 做得更专业、更人性。本文主要介绍了使用 fileinput来进行文件操作</p><p>更新于 2021-06-07</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"从标准输入中读取\"><a href=\"#从标准输入中读取\" class=\"headerlink\" title=\"从标准输入中读取\"></a>从标准输入中读取</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>():</span><br><span class=\"line\">    print(line) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>当没有传入任何参数的时候， fileinput会将标准输入作为输入源；</p>\n<h2 id=\"从文件读取\"><a href=\"#从文件读取\" class=\"headerlink\" title=\"从文件读取\"></a>从文件读取</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>,)) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如<code>a.txt</code>的内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\">xxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>那么实例代码的输出为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">a.txt 第<span class=\"number\">2</span>行: world</span><br><span class=\"line\">a.txt 第<span class=\"number\">3</span>行：xxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>fileinput默认使用的模式为<code>mode=&#39;r&#39;</code>，调整模式可以添加参数，如读取二进制文件：<code>mode=&#39;rb&#39;</code>，但是fileinput只有这两种模式；</p>\n<h2 id=\"打开多个文件\"><a href=\"#打开多个文件\" class=\"headerlink\" title=\"打开多个文件\"></a>打开多个文件</h2><p>fileinput的参数<code>files</code>可以接收包含多个文件的list或者tuple，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;b.txt&#x27;</span>)) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>a.txt</code> 和 <code>b.txt</code> 的内容分别是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat a.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat b.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">python</span><br></pre></td></tr></table></figure>\n\n\n\n<p>那么示例程序的输出结果为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">a.txt 第<span class=\"number\">2</span>行: world</span><br><span class=\"line\">b.txt 第<span class=\"number\">3</span>行: hello</span><br><span class=\"line\">b.txt 第<span class=\"number\">4</span>行: python</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到输出的内容是对的，但是行号不是真正的行号，如果想获取文件的真正行号，可以使用<code>fileinput.filelineno()</code>方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>, <span class=\"string\">&#x27;b.txt&#x27;</span>)) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.filelineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样输出的就是文件真实行号了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">a.txt 第<span class=\"number\">2</span>行: world</span><br><span class=\"line\">b.txt 第<span class=\"number\">1</span>行: hello</span><br><span class=\"line\">b.txt 第<span class=\"number\">2</span>行: python</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"读取的同时备份文件\"><a href=\"#读取的同时备份文件\" class=\"headerlink\" title=\"读取的同时备份文件\"></a>读取的同时备份文件</h2><p>fileinput的<code>backup</code>参数可以指定后缀名：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&quot;a.txt&quot;</span>,), backup=<span class=\"string\">&quot;.bak&quot;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行后，会多出一个备份文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l a.txt*</span><br><span class=\"line\">-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ python demo.py</span><br><span class=\"line\">a.txt 第1行: hello</span><br><span class=\"line\">a.txt 第2行: world</span><br><span class=\"line\"></span><br><span class=\"line\">$ ls -l a.txt*</span><br><span class=\"line\">-rw-r--r--  1 MING  staff  12  2 27 10:43 a.txt</span><br><span class=\"line\">-rw-r--r--  1 MING  staff  42  2 27 10:39 a.txt.bak</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"标准输出重定向替换\"><a href=\"#标准输出重定向替换\" class=\"headerlink\" title=\"标准输出重定向替换\"></a>标准输出重定向替换</h2><p><code>fileinput.input</code> 有一个 inplace 参数，表示是否将标准输出的结果写回文件，默认不取代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&quot;a.txt&quot;</span>,), inplace=<span class=\"literal\">True</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    print(<span class=\"string\">&quot;[INFO] task is started...&quot;</span>) </span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">        print(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;fileinput.filename()&#125;</span> 第<span class=\"subst\">&#123;fileinput.lineno()&#125;</span>行: <span class=\"subst\">&#123;line&#125;</span>&#x27;</span>, end=<span class=\"string\">&#x27;&#x27;</span>) </span><br><span class=\"line\">    print(<span class=\"string\">&quot;[INFO] task is closed...&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行后，会发现在 for 循环体内的 print 内容会写回到原文件中了。而在 for 循环体外的 print 则没有变化:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat a.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br><span class=\"line\"></span><br><span class=\"line\">$ python demo.py</span><br><span class=\"line\">[INFO] task is started...</span><br><span class=\"line\">[INFO] task is closed...</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat a.txt </span><br><span class=\"line\">a.txt 第1行: hello</span><br><span class=\"line\">a.txt 第2行: world</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><ul>\n<li><p><code>fileinput.filenam()</code><br>返回当前被读取的文件名。在第一行被读取之前，返回 <code>None</code>。</p>\n</li>\n<li><p><code>fileinput.fileno()</code><br>返回以整数表示的当前文件“文件描述符”。当未打开文件时（处在第一行和文件之间），返回 <code>-1</code>。</p>\n</li>\n<li><p><code>fileinput.lineno()</code><br>返回已被读取的累计行号。在第一行被读取之前，返回 <code>0</code>。在最后一个文件的最后一行被读取之后，返回该行的行号。</p>\n</li>\n<li><p><code>fileinput.filelineno()</code><br>返回当前文件中的行号。在第一行被读取之前，返回 <code>0</code>。在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。</p>\n</li>\n<li><p><code>fileinput.isfirstline()</code><br>如果刚读取的行是其所在文件的第一行则返回 <code>True</code>，否则返回 <code>False</code>。</p>\n</li>\n<li><p><code>fileinput.isstdin()</code><br>如果最后读取的行来自 <code>sys.stdin</code> 则返回 <code>True</code>，否则返回 <code>False</code>。</p>\n</li>\n<li><p><code>fileinput.nextfile()</code><br>关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。直到下一个文件的第一行被读取之后文件名才会改变。在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。在最后一个文件的最后一行被读取之后，此函数将不再生效。</p>\n</li>\n<li><p><code>fileinput.close()</code><br>关闭序列。</p>\n</li>\n</ul>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"将CRLF转换为LF\"><a href=\"#将CRLF转换为LF\" class=\"headerlink\" title=\"将CRLF转换为LF\"></a>将CRLF转换为LF</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>(files=(<span class=\"string\">&#x27;a.txt&#x27;</span>, ), inplace=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"comment\">#将Windows/DOS格式下的文本文件转为Linux的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> line[-<span class=\"number\">2</span>:] == <span class=\"string\">&quot;\\r\\n&quot;</span>:  </span><br><span class=\"line\">        line = line + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    sys.stdout.write(line)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"结合re进行日志分析\"><a href=\"#结合re进行日志分析\" class=\"headerlink\" title=\"结合re进行日志分析\"></a>结合re进行日志分析</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#--样本文件--：error.log</span></span><br><span class=\"line\">aaa</span><br><span class=\"line\">1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...</span><br><span class=\"line\">bbb</span><br><span class=\"line\">1970-01-02 10:20:30  Error: **** Due to System Out of Memory...</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = <span class=\"string\">&#x27;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125; \\d&#123;2&#125;:\\d&#123;2&#125;:\\d&#123;2&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;error.log&#x27;</span>,backup=<span class=\"string\">&#x27;.bak&#x27;</span>,inplace=<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> re.search(pattern,line):</span><br><span class=\"line\">        sys.stdout.write(<span class=\"string\">&quot;=&gt; &quot;</span>)</span><br><span class=\"line\">        sys.stdout.write(line)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#---测试结果---</span><br><span class=\"line\">&#x3D;&gt; 1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...</span><br><span class=\"line\">&#x3D;&gt; 1970-01-02 10:20:30  Error: **** Due to System Out of Memory...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现类似grep功能\"><a href=\"#实现类似grep功能\" class=\"headerlink\" title=\"实现类似grep功能\"></a>实现类似grep功能</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"></span><br><span class=\"line\">pattern= re.<span class=\"built_in\">compile</span>(sys.argv[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.<span class=\"built_in\">input</span>(sys.argv[<span class=\"number\">2</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pattern.match(line):</span><br><span class=\"line\">        print(fileinput.filename(), fileinput.filelineno(), line)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./demo.py import.*re *.py</span><br><span class=\"line\"><span class=\"comment\">#查找所有py文件中，含import re字样的</span></span><br><span class=\"line\">addressBook.py  2   import re</span><br><span class=\"line\">addressBook1.py 10  import re</span><br><span class=\"line\">addressBook2.py 18  import re</span><br><span class=\"line\">test.py         238 import re</span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用Request库发送http请求","date":"2021-06-14T05:14:06.000Z","description":"pythn request库的使用","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2100224046,747583905&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在python中使用request发送http请求\n\n更新于 2021-06-14\n\n{% endnote %}\n\n<br>\n\n\n\n# 安装\n\n使用下面的命令安装requests：\n\n```bash\n$ pip install requests\n```\n\n\n\n\n\n<br>\n\n\n\n# 发送GET请求\n\n```python\nimport requests\n\nresponse = requests.get(\"http://www.baidu.com/\")\n```\n\n\n\n同时支持添加header参数：\n\n```python\nimport requests\n\nkw = {'wd':'中国'}\n\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"}\n\n# params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()\nresponse = requests.get(\"http://www.baidu.com/s\", params=kw, headers=headers)\n```\n\n\n\n获取响应信息可以使用下面的命令：\n\n```python\n# 查看响应内容，response.text 返回的是Unicode格式的数据\nresponse.text\n\n# 查看响应内容，response.content返回的字节流数据\nresponse.content\n\n# 查看完整url地址\nresponse.url\n\n# 查看响应头部字符编码\nresponse.encoding\n\n# 查看响应码\nresponse.status_code\n```\n\n\n\n<br>\n\n\n\n# 发送POST请求\n\n```python\nimport requests\n\nresponse = requests.post(\"http://www.baidu.com/\",data=data)\n```\n\n\n\n传入post数据可以使用如下的格式：\n\n```python\nimport requests\n\nurl = \"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&needAddtionalResult=false&isSchoolJob=0\"\n\nheaders = {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n  'Referer': 'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='\n }\n\n data = {\n     'first': 'true',\n     'pn': 1,\n     'kd': 'python'\n }\n\n resp = requests.post(url,headers=headers,data=data)\n # 如果是json数据，直接可以调用json方法\n print(resp.json())\n```\n\n\n\n<br>\n\n\n\n# 通过代理\n\n使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：\n\n```python\nimport requests\n\nurl = \"http://httpbin.org/get\"\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n}\n\nproxy = {\n    'http': '171.14.209.180:27829'\n}\n\nresp = requests.get(url, headers=headers, proxies=proxy)\nwith open('xx.html','w',encoding='utf-8') as fp:\n    fp.write(resp.text)\n```\n\n\n\n<br>\n\n\n\n# cookie和session\n\n如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"970138074@qq.com\",'password':\"pythonspider\"}\nresp = requests.get('http://www.baidu.com/')\nprint(resp.cookies)\nprint(resp.cookies.get_dict())\n```\n\n\n\n使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"111111111@qq.com\",'password':\"pythonspider\"}\nheaders = {\n    'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\"\n}\n# 登录\nsession = requests.session()\nsession.post(url,data=data,headers=headers)\n\n# 访问个人中心\nresp = session.get('http://www.renren.com/880151247/profile')\n\nprint(resp.text)\n```\n\n\n\n<br>\n\n\n\n# 不受信的证书\n\n对于不受信任的https站点，可以使用如下的方式进行访问：\n\n```python\nimport requests\n\nresp = requests.get('http://www.12306.cn/mormhweb/',verify=False)\nprint(resp.content.decode('utf-8'))\n```\n\n\n\n\n\n","source":"_posts/使用Request库发送http请求.md","raw":"---\ntitle: 使用Request库发送http请求\ndate: 2021-06-14 13:14:06\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- 网络\ndescription: pythn request库的使用\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2100224046,747583905&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了在python中使用request发送http请求\n\n更新于 2021-06-14\n\n{% endnote %}\n\n<br>\n\n\n\n# 安装\n\n使用下面的命令安装requests：\n\n```bash\n$ pip install requests\n```\n\n\n\n\n\n<br>\n\n\n\n# 发送GET请求\n\n```python\nimport requests\n\nresponse = requests.get(\"http://www.baidu.com/\")\n```\n\n\n\n同时支持添加header参数：\n\n```python\nimport requests\n\nkw = {'wd':'中国'}\n\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"}\n\n# params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()\nresponse = requests.get(\"http://www.baidu.com/s\", params=kw, headers=headers)\n```\n\n\n\n获取响应信息可以使用下面的命令：\n\n```python\n# 查看响应内容，response.text 返回的是Unicode格式的数据\nresponse.text\n\n# 查看响应内容，response.content返回的字节流数据\nresponse.content\n\n# 查看完整url地址\nresponse.url\n\n# 查看响应头部字符编码\nresponse.encoding\n\n# 查看响应码\nresponse.status_code\n```\n\n\n\n<br>\n\n\n\n# 发送POST请求\n\n```python\nimport requests\n\nresponse = requests.post(\"http://www.baidu.com/\",data=data)\n```\n\n\n\n传入post数据可以使用如下的格式：\n\n```python\nimport requests\n\nurl = \"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&needAddtionalResult=false&isSchoolJob=0\"\n\nheaders = {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n  'Referer': 'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='\n }\n\n data = {\n     'first': 'true',\n     'pn': 1,\n     'kd': 'python'\n }\n\n resp = requests.post(url,headers=headers,data=data)\n # 如果是json数据，直接可以调用json方法\n print(resp.json())\n```\n\n\n\n<br>\n\n\n\n# 通过代理\n\n使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：\n\n```python\nimport requests\n\nurl = \"http://httpbin.org/get\"\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n}\n\nproxy = {\n    'http': '171.14.209.180:27829'\n}\n\nresp = requests.get(url, headers=headers, proxies=proxy)\nwith open('xx.html','w',encoding='utf-8') as fp:\n    fp.write(resp.text)\n```\n\n\n\n<br>\n\n\n\n# cookie和session\n\n如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"970138074@qq.com\",'password':\"pythonspider\"}\nresp = requests.get('http://www.baidu.com/')\nprint(resp.cookies)\nprint(resp.cookies.get_dict())\n```\n\n\n\n使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"111111111@qq.com\",'password':\"pythonspider\"}\nheaders = {\n    'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\"\n}\n# 登录\nsession = requests.session()\nsession.post(url,data=data,headers=headers)\n\n# 访问个人中心\nresp = session.get('http://www.renren.com/880151247/profile')\n\nprint(resp.text)\n```\n\n\n\n<br>\n\n\n\n# 不受信的证书\n\n对于不受信任的https站点，可以使用如下的方式进行访问：\n\n```python\nimport requests\n\nresp = requests.get('http://www.12306.cn/mormhweb/',verify=False)\nprint(resp.content.decode('utf-8'))\n```\n\n\n\n\n\n","slug":"使用Request库发送http请求","published":1,"updated":"2021-06-14T05:17:02.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpw5zz330000vjkl3jm4fhzk","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在python中使用request发送http请求</p><p>更新于 2021-06-14</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>使用下面的命令安装requests：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install requests</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"发送GET请求\"><a href=\"#发送GET请求\" class=\"headerlink\" title=\"发送GET请求\"></a>发送GET请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&quot;http://www.baidu.com/&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同时支持添加header参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">kw = &#123;<span class=\"string\">&#x27;wd&#x27;</span>:<span class=\"string\">&#x27;中国&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&quot;http://www.baidu.com/s&quot;</span>, params=kw, headers=headers)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取响应信息可以使用下面的命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class=\"line\">response.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class=\"line\">response.content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看完整url地址</span></span><br><span class=\"line\">response.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应头部字符编码</span></span><br><span class=\"line\">response.encoding</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应码</span></span><br><span class=\"line\">response.status_code</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送POST请求\"><a href=\"#发送POST请求\" class=\"headerlink\" title=\"发送POST请求\"></a>发送POST请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.post(<span class=\"string\">&quot;http://www.baidu.com/&quot;</span>,data=data)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>传入post数据可以使用如下的格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Referer&#x27;</span>: <span class=\"string\">&#x27;https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput=&#x27;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> data = &#123;</span><br><span class=\"line\">     <span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;pn&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;kd&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> resp = requests.post(url,headers=headers,data=data)</span><br><span class=\"line\"> <span class=\"comment\"># 如果是json数据，直接可以调用json方法</span></span><br><span class=\"line\"> print(resp.json())</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"通过代理\"><a href=\"#通过代理\" class=\"headerlink\" title=\"通过代理\"></a>通过代理</h1><p>使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://httpbin.org/get&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;171.14.209.180:27829&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(url, headers=headers, proxies=proxy)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;xx.html&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h1><p>如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.renren.com/PLogin.do&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;email&quot;</span>:<span class=\"string\">&quot;970138074@qq.com&quot;</span>,<span class=\"string\">&#x27;password&#x27;</span>:<span class=\"string\">&quot;pythonspider&quot;</span>&#125;</span><br><span class=\"line\">resp = requests.get(<span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\">print(resp.cookies)</span><br><span class=\"line\">print(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.renren.com/PLogin.do&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;email&quot;</span>:<span class=\"string\">&quot;111111111@qq.com&quot;</span>,<span class=\"string\">&#x27;password&#x27;</span>:<span class=\"string\">&quot;pythonspider&quot;</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.post(url,data=data,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问个人中心</span></span><br><span class=\"line\">resp = session.get(<span class=\"string\">&#x27;http://www.renren.com/880151247/profile&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"不受信的证书\"><a href=\"#不受信的证书\" class=\"headerlink\" title=\"不受信的证书\"></a>不受信的证书</h1><p>对于不受信任的https站点，可以使用如下的方式进行访问：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(<span class=\"string\">&#x27;http://www.12306.cn/mormhweb/&#x27;</span>,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(resp.content.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了在python中使用request发送http请求</p><p>更新于 2021-06-14</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>使用下面的命令安装requests：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install requests</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"发送GET请求\"><a href=\"#发送GET请求\" class=\"headerlink\" title=\"发送GET请求\"></a>发送GET请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&quot;http://www.baidu.com/&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同时支持添加header参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">kw = &#123;<span class=\"string\">&#x27;wd&#x27;</span>:<span class=\"string\">&#x27;中国&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class=\"line\">response = requests.get(<span class=\"string\">&quot;http://www.baidu.com/s&quot;</span>, params=kw, headers=headers)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取响应信息可以使用下面的命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class=\"line\">response.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class=\"line\">response.content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看完整url地址</span></span><br><span class=\"line\">response.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应头部字符编码</span></span><br><span class=\"line\">response.encoding</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应码</span></span><br><span class=\"line\">response.status_code</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送POST请求\"><a href=\"#发送POST请求\" class=\"headerlink\" title=\"发送POST请求\"></a>发送POST请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.post(<span class=\"string\">&quot;http://www.baidu.com/&quot;</span>,data=data)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>传入post数据可以使用如下的格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Referer&#x27;</span>: <span class=\"string\">&#x27;https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput=&#x27;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> data = &#123;</span><br><span class=\"line\">     <span class=\"string\">&#x27;first&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;pn&#x27;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;kd&#x27;</span>: <span class=\"string\">&#x27;python&#x27;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> resp = requests.post(url,headers=headers,data=data)</span><br><span class=\"line\"> <span class=\"comment\"># 如果是json数据，直接可以调用json方法</span></span><br><span class=\"line\"> print(resp.json())</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"通过代理\"><a href=\"#通过代理\" class=\"headerlink\" title=\"通过代理\"></a>通过代理</h1><p>使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://httpbin.org/get&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;171.14.209.180:27829&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(url, headers=headers, proxies=proxy)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;xx.html&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h1><p>如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.renren.com/PLogin.do&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;email&quot;</span>:<span class=\"string\">&quot;970138074@qq.com&quot;</span>,<span class=\"string\">&#x27;password&#x27;</span>:<span class=\"string\">&quot;pythonspider&quot;</span>&#125;</span><br><span class=\"line\">resp = requests.get(<span class=\"string\">&#x27;http://www.baidu.com/&#x27;</span>)</span><br><span class=\"line\">print(resp.cookies)</span><br><span class=\"line\">print(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.renren.com/PLogin.do&quot;</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">&quot;email&quot;</span>:<span class=\"string\">&quot;111111111@qq.com&quot;</span>,<span class=\"string\">&#x27;password&#x27;</span>:<span class=\"string\">&quot;pythonspider&quot;</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.post(url,data=data,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问个人中心</span></span><br><span class=\"line\">resp = session.get(<span class=\"string\">&#x27;http://www.renren.com/880151247/profile&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"不受信的证书\"><a href=\"#不受信的证书\" class=\"headerlink\" title=\"不受信的证书\"></a>不受信的证书</h1><p>对于不受信任的https站点，可以使用如下的方式进行访问：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(<span class=\"string\">&#x27;http://www.12306.cn/mormhweb/&#x27;</span>,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(resp.content.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"使用httpx发送http请求","date":"2021-06-14T05:18:26.000Z","description":"使用httpx发送http请求","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3393331488,2909864782&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\nhttpx基于异步框架，性能优于requests。本文主要介绍了在python中使用request发送http请求\n\n更新于 2021-06-14\n\n{% endnote %}\n\n<br>\n\n\n\n## 安装\n\n```bash\n$ pip install httpx\n```\n\n\n\n<br>\n\n\n\n## 发送get请求\n\n```python\nimport httpx\n\nparams = {\"key1\": \"value2\", \"key2\": [\"value2\", \"value3\"]}\nheaders = {\"user-agent\": \"my-app/0.0.1\"}\n\nr = httpx.get(\"https://www.example.com\", params=params, headers=headers)\n```\n\n\n\n<br>\n\n\n\n## 发送post请求\n\n```python\nimport httpx\n\nheaders = {\"user-agent\": \"my-app/0.0.1\"}\ndata={\"key\": \"value\"}\n\nr = httpx.post(\"https://www.example.com\", data=data, headers=headers)\n\n# 发送json编码数据\nr = httpx.post(\"https://www.example.com\", json=data)\n```\n\n\n\n<br>\n\n\n\n## 处理响应结果\n\n```python\n# 打印请求url\nr.url\n\n# 响应内容\nr.text\n\n# 设置使用的编码\nr.encoding = \"ISO-8859-1\"\n\n# 响应头\nr.headers\n\n# 响应http版本\nr.http_version\n\n# 响应状态码\nr.status_code\n\n# 获取json内容\nr.json()\n```\n\n\n\n<br>\n\n\n\n## cookies\n\n```python\n# 获取cookies\n>>> r = httpx.get(\"http://httpbin.org/cookies/set?chocolate=chip\", allow_redirects=False)\n>>> r.cookies[\"chocolate\"]\n'chip'\n\n# 请求带cookie\n>>> cookies = {\"peanut\": \"butter\"}\n>>> r = httpx.get(\"http://httpbin.org/cookies\", cookies=cookies)\n>>> r.json()\n{'cookies': {'peanut': 'butter'}}\n```\n\n\n\ncookies也可以按域进行访问设置：\n\n```python\n>>> cookies = httpx.Cookies()\n>>> cookies.set('cookie_on_domain', 'hello, there!', domain='httpbin.org')\n>>> cookies.set('cookies_off_domain', 'nope', domain=\"example.org\")\n>>> r = httpx.get(\"http://httpbin.org/cookies\", cookies=cookies)\n>>> r.json()\n{'cookies': {'cookie_on_domain': 'hello, there!'}}\n```\n\n\n\n<br>\n\n\n\n## 用户身份认证\n\n基本认证：\n\n```python\nhttpx.get(\"https://example.com\", auth=(\"my_user\", \"password123\"))\n```\n\n\n\n摘要式身份认证：\n\n```python\nauth = httpx.DigestAuth(\"my_user\", \"password123\")\nhttpx.get(\"https://example.com\", auth=auth)\n```\n\n","source":"_posts/使用httpx发送http请求.md","raw":"---\ntitle: 使用httpx发送http请求\ndate: 2021-06-14 13:18:26\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- 网络\ndescription: 使用httpx发送http请求\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3393331488,2909864782&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\nhttpx基于异步框架，性能优于requests。本文主要介绍了在python中使用request发送http请求\n\n更新于 2021-06-14\n\n{% endnote %}\n\n<br>\n\n\n\n## 安装\n\n```bash\n$ pip install httpx\n```\n\n\n\n<br>\n\n\n\n## 发送get请求\n\n```python\nimport httpx\n\nparams = {\"key1\": \"value2\", \"key2\": [\"value2\", \"value3\"]}\nheaders = {\"user-agent\": \"my-app/0.0.1\"}\n\nr = httpx.get(\"https://www.example.com\", params=params, headers=headers)\n```\n\n\n\n<br>\n\n\n\n## 发送post请求\n\n```python\nimport httpx\n\nheaders = {\"user-agent\": \"my-app/0.0.1\"}\ndata={\"key\": \"value\"}\n\nr = httpx.post(\"https://www.example.com\", data=data, headers=headers)\n\n# 发送json编码数据\nr = httpx.post(\"https://www.example.com\", json=data)\n```\n\n\n\n<br>\n\n\n\n## 处理响应结果\n\n```python\n# 打印请求url\nr.url\n\n# 响应内容\nr.text\n\n# 设置使用的编码\nr.encoding = \"ISO-8859-1\"\n\n# 响应头\nr.headers\n\n# 响应http版本\nr.http_version\n\n# 响应状态码\nr.status_code\n\n# 获取json内容\nr.json()\n```\n\n\n\n<br>\n\n\n\n## cookies\n\n```python\n# 获取cookies\n>>> r = httpx.get(\"http://httpbin.org/cookies/set?chocolate=chip\", allow_redirects=False)\n>>> r.cookies[\"chocolate\"]\n'chip'\n\n# 请求带cookie\n>>> cookies = {\"peanut\": \"butter\"}\n>>> r = httpx.get(\"http://httpbin.org/cookies\", cookies=cookies)\n>>> r.json()\n{'cookies': {'peanut': 'butter'}}\n```\n\n\n\ncookies也可以按域进行访问设置：\n\n```python\n>>> cookies = httpx.Cookies()\n>>> cookies.set('cookie_on_domain', 'hello, there!', domain='httpbin.org')\n>>> cookies.set('cookies_off_domain', 'nope', domain=\"example.org\")\n>>> r = httpx.get(\"http://httpbin.org/cookies\", cookies=cookies)\n>>> r.json()\n{'cookies': {'cookie_on_domain': 'hello, there!'}}\n```\n\n\n\n<br>\n\n\n\n## 用户身份认证\n\n基本认证：\n\n```python\nhttpx.get(\"https://example.com\", auth=(\"my_user\", \"password123\"))\n```\n\n\n\n摘要式身份认证：\n\n```python\nauth = httpx.DigestAuth(\"my_user\", \"password123\")\nhttpx.get(\"https://example.com\", auth=auth)\n```\n\n","slug":"使用httpx发送http请求","published":1,"updated":"2021-06-14T05:19:37.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpw6390n000054kle4tj8580","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>httpx基于异步框架，性能优于requests。本文主要介绍了在python中使用request发送http请求</p><p>更新于 2021-06-14</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install httpx</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"发送get请求\"><a href=\"#发送get请求\" class=\"headerlink\" title=\"发送get请求\"></a>发送get请求</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> httpx</span><br><span class=\"line\"></span><br><span class=\"line\">params = &#123;<span class=\"string\">&quot;key1&quot;</span>: <span class=\"string\">&quot;value2&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>: [<span class=\"string\">&quot;value2&quot;</span>, <span class=\"string\">&quot;value3&quot;</span>]&#125;</span><br><span class=\"line\">headers = &#123;<span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;my-app/0.0.1&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = httpx.get(<span class=\"string\">&quot;https://www.example.com&quot;</span>, params=params, headers=headers)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"发送post请求\"><a href=\"#发送post请求\" class=\"headerlink\" title=\"发送post请求\"></a>发送post请求</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> httpx</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;my-app/0.0.1&quot;</span>&#125;</span><br><span class=\"line\">data=&#123;<span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;value&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = httpx.post(<span class=\"string\">&quot;https://www.example.com&quot;</span>, data=data, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送json编码数据</span></span><br><span class=\"line\">r = httpx.post(<span class=\"string\">&quot;https://www.example.com&quot;</span>, json=data)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"处理响应结果\"><a href=\"#处理响应结果\" class=\"headerlink\" title=\"处理响应结果\"></a>处理响应结果</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印请求url</span></span><br><span class=\"line\">r.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应内容</span></span><br><span class=\"line\">r.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置使用的编码</span></span><br><span class=\"line\">r.encoding = <span class=\"string\">&quot;ISO-8859-1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应头</span></span><br><span class=\"line\">r.headers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应http版本</span></span><br><span class=\"line\">r.http_version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应状态码</span></span><br><span class=\"line\">r.status_code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取json内容</span></span><br><span class=\"line\">r.json()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取cookies</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = httpx.get(<span class=\"string\">&quot;http://httpbin.org/cookies/set?chocolate=chip&quot;</span>, allow_redirects=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.cookies[<span class=\"string\">&quot;chocolate&quot;</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;chip&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求带cookie</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies = &#123;<span class=\"string\">&quot;peanut&quot;</span>: <span class=\"string\">&quot;butter&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = httpx.get(<span class=\"string\">&quot;http://httpbin.org/cookies&quot;</span>, cookies=cookies)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.json()</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;cookies&#x27;</span>: &#123;<span class=\"string\">&#x27;peanut&#x27;</span>: <span class=\"string\">&#x27;butter&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>cookies也可以按域进行访问设置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies = httpx.Cookies()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;cookie_on_domain&#x27;</span>, <span class=\"string\">&#x27;hello, there!&#x27;</span>, domain=<span class=\"string\">&#x27;httpbin.org&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;cookies_off_domain&#x27;</span>, <span class=\"string\">&#x27;nope&#x27;</span>, domain=<span class=\"string\">&quot;example.org&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = httpx.get(<span class=\"string\">&quot;http://httpbin.org/cookies&quot;</span>, cookies=cookies)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.json()</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;cookies&#x27;</span>: &#123;<span class=\"string\">&#x27;cookie_on_domain&#x27;</span>: <span class=\"string\">&#x27;hello, there!&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"用户身份认证\"><a href=\"#用户身份认证\" class=\"headerlink\" title=\"用户身份认证\"></a>用户身份认证</h2><p>基本认证：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpx.get(<span class=\"string\">&quot;https://example.com&quot;</span>, auth=(<span class=\"string\">&quot;my_user&quot;</span>, <span class=\"string\">&quot;password123&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>摘要式身份认证：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth = httpx.DigestAuth(<span class=\"string\">&quot;my_user&quot;</span>, <span class=\"string\">&quot;password123&quot;</span>)</span><br><span class=\"line\">httpx.get(<span class=\"string\">&quot;https://example.com&quot;</span>, auth=auth)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>httpx基于异步框架，性能优于requests。本文主要介绍了在python中使用request发送http请求</p><p>更新于 2021-06-14</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install httpx</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"发送get请求\"><a href=\"#发送get请求\" class=\"headerlink\" title=\"发送get请求\"></a>发送get请求</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> httpx</span><br><span class=\"line\"></span><br><span class=\"line\">params = &#123;<span class=\"string\">&quot;key1&quot;</span>: <span class=\"string\">&quot;value2&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>: [<span class=\"string\">&quot;value2&quot;</span>, <span class=\"string\">&quot;value3&quot;</span>]&#125;</span><br><span class=\"line\">headers = &#123;<span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;my-app/0.0.1&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = httpx.get(<span class=\"string\">&quot;https://www.example.com&quot;</span>, params=params, headers=headers)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"发送post请求\"><a href=\"#发送post请求\" class=\"headerlink\" title=\"发送post请求\"></a>发送post请求</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> httpx</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;my-app/0.0.1&quot;</span>&#125;</span><br><span class=\"line\">data=&#123;<span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;value&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = httpx.post(<span class=\"string\">&quot;https://www.example.com&quot;</span>, data=data, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送json编码数据</span></span><br><span class=\"line\">r = httpx.post(<span class=\"string\">&quot;https://www.example.com&quot;</span>, json=data)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"处理响应结果\"><a href=\"#处理响应结果\" class=\"headerlink\" title=\"处理响应结果\"></a>处理响应结果</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印请求url</span></span><br><span class=\"line\">r.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应内容</span></span><br><span class=\"line\">r.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置使用的编码</span></span><br><span class=\"line\">r.encoding = <span class=\"string\">&quot;ISO-8859-1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应头</span></span><br><span class=\"line\">r.headers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应http版本</span></span><br><span class=\"line\">r.http_version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应状态码</span></span><br><span class=\"line\">r.status_code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取json内容</span></span><br><span class=\"line\">r.json()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取cookies</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = httpx.get(<span class=\"string\">&quot;http://httpbin.org/cookies/set?chocolate=chip&quot;</span>, allow_redirects=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.cookies[<span class=\"string\">&quot;chocolate&quot;</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;chip&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求带cookie</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies = &#123;<span class=\"string\">&quot;peanut&quot;</span>: <span class=\"string\">&quot;butter&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = httpx.get(<span class=\"string\">&quot;http://httpbin.org/cookies&quot;</span>, cookies=cookies)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.json()</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;cookies&#x27;</span>: &#123;<span class=\"string\">&#x27;peanut&#x27;</span>: <span class=\"string\">&#x27;butter&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>cookies也可以按域进行访问设置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies = httpx.Cookies()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;cookie_on_domain&#x27;</span>, <span class=\"string\">&#x27;hello, there!&#x27;</span>, domain=<span class=\"string\">&#x27;httpbin.org&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;cookies_off_domain&#x27;</span>, <span class=\"string\">&#x27;nope&#x27;</span>, domain=<span class=\"string\">&quot;example.org&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = httpx.get(<span class=\"string\">&quot;http://httpbin.org/cookies&quot;</span>, cookies=cookies)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.json()</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;cookies&#x27;</span>: &#123;<span class=\"string\">&#x27;cookie_on_domain&#x27;</span>: <span class=\"string\">&#x27;hello, there!&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"用户身份认证\"><a href=\"#用户身份认证\" class=\"headerlink\" title=\"用户身份认证\"></a>用户身份认证</h2><p>基本认证：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">httpx.get(<span class=\"string\">&quot;https://example.com&quot;</span>, auth=(<span class=\"string\">&quot;my_user&quot;</span>, <span class=\"string\">&quot;password123&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>摘要式身份认证：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth = httpx.DigestAuth(<span class=\"string\">&quot;my_user&quot;</span>, <span class=\"string\">&quot;password123&quot;</span>)</span><br><span class=\"line\">httpx.get(<span class=\"string\">&quot;https://example.com&quot;</span>, auth=auth)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"python操作mysql数据库","date":"2021-06-14T05:21:59.000Z","description":"python操作mysql数据库","cover":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4233371922,1020712226&fm=26&gp=0.jpg","_content":"\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍python中操作mysql的方法\n\n更新于 2021-06-14\n\n{% endnote %}\n\n<br>\n\n\n\n# python操作mysql的模块\n\npython操作mysql常用的模块有如下的几种：\n\n- **原生sql**：\n  - PyMySQL：支持python2，3；\n  - MySQLdb：支持python2；\n- **ORM框架**：\n  - SQLAchemy\n\n\n\n<br>\n\n\n\n# pymysql操作数据库\n\n\n\n## 安装\n\n```bash\npip install PyMySQL\n```\n\n\n\n## 连接到数据库\n\n使用`connect()`方法，传入mysql相关的配置即可连接到数据库：\n\n```python\nimport pymysql\n\n# 创建连接\nmysql_info = {\n  \"host\": \"127.0.0.1\",\n  \"prot\": 3306,\n  \"user\": \"root\",\n  \"passowrd\": \"root123\",\n  \"db\": \"testdb\",\n  \"charset\": \"utf8mb4\"\n}\nconn = pymysql.connect(**mysql_info)\n```\n\n\n\n## 创建游标\n\n连接到数据库后，需要获取一个游标，游标的作用是用于进行后续的操作：\n\n```python\n# 创建游标(查询数据返回为元组格式)\ncursor = conn.cursor()\n\n# 创建游标(查询数据返回为字典格式)\ncursor = conn.cursor(pymysql.cursors.DictCursor)\n```\n\n\n\n## 执行sql语句\n\n事先写好sql语句，传给游标的`execute`方法即可，返回值为受影响的行数：\n\n```python\n# 执行SQL,返回受影响的行数\neffect_row1 = cursor.execute(\"select * from USER\")\n\n# 执行SQL,返回受影响的行数,一次插入多行数据\neffect_row2 = cursor.executemany(\"insert into USER (NAME) values(%s)\", [(\"jack\"), (\"boom\"), (\"lucy\")])  # 3\n```\n\n> execute和executemany方法返回的是受影响的行数。\n\n\n\n如果是增删改查的sql，则执行后需要调用`commit()`方法进行提交保存：\n\n```python\nconn.commit()\n```\n\n\n\n## 获取数据\n\n```python\n# 获取所有数据\nresult = cursor.fetchall()\n\n# 获取第一行数据\nresult = cursor.fetchone()\n\n# 获取前 5 行数据\nresult = cursor.fetchmany(5)\n\n# 获取最新数据的自增ID \nnew_id = cursor.lastrowid\n```\n\n\n\n## 关闭连接和游标\n\n最后需要关闭连接和游标，释放资源：\n\n```python\ncursor.close()\nconn.close()\n```\n\n\n\n<br>\n\n\n\n## pymysql使用连接池\n\n上述方式可能会在一些情况下频繁创建和断开数据库连接，可以使用`DBUtils`来实现一个数据库连接池。连接池有两种连接方式：\n\n- 为每个线程创建一个连接，线程调用了`close()`方法也不会关闭，会把连接重新放到池中；\n- 创建一批连接到连接池，供所有线程共享使用（推荐方式）；\n\n\n\n### 方式一、为每个线程创建连接\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom DBUtils.PersistentDB import PersistentDB\nimport pymysql\n\nPOOL = PersistentDB(\n    creator=pymysql,  # 使用链接数据库的模块\n    maxusage=None,  # 一个链接最多被重复使用的次数，None表示无限制\n    setsession=[],  # 开始会话前执行的命令列表。如：[\"set datestyle to ...\", \"set time zone ...\"]\n    ping=0,\n    # ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always\n    closeable=False,\n    # 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）\n    threadlocal=None,  # 本线程独享值得对象，用于保存链接对象，如果链接对象被重置\n    host='127.0.0.1',\n    port=3306,\n    user='root',\n    password='root123',\n    database='testdb',\n    charset='utf8',\n)\n\n\ndef func():\n    conn = POOL.connection(shareable=False)\n    cursor = conn.cursor()\n    cursor.execute('select * from USER')\n    result = cursor.fetchall()\n    cursor.close()\n    conn.close()\n    return result\n\n\nresult = func()\nprint(result)\n```\n\n\n\n### 方式二、创建连接到连接池\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport time\nimport pymysql\nimport threading\nfrom DBUtils.PooledDB import PooledDB, SharedDBConnection\n\nPOOL = PooledDB(\n    creator=pymysql,  # 使用链接数据库的模块\n    maxconnections=6,  # 连接池允许的最大连接数，0和None表示不限制连接数\n    mincached=2,  # 初始化时，链接池中至少创建的空闲的链接，0表示不创建\n    maxcached=5,  # 链接池中最多闲置的链接，0和None不限制\n    maxshared=3,\n    # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。\n    blocking=True,  # 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错\n    maxusage=None,  # 一个链接最多被重复使用的次数，None表示无限制\n    setsession=[],  # 开始会话前执行的命令列表。如：[\"set datestyle to ...\", \"set time zone ...\"]\n    ping=0,\n    # ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always\n    host='127.0.0.1',\n    port=3306,\n    user='root',\n    password='root123',\n    database='testdb',\n    charset='utf8',\n)\n\n\ndef func():\n    # 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常\n    # 否则\n    # 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。\n    # 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。\n    # 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。\n    # 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。\n    conn = POOL.connection()\n\n    # print('连接被拿走了', conn._con)\n    # print('池子里目前有', POOL._idle_cache, '\\r\\n')\n\n    cursor = conn.cursor()\n    cursor.execute('select * from USER')\n    result = cursor.fetchall()\n    conn.close()\n    return result\n\n\nresult = func()\nprint(result)\n```\n\n\n\n\n\n<br>\n\n\n\n## pymysql加锁\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport pymysql\nimport threading\nfrom threading import RLock\n\nLOCK = RLock()\nCONN = pymysql.connect(host='127.0.0.1',\n                       port=3306,\n                       user='root',\n                       password='root123',\n                       database='testdb',\n                       charset='utf8')\n\n\ndef task(arg):\n    with LOCK:\n        cursor = CONN.cursor()\n        cursor.execute('select * from USER ')\n        result = cursor.fetchall()\n        cursor.close()\n\n        print(result)\n\n\nfor i in range(10):\n    t = threading.Thread(target=task, args=(i,))\n    t.start()\n```\n\n\n\n## 实例代码\n\n```python\nimport pymysql\nimport threading\nfrom DBUtils.PooledDB import PooledDB, SharedDBConnection\n\n\nPOOL = PooledDB(\n    creator=pymysql,  # 使用链接数据库的模块\n    maxconnections=20,  # 连接池允许的最大连接数，0和None表示不限制连接数\n    mincached=2,  # 初始化时，链接池中至少创建的空闲的链接，0表示不创建\n    maxcached=5,  # 链接池中最多闲置的链接，0和None不限制\n    #maxshared=3,  # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。\n    blocking=True,  # 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错\n    maxusage=None,  # 一个链接最多被重复使用的次数，None表示无限制\n    setsession=[],  # 开始会话前执行的命令列表。如：[\"set datestyle to ...\", \"set time zone ...\"]\n    ping=0,\n    # ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always\n    host='127.0.0.1',\n    port=3306,\n    user='root',\n    password='root123',\n    database='testdb',\n    charset='utf8',\n)\n\n\ndef connect():\n    # 创建连接\n    conn = POOL.connection()\n    # 创建游标\n    cursor = conn.cursor(pymysql.cursors.DictCursor)\n\n    return conn,cursor\n\ndef close(conn, cursor):\n    # 关闭游标\n    cursor.close()\n    # 关闭连接\n    conn.close()\n\ndef fetch_one(sql):\n    conn,cursor = connect()\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n    result = cursor.fetchone()\n    close(conn,cursor)\n\n    return result\n\ndef fetch_all(sql):\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    cursor.execute(sql)\n    result = cursor.fetchall()\n\n    close(conn, cursor)\n    return result\n\ndef insert(sql):\n    \"\"\"\n    创建数据\n    :param sql: 含有占位符的SQL\n    :return:\n    \"\"\"\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n    conn.commit()\n\n    close(conn, cursor)\n\ndef delete(sql):\n    \"\"\"\n    创建数据\n    :param sql: 含有占位符的SQL\n    :return:\n    \"\"\"\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n\n    conn.commit()\n\n    close(conn, cursor)\n\n    return effect_row\n\ndef update(sql):\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n\n    conn.commit()\n\n    close(conn, cursor)\n\n    return effect_row\n```\n\n\n\n<br>\n\n\n\n# SQLAlchemy ORM操作数据库\n\n\n\n## 安装\n\n```bash\npip install SQLAlchemy\n```\n\n\n\n检查是否安装成功：\n\n```bash\n>>> import sqlalchemy\n>>> sqlalchemy.__version__\n'1.3.20'\n```\n\n\n\n\n\n## 连接到数据库\n\n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine('mysql://root:root123@172.21.1.100:3306/news?charset=utf8')\n```\n\n\n\n使用`create_engine`连接数据库，格式为：\n\n```\nmysql://<用户名>:<密码>@<数据库地址>:<端口>/库名?charset=<编码>\n```\n\n\n\n## 定义模型\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, DateTime, Boolean\n\nengine = create_engine('mysql://root:root123@172.21.1.100:3306/news?charset=utf8')\nBase = declarative_base()\n\nclass News(Base):\n    __tablename__ = 'news'\n    id = Column(Integer, primary_key=True)\n    title = Column(String(200), nullable=False)\n    content = Column(String(2000), nullable=False)\n    types = Column(String(10), nullable=False)\n    image = Column(String(300))\n    author = Column(String(20))\n    view_count = Column(Integer)\n    created_at = Column(DateTime)\n    is_valid = Column(Boolean)\n```\n\n\n\n## 创建表\n\n在定义好表结构后，可以这样进行创建表结构：\n\n```python\n>>> from mysql_orm import News, engine\n>>> News.metadata.create_all(engine)\n```\n\n\n\n## 数据增删改查\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, DateTime, Boolean\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine('mysql://root:root123@172.21.1.100:3306/news?charset=utf8')\nBase = declarative_base()\nSession = sessionmaker(bind=engine)\n\nclass News(Base):\n    ......\n  \nclass ORM(object):\n    def __init__(self):\n        self.session = Session()\n        \n    def insert(self):\n        '''新增数据'''\n        new_obj = News(\n            title = \"this is title\",\n            content = \"this is content\"\n            types = \"type1\"\n        )\n        self.session.add(new_obj)\n        self.session.commit()\n        return new_obj\n      \n    def select_on(self):\n        '''查询一条数据'''\n        result = self.session.query(News).get(id=1)\n        return result\n        \n    def select_more(self):\n        '''查询多条数据'''\n        result = self.session.query(News).filter_by(is_valid=True).order_by(id)\n        return result\n      \n    def update(self):\n        '''更新数据'''\n        obj = self.session.query(News).filter_by(id=10)\n        for item in obj：\n            item.is_valid = 0\n            self.session.add(item)\n        self.session.commit()\n        return obj\n      \n    def delete(self):\n        '''删除数据'''\n        data = self.session.query(News).filter_by(id=11)\n        for item in data:\n            self.session.delete(data)\n        self.session.commit()\n```\n\n\n\n## 操作已存在的表\n\n首先连接到数据库：\n\n```python\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import Session\n\nclass Mysql(object):\n    def __init__(self):\n        self.host = \"127.0.0.1\"\n        self.pwd = \"root123\"\n        self.port = \"3306\"\n        self.user = \"root\"\n\n    def connect(self, db):\n        uri = 'mysql://{}:{}@{}:{}/{}'.format(self.user, self.pwd, self.host, self.port, db)\n        engine = create_engine(uri, echo=True)\n        metadata = MetaData(engine)\n        session = Session(engine)\n\n        return {'session': session, 'metadata': metadata, 'engine': engine}\n      \n```\n\n\n\n查询数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])        \n\nrest = db_meta['session'].query(table_obj).filter_by(id=1).value('name')        \nprint(rest)\n```\n\n\n\n修改数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])        \n\ndb_meta['session'].execute(table_obj.update().where(table_obj.c.id==2).values(name=\"jack\"))\ndb_meta['session'].commit()\nrest = db_meta['session'].query(table_obj).filter_by(id=2).value('name')\nprint(rest)\n```\n\n\n\n\n\n删除数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])    \n\ndb_meta['session'].execute(table_obj.delete().where(table_obj.c.id==3))\n```\n\n\n\n\n\n新增数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])    \n\ndb_meta['session'].execute(table_obj.insert(),{\"name\":\"mike\"})\n```\n\n","source":"_posts/python操作mysql数据库.md","raw":"---\ntitle: python操作mysql数据库\ndate: 2021-06-14 13:21:59\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- DB操作\ndescription: python操作mysql数据库\ncover: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4233371922,1020712226&fm=26&gp=0.jpg\n---\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍python中操作mysql的方法\n\n更新于 2021-06-14\n\n{% endnote %}\n\n<br>\n\n\n\n# python操作mysql的模块\n\npython操作mysql常用的模块有如下的几种：\n\n- **原生sql**：\n  - PyMySQL：支持python2，3；\n  - MySQLdb：支持python2；\n- **ORM框架**：\n  - SQLAchemy\n\n\n\n<br>\n\n\n\n# pymysql操作数据库\n\n\n\n## 安装\n\n```bash\npip install PyMySQL\n```\n\n\n\n## 连接到数据库\n\n使用`connect()`方法，传入mysql相关的配置即可连接到数据库：\n\n```python\nimport pymysql\n\n# 创建连接\nmysql_info = {\n  \"host\": \"127.0.0.1\",\n  \"prot\": 3306,\n  \"user\": \"root\",\n  \"passowrd\": \"root123\",\n  \"db\": \"testdb\",\n  \"charset\": \"utf8mb4\"\n}\nconn = pymysql.connect(**mysql_info)\n```\n\n\n\n## 创建游标\n\n连接到数据库后，需要获取一个游标，游标的作用是用于进行后续的操作：\n\n```python\n# 创建游标(查询数据返回为元组格式)\ncursor = conn.cursor()\n\n# 创建游标(查询数据返回为字典格式)\ncursor = conn.cursor(pymysql.cursors.DictCursor)\n```\n\n\n\n## 执行sql语句\n\n事先写好sql语句，传给游标的`execute`方法即可，返回值为受影响的行数：\n\n```python\n# 执行SQL,返回受影响的行数\neffect_row1 = cursor.execute(\"select * from USER\")\n\n# 执行SQL,返回受影响的行数,一次插入多行数据\neffect_row2 = cursor.executemany(\"insert into USER (NAME) values(%s)\", [(\"jack\"), (\"boom\"), (\"lucy\")])  # 3\n```\n\n> execute和executemany方法返回的是受影响的行数。\n\n\n\n如果是增删改查的sql，则执行后需要调用`commit()`方法进行提交保存：\n\n```python\nconn.commit()\n```\n\n\n\n## 获取数据\n\n```python\n# 获取所有数据\nresult = cursor.fetchall()\n\n# 获取第一行数据\nresult = cursor.fetchone()\n\n# 获取前 5 行数据\nresult = cursor.fetchmany(5)\n\n# 获取最新数据的自增ID \nnew_id = cursor.lastrowid\n```\n\n\n\n## 关闭连接和游标\n\n最后需要关闭连接和游标，释放资源：\n\n```python\ncursor.close()\nconn.close()\n```\n\n\n\n<br>\n\n\n\n## pymysql使用连接池\n\n上述方式可能会在一些情况下频繁创建和断开数据库连接，可以使用`DBUtils`来实现一个数据库连接池。连接池有两种连接方式：\n\n- 为每个线程创建一个连接，线程调用了`close()`方法也不会关闭，会把连接重新放到池中；\n- 创建一批连接到连接池，供所有线程共享使用（推荐方式）；\n\n\n\n### 方式一、为每个线程创建连接\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom DBUtils.PersistentDB import PersistentDB\nimport pymysql\n\nPOOL = PersistentDB(\n    creator=pymysql,  # 使用链接数据库的模块\n    maxusage=None,  # 一个链接最多被重复使用的次数，None表示无限制\n    setsession=[],  # 开始会话前执行的命令列表。如：[\"set datestyle to ...\", \"set time zone ...\"]\n    ping=0,\n    # ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always\n    closeable=False,\n    # 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）\n    threadlocal=None,  # 本线程独享值得对象，用于保存链接对象，如果链接对象被重置\n    host='127.0.0.1',\n    port=3306,\n    user='root',\n    password='root123',\n    database='testdb',\n    charset='utf8',\n)\n\n\ndef func():\n    conn = POOL.connection(shareable=False)\n    cursor = conn.cursor()\n    cursor.execute('select * from USER')\n    result = cursor.fetchall()\n    cursor.close()\n    conn.close()\n    return result\n\n\nresult = func()\nprint(result)\n```\n\n\n\n### 方式二、创建连接到连接池\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport time\nimport pymysql\nimport threading\nfrom DBUtils.PooledDB import PooledDB, SharedDBConnection\n\nPOOL = PooledDB(\n    creator=pymysql,  # 使用链接数据库的模块\n    maxconnections=6,  # 连接池允许的最大连接数，0和None表示不限制连接数\n    mincached=2,  # 初始化时，链接池中至少创建的空闲的链接，0表示不创建\n    maxcached=5,  # 链接池中最多闲置的链接，0和None不限制\n    maxshared=3,\n    # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。\n    blocking=True,  # 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错\n    maxusage=None,  # 一个链接最多被重复使用的次数，None表示无限制\n    setsession=[],  # 开始会话前执行的命令列表。如：[\"set datestyle to ...\", \"set time zone ...\"]\n    ping=0,\n    # ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always\n    host='127.0.0.1',\n    port=3306,\n    user='root',\n    password='root123',\n    database='testdb',\n    charset='utf8',\n)\n\n\ndef func():\n    # 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常\n    # 否则\n    # 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。\n    # 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。\n    # 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。\n    # 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。\n    conn = POOL.connection()\n\n    # print('连接被拿走了', conn._con)\n    # print('池子里目前有', POOL._idle_cache, '\\r\\n')\n\n    cursor = conn.cursor()\n    cursor.execute('select * from USER')\n    result = cursor.fetchall()\n    conn.close()\n    return result\n\n\nresult = func()\nprint(result)\n```\n\n\n\n\n\n<br>\n\n\n\n## pymysql加锁\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport pymysql\nimport threading\nfrom threading import RLock\n\nLOCK = RLock()\nCONN = pymysql.connect(host='127.0.0.1',\n                       port=3306,\n                       user='root',\n                       password='root123',\n                       database='testdb',\n                       charset='utf8')\n\n\ndef task(arg):\n    with LOCK:\n        cursor = CONN.cursor()\n        cursor.execute('select * from USER ')\n        result = cursor.fetchall()\n        cursor.close()\n\n        print(result)\n\n\nfor i in range(10):\n    t = threading.Thread(target=task, args=(i,))\n    t.start()\n```\n\n\n\n## 实例代码\n\n```python\nimport pymysql\nimport threading\nfrom DBUtils.PooledDB import PooledDB, SharedDBConnection\n\n\nPOOL = PooledDB(\n    creator=pymysql,  # 使用链接数据库的模块\n    maxconnections=20,  # 连接池允许的最大连接数，0和None表示不限制连接数\n    mincached=2,  # 初始化时，链接池中至少创建的空闲的链接，0表示不创建\n    maxcached=5,  # 链接池中最多闲置的链接，0和None不限制\n    #maxshared=3,  # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。\n    blocking=True,  # 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错\n    maxusage=None,  # 一个链接最多被重复使用的次数，None表示无限制\n    setsession=[],  # 开始会话前执行的命令列表。如：[\"set datestyle to ...\", \"set time zone ...\"]\n    ping=0,\n    # ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always\n    host='127.0.0.1',\n    port=3306,\n    user='root',\n    password='root123',\n    database='testdb',\n    charset='utf8',\n)\n\n\ndef connect():\n    # 创建连接\n    conn = POOL.connection()\n    # 创建游标\n    cursor = conn.cursor(pymysql.cursors.DictCursor)\n\n    return conn,cursor\n\ndef close(conn, cursor):\n    # 关闭游标\n    cursor.close()\n    # 关闭连接\n    conn.close()\n\ndef fetch_one(sql):\n    conn,cursor = connect()\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n    result = cursor.fetchone()\n    close(conn,cursor)\n\n    return result\n\ndef fetch_all(sql):\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    cursor.execute(sql)\n    result = cursor.fetchall()\n\n    close(conn, cursor)\n    return result\n\ndef insert(sql):\n    \"\"\"\n    创建数据\n    :param sql: 含有占位符的SQL\n    :return:\n    \"\"\"\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n    conn.commit()\n\n    close(conn, cursor)\n\ndef delete(sql):\n    \"\"\"\n    创建数据\n    :param sql: 含有占位符的SQL\n    :return:\n    \"\"\"\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n\n    conn.commit()\n\n    close(conn, cursor)\n\n    return effect_row\n\ndef update(sql):\n    conn, cursor = connect()\n\n    # 执行SQL，并返回收影响行数\n    effect_row = cursor.execute(sql)\n\n    conn.commit()\n\n    close(conn, cursor)\n\n    return effect_row\n```\n\n\n\n<br>\n\n\n\n# SQLAlchemy ORM操作数据库\n\n\n\n## 安装\n\n```bash\npip install SQLAlchemy\n```\n\n\n\n检查是否安装成功：\n\n```bash\n>>> import sqlalchemy\n>>> sqlalchemy.__version__\n'1.3.20'\n```\n\n\n\n\n\n## 连接到数据库\n\n```python\nfrom sqlalchemy import create_engine\n\nengine = create_engine('mysql://root:root123@172.21.1.100:3306/news?charset=utf8')\n```\n\n\n\n使用`create_engine`连接数据库，格式为：\n\n```\nmysql://<用户名>:<密码>@<数据库地址>:<端口>/库名?charset=<编码>\n```\n\n\n\n## 定义模型\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, DateTime, Boolean\n\nengine = create_engine('mysql://root:root123@172.21.1.100:3306/news?charset=utf8')\nBase = declarative_base()\n\nclass News(Base):\n    __tablename__ = 'news'\n    id = Column(Integer, primary_key=True)\n    title = Column(String(200), nullable=False)\n    content = Column(String(2000), nullable=False)\n    types = Column(String(10), nullable=False)\n    image = Column(String(300))\n    author = Column(String(20))\n    view_count = Column(Integer)\n    created_at = Column(DateTime)\n    is_valid = Column(Boolean)\n```\n\n\n\n## 创建表\n\n在定义好表结构后，可以这样进行创建表结构：\n\n```python\n>>> from mysql_orm import News, engine\n>>> News.metadata.create_all(engine)\n```\n\n\n\n## 数据增删改查\n\n```python\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String, DateTime, Boolean\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine('mysql://root:root123@172.21.1.100:3306/news?charset=utf8')\nBase = declarative_base()\nSession = sessionmaker(bind=engine)\n\nclass News(Base):\n    ......\n  \nclass ORM(object):\n    def __init__(self):\n        self.session = Session()\n        \n    def insert(self):\n        '''新增数据'''\n        new_obj = News(\n            title = \"this is title\",\n            content = \"this is content\"\n            types = \"type1\"\n        )\n        self.session.add(new_obj)\n        self.session.commit()\n        return new_obj\n      \n    def select_on(self):\n        '''查询一条数据'''\n        result = self.session.query(News).get(id=1)\n        return result\n        \n    def select_more(self):\n        '''查询多条数据'''\n        result = self.session.query(News).filter_by(is_valid=True).order_by(id)\n        return result\n      \n    def update(self):\n        '''更新数据'''\n        obj = self.session.query(News).filter_by(id=10)\n        for item in obj：\n            item.is_valid = 0\n            self.session.add(item)\n        self.session.commit()\n        return obj\n      \n    def delete(self):\n        '''删除数据'''\n        data = self.session.query(News).filter_by(id=11)\n        for item in data:\n            self.session.delete(data)\n        self.session.commit()\n```\n\n\n\n## 操作已存在的表\n\n首先连接到数据库：\n\n```python\nfrom sqlalchemy import create_engine, MetaData\nfrom sqlalchemy.orm import Session\n\nclass Mysql(object):\n    def __init__(self):\n        self.host = \"127.0.0.1\"\n        self.pwd = \"root123\"\n        self.port = \"3306\"\n        self.user = \"root\"\n\n    def connect(self, db):\n        uri = 'mysql://{}:{}@{}:{}/{}'.format(self.user, self.pwd, self.host, self.port, db)\n        engine = create_engine(uri, echo=True)\n        metadata = MetaData(engine)\n        session = Session(engine)\n\n        return {'session': session, 'metadata': metadata, 'engine': engine}\n      \n```\n\n\n\n查询数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])        \n\nrest = db_meta['session'].query(table_obj).filter_by(id=1).value('name')        \nprint(rest)\n```\n\n\n\n修改数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])        \n\ndb_meta['session'].execute(table_obj.update().where(table_obj.c.id==2).values(name=\"jack\"))\ndb_meta['session'].commit()\nrest = db_meta['session'].query(table_obj).filter_by(id=2).value('name')\nprint(rest)\n```\n\n\n\n\n\n删除数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])    \n\ndb_meta['session'].execute(table_obj.delete().where(table_obj.c.id==3))\n```\n\n\n\n\n\n新增数据：\n\n```python\nfrom sqlalchemy import Table\n\ntable = \"t_test_table\"\n\ndb_meta = Mysql().connect(table)  \ntable_obj = Table(self.table, db_meta['metadata'], autoload=True, autoload_with=db_meta['engine'])    \n\ndb_meta['session'].execute(table_obj.insert(),{\"name\":\"mike\"})\n```\n\n","slug":"python操作mysql数据库","published":1,"updated":"2021-06-14T05:40:14.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpw6u1s7000067klgw3h5w1w","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍python中操作mysql的方法</p><p>更新于 2021-06-14</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"python操作mysql的模块\"><a href=\"#python操作mysql的模块\" class=\"headerlink\" title=\"python操作mysql的模块\"></a>python操作mysql的模块</h1><p>python操作mysql常用的模块有如下的几种：</p>\n<ul>\n<li><strong>原生sql</strong>：<ul>\n<li>PyMySQL：支持python2，3；</li>\n<li>MySQLdb：支持python2；</li>\n</ul>\n</li>\n<li><strong>ORM框架</strong>：<ul>\n<li>SQLAchemy</li>\n</ul>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"pymysql操作数据库\"><a href=\"#pymysql操作数据库\" class=\"headerlink\" title=\"pymysql操作数据库\"></a>pymysql操作数据库</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install PyMySQL</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"连接到数据库\"><a href=\"#连接到数据库\" class=\"headerlink\" title=\"连接到数据库\"></a>连接到数据库</h2><p>使用<code>connect()</code>方法，传入mysql相关的配置即可连接到数据库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">mysql_info = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;host&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;prot&quot;</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;passowrd&quot;</span>: <span class=\"string\">&quot;root123&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;db&quot;</span>: <span class=\"string\">&quot;testdb&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;charset&quot;</span>: <span class=\"string\">&quot;utf8mb4&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = pymysql.connect(**mysql_info)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建游标\"><a href=\"#创建游标\" class=\"headerlink\" title=\"创建游标\"></a>创建游标</h2><p>连接到数据库后，需要获取一个游标，游标的作用是用于进行后续的操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建游标(查询数据返回为元组格式)</span></span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建游标(查询数据返回为字典格式)</span></span><br><span class=\"line\">cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"执行sql语句\"><a href=\"#执行sql语句\" class=\"headerlink\" title=\"执行sql语句\"></a>执行sql语句</h2><p>事先写好sql语句，传给游标的<code>execute</code>方法即可，返回值为受影响的行数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行SQL,返回受影响的行数</span></span><br><span class=\"line\">effect_row1 = cursor.execute(<span class=\"string\">&quot;select * from USER&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行SQL,返回受影响的行数,一次插入多行数据</span></span><br><span class=\"line\">effect_row2 = cursor.executemany(<span class=\"string\">&quot;insert into USER (NAME) values(%s)&quot;</span>, [(<span class=\"string\">&quot;jack&quot;</span>), (<span class=\"string\">&quot;boom&quot;</span>), (<span class=\"string\">&quot;lucy&quot;</span>)])  <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>execute和executemany方法返回的是受影响的行数。</p>\n</blockquote>\n<p>如果是增删改查的sql，则执行后需要调用<code>commit()</code>方法进行提交保存：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.commit()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取所有数据</span></span><br><span class=\"line\">result = cursor.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第一行数据</span></span><br><span class=\"line\">result = cursor.fetchone()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取前 5 行数据</span></span><br><span class=\"line\">result = cursor.fetchmany(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取最新数据的自增ID </span></span><br><span class=\"line\">new_id = cursor.lastrowid</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关闭连接和游标\"><a href=\"#关闭连接和游标\" class=\"headerlink\" title=\"关闭连接和游标\"></a>关闭连接和游标</h2><p>最后需要关闭连接和游标，释放资源：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"pymysql使用连接池\"><a href=\"#pymysql使用连接池\" class=\"headerlink\" title=\"pymysql使用连接池\"></a>pymysql使用连接池</h2><p>上述方式可能会在一些情况下频繁创建和断开数据库连接，可以使用<code>DBUtils</code>来实现一个数据库连接池。连接池有两种连接方式：</p>\n<ul>\n<li>为每个线程创建一个连接，线程调用了<code>close()</code>方法也不会关闭，会把连接重新放到池中；</li>\n<li>创建一批连接到连接池，供所有线程共享使用（推荐方式）；</li>\n</ul>\n<h3 id=\"方式一、为每个线程创建连接\"><a href=\"#方式一、为每个线程创建连接\" class=\"headerlink\" title=\"方式一、为每个线程创建连接\"></a>方式一、为每个线程创建连接</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PersistentDB <span class=\"keyword\">import</span> PersistentDB</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">POOL = PersistentDB(</span><br><span class=\"line\">    creator=pymysql,  <span class=\"comment\"># 使用链接数据库的模块</span></span><br><span class=\"line\">    maxusage=<span class=\"literal\">None</span>,  <span class=\"comment\"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class=\"line\">    setsession=[],  <span class=\"comment\"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class=\"line\">    ping=<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class=\"line\">    closeable=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）</span></span><br><span class=\"line\">    threadlocal=<span class=\"literal\">None</span>,  <span class=\"comment\"># 本线程独享值得对象，用于保存链接对象，如果链接对象被重置</span></span><br><span class=\"line\">    host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">    user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">    database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">    charset=<span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    conn = POOL.connection(shareable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    cursor = conn.cursor()</span><br><span class=\"line\">    cursor.execute(<span class=\"string\">&#x27;select * from USER&#x27;</span>)</span><br><span class=\"line\">    result = cursor.fetchall()</span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = func()</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方式二、创建连接到连接池\"><a href=\"#方式二、创建连接到连接池\" class=\"headerlink\" title=\"方式二、创建连接到连接池\"></a>方式二、创建连接到连接池</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB, SharedDBConnection</span><br><span class=\"line\"></span><br><span class=\"line\">POOL = PooledDB(</span><br><span class=\"line\">    creator=pymysql,  <span class=\"comment\"># 使用链接数据库的模块</span></span><br><span class=\"line\">    maxconnections=<span class=\"number\">6</span>,  <span class=\"comment\"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class=\"line\">    mincached=<span class=\"number\">2</span>,  <span class=\"comment\"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class=\"line\">    maxcached=<span class=\"number\">5</span>,  <span class=\"comment\"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class=\"line\">    maxshared=<span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class=\"line\">    blocking=<span class=\"literal\">True</span>,  <span class=\"comment\"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class=\"line\">    maxusage=<span class=\"literal\">None</span>,  <span class=\"comment\"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class=\"line\">    setsession=[],  <span class=\"comment\"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class=\"line\">    ping=<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class=\"line\">    host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">    user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">    database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">    charset=<span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常</span></span><br><span class=\"line\">    <span class=\"comment\"># 否则</span></span><br><span class=\"line\">    <span class=\"comment\"># 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。</span></span><br><span class=\"line\">    <span class=\"comment\"># 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class=\"line\">    <span class=\"comment\"># 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。</span></span><br><span class=\"line\">    conn = POOL.connection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;连接被拿走了&#x27;, conn._con)</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;池子里目前有&#x27;, POOL._idle_cache, &#x27;\\r\\n&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cursor = conn.cursor()</span><br><span class=\"line\">    cursor.execute(<span class=\"string\">&#x27;select * from USER&#x27;</span>)</span><br><span class=\"line\">    result = cursor.fetchall()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = func()</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h2 id=\"pymysql加锁\"><a href=\"#pymysql加锁\" class=\"headerlink\" title=\"pymysql加锁\"></a>pymysql加锁</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> RLock</span><br><span class=\"line\"></span><br><span class=\"line\">LOCK = RLock()</span><br><span class=\"line\">CONN = pymysql.connect(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">                       port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">                       user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">                       password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">                       database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">                       charset=<span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> LOCK:</span><br><span class=\"line\">        cursor = CONN.cursor()</span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&#x27;select * from USER &#x27;</span>)</span><br><span class=\"line\">        result = cursor.fetchall()</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">        print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task, args=(i,))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB, SharedDBConnection</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">POOL = PooledDB(</span><br><span class=\"line\">    creator=pymysql,  <span class=\"comment\"># 使用链接数据库的模块</span></span><br><span class=\"line\">    maxconnections=<span class=\"number\">20</span>,  <span class=\"comment\"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class=\"line\">    mincached=<span class=\"number\">2</span>,  <span class=\"comment\"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class=\"line\">    maxcached=<span class=\"number\">5</span>,  <span class=\"comment\"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class=\"line\">    <span class=\"comment\">#maxshared=3,  # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class=\"line\">    blocking=<span class=\"literal\">True</span>,  <span class=\"comment\"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class=\"line\">    maxusage=<span class=\"literal\">None</span>,  <span class=\"comment\"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class=\"line\">    setsession=[],  <span class=\"comment\"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class=\"line\">    ping=<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class=\"line\">    host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">    user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">    database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">    charset=<span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">    conn = POOL.connection()</span><br><span class=\"line\">    <span class=\"comment\"># 创建游标</span></span><br><span class=\"line\">    cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> conn,cursor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span>(<span class=\"params\">conn, cursor</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 关闭游标</span></span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_one</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    conn,cursor = connect()</span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\">    result = cursor.fetchone()</span><br><span class=\"line\">    close(conn,cursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_all</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    cursor.execute(sql)</span><br><span class=\"line\">    result = cursor.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    创建数据</span></span><br><span class=\"line\"><span class=\"string\">    :param sql: 含有占位符的SQL</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\">    conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    创建数据</span></span><br><span class=\"line\"><span class=\"string\">    :param sql: 含有占位符的SQL</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">    conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> effect_row</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">    conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> effect_row</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"SQLAlchemy-ORM操作数据库\"><a href=\"#SQLAlchemy-ORM操作数据库\" class=\"headerlink\" title=\"SQLAlchemy ORM操作数据库\"></a>SQLAlchemy ORM操作数据库</h1><h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install SQLAlchemy</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查是否安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import sqlalchemy</span><br><span class=\"line\">&gt;&gt;&gt; sqlalchemy.__version__</span><br><span class=\"line\"><span class=\"string\">&#x27;1.3.20&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"连接到数据库-1\"><a href=\"#连接到数据库-1\" class=\"headerlink\" title=\"连接到数据库\"></a>连接到数据库</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(<span class=\"string\">&#x27;mysql://root:root123@172.21.1.100:3306/news?charset=utf8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用<code>create_engine</code>连接数据库，格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql:&#x2F;&#x2F;&lt;用户名&gt;:&lt;密码&gt;@&lt;数据库地址&gt;:&lt;端口&gt;&#x2F;库名?charset&#x3D;&lt;编码&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"定义模型\"><a href=\"#定义模型\" class=\"headerlink\" title=\"定义模型\"></a>定义模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, DateTime, Boolean</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(<span class=\"string\">&#x27;mysql://root:root123@172.21.1.100:3306/news?charset=utf8&#x27;</span>)</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">News</span>(<span class=\"params\">Base</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;news&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    title = Column(String(<span class=\"number\">200</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    content = Column(String(<span class=\"number\">2000</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    types = Column(String(<span class=\"number\">10</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    image = Column(String(<span class=\"number\">300</span>))</span><br><span class=\"line\">    author = Column(String(<span class=\"number\">20</span>))</span><br><span class=\"line\">    view_count = Column(Integer)</span><br><span class=\"line\">    created_at = Column(DateTime)</span><br><span class=\"line\">    is_valid = Column(Boolean)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h2><p>在定义好表结构后，可以这样进行创建表结构：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> mysql_orm <span class=\"keyword\">import</span> News, engine</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>News.metadata.create_all(engine)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数据增删改查\"><a href=\"#数据增删改查\" class=\"headerlink\" title=\"数据增删改查\"></a>数据增删改查</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, DateTime, Boolean</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(<span class=\"string\">&#x27;mysql://root:root123@172.21.1.100:3306/news?charset=utf8&#x27;</span>)</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">News</span>(<span class=\"params\">Base</span>):</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ORM</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.session = Session()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;新增数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            title = <span class=\"string\">&quot;this is title&quot;</span>,</span><br><span class=\"line\">            content = <span class=\"string\">&quot;this is content&quot;</span></span><br><span class=\"line\">            types = <span class=\"string\">&quot;type1&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add(new_obj)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new_obj</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_on</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;查询一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        result = self.session.query(News).get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_more</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;查询多条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        result = self.session.query(News).filter_by(is_valid=<span class=\"literal\">True</span>).order_by(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;更新数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        obj = self.session.query(News).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj：</span><br><span class=\"line\">            item.is_valid = <span class=\"number\">0</span></span><br><span class=\"line\">            self.session.add(item)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;删除数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        data = self.session.query(News).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">11</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            self.session.delete(data)</span><br><span class=\"line\">        self.session.commit()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作已存在的表\"><a href=\"#操作已存在的表\" class=\"headerlink\" title=\"操作已存在的表\"></a>操作已存在的表</h2><p>首先连接到数据库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine, MetaData</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> Session</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.host = <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">        self.pwd = <span class=\"string\">&quot;root123&quot;</span></span><br><span class=\"line\">        self.port = <span class=\"string\">&quot;3306&quot;</span></span><br><span class=\"line\">        self.user = <span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>(<span class=\"params\">self, db</span>):</span></span><br><span class=\"line\">        uri = <span class=\"string\">&#x27;mysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(self.user, self.pwd, self.host, self.port, db)</span><br><span class=\"line\">        engine = create_engine(uri, echo=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        metadata = MetaData(engine)</span><br><span class=\"line\">        session = Session(engine)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">&#x27;session&#x27;</span>: session, <span class=\"string\">&#x27;metadata&#x27;</span>: metadata, <span class=\"string\">&#x27;engine&#x27;</span>: engine&#125;</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])        </span><br><span class=\"line\"></span><br><span class=\"line\">rest = db_meta[<span class=\"string\">&#x27;session&#x27;</span>].query(table_obj).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>).value(<span class=\"string\">&#x27;name&#x27;</span>)        </span><br><span class=\"line\">print(rest)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])        </span><br><span class=\"line\"></span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].execute(table_obj.update().where(table_obj.c.<span class=\"built_in\">id</span>==<span class=\"number\">2</span>).values(name=<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].commit()</span><br><span class=\"line\">rest = db_meta[<span class=\"string\">&#x27;session&#x27;</span>].query(table_obj).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">2</span>).value(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">print(rest)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>删除数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])    </span><br><span class=\"line\"></span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].execute(table_obj.delete().where(table_obj.c.<span class=\"built_in\">id</span>==<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>新增数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])    </span><br><span class=\"line\"></span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].execute(table_obj.insert(),&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;mike&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍python中操作mysql的方法</p><p>更新于 2021-06-14</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"python操作mysql的模块\"><a href=\"#python操作mysql的模块\" class=\"headerlink\" title=\"python操作mysql的模块\"></a>python操作mysql的模块</h1><p>python操作mysql常用的模块有如下的几种：</p>\n<ul>\n<li><strong>原生sql</strong>：<ul>\n<li>PyMySQL：支持python2，3；</li>\n<li>MySQLdb：支持python2；</li>\n</ul>\n</li>\n<li><strong>ORM框架</strong>：<ul>\n<li>SQLAchemy</li>\n</ul>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"pymysql操作数据库\"><a href=\"#pymysql操作数据库\" class=\"headerlink\" title=\"pymysql操作数据库\"></a>pymysql操作数据库</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install PyMySQL</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"连接到数据库\"><a href=\"#连接到数据库\" class=\"headerlink\" title=\"连接到数据库\"></a>连接到数据库</h2><p>使用<code>connect()</code>方法，传入mysql相关的配置即可连接到数据库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">mysql_info = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;host&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;prot&quot;</span>: <span class=\"number\">3306</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;passowrd&quot;</span>: <span class=\"string\">&quot;root123&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;db&quot;</span>: <span class=\"string\">&quot;testdb&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;charset&quot;</span>: <span class=\"string\">&quot;utf8mb4&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">conn = pymysql.connect(**mysql_info)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建游标\"><a href=\"#创建游标\" class=\"headerlink\" title=\"创建游标\"></a>创建游标</h2><p>连接到数据库后，需要获取一个游标，游标的作用是用于进行后续的操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建游标(查询数据返回为元组格式)</span></span><br><span class=\"line\">cursor = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建游标(查询数据返回为字典格式)</span></span><br><span class=\"line\">cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"执行sql语句\"><a href=\"#执行sql语句\" class=\"headerlink\" title=\"执行sql语句\"></a>执行sql语句</h2><p>事先写好sql语句，传给游标的<code>execute</code>方法即可，返回值为受影响的行数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行SQL,返回受影响的行数</span></span><br><span class=\"line\">effect_row1 = cursor.execute(<span class=\"string\">&quot;select * from USER&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行SQL,返回受影响的行数,一次插入多行数据</span></span><br><span class=\"line\">effect_row2 = cursor.executemany(<span class=\"string\">&quot;insert into USER (NAME) values(%s)&quot;</span>, [(<span class=\"string\">&quot;jack&quot;</span>), (<span class=\"string\">&quot;boom&quot;</span>), (<span class=\"string\">&quot;lucy&quot;</span>)])  <span class=\"comment\"># 3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>execute和executemany方法返回的是受影响的行数。</p>\n</blockquote>\n<p>如果是增删改查的sql，则执行后需要调用<code>commit()</code>方法进行提交保存：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conn.commit()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取所有数据</span></span><br><span class=\"line\">result = cursor.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第一行数据</span></span><br><span class=\"line\">result = cursor.fetchone()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取前 5 行数据</span></span><br><span class=\"line\">result = cursor.fetchmany(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取最新数据的自增ID </span></span><br><span class=\"line\">new_id = cursor.lastrowid</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关闭连接和游标\"><a href=\"#关闭连接和游标\" class=\"headerlink\" title=\"关闭连接和游标\"></a>关闭连接和游标</h2><p>最后需要关闭连接和游标，释放资源：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor.close()</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"pymysql使用连接池\"><a href=\"#pymysql使用连接池\" class=\"headerlink\" title=\"pymysql使用连接池\"></a>pymysql使用连接池</h2><p>上述方式可能会在一些情况下频繁创建和断开数据库连接，可以使用<code>DBUtils</code>来实现一个数据库连接池。连接池有两种连接方式：</p>\n<ul>\n<li>为每个线程创建一个连接，线程调用了<code>close()</code>方法也不会关闭，会把连接重新放到池中；</li>\n<li>创建一批连接到连接池，供所有线程共享使用（推荐方式）；</li>\n</ul>\n<h3 id=\"方式一、为每个线程创建连接\"><a href=\"#方式一、为每个线程创建连接\" class=\"headerlink\" title=\"方式一、为每个线程创建连接\"></a>方式一、为每个线程创建连接</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PersistentDB <span class=\"keyword\">import</span> PersistentDB</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">POOL = PersistentDB(</span><br><span class=\"line\">    creator=pymysql,  <span class=\"comment\"># 使用链接数据库的模块</span></span><br><span class=\"line\">    maxusage=<span class=\"literal\">None</span>,  <span class=\"comment\"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class=\"line\">    setsession=[],  <span class=\"comment\"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class=\"line\">    ping=<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class=\"line\">    closeable=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）</span></span><br><span class=\"line\">    threadlocal=<span class=\"literal\">None</span>,  <span class=\"comment\"># 本线程独享值得对象，用于保存链接对象，如果链接对象被重置</span></span><br><span class=\"line\">    host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">    user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">    database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">    charset=<span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    conn = POOL.connection(shareable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    cursor = conn.cursor()</span><br><span class=\"line\">    cursor.execute(<span class=\"string\">&#x27;select * from USER&#x27;</span>)</span><br><span class=\"line\">    result = cursor.fetchall()</span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = func()</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方式二、创建连接到连接池\"><a href=\"#方式二、创建连接到连接池\" class=\"headerlink\" title=\"方式二、创建连接到连接池\"></a>方式二、创建连接到连接池</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB, SharedDBConnection</span><br><span class=\"line\"></span><br><span class=\"line\">POOL = PooledDB(</span><br><span class=\"line\">    creator=pymysql,  <span class=\"comment\"># 使用链接数据库的模块</span></span><br><span class=\"line\">    maxconnections=<span class=\"number\">6</span>,  <span class=\"comment\"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class=\"line\">    mincached=<span class=\"number\">2</span>,  <span class=\"comment\"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class=\"line\">    maxcached=<span class=\"number\">5</span>,  <span class=\"comment\"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class=\"line\">    maxshared=<span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class=\"line\">    blocking=<span class=\"literal\">True</span>,  <span class=\"comment\"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class=\"line\">    maxusage=<span class=\"literal\">None</span>,  <span class=\"comment\"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class=\"line\">    setsession=[],  <span class=\"comment\"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class=\"line\">    ping=<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class=\"line\">    host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">    user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">    database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">    charset=<span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常</span></span><br><span class=\"line\">    <span class=\"comment\"># 否则</span></span><br><span class=\"line\">    <span class=\"comment\"># 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。</span></span><br><span class=\"line\">    <span class=\"comment\"># 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class=\"line\">    <span class=\"comment\"># 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。</span></span><br><span class=\"line\">    <span class=\"comment\"># 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。</span></span><br><span class=\"line\">    conn = POOL.connection()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;连接被拿走了&#x27;, conn._con)</span></span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;池子里目前有&#x27;, POOL._idle_cache, &#x27;\\r\\n&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cursor = conn.cursor()</span><br><span class=\"line\">    cursor.execute(<span class=\"string\">&#x27;select * from USER&#x27;</span>)</span><br><span class=\"line\">    result = cursor.fetchall()</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = func()</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h2 id=\"pymysql加锁\"><a href=\"#pymysql加锁\" class=\"headerlink\" title=\"pymysql加锁\"></a>pymysql加锁</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> RLock</span><br><span class=\"line\"></span><br><span class=\"line\">LOCK = RLock()</span><br><span class=\"line\">CONN = pymysql.connect(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">                       port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">                       user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">                       password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">                       database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">                       charset=<span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">task</span>(<span class=\"params\">arg</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> LOCK:</span><br><span class=\"line\">        cursor = CONN.cursor()</span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&#x27;select * from USER &#x27;</span>)</span><br><span class=\"line\">        result = cursor.fetchall()</span><br><span class=\"line\">        cursor.close()</span><br><span class=\"line\"></span><br><span class=\"line\">        print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = threading.Thread(target=task, args=(i,))</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">from</span> DBUtils.PooledDB <span class=\"keyword\">import</span> PooledDB, SharedDBConnection</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">POOL = PooledDB(</span><br><span class=\"line\">    creator=pymysql,  <span class=\"comment\"># 使用链接数据库的模块</span></span><br><span class=\"line\">    maxconnections=<span class=\"number\">20</span>,  <span class=\"comment\"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class=\"line\">    mincached=<span class=\"number\">2</span>,  <span class=\"comment\"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class=\"line\">    maxcached=<span class=\"number\">5</span>,  <span class=\"comment\"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class=\"line\">    <span class=\"comment\">#maxshared=3,  # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class=\"line\">    blocking=<span class=\"literal\">True</span>,  <span class=\"comment\"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class=\"line\">    maxusage=<span class=\"literal\">None</span>,  <span class=\"comment\"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class=\"line\">    setsession=[],  <span class=\"comment\"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class=\"line\">    ping=<span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class=\"line\">    host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">    port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">    user=<span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password=<span class=\"string\">&#x27;root123&#x27;</span>,</span><br><span class=\"line\">    database=<span class=\"string\">&#x27;testdb&#x27;</span>,</span><br><span class=\"line\">    charset=<span class=\"string\">&#x27;utf8&#x27;</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建连接</span></span><br><span class=\"line\">    conn = POOL.connection()</span><br><span class=\"line\">    <span class=\"comment\"># 创建游标</span></span><br><span class=\"line\">    cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> conn,cursor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span>(<span class=\"params\">conn, cursor</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 关闭游标</span></span><br><span class=\"line\">    cursor.close()</span><br><span class=\"line\">    <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_one</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    conn,cursor = connect()</span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\">    result = cursor.fetchone()</span><br><span class=\"line\">    close(conn,cursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fetch_all</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    cursor.execute(sql)</span><br><span class=\"line\">    result = cursor.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    创建数据</span></span><br><span class=\"line\"><span class=\"string\">    :param sql: 含有占位符的SQL</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\">    conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    创建数据</span></span><br><span class=\"line\"><span class=\"string\">    :param sql: 含有占位符的SQL</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">    conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> effect_row</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span>(<span class=\"params\">sql</span>):</span></span><br><span class=\"line\">    conn, cursor = connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 执行SQL，并返回收影响行数</span></span><br><span class=\"line\">    effect_row = cursor.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">    conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\">    close(conn, cursor)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> effect_row</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"SQLAlchemy-ORM操作数据库\"><a href=\"#SQLAlchemy-ORM操作数据库\" class=\"headerlink\" title=\"SQLAlchemy ORM操作数据库\"></a>SQLAlchemy ORM操作数据库</h1><h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install SQLAlchemy</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查是否安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import sqlalchemy</span><br><span class=\"line\">&gt;&gt;&gt; sqlalchemy.__version__</span><br><span class=\"line\"><span class=\"string\">&#x27;1.3.20&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"连接到数据库-1\"><a href=\"#连接到数据库-1\" class=\"headerlink\" title=\"连接到数据库\"></a>连接到数据库</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(<span class=\"string\">&#x27;mysql://root:root123@172.21.1.100:3306/news?charset=utf8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用<code>create_engine</code>连接数据库，格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql:&#x2F;&#x2F;&lt;用户名&gt;:&lt;密码&gt;@&lt;数据库地址&gt;:&lt;端口&gt;&#x2F;库名?charset&#x3D;&lt;编码&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"定义模型\"><a href=\"#定义模型\" class=\"headerlink\" title=\"定义模型\"></a>定义模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, DateTime, Boolean</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(<span class=\"string\">&#x27;mysql://root:root123@172.21.1.100:3306/news?charset=utf8&#x27;</span>)</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">News</span>(<span class=\"params\">Base</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;news&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    title = Column(String(<span class=\"number\">200</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    content = Column(String(<span class=\"number\">2000</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    types = Column(String(<span class=\"number\">10</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    image = Column(String(<span class=\"number\">300</span>))</span><br><span class=\"line\">    author = Column(String(<span class=\"number\">20</span>))</span><br><span class=\"line\">    view_count = Column(Integer)</span><br><span class=\"line\">    created_at = Column(DateTime)</span><br><span class=\"line\">    is_valid = Column(Boolean)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h2><p>在定义好表结构后，可以这样进行创建表结构：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> mysql_orm <span class=\"keyword\">import</span> News, engine</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>News.metadata.create_all(engine)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数据增删改查\"><a href=\"#数据增删改查\" class=\"headerlink\" title=\"数据增删改查\"></a>数据增删改查</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column, Integer, String, DateTime, Boolean</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"></span><br><span class=\"line\">engine = create_engine(<span class=\"string\">&#x27;mysql://root:root123@172.21.1.100:3306/news?charset=utf8&#x27;</span>)</span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\">Session = sessionmaker(bind=engine)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">News</span>(<span class=\"params\">Base</span>):</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ORM</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.session = Session()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;新增数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        new_obj = News(</span><br><span class=\"line\">            title = <span class=\"string\">&quot;this is title&quot;</span>,</span><br><span class=\"line\">            content = <span class=\"string\">&quot;this is content&quot;</span></span><br><span class=\"line\">            types = <span class=\"string\">&quot;type1&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.session.add(new_obj)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> new_obj</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_on</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;查询一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        result = self.session.query(News).get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_more</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;查询多条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        result = self.session.query(News).filter_by(is_valid=<span class=\"literal\">True</span>).order_by(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;更新数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        obj = self.session.query(News).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> obj：</span><br><span class=\"line\">            item.is_valid = <span class=\"number\">0</span></span><br><span class=\"line\">            self.session.add(item)</span><br><span class=\"line\">        self.session.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;删除数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        data = self.session.query(News).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">11</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            self.session.delete(data)</span><br><span class=\"line\">        self.session.commit()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作已存在的表\"><a href=\"#操作已存在的表\" class=\"headerlink\" title=\"操作已存在的表\"></a>操作已存在的表</h2><p>首先连接到数据库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine, MetaData</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> Session</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mysql</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.host = <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">        self.pwd = <span class=\"string\">&quot;root123&quot;</span></span><br><span class=\"line\">        self.port = <span class=\"string\">&quot;3306&quot;</span></span><br><span class=\"line\">        self.user = <span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>(<span class=\"params\">self, db</span>):</span></span><br><span class=\"line\">        uri = <span class=\"string\">&#x27;mysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(self.user, self.pwd, self.host, self.port, db)</span><br><span class=\"line\">        engine = create_engine(uri, echo=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        metadata = MetaData(engine)</span><br><span class=\"line\">        session = Session(engine)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">&#x27;session&#x27;</span>: session, <span class=\"string\">&#x27;metadata&#x27;</span>: metadata, <span class=\"string\">&#x27;engine&#x27;</span>: engine&#125;</span><br><span class=\"line\">      </span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])        </span><br><span class=\"line\"></span><br><span class=\"line\">rest = db_meta[<span class=\"string\">&#x27;session&#x27;</span>].query(table_obj).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>).value(<span class=\"string\">&#x27;name&#x27;</span>)        </span><br><span class=\"line\">print(rest)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])        </span><br><span class=\"line\"></span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].execute(table_obj.update().where(table_obj.c.<span class=\"built_in\">id</span>==<span class=\"number\">2</span>).values(name=<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].commit()</span><br><span class=\"line\">rest = db_meta[<span class=\"string\">&#x27;session&#x27;</span>].query(table_obj).filter_by(<span class=\"built_in\">id</span>=<span class=\"number\">2</span>).value(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">print(rest)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>删除数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])    </span><br><span class=\"line\"></span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].execute(table_obj.delete().where(table_obj.c.<span class=\"built_in\">id</span>==<span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>新增数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table</span><br><span class=\"line\"></span><br><span class=\"line\">table = <span class=\"string\">&quot;t_test_table&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">db_meta = Mysql().connect(table)  </span><br><span class=\"line\">table_obj = Table(self.table, db_meta[<span class=\"string\">&#x27;metadata&#x27;</span>], autoload=<span class=\"literal\">True</span>, autoload_with=db_meta[<span class=\"string\">&#x27;engine&#x27;</span>])    </span><br><span class=\"line\"></span><br><span class=\"line\">db_meta[<span class=\"string\">&#x27;session&#x27;</span>].execute(table_obj.insert(),&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;mike&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"kubernetes中的服务质量QoS","date":"2021-08-09T14:45:06.000Z","description":"详解kubernetes中的服务Qos","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdeveloper.ibm.com%2Fdwblog%2Fwp-content%2Fuploads%2Fsites%2F73%2Fdwblog-kubernetes-850x425.png&refer=http%3A%2F%2Fdeveloper.ibm.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1631112416&t=ec53fac9e0c6d318c97d8b1d27623a0a","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中QoS的相关概念\n\n更新于 2021-08-09\n\n{% endnote %}\n\n<br>\n\n\n\n# QoS分类\n\n\n\n## 三种QoS类型\n\nkubernetes中QoS分为三类：\n\n- \u0010`Guaranteed`\n- `Burstable`\n- `BestEffort`\n\n\n\n> 三种QoS类型，是根据CPU和内存进行划分的；实际中会根据pod不同的QoS类型来采取不同的驱逐、调度策略，尤其是在集群资源紧张的时候。\n\n\n\n## QoS类型达成的条件\n\n\n\n{% tabs comments %}\n\n<!-- tab Guaranteed -->\n\n`Guaranteed`类型的pod需要满足以下条件：\n\n- Pod 中的每个容器必须指定`mem limit`和`mem reuqest`，且两者必须相等；\n- Pod 中的每个容器必须指定`cpu limit`和`cpu request`，且两者必须相等；\n\n\n\n例如下面的配置：\n\n```yaml\napiVersion: v1\n    kind: Pod\n    metadata:\n      name: guaranteed-pod\n      namespace: default\n    spec:\n      containers:\n        - name: container\n          image: busybox\n          command: [ /bin/sleep, 1000 ]\n          resources:\n            limits:\n              cpu: 100m\n              memory: 10Mi\n            requests:\n              cpu: 100m\n              memory: 10Mi\n```\n\n> 在上边的例子中，guaranteed-pod 的cpu `request`和`limit`值相同，memory `request`和`limit`值相同，所以这个pod是一个`Guaranteed`类型的pod；\n\n\n\n同时，可以通过下面的命令检查pod是什么QoS类型：\n\n```bash\n$ kubectl describe pod limits-and-requests\n\nName:         guaranteed-pod\nNamespace:    default\nPriority:     0\nStatus:       Running\nQoS Class:    Guaranteed\n```\n\n<!-- endtab -->\n\n<!-- tab Burstable -->\n\n`Burstable`类型的Pod达成的条件是：\n\n- Pod 不符合 Guaranteed QoS 类标准；\n- Pod 中至少一个有容器具备内存或 CPU 请求；\n\n\n\n例如下面的示例\n\n```yaml\napiVersion: v1\n    kind: Pod\n    metadata:\n      name: brustable-pod\n      namespace: default\n    spec:\n      containers:\n        - name: container\n          image: busybox\n          command: [ /bin/sleep, 10000 ]\n          resources:\n            limits:\n              cpu: 100m\n              memory: 10Mi\n            requests:\n              cpu: 100m\n              memory: 0\n```\n\n\n\n> 也就是说，`Brustable`类型的pod，在调度的时候可能不会考虑节点的资源约束；\n\n\n\n通过命令查看pod的QoS类型：\n\n```bash\n$ kubectl describe pod limits\n\nName:         burstable-pod\nNamespace:    default\nPriority:     0\nStatus:       Running\nQoS Class:    Burstable\n```\n\n<!-- endtab -->\n\n<!-- tab BestEffort -->\n\n`BestEffort`类型的pod达成条件是：\n\n- Pod 中的容器不得设置任何内存、CPU 限制或请求；\n\n\n\n例如下面的示例：\n\n```yaml\napiVersion: v1\n    kind: Pod\n    metadata:\n      name: besteffort-pod\n      namespace: default\n    spec:\n      containers:\n        - name: container\n          image: busybox\n          command: [ /bin/sleep, 1000 ]\n          resources:\n            limits:\n              cpu: 0\n              memory: 0\n            requests:\n              cpu: 0\n              memory: 0\n```\n\n\n\n> 这样的话，pod在调度和运行时不会关注节点和自身的内存、cpu限制，但是pod实际是否能够调度并运行，还得看具体的节点资源；\n\n\n\n通过下面的命令检查pod类型：\n\n```bash\n$  kubectl describe pod nothing\n\nName:         besteffort-pod\nNamespace:    default\nPriority:     0\nStatus:       Running\nQoS Class:    BestEffort\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n# OOM发生的原理\n\n\n\n## kubelet软驱逐\n\nkubelet会监视节点和pod的资源状态：\n\n- 当节点资源不足时，会主动使一个或多个pod发生故障来回收其占用的资源；\n- 当pod使用资源超过limit时，kubelet也会强制重启pod；\n\n\n\nkubelet的驱逐顺序如下：\n\n1. 当资源不足时，优先驱逐`Besteffort`类型的pod；\n2. `Besteffort`驱逐完成后且资源依然紧张，则驱逐：`Brustable`类型的Pod；\n3. 最后驱逐`Guaranteed`类型的pod；\n\n\n\n## QoS回收策略\n\n\n\n### 系统OOM原理\n\n在遇到较高内存使用压力时，Linux 内核会杀掉一些不太重要的进程，腾出空间保障系统正常运行。它会给每个进程（`/proc/$pid / oom_score`）分配一个得分（`oom_score`），分数越高，被 OOM 的概率就越大。\n\n\n\n> 这个参数只反映进程的可用资源在系统中所占的百分比，并没有“该进程有多重要”的概念\n\n\n\n`oom_score`分值从-1000-1000，并且可以通过 `oom_score_adj` 来实现，它允许在内存不足的情况下杀死指定进程，具体做法是把可调参数 `/proc/$pid/oom_score_adj` 直接添加到 `badness()` 分数中，使某些任务总是会被考虑 OOM，某些任务则永远不会被 OOM。\n\n\n\n### kubernetes的QoS回收原理\n\nkubernetes通过cgroup给pod设置QoS级别，也是利用了系统的OOM机制，OOM分值从0-1000，对于`Guaranteed`级别的 Pod，OOM_ADJ参数设置成了**-998**，对于`Best-Effort`级别的 Pod，OOM_ADJ参数设置成了**1000**，对于`Burstable`级别的 Pod，OOM_ADJ参数取值**从2到999**。\n\n\n\n对于 kuberntes 保留资源，比如kubelet，docker，OOM_ADJ参数设置成了**-999**，表示不会被OOM kill掉。OOM_ADJ参数设置的越大，计算出来的OOM分数越高，表明该pod优先级就越低，当出现资源竞争时会越早被kill掉，对于OOM_ADJ参数是-999的表示kubernetes永远不会因为OOM将其kill掉。\n\n","source":"_posts/kubernetes中的服务质量QoS.md","raw":"---\ntitle: kubernetes中的服务质量QoS\ndate: 2021-08-09 22:45:06\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- 服务质量\ndescription: 详解kubernetes中的服务Qos\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdeveloper.ibm.com%2Fdwblog%2Fwp-content%2Fuploads%2Fsites%2F73%2Fdwblog-kubernetes-850x425.png&refer=http%3A%2F%2Fdeveloper.ibm.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1631112416&t=ec53fac9e0c6d318c97d8b1d27623a0a\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中QoS的相关概念\n\n更新于 2021-08-09\n\n{% endnote %}\n\n<br>\n\n\n\n# QoS分类\n\n\n\n## 三种QoS类型\n\nkubernetes中QoS分为三类：\n\n- \u0010`Guaranteed`\n- `Burstable`\n- `BestEffort`\n\n\n\n> 三种QoS类型，是根据CPU和内存进行划分的；实际中会根据pod不同的QoS类型来采取不同的驱逐、调度策略，尤其是在集群资源紧张的时候。\n\n\n\n## QoS类型达成的条件\n\n\n\n{% tabs comments %}\n\n<!-- tab Guaranteed -->\n\n`Guaranteed`类型的pod需要满足以下条件：\n\n- Pod 中的每个容器必须指定`mem limit`和`mem reuqest`，且两者必须相等；\n- Pod 中的每个容器必须指定`cpu limit`和`cpu request`，且两者必须相等；\n\n\n\n例如下面的配置：\n\n```yaml\napiVersion: v1\n    kind: Pod\n    metadata:\n      name: guaranteed-pod\n      namespace: default\n    spec:\n      containers:\n        - name: container\n          image: busybox\n          command: [ /bin/sleep, 1000 ]\n          resources:\n            limits:\n              cpu: 100m\n              memory: 10Mi\n            requests:\n              cpu: 100m\n              memory: 10Mi\n```\n\n> 在上边的例子中，guaranteed-pod 的cpu `request`和`limit`值相同，memory `request`和`limit`值相同，所以这个pod是一个`Guaranteed`类型的pod；\n\n\n\n同时，可以通过下面的命令检查pod是什么QoS类型：\n\n```bash\n$ kubectl describe pod limits-and-requests\n\nName:         guaranteed-pod\nNamespace:    default\nPriority:     0\nStatus:       Running\nQoS Class:    Guaranteed\n```\n\n<!-- endtab -->\n\n<!-- tab Burstable -->\n\n`Burstable`类型的Pod达成的条件是：\n\n- Pod 不符合 Guaranteed QoS 类标准；\n- Pod 中至少一个有容器具备内存或 CPU 请求；\n\n\n\n例如下面的示例\n\n```yaml\napiVersion: v1\n    kind: Pod\n    metadata:\n      name: brustable-pod\n      namespace: default\n    spec:\n      containers:\n        - name: container\n          image: busybox\n          command: [ /bin/sleep, 10000 ]\n          resources:\n            limits:\n              cpu: 100m\n              memory: 10Mi\n            requests:\n              cpu: 100m\n              memory: 0\n```\n\n\n\n> 也就是说，`Brustable`类型的pod，在调度的时候可能不会考虑节点的资源约束；\n\n\n\n通过命令查看pod的QoS类型：\n\n```bash\n$ kubectl describe pod limits\n\nName:         burstable-pod\nNamespace:    default\nPriority:     0\nStatus:       Running\nQoS Class:    Burstable\n```\n\n<!-- endtab -->\n\n<!-- tab BestEffort -->\n\n`BestEffort`类型的pod达成条件是：\n\n- Pod 中的容器不得设置任何内存、CPU 限制或请求；\n\n\n\n例如下面的示例：\n\n```yaml\napiVersion: v1\n    kind: Pod\n    metadata:\n      name: besteffort-pod\n      namespace: default\n    spec:\n      containers:\n        - name: container\n          image: busybox\n          command: [ /bin/sleep, 1000 ]\n          resources:\n            limits:\n              cpu: 0\n              memory: 0\n            requests:\n              cpu: 0\n              memory: 0\n```\n\n\n\n> 这样的话，pod在调度和运行时不会关注节点和自身的内存、cpu限制，但是pod实际是否能够调度并运行，还得看具体的节点资源；\n\n\n\n通过下面的命令检查pod类型：\n\n```bash\n$  kubectl describe pod nothing\n\nName:         besteffort-pod\nNamespace:    default\nPriority:     0\nStatus:       Running\nQoS Class:    BestEffort\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n\n\n# OOM发生的原理\n\n\n\n## kubelet软驱逐\n\nkubelet会监视节点和pod的资源状态：\n\n- 当节点资源不足时，会主动使一个或多个pod发生故障来回收其占用的资源；\n- 当pod使用资源超过limit时，kubelet也会强制重启pod；\n\n\n\nkubelet的驱逐顺序如下：\n\n1. 当资源不足时，优先驱逐`Besteffort`类型的pod；\n2. `Besteffort`驱逐完成后且资源依然紧张，则驱逐：`Brustable`类型的Pod；\n3. 最后驱逐`Guaranteed`类型的pod；\n\n\n\n## QoS回收策略\n\n\n\n### 系统OOM原理\n\n在遇到较高内存使用压力时，Linux 内核会杀掉一些不太重要的进程，腾出空间保障系统正常运行。它会给每个进程（`/proc/$pid / oom_score`）分配一个得分（`oom_score`），分数越高，被 OOM 的概率就越大。\n\n\n\n> 这个参数只反映进程的可用资源在系统中所占的百分比，并没有“该进程有多重要”的概念\n\n\n\n`oom_score`分值从-1000-1000，并且可以通过 `oom_score_adj` 来实现，它允许在内存不足的情况下杀死指定进程，具体做法是把可调参数 `/proc/$pid/oom_score_adj` 直接添加到 `badness()` 分数中，使某些任务总是会被考虑 OOM，某些任务则永远不会被 OOM。\n\n\n\n### kubernetes的QoS回收原理\n\nkubernetes通过cgroup给pod设置QoS级别，也是利用了系统的OOM机制，OOM分值从0-1000，对于`Guaranteed`级别的 Pod，OOM_ADJ参数设置成了**-998**，对于`Best-Effort`级别的 Pod，OOM_ADJ参数设置成了**1000**，对于`Burstable`级别的 Pod，OOM_ADJ参数取值**从2到999**。\n\n\n\n对于 kuberntes 保留资源，比如kubelet，docker，OOM_ADJ参数设置成了**-999**，表示不会被OOM kill掉。OOM_ADJ参数设置的越大，计算出来的OOM分数越高，表明该pod优先级就越低，当出现资源竞争时会越早被kill掉，对于OOM_ADJ参数是-999的表示kubernetes永远不会因为OOM将其kill掉。\n\n","slug":"kubernetes中的服务质量QoS","published":1,"updated":"2021-08-09T15:43:57.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks4t1uej0000y5kl8mfwa1fc","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中QoS的相关概念</p><p>更新于 2021-08-09</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"QoS分类\"><a href=\"#QoS分类\" class=\"headerlink\" title=\"QoS分类\"></a>QoS分类</h1><h2 id=\"三种QoS类型\"><a href=\"#三种QoS类型\" class=\"headerlink\" title=\"三种QoS类型\"></a>三种QoS类型</h2><p>kubernetes中QoS分为三类：</p>\n<ul>\n<li>\u0010<code>Guaranteed</code></li>\n<li><code>Burstable</code></li>\n<li><code>BestEffort</code></li>\n</ul>\n<blockquote>\n<p>三种QoS类型，是根据CPU和内存进行划分的；实际中会根据pod不同的QoS类型来采取不同的驱逐、调度策略，尤其是在集群资源紧张的时候。</p>\n</blockquote>\n<h2 id=\"QoS类型达成的条件\"><a href=\"#QoS类型达成的条件\" class=\"headerlink\" title=\"QoS类型达成的条件\"></a>QoS类型达成的条件</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Guaranteed</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Burstable</button></li><li class=\"tab\"><button data-href=\"#comments-3\">BestEffort</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p><code>Guaranteed</code>类型的pod需要满足以下条件：</p>\n<ul>\n<li>Pod 中的每个容器必须指定<code>mem limit</code>和<code>mem reuqest</code>，且两者必须相等；</li>\n<li>Pod 中的每个容器必须指定<code>cpu limit</code>和<code>cpu request</code>，且两者必须相等；</li>\n</ul>\n<p>例如下面的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">guaranteed-pod</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [ <span class=\"string\">/bin/sleep</span>, <span class=\"number\">1000</span> ]</span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">10Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">10Mi</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在上边的例子中，guaranteed-pod 的cpu <code>request</code>和<code>limit</code>值相同，memory <code>request</code>和<code>limit</code>值相同，所以这个pod是一个<code>Guaranteed</code>类型的pod；</p>\n</blockquote>\n<p>同时，可以通过下面的命令检查pod是什么QoS类型：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe pod limits-and-requests</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         guaranteed-pod</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">QoS Class:    Guaranteed</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><code>Burstable</code>类型的Pod达成的条件是：</p>\n<ul>\n<li>Pod 不符合 Guaranteed QoS 类标准；</li>\n<li>Pod 中至少一个有容器具备内存或 CPU 请求；</li>\n</ul>\n<p>例如下面的示例</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">brustable-pod</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [ <span class=\"string\">/bin/sleep</span>, <span class=\"number\">10000</span> ]</span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">10Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>也就是说，<code>Brustable</code>类型的pod，在调度的时候可能不会考虑节点的资源约束；</p>\n</blockquote>\n<p>通过命令查看pod的QoS类型：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe pod limits</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         burstable-pod</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">QoS Class:    Burstable</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p><code>BestEffort</code>类型的pod达成条件是：</p>\n<ul>\n<li>Pod 中的容器不得设置任何内存、CPU 限制或请求；</li>\n</ul>\n<p>例如下面的示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">besteffort-pod</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [ <span class=\"string\">/bin/sleep</span>, <span class=\"number\">1000</span> ]</span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这样的话，pod在调度和运行时不会关注节点和自身的内存、cpu限制，但是pod实际是否能够调度并运行，还得看具体的节点资源；</p>\n</blockquote>\n<p>通过下面的命令检查pod类型：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  kubectl describe pod nothing</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         besteffort-pod</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">QoS Class:    BestEffort</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h1 id=\"OOM发生的原理\"><a href=\"#OOM发生的原理\" class=\"headerlink\" title=\"OOM发生的原理\"></a>OOM发生的原理</h1><h2 id=\"kubelet软驱逐\"><a href=\"#kubelet软驱逐\" class=\"headerlink\" title=\"kubelet软驱逐\"></a>kubelet软驱逐</h2><p>kubelet会监视节点和pod的资源状态：</p>\n<ul>\n<li>当节点资源不足时，会主动使一个或多个pod发生故障来回收其占用的资源；</li>\n<li>当pod使用资源超过limit时，kubelet也会强制重启pod；</li>\n</ul>\n<p>kubelet的驱逐顺序如下：</p>\n<ol>\n<li>当资源不足时，优先驱逐<code>Besteffort</code>类型的pod；</li>\n<li><code>Besteffort</code>驱逐完成后且资源依然紧张，则驱逐：<code>Brustable</code>类型的Pod；</li>\n<li>最后驱逐<code>Guaranteed</code>类型的pod；</li>\n</ol>\n<h2 id=\"QoS回收策略\"><a href=\"#QoS回收策略\" class=\"headerlink\" title=\"QoS回收策略\"></a>QoS回收策略</h2><h3 id=\"系统OOM原理\"><a href=\"#系统OOM原理\" class=\"headerlink\" title=\"系统OOM原理\"></a>系统OOM原理</h3><p>在遇到较高内存使用压力时，Linux 内核会杀掉一些不太重要的进程，腾出空间保障系统正常运行。它会给每个进程（<code>/proc/$pid / oom_score</code>）分配一个得分（<code>oom_score</code>），分数越高，被 OOM 的概率就越大。</p>\n<blockquote>\n<p>这个参数只反映进程的可用资源在系统中所占的百分比，并没有“该进程有多重要”的概念</p>\n</blockquote>\n<p><code>oom_score</code>分值从-1000-1000，并且可以通过 <code>oom_score_adj</code> 来实现，它允许在内存不足的情况下杀死指定进程，具体做法是把可调参数 <code>/proc/$pid/oom_score_adj</code> 直接添加到 <code>badness()</code> 分数中，使某些任务总是会被考虑 OOM，某些任务则永远不会被 OOM。</p>\n<h3 id=\"kubernetes的QoS回收原理\"><a href=\"#kubernetes的QoS回收原理\" class=\"headerlink\" title=\"kubernetes的QoS回收原理\"></a>kubernetes的QoS回收原理</h3><p>kubernetes通过cgroup给pod设置QoS级别，也是利用了系统的OOM机制，OOM分值从0-1000，对于<code>Guaranteed</code>级别的 Pod，OOM_ADJ参数设置成了<strong>-998</strong>，对于<code>Best-Effort</code>级别的 Pod，OOM_ADJ参数设置成了<strong>1000</strong>，对于<code>Burstable</code>级别的 Pod，OOM_ADJ参数取值<strong>从2到999</strong>。</p>\n<p>对于 kuberntes 保留资源，比如kubelet，docker，OOM_ADJ参数设置成了<strong>-999</strong>，表示不会被OOM kill掉。OOM_ADJ参数设置的越大，计算出来的OOM分数越高，表明该pod优先级就越低，当出现资源竞争时会越早被kill掉，对于OOM_ADJ参数是-999的表示kubernetes永远不会因为OOM将其kill掉。</p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中QoS的相关概念</p><p>更新于 2021-08-09</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"QoS分类\"><a href=\"#QoS分类\" class=\"headerlink\" title=\"QoS分类\"></a>QoS分类</h1><h2 id=\"三种QoS类型\"><a href=\"#三种QoS类型\" class=\"headerlink\" title=\"三种QoS类型\"></a>三种QoS类型</h2><p>kubernetes中QoS分为三类：</p>\n<ul>\n<li>\u0010<code>Guaranteed</code></li>\n<li><code>Burstable</code></li>\n<li><code>BestEffort</code></li>\n</ul>\n<blockquote>\n<p>三种QoS类型，是根据CPU和内存进行划分的；实际中会根据pod不同的QoS类型来采取不同的驱逐、调度策略，尤其是在集群资源紧张的时候。</p>\n</blockquote>\n<h2 id=\"QoS类型达成的条件\"><a href=\"#QoS类型达成的条件\" class=\"headerlink\" title=\"QoS类型达成的条件\"></a>QoS类型达成的条件</h2><div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">Guaranteed</button></li><li class=\"tab\"><button data-href=\"#comments-2\">Burstable</button></li><li class=\"tab\"><button data-href=\"#comments-3\">BestEffort</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><p><code>Guaranteed</code>类型的pod需要满足以下条件：</p>\n<ul>\n<li>Pod 中的每个容器必须指定<code>mem limit</code>和<code>mem reuqest</code>，且两者必须相等；</li>\n<li>Pod 中的每个容器必须指定<code>cpu limit</code>和<code>cpu request</code>，且两者必须相等；</li>\n</ul>\n<p>例如下面的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">guaranteed-pod</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [ <span class=\"string\">/bin/sleep</span>, <span class=\"number\">1000</span> ]</span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">10Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">10Mi</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在上边的例子中，guaranteed-pod 的cpu <code>request</code>和<code>limit</code>值相同，memory <code>request</code>和<code>limit</code>值相同，所以这个pod是一个<code>Guaranteed</code>类型的pod；</p>\n</blockquote>\n<p>同时，可以通过下面的命令检查pod是什么QoS类型：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe pod limits-and-requests</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         guaranteed-pod</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">QoS Class:    Guaranteed</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><p><code>Burstable</code>类型的Pod达成的条件是：</p>\n<ul>\n<li>Pod 不符合 Guaranteed QoS 类标准；</li>\n<li>Pod 中至少一个有容器具备内存或 CPU 请求；</li>\n</ul>\n<p>例如下面的示例</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">brustable-pod</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [ <span class=\"string\">/bin/sleep</span>, <span class=\"number\">10000</span> ]</span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">10Mi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>也就是说，<code>Brustable</code>类型的pod，在调度的时候可能不会考虑节点的资源约束；</p>\n</blockquote>\n<p>通过命令查看pod的QoS类型：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe pod limits</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         burstable-pod</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">QoS Class:    Burstable</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><p><code>BestEffort</code>类型的pod达成条件是：</p>\n<ul>\n<li>Pod 中的容器不得设置任何内存、CPU 限制或请求；</li>\n</ul>\n<p>例如下面的示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">besteffort-pod</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">container</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">          <span class=\"attr\">command:</span> [ <span class=\"string\">/bin/sleep</span>, <span class=\"number\">1000</span> ]</span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"number\">0</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这样的话，pod在调度和运行时不会关注节点和自身的内存、cpu限制，但是pod实际是否能够调度并运行，还得看具体的节点资源；</p>\n</blockquote>\n<p>通过下面的命令检查pod类型：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  kubectl describe pod nothing</span><br><span class=\"line\"></span><br><span class=\"line\">Name:         besteffort-pod</span><br><span class=\"line\">Namespace:    default</span><br><span class=\"line\">Priority:     0</span><br><span class=\"line\">Status:       Running</span><br><span class=\"line\">QoS Class:    BestEffort</span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n\n\n<h1 id=\"OOM发生的原理\"><a href=\"#OOM发生的原理\" class=\"headerlink\" title=\"OOM发生的原理\"></a>OOM发生的原理</h1><h2 id=\"kubelet软驱逐\"><a href=\"#kubelet软驱逐\" class=\"headerlink\" title=\"kubelet软驱逐\"></a>kubelet软驱逐</h2><p>kubelet会监视节点和pod的资源状态：</p>\n<ul>\n<li>当节点资源不足时，会主动使一个或多个pod发生故障来回收其占用的资源；</li>\n<li>当pod使用资源超过limit时，kubelet也会强制重启pod；</li>\n</ul>\n<p>kubelet的驱逐顺序如下：</p>\n<ol>\n<li>当资源不足时，优先驱逐<code>Besteffort</code>类型的pod；</li>\n<li><code>Besteffort</code>驱逐完成后且资源依然紧张，则驱逐：<code>Brustable</code>类型的Pod；</li>\n<li>最后驱逐<code>Guaranteed</code>类型的pod；</li>\n</ol>\n<h2 id=\"QoS回收策略\"><a href=\"#QoS回收策略\" class=\"headerlink\" title=\"QoS回收策略\"></a>QoS回收策略</h2><h3 id=\"系统OOM原理\"><a href=\"#系统OOM原理\" class=\"headerlink\" title=\"系统OOM原理\"></a>系统OOM原理</h3><p>在遇到较高内存使用压力时，Linux 内核会杀掉一些不太重要的进程，腾出空间保障系统正常运行。它会给每个进程（<code>/proc/$pid / oom_score</code>）分配一个得分（<code>oom_score</code>），分数越高，被 OOM 的概率就越大。</p>\n<blockquote>\n<p>这个参数只反映进程的可用资源在系统中所占的百分比，并没有“该进程有多重要”的概念</p>\n</blockquote>\n<p><code>oom_score</code>分值从-1000-1000，并且可以通过 <code>oom_score_adj</code> 来实现，它允许在内存不足的情况下杀死指定进程，具体做法是把可调参数 <code>/proc/$pid/oom_score_adj</code> 直接添加到 <code>badness()</code> 分数中，使某些任务总是会被考虑 OOM，某些任务则永远不会被 OOM。</p>\n<h3 id=\"kubernetes的QoS回收原理\"><a href=\"#kubernetes的QoS回收原理\" class=\"headerlink\" title=\"kubernetes的QoS回收原理\"></a>kubernetes的QoS回收原理</h3><p>kubernetes通过cgroup给pod设置QoS级别，也是利用了系统的OOM机制，OOM分值从0-1000，对于<code>Guaranteed</code>级别的 Pod，OOM_ADJ参数设置成了<strong>-998</strong>，对于<code>Best-Effort</code>级别的 Pod，OOM_ADJ参数设置成了<strong>1000</strong>，对于<code>Burstable</code>级别的 Pod，OOM_ADJ参数取值<strong>从2到999</strong>。</p>\n<p>对于 kuberntes 保留资源，比如kubelet，docker，OOM_ADJ参数设置成了<strong>-999</strong>，表示不会被OOM kill掉。OOM_ADJ参数设置的越大，计算出来的OOM分数越高，表明该pod优先级就越低，当出现资源竞争时会越早被kill掉，对于OOM_ADJ参数是-999的表示kubernetes永远不会因为OOM将其kill掉。</p>\n"},{"title":"使用kubeadm管理集群证书","date":"2021-08-21T08:07:42.000Z","description":"使用kubeadm管理集群字签证书","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1753787%2F201908%2F1753787-20190807150457472-2109756553.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1632125371&t=3b852d76d15e14e2ac022452cf7aef8c","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes使用kubeadm管理集群自签证书\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 查看证书状态\n\n```bash\n$ kubeadm alpha certs check-expiration\n[check-expiration] Reading configuration from the cluster...\n[check-expiration] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\nCERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED\nadmin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no\napiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no\napiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\napiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no\ncontroller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no\netcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\nfront-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no\nscheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no\n\nCERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED\nca                      Apr 14, 2030 11:18 UTC   9y              no\netcd-ca                 Apr 14, 2030 11:18 UTC   9y              no\nfront-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no\n```\n\n<br>\n\n\n\n# 更新所有证书\n\n```bash\n$ kubeadm alpha certs renew all\n[renew] Reading configuration from the cluster...\n[renew] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\ncertificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed\ncertificate for serving the Kubernetes API renewed\ncertificate the apiserver uses to access etcd renewed\ncertificate for the API server to connect to kubelet renewed\ncertificate embedded in the kubeconfig file for the controller manager to use renewed\ncertificate for liveness probes to healthcheck etcd renewed\ncertificate for etcd nodes to communicate with each other renewed\ncertificate for serving etcd renewed\ncertificate for the front proxy client renewed\ncertificate embedded in the kubeconfig file for the scheduler manager to use renewed\n```\n\n<br>\n\n\n\n# 更改证书签名\n\n\n\n## 创建新的证书配置文件\n\n```bash\n# 创建更新配置\n$ cat > ca-sign.yaml <<EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\napiServer:\n  certSANs:\n  - \"10.10.34.89\"\n  - \"113.108.71.77\"\n  #- \"kubernetes\"\n  #- \"kubernetes.default\"\n  #- \"kubernetes.default.svc\"\n  #- \"kubernetes.default.svc.cluster\"\n  #- \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt\n    cluster-signing-key-file: /etc/kubernetes/pki/ca.key\n#etcd:\n#  local:\n#    dataDir: /var/lib/etcd\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nEOF\n```\n\n\n\n## 更新并生效配置\n\n```bash\n# 更新 kubernetes 配置\n$ kubeadm config upload from-file --config=ca-sign.yaml\n\n# 确认更新配置生效\n$ kubeadm config view\napiServer:\n  certSANs:\n  - 10.10.34.89\n  - 113.108.71.77\n...\n```\n\n\n\n## 重新生成apiserver证书\n\n```bash\n# 删除原 apiserver 证书\n$ rm -rf /etc/kubernetes/pki/apiserver.*\n\n# 重新生成 apiserver 证书\n$ kubeadm init phase certs apiserver --config=ca-sign.yaml\n[certs] Generating \"apiserver\" certificate and key\n[certs] apiserver serving cert is signed for DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]\n\n# 确认 apiserver 证书更新情况\n$ openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt\n...\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication\n            X509v3 Subject Alternative Name:\n                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77\n...\n```\n\n\n\n## 重新生成所有证书\n\n```bash\n# 重新生成所有证书\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/ && rm -rf apiserver* front* sa*'\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/etcd/ && rm -rf healthcheck-client* peer* server*'\n$ ansible master -m copy -a 'src=ca-sign.yaml dest=ca-sign.yaml'\n$ ansible master -m shell -a 'kubeadm init phase certs all --config=ca-sign.yaml'\n\n# 验证证书\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS'\n```\n\n\n\n## 更新证书\n\n```bash\n# 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。\n$ docker ps | awk '/k8s_etcd/{print \"docker rm -f \"$1}' | bash\n$ kubectl delete pod etcd-01 -n kube-system\n\n# 更新所有证书\n$ kubeadm alpha certs renew all --config=ca-sign.yaml\n```\n\n<img src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n## 通过api更新\n\n可以通过apiserver的api更新证书，这一步需要进行验证\n\n```bash\n$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &\n...\n[certs] Certificate request \"kubeadm-cert-kubernetes-admin-8pvf8\" created\n...\n\n# 批准更新\n$ kubectl get csr | awk '!/Approved/ && !/NAME/{print \"kubectl certificate approve \"$1}' | bash\n...\ncertificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved\n...\n```\n\n","source":"_posts/使用kubeadm管理集群证书.md","raw":"---\ntitle: 使用kubeadm管理集群证书\ndate: 2021-08-21 16:07:42\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- 集群部署\ndescription: 使用kubeadm管理集群字签证书\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1753787%2F201908%2F1753787-20190807150457472-2109756553.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1632125371&t=3b852d76d15e14e2ac022452cf7aef8c\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes使用kubeadm管理集群自签证书\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 查看证书状态\n\n```bash\n$ kubeadm alpha certs check-expiration\n[check-expiration] Reading configuration from the cluster...\n[check-expiration] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\nCERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED\nadmin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no\napiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no\napiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\napiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no\ncontroller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no\netcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\nfront-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no\nscheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no\n\nCERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED\nca                      Apr 14, 2030 11:18 UTC   9y              no\netcd-ca                 Apr 14, 2030 11:18 UTC   9y              no\nfront-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no\n```\n\n<br>\n\n\n\n# 更新所有证书\n\n```bash\n$ kubeadm alpha certs renew all\n[renew] Reading configuration from the cluster...\n[renew] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\ncertificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed\ncertificate for serving the Kubernetes API renewed\ncertificate the apiserver uses to access etcd renewed\ncertificate for the API server to connect to kubelet renewed\ncertificate embedded in the kubeconfig file for the controller manager to use renewed\ncertificate for liveness probes to healthcheck etcd renewed\ncertificate for etcd nodes to communicate with each other renewed\ncertificate for serving etcd renewed\ncertificate for the front proxy client renewed\ncertificate embedded in the kubeconfig file for the scheduler manager to use renewed\n```\n\n<br>\n\n\n\n# 更改证书签名\n\n\n\n## 创建新的证书配置文件\n\n```bash\n# 创建更新配置\n$ cat > ca-sign.yaml <<EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\napiServer:\n  certSANs:\n  - \"10.10.34.89\"\n  - \"113.108.71.77\"\n  #- \"kubernetes\"\n  #- \"kubernetes.default\"\n  #- \"kubernetes.default.svc\"\n  #- \"kubernetes.default.svc.cluster\"\n  #- \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt\n    cluster-signing-key-file: /etc/kubernetes/pki/ca.key\n#etcd:\n#  local:\n#    dataDir: /var/lib/etcd\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nEOF\n```\n\n\n\n## 更新并生效配置\n\n```bash\n# 更新 kubernetes 配置\n$ kubeadm config upload from-file --config=ca-sign.yaml\n\n# 确认更新配置生效\n$ kubeadm config view\napiServer:\n  certSANs:\n  - 10.10.34.89\n  - 113.108.71.77\n...\n```\n\n\n\n## 重新生成apiserver证书\n\n```bash\n# 删除原 apiserver 证书\n$ rm -rf /etc/kubernetes/pki/apiserver.*\n\n# 重新生成 apiserver 证书\n$ kubeadm init phase certs apiserver --config=ca-sign.yaml\n[certs] Generating \"apiserver\" certificate and key\n[certs] apiserver serving cert is signed for DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]\n\n# 确认 apiserver 证书更新情况\n$ openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt\n...\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication\n            X509v3 Subject Alternative Name:\n                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77\n...\n```\n\n\n\n## 重新生成所有证书\n\n```bash\n# 重新生成所有证书\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/ && rm -rf apiserver* front* sa*'\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/etcd/ && rm -rf healthcheck-client* peer* server*'\n$ ansible master -m copy -a 'src=ca-sign.yaml dest=ca-sign.yaml'\n$ ansible master -m shell -a 'kubeadm init phase certs all --config=ca-sign.yaml'\n\n# 验证证书\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS'\n```\n\n\n\n## 更新证书\n\n```bash\n# 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。\n$ docker ps | awk '/k8s_etcd/{print \"docker rm -f \"$1}' | bash\n$ kubectl delete pod etcd-01 -n kube-system\n\n# 更新所有证书\n$ kubeadm alpha certs renew all --config=ca-sign.yaml\n```\n\n<img src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n## 通过api更新\n\n可以通过apiserver的api更新证书，这一步需要进行验证\n\n```bash\n$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &\n...\n[certs] Certificate request \"kubeadm-cert-kubernetes-admin-8pvf8\" created\n...\n\n# 批准更新\n$ kubectl get csr | awk '!/Approved/ && !/NAME/{print \"kubectl certificate approve \"$1}' | bash\n...\ncertificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved\n...\n```\n\n","slug":"使用kubeadm管理集群证书","published":1,"updated":"2021-08-21T08:12:09.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksli706e0000sbkl28ke7d7z","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes使用kubeadm管理集群自签证书</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"查看证书状态\"><a href=\"#查看证书状态\" class=\"headerlink\" title=\"查看证书状态\"></a>查看证书状态</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs check-expiration</span><br><span class=\"line\">[check-expiration] Reading configuration from the cluster...</span><br><span class=\"line\">[check-expiration] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class=\"line\">admin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">apiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">apiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">apiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">controller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">etcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">front-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no</span><br><span class=\"line\">scheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class=\"line\">ca                      Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">etcd-ca                 Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">front-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"更新所有证书\"><a href=\"#更新所有证书\" class=\"headerlink\" title=\"更新所有证书\"></a>更新所有证书</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all</span><br><span class=\"line\">[renew] Reading configuration from the cluster...</span><br><span class=\"line\">[renew] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the admin to use and <span class=\"keyword\">for</span> kubeadm itself renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving the Kubernetes API renewed</span><br><span class=\"line\">certificate the apiserver uses to access etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the API server to connect to kubelet renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the controller manager to use renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> liveness probes to healthcheck etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> etcd nodes to communicate with each other renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the front proxy client renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the scheduler manager to use renewed</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"更改证书签名\"><a href=\"#更改证书签名\" class=\"headerlink\" title=\"更改证书签名\"></a>更改证书签名</h1><h2 id=\"创建新的证书配置文件\"><a href=\"#创建新的证书配置文件\" class=\"headerlink\" title=\"创建新的证书配置文件\"></a>创建新的证书配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建更新配置</span></span><br><span class=\"line\">$ cat &gt; ca-sign.yaml &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiServer:</span></span><br><span class=\"line\"><span class=\"string\">  certSANs:</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;10.10.34.89&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;113.108.71.77&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default.svc&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default.svc.cluster&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\"><span class=\"string\">controllerManager:</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt</span></span><br><span class=\"line\"><span class=\"string\">    cluster-signing-key-file: /etc/kubernetes/pki/ca.key</span></span><br><span class=\"line\"><span class=\"string\">#etcd:</span></span><br><span class=\"line\"><span class=\"string\">#  local:</span></span><br><span class=\"line\"><span class=\"string\">#    dataDir: /var/lib/etcd</span></span><br><span class=\"line\"><span class=\"string\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更新并生效配置\"><a href=\"#更新并生效配置\" class=\"headerlink\" title=\"更新并生效配置\"></a>更新并生效配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 kubernetes 配置</span></span><br><span class=\"line\">$ kubeadm config upload from-file --config=ca-sign.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认更新配置生效</span></span><br><span class=\"line\">$ kubeadm config view</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - 10.10.34.89</span><br><span class=\"line\">  - 113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"重新生成apiserver证书\"><a href=\"#重新生成apiserver证书\" class=\"headerlink\" title=\"重新生成apiserver证书\"></a>重新生成apiserver证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除原 apiserver 证书</span></span><br><span class=\"line\">$ rm -rf /etc/kubernetes/pki/apiserver.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新生成 apiserver 证书</span></span><br><span class=\"line\">$ kubeadm init phase certs apiserver --config=ca-sign.yaml</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver&quot;</span> certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认 apiserver 证书更新情况</span></span><br><span class=\"line\">$ openssl x509 -text -noout -<span class=\"keyword\">in</span> /etc/kubernetes/pki/apiserver.crt</span><br><span class=\"line\">...</span><br><span class=\"line\">        X509v3 extensions:</span><br><span class=\"line\">            X509v3 Key Usage: critical</span><br><span class=\"line\">                Digital Signature, Key Encipherment</span><br><span class=\"line\">            X509v3 Extended Key Usage:</span><br><span class=\"line\">                TLS Web Server Authentication</span><br><span class=\"line\">            X509v3 Subject Alternative Name:</span><br><span class=\"line\">                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"重新生成所有证书\"><a href=\"#重新生成所有证书\" class=\"headerlink\" title=\"重新生成所有证书\"></a>重新生成所有证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新生成所有证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;cd /etc/kubernetes/pki/ &amp;&amp; rm -rf apiserver* front* sa*&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;cd /etc/kubernetes/pki/etcd/ &amp;&amp; rm -rf healthcheck-client* peer* server*&#x27;</span></span><br><span class=\"line\">$ ansible master -m copy -a <span class=\"string\">&#x27;src=ca-sign.yaml dest=ca-sign.yaml&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;kubeadm init phase certs all --config=ca-sign.yaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。</span></span><br><span class=\"line\">$ docker ps | awk <span class=\"string\">&#x27;/k8s_etcd/&#123;print &quot;docker rm -f &quot;$1&#125;&#x27;</span> | bash</span><br><span class=\"line\">$ kubectl delete pod etcd-01 -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新所有证书</span></span><br><span class=\"line\">$ kubeadm alpha certs renew all --config=ca-sign.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"通过api更新\"><a href=\"#通过api更新\" class=\"headerlink\" title=\"通过api更新\"></a>通过api更新</h2><p>可以通过apiserver的api更新证书，这一步需要进行验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &amp;</span><br><span class=\"line\">...</span><br><span class=\"line\">[certs] Certificate request <span class=\"string\">&quot;kubeadm-cert-kubernetes-admin-8pvf8&quot;</span> created</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批准更新</span></span><br><span class=\"line\">$ kubectl get csr | awk <span class=\"string\">&#x27;!/Approved/ &amp;&amp; !/NAME/&#123;print &quot;kubectl certificate approve &quot;$1&#125;&#x27;</span> | bash</span><br><span class=\"line\">...</span><br><span class=\"line\">certificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes使用kubeadm管理集群自签证书</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"查看证书状态\"><a href=\"#查看证书状态\" class=\"headerlink\" title=\"查看证书状态\"></a>查看证书状态</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs check-expiration</span><br><span class=\"line\">[check-expiration] Reading configuration from the cluster...</span><br><span class=\"line\">[check-expiration] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class=\"line\">admin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">apiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">apiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">apiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">controller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">etcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">front-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no</span><br><span class=\"line\">scheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class=\"line\">ca                      Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">etcd-ca                 Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">front-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"更新所有证书\"><a href=\"#更新所有证书\" class=\"headerlink\" title=\"更新所有证书\"></a>更新所有证书</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all</span><br><span class=\"line\">[renew] Reading configuration from the cluster...</span><br><span class=\"line\">[renew] FYI: You can look at this config file with <span class=\"string\">&#x27;kubectl -n kube-system get cm kubeadm-config -oyaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the admin to use and <span class=\"keyword\">for</span> kubeadm itself renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving the Kubernetes API renewed</span><br><span class=\"line\">certificate the apiserver uses to access etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the API server to connect to kubelet renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the controller manager to use renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> liveness probes to healthcheck etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> etcd nodes to communicate with each other renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the front proxy client renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the scheduler manager to use renewed</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"更改证书签名\"><a href=\"#更改证书签名\" class=\"headerlink\" title=\"更改证书签名\"></a>更改证书签名</h1><h2 id=\"创建新的证书配置文件\"><a href=\"#创建新的证书配置文件\" class=\"headerlink\" title=\"创建新的证书配置文件\"></a>创建新的证书配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建更新配置</span></span><br><span class=\"line\">$ cat &gt; ca-sign.yaml &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">apiVersion: kubeadm.k8s.io/v1beta2</span></span><br><span class=\"line\"><span class=\"string\">kind: ClusterConfiguration</span></span><br><span class=\"line\"><span class=\"string\">apiServer:</span></span><br><span class=\"line\"><span class=\"string\">  certSANs:</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;10.10.34.89&quot;</span></span><br><span class=\"line\"><span class=\"string\">  - &quot;113.108.71.77&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default.svc&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default.svc.cluster&quot;</span></span><br><span class=\"line\"><span class=\"string\">  #- &quot;kubernetes.default.svc.cluster.local&quot;</span></span><br><span class=\"line\"><span class=\"string\">controllerManager:</span></span><br><span class=\"line\"><span class=\"string\">  extraArgs:</span></span><br><span class=\"line\"><span class=\"string\">    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt</span></span><br><span class=\"line\"><span class=\"string\">    cluster-signing-key-file: /etc/kubernetes/pki/ca.key</span></span><br><span class=\"line\"><span class=\"string\">#etcd:</span></span><br><span class=\"line\"><span class=\"string\">#  local:</span></span><br><span class=\"line\"><span class=\"string\">#    dataDir: /var/lib/etcd</span></span><br><span class=\"line\"><span class=\"string\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;localhost&quot;</span></span><br><span class=\"line\"><span class=\"string\">#    - &quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更新并生效配置\"><a href=\"#更新并生效配置\" class=\"headerlink\" title=\"更新并生效配置\"></a>更新并生效配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 kubernetes 配置</span></span><br><span class=\"line\">$ kubeadm config upload from-file --config=ca-sign.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认更新配置生效</span></span><br><span class=\"line\">$ kubeadm config view</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - 10.10.34.89</span><br><span class=\"line\">  - 113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"重新生成apiserver证书\"><a href=\"#重新生成apiserver证书\" class=\"headerlink\" title=\"重新生成apiserver证书\"></a>重新生成apiserver证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除原 apiserver 证书</span></span><br><span class=\"line\">$ rm -rf /etc/kubernetes/pki/apiserver.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新生成 apiserver 证书</span></span><br><span class=\"line\">$ kubeadm init phase certs apiserver --config=ca-sign.yaml</span><br><span class=\"line\">[certs] Generating <span class=\"string\">&quot;apiserver&quot;</span> certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认 apiserver 证书更新情况</span></span><br><span class=\"line\">$ openssl x509 -text -noout -<span class=\"keyword\">in</span> /etc/kubernetes/pki/apiserver.crt</span><br><span class=\"line\">...</span><br><span class=\"line\">        X509v3 extensions:</span><br><span class=\"line\">            X509v3 Key Usage: critical</span><br><span class=\"line\">                Digital Signature, Key Encipherment</span><br><span class=\"line\">            X509v3 Extended Key Usage:</span><br><span class=\"line\">                TLS Web Server Authentication</span><br><span class=\"line\">            X509v3 Subject Alternative Name:</span><br><span class=\"line\">                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"重新生成所有证书\"><a href=\"#重新生成所有证书\" class=\"headerlink\" title=\"重新生成所有证书\"></a>重新生成所有证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新生成所有证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;cd /etc/kubernetes/pki/ &amp;&amp; rm -rf apiserver* front* sa*&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;cd /etc/kubernetes/pki/etcd/ &amp;&amp; rm -rf healthcheck-client* peer* server*&#x27;</span></span><br><span class=\"line\">$ ansible master -m copy -a <span class=\"string\">&#x27;src=ca-sign.yaml dest=ca-sign.yaml&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;kubeadm init phase certs all --config=ca-sign.yaml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS&#x27;</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">&#x27;openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。</span></span><br><span class=\"line\">$ docker ps | awk <span class=\"string\">&#x27;/k8s_etcd/&#123;print &quot;docker rm -f &quot;$1&#125;&#x27;</span> | bash</span><br><span class=\"line\">$ kubectl delete pod etcd-01 -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新所有证书</span></span><br><span class=\"line\">$ kubeadm alpha certs renew all --config=ca-sign.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"通过api更新\"><a href=\"#通过api更新\" class=\"headerlink\" title=\"通过api更新\"></a>通过api更新</h2><p>可以通过apiserver的api更新证书，这一步需要进行验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &amp;</span><br><span class=\"line\">...</span><br><span class=\"line\">[certs] Certificate request <span class=\"string\">&quot;kubeadm-cert-kubernetes-admin-8pvf8&quot;</span> created</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批准更新</span></span><br><span class=\"line\">$ kubectl get csr | awk <span class=\"string\">&#x27;!/Approved/ &amp;&amp; !/NAME/&#123;print &quot;kubectl certificate approve &quot;$1&#125;&#x27;</span> | bash</span><br><span class=\"line\">...</span><br><span class=\"line\">certificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n"},{"title":"在k8s中部署harbor镜像仓库服务","date":"2021-08-21T08:19:37.000Z","description":"在k8s中部署harbor仓库服务","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F381412%2F201907%2F381412-20190712224747490-693611835.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1632126138&t=13e5e3f719bc1466b62b68d8f4da4fe8","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中部署harbor服务\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n# 准备\n\n首先创建一个namespace：\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: harbor\n```\n\n\n\n然后创建storageclass用于habror数据持久化存储：\n\n```yaml\n# storageclass.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: harbor-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n执行下面的命令进行创建：\n\n```bash\n$ kubectl apply -f namespace.yaml\n$ kubectl apply -f storageclass.yaml\n```\n\n<img src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n# 下载harbor helm\n\nHarbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：\n\n```bash\n$ git clone https://github.com/goharbor/harbor-helm\n```\n\n\n\n官方说：`The master branch is in heavy development, please use the other stable versions instead`\n\n，所以需要切换到其他稳定分支，例如：\n\n```bash\n$ cd harbor-helm\n$ git checkout 1.2.0\n```\n\n\n\n<br>\n\n\n\n# 准备配置文件\n\n在helm下的`values.yaml`文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：\n\n```yaml\n# config.yaml\nexpose:\n  type: ingress\n  tls:\n    enabled: true\n  ingress:\n    hosts:\n      core: harbor.example.com\n      notary: notary.example.com\n    annotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n      nginx.ingress.kubernetes.io/proxy-body-size: \"0\"\n\nexternalURL: https://harbor.example.com\n\npersistence:\n  enabled: true\n  resourcePolicy: \"keep\"\n  persistentVolumeClaim:\n    registry:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    chartmuseum:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    jobservice:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    database:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    redis:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n \nharborAdminPassword: \"Harbor12345\"\n```\n\n\n\n如果使用的是`traefik ingress`，则`annotations`则改为如下的形式，我这里用的是上边的`ingress-nginx`：\n\n```yaml\nannotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      kubernetes.io/ingress.class: \"traefik\"\n      traefik.ingress.kubernetes.io/router.tls: \"true\"\n      traefik.ingress.kubernetes.io/router.entrypoints: websecure\n```\n\n\n\n<br>\n\n\n\n# 部署harbor\n\n直接使用helm命令进行部署，执行下面的命令：\n\n```bash\n$ helm install harbor -f config.yaml harbor-helm/ -n harbor\n```\n\n\n\n确保都正常启动：\n\n```bash\n$ helm ls -n harbor\n$ kubectl get pod,service,ingress -n harbor\n```\n\n<img src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n# 设置nginx\n\n在nginx中增加harbor的虚拟主机配置：\n\n```nginx\n# harbor.conf\nupstream ingress-443 {\n    server 10.8.138.12:443 max_fails=3 fail_timeout=5s;\n}\n\nserver {\n    listen 80;\n    server_name harbor.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name harbor.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/harbor.example.com_access.log main;\n    error_log /var/log/nginx/harbor.example.com_error.log;\n\n    location / {\n      proxy_pass https://ingress-443;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n    }\n\n    location ~* /\\.(svn|git)/ {\n      return 404;\n    }\n}\n```\n\n\n\n检查配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n<br>\n\n\n\n# 测试\n\n本地绑定好host之后访问域名`harbor.example.com`，即可看到harbor的登录页面：\n\n<img src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n默认的用户名为admin，密码在配置文件中设置的，默认为`Harbor12345`，即可登录进去了：\n\n<img src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# docker推送镜像\n\n首先使用docker命令登录harbor：\n\n```bash\n$ docker login harbor.example.com\n```\n\n\n\n这是也许会出现这个报错：`Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority`，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。\n\n\n\n需要编辑`/etc/docker/daemon.json`，（如果没有就创建），增加下面的参数：\n\n```bash\n\"insecure-registries\": [\"harbor.example.com\"],\n```\n\n\n\n然后重启docker即可登录成功：\n\n```bash\n$ docker login harbor.example.com\nUsername: admin\nPassword:\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n```\n\n\n\n接下来下载一个镜像并重新打tag上传：\n\n```bash\n$ docker pull busybox:latest\n$ docker tag busybox:latest harbor.example.com/library/busybox:v1\n$ docker push harbor.example.com/library/busybox:v1\n```\n\n\n\n在页面上看，已经推上来镜像了，说明基本的harbor功能正常：\n\n<img src=\"push.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/部署harbor镜像仓库服务.md","raw":"---\ntitle: 在k8s中部署harbor镜像仓库服务\ndate: 2021-08-21 16:19:37\ntags:\n- Docker\ncategories:\n- Docker\n- 镜像仓库\ndescription: 在k8s中部署harbor仓库服务\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F381412%2F201907%2F381412-20190712224747490-693611835.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1632126138&t=13e5e3f719bc1466b62b68d8f4da4fe8\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中部署harbor服务\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n\n\n# 准备\n\n首先创建一个namespace：\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: harbor\n```\n\n\n\n然后创建storageclass用于habror数据持久化存储：\n\n```yaml\n# storageclass.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: harbor-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n执行下面的命令进行创建：\n\n```bash\n$ kubectl apply -f namespace.yaml\n$ kubectl apply -f storageclass.yaml\n```\n\n<img src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n# 下载harbor helm\n\nHarbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：\n\n```bash\n$ git clone https://github.com/goharbor/harbor-helm\n```\n\n\n\n官方说：`The master branch is in heavy development, please use the other stable versions instead`\n\n，所以需要切换到其他稳定分支，例如：\n\n```bash\n$ cd harbor-helm\n$ git checkout 1.2.0\n```\n\n\n\n<br>\n\n\n\n# 准备配置文件\n\n在helm下的`values.yaml`文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：\n\n```yaml\n# config.yaml\nexpose:\n  type: ingress\n  tls:\n    enabled: true\n  ingress:\n    hosts:\n      core: harbor.example.com\n      notary: notary.example.com\n    annotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n      nginx.ingress.kubernetes.io/proxy-body-size: \"0\"\n\nexternalURL: https://harbor.example.com\n\npersistence:\n  enabled: true\n  resourcePolicy: \"keep\"\n  persistentVolumeClaim:\n    registry:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    chartmuseum:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    jobservice:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    database:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    redis:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n \nharborAdminPassword: \"Harbor12345\"\n```\n\n\n\n如果使用的是`traefik ingress`，则`annotations`则改为如下的形式，我这里用的是上边的`ingress-nginx`：\n\n```yaml\nannotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      kubernetes.io/ingress.class: \"traefik\"\n      traefik.ingress.kubernetes.io/router.tls: \"true\"\n      traefik.ingress.kubernetes.io/router.entrypoints: websecure\n```\n\n\n\n<br>\n\n\n\n# 部署harbor\n\n直接使用helm命令进行部署，执行下面的命令：\n\n```bash\n$ helm install harbor -f config.yaml harbor-helm/ -n harbor\n```\n\n\n\n确保都正常启动：\n\n```bash\n$ helm ls -n harbor\n$ kubectl get pod,service,ingress -n harbor\n```\n\n<img src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n# 设置nginx\n\n在nginx中增加harbor的虚拟主机配置：\n\n```nginx\n# harbor.conf\nupstream ingress-443 {\n    server 10.8.138.12:443 max_fails=3 fail_timeout=5s;\n}\n\nserver {\n    listen 80;\n    server_name harbor.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name harbor.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/harbor.example.com_access.log main;\n    error_log /var/log/nginx/harbor.example.com_error.log;\n\n    location / {\n      proxy_pass https://ingress-443;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n    }\n\n    location ~* /\\.(svn|git)/ {\n      return 404;\n    }\n}\n```\n\n\n\n检查配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n<br>\n\n\n\n# 测试\n\n本地绑定好host之后访问域名`harbor.example.com`，即可看到harbor的登录页面：\n\n<img src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n默认的用户名为admin，密码在配置文件中设置的，默认为`Harbor12345`，即可登录进去了：\n\n<img src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# docker推送镜像\n\n首先使用docker命令登录harbor：\n\n```bash\n$ docker login harbor.example.com\n```\n\n\n\n这是也许会出现这个报错：`Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority`，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。\n\n\n\n需要编辑`/etc/docker/daemon.json`，（如果没有就创建），增加下面的参数：\n\n```bash\n\"insecure-registries\": [\"harbor.example.com\"],\n```\n\n\n\n然后重启docker即可登录成功：\n\n```bash\n$ docker login harbor.example.com\nUsername: admin\nPassword:\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n```\n\n\n\n接下来下载一个镜像并重新打tag上传：\n\n```bash\n$ docker pull busybox:latest\n$ docker tag busybox:latest harbor.example.com/library/busybox:v1\n$ docker push harbor.example.com/library/busybox:v1\n```\n\n\n\n在页面上看，已经推上来镜像了，说明基本的harbor功能正常：\n\n<img src=\"push.png\" style=\"zoom:50%;\" />\n\n","slug":"部署harbor镜像仓库服务","published":1,"updated":"2021-08-21T08:26:17.632Z","_id":"cksliodri0000b9klhvax9v4n","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中部署harbor服务</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>首先创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建storageclass用于habror数据持久化存储：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># storageclass.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br><span class=\"line\">$ kubectl apply -f storageclass.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"下载harbor-helm\"><a href=\"#下载harbor-helm\" class=\"headerlink\" title=\"下载harbor helm\"></a>下载harbor helm</h1><p>Harbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/goharbor/harbor-helm</span><br></pre></td></tr></table></figure>\n\n\n\n<p>官方说：<code>The master branch is in heavy development, please use the other stable versions instead</code></p>\n<p>，所以需要切换到其他稳定分支，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> harbor-helm</span><br><span class=\"line\">$ git checkout 1.2.0</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"准备配置文件\"><a href=\"#准备配置文件\" class=\"headerlink\" title=\"准备配置文件\"></a>准备配置文件</h1><p>在helm下的<code>values.yaml</code>文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">expose:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ingress</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ingress:</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span></span><br><span class=\"line\">      <span class=\"attr\">core:</span> <span class=\"string\">harbor.example.com</span></span><br><span class=\"line\">      <span class=\"attr\">notary:</span> <span class=\"string\">notary.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">externalURL:</span> <span class=\"string\">https://harbor.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">persistence:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">resourcePolicy:</span> <span class=\"string\">&quot;keep&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">    <span class=\"attr\">registry:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">chartmuseum:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">jobservice:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">harborAdminPassword:</span> <span class=\"string\">&quot;Harbor12345&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用的是<code>traefik ingress</code>，则<code>annotations</code>则改为如下的形式，我这里用的是上边的<code>ingress-nginx</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">&quot;traefik&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.tls:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class=\"string\">websecure</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署harbor\"><a href=\"#部署harbor\" class=\"headerlink\" title=\"部署harbor\"></a>部署harbor</h1><p>直接使用helm命令进行部署，执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install harbor -f config.yaml harbor-helm/ -n harbor</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm ls -n harbor</span><br><span class=\"line\">$ kubectl get pod,service,ingress -n harbor</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n<h1 id=\"设置nginx\"><a href=\"#设置nginx\" class=\"headerlink\" title=\"设置nginx\"></a>设置nginx</h1><p>在nginx中增加harbor的虚拟主机配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># harbor.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">443</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.12:443</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/harbor.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/harbor.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> https://ingress-443;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host $http_host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload </span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>本地绑定好host之后访问域名<code>harbor.example.com</code>，即可看到harbor的登录页面：</p>\n<img src= \"/img/loading.gif\" data-src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n<p>默认的用户名为admin，密码在配置文件中设置的，默认为<code>Harbor12345</code>，即可登录进去了：</p>\n<img src= \"/img/loading.gif\" data-src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"docker推送镜像\"><a href=\"#docker推送镜像\" class=\"headerlink\" title=\"docker推送镜像\"></a>docker推送镜像</h1><p>首先使用docker命令登录harbor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这是也许会出现这个报错：<code>Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority</code>，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。</p>\n<p>需要编辑<code>/etc/docker/daemon.json</code>，（如果没有就创建），增加下面的参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;insecure-registries&quot;</span>: [<span class=\"string\">&quot;harbor.example.com&quot;</span>],</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后重启docker即可登录成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password:</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted <span class=\"keyword\">in</span> /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/<span class=\"comment\">#credentials-store</span></span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来下载一个镜像并重新打tag上传：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull busybox:latest</span><br><span class=\"line\">$ docker tag busybox:latest harbor.example.com/library/busybox:v1</span><br><span class=\"line\">$ docker push harbor.example.com/library/busybox:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在页面上看，已经推上来镜像了，说明基本的harbor功能正常：</p>\n<img src= \"/img/loading.gif\" data-src=\"push.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中部署harbor服务</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>首先创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建storageclass用于habror数据持久化存储：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># storageclass.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br><span class=\"line\">$ kubectl apply -f storageclass.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"下载harbor-helm\"><a href=\"#下载harbor-helm\" class=\"headerlink\" title=\"下载harbor helm\"></a>下载harbor helm</h1><p>Harbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/goharbor/harbor-helm</span><br></pre></td></tr></table></figure>\n\n\n\n<p>官方说：<code>The master branch is in heavy development, please use the other stable versions instead</code></p>\n<p>，所以需要切换到其他稳定分支，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> harbor-helm</span><br><span class=\"line\">$ git checkout 1.2.0</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"准备配置文件\"><a href=\"#准备配置文件\" class=\"headerlink\" title=\"准备配置文件\"></a>准备配置文件</h1><p>在helm下的<code>values.yaml</code>文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">expose:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ingress</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ingress:</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span></span><br><span class=\"line\">      <span class=\"attr\">core:</span> <span class=\"string\">harbor.example.com</span></span><br><span class=\"line\">      <span class=\"attr\">notary:</span> <span class=\"string\">notary.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">externalURL:</span> <span class=\"string\">https://harbor.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">persistence:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">resourcePolicy:</span> <span class=\"string\">&quot;keep&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">    <span class=\"attr\">registry:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">chartmuseum:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">jobservice:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">&quot;harbor-data&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">harborAdminPassword:</span> <span class=\"string\">&quot;Harbor12345&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用的是<code>traefik ingress</code>，则<code>annotations</code>则改为如下的形式，我这里用的是上边的<code>ingress-nginx</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">&quot;traefik&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.tls:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class=\"string\">websecure</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署harbor\"><a href=\"#部署harbor\" class=\"headerlink\" title=\"部署harbor\"></a>部署harbor</h1><p>直接使用helm命令进行部署，执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install harbor -f config.yaml harbor-helm/ -n harbor</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm ls -n harbor</span><br><span class=\"line\">$ kubectl get pod,service,ingress -n harbor</span><br></pre></td></tr></table></figure>\n\n<img src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n<h1 id=\"设置nginx\"><a href=\"#设置nginx\" class=\"headerlink\" title=\"设置nginx\"></a>设置nginx</h1><p>在nginx中增加harbor的虚拟主机配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># harbor.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">443</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.12:443</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://$host<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/harbor.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/harbor.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> https://ingress-443;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host $http_host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload </span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>本地绑定好host之后访问域名<code>harbor.example.com</code>，即可看到harbor的登录页面：</p>\n<img src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n<p>默认的用户名为admin，密码在配置文件中设置的，默认为<code>Harbor12345</code>，即可登录进去了：</p>\n<img src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"docker推送镜像\"><a href=\"#docker推送镜像\" class=\"headerlink\" title=\"docker推送镜像\"></a>docker推送镜像</h1><p>首先使用docker命令登录harbor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这是也许会出现这个报错：<code>Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority</code>，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。</p>\n<p>需要编辑<code>/etc/docker/daemon.json</code>，（如果没有就创建），增加下面的参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;insecure-registries&quot;</span>: [<span class=\"string\">&quot;harbor.example.com&quot;</span>],</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后重启docker即可登录成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password:</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted <span class=\"keyword\">in</span> /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/<span class=\"comment\">#credentials-store</span></span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来下载一个镜像并重新打tag上传：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull busybox:latest</span><br><span class=\"line\">$ docker tag busybox:latest harbor.example.com/library/busybox:v1</span><br><span class=\"line\">$ docker push harbor.example.com/library/busybox:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在页面上看，已经推上来镜像了，说明基本的harbor功能正常：</p>\n<img src=\"push.png\" style=\"zoom:50%;\" />\n\n"},{"title":"部署MetricServer","date":"2021-08-21T08:32:48.000Z","description":"在k8s中部署metric-server服务","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdeveloper.ibm.com%2Fdwblog%2Fwp-content%2Fuploads%2Fsites%2F73%2Fdwblog-kubernetes-850x425.png&refer=http%3A%2F%2Fdeveloper.ibm.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1631112416&t=ec53fac9e0c6d318c97d8b1d27623a0a","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中部署一套MetricServer服务的方法\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# metrics-server介绍\n\n`metrics-server`是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。\n\n<br>\n\n\n\n# 前提条件\n\n`kube-apiserver`需要设置如下的参数：\n\n```yaml\n--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem \n--requestheader-username-headers=X-Remote-User \n--requestheader-group-headers=X-Remote-Group \n--requestheader-extra-headers-prefix=X-Remote-Extra- \n--requestheader-allowed-names=\"\"\n--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem \n--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem \n--enable-aggregator-routing=true\n--runtime-config=api/all\n```\n\n-  `--requestheader-XXX`、`--proxy-client-XXX `是 `kube-apiserver `的 `aggregator layer `相关的配置参数，metrics-server & HPA 需要使用；\n-  `--requestheader-client-ca-file`：用于签名 `--proxy-client-cert-file` 和 `--proxy-client-key-file` 指定的证书；在启用了` metric aggregator `时使用；\n-  如果 `--requestheader-allowed-names` 不为空，则`--proxy-client-cert-file` 证书的 CN 必须位于 `allowed-names `中，默认为 aggregator，这里让其匹配所有名称；\n\n\n\n> 如果是kubeadm部署，默认已经添加了\n\n<br>\n\n\n\n# yaml文件准备\n\n可以从官方获取，地址为：[metrics-server](https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server)，或者使用下面的yaml文件：\n\n{% tabs comments %}\n\n<!-- tab metric-rbac.yaml -->\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n--- \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"extensions\"\n  resources:\n  - deployments\n  verbs:\n  - get\n  - list\n  - update\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n```\n\n<!-- endtab -->\n\n<!-- tab metric-apiservice.yaml -->\n\n```yaml\napiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n  groupPriorityMinimum: 100\n  versionPriority: 100\n```\n\n<!-- endtab -->\n\n<!-- tab metric-server-deployment.yaml -->\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: metrics-server-config\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: EnsureExists\ndata:\n  NannyConfiguration: |-\n    apiVersion: nannyconfig/v1alpha1\n    kind: NannyConfiguration\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: metrics-server-v0.3.6\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n    version: v0.3.6\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n      version: v0.3.6\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n        version: v0.3.6\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'\n    spec:\n      priorityClassName: system-cluster-critical\n      serviceAccountName: metrics-server\n      containers:\n      - name: metrics-server\n        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.6\n        command:\n        - /metrics-server\n        - --metric-resolution=30s\n        - --kubelet-insecure-tls\n        # These are needed for GKE, which doesn't support secure communication yet.\n        # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.\n        #- --kubelet-port=10255\n        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP\n        #- --deprecated-kubelet-completely-insecure=true\n        ports:\n        - containerPort: 443\n          name: https\n          protocol: TCP\n      - name: metrics-server-nanny\n        image: mirrorgooglecontainers/addon-resizer:1.8.4\n        resources:\n          limits:\n            cpu: 100m\n            memory: 300Mi\n          requests:\n            cpu: 5m\n            memory: 50Mi\n        env:\n          - name: MY_POD_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          - name: MY_POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n        volumeMounts:\n        - name: metrics-server-config-volume\n          mountPath: /etc/config\n        command:\n          - /pod_nanny\n          - --config-dir=/etc/config\n          - --cpu=80m\n          - --extra-cpu=0.5m\n          - --memory=80Mi\n          - --extra-memory=8Mi\n          - --threshold=5\n          - --deployment=metrics-server-v0.3.6\n          - --container=metrics-server\n          - --poll-period=300000\n          - --estimator=exponential\n          # Specifies the smallest cluster (defined in number of nodes)\n          # resources will be scaled to.\n          #- --minClusterSize={{ metrics_server_min_cluster_size }}\n      volumes:\n        - name: metrics-server-config-volume\n          configMap:\n            name: metrics-server-config\n      tolerations:\n        - key: \"CriticalAddonsOnly\"\n          operator: \"Exists\"\n```\n\n<!-- endtab -->\n\n<!-- tab metric-server-service.yaml -->\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    addonmanager.kubernetes.io/mode: Reconcile\n    kubernetes.io/cluster-service: \"true\"\n    kubernetes.io/name: \"Metrics-server\"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: https\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# 部署\n\n将上述yaml文件准备好，直接执行下面的命令进行部署：\n\n```bash\n$ kubectl apply -f metric-rbac.yaml\n$ kubectl apply -f metric-apiservice.yaml\n$ kubectl apply -f metric-server-deployment.yaml\n$ kubectl apply -f metric-server-service.yaml\n```\n\n\n\n<br>\n\n\n\n# 检查\n\n部署完成后检查并校验是否能够正常工作：\n\n```bash\n$ kubectl get all -n kube-system | grep metrics\n$ kubectl top node \n```\n\n\n\n![](./check.png)\n\n","source":"_posts/部署MetricServer.md","raw":"---\ntitle: 部署MetricServer\ndate: 2021-08-21 16:32:48\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- HPA\ndescription: 在k8s中部署metric-server服务\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdeveloper.ibm.com%2Fdwblog%2Fwp-content%2Fuploads%2Fsites%2F73%2Fdwblog-kubernetes-850x425.png&refer=http%3A%2F%2Fdeveloper.ibm.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1631112416&t=ec53fac9e0c6d318c97d8b1d27623a0a\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中部署一套MetricServer服务的方法\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# metrics-server介绍\n\n`metrics-server`是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。\n\n<br>\n\n\n\n# 前提条件\n\n`kube-apiserver`需要设置如下的参数：\n\n```yaml\n--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem \n--requestheader-username-headers=X-Remote-User \n--requestheader-group-headers=X-Remote-Group \n--requestheader-extra-headers-prefix=X-Remote-Extra- \n--requestheader-allowed-names=\"\"\n--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem \n--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem \n--enable-aggregator-routing=true\n--runtime-config=api/all\n```\n\n-  `--requestheader-XXX`、`--proxy-client-XXX `是 `kube-apiserver `的 `aggregator layer `相关的配置参数，metrics-server & HPA 需要使用；\n-  `--requestheader-client-ca-file`：用于签名 `--proxy-client-cert-file` 和 `--proxy-client-key-file` 指定的证书；在启用了` metric aggregator `时使用；\n-  如果 `--requestheader-allowed-names` 不为空，则`--proxy-client-cert-file` 证书的 CN 必须位于 `allowed-names `中，默认为 aggregator，这里让其匹配所有名称；\n\n\n\n> 如果是kubeadm部署，默认已经添加了\n\n<br>\n\n\n\n# yaml文件准备\n\n可以从官方获取，地址为：[metrics-server](https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server)，或者使用下面的yaml文件：\n\n{% tabs comments %}\n\n<!-- tab metric-rbac.yaml -->\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n--- \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"extensions\"\n  resources:\n  - deployments\n  verbs:\n  - get\n  - list\n  - update\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n```\n\n<!-- endtab -->\n\n<!-- tab metric-apiservice.yaml -->\n\n```yaml\napiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n  groupPriorityMinimum: 100\n  versionPriority: 100\n```\n\n<!-- endtab -->\n\n<!-- tab metric-server-deployment.yaml -->\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: metrics-server-config\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: EnsureExists\ndata:\n  NannyConfiguration: |-\n    apiVersion: nannyconfig/v1alpha1\n    kind: NannyConfiguration\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: metrics-server-v0.3.6\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n    version: v0.3.6\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n      version: v0.3.6\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n        version: v0.3.6\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'\n    spec:\n      priorityClassName: system-cluster-critical\n      serviceAccountName: metrics-server\n      containers:\n      - name: metrics-server\n        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.6\n        command:\n        - /metrics-server\n        - --metric-resolution=30s\n        - --kubelet-insecure-tls\n        # These are needed for GKE, which doesn't support secure communication yet.\n        # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.\n        #- --kubelet-port=10255\n        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP\n        #- --deprecated-kubelet-completely-insecure=true\n        ports:\n        - containerPort: 443\n          name: https\n          protocol: TCP\n      - name: metrics-server-nanny\n        image: mirrorgooglecontainers/addon-resizer:1.8.4\n        resources:\n          limits:\n            cpu: 100m\n            memory: 300Mi\n          requests:\n            cpu: 5m\n            memory: 50Mi\n        env:\n          - name: MY_POD_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          - name: MY_POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n        volumeMounts:\n        - name: metrics-server-config-volume\n          mountPath: /etc/config\n        command:\n          - /pod_nanny\n          - --config-dir=/etc/config\n          - --cpu=80m\n          - --extra-cpu=0.5m\n          - --memory=80Mi\n          - --extra-memory=8Mi\n          - --threshold=5\n          - --deployment=metrics-server-v0.3.6\n          - --container=metrics-server\n          - --poll-period=300000\n          - --estimator=exponential\n          # Specifies the smallest cluster (defined in number of nodes)\n          # resources will be scaled to.\n          #- --minClusterSize={{ metrics_server_min_cluster_size }}\n      volumes:\n        - name: metrics-server-config-volume\n          configMap:\n            name: metrics-server-config\n      tolerations:\n        - key: \"CriticalAddonsOnly\"\n          operator: \"Exists\"\n```\n\n<!-- endtab -->\n\n<!-- tab metric-server-service.yaml -->\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    addonmanager.kubernetes.io/mode: Reconcile\n    kubernetes.io/cluster-service: \"true\"\n    kubernetes.io/name: \"Metrics-server\"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: https\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n<br>\n\n\n\n# 部署\n\n将上述yaml文件准备好，直接执行下面的命令进行部署：\n\n```bash\n$ kubectl apply -f metric-rbac.yaml\n$ kubectl apply -f metric-apiservice.yaml\n$ kubectl apply -f metric-server-deployment.yaml\n$ kubectl apply -f metric-server-service.yaml\n```\n\n\n\n<br>\n\n\n\n# 检查\n\n部署完成后检查并校验是否能够正常工作：\n\n```bash\n$ kubectl get all -n kube-system | grep metrics\n$ kubectl top node \n```\n\n\n\n![](./check.png)\n\n","slug":"部署MetricServer","published":1,"updated":"2021-08-21T08:38:45.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslj567m0000oiklgjl72ihh","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中部署一套MetricServer服务的方法</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"metrics-server介绍\"><a href=\"#metrics-server介绍\" class=\"headerlink\" title=\"metrics-server介绍\"></a>metrics-server介绍</h1><p><code>metrics-server</code>是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。</p>\n<br>\n\n\n\n<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><p><code>kube-apiserver</code>需要设置如下的参数：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-username-headers=X-Remote-User</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-group-headers=X-Remote-Group</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-extra-headers-prefix=X-Remote-Extra-</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-allowed-names=&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem</span> </span><br><span class=\"line\"><span class=\"string\">--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem</span> </span><br><span class=\"line\"><span class=\"string\">--enable-aggregator-routing=true</span></span><br><span class=\"line\"><span class=\"string\">--runtime-config=api/all</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--requestheader-XXX</code>、<code>--proxy-client-XXX</code>是 <code>kube-apiserver</code>的 <code>aggregator layer</code>相关的配置参数，metrics-server &amp; HPA 需要使用；</li>\n<li><code>--requestheader-client-ca-file</code>：用于签名 <code>--proxy-client-cert-file</code> 和 <code>--proxy-client-key-file</code> 指定的证书；在启用了<code>metric aggregator</code>时使用；</li>\n<li>如果 <code>--requestheader-allowed-names</code> 不为空，则<code>--proxy-client-cert-file</code> 证书的 CN 必须位于 <code>allowed-names</code>中，默认为 aggregator，这里让其匹配所有名称；</li>\n</ul>\n<blockquote>\n<p>如果是kubeadm部署，默认已经添加了</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"yaml文件准备\"><a href=\"#yaml文件准备\" class=\"headerlink\" title=\"yaml文件准备\"></a>yaml文件准备</h1><p>可以从官方获取，地址为：<a href=\"https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server\">metrics-server</a>，或者使用下面的yaml文件：</p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">metric-rbac.yaml</button></li><li class=\"tab\"><button data-href=\"#comments-2\">metric-apiservice.yaml</button></li><li class=\"tab\"><button data-href=\"#comments-3\">metric-server-deployment.yaml</button></li><li class=\"tab\"><button data-href=\"#comments-4\">metric-server-service.yaml</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server:system:auth-delegator</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:auth-delegator</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-auth-reader</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">extension-apiserver-authentication-reader</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/stats</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;extensions&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deployments</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiregistration.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">APIService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">v1beta1.metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1beta1</span></span><br><span class=\"line\">  <span class=\"attr\">insecureSkipTLSVerify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">groupPriorityMinimum:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"attr\">versionPriority:</span> <span class=\"number\">100</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">EnsureExists</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">NannyConfiguration:</span> <span class=\"string\">|-</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">nannyconfig/v1alpha1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">NannyConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">seccomp.security.alpha.kubernetes.io/pod:</span> <span class=\"string\">&#x27;docker/default&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">priorityClassName:</span> <span class=\"string\">system-cluster-critical</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/metrics-server-amd64:v0.3.6</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/metrics-server</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--metric-resolution=30s</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-insecure-tls</span></span><br><span class=\"line\">        <span class=\"comment\"># These are needed for GKE, which doesn&#x27;t support secure communication yet.</span></span><br><span class=\"line\">        <span class=\"comment\"># Remove these lines for non-GKE clusters, and when GKE supports token-based auth.</span></span><br><span class=\"line\">        <span class=\"comment\">#- --kubelet-port=10255</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span></span><br><span class=\"line\">        <span class=\"comment\">#- --deprecated-kubelet-completely-insecure=true</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">https</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-nanny</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/addon-resizer:1.8.4</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">300Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">5m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAMESPACE</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/config</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">/pod_nanny</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--config-dir=/etc/config</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--cpu=80m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-cpu=0.5m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--memory=80Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-memory=8Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--threshold=5</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--deployment=metrics-server-v0.3.6</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--container=metrics-server</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--poll-period=300000</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--estimator=exponential</span></span><br><span class=\"line\">          <span class=\"comment\"># Specifies the smallest cluster (defined in number of nodes)</span></span><br><span class=\"line\">          <span class=\"comment\"># resources will be scaled to.</span></span><br><span class=\"line\">          <span class=\"comment\">#- --minClusterSize=&#123;&#123; metrics_server_min_cluster_size &#125;&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">&quot;CriticalAddonsOnly&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">&quot;Exists&quot;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/name:</span> <span class=\"string\">&quot;Metrics-server&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"string\">https</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>将上述yaml文件准备好，直接执行下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f metric-rbac.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-apiservice.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h1><p>部署完成后检查并校验是否能够正常工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get all -n kube-system | grep metrics</span><br><span class=\"line\">$ kubectl top node </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"./check.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中部署一套MetricServer服务的方法</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"metrics-server介绍\"><a href=\"#metrics-server介绍\" class=\"headerlink\" title=\"metrics-server介绍\"></a>metrics-server介绍</h1><p><code>metrics-server</code>是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。</p>\n<br>\n\n\n\n<h1 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h1><p><code>kube-apiserver</code>需要设置如下的参数：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-username-headers=X-Remote-User</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-group-headers=X-Remote-Group</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-extra-headers-prefix=X-Remote-Extra-</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-allowed-names=&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem</span> </span><br><span class=\"line\"><span class=\"string\">--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem</span> </span><br><span class=\"line\"><span class=\"string\">--enable-aggregator-routing=true</span></span><br><span class=\"line\"><span class=\"string\">--runtime-config=api/all</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--requestheader-XXX</code>、<code>--proxy-client-XXX</code>是 <code>kube-apiserver</code>的 <code>aggregator layer</code>相关的配置参数，metrics-server &amp; HPA 需要使用；</li>\n<li><code>--requestheader-client-ca-file</code>：用于签名 <code>--proxy-client-cert-file</code> 和 <code>--proxy-client-key-file</code> 指定的证书；在启用了<code>metric aggregator</code>时使用；</li>\n<li>如果 <code>--requestheader-allowed-names</code> 不为空，则<code>--proxy-client-cert-file</code> 证书的 CN 必须位于 <code>allowed-names</code>中，默认为 aggregator，这里让其匹配所有名称；</li>\n</ul>\n<blockquote>\n<p>如果是kubeadm部署，默认已经添加了</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"yaml文件准备\"><a href=\"#yaml文件准备\" class=\"headerlink\" title=\"yaml文件准备\"></a>yaml文件准备</h1><p>可以从官方获取，地址为：<a href=\"https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server\">metrics-server</a>，或者使用下面的yaml文件：</p>\n<div class=\"tabs\" id=\"comments\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button data-href=\"#comments-1\">metric-rbac.yaml</button></li><li class=\"tab\"><button data-href=\"#comments-2\">metric-apiservice.yaml</button></li><li class=\"tab\"><button data-href=\"#comments-3\">metric-server-deployment.yaml</button></li><li class=\"tab\"><button data-href=\"#comments-4\">metric-server-service.yaml</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"comments-1\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server:system:auth-delegator</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:auth-delegator</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-auth-reader</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">extension-apiserver-authentication-reader</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">--- </span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/stats</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">&quot;extensions&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deployments</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-2\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiregistration.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">APIService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">v1beta1.metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1beta1</span></span><br><span class=\"line\">  <span class=\"attr\">insecureSkipTLSVerify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">groupPriorityMinimum:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"attr\">versionPriority:</span> <span class=\"number\">100</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-3\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">EnsureExists</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">NannyConfiguration:</span> <span class=\"string\">|-</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">nannyconfig/v1alpha1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">NannyConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">seccomp.security.alpha.kubernetes.io/pod:</span> <span class=\"string\">&#x27;docker/default&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">priorityClassName:</span> <span class=\"string\">system-cluster-critical</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/metrics-server-amd64:v0.3.6</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/metrics-server</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--metric-resolution=30s</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-insecure-tls</span></span><br><span class=\"line\">        <span class=\"comment\"># These are needed for GKE, which doesn&#x27;t support secure communication yet.</span></span><br><span class=\"line\">        <span class=\"comment\"># Remove these lines for non-GKE clusters, and when GKE supports token-based auth.</span></span><br><span class=\"line\">        <span class=\"comment\">#- --kubelet-port=10255</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span></span><br><span class=\"line\">        <span class=\"comment\">#- --deprecated-kubelet-completely-insecure=true</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">https</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-nanny</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/addon-resizer:1.8.4</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">300Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">5m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAMESPACE</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/config</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">/pod_nanny</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--config-dir=/etc/config</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--cpu=80m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-cpu=0.5m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--memory=80Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-memory=8Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--threshold=5</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--deployment=metrics-server-v0.3.6</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--container=metrics-server</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--poll-period=300000</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--estimator=exponential</span></span><br><span class=\"line\">          <span class=\"comment\"># Specifies the smallest cluster (defined in number of nodes)</span></span><br><span class=\"line\">          <span class=\"comment\"># resources will be scaled to.</span></span><br><span class=\"line\">          <span class=\"comment\">#- --minClusterSize=&#123;&#123; metrics_server_min_cluster_size &#125;&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">&quot;CriticalAddonsOnly&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">&quot;Exists&quot;</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"comments-4\"><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/name:</span> <span class=\"string\">&quot;Metrics-server&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"string\">https</span></span><br></pre></td></tr></table></figure><button class=\"tab-to-top\" onclick=\"scrollToDest($(this).parents('.tabs'),65)\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<br>\n\n\n\n<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><p>将上述yaml文件准备好，直接执行下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f metric-rbac.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-apiservice.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h1><p>部署完成后检查并校验是否能够正常工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get all -n kube-system | grep metrics</span><br><span class=\"line\">$ kubectl top node </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"./check.png\" alt=\"\"></p>\n"},{"title":"使用HPA进行服务自动扩缩容","date":"2021-08-21T08:28:52.000Z","description":"使用HPA，基于cpu、内存进行服务自动扩缩容","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdeveloper.ibm.com%2Fdwblog%2Fwp-content%2Fuploads%2Fsites%2F73%2Fdwblog-kubernetes-850x425.png&refer=http%3A%2F%2Fdeveloper.ibm.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1631112416&t=ec53fac9e0c6d318c97d8b1d27623a0a","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中HPA的用法\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# HPA\n\nkubernetes中提供了`kubectl scale`命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象`Horizontal Pod Autoscaling（Pod 水平自动伸缩）`，简称`HPA`。\n\n\n\nHPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。\n\n\n\n可以简单的通过 `kubectl autoscale` 命令来创建一个 HPA 资源对象，`HPA Controller`默认`30s`轮询一次（可通过 `kube-controller-manager` 的`--horizontal-pod-autoscaler-sync-period` 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。\n\n\n\n<br>\n\n\n\n# metric-server\n\nhpa功能需要利用`metric-server`来获取相关指标数据，`metric-server`通过kubernetes的api将指标暴露出来，例如：\n\n```bash\nhttps://<apiserver>/apis/metrics.k8s.io/v1beta1/namespaces/<namespace-name>/pods/<pod-name>\n```\n\n\n\n<img src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n部署`metric-server`可以参考 {% post_link 部署MetricServer %}\n\n\n\n<br>\n\n\n\n# 创建测试服务\n\n使用下面的文件创建一个测试服务：\n\n```yaml\n# demo.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hpa-demo\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      volumes:\n      - name: increase-mem-script\n        configMap:\n          name: increase-mem-config\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: increase-mem-script\n          mountPath: /etc/script\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n        securityContext:\n          privileged: true\n```\n\n\n\n**需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存**\n\n\n\n创建内存压测脚本：\n\n```yaml\n# config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: increase-mem-config\ndata:\n  increase-mem.sh: |\n    #!/bin/bash  \n    mkdir /tmp/memory  \n    mount -t tmpfs -o size=40M tmpfs /tmp/memory  \n    dd if=/dev/zero of=/tmp/memory/block  \n    sleep 60 \n    rm /tmp/memory/block  \n    umount /tmp/memory  \n    rmdir /tmp/memory\n```\n\n\n\n\n\n直接运行下面的命令创建：\n\n```bash\n$ kubectl apply -f config.yaml\n$ kubectl apply -f demo.yaml\n```\n\n\n\n确保服务都正常启动：\n\n```bash\n$ kubectl get pod \n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 基于CPU的HPA\n\n使用`kubectl autoscale`命令来创建一个hpa对象：\n\n```bash\n$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5\n```\n\n这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。\n\n\n\n查看hpa对象创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n这里我们使用busybox创建一个测试的pod，向nginx服务发送请求：\n\n```bash\n$ kubectl run -ti --image busybox test-hpa --restart=Never --rm /bin/sh\n/# while true; do wget -q -O- http://172.21.133.86; done\n```\n\n> 172.21.133.86 为hpa-demo服务pod的IP\n\n\n\n稍等一下即可看到hpa开始工作：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s\n\n$ kubectl get pod --watch \nNAME                        READY   STATUS              RESTARTS   AGE\nhpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s\nhpa-demo-6c6489f57-w792g   1/1     Running             0          13s\nhpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s\nhpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s\nhpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s\n```\n\n\n\n此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。\n\n\n\n此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m\n\n$ kubectl get deployment hpa-demo\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nhpa-demo   1/1     1            1           24m\n```\n\n\n\n> 可以通过设置 `kube-controller-manager` 组件的`--horizontal-pod-autoscaler-downscale-stabilization` 参数来设置一个持续时间，用于指定在当前操作完成后，`HPA` 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。\n\n\n\n<br>\n\n\n\n# 基于内存的HPA\n\n创建基于内存的hpa对象：\n\n```yaml\n# hpa-mem.yaml\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: nginx-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: hpa-demo\n  minReplicas: 1\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageUtilization: 60\n```\n\n> 命令行好像只能创建基于cpu的，内存的需要通过yaml创建。\n\n\n\n这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：\n\n```bash\n$ kubectl apply -f hpa-mem.yaml\n```\n\n\n\n确保资源创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n然后进入创建的容器，执行内存压测脚本，增加内存使用率：\n\n```bash\n$ kubectl exec -it hpa-demo-66944b79bf-tqrn9 /bin/bash\n\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# ls /etc/script/\nincrease-mem.sh\n\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# source /etc/script/increase-mem.sh \ndd: writing to '/tmp/memory/block': No space left on device\n81921+0 records in\n81920+0 records out\n41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s\n```\n\n\n\n此时可以看到，内存hpa已经超过阈值，发生了扩容：\n\n```bash\n$ kubectl get hpa\nNAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nnginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s\n\n$ kubectl get pods \nNAME                            READY   STATUS    RESTARTS   AGE\nhpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s\nhpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s\n```\n\n\n\n同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。\n\n<br>\n\n\n\n\n\n","source":"_posts/使用HPA进行服务自动扩缩容.md","raw":"---\ntitle: 使用HPA进行服务自动扩缩容\ndate: 2021-08-21 16:28:52\ntags:\n- Kubernetes\ncategories:\n- Kubernetes\n- HPA\ndescription: 使用HPA，基于cpu、内存进行服务自动扩缩容\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdeveloper.ibm.com%2Fdwblog%2Fwp-content%2Fuploads%2Fsites%2F73%2Fdwblog-kubernetes-850x425.png&refer=http%3A%2F%2Fdeveloper.ibm.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1631112416&t=ec53fac9e0c6d318c97d8b1d27623a0a\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍kubernetes中HPA的用法\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# HPA\n\nkubernetes中提供了`kubectl scale`命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象`Horizontal Pod Autoscaling（Pod 水平自动伸缩）`，简称`HPA`。\n\n\n\nHPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。\n\n\n\n可以简单的通过 `kubectl autoscale` 命令来创建一个 HPA 资源对象，`HPA Controller`默认`30s`轮询一次（可通过 `kube-controller-manager` 的`--horizontal-pod-autoscaler-sync-period` 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。\n\n\n\n<br>\n\n\n\n# metric-server\n\nhpa功能需要利用`metric-server`来获取相关指标数据，`metric-server`通过kubernetes的api将指标暴露出来，例如：\n\n```bash\nhttps://<apiserver>/apis/metrics.k8s.io/v1beta1/namespaces/<namespace-name>/pods/<pod-name>\n```\n\n\n\n<img src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n部署`metric-server`可以参考 {% post_link 部署MetricServer %}\n\n\n\n<br>\n\n\n\n# 创建测试服务\n\n使用下面的文件创建一个测试服务：\n\n```yaml\n# demo.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hpa-demo\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      volumes:\n      - name: increase-mem-script\n        configMap:\n          name: increase-mem-config\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: increase-mem-script\n          mountPath: /etc/script\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n        securityContext:\n          privileged: true\n```\n\n\n\n**需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存**\n\n\n\n创建内存压测脚本：\n\n```yaml\n# config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: increase-mem-config\ndata:\n  increase-mem.sh: |\n    #!/bin/bash  \n    mkdir /tmp/memory  \n    mount -t tmpfs -o size=40M tmpfs /tmp/memory  \n    dd if=/dev/zero of=/tmp/memory/block  \n    sleep 60 \n    rm /tmp/memory/block  \n    umount /tmp/memory  \n    rmdir /tmp/memory\n```\n\n\n\n\n\n直接运行下面的命令创建：\n\n```bash\n$ kubectl apply -f config.yaml\n$ kubectl apply -f demo.yaml\n```\n\n\n\n确保服务都正常启动：\n\n```bash\n$ kubectl get pod \n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 基于CPU的HPA\n\n使用`kubectl autoscale`命令来创建一个hpa对象：\n\n```bash\n$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5\n```\n\n这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。\n\n\n\n查看hpa对象创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n这里我们使用busybox创建一个测试的pod，向nginx服务发送请求：\n\n```bash\n$ kubectl run -ti --image busybox test-hpa --restart=Never --rm /bin/sh\n/# while true; do wget -q -O- http://172.21.133.86; done\n```\n\n> 172.21.133.86 为hpa-demo服务pod的IP\n\n\n\n稍等一下即可看到hpa开始工作：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s\n\n$ kubectl get pod --watch \nNAME                        READY   STATUS              RESTARTS   AGE\nhpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s\nhpa-demo-6c6489f57-w792g   1/1     Running             0          13s\nhpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s\nhpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s\nhpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s\n```\n\n\n\n此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。\n\n\n\n此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m\n\n$ kubectl get deployment hpa-demo\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nhpa-demo   1/1     1            1           24m\n```\n\n\n\n> 可以通过设置 `kube-controller-manager` 组件的`--horizontal-pod-autoscaler-downscale-stabilization` 参数来设置一个持续时间，用于指定在当前操作完成后，`HPA` 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。\n\n\n\n<br>\n\n\n\n# 基于内存的HPA\n\n创建基于内存的hpa对象：\n\n```yaml\n# hpa-mem.yaml\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: nginx-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: hpa-demo\n  minReplicas: 1\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageUtilization: 60\n```\n\n> 命令行好像只能创建基于cpu的，内存的需要通过yaml创建。\n\n\n\n这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：\n\n```bash\n$ kubectl apply -f hpa-mem.yaml\n```\n\n\n\n确保资源创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n然后进入创建的容器，执行内存压测脚本，增加内存使用率：\n\n```bash\n$ kubectl exec -it hpa-demo-66944b79bf-tqrn9 /bin/bash\n\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# ls /etc/script/\nincrease-mem.sh\n\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# source /etc/script/increase-mem.sh \ndd: writing to '/tmp/memory/block': No space left on device\n81921+0 records in\n81920+0 records out\n41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s\n```\n\n\n\n此时可以看到，内存hpa已经超过阈值，发生了扩容：\n\n```bash\n$ kubectl get hpa\nNAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nnginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s\n\n$ kubectl get pods \nNAME                            READY   STATUS    RESTARTS   AGE\nhpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s\nhpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s\n```\n\n\n\n同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。\n\n<br>\n\n\n\n\n\n","slug":"使用HPA进行服务自动扩缩容","published":1,"updated":"2021-08-21T08:46:05.872Z","_id":"ckslj56800005oiklgm1gcwuf","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中HPA的用法</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"HPA\"><a href=\"#HPA\" class=\"headerlink\" title=\"HPA\"></a>HPA</h1><p>kubernetes中提供了<code>kubectl scale</code>命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象<code>Horizontal Pod Autoscaling（Pod 水平自动伸缩）</code>，简称<code>HPA</code>。</p>\n<p>HPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。</p>\n<p>可以简单的通过 <code>kubectl autoscale</code> 命令来创建一个 HPA 资源对象，<code>HPA Controller</code>默认<code>30s</code>轮询一次（可通过 <code>kube-controller-manager</code> 的<code>--horizontal-pod-autoscaler-sync-period</code> 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。</p>\n<br>\n\n\n\n<h1 id=\"metric-server\"><a href=\"#metric-server\" class=\"headerlink\" title=\"metric-server\"></a>metric-server</h1><p>hpa功能需要利用<code>metric-server</code>来获取相关指标数据，<code>metric-server</code>通过kubernetes的api将指标暴露出来，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://&lt;apiserver&gt;/apis/metrics.k8s.io/v1beta1/namespaces/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n<p>部署<code>metric-server</code>可以参考 <a href=\"/2021/08/21/%E9%83%A8%E7%BD%B2MetricServer/\" title=\"部署MetricServer\">部署MetricServer</a></p>\n<br>\n\n\n\n<h1 id=\"创建测试服务\"><a href=\"#创建测试服务\" class=\"headerlink\" title=\"创建测试服务\"></a>创建测试服务</h1><p>使用下面的文件创建一个测试服务：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># demo.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/script</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存</strong></p>\n<p>创建内存压测脚本：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">increase-mem.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash  </span></span><br><span class=\"line\">    <span class=\"string\">mkdir</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">mount</span> <span class=\"string\">-t</span> <span class=\"string\">tmpfs</span> <span class=\"string\">-o</span> <span class=\"string\">size=40M</span> <span class=\"string\">tmpfs</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">dd</span> <span class=\"string\">if=/dev/zero</span> <span class=\"string\">of=/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">sleep</span> <span class=\"number\">60</span> </span><br><span class=\"line\">    <span class=\"string\">rm</span> <span class=\"string\">/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">umount</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">rmdir</span> <span class=\"string\">/tmp/memory</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>直接运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f config.yaml</span><br><span class=\"line\">$ kubectl apply -f demo.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保服务都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod </span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"基于CPU的HPA\"><a href=\"#基于CPU的HPA\" class=\"headerlink\" title=\"基于CPU的HPA\"></a>基于CPU的HPA</h1><p>使用<code>kubectl autoscale</code>命令来创建一个hpa对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5</span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。</p>\n<p>查看hpa对象创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n<p>这里我们使用busybox创建一个测试的pod，向nginx服务发送请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl run -ti --image busybox test-hpa --restart=Never --rm /bin/sh</span><br><span class=\"line\">/<span class=\"comment\"># while true; do wget -q -O- http://172.21.133.86; done</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>172.21.133.86 为hpa-demo服务pod的IP</p>\n</blockquote>\n<p>稍等一下即可看到hpa开始工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod --watch </span><br><span class=\"line\">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s</span><br><span class=\"line\">hpa-demo-6c6489f57-w792g   1/1     Running             0          13s</span><br><span class=\"line\">hpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s</span><br><span class=\"line\">hpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s</span><br><span class=\"line\">hpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。</p>\n<p>此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get deployment hpa-demo</span><br><span class=\"line\">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">hpa-demo   1/1     1            1           24m</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>可以通过设置 <code>kube-controller-manager</code> 组件的<code>--horizontal-pod-autoscaler-downscale-stabilization</code> 参数来设置一个持续时间，用于指定在当前操作完成后，<code>HPA</code> 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"基于内存的HPA\"><a href=\"#基于内存的HPA\" class=\"headerlink\" title=\"基于内存的HPA\"></a>基于内存的HPA</h1><p>创建基于内存的hpa对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hpa-mem.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-hpa</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">    <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令行好像只能创建基于cpu的，内存的需要通过yaml创建。</p>\n</blockquote>\n<p>这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f hpa-mem.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保资源创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n<p>然后进入创建的容器，执行内存压测脚本，增加内存使用率：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -it hpa-demo-66944b79bf-tqrn9 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># ls /etc/script/</span></span><br><span class=\"line\">increase-mem.sh</span><br><span class=\"line\"></span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># source /etc/script/increase-mem.sh </span></span><br><span class=\"line\">dd: writing to <span class=\"string\">&#x27;/tmp/memory/block&#x27;</span>: No space left on device</span><br><span class=\"line\">81921+0 records <span class=\"keyword\">in</span></span><br><span class=\"line\">81920+0 records out</span><br><span class=\"line\">41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时可以看到，内存hpa已经超过阈值，发生了扩容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">nginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods </span><br><span class=\"line\">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s</span><br><span class=\"line\">hpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。</p>\n<br>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍kubernetes中HPA的用法</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"HPA\"><a href=\"#HPA\" class=\"headerlink\" title=\"HPA\"></a>HPA</h1><p>kubernetes中提供了<code>kubectl scale</code>命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象<code>Horizontal Pod Autoscaling（Pod 水平自动伸缩）</code>，简称<code>HPA</code>。</p>\n<p>HPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。</p>\n<p>可以简单的通过 <code>kubectl autoscale</code> 命令来创建一个 HPA 资源对象，<code>HPA Controller</code>默认<code>30s</code>轮询一次（可通过 <code>kube-controller-manager</code> 的<code>--horizontal-pod-autoscaler-sync-period</code> 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。</p>\n<br>\n\n\n\n<h1 id=\"metric-server\"><a href=\"#metric-server\" class=\"headerlink\" title=\"metric-server\"></a>metric-server</h1><p>hpa功能需要利用<code>metric-server</code>来获取相关指标数据，<code>metric-server</code>通过kubernetes的api将指标暴露出来，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://&lt;apiserver&gt;/apis/metrics.k8s.io/v1beta1/namespaces/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n<p>部署<code>metric-server</code>可以参考 <a href=\"/2021/08/21/%E9%83%A8%E7%BD%B2MetricServer/\" title=\"部署MetricServer\">部署MetricServer</a></p>\n<br>\n\n\n\n<h1 id=\"创建测试服务\"><a href=\"#创建测试服务\" class=\"headerlink\" title=\"创建测试服务\"></a>创建测试服务</h1><p>使用下面的文件创建一个测试服务：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># demo.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/script</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存</strong></p>\n<p>创建内存压测脚本：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">increase-mem.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash  </span></span><br><span class=\"line\">    <span class=\"string\">mkdir</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">mount</span> <span class=\"string\">-t</span> <span class=\"string\">tmpfs</span> <span class=\"string\">-o</span> <span class=\"string\">size=40M</span> <span class=\"string\">tmpfs</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">dd</span> <span class=\"string\">if=/dev/zero</span> <span class=\"string\">of=/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">sleep</span> <span class=\"number\">60</span> </span><br><span class=\"line\">    <span class=\"string\">rm</span> <span class=\"string\">/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">umount</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">rmdir</span> <span class=\"string\">/tmp/memory</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>直接运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f config.yaml</span><br><span class=\"line\">$ kubectl apply -f demo.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保服务都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod </span><br></pre></td></tr></table></figure>\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"基于CPU的HPA\"><a href=\"#基于CPU的HPA\" class=\"headerlink\" title=\"基于CPU的HPA\"></a>基于CPU的HPA</h1><p>使用<code>kubectl autoscale</code>命令来创建一个hpa对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5</span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。</p>\n<p>查看hpa对象创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n<p>这里我们使用busybox创建一个测试的pod，向nginx服务发送请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl run -ti --image busybox test-hpa --restart=Never --rm /bin/sh</span><br><span class=\"line\">/<span class=\"comment\"># while true; do wget -q -O- http://172.21.133.86; done</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>172.21.133.86 为hpa-demo服务pod的IP</p>\n</blockquote>\n<p>稍等一下即可看到hpa开始工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod --watch </span><br><span class=\"line\">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s</span><br><span class=\"line\">hpa-demo-6c6489f57-w792g   1/1     Running             0          13s</span><br><span class=\"line\">hpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s</span><br><span class=\"line\">hpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s</span><br><span class=\"line\">hpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。</p>\n<p>此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get deployment hpa-demo</span><br><span class=\"line\">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">hpa-demo   1/1     1            1           24m</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>可以通过设置 <code>kube-controller-manager</code> 组件的<code>--horizontal-pod-autoscaler-downscale-stabilization</code> 参数来设置一个持续时间，用于指定在当前操作完成后，<code>HPA</code> 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"基于内存的HPA\"><a href=\"#基于内存的HPA\" class=\"headerlink\" title=\"基于内存的HPA\"></a>基于内存的HPA</h1><p>创建基于内存的hpa对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hpa-mem.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-hpa</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">    <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令行好像只能创建基于cpu的，内存的需要通过yaml创建。</p>\n</blockquote>\n<p>这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f hpa-mem.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保资源创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n<p>然后进入创建的容器，执行内存压测脚本，增加内存使用率：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -it hpa-demo-66944b79bf-tqrn9 /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># ls /etc/script/</span></span><br><span class=\"line\">increase-mem.sh</span><br><span class=\"line\"></span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># source /etc/script/increase-mem.sh </span></span><br><span class=\"line\">dd: writing to <span class=\"string\">&#x27;/tmp/memory/block&#x27;</span>: No space left on device</span><br><span class=\"line\">81921+0 records <span class=\"keyword\">in</span></span><br><span class=\"line\">81920+0 records out</span><br><span class=\"line\">41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时可以看到，内存hpa已经超过阈值，发生了扩容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">nginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods </span><br><span class=\"line\">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s</span><br><span class=\"line\">hpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。</p>\n<br>\n\n\n\n\n\n"},{"title":"部署RabbitMQ","date":"2021-08-21T09:21:20.000Z","description":"本文介绍在k8s中使用有状态服务部署RabbitMQ 3.6.5","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1271185307,1858861969&fm=26&gp=0.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了署一个RabbitMQ 3.8.3 版本服务\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 下载\n\n在官网 [rabbitmq官网](https://www.rabbit.com) 找到合适的版本下载，这里使用的是`3.6.5`：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n RabbitMQ依赖于Erlang，可以在 [Erlang版本对照](https://www.rabbitmq.com/which-erlang.html) 找到对应的Erlang版本，这里我应该下载`18.3`版本：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm\n```\n\n\n\n<br>\n\n\n\n# 安装\n\n安装依赖：\n\n```bash\n$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat\n```\n\n\n\n安装rabbitmq：\n\n```bash\n# 先安装erlang\n$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm\n\n# 再安装rabbitmq\n$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n<br>\n\n\n\n# 编辑配置文件\n\n安装完成后默认配置文件在：`/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app`，修改这个文件来设置密码，修改配置等：\n\n```bash\n# 主要关注env模块的配置\n\n# 监听端口，默认5672\n{tcp_listeners, [5672]}\n\n# 只允许本地访问的用户\nloopback_users, [guest]}\n```\n\n\n\n<br>\n\n\n\n# 启动服务\n\n```bash\n# 启动服务\n$ rabbitmq-server start &\n\n# 后台启动\n$ rabbitmq-server -detached\n\n# 停止服务\n$ rabbitmqctl app_stop\n```\n\n\n\n会启动如下的几个端口：\n\n- 5672：java程序进行连接的端口；\n- 15672：控制台的端口（后面会安装）；\n- 25672：集群通信端口；\n\n\n\n<br>\n\n\n\n# 启动管理控制台\n\n```bash\n$ rabbitmq-plugins enable rabbitmq_management\n```\n\n\n\n插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用`guest/guest`登录：\n\n![](index.png)\n\n\n\n<br>\n\n\n\n# 常用命令\n\n```bash\n# 查看队列\n$ rabbitmqctl list_queues\n\n# 查看虚拟主机\n$ rabbitmqctl list_vhosts\n\n# 查看节点状态\n$ rabbitmqctl status\n\n# 新建用户\n$ rabbitmqctl add_user <用户名> <密码>\n\n# 设置用户为管理员\n$ rabbitmqctl set_user_tags <用户名> administrator\n\n# 赋予用户所有权限\n$ rabbitmqctl set_permissions -p / <用户名> ‘。*’ ‘。*’ ‘。*’\n```\n\n","source":"_posts/部署RabbitMQ.md","raw":"---\ntitle: 部署RabbitMQ\ndate: 2021-08-21 17:21:20\ntags:\n- RabbitMQ\ncategories:\n- 消息中间件\n- RabbitMQ\n- 部署\ndescription: 本文介绍在k8s中使用有状态服务部署RabbitMQ 3.6.5\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1271185307,1858861969&fm=26&gp=0.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了署一个RabbitMQ 3.8.3 版本服务\n\n更新于 2021-08-21\n\n{% endnote %}\n\n<br>\n\n\n\n# 下载\n\n在官网 [rabbitmq官网](https://www.rabbit.com) 找到合适的版本下载，这里使用的是`3.6.5`：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n RabbitMQ依赖于Erlang，可以在 [Erlang版本对照](https://www.rabbitmq.com/which-erlang.html) 找到对应的Erlang版本，这里我应该下载`18.3`版本：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm\n```\n\n\n\n<br>\n\n\n\n# 安装\n\n安装依赖：\n\n```bash\n$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat\n```\n\n\n\n安装rabbitmq：\n\n```bash\n# 先安装erlang\n$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm\n\n# 再安装rabbitmq\n$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n<br>\n\n\n\n# 编辑配置文件\n\n安装完成后默认配置文件在：`/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app`，修改这个文件来设置密码，修改配置等：\n\n```bash\n# 主要关注env模块的配置\n\n# 监听端口，默认5672\n{tcp_listeners, [5672]}\n\n# 只允许本地访问的用户\nloopback_users, [guest]}\n```\n\n\n\n<br>\n\n\n\n# 启动服务\n\n```bash\n# 启动服务\n$ rabbitmq-server start &\n\n# 后台启动\n$ rabbitmq-server -detached\n\n# 停止服务\n$ rabbitmqctl app_stop\n```\n\n\n\n会启动如下的几个端口：\n\n- 5672：java程序进行连接的端口；\n- 15672：控制台的端口（后面会安装）；\n- 25672：集群通信端口；\n\n\n\n<br>\n\n\n\n# 启动管理控制台\n\n```bash\n$ rabbitmq-plugins enable rabbitmq_management\n```\n\n\n\n插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用`guest/guest`登录：\n\n![](index.png)\n\n\n\n<br>\n\n\n\n# 常用命令\n\n```bash\n# 查看队列\n$ rabbitmqctl list_queues\n\n# 查看虚拟主机\n$ rabbitmqctl list_vhosts\n\n# 查看节点状态\n$ rabbitmqctl status\n\n# 新建用户\n$ rabbitmqctl add_user <用户名> <密码>\n\n# 设置用户为管理员\n$ rabbitmqctl set_user_tags <用户名> administrator\n\n# 赋予用户所有权限\n$ rabbitmqctl set_permissions -p / <用户名> ‘。*’ ‘。*’ ‘。*’\n```\n\n","slug":"部署RabbitMQ","published":1,"updated":"2021-08-21T09:24:20.432Z","_id":"ckslkr270000040kl6la810to","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了署一个RabbitMQ 3.8.3 版本服务</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>在官网 <a href=\"https://www.rabbit.com\">rabbitmq官网</a> 找到合适的版本下载，这里使用的是<code>3.6.5</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<p> RabbitMQ依赖于Erlang，可以在 <a href=\"https://www.rabbitmq.com/which-erlang.html\">Erlang版本对照</a> 找到对应的Erlang版本，这里我应该下载<code>18.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装rabbitmq：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先安装erlang</span></span><br><span class=\"line\">$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再安装rabbitmq</span></span><br><span class=\"line\">$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h1><p>安装完成后默认配置文件在：<code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app</code>，修改这个文件来设置密码，修改配置等：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要关注env模块的配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听端口，默认5672</span></span><br><span class=\"line\">&#123;tcp_listeners, [5672]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只允许本地访问的用户</span></span><br><span class=\"line\">loopback_users, [guest]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">$ rabbitmq-server start &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动</span></span><br><span class=\"line\">$ rabbitmq-server -detached</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">$ rabbitmqctl app_stop</span><br></pre></td></tr></table></figure>\n\n\n\n<p>会启动如下的几个端口：</p>\n<ul>\n<li>5672：java程序进行连接的端口；</li>\n<li>15672：控制台的端口（后面会安装）；</li>\n<li>25672：集群通信端口；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"启动管理控制台\"><a href=\"#启动管理控制台\" class=\"headerlink\" title=\"启动管理控制台\"></a>启动管理控制台</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n\n\n<p>插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用<code>guest/guest</code>登录：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"index.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看队列</span></span><br><span class=\"line\">$ rabbitmqctl list_queues</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看虚拟主机</span></span><br><span class=\"line\">$ rabbitmqctl list_vhosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点状态</span></span><br><span class=\"line\">$ rabbitmqctl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建用户</span></span><br><span class=\"line\">$ rabbitmqctl add_user &lt;用户名&gt; &lt;密码&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置用户为管理员</span></span><br><span class=\"line\">$ rabbitmqctl set_user_tags &lt;用户名&gt; administrator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋予用户所有权限</span></span><br><span class=\"line\">$ rabbitmqctl set_permissions -p / &lt;用户名&gt; ‘。*’ ‘。*’ ‘。*’</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了署一个RabbitMQ 3.8.3 版本服务</p><p>更新于 2021-08-21</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>在官网 <a href=\"https://www.rabbit.com\">rabbitmq官网</a> 找到合适的版本下载，这里使用的是<code>3.6.5</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<p> RabbitMQ依赖于Erlang，可以在 <a href=\"https://www.rabbitmq.com/which-erlang.html\">Erlang版本对照</a> 找到对应的Erlang版本，这里我应该下载<code>18.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装rabbitmq：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先安装erlang</span></span><br><span class=\"line\">$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再安装rabbitmq</span></span><br><span class=\"line\">$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h1><p>安装完成后默认配置文件在：<code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app</code>，修改这个文件来设置密码，修改配置等：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要关注env模块的配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听端口，默认5672</span></span><br><span class=\"line\">&#123;tcp_listeners, [5672]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只允许本地访问的用户</span></span><br><span class=\"line\">loopback_users, [guest]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">$ rabbitmq-server start &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动</span></span><br><span class=\"line\">$ rabbitmq-server -detached</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">$ rabbitmqctl app_stop</span><br></pre></td></tr></table></figure>\n\n\n\n<p>会启动如下的几个端口：</p>\n<ul>\n<li>5672：java程序进行连接的端口；</li>\n<li>15672：控制台的端口（后面会安装）；</li>\n<li>25672：集群通信端口；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"启动管理控制台\"><a href=\"#启动管理控制台\" class=\"headerlink\" title=\"启动管理控制台\"></a>启动管理控制台</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n\n\n<p>插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用<code>guest/guest</code>登录：</p>\n<p><img src=\"index.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看队列</span></span><br><span class=\"line\">$ rabbitmqctl list_queues</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看虚拟主机</span></span><br><span class=\"line\">$ rabbitmqctl list_vhosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点状态</span></span><br><span class=\"line\">$ rabbitmqctl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建用户</span></span><br><span class=\"line\">$ rabbitmqctl add_user &lt;用户名&gt; &lt;密码&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置用户为管理员</span></span><br><span class=\"line\">$ rabbitmqctl set_user_tags &lt;用户名&gt; administrator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋予用户所有权限</span></span><br><span class=\"line\">$ rabbitmqctl set_permissions -p / &lt;用户名&gt; ‘。*’ ‘。*’ ‘。*’</span><br></pre></td></tr></table></figure>\n\n"},{"title":"监控网卡流量","date":"2021-11-14T10:05:40.000Z","description":"shell脚本监控指定网卡的流量","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fnimg.ws.126.net%2F%3Furl%3Dhttp%3A%2F%2Fdingyue.ws.126.net%2F2021%2F0511%2Fd3ca3d22p00qsy41e0059d000p000anp.png%26thumbnail%3D650x2147483647%26quality%3D80%26type%3Djpg&refer=http%3A%2F%2Fnimg.ws.126.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639476426&t=cae1a80121b75c70877292effd13349f","_content":"\n\n\n## 监控网卡流量\n\n```shell\n# network.sh\n# 监控实时网卡流量\n# $1 接收所传第一个参数 即要监控的网卡\nNIC=$1\nwhile true;do\n        OLD_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        OLD_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        sleep 1\n        NEW_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        NEW_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        clear\n        IN=$(printf \"%.1f%s\" \"$(($NEW_IN-$OLD_IN))\" \"B/s\")\n        OUT=$(printf \"%.1f%s\" \"$(($NEW_OUT-$OLD_OUT))\" \"B/s\")\n        echo \"       traffic in  `date +%k:%M:%S`  traffic out \"\n        echo \"$NIC   $IN              $OUT\"\n\ndone\n```\n\n\n\n使用方法：\n\n```bash\n$ sh network.sh eth0\n```\n\n","source":"_posts/监控网卡流量.md","raw":"---\ntitle: 监控网卡流量\ndate: 2021-11-14 18:05:40\ntags:\n- shell脚本\ncategories:\n- 编程\n- 实用脚本\ndescription: shell脚本监控指定网卡的流量\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fnimg.ws.126.net%2F%3Furl%3Dhttp%3A%2F%2Fdingyue.ws.126.net%2F2021%2F0511%2Fd3ca3d22p00qsy41e0059d000p000anp.png%26thumbnail%3D650x2147483647%26quality%3D80%26type%3Djpg&refer=http%3A%2F%2Fnimg.ws.126.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639476426&t=cae1a80121b75c70877292effd13349f\n---\n\n\n\n## 监控网卡流量\n\n```shell\n# network.sh\n# 监控实时网卡流量\n# $1 接收所传第一个参数 即要监控的网卡\nNIC=$1\nwhile true;do\n        OLD_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        OLD_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        sleep 1\n        NEW_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        NEW_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        clear\n        IN=$(printf \"%.1f%s\" \"$(($NEW_IN-$OLD_IN))\" \"B/s\")\n        OUT=$(printf \"%.1f%s\" \"$(($NEW_OUT-$OLD_OUT))\" \"B/s\")\n        echo \"       traffic in  `date +%k:%M:%S`  traffic out \"\n        echo \"$NIC   $IN              $OUT\"\n\ndone\n```\n\n\n\n使用方法：\n\n```bash\n$ sh network.sh eth0\n```\n\n","slug":"监控网卡流量","published":1,"updated":"2021-11-14T10:08:46.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvz2sg8r0000dykl2e361hhl","content":"<h2 id=\"监控网卡流量\"><a href=\"#监控网卡流量\" class=\"headerlink\" title=\"监控网卡流量\"></a>监控网卡流量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> network.sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 监控实时网卡流量</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"variable\">$1</span> 接收所传第一个参数 即要监控的网卡</span></span><br><span class=\"line\">NIC=$1</span><br><span class=\"line\">while true;do</span><br><span class=\"line\">        OLD_IN=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $2&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        OLD_OUT=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $10&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        NEW_IN=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $2&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        NEW_OUT=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $10&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        clear</span><br><span class=\"line\">        IN=$(printf &quot;%.1f%s&quot; &quot;$(($NEW_IN-$OLD_IN))&quot; &quot;B/s&quot;)</span><br><span class=\"line\">        OUT=$(printf &quot;%.1f%s&quot; &quot;$(($NEW_OUT-$OLD_OUT))&quot; &quot;B/s&quot;)</span><br><span class=\"line\">        echo &quot;       traffic in  `date +%k:%M:%S`  traffic out &quot;</span><br><span class=\"line\">        echo &quot;$NIC   $IN              $OUT&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh network.sh eth0</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"监控网卡流量\"><a href=\"#监控网卡流量\" class=\"headerlink\" title=\"监控网卡流量\"></a>监控网卡流量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> network.sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 监控实时网卡流量</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"variable\">$1</span> 接收所传第一个参数 即要监控的网卡</span></span><br><span class=\"line\">NIC=$1</span><br><span class=\"line\">while true;do</span><br><span class=\"line\">        OLD_IN=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $2&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        OLD_OUT=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $10&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        NEW_IN=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $2&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        NEW_OUT=`awk &#x27;$0~&quot;&#x27;$NIC&#x27;&quot;&#123;print $10&#125;&#x27; /proc/net/dev`</span><br><span class=\"line\">        clear</span><br><span class=\"line\">        IN=$(printf &quot;%.1f%s&quot; &quot;$(($NEW_IN-$OLD_IN))&quot; &quot;B/s&quot;)</span><br><span class=\"line\">        OUT=$(printf &quot;%.1f%s&quot; &quot;$(($NEW_OUT-$OLD_OUT))&quot; &quot;B/s&quot;)</span><br><span class=\"line\">        echo &quot;       traffic in  `date +%k:%M:%S`  traffic out &quot;</span><br><span class=\"line\">        echo &quot;$NIC   $IN              $OUT&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh network.sh eth0</span><br></pre></td></tr></table></figure>\n\n"},{"title":"python文件操作及内存数据读写","date":"2021-11-14T10:14:01.000Z","description":"最常用的python操作文件的方法，以及向内存中读写数据","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-931b10f17b1ae77a38b46a5ef84034e7_1440w.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639476922&t=1628d6ddc3c037739c2b04c3d151b1a7","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n介绍python中最常见的文件操作方法，以及如何读写csv文件；最后使用 StringIO 将数据写入内存\n\n更新于 2021-11-14\n\n{% endnote %}\n\n<br>\n\n\n\n# 打开文件\n\n打开文件直接使用`open`函数，指定文件路径即可，该函数的底层是调用操作系统接口：\n\n```python\nf = open(\"/tmp/a.txt\", mode='r', encoding='utf-8')\ncontent = f.read()\n```\n\n\n\n更推荐的方式是使用`with`方式：\n\n```python\nwith open(\"/tmp/a.txt\", mode='r', encoding='utf-8') as f:\n  content = f.read()\n```\n\n\n\n- `f`为文件句柄，对文件句柄的任何操作都是对文件的操作；\n- `encoding`可以省略，`mode='r'`也可以直接写成类似`r`的方式，标识打开文件的模式；\n\n\n\n使用`with`打开文件可以不需要关闭文件句柄，并且一个语句可以操作多个文件句柄，例如：\n\n```python\nwith open(\"/tmp/a.txt\", mode='r', encoding='utf-8') as f1, \\\n    open(\"/tmp/b.txt\", mode='r', encoding='utf-8') as f2:\n  print(f1.read())  \n  f2.write('aaaaa')\n```\n\n\n\n\n\n<br>\n\n\n\n# 关闭文件\n\n关闭文件直接调用文件句柄的`close()`方式即可：\n\n```python\nf = open(\"/tmp/a.txt\", mode='r', encoding='utf-8')\nf.close()\n```\n\n\n\n> 打开文件后好的习惯应该是都有一个关闭文件句柄的操作\n\n\n\n<br>\n\n\n\n# 指定打开文件的模式\n\n不管是直接`open()`方式还是`with`方式，都需要有打开文件的模式即`mode`，有如下的一些模式可选择：\n\n- `r`：只读（文件必须存在，不存在则报错）\n- `w`：只写（不可读，文件不存在则创建，存在则会清空原文件内容）\n- `a`：追加（不可读，文件不存在则创建，存在只会追加内容到原文件）\n- `rb`：以二进制读取（对于非文本类内容）\n- `wb`：以二进制写入（对于非文本类内容）\n- `ab`：以二进制追加（对于非文本类内容）\n- `r+`：读写模式\n\n\n\n> `r+`模式中，文件指针开始位于文件头部，如果先写后读，那么文件会从还是覆盖原文件内容，直到写内容完毕\n\n\n\n\n\n# csv文件读写\n\n## csv文件写入\n\n```python\nimport csv\n\n# 以写入方式打开一个csv文件\nfile = open('test.csv','w')\n\n# 调用writer方法，传入csv文件对象，得到的结果是一个CSVWriter对象\nwriter = csv.writer(file)\n\n# 调用CSVWriter对象的writerow方法，一行行的写入数据\nwriter.writerow(['name', 'age', 'score'])\n\n# 还可以调用writerows方法，一次性写入多行数据\nwriter.writerows([['zhangsan', '18', '98'],['lisi', '20', '99'], ['wangwu', '17', '90'], ['jerry', '19', '95']])\nfile.close()\n```\n\n\n\n## csv文件读取\n\n```python\nimport csv\n\n# 以读取方式打开一个csv文件\nfile = open('test.csv', 'r')\n\n# 调用csv模块的reader方法，得到的结果是一个可迭代对象\nreader = csv.reader(file)\n\n# 对结果进行遍历，获取到结果里的每一行数据\nfor row in reader:\n    print(row)\n\nfile.close()\n```\n\n\n\n<br>\n\n# 内存数据读写\n\n## 读写字符串数据\n\n```python\nfrom io import StringIO\n\n# 创建一个StringIO对象\nf = StringIO()\n\n# 可以像操作文件一下，将字符串写入到内存中\nf.write('hello\\r\\n')\nf.write('good')\n\n# 需要调用getvalue()方法才能获取到写入到内存中的数据\nprint(f.getvalue())\n\nf.close()\n```\n\n\n\n## 读写二进制数据\n\n```python\nfrom io import BytesIO\n\nf = BytesIO()\nf.write('你好\\r\\n'.encode('utf-8'))\nf.write('中国'.encode('utf-8'))\n\nprint(f.getvalue())\nf.close()\n```\n\n","source":"_posts/python文件操作及内存数据读写.md","raw":"---\ntitle: python文件操作及内存数据读写\ndate: 2021-11-14 18:14:01\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- 文件I/O\ndescription: 最常用的python操作文件的方法，以及向内存中读写数据\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-931b10f17b1ae77a38b46a5ef84034e7_1440w.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639476922&t=1628d6ddc3c037739c2b04c3d151b1a7\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n介绍python中最常见的文件操作方法，以及如何读写csv文件；最后使用 StringIO 将数据写入内存\n\n更新于 2021-11-14\n\n{% endnote %}\n\n<br>\n\n\n\n# 打开文件\n\n打开文件直接使用`open`函数，指定文件路径即可，该函数的底层是调用操作系统接口：\n\n```python\nf = open(\"/tmp/a.txt\", mode='r', encoding='utf-8')\ncontent = f.read()\n```\n\n\n\n更推荐的方式是使用`with`方式：\n\n```python\nwith open(\"/tmp/a.txt\", mode='r', encoding='utf-8') as f:\n  content = f.read()\n```\n\n\n\n- `f`为文件句柄，对文件句柄的任何操作都是对文件的操作；\n- `encoding`可以省略，`mode='r'`也可以直接写成类似`r`的方式，标识打开文件的模式；\n\n\n\n使用`with`打开文件可以不需要关闭文件句柄，并且一个语句可以操作多个文件句柄，例如：\n\n```python\nwith open(\"/tmp/a.txt\", mode='r', encoding='utf-8') as f1, \\\n    open(\"/tmp/b.txt\", mode='r', encoding='utf-8') as f2:\n  print(f1.read())  \n  f2.write('aaaaa')\n```\n\n\n\n\n\n<br>\n\n\n\n# 关闭文件\n\n关闭文件直接调用文件句柄的`close()`方式即可：\n\n```python\nf = open(\"/tmp/a.txt\", mode='r', encoding='utf-8')\nf.close()\n```\n\n\n\n> 打开文件后好的习惯应该是都有一个关闭文件句柄的操作\n\n\n\n<br>\n\n\n\n# 指定打开文件的模式\n\n不管是直接`open()`方式还是`with`方式，都需要有打开文件的模式即`mode`，有如下的一些模式可选择：\n\n- `r`：只读（文件必须存在，不存在则报错）\n- `w`：只写（不可读，文件不存在则创建，存在则会清空原文件内容）\n- `a`：追加（不可读，文件不存在则创建，存在只会追加内容到原文件）\n- `rb`：以二进制读取（对于非文本类内容）\n- `wb`：以二进制写入（对于非文本类内容）\n- `ab`：以二进制追加（对于非文本类内容）\n- `r+`：读写模式\n\n\n\n> `r+`模式中，文件指针开始位于文件头部，如果先写后读，那么文件会从还是覆盖原文件内容，直到写内容完毕\n\n\n\n\n\n# csv文件读写\n\n## csv文件写入\n\n```python\nimport csv\n\n# 以写入方式打开一个csv文件\nfile = open('test.csv','w')\n\n# 调用writer方法，传入csv文件对象，得到的结果是一个CSVWriter对象\nwriter = csv.writer(file)\n\n# 调用CSVWriter对象的writerow方法，一行行的写入数据\nwriter.writerow(['name', 'age', 'score'])\n\n# 还可以调用writerows方法，一次性写入多行数据\nwriter.writerows([['zhangsan', '18', '98'],['lisi', '20', '99'], ['wangwu', '17', '90'], ['jerry', '19', '95']])\nfile.close()\n```\n\n\n\n## csv文件读取\n\n```python\nimport csv\n\n# 以读取方式打开一个csv文件\nfile = open('test.csv', 'r')\n\n# 调用csv模块的reader方法，得到的结果是一个可迭代对象\nreader = csv.reader(file)\n\n# 对结果进行遍历，获取到结果里的每一行数据\nfor row in reader:\n    print(row)\n\nfile.close()\n```\n\n\n\n<br>\n\n# 内存数据读写\n\n## 读写字符串数据\n\n```python\nfrom io import StringIO\n\n# 创建一个StringIO对象\nf = StringIO()\n\n# 可以像操作文件一下，将字符串写入到内存中\nf.write('hello\\r\\n')\nf.write('good')\n\n# 需要调用getvalue()方法才能获取到写入到内存中的数据\nprint(f.getvalue())\n\nf.close()\n```\n\n\n\n## 读写二进制数据\n\n```python\nfrom io import BytesIO\n\nf = BytesIO()\nf.write('你好\\r\\n'.encode('utf-8'))\nf.write('中国'.encode('utf-8'))\n\nprint(f.getvalue())\nf.close()\n```\n\n","slug":"python文件操作及内存数据读写","published":1,"updated":"2021-11-14T10:20:01.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvz36v5e00006ykldqmtcstr","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>介绍python中最常见的文件操作方法，以及如何读写csv文件；最后使用 StringIO 将数据写入内存</p><p>更新于 2021-11-14</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h1><p>打开文件直接使用<code>open</code>函数，指定文件路径即可，该函数的底层是调用操作系统接口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">content = f.read()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>更推荐的方式是使用<code>with</code>方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  content = f.read()</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>f</code>为文件句柄，对文件句柄的任何操作都是对文件的操作；</li>\n<li><code>encoding</code>可以省略，<code>mode=&#39;r&#39;</code>也可以直接写成类似<code>r</code>的方式，标识打开文件的模式；</li>\n</ul>\n<p>使用<code>with</code>打开文件可以不需要关闭文件句柄，并且一个语句可以操作多个文件句柄，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f1, \\</span><br><span class=\"line\">    <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/b.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">  print(f1.read())  </span><br><span class=\"line\">  f2.write(<span class=\"string\">&#x27;aaaaa&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h1><p>关闭文件直接调用文件句柄的<code>close()</code>方式即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>打开文件后好的习惯应该是都有一个关闭文件句柄的操作</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"指定打开文件的模式\"><a href=\"#指定打开文件的模式\" class=\"headerlink\" title=\"指定打开文件的模式\"></a>指定打开文件的模式</h1><p>不管是直接<code>open()</code>方式还是<code>with</code>方式，都需要有打开文件的模式即<code>mode</code>，有如下的一些模式可选择：</p>\n<ul>\n<li><code>r</code>：只读（文件必须存在，不存在则报错）</li>\n<li><code>w</code>：只写（不可读，文件不存在则创建，存在则会清空原文件内容）</li>\n<li><code>a</code>：追加（不可读，文件不存在则创建，存在只会追加内容到原文件）</li>\n<li><code>rb</code>：以二进制读取（对于非文本类内容）</li>\n<li><code>wb</code>：以二进制写入（对于非文本类内容）</li>\n<li><code>ab</code>：以二进制追加（对于非文本类内容）</li>\n<li><code>r+</code>：读写模式</li>\n</ul>\n<blockquote>\n<p><code>r+</code>模式中，文件指针开始位于文件头部，如果先写后读，那么文件会从还是覆盖原文件内容，直到写内容完毕</p>\n</blockquote>\n<h1 id=\"csv文件读写\"><a href=\"#csv文件读写\" class=\"headerlink\" title=\"csv文件读写\"></a>csv文件读写</h1><h2 id=\"csv文件写入\"><a href=\"#csv文件写入\" class=\"headerlink\" title=\"csv文件写入\"></a>csv文件写入</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以写入方式打开一个csv文件</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;test.csv&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用writer方法，传入csv文件对象，得到的结果是一个CSVWriter对象</span></span><br><span class=\"line\">writer = csv.writer(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用CSVWriter对象的writerow方法，一行行的写入数据</span></span><br><span class=\"line\">writer.writerow([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;score&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以调用writerows方法，一次性写入多行数据</span></span><br><span class=\"line\">writer.writerows([[<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"string\">&#x27;98&#x27;</span>],[<span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"string\">&#x27;20&#x27;</span>, <span class=\"string\">&#x27;99&#x27;</span>], [<span class=\"string\">&#x27;wangwu&#x27;</span>, <span class=\"string\">&#x27;17&#x27;</span>, <span class=\"string\">&#x27;90&#x27;</span>], [<span class=\"string\">&#x27;jerry&#x27;</span>, <span class=\"string\">&#x27;19&#x27;</span>, <span class=\"string\">&#x27;95&#x27;</span>]])</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"csv文件读取\"><a href=\"#csv文件读取\" class=\"headerlink\" title=\"csv文件读取\"></a>csv文件读取</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以读取方式打开一个csv文件</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;test.csv&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用csv模块的reader方法，得到的结果是一个可迭代对象</span></span><br><span class=\"line\">reader = csv.reader(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对结果进行遍历，获取到结果里的每一行数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> reader:</span><br><span class=\"line\">    print(row)</span><br><span class=\"line\"></span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h1 id=\"内存数据读写\"><a href=\"#内存数据读写\" class=\"headerlink\" title=\"内存数据读写\"></a>内存数据读写</h1><h2 id=\"读写字符串数据\"><a href=\"#读写字符串数据\" class=\"headerlink\" title=\"读写字符串数据\"></a>读写字符串数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个StringIO对象</span></span><br><span class=\"line\">f = StringIO()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以像操作文件一下，将字符串写入到内存中</span></span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;hello\\r\\n&#x27;</span>)</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;good&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要调用getvalue()方法才能获取到写入到内存中的数据</span></span><br><span class=\"line\">print(f.getvalue())</span><br><span class=\"line\"></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"读写二进制数据\"><a href=\"#读写二进制数据\" class=\"headerlink\" title=\"读写二进制数据\"></a>读写二进制数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</span><br><span class=\"line\"></span><br><span class=\"line\">f = BytesIO()</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;你好\\r\\n&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;中国&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(f.getvalue())</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>介绍python中最常见的文件操作方法，以及如何读写csv文件；最后使用 StringIO 将数据写入内存</p><p>更新于 2021-11-14</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"打开文件\"><a href=\"#打开文件\" class=\"headerlink\" title=\"打开文件\"></a>打开文件</h1><p>打开文件直接使用<code>open</code>函数，指定文件路径即可，该函数的底层是调用操作系统接口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">content = f.read()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>更推荐的方式是使用<code>with</code>方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  content = f.read()</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>f</code>为文件句柄，对文件句柄的任何操作都是对文件的操作；</li>\n<li><code>encoding</code>可以省略，<code>mode=&#39;r&#39;</code>也可以直接写成类似<code>r</code>的方式，标识打开文件的模式；</li>\n</ul>\n<p>使用<code>with</code>打开文件可以不需要关闭文件句柄，并且一个语句可以操作多个文件句柄，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f1, \\</span><br><span class=\"line\">    <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/b.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f2:</span><br><span class=\"line\">  print(f1.read())  </span><br><span class=\"line\">  f2.write(<span class=\"string\">&#x27;aaaaa&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"关闭文件\"><a href=\"#关闭文件\" class=\"headerlink\" title=\"关闭文件\"></a>关闭文件</h1><p>关闭文件直接调用文件句柄的<code>close()</code>方式即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/a.txt&quot;</span>, mode=<span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>打开文件后好的习惯应该是都有一个关闭文件句柄的操作</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"指定打开文件的模式\"><a href=\"#指定打开文件的模式\" class=\"headerlink\" title=\"指定打开文件的模式\"></a>指定打开文件的模式</h1><p>不管是直接<code>open()</code>方式还是<code>with</code>方式，都需要有打开文件的模式即<code>mode</code>，有如下的一些模式可选择：</p>\n<ul>\n<li><code>r</code>：只读（文件必须存在，不存在则报错）</li>\n<li><code>w</code>：只写（不可读，文件不存在则创建，存在则会清空原文件内容）</li>\n<li><code>a</code>：追加（不可读，文件不存在则创建，存在只会追加内容到原文件）</li>\n<li><code>rb</code>：以二进制读取（对于非文本类内容）</li>\n<li><code>wb</code>：以二进制写入（对于非文本类内容）</li>\n<li><code>ab</code>：以二进制追加（对于非文本类内容）</li>\n<li><code>r+</code>：读写模式</li>\n</ul>\n<blockquote>\n<p><code>r+</code>模式中，文件指针开始位于文件头部，如果先写后读，那么文件会从还是覆盖原文件内容，直到写内容完毕</p>\n</blockquote>\n<h1 id=\"csv文件读写\"><a href=\"#csv文件读写\" class=\"headerlink\" title=\"csv文件读写\"></a>csv文件读写</h1><h2 id=\"csv文件写入\"><a href=\"#csv文件写入\" class=\"headerlink\" title=\"csv文件写入\"></a>csv文件写入</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以写入方式打开一个csv文件</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;test.csv&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用writer方法，传入csv文件对象，得到的结果是一个CSVWriter对象</span></span><br><span class=\"line\">writer = csv.writer(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用CSVWriter对象的writerow方法，一行行的写入数据</span></span><br><span class=\"line\">writer.writerow([<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;score&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以调用writerows方法，一次性写入多行数据</span></span><br><span class=\"line\">writer.writerows([[<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>, <span class=\"string\">&#x27;98&#x27;</span>],[<span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"string\">&#x27;20&#x27;</span>, <span class=\"string\">&#x27;99&#x27;</span>], [<span class=\"string\">&#x27;wangwu&#x27;</span>, <span class=\"string\">&#x27;17&#x27;</span>, <span class=\"string\">&#x27;90&#x27;</span>], [<span class=\"string\">&#x27;jerry&#x27;</span>, <span class=\"string\">&#x27;19&#x27;</span>, <span class=\"string\">&#x27;95&#x27;</span>]])</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"csv文件读取\"><a href=\"#csv文件读取\" class=\"headerlink\" title=\"csv文件读取\"></a>csv文件读取</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以读取方式打开一个csv文件</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;test.csv&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 调用csv模块的reader方法，得到的结果是一个可迭代对象</span></span><br><span class=\"line\">reader = csv.reader(file)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对结果进行遍历，获取到结果里的每一行数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> reader:</span><br><span class=\"line\">    print(row)</span><br><span class=\"line\"></span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h1 id=\"内存数据读写\"><a href=\"#内存数据读写\" class=\"headerlink\" title=\"内存数据读写\"></a>内存数据读写</h1><h2 id=\"读写字符串数据\"><a href=\"#读写字符串数据\" class=\"headerlink\" title=\"读写字符串数据\"></a>读写字符串数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个StringIO对象</span></span><br><span class=\"line\">f = StringIO()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以像操作文件一下，将字符串写入到内存中</span></span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;hello\\r\\n&#x27;</span>)</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;good&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要调用getvalue()方法才能获取到写入到内存中的数据</span></span><br><span class=\"line\">print(f.getvalue())</span><br><span class=\"line\"></span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"读写二进制数据\"><a href=\"#读写二进制数据\" class=\"headerlink\" title=\"读写二进制数据\"></a>读写二进制数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</span><br><span class=\"line\"></span><br><span class=\"line\">f = BytesIO()</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;你好\\r\\n&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">f.write(<span class=\"string\">&#x27;中国&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">print(f.getvalue())</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"python操作mongodb","date":"2021-11-14T10:22:07.000Z","description":"python连接并操作mongodb数据库","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20170911%2Feb0ef74b80c54905b13014823d588aa3.png&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639477392&t=a9e02705207c17c9b506088dc4013f78","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍python中操作mongodb的方法\n\n更新于 2021-11-14\n\n{% endnote %}\n\n\n\n## 安装pymongo\n\nmongodb提供了`pymongo`来进行mongodb的操作，执行下面的命令进行安装：\n\n```bash\n$ pip install pymongo\n```\n\n\n\n<br>\n\n\n\n## 连接mongodb\n\n```python\nfrom pymongo import MongoClient\n\n# 方式一：指定地址端口方式连接\nclient = MongoClient('localhost', 27017)\n\n# 方式二：指定URL方式连接\nclient = MongoClient('mongodb://localhost:27017/')\n```\n\n\n\n> mongodb默认自己带了线程池，所以连接之后无需主动关闭\n\n<br>\n\n## 查询数据\n\n\n\n### 查询数据库信息\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 查看当前连接的数据库端口\nclient.PORT\n\n# 查看当前连接的数据库地址\nclient.HOST\n\n# 查看所有的数据库\nclient.database_names()\n\n# 连接到数据库\ndb = client.<数据库名字>\n```\n\n\n\n### 查询一条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client.test\n\nrest = db.blog.posts.find_one()\n\n# 有条件查询\nrest = db.blog.posts.find_one({'name': 'xxxx'})\n```\n\n\n\n### 查询多条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client.test\n\nrest = db.blog.posts.find()\n\n# 有条件查询\nrest = db.blog.posts.find({'author': 'xxxx'})\n```\n\n\n\n## 根据ID查询数据\n\n```python\nfrom pymongo import MongoClient\nfrom bson.objectid import ObjectId\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client.test\n\nrest = db.blog.posts.find()\nid = \"xxxxxxxxxxxx\"\n\nobj = ObjectId(oid)\nrest = db.blog.posts.find_one({'_id': obj})\n```\n\n> mongo中的id是一个对象，查询的时候也要将id转换为对象进行查询\n\n\n\n<br>\n\n## 新增数据\n\n\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\n# 待插入的文档\npost = {\n  'title': 'xxxx',\n  'content': 'sssss',\n  'author': 'qqqq'\n}\n\n# 插入数据\nrest = db.blog.posts.insert_one(post)\n\n# 插入成功后会返回id\nprint(rest.inserted_id)\n```\n\n\n\n<br>\n\n\n\n## 修改数据\n\n\n\n### 修改一条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\nrest = db.blog.posts.update_one({'title': 'first'}, {'$inc': {'x': 3}})\n\n# 匹配的行数\nprint(rest.matched_count)\n# 修改的行数\nprint(rest.modified_count)\n```\n\n> 匹配到`title`为`first`的记录，给每个记录的`x`增加3，如果没有则设置为3\n\n\n\n### 修改多条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\nrest = db.blog.posts.update_many({}, {'$inc': {'x': 1}})\n\n# 匹配的行数\nprint(rest.matched_count)\n# 修改的行数\nprint(rest.modified_count)\n```\n\n> 修改所有的数据，将`x`字段增加1，如果没有则设置为1\n\n\n\n<br>\n\n\n\n## 删除数据\n\n```python\t\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\n# 删除一条数据\nrest = db.blog.posts.delete_one({'title': 'xxxxx'})\n\n# 删除多条数据\nrest = db.blog.posts.delete_many({'x': 1})\n\n# 打印删除的行数\nprint(rest.deleted_count)\n```\n\n\n\n<br>\n\n\n\n## ORM方式操作mongodb\n\n\n\n### 安装\n\nORM方式操作需要安装`mongoengine`\n\n```bash\n$ pip install mongoengine\n```\n\n\n\n### 连接数据库\n\n这里以连接`students`库为例：\n\n```python\nfrom mongoengine import connect\n\n# 方式一、指定端口和地址\nconn = connect('students', host='127.0.0.1', port='27017', username='xxx', password='xxxx')\n\n# 方式二、指定url方式\nconn = connect('students'， host='mongodb://username:password@127.0.0.1/database_name')\n```\n\n\n\n### ODM模型\n\n```python\nfrom datetime import datetime\nfrom mongoengine import connect, DynamicDocument, EmbeddedDocument, StringField, \\\n\t\tIntField, FloatField, DateTimeField, ListField\n\nconn = connect('students', host='127.0.0.1', port='27017', username='xxx', password='xxxx')\n\nclass Grade(EmbeddedDocument):\n  name = StringField(required=True)\n  score = FloatField(required=True)\n  \nSEX_CHOICES = (\n    ('female', '女'),\n    ('male', '男')\n)\n\nclass Student(DynamicDocument):\n  name = StringField(required=True, max_length=32)\n  age = IntField(required=True)\n  sex = StringField(required=True, choices=SEX_CHOICES)\n  grade = FloatField()\n  create_at = DateTimeField(default=datetime.now())\n  grades = ListField(EmbeddedDocumentField(Grade))\n  \n  meta = {\n    'collection': 'students',\n    'ordering': ['-age']\n  }\n```\n\n\n\n> 1、EmbeddedDocumentField 表示引用嵌套文档\n>\n> 2、DynamicDocument 的好处是可以随时增加字段，而不用修改class中的内容\n\n\n\n### ODM增删改查\n\n```python\nfrom datetime import datetime\nfrom mongoengine import connect, DynamicDocument, EmbeddedDocument, StringField, \\\n\t\tIntField, FloatField, DateTimeField, ListField\n\nconn = connect('students', host='127.0.0.1', port='27017', username='xxx', password='xxxx')\n  \nclass Grade(EmbeddedDocument):\n  ......\n  \nSEX_CHOICES = (\n    ('female', '女'),\n    ('male', '男')\n)\n\nclass Student(DynamicDocument):\n  ......\n  \n  \nclass MongoODM(object):\n\n  def get_one(self):\n    '''查询一条数据'''\n    return Student.objects.first()\n\n  def get_all(self):\n    '''查询所有数据'''\n    return Student.objects.all()\n\n  def get_by_id(self, id):\n    '''根据id查询'''\n    rest = Student.objects.filter(id=id).first()\n    \n  def update_one(self):\n    '''修改一条数据'''\n    rest = Student.objects.filter(sex='male').update_one(inc__age=1)\n    return rest\n  \n  def update_many(self):\n    '''修改多条数据'''\n    rest = Student.objects.filter(sex='male').update(inc__age=1)\n    return rest\n  \n  def delete_one(self):\n    '''删除一条数据'''\n    rest = Student.objects.filter(sex='male').first().delete()\n    return rest\n  \n  def delete_many(self):\n    '''删除多条数据'''\n    rest = Student.objects.filter(sex='male').delete()\n    return rest\n  \n  def add_one(self):\n    '''新增一条数据'''\n    yuwen = Grade(\n      name='语文',\n      score=95\n    )\n    \n    stu_obj = Student(\n      name='tom',\n      age=21,\n      sex='male',\n      grades=[yuwen]\n    )\n    stu_obj.remark = 'remark'\n    stu_obj.save()\n    return stu_obj\n```\n\n","source":"_posts/python操作mongodb.md","raw":"---\ntitle: python操作mongodb\ndate: 2021-11-14 18:22:07\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- DB操作\ndescription: python连接并操作mongodb数据库\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20170911%2Feb0ef74b80c54905b13014823d588aa3.png&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639477392&t=a9e02705207c17c9b506088dc4013f78\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍python中操作mongodb的方法\n\n更新于 2021-11-14\n\n{% endnote %}\n\n\n\n## 安装pymongo\n\nmongodb提供了`pymongo`来进行mongodb的操作，执行下面的命令进行安装：\n\n```bash\n$ pip install pymongo\n```\n\n\n\n<br>\n\n\n\n## 连接mongodb\n\n```python\nfrom pymongo import MongoClient\n\n# 方式一：指定地址端口方式连接\nclient = MongoClient('localhost', 27017)\n\n# 方式二：指定URL方式连接\nclient = MongoClient('mongodb://localhost:27017/')\n```\n\n\n\n> mongodb默认自己带了线程池，所以连接之后无需主动关闭\n\n<br>\n\n## 查询数据\n\n\n\n### 查询数据库信息\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 查看当前连接的数据库端口\nclient.PORT\n\n# 查看当前连接的数据库地址\nclient.HOST\n\n# 查看所有的数据库\nclient.database_names()\n\n# 连接到数据库\ndb = client.<数据库名字>\n```\n\n\n\n### 查询一条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client.test\n\nrest = db.blog.posts.find_one()\n\n# 有条件查询\nrest = db.blog.posts.find_one({'name': 'xxxx'})\n```\n\n\n\n### 查询多条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client.test\n\nrest = db.blog.posts.find()\n\n# 有条件查询\nrest = db.blog.posts.find({'author': 'xxxx'})\n```\n\n\n\n## 根据ID查询数据\n\n```python\nfrom pymongo import MongoClient\nfrom bson.objectid import ObjectId\n\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client.test\n\nrest = db.blog.posts.find()\nid = \"xxxxxxxxxxxx\"\n\nobj = ObjectId(oid)\nrest = db.blog.posts.find_one({'_id': obj})\n```\n\n> mongo中的id是一个对象，查询的时候也要将id转换为对象进行查询\n\n\n\n<br>\n\n## 新增数据\n\n\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\n# 待插入的文档\npost = {\n  'title': 'xxxx',\n  'content': 'sssss',\n  'author': 'qqqq'\n}\n\n# 插入数据\nrest = db.blog.posts.insert_one(post)\n\n# 插入成功后会返回id\nprint(rest.inserted_id)\n```\n\n\n\n<br>\n\n\n\n## 修改数据\n\n\n\n### 修改一条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\nrest = db.blog.posts.update_one({'title': 'first'}, {'$inc': {'x': 3}})\n\n# 匹配的行数\nprint(rest.matched_count)\n# 修改的行数\nprint(rest.modified_count)\n```\n\n> 匹配到`title`为`first`的记录，给每个记录的`x`增加3，如果没有则设置为3\n\n\n\n### 修改多条数据\n\n```python\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\nrest = db.blog.posts.update_many({}, {'$inc': {'x': 1}})\n\n# 匹配的行数\nprint(rest.matched_count)\n# 修改的行数\nprint(rest.modified_count)\n```\n\n> 修改所有的数据，将`x`字段增加1，如果没有则设置为1\n\n\n\n<br>\n\n\n\n## 删除数据\n\n```python\t\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://localhost:27017/')\n\n# 连接到数据库\ndb = client.test\n\n# 删除一条数据\nrest = db.blog.posts.delete_one({'title': 'xxxxx'})\n\n# 删除多条数据\nrest = db.blog.posts.delete_many({'x': 1})\n\n# 打印删除的行数\nprint(rest.deleted_count)\n```\n\n\n\n<br>\n\n\n\n## ORM方式操作mongodb\n\n\n\n### 安装\n\nORM方式操作需要安装`mongoengine`\n\n```bash\n$ pip install mongoengine\n```\n\n\n\n### 连接数据库\n\n这里以连接`students`库为例：\n\n```python\nfrom mongoengine import connect\n\n# 方式一、指定端口和地址\nconn = connect('students', host='127.0.0.1', port='27017', username='xxx', password='xxxx')\n\n# 方式二、指定url方式\nconn = connect('students'， host='mongodb://username:password@127.0.0.1/database_name')\n```\n\n\n\n### ODM模型\n\n```python\nfrom datetime import datetime\nfrom mongoengine import connect, DynamicDocument, EmbeddedDocument, StringField, \\\n\t\tIntField, FloatField, DateTimeField, ListField\n\nconn = connect('students', host='127.0.0.1', port='27017', username='xxx', password='xxxx')\n\nclass Grade(EmbeddedDocument):\n  name = StringField(required=True)\n  score = FloatField(required=True)\n  \nSEX_CHOICES = (\n    ('female', '女'),\n    ('male', '男')\n)\n\nclass Student(DynamicDocument):\n  name = StringField(required=True, max_length=32)\n  age = IntField(required=True)\n  sex = StringField(required=True, choices=SEX_CHOICES)\n  grade = FloatField()\n  create_at = DateTimeField(default=datetime.now())\n  grades = ListField(EmbeddedDocumentField(Grade))\n  \n  meta = {\n    'collection': 'students',\n    'ordering': ['-age']\n  }\n```\n\n\n\n> 1、EmbeddedDocumentField 表示引用嵌套文档\n>\n> 2、DynamicDocument 的好处是可以随时增加字段，而不用修改class中的内容\n\n\n\n### ODM增删改查\n\n```python\nfrom datetime import datetime\nfrom mongoengine import connect, DynamicDocument, EmbeddedDocument, StringField, \\\n\t\tIntField, FloatField, DateTimeField, ListField\n\nconn = connect('students', host='127.0.0.1', port='27017', username='xxx', password='xxxx')\n  \nclass Grade(EmbeddedDocument):\n  ......\n  \nSEX_CHOICES = (\n    ('female', '女'),\n    ('male', '男')\n)\n\nclass Student(DynamicDocument):\n  ......\n  \n  \nclass MongoODM(object):\n\n  def get_one(self):\n    '''查询一条数据'''\n    return Student.objects.first()\n\n  def get_all(self):\n    '''查询所有数据'''\n    return Student.objects.all()\n\n  def get_by_id(self, id):\n    '''根据id查询'''\n    rest = Student.objects.filter(id=id).first()\n    \n  def update_one(self):\n    '''修改一条数据'''\n    rest = Student.objects.filter(sex='male').update_one(inc__age=1)\n    return rest\n  \n  def update_many(self):\n    '''修改多条数据'''\n    rest = Student.objects.filter(sex='male').update(inc__age=1)\n    return rest\n  \n  def delete_one(self):\n    '''删除一条数据'''\n    rest = Student.objects.filter(sex='male').first().delete()\n    return rest\n  \n  def delete_many(self):\n    '''删除多条数据'''\n    rest = Student.objects.filter(sex='male').delete()\n    return rest\n  \n  def add_one(self):\n    '''新增一条数据'''\n    yuwen = Grade(\n      name='语文',\n      score=95\n    )\n    \n    stu_obj = Student(\n      name='tom',\n      age=21,\n      sex='male',\n      grades=[yuwen]\n    )\n    stu_obj.remark = 'remark'\n    stu_obj.save()\n    return stu_obj\n```\n\n","slug":"python操作mongodb","published":1,"updated":"2021-11-14T10:40:47.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvz3yevw0000y7kl7o3x1k67","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍python中操作mongodb的方法</p><p>更新于 2021-11-14</p>\n          </div>\n\n\n\n<h2 id=\"安装pymongo\"><a href=\"#安装pymongo\" class=\"headerlink\" title=\"安装pymongo\"></a>安装pymongo</h2><p>mongodb提供了<code>pymongo</code>来进行mongodb的操作，执行下面的命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pymongo</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"连接mongodb\"><a href=\"#连接mongodb\" class=\"headerlink\" title=\"连接mongodb\"></a>连接mongodb</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一：指定地址端口方式连接</span></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"number\">27017</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二：指定URL方式连接</span></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>mongodb默认自己带了线程池，所以连接之后无需主动关闭</p>\n</blockquote>\n<br>\n\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><h3 id=\"查询数据库信息\"><a href=\"#查询数据库信息\" class=\"headerlink\" title=\"查询数据库信息\"></a>查询数据库信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前连接的数据库端口</span></span><br><span class=\"line\">client.PORT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前连接的数据库地址</span></span><br><span class=\"line\">client.HOST</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有的数据库</span></span><br><span class=\"line\">client.database_names()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.&lt;数据库名字&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询一条数据\"><a href=\"#查询一条数据\" class=\"headerlink\" title=\"查询一条数据\"></a>查询一条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.find_one()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有条件查询</span></span><br><span class=\"line\">rest = db.blog.posts.find_one(&#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询多条数据\"><a href=\"#查询多条数据\" class=\"headerlink\" title=\"查询多条数据\"></a>查询多条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.find()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有条件查询</span></span><br><span class=\"line\">rest = db.blog.posts.find(&#123;<span class=\"string\">&#x27;author&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"根据ID查询数据\"><a href=\"#根据ID查询数据\" class=\"headerlink\" title=\"根据ID查询数据\"></a>根据ID查询数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"><span class=\"keyword\">from</span> bson.objectid <span class=\"keyword\">import</span> ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.find()</span><br><span class=\"line\"><span class=\"built_in\">id</span> = <span class=\"string\">&quot;xxxxxxxxxxxx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj = ObjectId(oid)</span><br><span class=\"line\">rest = db.blog.posts.find_one(&#123;<span class=\"string\">&#x27;_id&#x27;</span>: obj&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mongo中的id是一个对象，查询的时候也要将id转换为对象进行查询</p>\n</blockquote>\n<br>\n\n<h2 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 待插入的文档</span></span><br><span class=\"line\">post = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;sssss&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;author&#x27;</span>: <span class=\"string\">&#x27;qqqq&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入数据</span></span><br><span class=\"line\">rest = db.blog.posts.insert_one(post)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入成功后会返回id</span></span><br><span class=\"line\">print(rest.inserted_id)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h2><h3 id=\"修改一条数据\"><a href=\"#修改一条数据\" class=\"headerlink\" title=\"修改一条数据\"></a>修改一条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.update_one(&#123;<span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;first&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;$inc&#x27;</span>: &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">3</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配的行数</span></span><br><span class=\"line\">print(rest.matched_count)</span><br><span class=\"line\"><span class=\"comment\"># 修改的行数</span></span><br><span class=\"line\">print(rest.modified_count)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>匹配到<code>title</code>为<code>first</code>的记录，给每个记录的<code>x</code>增加3，如果没有则设置为3</p>\n</blockquote>\n<h3 id=\"修改多条数据\"><a href=\"#修改多条数据\" class=\"headerlink\" title=\"修改多条数据\"></a>修改多条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.update_many(&#123;&#125;, &#123;<span class=\"string\">&#x27;$inc&#x27;</span>: &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配的行数</span></span><br><span class=\"line\">print(rest.matched_count)</span><br><span class=\"line\"><span class=\"comment\"># 修改的行数</span></span><br><span class=\"line\">print(rest.modified_count)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改所有的数据，将<code>x</code>字段增加1，如果没有则设置为1</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一条数据</span></span><br><span class=\"line\">rest = db.blog.posts.delete_one(&#123;<span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;xxxxx&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除多条数据</span></span><br><span class=\"line\">rest = db.blog.posts.delete_many(&#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印删除的行数</span></span><br><span class=\"line\">print(rest.deleted_count)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"ORM方式操作mongodb\"><a href=\"#ORM方式操作mongodb\" class=\"headerlink\" title=\"ORM方式操作mongodb\"></a>ORM方式操作mongodb</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>ORM方式操作需要安装<code>mongoengine</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install mongoengine</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>这里以连接<code>students</code>库为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mongoengine <span class=\"keyword\">import</span> connect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一、指定端口和地址</span></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>, host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"string\">&#x27;27017&#x27;</span>, username=<span class=\"string\">&#x27;xxx&#x27;</span>, password=<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二、指定url方式</span></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>， host=<span class=\"string\">&#x27;mongodb://username:password@127.0.0.1/database_name&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ODM模型\"><a href=\"#ODM模型\" class=\"headerlink\" title=\"ODM模型\"></a>ODM模型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> mongoengine <span class=\"keyword\">import</span> connect, DynamicDocument, EmbeddedDocument, StringField, \\</span><br><span class=\"line\">\t\tIntField, FloatField, DateTimeField, ListField</span><br><span class=\"line\"></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>, host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"string\">&#x27;27017&#x27;</span>, username=<span class=\"string\">&#x27;xxx&#x27;</span>, password=<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grade</span>(<span class=\"params\">EmbeddedDocument</span>):</span></span><br><span class=\"line\">  name = StringField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  score = FloatField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">SEX_CHOICES = (</span><br><span class=\"line\">    (<span class=\"string\">&#x27;female&#x27;</span>, <span class=\"string\">&#x27;女&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;male&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">DynamicDocument</span>):</span></span><br><span class=\"line\">  name = StringField(required=<span class=\"literal\">True</span>, max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">  age = IntField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  sex = StringField(required=<span class=\"literal\">True</span>, choices=SEX_CHOICES)</span><br><span class=\"line\">  grade = FloatField()</span><br><span class=\"line\">  create_at = DateTimeField(default=datetime.now())</span><br><span class=\"line\">  grades = ListField(EmbeddedDocumentField(Grade))</span><br><span class=\"line\">  </span><br><span class=\"line\">  meta = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;collection&#x27;</span>: <span class=\"string\">&#x27;students&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;ordering&#x27;</span>: [<span class=\"string\">&#x27;-age&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>1、EmbeddedDocumentField 表示引用嵌套文档</p>\n<p>2、DynamicDocument 的好处是可以随时增加字段，而不用修改class中的内容</p>\n</blockquote>\n<h3 id=\"ODM增删改查\"><a href=\"#ODM增删改查\" class=\"headerlink\" title=\"ODM增删改查\"></a>ODM增删改查</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> mongoengine <span class=\"keyword\">import</span> connect, DynamicDocument, EmbeddedDocument, StringField, \\</span><br><span class=\"line\">\t\tIntField, FloatField, DateTimeField, ListField</span><br><span class=\"line\"></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>, host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"string\">&#x27;27017&#x27;</span>, username=<span class=\"string\">&#x27;xxx&#x27;</span>, password=<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grade</span>(<span class=\"params\">EmbeddedDocument</span>):</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  </span><br><span class=\"line\">SEX_CHOICES = (</span><br><span class=\"line\">    (<span class=\"string\">&#x27;female&#x27;</span>, <span class=\"string\">&#x27;女&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;male&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">DynamicDocument</span>):</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoODM</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;查询一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Student.objects.first()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;查询所有数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Student.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_by_id</span>(<span class=\"params\">self, <span class=\"built_in\">id</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;根据id查询&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"built_in\">id</span>).first()</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;修改一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).update_one(inc__age=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_many</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;修改多条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).update(inc__age=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;删除一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).first().delete()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_many</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;删除多条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).delete()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;新增一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    yuwen = Grade(</span><br><span class=\"line\">      name=<span class=\"string\">&#x27;语文&#x27;</span>,</span><br><span class=\"line\">      score=<span class=\"number\">95</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    stu_obj = Student(</span><br><span class=\"line\">      name=<span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">      age=<span class=\"number\">21</span>,</span><br><span class=\"line\">      sex=<span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">      grades=[yuwen]</span><br><span class=\"line\">    )</span><br><span class=\"line\">    stu_obj.remark = <span class=\"string\">&#x27;remark&#x27;</span></span><br><span class=\"line\">    stu_obj.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stu_obj</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍python中操作mongodb的方法</p><p>更新于 2021-11-14</p>\n          </div>\n\n\n\n<h2 id=\"安装pymongo\"><a href=\"#安装pymongo\" class=\"headerlink\" title=\"安装pymongo\"></a>安装pymongo</h2><p>mongodb提供了<code>pymongo</code>来进行mongodb的操作，执行下面的命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pymongo</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"连接mongodb\"><a href=\"#连接mongodb\" class=\"headerlink\" title=\"连接mongodb\"></a>连接mongodb</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一：指定地址端口方式连接</span></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"number\">27017</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二：指定URL方式连接</span></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>mongodb默认自己带了线程池，所以连接之后无需主动关闭</p>\n</blockquote>\n<br>\n\n<h2 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a>查询数据</h2><h3 id=\"查询数据库信息\"><a href=\"#查询数据库信息\" class=\"headerlink\" title=\"查询数据库信息\"></a>查询数据库信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前连接的数据库端口</span></span><br><span class=\"line\">client.PORT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前连接的数据库地址</span></span><br><span class=\"line\">client.HOST</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有的数据库</span></span><br><span class=\"line\">client.database_names()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.&lt;数据库名字&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询一条数据\"><a href=\"#查询一条数据\" class=\"headerlink\" title=\"查询一条数据\"></a>查询一条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.find_one()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有条件查询</span></span><br><span class=\"line\">rest = db.blog.posts.find_one(&#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询多条数据\"><a href=\"#查询多条数据\" class=\"headerlink\" title=\"查询多条数据\"></a>查询多条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.find()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有条件查询</span></span><br><span class=\"line\">rest = db.blog.posts.find(&#123;<span class=\"string\">&#x27;author&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"根据ID查询数据\"><a href=\"#根据ID查询数据\" class=\"headerlink\" title=\"根据ID查询数据\"></a>根据ID查询数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"><span class=\"keyword\">from</span> bson.objectid <span class=\"keyword\">import</span> ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.find()</span><br><span class=\"line\"><span class=\"built_in\">id</span> = <span class=\"string\">&quot;xxxxxxxxxxxx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj = ObjectId(oid)</span><br><span class=\"line\">rest = db.blog.posts.find_one(&#123;<span class=\"string\">&#x27;_id&#x27;</span>: obj&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mongo中的id是一个对象，查询的时候也要将id转换为对象进行查询</p>\n</blockquote>\n<br>\n\n<h2 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 待插入的文档</span></span><br><span class=\"line\">post = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;xxxx&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;content&#x27;</span>: <span class=\"string\">&#x27;sssss&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;author&#x27;</span>: <span class=\"string\">&#x27;qqqq&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入数据</span></span><br><span class=\"line\">rest = db.blog.posts.insert_one(post)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入成功后会返回id</span></span><br><span class=\"line\">print(rest.inserted_id)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h2><h3 id=\"修改一条数据\"><a href=\"#修改一条数据\" class=\"headerlink\" title=\"修改一条数据\"></a>修改一条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.update_one(&#123;<span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;first&#x27;</span>&#125;, &#123;<span class=\"string\">&#x27;$inc&#x27;</span>: &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">3</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配的行数</span></span><br><span class=\"line\">print(rest.matched_count)</span><br><span class=\"line\"><span class=\"comment\"># 修改的行数</span></span><br><span class=\"line\">print(rest.modified_count)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>匹配到<code>title</code>为<code>first</code>的记录，给每个记录的<code>x</code>增加3，如果没有则设置为3</p>\n</blockquote>\n<h3 id=\"修改多条数据\"><a href=\"#修改多条数据\" class=\"headerlink\" title=\"修改多条数据\"></a>修改多条数据</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\">rest = db.blog.posts.update_many(&#123;&#125;, &#123;<span class=\"string\">&#x27;$inc&#x27;</span>: &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配的行数</span></span><br><span class=\"line\">print(rest.matched_count)</span><br><span class=\"line\"><span class=\"comment\"># 修改的行数</span></span><br><span class=\"line\">print(rest.modified_count)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>修改所有的数据，将<code>x</code>字段增加1，如果没有则设置为1</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\"></span><br><span class=\"line\">client = MongoClient(<span class=\"string\">&#x27;mongodb://localhost:27017/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接到数据库</span></span><br><span class=\"line\">db = client.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一条数据</span></span><br><span class=\"line\">rest = db.blog.posts.delete_one(&#123;<span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;xxxxx&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除多条数据</span></span><br><span class=\"line\">rest = db.blog.posts.delete_many(&#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印删除的行数</span></span><br><span class=\"line\">print(rest.deleted_count)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"ORM方式操作mongodb\"><a href=\"#ORM方式操作mongodb\" class=\"headerlink\" title=\"ORM方式操作mongodb\"></a>ORM方式操作mongodb</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>ORM方式操作需要安装<code>mongoengine</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install mongoengine</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>这里以连接<code>students</code>库为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mongoengine <span class=\"keyword\">import</span> connect</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式一、指定端口和地址</span></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>, host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"string\">&#x27;27017&#x27;</span>, username=<span class=\"string\">&#x27;xxx&#x27;</span>, password=<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式二、指定url方式</span></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>， host=<span class=\"string\">&#x27;mongodb://username:password@127.0.0.1/database_name&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ODM模型\"><a href=\"#ODM模型\" class=\"headerlink\" title=\"ODM模型\"></a>ODM模型</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> mongoengine <span class=\"keyword\">import</span> connect, DynamicDocument, EmbeddedDocument, StringField, \\</span><br><span class=\"line\">\t\tIntField, FloatField, DateTimeField, ListField</span><br><span class=\"line\"></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>, host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"string\">&#x27;27017&#x27;</span>, username=<span class=\"string\">&#x27;xxx&#x27;</span>, password=<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grade</span>(<span class=\"params\">EmbeddedDocument</span>):</span></span><br><span class=\"line\">  name = StringField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  score = FloatField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">SEX_CHOICES = (</span><br><span class=\"line\">    (<span class=\"string\">&#x27;female&#x27;</span>, <span class=\"string\">&#x27;女&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;male&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">DynamicDocument</span>):</span></span><br><span class=\"line\">  name = StringField(required=<span class=\"literal\">True</span>, max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">  age = IntField(required=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  sex = StringField(required=<span class=\"literal\">True</span>, choices=SEX_CHOICES)</span><br><span class=\"line\">  grade = FloatField()</span><br><span class=\"line\">  create_at = DateTimeField(default=datetime.now())</span><br><span class=\"line\">  grades = ListField(EmbeddedDocumentField(Grade))</span><br><span class=\"line\">  </span><br><span class=\"line\">  meta = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;collection&#x27;</span>: <span class=\"string\">&#x27;students&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;ordering&#x27;</span>: [<span class=\"string\">&#x27;-age&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>1、EmbeddedDocumentField 表示引用嵌套文档</p>\n<p>2、DynamicDocument 的好处是可以随时增加字段，而不用修改class中的内容</p>\n</blockquote>\n<h3 id=\"ODM增删改查\"><a href=\"#ODM增删改查\" class=\"headerlink\" title=\"ODM增删改查\"></a>ODM增删改查</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> mongoengine <span class=\"keyword\">import</span> connect, DynamicDocument, EmbeddedDocument, StringField, \\</span><br><span class=\"line\">\t\tIntField, FloatField, DateTimeField, ListField</span><br><span class=\"line\"></span><br><span class=\"line\">conn = connect(<span class=\"string\">&#x27;students&#x27;</span>, host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, port=<span class=\"string\">&#x27;27017&#x27;</span>, username=<span class=\"string\">&#x27;xxx&#x27;</span>, password=<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grade</span>(<span class=\"params\">EmbeddedDocument</span>):</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  </span><br><span class=\"line\">SEX_CHOICES = (</span><br><span class=\"line\">    (<span class=\"string\">&#x27;female&#x27;</span>, <span class=\"string\">&#x27;女&#x27;</span>),</span><br><span class=\"line\">    (<span class=\"string\">&#x27;male&#x27;</span>, <span class=\"string\">&#x27;男&#x27;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">DynamicDocument</span>):</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MongoODM</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;查询一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Student.objects.first()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;查询所有数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Student.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_by_id</span>(<span class=\"params\">self, <span class=\"built_in\">id</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;根据id查询&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=<span class=\"built_in\">id</span>).first()</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;修改一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).update_one(inc__age=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_many</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;修改多条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).update(inc__age=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;删除一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).first().delete()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_many</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;删除多条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    rest = Student.objects.<span class=\"built_in\">filter</span>(sex=<span class=\"string\">&#x27;male&#x27;</span>).delete()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rest</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_one</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;新增一条数据&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    yuwen = Grade(</span><br><span class=\"line\">      name=<span class=\"string\">&#x27;语文&#x27;</span>,</span><br><span class=\"line\">      score=<span class=\"number\">95</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    stu_obj = Student(</span><br><span class=\"line\">      name=<span class=\"string\">&#x27;tom&#x27;</span>,</span><br><span class=\"line\">      age=<span class=\"number\">21</span>,</span><br><span class=\"line\">      sex=<span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">      grades=[yuwen]</span><br><span class=\"line\">    )</span><br><span class=\"line\">    stu_obj.remark = <span class=\"string\">&#x27;remark&#x27;</span></span><br><span class=\"line\">    stu_obj.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stu_obj</span><br></pre></td></tr></table></figure>\n\n"},{"title":"python操作redis","date":"2021-11-14T10:35:50.000Z","description":"python中操作redis数据库的方法","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic3.zhimg.com%2Fv2-dbddf93833cd73caf69f480667f5d8ef_1200x500.jpg&refer=http%3A%2F%2Fpic3.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639478194&t=62e3ee9e66298b24db779cc13e0024d1","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍python中操作redis的方法\n\n更新于 2021-11-14\n\n{% endnote %}\n\n\n\n\n\n# 安装\n\n首先需要安装`redis`包：\n\n```bash\n$ pip install redis\n```\n\n\n\n<br>\n\n\n\n# 代码\n\n这里将redis操作都放到了一个类中：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport redis\n\n\nclass RedisOperator(object):\n    '''\n        redis相关操作\n    '''\n\n    def __init__(self):\n        self.redis_host = '1.1.1.1'\n        self.redis_port = '6379'\n        self.redis_pass = 'redis123'\n        self.redis_db = 0\n        self.redis_extime = 60\t# 过期时间，不设置就永不过期\n\n    def __connect(self):\n        '''连接redis'''\n        redis_host = self.redis_host\n        redis_port = self.redis_port\n        redis_pass = self.redis_pass\n        redis_db = self.redis_db\n\n        redis_db_url = {\n            'host': redis_host,\n            'port': redis_port,\n            'password': redis_pass,\n            'db': redis_db\n        }\n\n        return redis.Redis(**redis_db_url)\n\n    def get_redis_data(self, key):\n        '''查询key值，如果key不存在则返回None'''\n        conn = self.__connect()\n        data = conn.get(key)\n\n        return data\n\n    def set_redis_data(self, key, value):\n        '''设置键值对，如果键值对已经存在则覆盖原来的值'''\n        conn = self.__connect()\n        data = value\n        conn.set(\n            name = key,\n            value = data,\n            ex = self.redis_extime\n        )\n\n        return 0\n```\n\n","source":"_posts/python操作redis.md","raw":"---\ntitle: python操作redis\ndate: 2021-11-14 18:35:50\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- DB操作\ndescription: python中操作redis数据库的方法\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic3.zhimg.com%2Fv2-dbddf93833cd73caf69f480667f5d8ef_1200x500.jpg&refer=http%3A%2F%2Fpic3.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1639478194&t=62e3ee9e66298b24db779cc13e0024d1\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文介绍python中操作redis的方法\n\n更新于 2021-11-14\n\n{% endnote %}\n\n\n\n\n\n# 安装\n\n首先需要安装`redis`包：\n\n```bash\n$ pip install redis\n```\n\n\n\n<br>\n\n\n\n# 代码\n\n这里将redis操作都放到了一个类中：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport redis\n\n\nclass RedisOperator(object):\n    '''\n        redis相关操作\n    '''\n\n    def __init__(self):\n        self.redis_host = '1.1.1.1'\n        self.redis_port = '6379'\n        self.redis_pass = 'redis123'\n        self.redis_db = 0\n        self.redis_extime = 60\t# 过期时间，不设置就永不过期\n\n    def __connect(self):\n        '''连接redis'''\n        redis_host = self.redis_host\n        redis_port = self.redis_port\n        redis_pass = self.redis_pass\n        redis_db = self.redis_db\n\n        redis_db_url = {\n            'host': redis_host,\n            'port': redis_port,\n            'password': redis_pass,\n            'db': redis_db\n        }\n\n        return redis.Redis(**redis_db_url)\n\n    def get_redis_data(self, key):\n        '''查询key值，如果key不存在则返回None'''\n        conn = self.__connect()\n        data = conn.get(key)\n\n        return data\n\n    def set_redis_data(self, key, value):\n        '''设置键值对，如果键值对已经存在则覆盖原来的值'''\n        conn = self.__connect()\n        data = value\n        conn.set(\n            name = key,\n            value = data,\n            ex = self.redis_extime\n        )\n\n        return 0\n```\n\n","slug":"python操作redis","published":1,"updated":"2021-11-14T10:43:23.328Z","_id":"ckvz3yevz0001y7kl8gc00xmk","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍python中操作redis的方法</p><p>更新于 2021-11-14</p>\n          </div>\n\n\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>首先需要安装<code>redis</code>包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install redis</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>这里将redis操作都放到了一个类中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisOperator</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        redis相关操作</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.redis_host = <span class=\"string\">&#x27;1.1.1.1&#x27;</span></span><br><span class=\"line\">        self.redis_port = <span class=\"string\">&#x27;6379&#x27;</span></span><br><span class=\"line\">        self.redis_pass = <span class=\"string\">&#x27;redis123&#x27;</span></span><br><span class=\"line\">        self.redis_db = <span class=\"number\">0</span></span><br><span class=\"line\">        self.redis_extime = <span class=\"number\">60</span>\t<span class=\"comment\"># 过期时间，不设置就永不过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__connect</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;连接redis&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        redis_host = self.redis_host</span><br><span class=\"line\">        redis_port = self.redis_port</span><br><span class=\"line\">        redis_pass = self.redis_pass</span><br><span class=\"line\">        redis_db = self.redis_db</span><br><span class=\"line\"></span><br><span class=\"line\">        redis_db_url = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;host&#x27;</span>: redis_host,</span><br><span class=\"line\">            <span class=\"string\">&#x27;port&#x27;</span>: redis_port,</span><br><span class=\"line\">            <span class=\"string\">&#x27;password&#x27;</span>: redis_pass,</span><br><span class=\"line\">            <span class=\"string\">&#x27;db&#x27;</span>: redis_db</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redis.Redis(**redis_db_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_redis_data</span>(<span class=\"params\">self, key</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;查询key值，如果key不存在则返回None&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = conn.get(key)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_redis_data</span>(<span class=\"params\">self, key, value</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;设置键值对，如果键值对已经存在则覆盖原来的值&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = value</span><br><span class=\"line\">        conn.<span class=\"built_in\">set</span>(</span><br><span class=\"line\">            name = key,</span><br><span class=\"line\">            value = data,</span><br><span class=\"line\">            ex = self.redis_extime</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文介绍python中操作redis的方法</p><p>更新于 2021-11-14</p>\n          </div>\n\n\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>首先需要安装<code>redis</code>包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install redis</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>这里将redis操作都放到了一个类中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisOperator</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        redis相关操作</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.redis_host = <span class=\"string\">&#x27;1.1.1.1&#x27;</span></span><br><span class=\"line\">        self.redis_port = <span class=\"string\">&#x27;6379&#x27;</span></span><br><span class=\"line\">        self.redis_pass = <span class=\"string\">&#x27;redis123&#x27;</span></span><br><span class=\"line\">        self.redis_db = <span class=\"number\">0</span></span><br><span class=\"line\">        self.redis_extime = <span class=\"number\">60</span>\t<span class=\"comment\"># 过期时间，不设置就永不过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__connect</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;连接redis&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        redis_host = self.redis_host</span><br><span class=\"line\">        redis_port = self.redis_port</span><br><span class=\"line\">        redis_pass = self.redis_pass</span><br><span class=\"line\">        redis_db = self.redis_db</span><br><span class=\"line\"></span><br><span class=\"line\">        redis_db_url = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;host&#x27;</span>: redis_host,</span><br><span class=\"line\">            <span class=\"string\">&#x27;port&#x27;</span>: redis_port,</span><br><span class=\"line\">            <span class=\"string\">&#x27;password&#x27;</span>: redis_pass,</span><br><span class=\"line\">            <span class=\"string\">&#x27;db&#x27;</span>: redis_db</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redis.Redis(**redis_db_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_redis_data</span>(<span class=\"params\">self, key</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;查询key值，如果key不存在则返回None&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = conn.get(key)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_redis_data</span>(<span class=\"params\">self, key, value</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;设置键值对，如果键值对已经存在则覆盖原来的值&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = value</span><br><span class=\"line\">        conn.<span class=\"built_in\">set</span>(</span><br><span class=\"line\">            name = key,</span><br><span class=\"line\">            value = data,</span><br><span class=\"line\">            ex = self.redis_extime</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"python读取不同格式的配置文件方式","date":"2021-11-21T06:38:08.000Z","description":"python读取常见格式的配置文件的方式","cover":"https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00086-578.jpg","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n介绍python中读取常见配置文件的方式\n\n更新于 2021-11-21\n\n{% endnote %}\n\n<br>\n\n\n\n## ini类型配置文件\n\n\n\n### 配置文件格式\n\n首先定义一个配置文件如下的格式：\n\n```ini\n# host.ini\n[localdb]  \nhost     = 127.0.0.1  \nuser     = root  \npassword = 123456  \nport     = 3306  \ndatabase = mysql \n```\n\n\n\n>  `[localdb]`表示一个分组，下面的变量使用`key-value`格式\n\n\n\n### 读取配置文件\n\n读取配置文件是利用python内置的`configparser`标准库，对配置文件进行解析。\n\n```python\n>>> from configparser import ConfigParser  \n>>> cfg = ConfigParser()  \n>>> cfg.read(\"host.ini\")  \n['/root/host.ini']  \n>>> cfg.items(\"localdb\")  \n[('host', '127.0.0.1'), ('user', 'root'), ('password', '123456'), ('port', '3306'), ('database', 'mysql')]  \n>>> dict(cfg.items(\"localdb\"))\n{'host': '127.0.0.1', 'user': 'root', 'password': '123456', 'port': '3306', 'database': 'mysql'}\n```\n\n\n\n或者定义一个类，用来读取配置文件：\n\n```python\n# getconfig.py\nimport os\nfrom configparser import ConfigParser \n\n\nclass Getconfig(object):\n\n    def getconfig(self, section, key):\n        conf = ConfigParser()\n        path = os.path.split(os.path.realpath(__file__))[0] + '/config/host.ini'\n        conf.read(path)\n        return conf.get(section, key)\n```\n\n\n\n这个类接收两个参数：\n\n- `section`为配置文件中的分组的名称，如`register`；\n- `key`为配置文件中分组下的key名，如`title`；\n\n\n\n使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：\n\n```python\nimport getconfig\n\nconfig = getconfig.Getconfig()\nregist_port = config.getconfig('localdb', 'port')\n```\n\n<br>\n\n\n\n## json格式配置文件\n\n### 配置文件格式\n\n```json\n// db.json\n{  \n    \"localdb\":{  \n        \"host\": \"127.0.0.1\",  \n        \"user\": \"root\",  \n        \"password\": \"123456\",  \n        \"port\": 3306,  \n        \"database\": \"mysql\"  \n    }  \n}    \n```\n\n\n\n### 读取配置文件\n\npython中可以直接用`json`标准库将json解析为字典进行操作：\n\n```python\n>>> import json  \n>>> from pprint import pprint  \n>>>   \n>>> with open('/Users/Bobot/db.json') as j:  \n...     cfg = json.load(j)['localdb']  \n...   \n>>> pprint(cfg)  \n{'database': 'mysql',  \n 'host': '127.0.0.1',  \n 'password': '123456',  \n 'port': 3306,  \n 'user': 'root'} \n```\n\n\n\njson格式的配置文件写注释不是很方便，而且如果配置文件嵌套过多容易出现问题。\n\n<br>\n\n\n\n## toml类型配置文件\n\n\n\n### 配置文件格式\n\n```toml\n# config.toml\n[mysql]  \nhost     = \"127.0.0.1\"  \nuser     = \"root\"  \nport     = 3306  \ndatabase = \"test\"  \n  \n  [mysql.parameters]  \n  pool_size = 5  \n  charset   = \"utf8\"  \n  \n  [mysql.fields]  \n  pandas_cols = [ \"id\", \"name\", \"age\", \"date\"]  \n```\n\n\n\ntoml有点类似ini格式的配置文件，但是toml支持更多的数据类型，例如数组、时间戳等。\n\n\n\n### 读取配置文件\n\n首先需要安装一个包：\n\n```bash\n$ pip install toml\n```\n\n\n\n然后读取toml配置文件，将其转化为一个字典：\n\n```python\n>>> import toml  \n>>> import os  \n>>> from pprint import pprint  \n>>> cfg = toml.load(os.path.expanduser(\"~/Desktop/config.toml\"))  \n>>> pprint(cfg)  \n{'mysql': {'database': 'test',  \n           'fields': {'pandas_cols': ['id', 'name', 'age', 'date']},  \n           'host': '127.0.0.1',  \n           'parameters': {'charset': 'utf8', 'pool_size': 5},  \n           'port': 3306,  \n           'user': 'root'}}  \n```\n\n\n\n<br>\n\n\n\n## yaml/yml格式配置文件\n\n\n\n### 配置文件格式\n\n```yaml\n# config.yaml\nmysql:  \n  host: \"127.0.0.1\"  \n  port: 3306  \n  user: \"root\"  \n  password: \"123456\"  \n  database: \"test\"  \n  \n  parameter:  \n    pool_size: 5  \n    charset: \"utf8\"  \n  \n  fields:  \n    pandas_cols:   \n      - id  \n      - name  \n      - age  \n      - date  \n```\n\n\n\n### 读取配置文件\n\n首先需要安装yaml包：\n\n```bash\n$ pip install yaml\n```\n\n\n\n`yaml`包包含`load()`和`safe_load()`方法，但是推荐使用`safe_load()`方法，因为`load()`方法会带来安全问题，可能会直接运行植入在yaml文件中的攻击命令。\n\n```python\n>>> import os  \n>>> from pprint import pprint  \n>>>   \n>>> with open(os.path.expanduser(\"~/config.yaml\"), \"r\") as config:  \n...     cfg = yaml.safe_load(config)  \n...   \n>>> pprint(cfg)  \n{'mysql': {'database': 'test',  \n           'fields': {'pandas_cols': ['id', 'name', 'age', 'date']},  \n           'host': '127.0.0.1',  \n           'parameter': {'charset': 'utf8', 'pool_size': 5},  \n           'password': '123456',  \n           'port': 3306,  \n           'user': 'root'}}  \n```\n\n","source":"_posts/python读取不同格式的配置文件方式.md","raw":"---\ntitle: python读取不同格式的配置文件方式\ndate: 2021-11-21 14:38:08\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- 文件I/O\ndescription: python读取常见格式的配置文件的方式\ncover: https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00086-578.jpg\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n介绍python中读取常见配置文件的方式\n\n更新于 2021-11-21\n\n{% endnote %}\n\n<br>\n\n\n\n## ini类型配置文件\n\n\n\n### 配置文件格式\n\n首先定义一个配置文件如下的格式：\n\n```ini\n# host.ini\n[localdb]  \nhost     = 127.0.0.1  \nuser     = root  \npassword = 123456  \nport     = 3306  \ndatabase = mysql \n```\n\n\n\n>  `[localdb]`表示一个分组，下面的变量使用`key-value`格式\n\n\n\n### 读取配置文件\n\n读取配置文件是利用python内置的`configparser`标准库，对配置文件进行解析。\n\n```python\n>>> from configparser import ConfigParser  \n>>> cfg = ConfigParser()  \n>>> cfg.read(\"host.ini\")  \n['/root/host.ini']  \n>>> cfg.items(\"localdb\")  \n[('host', '127.0.0.1'), ('user', 'root'), ('password', '123456'), ('port', '3306'), ('database', 'mysql')]  \n>>> dict(cfg.items(\"localdb\"))\n{'host': '127.0.0.1', 'user': 'root', 'password': '123456', 'port': '3306', 'database': 'mysql'}\n```\n\n\n\n或者定义一个类，用来读取配置文件：\n\n```python\n# getconfig.py\nimport os\nfrom configparser import ConfigParser \n\n\nclass Getconfig(object):\n\n    def getconfig(self, section, key):\n        conf = ConfigParser()\n        path = os.path.split(os.path.realpath(__file__))[0] + '/config/host.ini'\n        conf.read(path)\n        return conf.get(section, key)\n```\n\n\n\n这个类接收两个参数：\n\n- `section`为配置文件中的分组的名称，如`register`；\n- `key`为配置文件中分组下的key名，如`title`；\n\n\n\n使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：\n\n```python\nimport getconfig\n\nconfig = getconfig.Getconfig()\nregist_port = config.getconfig('localdb', 'port')\n```\n\n<br>\n\n\n\n## json格式配置文件\n\n### 配置文件格式\n\n```json\n// db.json\n{  \n    \"localdb\":{  \n        \"host\": \"127.0.0.1\",  \n        \"user\": \"root\",  \n        \"password\": \"123456\",  \n        \"port\": 3306,  \n        \"database\": \"mysql\"  \n    }  \n}    \n```\n\n\n\n### 读取配置文件\n\npython中可以直接用`json`标准库将json解析为字典进行操作：\n\n```python\n>>> import json  \n>>> from pprint import pprint  \n>>>   \n>>> with open('/Users/Bobot/db.json') as j:  \n...     cfg = json.load(j)['localdb']  \n...   \n>>> pprint(cfg)  \n{'database': 'mysql',  \n 'host': '127.0.0.1',  \n 'password': '123456',  \n 'port': 3306,  \n 'user': 'root'} \n```\n\n\n\njson格式的配置文件写注释不是很方便，而且如果配置文件嵌套过多容易出现问题。\n\n<br>\n\n\n\n## toml类型配置文件\n\n\n\n### 配置文件格式\n\n```toml\n# config.toml\n[mysql]  \nhost     = \"127.0.0.1\"  \nuser     = \"root\"  \nport     = 3306  \ndatabase = \"test\"  \n  \n  [mysql.parameters]  \n  pool_size = 5  \n  charset   = \"utf8\"  \n  \n  [mysql.fields]  \n  pandas_cols = [ \"id\", \"name\", \"age\", \"date\"]  \n```\n\n\n\ntoml有点类似ini格式的配置文件，但是toml支持更多的数据类型，例如数组、时间戳等。\n\n\n\n### 读取配置文件\n\n首先需要安装一个包：\n\n```bash\n$ pip install toml\n```\n\n\n\n然后读取toml配置文件，将其转化为一个字典：\n\n```python\n>>> import toml  \n>>> import os  \n>>> from pprint import pprint  \n>>> cfg = toml.load(os.path.expanduser(\"~/Desktop/config.toml\"))  \n>>> pprint(cfg)  \n{'mysql': {'database': 'test',  \n           'fields': {'pandas_cols': ['id', 'name', 'age', 'date']},  \n           'host': '127.0.0.1',  \n           'parameters': {'charset': 'utf8', 'pool_size': 5},  \n           'port': 3306,  \n           'user': 'root'}}  \n```\n\n\n\n<br>\n\n\n\n## yaml/yml格式配置文件\n\n\n\n### 配置文件格式\n\n```yaml\n# config.yaml\nmysql:  \n  host: \"127.0.0.1\"  \n  port: 3306  \n  user: \"root\"  \n  password: \"123456\"  \n  database: \"test\"  \n  \n  parameter:  \n    pool_size: 5  \n    charset: \"utf8\"  \n  \n  fields:  \n    pandas_cols:   \n      - id  \n      - name  \n      - age  \n      - date  \n```\n\n\n\n### 读取配置文件\n\n首先需要安装yaml包：\n\n```bash\n$ pip install yaml\n```\n\n\n\n`yaml`包包含`load()`和`safe_load()`方法，但是推荐使用`safe_load()`方法，因为`load()`方法会带来安全问题，可能会直接运行植入在yaml文件中的攻击命令。\n\n```python\n>>> import os  \n>>> from pprint import pprint  \n>>>   \n>>> with open(os.path.expanduser(\"~/config.yaml\"), \"r\") as config:  \n...     cfg = yaml.safe_load(config)  \n...   \n>>> pprint(cfg)  \n{'mysql': {'database': 'test',  \n           'fields': {'pandas_cols': ['id', 'name', 'age', 'date']},  \n           'host': '127.0.0.1',  \n           'parameter': {'charset': 'utf8', 'pool_size': 5},  \n           'password': '123456',  \n           'port': 3306,  \n           'user': 'root'}}  \n```\n\n","slug":"python读取不同格式的配置文件方式","published":1,"updated":"2021-11-21T06:42:34.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw8vi56m000044kl1phf5xfb","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>介绍python中读取常见配置文件的方式</p><p>更新于 2021-11-21</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"ini类型配置文件\"><a href=\"#ini类型配置文件\" class=\"headerlink\" title=\"ini类型配置文件\"></a>ini类型配置文件</h2><h3 id=\"配置文件格式\"><a href=\"#配置文件格式\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><p>首先定义一个配置文件如下的格式：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># host.ini</span></span><br><span class=\"line\"><span class=\"section\">[localdb]</span>  </span><br><span class=\"line\"><span class=\"attr\">host</span>     = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>  </span><br><span class=\"line\"><span class=\"attr\">user</span>     = root  </span><br><span class=\"line\"><span class=\"attr\">password</span> = <span class=\"number\">123456</span>  </span><br><span class=\"line\"><span class=\"attr\">port</span>     = <span class=\"number\">3306</span>  </span><br><span class=\"line\"><span class=\"attr\">database</span> = mysql </span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> <code>[localdb]</code>表示一个分组，下面的变量使用<code>key-value</code>格式</p>\n</blockquote>\n<h3 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>读取配置文件是利用python内置的<code>configparser</code>标准库，对配置文件进行解析。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> configparser <span class=\"keyword\">import</span> ConfigParser  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg = ConfigParser()  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg.read(<span class=\"string\">&quot;host.ini&quot;</span>)  </span><br><span class=\"line\">[<span class=\"string\">&#x27;/root/host.ini&#x27;</span>]  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg.items(<span class=\"string\">&quot;localdb&quot;</span>)  </span><br><span class=\"line\">[(<span class=\"string\">&#x27;host&#x27;</span>, <span class=\"string\">&#x27;127.0.0.1&#x27;</span>), (<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"string\">&#x27;root&#x27;</span>), (<span class=\"string\">&#x27;password&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>), (<span class=\"string\">&#x27;port&#x27;</span>, <span class=\"string\">&#x27;3306&#x27;</span>), (<span class=\"string\">&#x27;database&#x27;</span>, <span class=\"string\">&#x27;mysql&#x27;</span>)]  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">dict</span>(cfg.items(<span class=\"string\">&quot;localdb&quot;</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;123456&#x27;</span>, <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"string\">&#x27;3306&#x27;</span>, <span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;mysql&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者定义一个类，用来读取配置文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getconfig.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> configparser <span class=\"keyword\">import</span> ConfigParser </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Getconfig</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getconfig</span>(<span class=\"params\">self, section, key</span>):</span></span><br><span class=\"line\">        conf = ConfigParser()</span><br><span class=\"line\">        path = os.path.split(os.path.realpath(__file__))[<span class=\"number\">0</span>] + <span class=\"string\">&#x27;/config/host.ini&#x27;</span></span><br><span class=\"line\">        conf.read(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> conf.get(section, key)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个类接收两个参数：</p>\n<ul>\n<li><code>section</code>为配置文件中的分组的名称，如<code>register</code>；</li>\n<li><code>key</code>为配置文件中分组下的key名，如<code>title</code>；</li>\n</ul>\n<p>使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getconfig</span><br><span class=\"line\"></span><br><span class=\"line\">config = getconfig.Getconfig()</span><br><span class=\"line\">regist_port = config.getconfig(<span class=\"string\">&#x27;localdb&#x27;</span>, <span class=\"string\">&#x27;port&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"json格式配置文件\"><a href=\"#json格式配置文件\" class=\"headerlink\" title=\"json格式配置文件\"></a>json格式配置文件</h2><h3 id=\"配置文件格式-1\"><a href=\"#配置文件格式-1\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.json</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"attr\">&quot;localdb&quot;</span>:&#123;  </span><br><span class=\"line\">        <span class=\"attr\">&quot;host&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;user&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;password&quot;</span>: <span class=\"string\">&quot;123456&quot;</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;port&quot;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;database&quot;</span>: <span class=\"string\">&quot;mysql&quot;</span>  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取配置文件-1\"><a href=\"#读取配置文件-1\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>python中可以直接用<code>json</code>标准库将json解析为字典进行操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/Users/Bobot/db.json&#x27;</span>) <span class=\"keyword\">as</span> j:  </span><br><span class=\"line\"><span class=\"meta\">... </span>    cfg = json.load(j)[<span class=\"string\">&#x27;localdb&#x27;</span>]  </span><br><span class=\"line\"><span class=\"meta\">... </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pprint(cfg)  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;mysql&#x27;</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;123456&#x27;</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<p>json格式的配置文件写注释不是很方便，而且如果配置文件嵌套过多容易出现问题。</p>\n<br>\n\n\n\n<h2 id=\"toml类型配置文件\"><a href=\"#toml类型配置文件\" class=\"headerlink\" title=\"toml类型配置文件\"></a>toml类型配置文件</h2><h3 id=\"配置文件格式-2\"><a href=\"#配置文件格式-2\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.toml</span></span><br><span class=\"line\"><span class=\"section\">[mysql]</span>  </span><br><span class=\"line\"><span class=\"attr\">host</span>     = <span class=\"string\">&quot;127.0.0.1&quot;</span>  </span><br><span class=\"line\"><span class=\"attr\">user</span>     = <span class=\"string\">&quot;root&quot;</span>  </span><br><span class=\"line\"><span class=\"attr\">port</span>     = <span class=\"number\">3306</span>  </span><br><span class=\"line\"><span class=\"attr\">database</span> = <span class=\"string\">&quot;test&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">[mysql.parameters]</span>  </span><br><span class=\"line\">  <span class=\"attr\">pool_size</span> = <span class=\"number\">5</span>  </span><br><span class=\"line\">  <span class=\"attr\">charset</span>   = <span class=\"string\">&quot;utf8&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">[mysql.fields]</span>  </span><br><span class=\"line\">  <span class=\"attr\">pandas_cols</span> = [ <span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;age&quot;</span>, <span class=\"string\">&quot;date&quot;</span>]  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>toml有点类似ini格式的配置文件，但是toml支持更多的数据类型，例如数组、时间戳等。</p>\n<h3 id=\"读取配置文件-2\"><a href=\"#读取配置文件-2\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>首先需要安装一个包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install toml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后读取toml配置文件，将其转化为一个字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> toml  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg = toml.load(os.path.expanduser(<span class=\"string\">&quot;~/Desktop/config.toml&quot;</span>))  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pprint(cfg)  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;mysql&#x27;</span>: &#123;<span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;test&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;fields&#x27;</span>: &#123;<span class=\"string\">&#x27;pandas_cols&#x27;</span>: [<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;date&#x27;</span>]&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;parameters&#x27;</span>: &#123;<span class=\"string\">&#x27;charset&#x27;</span>: <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"string\">&#x27;pool_size&#x27;</span>: <span class=\"number\">5</span>&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;&#125;  </span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"yaml-yml格式配置文件\"><a href=\"#yaml-yml格式配置文件\" class=\"headerlink\" title=\"yaml/yml格式配置文件\"></a>yaml/yml格式配置文件</h2><h3 id=\"配置文件格式-3\"><a href=\"#配置文件格式-3\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">mysql:</span>  </span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3306</span>  </span><br><span class=\"line\">  <span class=\"attr\">user:</span> <span class=\"string\">&quot;root&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">&quot;123456&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">database:</span> <span class=\"string\">&quot;test&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">parameter:</span>  </span><br><span class=\"line\">    <span class=\"attr\">pool_size:</span> <span class=\"number\">5</span>  </span><br><span class=\"line\">    <span class=\"attr\">charset:</span> <span class=\"string\">&quot;utf8&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">fields:</span>  </span><br><span class=\"line\">    <span class=\"attr\">pandas_cols:</span>   </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">id</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">name</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">age</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">date</span>  </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取配置文件-3\"><a href=\"#读取配置文件-3\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>首先需要安装yaml包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>yaml</code>包包含<code>load()</code>和<code>safe_load()</code>方法，但是推荐使用<code>safe_load()</code>方法，因为<code>load()</code>方法会带来安全问题，可能会直接运行植入在yaml文件中的攻击命令。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.expanduser(<span class=\"string\">&quot;~/config.yaml&quot;</span>), <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> config:  </span><br><span class=\"line\"><span class=\"meta\">... </span>    cfg = yaml.safe_load(config)  </span><br><span class=\"line\"><span class=\"meta\">... </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pprint(cfg)  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;mysql&#x27;</span>: &#123;<span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;test&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;fields&#x27;</span>: &#123;<span class=\"string\">&#x27;pandas_cols&#x27;</span>: [<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;date&#x27;</span>]&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;parameter&#x27;</span>: &#123;<span class=\"string\">&#x27;charset&#x27;</span>: <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"string\">&#x27;pool_size&#x27;</span>: <span class=\"number\">5</span>&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;123456&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;&#125;  </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>介绍python中读取常见配置文件的方式</p><p>更新于 2021-11-21</p>\n          </div>\n\n<br>\n\n\n\n<h2 id=\"ini类型配置文件\"><a href=\"#ini类型配置文件\" class=\"headerlink\" title=\"ini类型配置文件\"></a>ini类型配置文件</h2><h3 id=\"配置文件格式\"><a href=\"#配置文件格式\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><p>首先定义一个配置文件如下的格式：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># host.ini</span></span><br><span class=\"line\"><span class=\"section\">[localdb]</span>  </span><br><span class=\"line\"><span class=\"attr\">host</span>     = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>  </span><br><span class=\"line\"><span class=\"attr\">user</span>     = root  </span><br><span class=\"line\"><span class=\"attr\">password</span> = <span class=\"number\">123456</span>  </span><br><span class=\"line\"><span class=\"attr\">port</span>     = <span class=\"number\">3306</span>  </span><br><span class=\"line\"><span class=\"attr\">database</span> = mysql </span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> <code>[localdb]</code>表示一个分组，下面的变量使用<code>key-value</code>格式</p>\n</blockquote>\n<h3 id=\"读取配置文件\"><a href=\"#读取配置文件\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>读取配置文件是利用python内置的<code>configparser</code>标准库，对配置文件进行解析。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> configparser <span class=\"keyword\">import</span> ConfigParser  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg = ConfigParser()  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg.read(<span class=\"string\">&quot;host.ini&quot;</span>)  </span><br><span class=\"line\">[<span class=\"string\">&#x27;/root/host.ini&#x27;</span>]  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg.items(<span class=\"string\">&quot;localdb&quot;</span>)  </span><br><span class=\"line\">[(<span class=\"string\">&#x27;host&#x27;</span>, <span class=\"string\">&#x27;127.0.0.1&#x27;</span>), (<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"string\">&#x27;root&#x27;</span>), (<span class=\"string\">&#x27;password&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>), (<span class=\"string\">&#x27;port&#x27;</span>, <span class=\"string\">&#x27;3306&#x27;</span>), (<span class=\"string\">&#x27;database&#x27;</span>, <span class=\"string\">&#x27;mysql&#x27;</span>)]  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">dict</span>(cfg.items(<span class=\"string\">&quot;localdb&quot;</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;123456&#x27;</span>, <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"string\">&#x27;3306&#x27;</span>, <span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;mysql&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者定义一个类，用来读取配置文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getconfig.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> configparser <span class=\"keyword\">import</span> ConfigParser </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Getconfig</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getconfig</span>(<span class=\"params\">self, section, key</span>):</span></span><br><span class=\"line\">        conf = ConfigParser()</span><br><span class=\"line\">        path = os.path.split(os.path.realpath(__file__))[<span class=\"number\">0</span>] + <span class=\"string\">&#x27;/config/host.ini&#x27;</span></span><br><span class=\"line\">        conf.read(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> conf.get(section, key)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个类接收两个参数：</p>\n<ul>\n<li><code>section</code>为配置文件中的分组的名称，如<code>register</code>；</li>\n<li><code>key</code>为配置文件中分组下的key名，如<code>title</code>；</li>\n</ul>\n<p>使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getconfig</span><br><span class=\"line\"></span><br><span class=\"line\">config = getconfig.Getconfig()</span><br><span class=\"line\">regist_port = config.getconfig(<span class=\"string\">&#x27;localdb&#x27;</span>, <span class=\"string\">&#x27;port&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"json格式配置文件\"><a href=\"#json格式配置文件\" class=\"headerlink\" title=\"json格式配置文件\"></a>json格式配置文件</h2><h3 id=\"配置文件格式-1\"><a href=\"#配置文件格式-1\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// db.json</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"attr\">&quot;localdb&quot;</span>:&#123;  </span><br><span class=\"line\">        <span class=\"attr\">&quot;host&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;user&quot;</span>: <span class=\"string\">&quot;root&quot;</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;password&quot;</span>: <span class=\"string\">&quot;123456&quot;</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;port&quot;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\">        <span class=\"attr\">&quot;database&quot;</span>: <span class=\"string\">&quot;mysql&quot;</span>  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取配置文件-1\"><a href=\"#读取配置文件-1\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>python中可以直接用<code>json</code>标准库将json解析为字典进行操作：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> json  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/Users/Bobot/db.json&#x27;</span>) <span class=\"keyword\">as</span> j:  </span><br><span class=\"line\"><span class=\"meta\">... </span>    cfg = json.load(j)[<span class=\"string\">&#x27;localdb&#x27;</span>]  </span><br><span class=\"line\"><span class=\"meta\">... </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pprint(cfg)  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;mysql&#x27;</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;123456&#x27;</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\"> <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n<p>json格式的配置文件写注释不是很方便，而且如果配置文件嵌套过多容易出现问题。</p>\n<br>\n\n\n\n<h2 id=\"toml类型配置文件\"><a href=\"#toml类型配置文件\" class=\"headerlink\" title=\"toml类型配置文件\"></a>toml类型配置文件</h2><h3 id=\"配置文件格式-2\"><a href=\"#配置文件格式-2\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.toml</span></span><br><span class=\"line\"><span class=\"section\">[mysql]</span>  </span><br><span class=\"line\"><span class=\"attr\">host</span>     = <span class=\"string\">&quot;127.0.0.1&quot;</span>  </span><br><span class=\"line\"><span class=\"attr\">user</span>     = <span class=\"string\">&quot;root&quot;</span>  </span><br><span class=\"line\"><span class=\"attr\">port</span>     = <span class=\"number\">3306</span>  </span><br><span class=\"line\"><span class=\"attr\">database</span> = <span class=\"string\">&quot;test&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">[mysql.parameters]</span>  </span><br><span class=\"line\">  <span class=\"attr\">pool_size</span> = <span class=\"number\">5</span>  </span><br><span class=\"line\">  <span class=\"attr\">charset</span>   = <span class=\"string\">&quot;utf8&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"section\">[mysql.fields]</span>  </span><br><span class=\"line\">  <span class=\"attr\">pandas_cols</span> = [ <span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;age&quot;</span>, <span class=\"string\">&quot;date&quot;</span>]  </span><br></pre></td></tr></table></figure>\n\n\n\n<p>toml有点类似ini格式的配置文件，但是toml支持更多的数据类型，例如数组、时间戳等。</p>\n<h3 id=\"读取配置文件-2\"><a href=\"#读取配置文件-2\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>首先需要安装一个包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install toml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后读取toml配置文件，将其转化为一个字典：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> toml  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cfg = toml.load(os.path.expanduser(<span class=\"string\">&quot;~/Desktop/config.toml&quot;</span>))  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pprint(cfg)  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;mysql&#x27;</span>: &#123;<span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;test&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;fields&#x27;</span>: &#123;<span class=\"string\">&#x27;pandas_cols&#x27;</span>: [<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;date&#x27;</span>]&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;parameters&#x27;</span>: &#123;<span class=\"string\">&#x27;charset&#x27;</span>: <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"string\">&#x27;pool_size&#x27;</span>: <span class=\"number\">5</span>&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;&#125;  </span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"yaml-yml格式配置文件\"><a href=\"#yaml-yml格式配置文件\" class=\"headerlink\" title=\"yaml/yml格式配置文件\"></a>yaml/yml格式配置文件</h2><h3 id=\"配置文件格式-3\"><a href=\"#配置文件格式-3\" class=\"headerlink\" title=\"配置文件格式\"></a>配置文件格式</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">mysql:</span>  </span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">&quot;127.0.0.1&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">3306</span>  </span><br><span class=\"line\">  <span class=\"attr\">user:</span> <span class=\"string\">&quot;root&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"string\">&quot;123456&quot;</span>  </span><br><span class=\"line\">  <span class=\"attr\">database:</span> <span class=\"string\">&quot;test&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">parameter:</span>  </span><br><span class=\"line\">    <span class=\"attr\">pool_size:</span> <span class=\"number\">5</span>  </span><br><span class=\"line\">    <span class=\"attr\">charset:</span> <span class=\"string\">&quot;utf8&quot;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">fields:</span>  </span><br><span class=\"line\">    <span class=\"attr\">pandas_cols:</span>   </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">id</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">name</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">age</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">date</span>  </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"读取配置文件-3\"><a href=\"#读取配置文件-3\" class=\"headerlink\" title=\"读取配置文件\"></a>读取配置文件</h3><p>首先需要安装yaml包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>yaml</code>包包含<code>load()</code>和<code>safe_load()</code>方法，但是推荐使用<code>safe_load()</code>方法，因为<code>load()</code>方法会带来安全问题，可能会直接运行植入在yaml文件中的攻击命令。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.expanduser(<span class=\"string\">&quot;~/config.yaml&quot;</span>), <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> config:  </span><br><span class=\"line\"><span class=\"meta\">... </span>    cfg = yaml.safe_load(config)  </span><br><span class=\"line\"><span class=\"meta\">... </span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pprint(cfg)  </span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;mysql&#x27;</span>: &#123;<span class=\"string\">&#x27;database&#x27;</span>: <span class=\"string\">&#x27;test&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;fields&#x27;</span>: &#123;<span class=\"string\">&#x27;pandas_cols&#x27;</span>: [<span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;date&#x27;</span>]&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;host&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;parameter&#x27;</span>: &#123;<span class=\"string\">&#x27;charset&#x27;</span>: <span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"string\">&#x27;pool_size&#x27;</span>: <span class=\"number\">5</span>&#125;,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;123456&#x27;</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;port&#x27;</span>: <span class=\"number\">3306</span>,  </span><br><span class=\"line\">           <span class=\"string\">&#x27;user&#x27;</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;&#125;  </span><br></pre></td></tr></table></figure>\n\n"},{"title":"linux上安装python","date":"2021-11-21T06:45:46.000Z","description":"在Linux上安装python3","cover":"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=185678737,1186265065&fm=26&gp=0.jpg","_content":"\n\n\n\n\n>  这里以安装`python3.7.3`版本为例。\n\n\n\n安装依赖：\n\n```bash\n$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel\n```\n\n\n\n下载并解压python包：\n\n```bash\nwget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz \ntar zxf Python-3.7.3.tgz\ncd Python-3.7.3\n```\n\n\n\n编译安装：\n\n```bash\n./configure --prefix=/usr/local/python3.7\nmake && make install\n```\n\n\n\n备份原来的python：\n\n```bash\nmv /usr/bin/python /usr/bin/python.bak\n```\n\n\n\n创建软连接：\n\n```bash\nln -s /usr/local/python3.7/bin/python3.7 /usr/bin/python\nln -s /usr/local/python3.7/bin/pip3 /usr/local/bin/\n```\n\n\n\n验证，使用如下命令，如果输出版本为3.7.3则安装成功：\n\n```bash\npython -V\n```\n\n\n\n\n\n修改yum文件：\n\n编辑`/usr/bin/yum`和`/usr/libexec/urlgrabber-ext-down`，将文件头的`#!/usr/bin/python`改为`#!/usr/bin/python2`即可。\n\n\n\n\n\n","source":"_posts/linux上安装python.md","raw":"---\ntitle: linux上安装python\ndate: 2021-11-21 14:45:46\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- 安装部署\ndescription: 在Linux上安装python3\ncover: https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=185678737,1186265065&fm=26&gp=0.jpg\n---\n\n\n\n\n\n>  这里以安装`python3.7.3`版本为例。\n\n\n\n安装依赖：\n\n```bash\n$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel\n```\n\n\n\n下载并解压python包：\n\n```bash\nwget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz \ntar zxf Python-3.7.3.tgz\ncd Python-3.7.3\n```\n\n\n\n编译安装：\n\n```bash\n./configure --prefix=/usr/local/python3.7\nmake && make install\n```\n\n\n\n备份原来的python：\n\n```bash\nmv /usr/bin/python /usr/bin/python.bak\n```\n\n\n\n创建软连接：\n\n```bash\nln -s /usr/local/python3.7/bin/python3.7 /usr/bin/python\nln -s /usr/local/python3.7/bin/pip3 /usr/local/bin/\n```\n\n\n\n验证，使用如下命令，如果输出版本为3.7.3则安装成功：\n\n```bash\npython -V\n```\n\n\n\n\n\n修改yum文件：\n\n编辑`/usr/bin/yum`和`/usr/libexec/urlgrabber-ext-down`，将文件头的`#!/usr/bin/python`改为`#!/usr/bin/python2`即可。\n\n\n\n\n\n","slug":"linux上安装python","published":1,"updated":"2021-11-21T06:47:47.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw8voxk6000011kl8dz973yu","content":"<blockquote>\n<p> 这里以安装<code>python3.7.3</code>版本为例。</p>\n</blockquote>\n<p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下载并解压python包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz </span><br><span class=\"line\">tar zxf Python-3.7.3.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.7.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>编译安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>备份原来的python：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /usr/bin/python /usr/bin/python.bak</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建软连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/python3.7 /usr/bin/python</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/pip3 /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>验证，使用如下命令，如果输出版本为3.7.3则安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改yum文件：</p>\n<p>编辑<code>/usr/bin/yum</code>和<code>/usr/libexec/urlgrabber-ext-down</code>，将文件头的<code>#!/usr/bin/python</code>改为<code>#!/usr/bin/python2</code>即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> 这里以安装<code>python3.7.3</code>版本为例。</p>\n</blockquote>\n<p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下载并解压python包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz </span><br><span class=\"line\">tar zxf Python-3.7.3.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Python-3.7.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>编译安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>备份原来的python：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /usr/bin/python /usr/bin/python.bak</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建软连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/python3.7 /usr/bin/python</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/pip3 /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>验证，使用如下命令，如果输出版本为3.7.3则安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -V</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改yum文件：</p>\n<p>编辑<code>/usr/bin/yum</code>和<code>/usr/libexec/urlgrabber-ext-down</code>，将文件头的<code>#!/usr/bin/python</code>改为<code>#!/usr/bin/python2</code>即可。</p>\n"},{"title":"MacOS安装mysqlclient失败","date":"2021-11-21T06:49:14.000Z","description":"在macos系统上安装mysqlclient报错的解决方案","cover":"https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00465-2468.jpg","_content":"\n\n\n\n\n在mac上的django项目中安装mysqlclient时出现如下的报错：\n\n`ld: library not found for -lssl`\n\n\n\n这个问题可能是两个原因导致的：\n\n1、没有安装openssl，可以使用如下的方式安装：\n\n```shell\n$ brew install openssl\n$ pip install mysqlclient\n```\n\n\n\n2、pip寻找依赖机制问题，需要指定openssl库：\n\n```shell\n$ LDFLAGS=-L/usr/local/opt/openssl/lib pip install mysqlclient\n```\n\n\n\n还有一种可能是报这种错误：\n\n```bash\nIn file included from MySQLdb/_mysql.c:29:\n    In file included from /usr/local/opt/mysql-client/include/mysql/mysql.h:45:\n    In file included from /Library/Developer/CommandLineTools/usr/lib/clang/12.0.0/include/stdint.h:52:\n    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:53:\n    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:30:\n    /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h:37:2: error: architecture not supported\n    #error architecture not supported\n\n```\n\n\n\n原因是xcode 12编译了 ARM64 版本的二进制文档导致了异常的抛出，使用下面方式解决：\n\n```bash\n$ ARCHFLAGS=\"-arch x86_64\"   pip install mysqlclient\n```\n\n","source":"_posts/MacOS安装mysqlclient失败.md","raw":"---\ntitle: MacOS安装mysqlclient失败\ndate: 2021-11-21 14:49:14\ntags:\n- Python\ncategories:\n- 编程\n- Python\n- 安装部署\ndescription: 在macos系统上安装mysqlclient报错的解决方案\ncover: https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00465-2468.jpg\n---\n\n\n\n\n\n在mac上的django项目中安装mysqlclient时出现如下的报错：\n\n`ld: library not found for -lssl`\n\n\n\n这个问题可能是两个原因导致的：\n\n1、没有安装openssl，可以使用如下的方式安装：\n\n```shell\n$ brew install openssl\n$ pip install mysqlclient\n```\n\n\n\n2、pip寻找依赖机制问题，需要指定openssl库：\n\n```shell\n$ LDFLAGS=-L/usr/local/opt/openssl/lib pip install mysqlclient\n```\n\n\n\n还有一种可能是报这种错误：\n\n```bash\nIn file included from MySQLdb/_mysql.c:29:\n    In file included from /usr/local/opt/mysql-client/include/mysql/mysql.h:45:\n    In file included from /Library/Developer/CommandLineTools/usr/lib/clang/12.0.0/include/stdint.h:52:\n    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:53:\n    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:30:\n    /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h:37:2: error: architecture not supported\n    #error architecture not supported\n\n```\n\n\n\n原因是xcode 12编译了 ARM64 版本的二进制文档导致了异常的抛出，使用下面方式解决：\n\n```bash\n$ ARCHFLAGS=\"-arch x86_64\"   pip install mysqlclient\n```\n\n","slug":"MacOS安装mysqlclient失败","published":1,"updated":"2021-11-21T06:51:08.055Z","_id":"ckw8vsajj0000i0kl15yh7mpl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在mac上的django项目中安装mysqlclient时出现如下的报错：</p>\n<p><code>ld: library not found for -lssl</code></p>\n<p>这个问题可能是两个原因导致的：</p>\n<p>1、没有安装openssl，可以使用如下的方式安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install openssl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、pip寻找依赖机制问题，需要指定openssl库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> LDFLAGS=-L/usr/<span class=\"built_in\">local</span>/opt/openssl/lib pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>还有一种可能是报这种错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In file included from MySQLdb/_mysql.c:29:</span><br><span class=\"line\">    In file included from /usr/<span class=\"built_in\">local</span>/opt/mysql-client/include/mysql/mysql.h:45:</span><br><span class=\"line\">    In file included from /Library/Developer/CommandLineTools/usr/lib/clang/12.0.0/include/stdint.h:52:</span><br><span class=\"line\">    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:53:</span><br><span class=\"line\">    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:30:</span><br><span class=\"line\">    /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h:37:2: error: architecture not supported</span><br><span class=\"line\">    <span class=\"comment\">#error architecture not supported</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>原因是xcode 12编译了 ARM64 版本的二进制文档导致了异常的抛出，使用下面方式解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ARCHFLAGS=<span class=\"string\">&quot;-arch x86_64&quot;</span>   pip install mysqlclient</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在mac上的django项目中安装mysqlclient时出现如下的报错：</p>\n<p><code>ld: library not found for -lssl</code></p>\n<p>这个问题可能是两个原因导致的：</p>\n<p>1、没有安装openssl，可以使用如下的方式安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install openssl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、pip寻找依赖机制问题，需要指定openssl库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> LDFLAGS=-L/usr/<span class=\"built_in\">local</span>/opt/openssl/lib pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>还有一种可能是报这种错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In file included from MySQLdb/_mysql.c:29:</span><br><span class=\"line\">    In file included from /usr/<span class=\"built_in\">local</span>/opt/mysql-client/include/mysql/mysql.h:45:</span><br><span class=\"line\">    In file included from /Library/Developer/CommandLineTools/usr/lib/clang/12.0.0/include/stdint.h:52:</span><br><span class=\"line\">    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:53:</span><br><span class=\"line\">    In file included from /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:30:</span><br><span class=\"line\">    /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/machine/types.h:37:2: error: architecture not supported</span><br><span class=\"line\">    <span class=\"comment\">#error architecture not supported</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>原因是xcode 12编译了 ARM64 版本的二进制文档导致了异常的抛出，使用下面方式解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ARCHFLAGS=<span class=\"string\">&quot;-arch x86_64&quot;</span>   pip install mysqlclient</span><br></pre></td></tr></table></figure>\n\n"},{"title":"关于tcp_tw_reuse","date":"2022-01-09T09:44:43.000Z","description":"关于tcp time_wait状态以及tcp_tw_reuse参数","cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fnimg.ws.126.net%2F%3Furl%3Dhttp%253A%252F%252Fdingyue.ws.126.net%252F2021%252F0604%252F7491de18p00qu5v9u002bd000hr00bfp.png%26thumbnail%3D650x2147483647%26quality%3D80%26type%3Djpg&refer=http%3A%2F%2Fnimg.ws.126.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644313581&t=7541d461db6bfd27ef887ce66e11b514","_content":"\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了什么是TIME_WAIT状态，涉及TIME_WAIT状态的原因以及 tcp_tw_reuse参数的用途\n\n更新于 2022-01-09\n\n{% endnote %}\n\n<br>\n\n\n\n# 什么是TIME_WAIT状态\n\n\n\n下图是tcp四次挥手时的状态转换图：\n\n<img src=\"./4huishou.png\" style=\"zoom:70%;\" />\n\n大致的文字描述如下：\n\n- 客户端主动断开连接，会发送一个 TCP 首部 FIN标志位为1的报文给服务端，并将自己的状态转换为 FIN_WAIT_1；\n- 服务端收到报文后，会向客户端发送ACK报文，并将自己的状态转为 CLOSED_WAIT状态；\n- 客户端收到ACK报文后，进入FIN_WAIT_2状态；\n- 服务端处理完消息后，将发送FIN报文到客户端，随即服务端进入LAST_ACK状态；\n- 客户端收到FIN报文后，会发送ACK报文到服务端，然后进入TIME_WAIT状态；\n- 服务器收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭；\n- 客户端在经过 2MSL一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭；\n\n\n\n总结一下有如下的特点：\n\n1. 两个方向：服务端和客户端，都需要发送FIN和ACK报文；\n2. 主动关闭连接的一方才有TIME_WAIT状态；\n\n\n\n可以看到，TIME_WAIT 是主动断开连接的一方最后一个状态，该状态将持续2MSL，MSL指报文在网络上最大的生存时间，任何超过这个时间的数据都将被丢弃， Linux 默认为 30 秒，那么 2MSL 就是 60 秒；\n\n> MSL 是由网络层的 IP 包中的 TTL 来保证的，TTL 是 IP 头部的一个字段，用于设置一个数据报可经过的路由器的数量上限。报文每经过一次路由器的转发，IP 头部的 TTL 字段就会减 1，减到 0 时报文就被丢弃。MSL 与 TTL 的区别：MSL 的单位是时间，而 TTL 是经过路由跳数。所以 **MSL 应该要大于等于 TTL 消耗为 0 的时间**，以确保报文已被自然消亡\n\n\n\n# 为什么设计TIME_WAIT状态\n\n设计TIME_WAIT状态主要有以下两个原因：\n\n1. 保证「被动关闭连接」的一方，能被正确的关闭；\n2. 防止历史连接中的数据，被后面相同四元组的连接错误的接收；\n\n\n\n## 防止历史连接中的数据，被后面相同四元组的连接错误的接收\n\n每个tcp报文会包含一个序列号（SEQ），是 TCP 一个头部字段，标识了 TCP 发送端到 TCP 接收端的数据流的一个字节，因为 TCP 是面向字节流的可靠协议，为了保证消息的顺序性和可靠性，TCP 为每个传输方向上的每个字节都赋予了一个编号，以便于传输成功后确认、丢失后重传以及在接收端保证不会乱序。**序列号是一个 32 位的无符号数，因此在到达 4G 之后再循环回到 0**。\n\n\n\n在TCP建立的时候，客户端和服务端都会各自生成一个初始序列号，它是基于时钟生成的一个随机数，来保证每个连接都拥有不同的初始序列号。**初始化序列号可被视为一个 32 位的计数器，该计数器的数值每 4 微秒加 1，循环一次需要 4.55 小时**。\n\n\n\n> **序列号和初始化序列号并不是无限递增的，会发生回绕为初始值的情况，这意味着无法根据序列号来判断新老数据**。\n\n\n\n<img src=\"./qc.png\" style=\"zoom:70%;\" />\n\n- 服务端在关闭连接之前发送的 `SEQ = 301` 报文，被网络延迟了。\n- 接着，服务端以相同的四元组重新打开了新连接，前面被延迟的 `SEQ = 301`这时抵达了客户端，而且该数据报文的序列号刚好在客户端接收窗口内，因此客户端会正常接收这个数据报文，但是这个数据报文是上一个连接残留下来的，这样就产生数据错乱等严重的问题。\n\n\n\n> TIME_WAIT持续2MSL时间足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。\n\n\n\n## 保证「被动关闭连接」的一方，能被正确的关闭\n\n<img src=\"./qq.png\" style=\"zoom:70%;\" />\n\n\n\n如果客户端（主动关闭方）最后一次 ACK 报文（第四次挥手）在网络中丢失了，那么按照 TCP 可靠性原则，服务端（被动关闭方）会重发 FIN 报文。\n\n\n\n假设客户端没有 TIME_WAIT 状态，而是在发完最后一次回 ACK 报文就直接进入 CLOSED 状态，如果该  ACK 报文丢失了，服务端则重传的 FIN 报文，而这时客户端已经进入到关闭状态了，在收到服务端重传的 FIN 报文后，就会回 RST 报文。\n\n\n\n服务端收到这个 RST 并将其解释为一个错误（Connection reset by peer），这对于一个可靠的协议来说不是一个优雅的终止方式。\n\n\n\n所以客户端必须等待足够长的时间确保对端收到 ACK，如果对端没有收到 ACK，那么就会触发 TCP 重传机制，服务端会重新发送一个 FIN，这样一去一来刚好两个 MSL 的时间。\n\n\n\n# 什么是tcp_tw_reuse\n\n在linux下TIME_WAIT 状态的持续时间是 60 秒，这意味着这 60 秒内，客户端一直会占用着这个端口，这个会造成资源浪费，因为linux一般客户端可开启的端口在32768~61000，如果主动关闭连接方的 TIME_WAIT 状态过多，占满了所有端口资源，则会导致无法创建新连接。\n\n\n\n## 回收TIME_WAIT状态\n\nlinux提供了两个系统参数来快速回收TIME_WAIT 状态的连接，这两个参数都是默认关闭的：\n\n- net.ipv4.tcp_tw_reuse，如果开启该选项的话，客户端（连接发起方） 在调用 connect() 函数时，**内核会随机找一个 TIME_WAIT 状态超过 1 秒的连接给新的连接复用**，所以该选项只适用于连接发起方。\n- net.ipv4.tcp_tw_recycle，如果开启该选项的话，允许处于 TIME_WAIT 状态的连接被快速回收，该参数在NAT 的网络下是不安全的；\n\n\n\n> 要使得上面这两个参数生效，有一个前提条件，就是要打开 TCP 时间戳，即 net.ipv4.tcp_timestamps=1（默认即为 1）。\n\n\n\n开启了 tcp_timestamps 参数，TCP 头部就会使用时间戳选项，它有两个好处，**一个是便于精确计算 RTT ，另一个是能防止序列号回绕（PAWS）;\n\n在现代网速很快的情况下，网络中有大量的数据，由于序列号SEQ最大4G，达到上限后会重头开始计数，所以可能出现延迟的报文抵达后序列号依然有效的问题。\n\n\n\n假设 TCP 的发送窗口是 1 GB，并且使用了时间戳选项，发送方会为每个 TCP 报文分配时间戳数值，我们假设每个报文时间加 1，然后使用这个连接传输一个 6GB 大小的数据流。\n\n\n\n<img src=\"./gg.png\" style=\"zoom:70%;\" />\n\n32 位的序列号在时刻 D 和 E 之间回绕。假设在时刻B有一个报文丢失并被重传，又假设这个报文段在网络上绕了远路并在时刻 F 重新出现。如果 TCP 无法识别这个绕回的报文，那么数据完整性就会遭到破坏。使用时间戳选项能够有效的防止上述问题，如果丢失的报文会在时刻 F 重新出现，由于它的时间戳为 2，小于最近的有效时间戳（5 或 6），因此防回绕序列号算法（PAWS）会将其丢弃。\n\n\n\n> 防回绕序列号算法要求连接双方维护最近一次收到的数据包的时间戳（Recent TSval），每收到一个新数据包都会读取数据包中的时间戳值跟 Recent TSval 值做比较，**如果发现收到的数据包中时间戳不是递增的，则表示该数据包是过期的，就会直接丢弃这个数据包**。\n\n\n\n## 为什么 tcp_tw_reuse  默认是关闭\n\n开启 tcp_tw_reuse 的同时，也需要开启 tcp_timestamps，意味着可以用时间戳的方式有效的判断回绕序列号的历史报文。\n\n\n\n对于 **RST 报文的时间戳即使过期了，只要 RST 报文的序列号在对方的接收窗口内，也是能被接受的**。\n\n<img src=\"./rst.png\" style=\"zoom:70%;\" />\n\n\n\ntcp_validate_incoming 函数就是验证接收到的 TCP 报文是否合格的函数，其中第一步就会进行 PAWS 检查，由 tcp_paws_discard 函数负责，当 tcp_paws_discard 返回 true，就代表报文是一个历史报文，于是就要丢弃这个报文。但是在丢掉这个报文的时候，会先判断是不是 RST 报文，如果不是 RST 报文，才会将报文丢掉。也就是说，即使 RST 报文是一个历史报文，并不会被丢弃。\n\n\n\n<img src=\"./aaa.png\" style=\"zoom:70%;\" />\n\n\n\n- 客户端向一个还没有被服务端监听的端口发起了 HTTP 请求，接着服务端就会回 RST 报文给对方，很可惜的是 **RST 报文被网络阻塞了**。\n- 由于客户端迟迟没有收到 TCP 第二次握手，于是重发了 SYN 包，与此同时服务端已经开启了服务，监听了对应的端口。于是接下来，客户端和服务端就进行了 TCP 三次握手、数据传输（HTTP应答-响应）、四次挥手。\n- 因为**客户端开启了 tcp_tw_reuse，于是快速复用 TIME_WAIT 状态的端口，又与服务端建立了一个与刚才相同的四元组的连接**。\n- 接着，**前面被网络延迟 RST 报文这时抵达了客户端，而且 RST 报文的序列号在客户端的接收窗口内，由于防回绕序列号算法不会防止过期的 RST，所以 RST 报文会被客户端接受了，于是客户端的连接就断开了**。\n\n\n\n上面这个场景就是开启 tcp_tw_reuse 风险，因为快速复用 TIME_WAIT 状态的端口，导致新连接可能被回绕序列号的 RST 报文断开了，而如果不跳过 TIME_WAIT 状态，而是停留 2MSL 时长，那么这个 RST 报文就不会出现下一个新的连接。\n\n\n\n除此之外，开启 tcp_tw_reuse 来快速复用 TIME_WAIT 状态的连接，如果第四次挥手的 ACK 报文丢失了，有可能会导致被动关闭连接的一方不能被正常的关闭。\n\n<img src=\"./ss.png\" style=\"zoom:70%;\" />\n\n\n\n# 总结\n\ntcp_tw_reuse 的作用是让客户端快速复用处于 TIME_WAIT 状态的端口，相当于跳过了 TIME_WAIT 状态，这可能会出现这样的两个问题：\n\n- 历史 RST 报文可能会终止后面相同四元组的连接，因为 PAWS 检查到即使 RST 是过期的，也不会丢弃。\n- 如果第四次挥手的 ACK 报文丢失了，有可能被动关闭连接的一方不能被正常的关闭;\n\n虽然 TIME_WAIT 状态持续的时间是有一点长，显得很不友好，但是它被设计来就是用来避免发生乱七八糟的事情。\n","source":"_posts/关于tcp-tw-reuse.md","raw":"---\ntitle: 关于tcp_tw_reuse\ndate: 2022-01-09 17:44:43\ntags:\n- 面试\n- 网络\ncategories:\n- 面试\n- 操作系统\ndescription: 关于tcp time_wait状态以及tcp_tw_reuse参数\ncover: https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fnimg.ws.126.net%2F%3Furl%3Dhttp%253A%252F%252Fdingyue.ws.126.net%252F2021%252F0604%252F7491de18p00qu5v9u002bd000hr00bfp.png%26thumbnail%3D650x2147483647%26quality%3D80%26type%3Djpg&refer=http%3A%2F%2Fnimg.ws.126.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644313581&t=7541d461db6bfd27ef887ce66e11b514\n---\n\n\n\n{% note info 'fas fa-bullhorn' %}\n\n本文主要介绍了什么是TIME_WAIT状态，涉及TIME_WAIT状态的原因以及 tcp_tw_reuse参数的用途\n\n更新于 2022-01-09\n\n{% endnote %}\n\n<br>\n\n\n\n# 什么是TIME_WAIT状态\n\n\n\n下图是tcp四次挥手时的状态转换图：\n\n<img src=\"./4huishou.png\" style=\"zoom:70%;\" />\n\n大致的文字描述如下：\n\n- 客户端主动断开连接，会发送一个 TCP 首部 FIN标志位为1的报文给服务端，并将自己的状态转换为 FIN_WAIT_1；\n- 服务端收到报文后，会向客户端发送ACK报文，并将自己的状态转为 CLOSED_WAIT状态；\n- 客户端收到ACK报文后，进入FIN_WAIT_2状态；\n- 服务端处理完消息后，将发送FIN报文到客户端，随即服务端进入LAST_ACK状态；\n- 客户端收到FIN报文后，会发送ACK报文到服务端，然后进入TIME_WAIT状态；\n- 服务器收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭；\n- 客户端在经过 2MSL一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭；\n\n\n\n总结一下有如下的特点：\n\n1. 两个方向：服务端和客户端，都需要发送FIN和ACK报文；\n2. 主动关闭连接的一方才有TIME_WAIT状态；\n\n\n\n可以看到，TIME_WAIT 是主动断开连接的一方最后一个状态，该状态将持续2MSL，MSL指报文在网络上最大的生存时间，任何超过这个时间的数据都将被丢弃， Linux 默认为 30 秒，那么 2MSL 就是 60 秒；\n\n> MSL 是由网络层的 IP 包中的 TTL 来保证的，TTL 是 IP 头部的一个字段，用于设置一个数据报可经过的路由器的数量上限。报文每经过一次路由器的转发，IP 头部的 TTL 字段就会减 1，减到 0 时报文就被丢弃。MSL 与 TTL 的区别：MSL 的单位是时间，而 TTL 是经过路由跳数。所以 **MSL 应该要大于等于 TTL 消耗为 0 的时间**，以确保报文已被自然消亡\n\n\n\n# 为什么设计TIME_WAIT状态\n\n设计TIME_WAIT状态主要有以下两个原因：\n\n1. 保证「被动关闭连接」的一方，能被正确的关闭；\n2. 防止历史连接中的数据，被后面相同四元组的连接错误的接收；\n\n\n\n## 防止历史连接中的数据，被后面相同四元组的连接错误的接收\n\n每个tcp报文会包含一个序列号（SEQ），是 TCP 一个头部字段，标识了 TCP 发送端到 TCP 接收端的数据流的一个字节，因为 TCP 是面向字节流的可靠协议，为了保证消息的顺序性和可靠性，TCP 为每个传输方向上的每个字节都赋予了一个编号，以便于传输成功后确认、丢失后重传以及在接收端保证不会乱序。**序列号是一个 32 位的无符号数，因此在到达 4G 之后再循环回到 0**。\n\n\n\n在TCP建立的时候，客户端和服务端都会各自生成一个初始序列号，它是基于时钟生成的一个随机数，来保证每个连接都拥有不同的初始序列号。**初始化序列号可被视为一个 32 位的计数器，该计数器的数值每 4 微秒加 1，循环一次需要 4.55 小时**。\n\n\n\n> **序列号和初始化序列号并不是无限递增的，会发生回绕为初始值的情况，这意味着无法根据序列号来判断新老数据**。\n\n\n\n<img src=\"./qc.png\" style=\"zoom:70%;\" />\n\n- 服务端在关闭连接之前发送的 `SEQ = 301` 报文，被网络延迟了。\n- 接着，服务端以相同的四元组重新打开了新连接，前面被延迟的 `SEQ = 301`这时抵达了客户端，而且该数据报文的序列号刚好在客户端接收窗口内，因此客户端会正常接收这个数据报文，但是这个数据报文是上一个连接残留下来的，这样就产生数据错乱等严重的问题。\n\n\n\n> TIME_WAIT持续2MSL时间足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。\n\n\n\n## 保证「被动关闭连接」的一方，能被正确的关闭\n\n<img src=\"./qq.png\" style=\"zoom:70%;\" />\n\n\n\n如果客户端（主动关闭方）最后一次 ACK 报文（第四次挥手）在网络中丢失了，那么按照 TCP 可靠性原则，服务端（被动关闭方）会重发 FIN 报文。\n\n\n\n假设客户端没有 TIME_WAIT 状态，而是在发完最后一次回 ACK 报文就直接进入 CLOSED 状态，如果该  ACK 报文丢失了，服务端则重传的 FIN 报文，而这时客户端已经进入到关闭状态了，在收到服务端重传的 FIN 报文后，就会回 RST 报文。\n\n\n\n服务端收到这个 RST 并将其解释为一个错误（Connection reset by peer），这对于一个可靠的协议来说不是一个优雅的终止方式。\n\n\n\n所以客户端必须等待足够长的时间确保对端收到 ACK，如果对端没有收到 ACK，那么就会触发 TCP 重传机制，服务端会重新发送一个 FIN，这样一去一来刚好两个 MSL 的时间。\n\n\n\n# 什么是tcp_tw_reuse\n\n在linux下TIME_WAIT 状态的持续时间是 60 秒，这意味着这 60 秒内，客户端一直会占用着这个端口，这个会造成资源浪费，因为linux一般客户端可开启的端口在32768~61000，如果主动关闭连接方的 TIME_WAIT 状态过多，占满了所有端口资源，则会导致无法创建新连接。\n\n\n\n## 回收TIME_WAIT状态\n\nlinux提供了两个系统参数来快速回收TIME_WAIT 状态的连接，这两个参数都是默认关闭的：\n\n- net.ipv4.tcp_tw_reuse，如果开启该选项的话，客户端（连接发起方） 在调用 connect() 函数时，**内核会随机找一个 TIME_WAIT 状态超过 1 秒的连接给新的连接复用**，所以该选项只适用于连接发起方。\n- net.ipv4.tcp_tw_recycle，如果开启该选项的话，允许处于 TIME_WAIT 状态的连接被快速回收，该参数在NAT 的网络下是不安全的；\n\n\n\n> 要使得上面这两个参数生效，有一个前提条件，就是要打开 TCP 时间戳，即 net.ipv4.tcp_timestamps=1（默认即为 1）。\n\n\n\n开启了 tcp_timestamps 参数，TCP 头部就会使用时间戳选项，它有两个好处，**一个是便于精确计算 RTT ，另一个是能防止序列号回绕（PAWS）;\n\n在现代网速很快的情况下，网络中有大量的数据，由于序列号SEQ最大4G，达到上限后会重头开始计数，所以可能出现延迟的报文抵达后序列号依然有效的问题。\n\n\n\n假设 TCP 的发送窗口是 1 GB，并且使用了时间戳选项，发送方会为每个 TCP 报文分配时间戳数值，我们假设每个报文时间加 1，然后使用这个连接传输一个 6GB 大小的数据流。\n\n\n\n<img src=\"./gg.png\" style=\"zoom:70%;\" />\n\n32 位的序列号在时刻 D 和 E 之间回绕。假设在时刻B有一个报文丢失并被重传，又假设这个报文段在网络上绕了远路并在时刻 F 重新出现。如果 TCP 无法识别这个绕回的报文，那么数据完整性就会遭到破坏。使用时间戳选项能够有效的防止上述问题，如果丢失的报文会在时刻 F 重新出现，由于它的时间戳为 2，小于最近的有效时间戳（5 或 6），因此防回绕序列号算法（PAWS）会将其丢弃。\n\n\n\n> 防回绕序列号算法要求连接双方维护最近一次收到的数据包的时间戳（Recent TSval），每收到一个新数据包都会读取数据包中的时间戳值跟 Recent TSval 值做比较，**如果发现收到的数据包中时间戳不是递增的，则表示该数据包是过期的，就会直接丢弃这个数据包**。\n\n\n\n## 为什么 tcp_tw_reuse  默认是关闭\n\n开启 tcp_tw_reuse 的同时，也需要开启 tcp_timestamps，意味着可以用时间戳的方式有效的判断回绕序列号的历史报文。\n\n\n\n对于 **RST 报文的时间戳即使过期了，只要 RST 报文的序列号在对方的接收窗口内，也是能被接受的**。\n\n<img src=\"./rst.png\" style=\"zoom:70%;\" />\n\n\n\ntcp_validate_incoming 函数就是验证接收到的 TCP 报文是否合格的函数，其中第一步就会进行 PAWS 检查，由 tcp_paws_discard 函数负责，当 tcp_paws_discard 返回 true，就代表报文是一个历史报文，于是就要丢弃这个报文。但是在丢掉这个报文的时候，会先判断是不是 RST 报文，如果不是 RST 报文，才会将报文丢掉。也就是说，即使 RST 报文是一个历史报文，并不会被丢弃。\n\n\n\n<img src=\"./aaa.png\" style=\"zoom:70%;\" />\n\n\n\n- 客户端向一个还没有被服务端监听的端口发起了 HTTP 请求，接着服务端就会回 RST 报文给对方，很可惜的是 **RST 报文被网络阻塞了**。\n- 由于客户端迟迟没有收到 TCP 第二次握手，于是重发了 SYN 包，与此同时服务端已经开启了服务，监听了对应的端口。于是接下来，客户端和服务端就进行了 TCP 三次握手、数据传输（HTTP应答-响应）、四次挥手。\n- 因为**客户端开启了 tcp_tw_reuse，于是快速复用 TIME_WAIT 状态的端口，又与服务端建立了一个与刚才相同的四元组的连接**。\n- 接着，**前面被网络延迟 RST 报文这时抵达了客户端，而且 RST 报文的序列号在客户端的接收窗口内，由于防回绕序列号算法不会防止过期的 RST，所以 RST 报文会被客户端接受了，于是客户端的连接就断开了**。\n\n\n\n上面这个场景就是开启 tcp_tw_reuse 风险，因为快速复用 TIME_WAIT 状态的端口，导致新连接可能被回绕序列号的 RST 报文断开了，而如果不跳过 TIME_WAIT 状态，而是停留 2MSL 时长，那么这个 RST 报文就不会出现下一个新的连接。\n\n\n\n除此之外，开启 tcp_tw_reuse 来快速复用 TIME_WAIT 状态的连接，如果第四次挥手的 ACK 报文丢失了，有可能会导致被动关闭连接的一方不能被正常的关闭。\n\n<img src=\"./ss.png\" style=\"zoom:70%;\" />\n\n\n\n# 总结\n\ntcp_tw_reuse 的作用是让客户端快速复用处于 TIME_WAIT 状态的端口，相当于跳过了 TIME_WAIT 状态，这可能会出现这样的两个问题：\n\n- 历史 RST 报文可能会终止后面相同四元组的连接，因为 PAWS 检查到即使 RST 是过期的，也不会丢弃。\n- 如果第四次挥手的 ACK 报文丢失了，有可能被动关闭连接的一方不能被正常的关闭;\n\n虽然 TIME_WAIT 状态持续的时间是有一点长，显得很不友好，但是它被设计来就是用来避免发生乱七八糟的事情。\n","slug":"关于tcp-tw-reuse","published":1,"updated":"2022-01-09T10:33:29.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky74xt7g000096klbalxhw36","content":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了什么是TIME_WAIT状态，涉及TIME_WAIT状态的原因以及 tcp_tw_reuse参数的用途</p><p>更新于 2022-01-09</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"什么是TIME-WAIT状态\"><a href=\"#什么是TIME-WAIT状态\" class=\"headerlink\" title=\"什么是TIME_WAIT状态\"></a>什么是TIME_WAIT状态</h1><p>下图是tcp四次挥手时的状态转换图：</p>\n<img src= \"/img/loading.gif\" data-src=\"./4huishou.png\" style=\"zoom:70%;\" />\n\n<p>大致的文字描述如下：</p>\n<ul>\n<li>客户端主动断开连接，会发送一个 TCP 首部 FIN标志位为1的报文给服务端，并将自己的状态转换为 FIN_WAIT_1；</li>\n<li>服务端收到报文后，会向客户端发送ACK报文，并将自己的状态转为 CLOSED_WAIT状态；</li>\n<li>客户端收到ACK报文后，进入FIN_WAIT_2状态；</li>\n<li>服务端处理完消息后，将发送FIN报文到客户端，随即服务端进入LAST_ACK状态；</li>\n<li>客户端收到FIN报文后，会发送ACK报文到服务端，然后进入TIME_WAIT状态；</li>\n<li>服务器收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭；</li>\n<li>客户端在经过 2MSL一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭；</li>\n</ul>\n<p>总结一下有如下的特点：</p>\n<ol>\n<li>两个方向：服务端和客户端，都需要发送FIN和ACK报文；</li>\n<li>主动关闭连接的一方才有TIME_WAIT状态；</li>\n</ol>\n<p>可以看到，TIME_WAIT 是主动断开连接的一方最后一个状态，该状态将持续2MSL，MSL指报文在网络上最大的生存时间，任何超过这个时间的数据都将被丢弃， Linux 默认为 30 秒，那么 2MSL 就是 60 秒；</p>\n<blockquote>\n<p>MSL 是由网络层的 IP 包中的 TTL 来保证的，TTL 是 IP 头部的一个字段，用于设置一个数据报可经过的路由器的数量上限。报文每经过一次路由器的转发，IP 头部的 TTL 字段就会减 1，减到 0 时报文就被丢弃。MSL 与 TTL 的区别：MSL 的单位是时间，而 TTL 是经过路由跳数。所以 <strong>MSL 应该要大于等于 TTL 消耗为 0 的时间</strong>，以确保报文已被自然消亡</p>\n</blockquote>\n<h1 id=\"为什么设计TIME-WAIT状态\"><a href=\"#为什么设计TIME-WAIT状态\" class=\"headerlink\" title=\"为什么设计TIME_WAIT状态\"></a>为什么设计TIME_WAIT状态</h1><p>设计TIME_WAIT状态主要有以下两个原因：</p>\n<ol>\n<li>保证「被动关闭连接」的一方，能被正确的关闭；</li>\n<li>防止历史连接中的数据，被后面相同四元组的连接错误的接收；</li>\n</ol>\n<h2 id=\"防止历史连接中的数据，被后面相同四元组的连接错误的接收\"><a href=\"#防止历史连接中的数据，被后面相同四元组的连接错误的接收\" class=\"headerlink\" title=\"防止历史连接中的数据，被后面相同四元组的连接错误的接收\"></a>防止历史连接中的数据，被后面相同四元组的连接错误的接收</h2><p>每个tcp报文会包含一个序列号（SEQ），是 TCP 一个头部字段，标识了 TCP 发送端到 TCP 接收端的数据流的一个字节，因为 TCP 是面向字节流的可靠协议，为了保证消息的顺序性和可靠性，TCP 为每个传输方向上的每个字节都赋予了一个编号，以便于传输成功后确认、丢失后重传以及在接收端保证不会乱序。<strong>序列号是一个 32 位的无符号数，因此在到达 4G 之后再循环回到 0</strong>。</p>\n<p>在TCP建立的时候，客户端和服务端都会各自生成一个初始序列号，它是基于时钟生成的一个随机数，来保证每个连接都拥有不同的初始序列号。<strong>初始化序列号可被视为一个 32 位的计数器，该计数器的数值每 4 微秒加 1，循环一次需要 4.55 小时</strong>。</p>\n<blockquote>\n<p><strong>序列号和初始化序列号并不是无限递增的，会发生回绕为初始值的情况，这意味着无法根据序列号来判断新老数据</strong>。</p>\n</blockquote>\n<img src= \"/img/loading.gif\" data-src=\"./qc.png\" style=\"zoom:70%;\" />\n\n<ul>\n<li>服务端在关闭连接之前发送的 <code>SEQ = 301</code> 报文，被网络延迟了。</li>\n<li>接着，服务端以相同的四元组重新打开了新连接，前面被延迟的 <code>SEQ = 301</code>这时抵达了客户端，而且该数据报文的序列号刚好在客户端接收窗口内，因此客户端会正常接收这个数据报文，但是这个数据报文是上一个连接残留下来的，这样就产生数据错乱等严重的问题。</li>\n</ul>\n<blockquote>\n<p>TIME_WAIT持续2MSL时间足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。</p>\n</blockquote>\n<h2 id=\"保证「被动关闭连接」的一方，能被正确的关闭\"><a href=\"#保证「被动关闭连接」的一方，能被正确的关闭\" class=\"headerlink\" title=\"保证「被动关闭连接」的一方，能被正确的关闭\"></a>保证「被动关闭连接」的一方，能被正确的关闭</h2><img src= \"/img/loading.gif\" data-src=\"./qq.png\" style=\"zoom:70%;\" />\n\n\n\n<p>如果客户端（主动关闭方）最后一次 ACK 报文（第四次挥手）在网络中丢失了，那么按照 TCP 可靠性原则，服务端（被动关闭方）会重发 FIN 报文。</p>\n<p>假设客户端没有 TIME_WAIT 状态，而是在发完最后一次回 ACK 报文就直接进入 CLOSED 状态，如果该  ACK 报文丢失了，服务端则重传的 FIN 报文，而这时客户端已经进入到关闭状态了，在收到服务端重传的 FIN 报文后，就会回 RST 报文。</p>\n<p>服务端收到这个 RST 并将其解释为一个错误（Connection reset by peer），这对于一个可靠的协议来说不是一个优雅的终止方式。</p>\n<p>所以客户端必须等待足够长的时间确保对端收到 ACK，如果对端没有收到 ACK，那么就会触发 TCP 重传机制，服务端会重新发送一个 FIN，这样一去一来刚好两个 MSL 的时间。</p>\n<h1 id=\"什么是tcp-tw-reuse\"><a href=\"#什么是tcp-tw-reuse\" class=\"headerlink\" title=\"什么是tcp_tw_reuse\"></a>什么是tcp_tw_reuse</h1><p>在linux下TIME_WAIT 状态的持续时间是 60 秒，这意味着这 60 秒内，客户端一直会占用着这个端口，这个会造成资源浪费，因为linux一般客户端可开启的端口在32768~61000，如果主动关闭连接方的 TIME_WAIT 状态过多，占满了所有端口资源，则会导致无法创建新连接。</p>\n<h2 id=\"回收TIME-WAIT状态\"><a href=\"#回收TIME-WAIT状态\" class=\"headerlink\" title=\"回收TIME_WAIT状态\"></a>回收TIME_WAIT状态</h2><p>linux提供了两个系统参数来快速回收TIME_WAIT 状态的连接，这两个参数都是默认关闭的：</p>\n<ul>\n<li>net.ipv4.tcp_tw_reuse，如果开启该选项的话，客户端（连接发起方） 在调用 connect() 函数时，<strong>内核会随机找一个 TIME_WAIT 状态超过 1 秒的连接给新的连接复用</strong>，所以该选项只适用于连接发起方。</li>\n<li>net.ipv4.tcp_tw_recycle，如果开启该选项的话，允许处于 TIME_WAIT 状态的连接被快速回收，该参数在NAT 的网络下是不安全的；</li>\n</ul>\n<blockquote>\n<p>要使得上面这两个参数生效，有一个前提条件，就是要打开 TCP 时间戳，即 net.ipv4.tcp_timestamps=1（默认即为 1）。</p>\n</blockquote>\n<p>开启了 tcp_timestamps 参数，TCP 头部就会使用时间戳选项，它有两个好处，**一个是便于精确计算 RTT ，另一个是能防止序列号回绕（PAWS）;</p>\n<p>在现代网速很快的情况下，网络中有大量的数据，由于序列号SEQ最大4G，达到上限后会重头开始计数，所以可能出现延迟的报文抵达后序列号依然有效的问题。</p>\n<p>假设 TCP 的发送窗口是 1 GB，并且使用了时间戳选项，发送方会为每个 TCP 报文分配时间戳数值，我们假设每个报文时间加 1，然后使用这个连接传输一个 6GB 大小的数据流。</p>\n<img src= \"/img/loading.gif\" data-src=\"./gg.png\" style=\"zoom:70%;\" />\n\n<p>32 位的序列号在时刻 D 和 E 之间回绕。假设在时刻B有一个报文丢失并被重传，又假设这个报文段在网络上绕了远路并在时刻 F 重新出现。如果 TCP 无法识别这个绕回的报文，那么数据完整性就会遭到破坏。使用时间戳选项能够有效的防止上述问题，如果丢失的报文会在时刻 F 重新出现，由于它的时间戳为 2，小于最近的有效时间戳（5 或 6），因此防回绕序列号算法（PAWS）会将其丢弃。</p>\n<blockquote>\n<p>防回绕序列号算法要求连接双方维护最近一次收到的数据包的时间戳（Recent TSval），每收到一个新数据包都会读取数据包中的时间戳值跟 Recent TSval 值做比较，<strong>如果发现收到的数据包中时间戳不是递增的，则表示该数据包是过期的，就会直接丢弃这个数据包</strong>。</p>\n</blockquote>\n<h2 id=\"为什么-tcp-tw-reuse-默认是关闭\"><a href=\"#为什么-tcp-tw-reuse-默认是关闭\" class=\"headerlink\" title=\"为什么 tcp_tw_reuse  默认是关闭\"></a>为什么 tcp_tw_reuse  默认是关闭</h2><p>开启 tcp_tw_reuse 的同时，也需要开启 tcp_timestamps，意味着可以用时间戳的方式有效的判断回绕序列号的历史报文。</p>\n<p>对于 <strong>RST 报文的时间戳即使过期了，只要 RST 报文的序列号在对方的接收窗口内，也是能被接受的</strong>。</p>\n<img src= \"/img/loading.gif\" data-src=\"./rst.png\" style=\"zoom:70%;\" />\n\n\n\n<p>tcp_validate_incoming 函数就是验证接收到的 TCP 报文是否合格的函数，其中第一步就会进行 PAWS 检查，由 tcp_paws_discard 函数负责，当 tcp_paws_discard 返回 true，就代表报文是一个历史报文，于是就要丢弃这个报文。但是在丢掉这个报文的时候，会先判断是不是 RST 报文，如果不是 RST 报文，才会将报文丢掉。也就是说，即使 RST 报文是一个历史报文，并不会被丢弃。</p>\n<img src= \"/img/loading.gif\" data-src=\"./aaa.png\" style=\"zoom:70%;\" />\n\n\n\n<ul>\n<li>客户端向一个还没有被服务端监听的端口发起了 HTTP 请求，接着服务端就会回 RST 报文给对方，很可惜的是 <strong>RST 报文被网络阻塞了</strong>。</li>\n<li>由于客户端迟迟没有收到 TCP 第二次握手，于是重发了 SYN 包，与此同时服务端已经开启了服务，监听了对应的端口。于是接下来，客户端和服务端就进行了 TCP 三次握手、数据传输（HTTP应答-响应）、四次挥手。</li>\n<li>因为<strong>客户端开启了 tcp_tw_reuse，于是快速复用 TIME_WAIT 状态的端口，又与服务端建立了一个与刚才相同的四元组的连接</strong>。</li>\n<li>接着，<strong>前面被网络延迟 RST 报文这时抵达了客户端，而且 RST 报文的序列号在客户端的接收窗口内，由于防回绕序列号算法不会防止过期的 RST，所以 RST 报文会被客户端接受了，于是客户端的连接就断开了</strong>。</li>\n</ul>\n<p>上面这个场景就是开启 tcp_tw_reuse 风险，因为快速复用 TIME_WAIT 状态的端口，导致新连接可能被回绕序列号的 RST 报文断开了，而如果不跳过 TIME_WAIT 状态，而是停留 2MSL 时长，那么这个 RST 报文就不会出现下一个新的连接。</p>\n<p>除此之外，开启 tcp_tw_reuse 来快速复用 TIME_WAIT 状态的连接，如果第四次挥手的 ACK 报文丢失了，有可能会导致被动关闭连接的一方不能被正常的关闭。</p>\n<img src= \"/img/loading.gif\" data-src=\"./ss.png\" style=\"zoom:70%;\" />\n\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>tcp_tw_reuse 的作用是让客户端快速复用处于 TIME_WAIT 状态的端口，相当于跳过了 TIME_WAIT 状态，这可能会出现这样的两个问题：</p>\n<ul>\n<li>历史 RST 报文可能会终止后面相同四元组的连接，因为 PAWS 检查到即使 RST 是过期的，也不会丢弃。</li>\n<li>如果第四次挥手的 ACK 报文丢失了，有可能被动关闭连接的一方不能被正常的关闭;</li>\n</ul>\n<p>虽然 TIME_WAIT 状态持续的时间是有一点长，显得很不友好，但是它被设计来就是用来避免发生乱七八糟的事情。</p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info fas fa-bullhorn\">\n            <p>本文主要介绍了什么是TIME_WAIT状态，涉及TIME_WAIT状态的原因以及 tcp_tw_reuse参数的用途</p><p>更新于 2022-01-09</p>\n          </div>\n\n<br>\n\n\n\n<h1 id=\"什么是TIME-WAIT状态\"><a href=\"#什么是TIME-WAIT状态\" class=\"headerlink\" title=\"什么是TIME_WAIT状态\"></a>什么是TIME_WAIT状态</h1><p>下图是tcp四次挥手时的状态转换图：</p>\n<img src=\"./4huishou.png\" style=\"zoom:70%;\" />\n\n<p>大致的文字描述如下：</p>\n<ul>\n<li>客户端主动断开连接，会发送一个 TCP 首部 FIN标志位为1的报文给服务端，并将自己的状态转换为 FIN_WAIT_1；</li>\n<li>服务端收到报文后，会向客户端发送ACK报文，并将自己的状态转为 CLOSED_WAIT状态；</li>\n<li>客户端收到ACK报文后，进入FIN_WAIT_2状态；</li>\n<li>服务端处理完消息后，将发送FIN报文到客户端，随即服务端进入LAST_ACK状态；</li>\n<li>客户端收到FIN报文后，会发送ACK报文到服务端，然后进入TIME_WAIT状态；</li>\n<li>服务器收到了 ACK 应答报文后，就进入了 CLOSE 状态，至此服务端已经完成连接的关闭；</li>\n<li>客户端在经过 2MSL一段时间后，自动进入 CLOSE 状态，至此客户端也完成连接的关闭；</li>\n</ul>\n<p>总结一下有如下的特点：</p>\n<ol>\n<li>两个方向：服务端和客户端，都需要发送FIN和ACK报文；</li>\n<li>主动关闭连接的一方才有TIME_WAIT状态；</li>\n</ol>\n<p>可以看到，TIME_WAIT 是主动断开连接的一方最后一个状态，该状态将持续2MSL，MSL指报文在网络上最大的生存时间，任何超过这个时间的数据都将被丢弃， Linux 默认为 30 秒，那么 2MSL 就是 60 秒；</p>\n<blockquote>\n<p>MSL 是由网络层的 IP 包中的 TTL 来保证的，TTL 是 IP 头部的一个字段，用于设置一个数据报可经过的路由器的数量上限。报文每经过一次路由器的转发，IP 头部的 TTL 字段就会减 1，减到 0 时报文就被丢弃。MSL 与 TTL 的区别：MSL 的单位是时间，而 TTL 是经过路由跳数。所以 <strong>MSL 应该要大于等于 TTL 消耗为 0 的时间</strong>，以确保报文已被自然消亡</p>\n</blockquote>\n<h1 id=\"为什么设计TIME-WAIT状态\"><a href=\"#为什么设计TIME-WAIT状态\" class=\"headerlink\" title=\"为什么设计TIME_WAIT状态\"></a>为什么设计TIME_WAIT状态</h1><p>设计TIME_WAIT状态主要有以下两个原因：</p>\n<ol>\n<li>保证「被动关闭连接」的一方，能被正确的关闭；</li>\n<li>防止历史连接中的数据，被后面相同四元组的连接错误的接收；</li>\n</ol>\n<h2 id=\"防止历史连接中的数据，被后面相同四元组的连接错误的接收\"><a href=\"#防止历史连接中的数据，被后面相同四元组的连接错误的接收\" class=\"headerlink\" title=\"防止历史连接中的数据，被后面相同四元组的连接错误的接收\"></a>防止历史连接中的数据，被后面相同四元组的连接错误的接收</h2><p>每个tcp报文会包含一个序列号（SEQ），是 TCP 一个头部字段，标识了 TCP 发送端到 TCP 接收端的数据流的一个字节，因为 TCP 是面向字节流的可靠协议，为了保证消息的顺序性和可靠性，TCP 为每个传输方向上的每个字节都赋予了一个编号，以便于传输成功后确认、丢失后重传以及在接收端保证不会乱序。<strong>序列号是一个 32 位的无符号数，因此在到达 4G 之后再循环回到 0</strong>。</p>\n<p>在TCP建立的时候，客户端和服务端都会各自生成一个初始序列号，它是基于时钟生成的一个随机数，来保证每个连接都拥有不同的初始序列号。<strong>初始化序列号可被视为一个 32 位的计数器，该计数器的数值每 4 微秒加 1，循环一次需要 4.55 小时</strong>。</p>\n<blockquote>\n<p><strong>序列号和初始化序列号并不是无限递增的，会发生回绕为初始值的情况，这意味着无法根据序列号来判断新老数据</strong>。</p>\n</blockquote>\n<img src=\"./qc.png\" style=\"zoom:70%;\" />\n\n<ul>\n<li>服务端在关闭连接之前发送的 <code>SEQ = 301</code> 报文，被网络延迟了。</li>\n<li>接着，服务端以相同的四元组重新打开了新连接，前面被延迟的 <code>SEQ = 301</code>这时抵达了客户端，而且该数据报文的序列号刚好在客户端接收窗口内，因此客户端会正常接收这个数据报文，但是这个数据报文是上一个连接残留下来的，这样就产生数据错乱等严重的问题。</li>\n</ul>\n<blockquote>\n<p>TIME_WAIT持续2MSL时间足以让两个方向上的数据包都被丢弃，使得原来连接的数据包在网络中都自然消失，再出现的数据包一定都是新建立连接所产生的。</p>\n</blockquote>\n<h2 id=\"保证「被动关闭连接」的一方，能被正确的关闭\"><a href=\"#保证「被动关闭连接」的一方，能被正确的关闭\" class=\"headerlink\" title=\"保证「被动关闭连接」的一方，能被正确的关闭\"></a>保证「被动关闭连接」的一方，能被正确的关闭</h2><img src=\"./qq.png\" style=\"zoom:70%;\" />\n\n\n\n<p>如果客户端（主动关闭方）最后一次 ACK 报文（第四次挥手）在网络中丢失了，那么按照 TCP 可靠性原则，服务端（被动关闭方）会重发 FIN 报文。</p>\n<p>假设客户端没有 TIME_WAIT 状态，而是在发完最后一次回 ACK 报文就直接进入 CLOSED 状态，如果该  ACK 报文丢失了，服务端则重传的 FIN 报文，而这时客户端已经进入到关闭状态了，在收到服务端重传的 FIN 报文后，就会回 RST 报文。</p>\n<p>服务端收到这个 RST 并将其解释为一个错误（Connection reset by peer），这对于一个可靠的协议来说不是一个优雅的终止方式。</p>\n<p>所以客户端必须等待足够长的时间确保对端收到 ACK，如果对端没有收到 ACK，那么就会触发 TCP 重传机制，服务端会重新发送一个 FIN，这样一去一来刚好两个 MSL 的时间。</p>\n<h1 id=\"什么是tcp-tw-reuse\"><a href=\"#什么是tcp-tw-reuse\" class=\"headerlink\" title=\"什么是tcp_tw_reuse\"></a>什么是tcp_tw_reuse</h1><p>在linux下TIME_WAIT 状态的持续时间是 60 秒，这意味着这 60 秒内，客户端一直会占用着这个端口，这个会造成资源浪费，因为linux一般客户端可开启的端口在32768~61000，如果主动关闭连接方的 TIME_WAIT 状态过多，占满了所有端口资源，则会导致无法创建新连接。</p>\n<h2 id=\"回收TIME-WAIT状态\"><a href=\"#回收TIME-WAIT状态\" class=\"headerlink\" title=\"回收TIME_WAIT状态\"></a>回收TIME_WAIT状态</h2><p>linux提供了两个系统参数来快速回收TIME_WAIT 状态的连接，这两个参数都是默认关闭的：</p>\n<ul>\n<li>net.ipv4.tcp_tw_reuse，如果开启该选项的话，客户端（连接发起方） 在调用 connect() 函数时，<strong>内核会随机找一个 TIME_WAIT 状态超过 1 秒的连接给新的连接复用</strong>，所以该选项只适用于连接发起方。</li>\n<li>net.ipv4.tcp_tw_recycle，如果开启该选项的话，允许处于 TIME_WAIT 状态的连接被快速回收，该参数在NAT 的网络下是不安全的；</li>\n</ul>\n<blockquote>\n<p>要使得上面这两个参数生效，有一个前提条件，就是要打开 TCP 时间戳，即 net.ipv4.tcp_timestamps=1（默认即为 1）。</p>\n</blockquote>\n<p>开启了 tcp_timestamps 参数，TCP 头部就会使用时间戳选项，它有两个好处，**一个是便于精确计算 RTT ，另一个是能防止序列号回绕（PAWS）;</p>\n<p>在现代网速很快的情况下，网络中有大量的数据，由于序列号SEQ最大4G，达到上限后会重头开始计数，所以可能出现延迟的报文抵达后序列号依然有效的问题。</p>\n<p>假设 TCP 的发送窗口是 1 GB，并且使用了时间戳选项，发送方会为每个 TCP 报文分配时间戳数值，我们假设每个报文时间加 1，然后使用这个连接传输一个 6GB 大小的数据流。</p>\n<img src=\"./gg.png\" style=\"zoom:70%;\" />\n\n<p>32 位的序列号在时刻 D 和 E 之间回绕。假设在时刻B有一个报文丢失并被重传，又假设这个报文段在网络上绕了远路并在时刻 F 重新出现。如果 TCP 无法识别这个绕回的报文，那么数据完整性就会遭到破坏。使用时间戳选项能够有效的防止上述问题，如果丢失的报文会在时刻 F 重新出现，由于它的时间戳为 2，小于最近的有效时间戳（5 或 6），因此防回绕序列号算法（PAWS）会将其丢弃。</p>\n<blockquote>\n<p>防回绕序列号算法要求连接双方维护最近一次收到的数据包的时间戳（Recent TSval），每收到一个新数据包都会读取数据包中的时间戳值跟 Recent TSval 值做比较，<strong>如果发现收到的数据包中时间戳不是递增的，则表示该数据包是过期的，就会直接丢弃这个数据包</strong>。</p>\n</blockquote>\n<h2 id=\"为什么-tcp-tw-reuse-默认是关闭\"><a href=\"#为什么-tcp-tw-reuse-默认是关闭\" class=\"headerlink\" title=\"为什么 tcp_tw_reuse  默认是关闭\"></a>为什么 tcp_tw_reuse  默认是关闭</h2><p>开启 tcp_tw_reuse 的同时，也需要开启 tcp_timestamps，意味着可以用时间戳的方式有效的判断回绕序列号的历史报文。</p>\n<p>对于 <strong>RST 报文的时间戳即使过期了，只要 RST 报文的序列号在对方的接收窗口内，也是能被接受的</strong>。</p>\n<img src=\"./rst.png\" style=\"zoom:70%;\" />\n\n\n\n<p>tcp_validate_incoming 函数就是验证接收到的 TCP 报文是否合格的函数，其中第一步就会进行 PAWS 检查，由 tcp_paws_discard 函数负责，当 tcp_paws_discard 返回 true，就代表报文是一个历史报文，于是就要丢弃这个报文。但是在丢掉这个报文的时候，会先判断是不是 RST 报文，如果不是 RST 报文，才会将报文丢掉。也就是说，即使 RST 报文是一个历史报文，并不会被丢弃。</p>\n<img src=\"./aaa.png\" style=\"zoom:70%;\" />\n\n\n\n<ul>\n<li>客户端向一个还没有被服务端监听的端口发起了 HTTP 请求，接着服务端就会回 RST 报文给对方，很可惜的是 <strong>RST 报文被网络阻塞了</strong>。</li>\n<li>由于客户端迟迟没有收到 TCP 第二次握手，于是重发了 SYN 包，与此同时服务端已经开启了服务，监听了对应的端口。于是接下来，客户端和服务端就进行了 TCP 三次握手、数据传输（HTTP应答-响应）、四次挥手。</li>\n<li>因为<strong>客户端开启了 tcp_tw_reuse，于是快速复用 TIME_WAIT 状态的端口，又与服务端建立了一个与刚才相同的四元组的连接</strong>。</li>\n<li>接着，<strong>前面被网络延迟 RST 报文这时抵达了客户端，而且 RST 报文的序列号在客户端的接收窗口内，由于防回绕序列号算法不会防止过期的 RST，所以 RST 报文会被客户端接受了，于是客户端的连接就断开了</strong>。</li>\n</ul>\n<p>上面这个场景就是开启 tcp_tw_reuse 风险，因为快速复用 TIME_WAIT 状态的端口，导致新连接可能被回绕序列号的 RST 报文断开了，而如果不跳过 TIME_WAIT 状态，而是停留 2MSL 时长，那么这个 RST 报文就不会出现下一个新的连接。</p>\n<p>除此之外，开启 tcp_tw_reuse 来快速复用 TIME_WAIT 状态的连接，如果第四次挥手的 ACK 报文丢失了，有可能会导致被动关闭连接的一方不能被正常的关闭。</p>\n<img src=\"./ss.png\" style=\"zoom:70%;\" />\n\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>tcp_tw_reuse 的作用是让客户端快速复用处于 TIME_WAIT 状态的端口，相当于跳过了 TIME_WAIT 状态，这可能会出现这样的两个问题：</p>\n<ul>\n<li>历史 RST 报文可能会终止后面相同四元组的连接，因为 PAWS 检查到即使 RST 是过期的，也不会丢弃。</li>\n<li>如果第四次挥手的 ACK 报文丢失了，有可能被动关闭连接的一方不能被正常的关闭;</li>\n</ul>\n<p>虽然 TIME_WAIT 状态持续的时间是有一点长，显得很不友好，但是它被设计来就是用来避免发生乱七八糟的事情。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Redis内存模型/jmealloc.png","slug":"jmealloc.png","post":"cko72de5b0001p0kl2tr139t0","modified":0,"renderable":0},{"_id":"source/_posts/Redis内存模型/mem-detail.png","slug":"mem-detail.png","post":"cko72de5b0001p0kl2tr139t0","modified":0,"renderable":0},{"_id":"source/_posts/Redis基础知识/aof.svg","slug":"aof.svg","post":"cko72de5e0003p0kley8l5b6s","modified":0,"renderable":0},{"_id":"source/_posts/Redis基础知识/rdb.svg","slug":"rdb.svg","post":"cko72de5e0003p0kley8l5b6s","modified":0,"renderable":0},{"_id":"source/_posts/docker方式部署kafka集群/status.png","slug":"status.png","post":"cko72de5h0007p0kl101yae1a","modified":0,"renderable":0},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/pod.png","slug":"pod.png","post":"cko72de5j000bp0klhepe9i1k","modified":0,"renderable":0},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v1.png","slug":"v1.png","post":"cko72de5j000bp0klhepe9i1k","modified":0,"renderable":0},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-ha.png","slug":"v2-ha.png","post":"cko72de5j000bp0klhepe9i1k","modified":0,"renderable":0},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-never.png","slug":"v2-never.png","post":"cko72de5j000bp0klhepe9i1k","modified":0,"renderable":0},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-true.png","slug":"v2-true.png","post":"cko72de5j000bp0klhepe9i1k","modified":0,"renderable":0},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2-wight.png","slug":"v2-wight.png","post":"cko72de5j000bp0klhepe9i1k","modified":0,"renderable":0},{"_id":"source/_posts/ingress-nginx实现蓝绿、灰度发布/v2.png","slug":"v2.png","post":"cko72de5j000bp0klhepe9i1k","modified":0,"renderable":0},{"_id":"source/_posts/zookeeper常用命令行操作/ls.png","slug":"ls.png","post":"cko72de5n000kp0kl1l6wcyod","modified":0,"renderable":0},{"_id":"source/_posts/升级集群到1-18/carbon.png","slug":"carbon.png","post":"cko72de5u000xp0kleb2x269k","modified":0,"renderable":0},{"_id":"source/_posts/升级集群到1-18/drain.png","slug":"drain.png","post":"cko72de5u000xp0kleb2x269k","modified":0,"renderable":0},{"_id":"source/_posts/升级集群到1-18/newversion.png","slug":"newversion.png","post":"cko72de5u000xp0kleb2x269k","modified":0,"renderable":0},{"_id":"source/_posts/升级集群到1-18/update-kubeadm.png","slug":"update-kubeadm.png","post":"cko72de5u000xp0kleb2x269k","modified":0,"renderable":0},{"_id":"source/_posts/升级集群到1-18/update-node.png","slug":"update-node.png","post":"cko72de5u000xp0kleb2x269k","modified":0,"renderable":0},{"_id":"source/_posts/升级集群到1-18/update-res.png","slug":"update-res.png","post":"cko72de5u000xp0kleb2x269k","modified":0,"renderable":0},{"_id":"source/_posts/升级集群到1-18/update.png","slug":"update.png","post":"cko72de5u000xp0kleb2x269k","modified":0,"renderable":0},{"_id":"source/_posts/使用k3d和traefik快速搭建开发环境/dashboard.png","slug":"dashboard.png","post":"cko72de5t000vp0klgsgnb03p","modified":0,"renderable":0},{"_id":"source/_posts/使用k3d和traefik快速搭建开发环境/whoami.png","slug":"whoami.png","post":"cko72de5t000vp0klgsgnb03p","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/nfs-client.png","slug":"nfs-client.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/pod-nfs-svc.png","slug":"pod-nfs-svc.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/pod-nfs-test.png","slug":"pod-nfs-test.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/pod-nfs.png","slug":"pod-nfs.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/pv.png","slug":"pv.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/pvc-nginx.png","slug":"pvc-nginx.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/pvc.png","slug":"pvc.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用nfs存储/storageclass-pvc.png","slug":"storageclass-pvc.png","post":"cko72de5u0011p0klanorholc","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署mysql主从集群/zhucong.png","slug":"zhucong.png","post":"cko72de5x0018p0kl2u9i3550","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署redis集群/cluster.png","slug":"cluster.png","post":"cko72de5y001ap0kl0h2se7eu","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署redis集群/create.png","slug":"create.png","post":"cko72de5y001ap0kl0h2se7eu","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署redis集群/detail.png","slug":"detail.png","post":"cko72de5y001ap0kl0h2se7eu","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署redis集群/info.png","slug":"info.png","post":"cko72de5y001ap0kl0h2se7eu","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署RabbitMQ/bushu.png","slug":"bushu.png","post":"cko72de5w0015p0kl3u3oen9b","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署RabbitMQ/client_log.png","slug":"client_log.png","post":"cko72de5w0015p0kl3u3oen9b","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署RabbitMQ/log.png","slug":"log.png","post":"cko72de5w0015p0kl3u3oen9b","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署RabbitMQ/service.png","slug":"service.png","post":"cko72de5w0015p0kl3u3oen9b","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中部署RabbitMQ/web.png","slug":"web.png","post":"cko72de5w0015p0kl3u3oen9b","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/append.png","slug":"append.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/de-keys.png","slug":"de-keys.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/getset.png","slug":"getset.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-all.png","slug":"hash-all.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-del.png","slug":"hash-del.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-exist.png","slug":"hash-exist.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-getset.png","slug":"hash-getset.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-hlen.png","slug":"hash-hlen.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-incry.png","slug":"hash-incry.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-linsert.png","slug":"hash-linsert.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-llen.png","slug":"hash-llen.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-lpoprpush.png","slug":"hash-lpoprpush.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-lrange.png","slug":"hash-lrange.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-lrem.png","slug":"hash-lrem.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-lset.png","slug":"hash-lset.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-pushx.png","slug":"hash-pushx.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-rpop.png","slug":"hash-rpop.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/hash-rpush.png","slug":"hash-rpush.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/incr-decr.png","slug":"incr-decr.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/keys.png","slug":"keys.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/list-lpush.png","slug":"list-lpush.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/nochange.png","slug":"nochange.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/nokey.png","slug":"nokey.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-add.png","slug":"set-add.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-get.png","slug":"set-get.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-scard.png","slug":"set-scard.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-sdiff.png","slug":"set-sdiff.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-sdiffstore.png","slug":"set-sdiffstore.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-sinter.png","slug":"set-sinter.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-sinterstore.png","slug":"set-sinterstore.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-sismember.png","slug":"set-sismember.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-smembers.png","slug":"set-smembers.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-srandmember.png","slug":"set-srandmember.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-srem.png","slug":"set-srem.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-sunion.png","slug":"set-sunion.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/set-sunionstore.png","slug":"set-sunionstore.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/step.png","slug":"step.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/zadd.png","slug":"zadd.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/zcard.png","slug":"zcard.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/zcount.png","slug":"zcount.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/常见类型命令操作/zscore.png","slug":"zscore.png","post":"cko72de5z001dp0klc7toekwg","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库/create-user.png","slug":"create-user.png","post":"cko72de63001rp0kl2d1g3gfl","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库/create.png","slug":"create.png","post":"cko72de63001rp0kl2d1g3gfl","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库/harbor-login.png","slug":"harbor-login.png","post":"cko72de63001rp0kl2d1g3gfl","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库/upload-image.png","slug":"upload-image.png","post":"cko72de63001rp0kl2d1g3gfl","modified":0,"renderable":0},{"_id":"source/_posts/部署docker-ce/docker-version.png","slug":"docker-version.png","post":"cko72de63001pp0kl1om0f1c9","modified":0,"renderable":0},{"_id":"source/_posts/部署Nginx/install_source.png","slug":"install_source.png","post":"cko72de62001lp0kl4st0789e","modified":0,"renderable":0},{"_id":"source/_posts/部署单点zookeeper/start.png","slug":"start.png","post":"cko72de660020p0kl1nopdwm9","modified":0,"renderable":0},{"_id":"source/_posts/部署单点zookeeper/status.png","slug":"status.png","post":"cko72de660020p0kl1nopdwm9","modified":0,"renderable":0},{"_id":"source/_posts/部署单点zookeeper/stop.png","slug":"stop.png","post":"cko72de660020p0kl1nopdwm9","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/ansible-check.png","slug":"ansible-check.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/calico-ip.png","slug":"calico-ip.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/calico-node.png","slug":"calico-node.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/check-master.png","slug":"check-master.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/cluster-check.png","slug":"cluster-check.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/etcd-cluster.png","slug":"etcd-cluster.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/etcd-helth.png","slug":"etcd-helth.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/etcd-member.png","slug":"etcd-member.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/getnode.png","slug":"getnode.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/ipvs-rule.png","slug":"ipvs-rule.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/ipvs.png","slug":"ipvs.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/kubeadm-init.png","slug":"kubeadm-init.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/nodes.png","slug":"nodes.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/kubeadm部署k8s-1-18集群/single-master.png","slug":"single-master.png","post":"cko72de6v005lp0kl5qhfd7ob","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/add-cluster-1.png","slug":"add-cluster-1.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/add-cluster-2.png","slug":"add-cluster-2.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/configmap.png","slug":"configmap.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/es-pod.png","slug":"es-pod.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kafka-pod.png","slug":"kafka-pod.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kafka.png","slug":"kafka.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kibana-pod.png","slug":"kibana-pod.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/kibana.png","slug":"kibana.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/logstash-pod.png","slug":"logstash-pod.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/在k8s中使用EFLK进行日志收集/pod.png","slug":"pod.png","post":"cko72de6x005qp0klg7ch9wn8","modified":0,"renderable":0},{"_id":"source/_posts/Redis分布式锁/fenbushi.png","slug":"fenbushi.png","post":"ckpl0nvur0000ccklbymd8oa7","modified":0,"renderable":0},{"_id":"source/_posts/使用kubeadm管理集群证书/update.png","slug":"update.png","post":"cksli706e0000sbkl28ke7d7z","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库服务/check.png","slug":"check.png","post":"cksliodri0000b9klhvax9v4n","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库服务/index.png","slug":"index.png","post":"cksliodri0000b9klhvax9v4n","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库服务/login.png","slug":"login.png","post":"cksliodri0000b9klhvax9v4n","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库服务/prepare.png","slug":"prepare.png","post":"cksliodri0000b9klhvax9v4n","modified":0,"renderable":0},{"_id":"source/_posts/部署harbor镜像仓库服务/push.png","slug":"push.png","post":"cksliodri0000b9klhvax9v4n","modified":0,"renderable":0},{"_id":"source/_posts/部署MetricServer/check.png","slug":"check.png","post":"ckslj567m0000oiklgjl72ihh","modified":0,"renderable":0},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/hpa-cpu.png","slug":"hpa-cpu.png","post":"ckslj56800005oiklgm1gcwuf","modified":0,"renderable":0},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/hpa-mem.png","slug":"hpa-mem.png","post":"ckslj56800005oiklgm1gcwuf","modified":0,"renderable":0},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/k8s-hpa-ms.png","slug":"k8s-hpa-ms.png","post":"ckslj56800005oiklgm1gcwuf","modified":0,"renderable":0},{"_id":"source/_posts/使用HPA进行服务自动扩缩容/pod.png","slug":"pod.png","post":"ckslj56800005oiklgm1gcwuf","modified":0,"renderable":0},{"_id":"source/_posts/部署RabbitMQ/index.png","slug":"index.png","post":"ckslkr270000040kl6la810to","modified":0,"renderable":0},{"_id":"source/_posts/关于tcp-tw-reuse/4huishou.png","slug":"4huishou.png","post":"cky74xt7g000096klbalxhw36","modified":0,"renderable":0},{"_id":"source/_posts/关于tcp-tw-reuse/aaa.png","slug":"aaa.png","post":"cky74xt7g000096klbalxhw36","modified":0,"renderable":0},{"_id":"source/_posts/关于tcp-tw-reuse/gg.png","slug":"gg.png","post":"cky74xt7g000096klbalxhw36","modified":0,"renderable":0},{"_id":"source/_posts/关于tcp-tw-reuse/qc.png","slug":"qc.png","post":"cky74xt7g000096klbalxhw36","modified":0,"renderable":0},{"_id":"source/_posts/关于tcp-tw-reuse/qq.png","slug":"qq.png","post":"cky74xt7g000096klbalxhw36","modified":0,"renderable":0},{"_id":"source/_posts/关于tcp-tw-reuse/rst.png","slug":"rst.png","post":"cky74xt7g000096klbalxhw36","modified":0,"renderable":0},{"_id":"source/_posts/关于tcp-tw-reuse/ss.png","slug":"ss.png","post":"cky74xt7g000096klbalxhw36","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cko72de5i0009p0kleh027pfh","category_id":"cko72de5p000np0klahpp2qzb","_id":"cko72de69002gp0klf1c88atu"},{"post_id":"cko72de5i0009p0kleh027pfh","category_id":"cko72de680027p0kl9asf57ww","_id":"cko72de6a002ip0kld8g13n8n"},{"post_id":"cko72de5b0001p0kl2tr139t0","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6b002qp0kld9ngewho"},{"post_id":"cko72de5b0001p0kl2tr139t0","category_id":"cko72de5s000tp0kl55e60j94","_id":"cko72de6c002rp0kl980s8e3j"},{"post_id":"cko72de5b0001p0kl2tr139t0","category_id":"cko72de6a002kp0kle0hg1qao","_id":"cko72de6c002sp0kldgtz48ql"},{"post_id":"cko72de5j000bp0klhepe9i1k","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6c002vp0klaf3h535n"},{"post_id":"cko72de5j000bp0klhepe9i1k","category_id":"cko72de6c002tp0klgyrj7yv2","_id":"cko72de6d002xp0kl8e2m81hr"},{"post_id":"cko72de5y001ap0kl0h2se7eu","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6e0032p0kl08c44eud"},{"post_id":"cko72de5y001ap0kl0h2se7eu","category_id":"cko72de5s000tp0kl55e60j94","_id":"cko72de6e0033p0kl2xhr1c3j"},{"post_id":"cko72de5y001ap0kl0h2se7eu","category_id":"cko72de6d002zp0kl2wh13itv","_id":"cko72de6e0034p0klg2n92wix"},{"post_id":"cko72de5e0003p0kley8l5b6s","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6e0036p0kl2u4h8ep5"},{"post_id":"cko72de5e0003p0kley8l5b6s","category_id":"cko72de5s000tp0kl55e60j94","_id":"cko72de6e0037p0kl5yda7tkp"},{"post_id":"cko72de5e0003p0kley8l5b6s","category_id":"cko72de6a002kp0kle0hg1qao","_id":"cko72de6f0039p0kl2jjyauqf"},{"post_id":"cko72de5z001dp0klc7toekwg","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6f003ap0kl44m0h7k0"},{"post_id":"cko72de5z001dp0klc7toekwg","category_id":"cko72de5s000tp0kl55e60j94","_id":"cko72de6f003cp0klgxab4wkv"},{"post_id":"cko72de5z001dp0klc7toekwg","category_id":"cko72de6e0031p0kl2tm91tmu","_id":"cko72de6f003dp0klc7lt2whb"},{"post_id":"cko72de60001fp0kl41cdbmr8","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6f003fp0klcib4bszi"},{"post_id":"cko72de60001fp0kl41cdbmr8","category_id":"cko72de6c002tp0klgyrj7yv2","_id":"cko72de6g003gp0kl6f9q4srt"},{"post_id":"cko72de5m000gp0klaxjnc5k6","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6g003ip0klddot7fmx"},{"post_id":"cko72de5m000gp0klaxjnc5k6","category_id":"cko72de5s000tp0kl55e60j94","_id":"cko72de6g003jp0kl8agh4pzq"},{"post_id":"cko72de5m000gp0klaxjnc5k6","category_id":"cko72de6f003bp0kl53p181kn","_id":"cko72de6g003lp0kl8i9m30iq"},{"post_id":"cko72de5n000kp0kl1l6wcyod","category_id":"cko72de5p000np0klahpp2qzb","_id":"cko72de6h003op0kl60il0uzo"},{"post_id":"cko72de5n000kp0kl1l6wcyod","category_id":"cko72de6g003kp0klfx55b4eu","_id":"cko72de6h003pp0klc2egfa7i"},{"post_id":"cko72de5h0007p0kl101yae1a","category_id":"cko72de5n000hp0kl4hvb06qt","_id":"cko72de6i003tp0kl71sg6fpl"},{"post_id":"cko72de5h0007p0kl101yae1a","category_id":"cko72de64001sp0klhl1o2foo","_id":"cko72de6i003up0klarcnbgqi"},{"post_id":"cko72de5h0007p0kl101yae1a","category_id":"cko72de6h003qp0klgnrf1e43","_id":"cko72de6i003wp0kl4mye2w5m"},{"post_id":"cko72de65001wp0kl59c90vk9","category_id":"cko72de5p000np0klahpp2qzb","_id":"cko72de6j003xp0kl0ed8he8y"},{"post_id":"cko72de65001wp0kl59c90vk9","category_id":"cko72de680027p0kl9asf57ww","_id":"cko72de6j003zp0kleafe54mf"},{"post_id":"cko72de660020p0kl1nopdwm9","category_id":"cko72de5p000np0klahpp2qzb","_id":"cko72de6j0040p0kl0vmmfsfn"},{"post_id":"cko72de660020p0kl1nopdwm9","category_id":"cko72de680027p0kl9asf57ww","_id":"cko72de6j0042p0kl8gjfg3gi"},{"post_id":"cko72de5o000mp0kl79sl5nqt","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6j0043p0klb0vl9l3z"},{"post_id":"cko72de5o000mp0kl79sl5nqt","category_id":"cko72de5s000tp0kl55e60j94","_id":"cko72de6k0045p0kl7l0beaqm"},{"post_id":"cko72de5o000mp0kl79sl5nqt","category_id":"cko72de6d002zp0kl2wh13itv","_id":"cko72de6k0046p0klh21ja86f"},{"post_id":"cko72de670022p0klh5bvh8lx","category_id":"cko72de5n000hp0kl4hvb06qt","_id":"cko72de6k0047p0klf3yi30is"},{"post_id":"cko72de670022p0klh5bvh8lx","category_id":"cko72de64001sp0klhl1o2foo","_id":"cko72de6k0049p0kl77usgbom"},{"post_id":"cko72de670022p0klh5bvh8lx","category_id":"cko72de6h003qp0klgnrf1e43","_id":"cko72de6k004ap0klhpc77xzq"},{"post_id":"cko72de5q000pp0kl2mvy6bnv","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6l004cp0kl6cmhbuwv"},{"post_id":"cko72de5q000pp0kl2mvy6bnv","category_id":"cko72de5s000tp0kl55e60j94","_id":"cko72de6l004dp0kl3k06333a"},{"post_id":"cko72de5q000pp0kl2mvy6bnv","category_id":"cko72de6f003bp0kl53p181kn","_id":"cko72de6l004fp0klcd63a8kw"},{"post_id":"cko72de5t000vp0klgsgnb03p","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6l004gp0klaeob36nr"},{"post_id":"cko72de5t000vp0klgsgnb03p","category_id":"cko72de6k0044p0kl2d4rgdeb","_id":"cko72de6m004ip0klbq44dm4e"},{"post_id":"cko72de5u000xp0kleb2x269k","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6m004jp0kl21uy5ov1"},{"post_id":"cko72de5u000xp0kleb2x269k","category_id":"cko72de6k0044p0kl2d4rgdeb","_id":"cko72de6n004lp0klez2jb8t8"},{"post_id":"cko72de5v0013p0klaq3neh6e","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6n004mp0kl71gr5sji"},{"post_id":"cko72de5v0013p0klaq3neh6e","category_id":"cko72de6b002pp0klgm1u4b1l","_id":"cko72de6n004op0kl5xrth8i3"},{"post_id":"cko72de5v0013p0klaq3neh6e","category_id":"cko72de6l004ep0kl7d3k8qea","_id":"cko72de6o004pp0klgidzgkvm"},{"post_id":"cko72de5w0015p0kl3u3oen9b","category_id":"cko72de5n000hp0kl4hvb06qt","_id":"cko72de6o004qp0klgjqtd7h4"},{"post_id":"cko72de5w0015p0kl3u3oen9b","category_id":"cko72de6c002up0kl1xo44kzj","_id":"cko72de6o004sp0klfv6sa0c7"},{"post_id":"cko72de5w0015p0kl3u3oen9b","category_id":"cko72de6m004hp0kl85xkawjr","_id":"cko72de6o004tp0klg53m5wff"},{"post_id":"cko72de5x0018p0kl2u9i3550","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6o004vp0kl5iza9lup"},{"post_id":"cko72de5x0018p0kl2u9i3550","category_id":"cko72de6b002pp0klgm1u4b1l","_id":"cko72de6p004wp0klc4higr11"},{"post_id":"cko72de5x0018p0kl2u9i3550","category_id":"cko72de6l004ep0kl7d3k8qea","_id":"cko72de6p004yp0kl1god8ig6"},{"post_id":"cko72de5l000fp0klh2uv1ds8","category_id":"cko72de5n000hp0kl4hvb06qt","_id":"cko72de6q004zp0kl2r5ea99y"},{"post_id":"cko72de5l000fp0klh2uv1ds8","category_id":"cko72de64001sp0klhl1o2foo","_id":"cko72de6q0051p0kl7ohy208h"},{"post_id":"cko72de5l000fp0klh2uv1ds8","category_id":"cko72de6n004np0kl3b2nfgkl","_id":"cko72de6q0052p0kl671s65es"},{"post_id":"cko72de61001jp0kl0r8t22qq","category_id":"cko72de5f0004p0kld5ebap1d","_id":"cko72de6q0054p0klbk3xect0"},{"post_id":"cko72de61001jp0kl0r8t22qq","category_id":"cko72de6b002pp0klgm1u4b1l","_id":"cko72de6r0055p0kl10p7evwj"},{"post_id":"cko72de61001jp0kl0r8t22qq","category_id":"cko72de6l004ep0kl7d3k8qea","_id":"cko72de6r0056p0klhzrh5ptu"},{"post_id":"cko72de62001lp0kl4st0789e","category_id":"cko72de6f003ep0kl9g6166cv","_id":"cko72de6s0058p0klfgxib8zw"},{"post_id":"cko72de62001lp0kl4st0789e","category_id":"cko72de6o004up0kl9vg35bar","_id":"cko72de6s0059p0kl77mx15j2"},{"post_id":"cko72de63001pp0kl1om0f1c9","category_id":"cko72de6g003hp0kl9pdi4v82","_id":"cko72de6s005bp0klc48360bs"},{"post_id":"cko72de63001pp0kl1om0f1c9","category_id":"cko72de6p004xp0kl8bwd5kgw","_id":"cko72de6s005cp0klccsfai9x"},{"post_id":"cko72de63001rp0kl2d1g3gfl","category_id":"cko72de6g003hp0kl9pdi4v82","_id":"cko72de6s005dp0klbbyy4nhi"},{"post_id":"cko72de63001rp0kl2d1g3gfl","category_id":"cko72de6q0050p0kl5spm6zzf","_id":"cko72de6s005ep0kl3r45afbw"},{"post_id":"cko72de5u0011p0klanorholc","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6s005fp0klak5ih15u"},{"post_id":"cko72de5u0011p0klanorholc","category_id":"cko72de6k004bp0klchsye8xl","_id":"cko72de6s005gp0kl9ojofh9p"},{"post_id":"cko72de5u0011p0klanorholc","category_id":"cko72de6r0057p0kl2lnleeft","_id":"cko72de6s005hp0kl4pkt85s3"},{"post_id":"cko72de64001up0klb5qagbu0","category_id":"cko72de6h003np0klfy8o11rp","_id":"cko72de6t005ip0klegds3art"},{"post_id":"cko72de64001up0klb5qagbu0","category_id":"cko72de6q0053p0klcr3887l5","_id":"cko72de6t005jp0kl0ynya55o"},{"post_id":"cko72de64001up0klb5qagbu0","category_id":"cko72de6s005ap0kl80ts96hy","_id":"cko72de6t005kp0kldfvpfw6d"},{"post_id":"cko72de6v005lp0kl5qhfd7ob","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6w005np0kl8u7i6bw8"},{"post_id":"cko72de6v005lp0kl5qhfd7ob","category_id":"cko72de6k0044p0kl2d4rgdeb","_id":"cko72de6w005op0kl2tutf2rq"},{"post_id":"cko72de6x005pp0kldvd6e8jg","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6y005up0klbd792r1q"},{"post_id":"cko72de6x005pp0kldvd6e8jg","category_id":"cko72de6k0044p0kl2d4rgdeb","_id":"cko72de6y005vp0kl0jv934ku"},{"post_id":"cko72de6x005qp0klg7ch9wn8","category_id":"cko72de5u000zp0klb5as0sml","_id":"cko72de6z005xp0kl9c1q5uaw"},{"post_id":"cko72de6x005qp0klg7ch9wn8","category_id":"cko72de6y005tp0klgx5j2ahm","_id":"cko72de6z005zp0kl7um7gp9q"},{"post_id":"cko72de5s000rp0klb95tbk22","category_id":"cko72de5n000hp0kl4hvb06qt","_id":"cko72fq6h0001unkl2k2kahn6"},{"post_id":"cko72de5s000rp0klb95tbk22","category_id":"cko72de64001sp0klhl1o2foo","_id":"cko72fq6h0002unkl1yi05cnw"},{"post_id":"cko72de5s000rp0klb95tbk22","category_id":"cko72de6h003qp0klgnrf1e43","_id":"cko72fq6h0003unklftw2a1qn"},{"post_id":"ckpl0nvur0000ccklbymd8oa7","category_id":"cko72de5f0004p0kld5ebap1d","_id":"ckpl0nvuv0002ccklddg7bx3s"},{"post_id":"ckpl0nvur0000ccklbymd8oa7","category_id":"cko72de5s000tp0kl55e60j94","_id":"ckpl0nvuv0003ccklch8lax1b"},{"post_id":"ckpl0nvur0000ccklbymd8oa7","category_id":"cko72de6e0031p0kl2tm91tmu","_id":"ckpl0nvuv0004ccklfl7k3hwt"},{"post_id":"ckpmlsyqd0000udkl3hjpckc8","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckpmlsyqq0006udkl9xdochr4"},{"post_id":"ckpmlsyqd0000udkl3hjpckc8","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckpmlsyqq0007udkle5n25keu"},{"post_id":"ckpmlsyqd0000udkl3hjpckc8","category_id":"ckpmlsyqq0005udkl6s027hwb","_id":"ckpmlsyqq0008udklhfeg4zgq"},{"post_id":"ckpw5zz330000vjkl3jm4fhzk","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckpw5zz3c0003vjkl7s37e861"},{"post_id":"ckpw5zz330000vjkl3jm4fhzk","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckpw5zz3c0004vjkl5kek7tyd"},{"post_id":"ckpw5zz330000vjkl3jm4fhzk","category_id":"ckpw5zz360002vjklbhs0arqy","_id":"ckpw5zz3d0005vjkl63j2femz"},{"post_id":"ckpw6390n000054kle4tj8580","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckpw6390q000254klgfoh33ld"},{"post_id":"ckpw6390n000054kle4tj8580","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckpw6390r000354kl45jr7vjz"},{"post_id":"ckpw6390n000054kle4tj8580","category_id":"ckpw5zz360002vjklbhs0arqy","_id":"ckpw6390r000454klbxg82o4u"},{"post_id":"ckpw6u1s7000067klgw3h5w1w","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckpw6u1sh000367klb46h0hwo"},{"post_id":"ckpw6u1s7000067klgw3h5w1w","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckpw6u1sh000467klhg5g4d7r"},{"post_id":"ckpw6u1s7000067klgw3h5w1w","category_id":"ckpw6u1sa000267kl1ur8e509","_id":"ckpw6u1sh000567kld5ea2bw2"},{"post_id":"cks4t1uej0000y5kl8mfwa1fc","category_id":"cko72de5u000zp0klb5as0sml","_id":"cks4t1uew0003y5klc87w9rzp"},{"post_id":"cks4t1uej0000y5kl8mfwa1fc","category_id":"cks4t1ueo0002y5kl5vda47sj","_id":"cks4t1uew0004y5kl0hyzbr6h"},{"post_id":"cksli706e0000sbkl28ke7d7z","category_id":"cko72de5u000zp0klb5as0sml","_id":"cksli706i0002sbklb2f9h3fs"},{"post_id":"cksli706e0000sbkl28ke7d7z","category_id":"cko72de6k0044p0kl2d4rgdeb","_id":"cksli706i0003sbkl2n37b8qm"},{"post_id":"cksliodri0000b9klhvax9v4n","category_id":"cko72de6g003hp0kl9pdi4v82","_id":"cksliodrl0002b9kl5yrx0o0u"},{"post_id":"cksliodri0000b9klhvax9v4n","category_id":"cko72de6q0050p0kl5spm6zzf","_id":"cksliodrl0003b9kl4sx52jo6"},{"post_id":"ckslj567m0000oiklgjl72ihh","category_id":"cko72de5u000zp0klb5as0sml","_id":"ckslj567z0003oiklebd6bxzb"},{"post_id":"ckslj567m0000oiklgjl72ihh","category_id":"ckslj567q0002oikl2u7sc0vf","_id":"ckslj567z0004oikl32cz9zat"},{"post_id":"ckslj56800005oiklgm1gcwuf","category_id":"cko72de5u000zp0klb5as0sml","_id":"ckslj56810007oikl43rr8nj1"},{"post_id":"ckslj56800005oiklgm1gcwuf","category_id":"ckslj567q0002oikl2u7sc0vf","_id":"ckslj56810008oiklcd1cb3ud"},{"post_id":"ckslkr270000040kl6la810to","category_id":"cko72de5n000hp0kl4hvb06qt","_id":"ckslkr274000240klgg2zbsa5"},{"post_id":"ckslkr270000040kl6la810to","category_id":"cko72de6c002up0kl1xo44kzj","_id":"ckslkr274000340klawio5032"},{"post_id":"ckslkr270000040kl6la810to","category_id":"cko72de6m004hp0kl85xkawjr","_id":"ckslkr274000440kl7a4pf52x"},{"post_id":"ckvz2sg8r0000dykl2e361hhl","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckvz2sg920004dyklgyu16bxc"},{"post_id":"ckvz2sg8r0000dykl2e361hhl","category_id":"ckvz2sg910002dykla73jhbgo","_id":"ckvz2sg920005dyklhijf9du4"},{"post_id":"ckvz36v5e00006ykldqmtcstr","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckvz36v5h00026ykl5o587gxw"},{"post_id":"ckvz36v5e00006ykldqmtcstr","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckvz36v5h00036ykl9xomau7e"},{"post_id":"ckvz36v5e00006ykldqmtcstr","category_id":"ckpmlsyqq0005udkl6s027hwb","_id":"ckvz36v5h00046ykl4unm049f"},{"post_id":"ckvz3yevw0000y7kl7o3x1k67","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckvz3yew80005y7kl7h8theci"},{"post_id":"ckvz3yevw0000y7kl7o3x1k67","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckvz3yew80006y7klbdrvhb9x"},{"post_id":"ckvz3yevw0000y7kl7o3x1k67","category_id":"ckpw6u1sa000267kl1ur8e509","_id":"ckvz3yew80007y7kl2pbn2woq"},{"post_id":"ckvz3yevz0001y7kl8gc00xmk","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckvz40quu00003wkledyxej35"},{"post_id":"ckvz3yevz0001y7kl8gc00xmk","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckvz40quv00013wkl2i0t70gh"},{"post_id":"ckvz3yevz0001y7kl8gc00xmk","category_id":"ckpw6u1sa000267kl1ur8e509","_id":"ckvz40quv00023wklclpqfgu5"},{"post_id":"ckw8vi56m000044kl1phf5xfb","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckw8vi56q000244kl3jdk973v"},{"post_id":"ckw8vi56m000044kl1phf5xfb","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckw8vi56q000344kl086fdeez"},{"post_id":"ckw8vi56m000044kl1phf5xfb","category_id":"ckpmlsyqq0005udkl6s027hwb","_id":"ckw8vi56q000444klhibq84zp"},{"post_id":"ckw8voxk6000011kl8dz973yu","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckw8voxki000311klc77mhijm"},{"post_id":"ckw8voxk6000011kl8dz973yu","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckw8voxki000411klfqfsc2u8"},{"post_id":"ckw8voxk6000011kl8dz973yu","category_id":"ckw8voxk9000211klb49i8x56","_id":"ckw8voxki000511kldyrg3epr"},{"post_id":"ckw8vsajj0000i0kl15yh7mpl","category_id":"ckpmlsyqh0001udkl7m7v78qj","_id":"ckw8vsajo0002i0kl48k7dhsh"},{"post_id":"ckw8vsajj0000i0kl15yh7mpl","category_id":"ckpmlsyqp0004udkl8osm2v64","_id":"ckw8vsajo0003i0klhzkfbwex"},{"post_id":"ckw8vsajj0000i0kl15yh7mpl","category_id":"ckw8voxk9000211klb49i8x56","_id":"ckw8vsajo0004i0kl13osehdd"},{"post_id":"cky74xt7g000096klbalxhw36","category_id":"cky74xt7m000196kl5qaugy1r","_id":"cky74xt83000796kl3c7v562t"},{"post_id":"cky74xt7g000096klbalxhw36","category_id":"cky74xt82000496kl9q6h77np","_id":"cky74xt83000896kl70mrae60"}],"PostTag":[{"post_id":"cko72de5b0001p0kl2tr139t0","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"cko72de5l000ep0kl8eue072q"},{"post_id":"cko72de5e0003p0kley8l5b6s","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"cko72de5n000jp0kl4gtabpun"},{"post_id":"cko72de5m000gp0klaxjnc5k6","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"cko72de5o000lp0klab4e6yq4"},{"post_id":"cko72de5h0007p0kl101yae1a","tag_id":"cko72de5n000ip0kl5pjc4fis","_id":"cko72de5s000qp0kl9ntl7h6j"},{"post_id":"cko72de5o000mp0kl79sl5nqt","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"cko72de5s000sp0kldqi3e03n"},{"post_id":"cko72de5q000pp0kl2mvy6bnv","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"cko72de5t000wp0kl5jhyfnqj"},{"post_id":"cko72de5i0009p0kleh027pfh","tag_id":"cko72de5p000op0kleenuevgn","_id":"cko72de5u000yp0klfcinacy7"},{"post_id":"cko72de5j000bp0klhepe9i1k","tag_id":"cko72de5t000up0klejzd0yze","_id":"cko72de5v0012p0kl5szv2i8p"},{"post_id":"cko72de5l000fp0klh2uv1ds8","tag_id":"cko72de5n000ip0kl5pjc4fis","_id":"cko72de5x0017p0kl810pclqa"},{"post_id":"cko72de5n000kp0kl1l6wcyod","tag_id":"cko72de5p000op0kleenuevgn","_id":"cko72de5z001cp0kldyor24f6"},{"post_id":"cko72de5y001ap0kl0h2se7eu","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"cko72de60001ep0kl3eofbvlg"},{"post_id":"cko72de5z001dp0klc7toekwg","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"cko72de61001ip0kl1tjt4y3l"},{"post_id":"cko72de5t000vp0klgsgnb03p","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"cko72de61001kp0kl8lptfmcy"},{"post_id":"cko72de60001fp0kl41cdbmr8","tag_id":"cko72de5t000up0klejzd0yze","_id":"cko72de62001op0klcxt39529"},{"post_id":"cko72de5u000xp0kleb2x269k","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"cko72de63001qp0kl1l38fsc9"},{"post_id":"cko72de5u0011p0klanorholc","tag_id":"cko72de62001np0kl0ugt9is6","_id":"cko72de64001vp0kl4guyhwk5"},{"post_id":"cko72de64001up0klb5qagbu0","tag_id":"cko72de62001np0kl0ugt9is6","_id":"cko72de66001zp0kl3t1a80l2"},{"post_id":"cko72de5v0013p0klaq3neh6e","tag_id":"cko72de64001tp0kl1rj93t6w","_id":"cko72de670021p0klfn1y069l"},{"post_id":"cko72de65001wp0kl59c90vk9","tag_id":"cko72de5p000op0kleenuevgn","_id":"cko72de670024p0klgo376frc"},{"post_id":"cko72de660020p0kl1nopdwm9","tag_id":"cko72de5p000op0kleenuevgn","_id":"cko72de680026p0kl52ykgkjk"},{"post_id":"cko72de5w0015p0kl3u3oen9b","tag_id":"cko72de66001yp0klg6ed5jvq","_id":"cko72de680028p0klbv1j2ewa"},{"post_id":"cko72de670022p0klh5bvh8lx","tag_id":"cko72de5n000ip0kl5pjc4fis","_id":"cko72de69002ap0kl1gu1eum7"},{"post_id":"cko72de5x0018p0kl2u9i3550","tag_id":"cko72de64001tp0kl1rj93t6w","_id":"cko72de69002cp0kl6sft2vxf"},{"post_id":"cko72de61001jp0kl0r8t22qq","tag_id":"cko72de64001tp0kl1rj93t6w","_id":"cko72de69002ep0kld1p8e037"},{"post_id":"cko72de62001lp0kl4st0789e","tag_id":"cko72de69002dp0kl5iaq53xr","_id":"cko72de6a002jp0kl2u4z1ef8"},{"post_id":"cko72de63001pp0kl1om0f1c9","tag_id":"cko72de6a002hp0klf4lf776a","_id":"cko72de6b002mp0kl6t2f1nwq"},{"post_id":"cko72de63001rp0kl2d1g3gfl","tag_id":"cko72de6a002lp0kl64a9ep4h","_id":"cko72de6b002op0klb7rlcs5d"},{"post_id":"cko72de6v005lp0kl5qhfd7ob","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"cko72de6w005mp0klgfuwg7ln"},{"post_id":"cko72de6x005pp0kldvd6e8jg","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"cko72de6y005rp0kl2x48gvfa"},{"post_id":"cko72de6x005qp0klg7ch9wn8","tag_id":"cko72de6y005sp0klbjj13tqq","_id":"cko72de6z005yp0kl6ju1coo7"},{"post_id":"cko72de6x005qp0klg7ch9wn8","tag_id":"cko72de6z005wp0kldxmtcmjh","_id":"cko72de6z0060p0klccva2ctw"},{"post_id":"cko72de5s000rp0klb95tbk22","tag_id":"cko72de5n000ip0kl5pjc4fis","_id":"cko72fq6h0000unkl2tej6nau"},{"post_id":"ckpl0nvur0000ccklbymd8oa7","tag_id":"cko72de5g0005p0kl4xmy1hxg","_id":"ckpl0nvuu0001ccklcolg8ieo"},{"post_id":"ckpmlsyqd0000udkl3hjpckc8","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckpmlsyqp0003udkl472uamh9"},{"post_id":"ckpw5zz330000vjkl3jm4fhzk","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckpw5zz360001vjklf1v1bm5u"},{"post_id":"ckpw6390n000054kle4tj8580","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckpw6390q000154kl8ca3h05r"},{"post_id":"ckpw6u1s7000067klgw3h5w1w","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckpw6u1sa000167klhvg9cb8l"},{"post_id":"cks4t1uej0000y5kl8mfwa1fc","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"cks4t1ueo0001y5kl9nbica7z"},{"post_id":"cksli706e0000sbkl28ke7d7z","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"cksli706i0001sbkl3ie61k9b"},{"post_id":"cksliodri0000b9klhvax9v4n","tag_id":"cko72de6a002hp0klf4lf776a","_id":"cksliodrl0001b9klcz5v55mb"},{"post_id":"ckslj567m0000oiklgjl72ihh","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"ckslj567q0001oikl1w5mcx1d"},{"post_id":"ckslj56800005oiklgm1gcwuf","tag_id":"cko72de5y0019p0kl9ja851lo","_id":"ckslj56810006oikl5ekraz0s"},{"post_id":"ckslkr270000040kl6la810to","tag_id":"cko72de66001yp0klg6ed5jvq","_id":"ckslkr274000140kl4i1jdqrj"},{"post_id":"ckvz2sg8r0000dykl2e361hhl","tag_id":"ckvz2sg8u0001dykl3qib2xxy","_id":"ckvz2sg920003dyklg4rm60aq"},{"post_id":"ckvz36v5e00006ykldqmtcstr","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckvz36v5g00016yklfqai7zvt"},{"post_id":"ckvz3yevw0000y7kl7o3x1k67","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckvz3yew00002y7kl3jboeb3b"},{"post_id":"ckvz3yevz0001y7kl8gc00xmk","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckvz3yew70004y7klc3l1hfvj"},{"post_id":"ckw8vi56m000044kl1phf5xfb","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckw8vi56q000144kl816n06gi"},{"post_id":"ckw8voxk6000011kl8dz973yu","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckw8voxk9000111klgwcpaqjd"},{"post_id":"ckw8vsajj0000i0kl15yh7mpl","tag_id":"ckpmlsyqo0002udklecj782ks","_id":"ckw8vsajo0001i0kl5btiec07"},{"post_id":"cky74xt7g000096klbalxhw36","tag_id":"cky74xt81000296klgxuggfsh","_id":"cky74xt83000596klcdcodfyb"},{"post_id":"cky74xt7g000096klbalxhw36","tag_id":"cky74xt82000396kl2u5i2oas","_id":"cky74xt83000696kl1qse6cx6"}],"Tag":[{"name":"Redis","_id":"cko72de5g0005p0kl4xmy1hxg"},{"name":"Kafka","_id":"cko72de5n000ip0kl5pjc4fis"},{"name":"Zookeeper","_id":"cko72de5p000op0kleenuevgn"},{"name":"Ingress","_id":"cko72de5t000up0klejzd0yze"},{"name":"Kubernetes","_id":"cko72de5y0019p0kl9ja851lo"},{"name":"NFS","_id":"cko72de62001np0kl0ugt9is6"},{"name":"MySQL","_id":"cko72de64001tp0kl1rj93t6w"},{"name":"RabbitMQ","_id":"cko72de66001yp0klg6ed5jvq"},{"name":"Nginx","_id":"cko72de69002dp0kl5iaq53xr"},{"name":"Docker","_id":"cko72de6a002hp0klf4lf776a"},{"name":"Harbor","_id":"cko72de6a002lp0kl64a9ep4h"},{"name":"K8S","_id":"cko72de6y005sp0klbjj13tqq"},{"name":"日志收集","_id":"cko72de6z005wp0kldxmtcmjh"},{"name":"Python","_id":"ckpmlsyqo0002udklecj782ks"},{"name":"shell脚本","_id":"ckvz2sg8u0001dykl3qib2xxy"},{"name":"面试","_id":"cky74xt81000296klgxuggfsh"},{"name":"网络","_id":"cky74xt82000396kl2u5i2oas"}]}}