{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/avator.png","path":"img/avator.png","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1593498827650},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1593498827650},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1593498827650},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1593498827650},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1593498827650},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1593498827657},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1593498802859},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1593498827650},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1593498827650},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1593498827651},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1593498827651},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1593498827651},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1593498827651},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1593498827651},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1593498827651},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1593498827652},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1593498827652},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1593498827652},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1593498827656},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1593498827656},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1593498827657},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1593498827656},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1593498827656},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1593498827657},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1593498827657},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1593498827657},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1593498827651},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1593498827652},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1593498827653},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1593498827652},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1593498827653},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1593498827653},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1593498827653},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1593498827653},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1593498827653},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1593498827654},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1593498827654},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1593498827655},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1593498827655},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1593498827656},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1593498827656},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1593498827656},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1593498827656},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1593498827657},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1593498827659},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1593498827667},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1593498827667},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1593498827667},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1593498827668},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1593498827668},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1593498827667},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1593498827668},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1593498827669},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1593498827669},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1593498827670},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1593498827670},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1593498827654},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1593498827654},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1593498827654},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1593498827655},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1593498827655},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1593498827655},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1593498827658},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1593498827658},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1593498827658},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1593498827658},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1593498827658},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1593498827658},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1593498827658},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1593498827659},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1593498827659},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1593498827659},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1593498827659},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1593498827664},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1593498827668},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1593498827668},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1593498827668},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1593498827669},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1593498827669},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1593498827669},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1593498827658},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1593498827662},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1593498827661},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1593498827664},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1593498827663},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1593498827666},{"_id":"public/2020/06/30/hello-world/index.html","hash":"4ce66e5c1021013f85158a9bb493b847ad92fc10","modified":1593605918848},{"_id":"public/archives/2020/index.html","hash":"406cc46d9e5909e1954591638abc4f5d09207c98","modified":1600573774076},{"_id":"public/archives/index.html","hash":"a8c01da2efead294ced0553bb72d3833ff4d9962","modified":1600573774076},{"_id":"public/archives/2020/06/index.html","hash":"6217e31a683ba98c2286efba1384976acf816ba7","modified":1593608003414},{"_id":"public/index.html","hash":"aeeb7ee87cb8e2c1aea2d50a5cc204e23f0c830b","modified":1600573774076},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1593498856588},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1593498856588},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1593498856588},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1593498856588},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1593498856588},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1593498856588},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1593498856588},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1593498856588},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1593498856588},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1593498856588},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1593498856588},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1593498856588},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1593498856588},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1593498856588},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1593498856588},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1593498856588},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1593498856588},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1593498856588},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1593498856588},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1593498856588},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1593498856588},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1593498856588},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1593498856588},{"_id":"themes/butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1593499249899},{"_id":"themes/butterfly/README.md","hash":"111662216ce7d1ea63d7072aaea2a612543c19a1","modified":1593499249900},{"_id":"themes/butterfly/README_CN.md","hash":"6c17872d3bbd147a86f53a7de7ee193dfd1a9000","modified":1593499249900},{"_id":"themes/butterfly/_config.yml","hash":"84966ed27e5e18022bc6880098d03f0b26322d32","modified":1599293200708},{"_id":"themes/butterfly/package.json","hash":"f92db754486cb1cfaaa4b03b869877c922974bee","modified":1593499249927},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE.md","hash":"bc427d7f13fec05cfd2dcc10953cbb2a96bc31be","modified":1593499249898},{"_id":"themes/butterfly/.github/stale.yml","hash":"cd5a929ce25a6293a9f449e7b80dfe4307326797","modified":1593499249899},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e7d642fe6ed909c6552accd919a812c9ae86df7d","modified":1593499249903},{"_id":"themes/butterfly/languages/en.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1593499249902},{"_id":"themes/butterfly/languages/default.yml","hash":"730a00d41d0cb7b6ad768a9f91889307ffeffc23","modified":1593499249902},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"582d4800d33209f4612f48f25f69e8d952aeabfe","modified":1593499249903},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1593499249903},{"_id":"themes/butterfly/layout/category.pug","hash":"d014234c26d2c07caaea6703f7b48cb69c51907d","modified":1593499249904},{"_id":"themes/butterfly/layout/404.pug","hash":"9ba3cea0f61ad5d0f6cb782fd3da9cf7b4077ae4","modified":1593499249903},{"_id":"themes/butterfly/layout/flink.pug","hash":"12571e3b98651d655cab29c01a33663393c66056","modified":1593499249904},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1593499249927},{"_id":"themes/butterfly/layout/page.pug","hash":"130ab657a6acfe149dbc59e481dc05d4d7d926a3","modified":1593499249927},{"_id":"themes/butterfly/layout/post.pug","hash":"2e34fd65d36508faec9fd015d6cdb108d4c29b58","modified":1593499249927},{"_id":"themes/butterfly/layout/tag.pug","hash":"3bb2a700c6d709d2757d55d357eed1fca5644e24","modified":1593499249927},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"06ff82eaedfbc5cc9a65e34eaa063cebfb942a93","modified":1593499249905},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"0675b44ce8eeffca750f32f68e406145b070f363","modified":1593499361525},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"5f3a4c030a5f27d890089737f3fd4c58a1154c1f","modified":1593499249909},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e764e4ecceb04e11e2bfef84e72b4529bdc2362b","modified":1593499249916},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"29c6e5f8b82de38f61b53decfa9e0e9831b188f8","modified":1593499249921},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"71960ea57a3f241c80e7701f2decbf4ba9736ba0","modified":1593499249923},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"158e49e0466e71e4d2cc7087a3ac5e703b3e13e4","modified":1593499249924},{"_id":"themes/butterfly/scripts/events/404.js","hash":"3c30dbd8b910ce7d8d7d8353cf2266cbc5d8775d","modified":1593499249927},{"_id":"themes/butterfly/scripts/events/replace_config.js","hash":"537e556e76760ce2103f359d5a424c6e2b9a0710","modified":1593499249928},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0b4775aaa955b75f03648fc1957fb88a6d440803","modified":1593499249929},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"e6db030700cefcd79e7a826b04e2a7172d53428e","modified":1593499249928},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"fb394ffd0ec61fe50ff992fdf11356312ca2ccfb","modified":1593499249929},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"11aabab0092a3f2258c1fa931e74a7796074c515","modified":1593499249929},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"64b13aeb4f49609529be6f9060797bafc8a6f9bc","modified":1593499249930},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"729a9f40c5bf603036f6e9443db93b1704cf17d9","modified":1593499249930},{"_id":"themes/butterfly/scripts/tags/gallery.js","hash":"2fad0a9e6645613631aad36dc3473fe8e032809b","modified":1593499249932},{"_id":"themes/butterfly/scripts/tags/button.js","hash":"bae84b36b58572112047c3b02e975c1e762de56b","modified":1593499249931},{"_id":"themes/butterfly/scripts/tags/mermaid.js","hash":"53eaff19d8da32e04e2c871300ea495356d633cd","modified":1593499249932},{"_id":"themes/butterfly/scripts/tags/hide.js","hash":"a32e4166b6cbbc1c2bdecaa74662a12cdb98f4ce","modified":1593499249932},{"_id":"themes/butterfly/scripts/tags/note.js","hash":"c739846637c48b4779df2f62effb78e15100fd9f","modified":1593499249932},{"_id":"themes/butterfly/scripts/tags/tabs.js","hash":"ec58149e16b6269bbcb685020b98567e8e3440a8","modified":1593499249932},{"_id":"themes/butterfly/source/css/index.styl","hash":"8d908c4bc856f9369e8148e7b8dd7fb968fbf66c","modified":1593499249944},{"_id":"themes/butterfly/source/css/var.styl","hash":"3c20dbec8e323628f17a8510f6ef8bba6f00db2a","modified":1593499249945},{"_id":"themes/butterfly/source/js/main.js","hash":"71c958b954ec9c1d050c86e285f2a8192f5f5c00","modified":1593499249949},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1593499249954},{"_id":"themes/butterfly/source/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1593499249955},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1593499249945},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1593499249946},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1593499249946},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1593499249947},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1593499249948},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1593499249946},{"_id":"themes/butterfly/layout/includes/chat/chatra.pug","hash":"77ec360f1f9fd702be540b0542449705828a77da","modified":1593499249905},{"_id":"themes/butterfly/layout/includes/chat/daovoice.pug","hash":"ab96a70b0a65a7fae094d426beba7433f60f4a5a","modified":1593499249906},{"_id":"themes/butterfly/layout/includes/chat/gitter.pug","hash":"ba9576ecba1a1768c25377e8b4fdb133982bd214","modified":1593499249906},{"_id":"themes/butterfly/layout/includes/chat/index.pug","hash":"da7412131e768e331a9f33804f2f5f7c5eeaa178","modified":1593499249907},{"_id":"themes/butterfly/layout/includes/chat/tidio.pug","hash":"208035fb6ae639653861d15c9a20e8d4bba2b02a","modified":1593499249907},{"_id":"themes/butterfly/layout/includes/comments/disqus.pug","hash":"821d968122bab8ce1ce04dc553b731eaf8e0d181","modified":1593499249907},{"_id":"themes/butterfly/layout/includes/comments/disqusjs.pug","hash":"751351eae0540651a5db865262ff4a6d40680715","modified":1593499249907},{"_id":"themes/butterfly/layout/includes/comments/facebook_comments.pug","hash":"7b7bb7d2b39b639cc8e1edf1274148460796662e","modified":1593499249908},{"_id":"themes/butterfly/layout/includes/comments/gitalk.pug","hash":"e98f5c199a76ad939a29a46c0dcbf7e85ec60ed2","modified":1593499249908},{"_id":"themes/butterfly/layout/includes/comments/livere.pug","hash":"9518b6e0c532af8ab0ae569ad795b769a2bd3040","modified":1593499249908},{"_id":"themes/butterfly/layout/includes/comments/index.pug","hash":"67cfc03939e08992ccb3a453d2b72458056535e9","modified":1593499249908},{"_id":"themes/butterfly/layout/includes/comments/utterances.pug","hash":"9427cb07bcfe2bc7198755eeebf60f9fe430a342","modified":1593499249908},{"_id":"themes/butterfly/layout/includes/comments/valine.pug","hash":"7b91be55c613f16bb2da9ab48aaf6e08781f563a","modified":1593499249909},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"a3c819238dceab080d5db0336ef07009ca216310","modified":1593499249910},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"8ec0609f14c284c3e6120940d7c4d7f1f201cd67","modified":1593499249910},{"_id":"themes/butterfly/layout/includes/head/aplayer.pug","hash":"b24959f00ac75f12f66b445158aad143ee860795","modified":1593499249910},{"_id":"themes/butterfly/layout/includes/head/comment.pug","hash":"7de136bdce45afa81341b13e61b7a3926e15f03b","modified":1593499249910},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"e8b774f88cc717371d2e31f5d532007d0b7b23ab","modified":1593499249910},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"29d6ab8de6e355925e76d92862671ce48ddd6f12","modified":1593499249911},{"_id":"themes/butterfly/layout/includes/head/darkmode.pug","hash":"fa834037bf29843abd6b63fed3a868638b9875cd","modified":1593499249911},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"ff4ceda534cdd711cfa2cb9e95e36258988674e1","modified":1593499249911},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"0a23423304127c4ffa69310526aaa59830d12c78","modified":1593499249911},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"95affc2c333f27b968c47272277da712d13f2670","modified":1593499249912},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"be1ff710e4381fc684243313dcadf0140d7469de","modified":1593499249912},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"f5c8ec73c797ff3455e732fa7c92c856692f3ce5","modified":1593499249912},{"_id":"themes/butterfly/layout/includes/head/subtitle.pug","hash":"bfbf1c850dcd825c2eb68bc74e9787a5fef9258b","modified":1593499249912},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"12dc74a7370b8d00f010e6914c09b1b12343fd92","modified":1593499249914},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"c76b6236995f15e3cf5af376101c782a1078b845","modified":1593499249914},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"2ff93c4edc1e52f63f3cd5f90354683e933a299e","modified":1593499249914},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"aa83c7e0dcaf60c85d44af32a7d2d20667a6893b","modified":1593499249914},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1593499249915},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1593499249917},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"3cf431a4f04997b55873f7099c1402155b19cc95","modified":1593499249916},{"_id":"themes/butterfly/layout/includes/math/index.pug","hash":"ec97f284626b67208370b5084e5c5822844fa30a","modified":1593499249917},{"_id":"themes/butterfly/layout/includes/math/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1593499249918},{"_id":"themes/butterfly/layout/includes/math/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1593499249918},{"_id":"themes/butterfly/layout/includes/math/mermaid.pug","hash":"db848ff451d4c58670af415882ca6bb2e0da971b","modified":1593499249918},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"4736ea0dec5561f4f75d283be3629062b234af23","modified":1593499249919},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"c046c1b43ce9b5afe68b60c08230b843113a1561","modified":1593499249919},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/index.pug","hash":"d12fab033fb32b55abbc9be9b04cc6ab6465b98e","modified":1593499249920},{"_id":"themes/butterfly/layout/includes/mobile-sidebar/mobile-menus.pug","hash":"e7ee2593788c6614b9f41f0789ef7166fe73a707","modified":1593499249920},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"8efc0b7886bdb5959e173b5e11f5ffb8d1c5230e","modified":1593499249922},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"3740cece6885c285351295612723fd66e0d5a4bf","modified":1593499249923},{"_id":"themes/butterfly/layout/includes/search/algolia.pug","hash":"518eec7302d4fad75be46486407a945b39833ff8","modified":1593499249923},{"_id":"themes/butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1593499249924},{"_id":"themes/butterfly/layout/includes/search/local-search.pug","hash":"f8686264a4ff1d48961296f9949d705bc87de3ea","modified":1593499249924},{"_id":"themes/butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1593499249924},{"_id":"themes/butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1593499249924},{"_id":"themes/butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1593499249924},{"_id":"themes/butterfly/layout/includes/share/share-js.pug","hash":"828a04c6e8e3a56c3c7f3c9bb1ecf4f99ed842fe","modified":1593499249924},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"721b611fda6dcfca8f88b9c7b70fede7b69a516b","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"2e940de1a6261fd378e16e4cd3362a9d69c12f50","modified":1593499249925},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"393a6f9a5dcabe8d96e9b6cb5620c12966dfd37f","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"b5d73ceb54c43cc22e46b1cdcde24fcc8e420755","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"83cb6ba0d8c913570147b3871c7fc0674dac8cdf","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"355b50dd13471e00fbbfcf6519cf32a092c095b3","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"6a4c85a037c10e093f545d3167691c0b68634465","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"15fb3730f829e237c102a70ab9781178471fd786","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"e0febc7eb43ceb21bb1607d4f2358b9b633cb2d2","modified":1593499249926},{"_id":"themes/butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1593499249925},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1593499249925},{"_id":"themes/butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"b4acf48c98ba2a6a5a5fb5387a0fd610bdfd55ef","modified":1593499249925},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"8fdb96b8329e352ed691228767451b264151b3a6","modified":1593499249925},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7f800733ca4e4ee4dd1e0ccaace274d1bc896539","modified":1593499249933},{"_id":"themes/butterfly/source/css/_highlight/diff.styl","hash":"2d9820f9fc556855c9c26f9242adb1b29fe3c272","modified":1593499249934},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"cd9580fdf3a138ca84504e1a8b3f4d633ccc7bd5","modified":1593499249933},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"70ce4e354b03fe926fd06822e2a5f125e1cd3697","modified":1593499249935},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"f2884605b55dfb9575f9532d6ac568bc59d0c4ab","modified":1593499249935},{"_id":"themes/butterfly/source/css/_layout/404.styl","hash":"b766e536a7a558f4850b31464a284ce2384d79f6","modified":1593499249936},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"25c9a71043156adf67662d68b35d97d66f60a396","modified":1593499249936},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1593499249937},{"_id":"themes/butterfly/source/css/_layout/category.styl","hash":"7267043e52a9e620adfa860bdb3e4de400ff2596","modified":1593499249937},{"_id":"themes/butterfly/source/css/_layout/flink.styl","hash":"079ed647f847cf2693928d358929b65ce67cb31b","modified":1593499249938},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"f7038a0ac08396784e57bcd31f6431c92909f514","modified":1593499249938},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d8709e29efcfa0a7356384026dfbaac8861d3baa","modified":1593499249938},{"_id":"themes/butterfly/source/css/_layout/mobile-sidebar.styl","hash":"d2d6b36f3bcbba35e1e63ac0d59879decf63cc1f","modified":1593499249939},{"_id":"themes/butterfly/source/css/_layout/loadding.styl","hash":"144ef01b03ae34d3ede4b9aa18f4c8cd3d6651ea","modified":1593499249938},{"_id":"themes/butterfly/source/css/_layout/page.styl","hash":"2fc2230d9a7117f6c5f7e484e2fbfc76e62fa8bc","modified":1593499249939},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"8f44be6a866d11f6afabf8689d9ae7b65eee18ae","modified":1593499249939},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"37a9832a6bc409947e85556b31f2adadf2f412ec","modified":1593499249939},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"4825afd4f94f1481b5422072fa5e506e2a387247","modified":1593499249940},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"495da7b41a7909df989a5dcc13a29761ef23089b","modified":1593499249940},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1cb78e3c8217eb93ad3652f60a3f4c92c1218083","modified":1593499249940},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"33da3da65715ce1a85b8ecab92e0eab6ce620a58","modified":1593499249941},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"4923e99c1b6abf11c81539576ce65202a2f40efb","modified":1593499249941},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"ce9b157439f48c5ef9106cbe3090525815009134","modified":1593499249941},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1608b5c2a307809e25ac7ad903fc6bc009c30016","modified":1593499249942},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"641ef2bc7af135c17fd90f3f974e78ebbaf1ac13","modified":1593499249942},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"5bb29799d0168b1d68cfb8165a41b9d90f86eab7","modified":1593499249942},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"da791f46239eabbbf28eb30b9e441f1ac2a8ced1","modified":1593499249942},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"40926b9d87e06d4679bd3c8542a7a3acd5d10cc1","modified":1593499249943},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"0bc29278fbcf1aec15222ed10c58697da1a0d676","modified":1593499249943},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1593499249943},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"2f8d4043dedef70813493e43e4c158e16ccc3fc0","modified":1593499249944},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"10e925cf59748af445d3606d965731013f31827c","modified":1593499249943},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"001bd6d68a9b9af5dd0158fe116889434f36b1fd","modified":1593499249944},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"48a582e1847595aaa435c048a7bb78b44ed8a716","modified":1593499249944},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1593499249950},{"_id":"themes/butterfly/source/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1593499249951},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1593499249950},{"_id":"themes/butterfly/source/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1593499249952},{"_id":"themes/butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1593499249952},{"_id":"themes/butterfly/source/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1593499249953},{"_id":"themes/butterfly/source/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1593499249952},{"_id":"themes/butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1593499249953},{"_id":"themes/butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1593499249954},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1599293212454},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1599293212454},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599293212454},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1599293212454},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1599293212454},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1599293212454},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599293212454},{"_id":"public/js/utils.js","hash":"43da5a9129aa827dc5c311b0e5e3a12ccc61b488","modified":1599293212454},{"_id":"public/js/search/algolia.js","hash":"5ff5cb40d5ede73b48594d331244ada001154dac","modified":1599293212454},{"_id":"public/js/search/local-search.js","hash":"497993860b3c42bdc926a3bd83b4b8f480febd99","modified":1599293212454},{"_id":"public/js/third-party/ClickShowText.js","hash":"32864aee35b5d739a36702b8d916b17bac52b17e","modified":1599293212454},{"_id":"public/js/third-party/activate-power-mode.js","hash":"2c4ab494225b7d04eed934efc43a43791e596f4a","modified":1599293212454},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1599293212454},{"_id":"public/js/third-party/click_heart.js","hash":"004ea645ed8c5e354711b5fc0dbfe015e181916b","modified":1599293212454},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"1ddf4f6896175e77518f0fbd45776132b2954fb6","modified":1599293212454},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1599293212454},{"_id":"public/css/index.css","hash":"69916f621dbb38eaae377b7f3d25e21e21f52ab0","modified":1599293212454},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1599293212454},{"_id":"public/js/main.js","hash":"71c958b954ec9c1d050c86e285f2a8192f5f5c00","modified":1599293212454},{"_id":"public/js/tw_cn.js","hash":"030ad26843c22f6a5f91a40200c65d079a4f8475","modified":1599293212454},{"_id":"source/.DS_Store","hash":"e057ee63168af528499f27b137d43fcb1d40f062","modified":1600491909674},{"_id":"themes/butterfly/.DS_Store","hash":"f3eecb98f68c3e54bd8c83de66018ba8f301851b","modified":1595811919943},{"_id":"themes/butterfly/scripts/.DS_Store","hash":"6f571c864f5823c9285985fe28b6d9ad285ab1b6","modified":1595811928375},{"_id":"themes/butterfly/source/.DS_Store","hash":"e779ec7f0684050f9f5ab1ecc6545742911b44ee","modified":1595811933392},{"_id":"themes/butterfly/source/img/avator.png","hash":"b2bc08b8559a3a777724aadcbaebbaf3bef791ef","modified":1593602012447},{"_id":"public/img/avator.png","hash":"b2bc08b8559a3a777724aadcbaebbaf3bef791ef","modified":1599293212454},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18.md","hash":"b9a64db9e3423fe8f5546d7a8cdecda9f069fefc","modified":1593653675732},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1-18/index.html","hash":"6edcfd3e658403ce32893316dbaf0a19cabb2964","modified":1593653686696},{"_id":"public/categories/实践K8s/index.html","hash":"2935c52e75fbbe1295cf8cd8cbbd39063a20aa8d","modified":1600573774076},{"_id":"public/archives/2020/07/index.html","hash":"68bcd27b85b9824b12621cbbef41f69e10164db5","modified":1600573774076},{"_id":"public/tags/k8s/index.html","hash":"46ec24082dd45f7beeb03ed212602692a00afbf3","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18.md","hash":"258d873c8a26fcb23c2431a4f13a6c27a13089ab","modified":1596525968748},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/index.html","hash":"be0214b7448964226b801e84de8d27e96ed6997e","modified":1600492645158},{"_id":"source/_posts/.DS_Store","hash":"7197bc302bc0f9c1c90361d3bdc77b012e67d6b8","modified":1599652225645},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/calico-ip.png","hash":"09ce9a83c995cb0c4d555ddf2ece17500adec831","modified":1590752446576},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/getnode.png","hash":"cca3144948217ad6da5e3a1d76318129645a4f3f","modified":1590745484742},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/ipvs-rule.png","hash":"7e7ceb0a160f685d3a9dee118dcb3097d08c6972","modified":1590744137009},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/ipvs.png","hash":"8fbcc475b70df71470e99c27de0c5ac0e85975e5","modified":1590744078693},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/nodes.png","hash":"5a4cbbd814630d38b64eb765ddb9c5a6f6248e7e","modified":1590751279682},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/cluster-check.png","hash":"24ce5c0972b9b454e7795bf9ced171962d821482","modified":1590752593235},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/etcd-cluster.png","hash":"3f8dfed7be6d7b786067aca7f64141d056df2aa9","modified":1590745192966},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/etcd-helth.png","hash":"0d4545d89bd3805f15df8ccadb765ce7a6c1de14","modified":1590745264968},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/ansible-check.png","hash":"17ed2a4a4577997d4c3caf3f94f58bcc56c0d516","modified":1590672622104},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/calico-node.png","hash":"d13121504e5bdae80705842b27e49ef3485f604d","modified":1590752083048},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/etcd-member.png","hash":"2ab5159afa1cb59f8cd52355ceaee1d928d10a8d","modified":1590745041332},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/kubeadm-init.png","hash":"001a0c763ade70a0cc5585b495975b64fee04591","modified":1590742888975},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/check-master.png","hash":"7eaef082099e0122c06ca5c2396b514ef47eae51","modified":1590743719104},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1-18/single-master.png","hash":"c6efea5343719c2248028b2063717f8b784b4ffa","modified":1590455774465},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/calico-ip.png","hash":"09ce9a83c995cb0c4d555ddf2ece17500adec831","modified":1590752446576},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/cluster-check.png","hash":"24ce5c0972b9b454e7795bf9ced171962d821482","modified":1590752593235},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/getnode.png","hash":"cca3144948217ad6da5e3a1d76318129645a4f3f","modified":1590745484742},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/nodes.png","hash":"5a4cbbd814630d38b64eb765ddb9c5a6f6248e7e","modified":1590751279682},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/ipvs.png","hash":"8fbcc475b70df71470e99c27de0c5ac0e85975e5","modified":1590744078693},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/ipvs-rule.png","hash":"7e7ceb0a160f685d3a9dee118dcb3097d08c6972","modified":1590744137009},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/calico-node.png","hash":"d13121504e5bdae80705842b27e49ef3485f604d","modified":1590752083048},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/etcd-helth.png","hash":"0d4545d89bd3805f15df8ccadb765ce7a6c1de14","modified":1590745264968},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/etcd-cluster.png","hash":"3f8dfed7be6d7b786067aca7f64141d056df2aa9","modified":1590745192966},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/etcd-member.png","hash":"2ab5159afa1cb59f8cd52355ceaee1d928d10a8d","modified":1590745041332},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/ansible-check.png","hash":"17ed2a4a4577997d4c3caf3f94f58bcc56c0d516","modified":1590672622104},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/kubeadm-init.png","hash":"001a0c763ade70a0cc5585b495975b64fee04591","modified":1590742888975},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/check-master.png","hash":"7eaef082099e0122c06ca5c2396b514ef47eae51","modified":1590743719104},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/single-master.png","hash":"c6efea5343719c2248028b2063717f8b784b4ffa","modified":1590455774465},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/calico-ip.png","hash":"09ce9a83c995cb0c4d555ddf2ece17500adec831","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/getnode.png","hash":"cca3144948217ad6da5e3a1d76318129645a4f3f","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/nodes.png","hash":"5a4cbbd814630d38b64eb765ddb9c5a6f6248e7e","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/ipvs.png","hash":"8fbcc475b70df71470e99c27de0c5ac0e85975e5","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/ipvs-rule.png","hash":"7e7ceb0a160f685d3a9dee118dcb3097d08c6972","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/ansible-check.png","hash":"17ed2a4a4577997d4c3caf3f94f58bcc56c0d516","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/cluster-check.png","hash":"24ce5c0972b9b454e7795bf9ced171962d821482","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/etcd-helth.png","hash":"0d4545d89bd3805f15df8ccadb765ce7a6c1de14","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/etcd-cluster.png","hash":"3f8dfed7be6d7b786067aca7f64141d056df2aa9","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/etcd-member.png","hash":"2ab5159afa1cb59f8cd52355ceaee1d928d10a8d","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/calico-node.png","hash":"d13121504e5bdae80705842b27e49ef3485f604d","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/check-master.png","hash":"7eaef082099e0122c06ca5c2396b514ef47eae51","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/kubeadm-init.png","hash":"001a0c763ade70a0cc5585b495975b64fee04591","modified":1593679257288},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/single-master.png","hash":"c6efea5343719c2248028b2063717f8b784b4ffa","modified":1593679257288},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/kubeadm.png","hash":"ea2dcaceeebcd6a41618c80b1ddc708033d70a8d","modified":1593682048675},{"_id":"public/tags/k8s集群部署/index.html","hash":"bdba8981d484e2a8fe77f196ec8da55d594ddaba","modified":1600573774076},{"_id":"public/2020/07/02/k8s实践系列-kubeadm部署k8s-1.18/kubeadm.png","hash":"ea2dcaceeebcd6a41618c80b1ddc708033d70a8d","modified":1593682088709},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/.DS_Store","hash":"5a1918b630b1bb01f3544ea8cc135a961eac772a","modified":1593682303651},{"_id":"source/tags/index.md","hash":"ed49c4e6c4204d89e0c5838479e499e795c334d7","modified":1593686986958},{"_id":"public/tags/index.html","hash":"faf9c87105d4553a2210c4f777fe10cbd0b8869f","modified":1600573774076},{"_id":"source/categories/index.md","hash":"85bf8b8d10fc11464413d4aebbf69db8588832d7","modified":1593687074126},{"_id":"public/categories/index.html","hash":"da0cc8ba05d8cff45e9338656861b5d2c684a27a","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-升级集群到1-18.md","hash":"35b88e181c1d09cf924a1900f37ecb793f70b31e","modified":1593781009467},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update-kubeadm.png","hash":"3debb778ab887ba714bdc7d4315db8bf3771b99a","modified":1590805725405},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/newversion.png","hash":"062c93633044768b7377667e0dc584458735d6ba","modified":1590805340792},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/carbon.png","hash":"b29c1c8c65ae1c923b7e6009c303c56366e01247","modified":1590806872655},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update-res.png","hash":"da5105cb9de4db6fb586379f651cb8ebb897eb77","modified":1590808786290},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update.png","hash":"04431574468c7db31d2d96d39ca4d7b710dc5f11","modified":1590806447061},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update-node.png","hash":"4b383fa12090e0107da8a07853060b1bd97cf61d","modified":1590808369447},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/drain.png","hash":"68b4dc6b5bfb4a6b70f069eb2bc5e5936d9a2b79","modified":1590805910333},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/index.html","hash":"e2683b3703f7f80f15d9518282f94099bab6a5fe","modified":1600492645158},{"_id":"public/tags/k8s集群升级/index.html","hash":"a381debe1b22a50dd43a596529520e8c367b2ff9","modified":1600573774076},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/update-kubeadm.png","hash":"3debb778ab887ba714bdc7d4315db8bf3771b99a","modified":1593780719946},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/carbon.png","hash":"b29c1c8c65ae1c923b7e6009c303c56366e01247","modified":1593780719946},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/update.png","hash":"04431574468c7db31d2d96d39ca4d7b710dc5f11","modified":1593780719946},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/update-res.png","hash":"da5105cb9de4db6fb586379f651cb8ebb897eb77","modified":1593780719946},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/newversion.png","hash":"062c93633044768b7377667e0dc584458735d6ba","modified":1593780719946},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/update-node.png","hash":"4b383fa12090e0107da8a07853060b1bd97cf61d","modified":1593780719946},{"_id":"public/2020/07/03/k8s实践系列-升级集群到1-18/drain.png","hash":"68b4dc6b5bfb4a6b70f069eb2bc5e5936d9a2b79","modified":1593780719946},{"_id":"source/_posts/k8s实践系列-卸载集群.md","hash":"ab69cb46a9b1633e1097546c768ec38b6757c063","modified":1593915753908},{"_id":"public/categories/实践k8s/index.html","hash":"77dba67d2d0a25d027ec386e9c9717dd766c739a","modified":1599650342792},{"_id":"public/2020/07/05/k8s实践系列-卸载集群/index.html","hash":"442c31d15d39cfdef92e2c0256118c45ac3b6a49","modified":1600492645158},{"_id":"source/_posts/k8s实践系列-证书管理.md","hash":"df82882c1219137908fd18411506ad3fc73784e0","modified":1593917114448},{"_id":"source/_posts/k8s实践系列-证书管理/update.png","hash":"b2cd66d8ba085164e75d3442a628ea57794e0bb3","modified":1593916805844},{"_id":"public/2020/07/05/k8s实践系列-证书管理/index.html","hash":"fef9a2570cf9b1cdcc912742e8a32e5c254e874c","modified":1600492645158},{"_id":"public/tags/k8s证书管理/index.html","hash":"c73818b5d92c12a517aefd52590ad88e81b6f2c4","modified":1600573774076},{"_id":"public/2020/07/05/k8s实践系列-证书管理/update.png","hash":"b2cd66d8ba085164e75d3442a628ea57794e0bb3","modified":1593917125588},{"_id":"source/_posts/k8s实践系列-使用nfs存储.md","hash":"fde2b6bb5ec020b15eead39cf9fc76771f96c3e6","modified":1593920542140},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/index.html","hash":"1677d2eb6b86d6d426df784a9a93469b4cd44c53","modified":1600492645158},{"_id":"public/tags/k8s持久化存储/index.html","hash":"b4af2a323e54b5a32efc1cb3f12287060eb66c48","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-使用nfs存储/.DS_Store","hash":"bcda3eeae21d5c8bb9036a744e72813670481506","modified":1593918869055},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pod-nfs-svc.png","hash":"14df383bb1a39f069a6a41c66c590dfaf7862024","modified":1589783600111},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pod-nfs-test.png","hash":"6c44a178fe6f673ea72649b02bbc235588527369","modified":1589783703543},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pod-nfs.png","hash":"f58f243592d8fb36010961dd21acfa67a7c016e3","modified":1589783304125},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pvc-nginx.png","hash":"1d66319a61690cbe6a845474238060a4dc27e1e5","modified":1589785450013},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pvc.png","hash":"5642f98a4804c3033865c7dc83cc3999fbed4fd0","modified":1589785186712},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pv.png","hash":"e34c9983e81419e8457171f090588398b4eb619c","modified":1589784740059},{"_id":"source/_posts/k8s实践系列-使用nfs存储/nfs-client.png","hash":"e4f03cecc4d0f70d02a9765d1349014885ab1217","modified":1589788265463},{"_id":"source/_posts/k8s实践系列-使用nfs存储/storageclass-pvc.png","hash":"96817ede171b4d89e9a947f6444c79d2950da7e4","modified":1589788620188},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/pod-nfs-test.png","hash":"6c44a178fe6f673ea72649b02bbc235588527369","modified":1593918978724},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/pod-nfs.png","hash":"f58f243592d8fb36010961dd21acfa67a7c016e3","modified":1593918978724},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/pv.png","hash":"e34c9983e81419e8457171f090588398b4eb619c","modified":1593918978724},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/pvc-nginx.png","hash":"1d66319a61690cbe6a845474238060a4dc27e1e5","modified":1593918978724},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/pod-nfs-svc.png","hash":"14df383bb1a39f069a6a41c66c590dfaf7862024","modified":1593918978724},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/pvc.png","hash":"5642f98a4804c3033865c7dc83cc3999fbed4fd0","modified":1593918978724},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/nfs-client.png","hash":"e4f03cecc4d0f70d02a9765d1349014885ab1217","modified":1593918978724},{"_id":"public/2020/07/05/k8s实践系列-使用nfs存储/storageclass-pvc.png","hash":"96817ede171b4d89e9a947f6444c79d2950da7e4","modified":1593918978724},{"_id":"source/_posts/k8s实践系列-部署MetricServer.md","hash":"ba8c41cde0dd28289e6d3edaf35fb8b163a389b9","modified":1593929492400},{"_id":"source/_posts/k8s实践系列-部署MetricServer/.DS_Store","hash":"f4f07718d5fc802b38027f3a9da8962e82b1c1f1","modified":1593929399022},{"_id":"source/_posts/k8s实践系列-部署MetricServer/check.png","hash":"f40d04bd0f0a65a61c076fab5f83625a963c28f8","modified":1590842876728},{"_id":"public/2020/07/05/k8s实践系列-部署MetricServer/index.html","hash":"bf4d0121b70004532e1bf09cbc273699644e4be7","modified":1600492645158},{"_id":"public/2020/07/05/k8s实践系列-部署MetricServer/check.png","hash":"f40d04bd0f0a65a61c076fab5f83625a963c28f8","modified":1593929421953},{"_id":"source/_posts/部署Nginx.md","hash":"f0113a448c963c8ef35879c6517206a665dcd1f5","modified":1593933566797},{"_id":"source/_posts/部署Nginx/.DS_Store","hash":"33240f7fd2bd93f5df27a866d9435de1ddefa96d","modified":1593933301534},{"_id":"source/_posts/部署Nginx/install_source.png","hash":"a27b02fcf010964ca833d53dd2fc549e52949a9e","modified":1589874235654},{"_id":"public/2020/07/05/部署Nginx/index.html","hash":"dd08710fa03c56137fd95625d9afdf52f1aca9ce","modified":1600492645158},{"_id":"public/categories/Nginx/index.html","hash":"68d840093ee9b5fc9187a7502e6755a540a87f9a","modified":1600573774076},{"_id":"public/tags/Nginx/index.html","hash":"471ec643a544aa3bdaed98f6e29b319363a83b4e","modified":1600573774076},{"_id":"public/2020/07/05/部署Nginx/install_source.png","hash":"a27b02fcf010964ca833d53dd2fc549e52949a9e","modified":1593933505568},{"_id":"source/_posts/升级Nginx.md","hash":"c90a328f0327921750ff348d1559301777a4ba94","modified":1599653737105},{"_id":"public/2020/07/05/升级Nginx/index.html","hash":"6d818cab868d8a3e77bd0ff6b3126aab984fb0c2","modified":1600492645158},{"_id":"source/_posts/部署Redis.md","hash":"c679ce91d316fe4412ceff8990592fc221ff5205","modified":1596779901935},{"_id":"public/2020/07/05/部署Redis/index.html","hash":"40bcd5035f4a62cfbe5048b69bc08686b06075b4","modified":1600492645158},{"_id":"public/categories/Redis/index.html","hash":"bfbfe626dcbcc0b286ab08940bd5678bff0b8cf3","modified":1596778976198},{"_id":"public/tags/Redis/index.html","hash":"9fe3b064b8c6a8a77b39f9947c5acfe403760bea","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-一.md","hash":"c9391018991357d766ff6d04760407f15ad60553","modified":1595209935719},{"_id":"source/_posts/k8s实践系列-部署Ingress.md","hash":"2d300b5d496463ad6bbd5b5f70027fe52f89c1b2","modified":1594865971934},{"_id":"public/2020/07/09/k8s实践系列-EFK-Kafka日志收集-一/index.html","hash":"e2694c4c9c2bf9e1dedcc2e029b64d9c3d860044","modified":1600492645158},{"_id":"public/2020/07/09/k8s实践系列-部署Ingress/index.html","hash":"ae2397e9d339fb08da58fa6afde8699b59c33925","modified":1600492645158},{"_id":"public/page/2/index.html","hash":"095c4ac3a8997a53994e746b066edc60c43eb47b","modified":1600573774076},{"_id":"public/tags/k8s日志收集/index.html","hash":"e36d6cb6badad5879739549ec1f50ee1444687e3","modified":1600573774076},{"_id":"public/tags/ingress/index.html","hash":"a528c365404cfda5ad2a05745b796b4b1ec81ccb","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-二.md","hash":"bb0522c8c0938f4d8e555858df69353711f0b73c","modified":1595212759578},{"_id":"public/2020/07/09/k8s实践系列-EFK-Kafka日志收集-二/index.html","hash":"598ae14fd7445392d534c4acd1c97a34c82c9bea","modified":1600492645158},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-三.md","hash":"1ca870ea3feab934b1ee226b14d4b821243aef2d","modified":1595057614464},{"_id":"public/2020/07/09/k8s实践系列-EFK-Kafka日志收集-三/index.html","hash":"de5938b533e8b1c95ecf22b92b4316f491a5fbc5","modified":1600492645158},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-二/.DS_Store","hash":"de00bd281eb287b70c116387aff3228b261dfef0","modified":1594347378870},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-二/es-pod.png","hash":"f4ceee98f71d989d64f60701a5bc9957768046f3","modified":1594347700406},{"_id":"public/2020/07/09/k8s实践系列-EFK-Kafka日志收集-二/es-pod.png","hash":"f4ceee98f71d989d64f60701a5bc9957768046f3","modified":1594349018824},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-三/add-cluster-1.png","hash":"42dcdd324f050f3db4502b034cc8c43c5336b2db","modified":1594348795574},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-三/add-cluster-2.png","hash":"1b9de318aa257d11f94f4b6ba965d7573bc78610","modified":1594348964567},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-三/kafka-pod.png","hash":"e73125790e7a51ad2f724fd518937ff9c0764da6","modified":1594348448967},{"_id":"public/2020/07/09/k8s实践系列-EFK-Kafka日志收集-三/add-cluster-1.png","hash":"42dcdd324f050f3db4502b034cc8c43c5336b2db","modified":1594349018824},{"_id":"public/2020/07/09/k8s实践系列-EFK-Kafka日志收集-三/add-cluster-2.png","hash":"1b9de318aa257d11f94f4b6ba965d7573bc78610","modified":1594349018824},{"_id":"public/2020/07/09/k8s实践系列-EFK-Kafka日志收集-三/kafka-pod.png","hash":"e73125790e7a51ad2f724fd518937ff9c0764da6","modified":1594349018824},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-四.md","hash":"68bebfef72164d03a092a6d18eb24326f082ef35","modified":1595057422032},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-四/configmap.png","hash":"6eaaf553c9288b6be7d7b30f51d016dc41dc191b","modified":1594350716746},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-四/logstash-pod.png","hash":"3b98ea318afe0f720884d37dedf3115caf97a67e","modified":1594351219272},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-四/index.html","hash":"7d7ea9d3241aaa8bdb142d4bb3e0a81ce2c0a7a6","modified":1600492645158},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-四/configmap.png","hash":"6eaaf553c9288b6be7d7b30f51d016dc41dc191b","modified":1594351268376},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-四/logstash-pod.png","hash":"3b98ea318afe0f720884d37dedf3115caf97a67e","modified":1594351268376},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-五.md","hash":"9bd617d604047bed6e58ae8dfda35fe9df386566","modified":1595057636387},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-五/pod.png","hash":"451787216850a069ced1278fd42c1d37bea6f217","modified":1594352156083},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-五/index.html","hash":"a3f4fb58510012aab65cd228f506d9ad57ad1e51","modified":1600492645158},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-五/pod.png","hash":"451787216850a069ced1278fd42c1d37bea6f217","modified":1594352543103},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-六.md","hash":"6ffc3f6ff6ae13b94c59eb770f63f69184f17ec7","modified":1595057666407},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-六/kafka.png","hash":"95315c131198e1d78e9e76c04419e004aa627edb","modified":1594360218053},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-六/pod.png","hash":"56d4801ffe35a7b67bce82d1671813439be8609a","modified":1594359695426},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-六/kibana.png","hash":"865180e084989d63064f9c984d03a11afc47b80d","modified":1594360106801},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-六/index.html","hash":"75998b99a93eaf2fca8bab05d711b3aa1f09781c","modified":1600492645158},{"_id":"public/archives/page/2/index.html","hash":"96256be5aea3b7b84f9826ac24108638b873027e","modified":1600573774076},{"_id":"public/archives/2020/page/2/index.html","hash":"35796d9e6a2ce75a175c5f5003fd373f75a8f8ea","modified":1600573774076},{"_id":"public/archives/2020/07/page/2/index.html","hash":"9c476218b404c69e237a8c1c9d9f0126012e1125","modified":1600573774076},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-六/kafka.png","hash":"95315c131198e1d78e9e76c04419e004aa627edb","modified":1594360240123},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-六/pod.png","hash":"56d4801ffe35a7b67bce82d1671813439be8609a","modified":1594360240123},{"_id":"public/2020/07/10/k8s实践系列-EFK-Kafka日志收集-六/kibana.png","hash":"865180e084989d63064f9c984d03a11afc47b80d","modified":1594360240123},{"_id":"source/_posts/部署Docker-CE.md","hash":"6319cd12aa24d2813fdab52ebdb5332caf3469c9","modified":1595483642774},{"_id":"source/_posts/部署Docker-CE/.DS_Store","hash":"60c7e7c05fc4d093eb14d503346881b50d9caa83","modified":1594468778240},{"_id":"source/_posts/部署Docker-CE/docker-version.png","hash":"e383d33324bbd65bf138431b0e3d098d166f1d4a","modified":1590127686949},{"_id":"public/2020/07/11/部署Docker-CE/index.html","hash":"3e7071e428ccfd17da48360ad2ffa9e10ed78d88","modified":1600492645158},{"_id":"public/categories/Docker/index.html","hash":"a9341a51d7eaaafcdffd5a3ea28f62ccffa66312","modified":1600573774076},{"_id":"public/tags/Docker/index.html","hash":"794b8e5251d6cfa653c1b572f73e98471a39c901","modified":1600573774076},{"_id":"public/2020/07/11/部署Docker-CE/docker-version.png","hash":"e383d33324bbd65bf138431b0e3d098d166f1d4a","modified":1594468798390},{"_id":"source/_posts/k8s实践系列-Istio实践-一-部署Istio.md","hash":"b51dfbb080c99ddbdc1cff6169d5d0fa0f1f3522","modified":1596444322420},{"_id":"source/_posts/k8s实践系列-Istio实践-一-部署Istio/istio-install.png","hash":"c30914eb0540a719eee2c996f5813ee4849d09b1","modified":1594722851708},{"_id":"source/_posts/k8s实践系列-Istio实践-一-部署Istio/check.png","hash":"fc40b690da86b537b5d1b062f94bb72afb1b717c","modified":1594722907173},{"_id":"public/2020/07/14/k8s实践系列-Istio实践-一-部署Istio/index.html","hash":"2dd95fb08399d39a3c317f962cd61742b9a6f0ca","modified":1600492645158},{"_id":"public/categories/实践K8s/Istio/index.html","hash":"346b719e5a2a5d7f1a348a1766a1d4bff6890d2f","modified":1600573774076},{"_id":"public/tags/Istio/index.html","hash":"8a714def8519dc0c28e03b0c15c274214e410ca2","modified":1600573774076},{"_id":"public/2020/07/14/k8s实践系列-Istio实践-一-部署Istio/istio-install.png","hash":"c30914eb0540a719eee2c996f5813ee4849d09b1","modified":1594722988076},{"_id":"public/2020/07/14/k8s实践系列-Istio实践-一-部署Istio/check.png","hash":"fc40b690da86b537b5d1b062f94bb72afb1b717c","modified":1594722988076},{"_id":"source/_posts/为什么删除文件后磁盘空间不释放.md","hash":"3fef3350e634b35823c026a75998762c89ef8008","modified":1594869793512},{"_id":"public/2020/07/16/为什么删除文件后磁盘空间不释放/index.html","hash":"166914d6af4b8639e1fd927fb16a5bd39280250b","modified":1600492645158},{"_id":"public/tags/常见问题/index.html","hash":"fbb4ed7e9ed2b3da9847f18ff2615542d2aa5ea3","modified":1600573774076},{"_id":"public/categories/常见问题/index.html","hash":"dd2c39319648daf4c841cc347b48386365e39e53","modified":1600573774076},{"_id":"public/categories/常见问题/Linux系统/index.html","hash":"f8c8430eaaabc722277e8983dfae59a242310172","modified":1600573774076},{"_id":"public/categories/实践K8s/EFK日志收集/index.html","hash":"cb9e46be40286093bcc0e44ea1808391a71e7e73","modified":1600573774076},{"_id":"source/_posts/shell脚本系列-网络.md","hash":"0b9a1f45a1bee8651cc0664b646eda358241ead9","modified":1594880211938},{"_id":"public/2020/07/16/shell脚本系列-网络/index.html","hash":"937ee0c27a3e4e5e7dcd3c4166deefd739156adb","modified":1600492645158},{"_id":"public/categories/shell脚本系列/index.html","hash":"f0be2280b2133b2d2d2d68ad0265a7e78aeb22bc","modified":1600573774076},{"_id":"public/categories/shell脚本系列/网络/index.html","hash":"48f9b310e2958a3e4de9447fa5fe41ebf13b595a","modified":1600573774076},{"_id":"public/tags/网络/index.html","hash":"8437c8bbcc9d2282291b04bacc02ae48d1c2703e","modified":1600573774076},{"_id":"public/tags/shell脚本/index.html","hash":"c75d3dfe408f9d4e3a3338fd553036643cb3d6c6","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务.md","hash":"4de9f624b9c40a1cc6ffab901562810a34e05df4","modified":1594883896586},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/bookinfo.svg","hash":"861ec7e17317a873ba1de77469664e4dfcc8dc0b","modified":1594882826642},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/v1.png","hash":"b517e63e6b81321ec6ef79e53a4797bf58be8f0d","modified":1594883722930},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/v2.png","hash":"03d755d094d664801784afffa4c2dc2b951cdcdd","modified":1594883788176},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/v3.png","hash":"3b30785364c989038b6b352c0e39e49aeaadecc4","modified":1594883804593},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/service.png","hash":"28f95c49227a1b875dcc57e5fcc2da5ee7bdab35","modified":1594883366910},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-二-部署测试服务/index.html","hash":"939ee004f1e0c731b25695948d4ef42ee458e3fa","modified":1600492645158},{"_id":"public/page/3/index.html","hash":"e484923f079a93e7da3d21c335becba5e64e1fd0","modified":1600573774076},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-二-部署测试服务/bookinfo.svg","hash":"861ec7e17317a873ba1de77469664e4dfcc8dc0b","modified":1594883834965},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-二-部署测试服务/v1.png","hash":"b517e63e6b81321ec6ef79e53a4797bf58be8f0d","modified":1594883834965},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-二-部署测试服务/v3.png","hash":"3b30785364c989038b6b352c0e39e49aeaadecc4","modified":1594883834965},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-二-部署测试服务/v2.png","hash":"03d755d094d664801784afffa4c2dc2b951cdcdd","modified":1594883834965},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-二-部署测试服务/service.png","hash":"28f95c49227a1b875dcc57e5fcc2da5ee7bdab35","modified":1594883834965},{"_id":"source/_posts/k8s实践系列-Istio实践-三-路由请求.md","hash":"80e891ced9874c6d9e77ed5d65c836f064e82856","modified":1594887429817},{"_id":"source/_posts/k8s实践系列-Istio实践-三-路由请求/jason.png","hash":"d06b494f469b53ef927027feb6e9af461e1424a8","modified":1594887031506},{"_id":"source/_posts/k8s实践系列-Istio实践-三-路由请求/peter.png","hash":"a047d6c5f6f17ba6c1037b8cfac2c433be604695","modified":1594887132847},{"_id":"source/_posts/k8s实践系列-Istio实践-三-路由请求/v1.png","hash":"d4999a4b15deb4a5db7febca1322f5259d128eac","modified":1594886335678},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-三-路由请求/index.html","hash":"3ff8239530266aff778e5c29b754a36e838a1cd8","modified":1600492645158},{"_id":"public/categories/实践K8s/page/2/index.html","hash":"6408931c7e8c29b2879a2f133df0211b33dbeff4","modified":1600573774076},{"_id":"public/tags/k8s/page/2/index.html","hash":"104116a2236d056fda85741bbd08ff0f8eb357c9","modified":1600573774076},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-三-路由请求/v1.png","hash":"d4999a4b15deb4a5db7febca1322f5259d128eac","modified":1594887374846},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-三-路由请求/peter.png","hash":"a047d6c5f6f17ba6c1037b8cfac2c433be604695","modified":1594887374846},{"_id":"public/2020/07/16/k8s实践系列-Istio实践-三-路由请求/jason.png","hash":"d06b494f469b53ef927027feb6e9af461e1424a8","modified":1594887374846},{"_id":"source/_posts/k8s实践系列-部署集群监控服务.md","hash":"0ea40287f7e843954d86ad5f66209cd086933f89","modified":1595233718410},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/.DS_Store","hash":"ee378f592985b7ef85772ba469adee23ab5e8ac8","modified":1594983273122},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/datasource.png","hash":"6a4584a8c9785b9d4fcb496a968b3a90371b65c8","modified":1595059992170},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/check-prome.png","hash":"7ed08c16e3a49029e319baf26d779c9aed3873f1","modified":1595050994696},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/check-node.png","hash":"8a4b3af2ea4d67ef41f4a1a1c91c8d4c8553e7ab","modified":1594975121537},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/grafana-pvc.png","hash":"53a4c5bcd0d08605336ce5a2e15ec6c7096bf7ab","modified":1595051878619},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/node-exporter.png","hash":"c4cb7640fc25c716c6278e52f0ba57d46d339ef6","modified":1594974486166},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/prometheus-web.png","hash":"526afa93dba8b1b4b9de1027c31fbc743d160732","modified":1595051493507},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/prometheus.jpg","hash":"fc42b5e36232e0f6f68021930d8ef37ad89e3e2d","modified":1594955685325},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/pvc.png","hash":"fdce9a0ea1aa352d74bae98f667ddec838b9cfd4","modified":1595050489010},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/grafana-index.png","hash":"46c91549acb8d7eb5982e7f7983e96cce4d6084a","modified":1595059859512},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/index.html","hash":"40d21d6ed2b937c658f781910434f060c349e4bd","modified":1600492645158},{"_id":"public/tags/k8s监控/index.html","hash":"089707be62560ceec032c0976bc955e7ee1b40ec","modified":1600573774076},{"_id":"public/categories/实践K8s/k8s监控/index.html","hash":"512fa691e5fa3744fab019799ed6d629d0470a68","modified":1600573774076},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/check-prome.png","hash":"7ed08c16e3a49029e319baf26d779c9aed3873f1","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/datasource.png","hash":"6a4584a8c9785b9d4fcb496a968b3a90371b65c8","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/prometheus.jpg","hash":"fc42b5e36232e0f6f68021930d8ef37ad89e3e2d","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/check-node.png","hash":"8a4b3af2ea4d67ef41f4a1a1c91c8d4c8553e7ab","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/node-exporter.png","hash":"c4cb7640fc25c716c6278e52f0ba57d46d339ef6","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/prometheus-web.png","hash":"526afa93dba8b1b4b9de1027c31fbc743d160732","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/pvc.png","hash":"fdce9a0ea1aa352d74bae98f667ddec838b9cfd4","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/grafana-pvc.png","hash":"53a4c5bcd0d08605336ce5a2e15ec6c7096bf7ab","modified":1595060037645},{"_id":"public/2020/07/17/k8s实践系列-部署集群监控服务/grafana-index.png","hash":"46c91549acb8d7eb5982e7f7983e96cce4d6084a","modified":1595060037645},{"_id":"source/_posts/Ansible安装配置.md","hash":"79671f90409bcc7d37ff813d510289d543f1a4ec","modified":1595134775737},{"_id":"source/_posts/Ansible安装配置/ansible.png","hash":"a03c3c5da4ffd6ca019bae90c6de58b90f99fbd7","modified":1595132022672},{"_id":"source/_posts/Ansible安装配置/work.png","hash":"dde85bd875d909ab6bb445066d4890bb98df615c","modified":1595132167538},{"_id":"public/2020/07/19/Ansible安装配置/index.html","hash":"94443a5fd5a98c6b9651a6a1841de81f24374f8a","modified":1600492645158},{"_id":"public/categories/自动化运维/index.html","hash":"8e6c31f17125f4edb74b9fee1ae1a7d4b527f345","modified":1600573774076},{"_id":"public/categories/自动化运维/Ansible/index.html","hash":"7b2084904dd312d5fb2520a0f9f528b13c0aa09a","modified":1600573774076},{"_id":"public/tags/自动化运维工具/index.html","hash":"61bbe35bafd76ffdd0cde121dd947cdf4ebe42b2","modified":1600573774076},{"_id":"public/tags/ansible/index.html","hash":"39ab9ee93e7118fcc236e00b81e20fb85b30451b","modified":1600573774076},{"_id":"public/2020/07/19/Ansible安装配置/ansible.png","hash":"a03c3c5da4ffd6ca019bae90c6de58b90f99fbd7","modified":1595132331858},{"_id":"public/2020/07/19/Ansible安装配置/work.png","hash":"dde85bd875d909ab6bb445066d4890bb98df615c","modified":1595132331858},{"_id":"source/_posts/Ansible安装配置/testping.png","hash":"fd198b0622684c70873260d08557b3168f8d4a16","modified":1595133551482},{"_id":"public/2020/07/19/Ansible安装配置/testping.png","hash":"fd198b0622684c70873260d08557b3168f8d4a16","modified":1595133700240},{"_id":"source/_posts/Ansible常用配置.md","hash":"0955333a6f98439766e4e637ab9b3f8782fc531c","modified":1595134217556},{"_id":"public/2020/07/19/Ansible常用配置/index.html","hash":"6a3c6b42843ab3f8c67d87230ae7df40e85a695d","modified":1600492645158},{"_id":"source/_posts/Ansible常用模块.md","hash":"bbdba7582be330c12ccb36b2d3d0fd85838da4f4","modified":1595227403269},{"_id":"public/2020/07/19/Ansible常用模块/index.html","hash":"fbb9df2f27ddc326de04ea1fd58c713568b288d4","modified":1600492645158},{"_id":"source/_posts/Ansible-Playbook.md","hash":"81a7476c12bdff3ebe6ab6e624c9acbafef45c8c","modified":1595227504424},{"_id":"public/2020/07/19/Ansible-Playbook/index.html","hash":"fcd308f00d1bb11744560f259d91c4698504c32f","modified":1600492645158},{"_id":"source/_posts/Playbook使用实例.md","hash":"70a476e4516cfb822481a81050ff851ba2b2c521","modified":1595335525865},{"_id":"source/_posts/Playbook使用实例/check-res.png","hash":"a6285c2746f7ee4b6e25aa20bf5da5f2704c51f1","modified":1595231114484},{"_id":"source/_posts/Playbook使用实例/add-user.png","hash":"303f3bfaf04affb4fb060f4713dba1ab355d9ce6","modified":1595230770117},{"_id":"source/_posts/Playbook使用实例/check-add-user.png","hash":"fc8e705cde3d41d4501d10cef0229d69b046837d","modified":1595229934236},{"_id":"public/2020/07/20/Playbook使用实例/index.html","hash":"06ae35a0024d3737fc98eccbd78fb2cb75ff38f4","modified":1600492645158},{"_id":"public/2020/07/20/Playbook使用实例/check-res.png","hash":"a6285c2746f7ee4b6e25aa20bf5da5f2704c51f1","modified":1595231155928},{"_id":"public/2020/07/20/Playbook使用实例/add-user.png","hash":"303f3bfaf04affb4fb060f4713dba1ab355d9ce6","modified":1595231155928},{"_id":"public/2020/07/20/Playbook使用实例/check-add-user.png","hash":"fc8e705cde3d41d4501d10cef0229d69b046837d","modified":1595231155928},{"_id":"source/_posts/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务.md","hash":"6e7e46d247567a4acf44f3ddd44a704705ce2ffc","modified":1595299470134},{"_id":"source/_posts/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/check.png","hash":"f2bfb2cc4d92d43ccaf82aaf710c65137cb8fb43","modified":1595296508240},{"_id":"source/_posts/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/ingressgateway.png","hash":"60baceff8124f1d8f63fe78723968ddc82870608","modified":1595294115915},{"_id":"public/2020/07/21/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/index.html","hash":"79604b8e7da1db2fbc4012944bdff26b35fcc477","modified":1600492645158},{"_id":"public/2020/07/21/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/check.png","hash":"f2bfb2cc4d92d43ccaf82aaf710c65137cb8fb43","modified":1595299344507},{"_id":"public/2020/07/21/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/ingressgateway.png","hash":"60baceff8124f1d8f63fe78723968ddc82870608","modified":1595299344507},{"_id":"source/_posts/k8s实践系列-使用Prometheus-operator部署监控.md","hash":"ad52c907111d95b8525ff9c2ee2454c69b9b1ce0","modified":1595317082899},{"_id":"source/_posts/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/.DS_Store","hash":"e77fbac1b48dc911dd6587fc5d377781ddf2a163","modified":1595310659868},{"_id":"source/_posts/k8s实践系列-使用Prometheus-operator部署监控/prometheus-operator.png","hash":"13e87f81047a1b236f4cd78a6613c791aee9b689","modified":1595312430113},{"_id":"source/_posts/k8s实践系列-使用Prometheus-operator部署监控/influxdb-check.png","hash":"c9518eb9172bdc513482854d2f654ebb5a0e800f","modified":1595317043979},{"_id":"public/2020/07/21/k8s实践系列-使用Prometheus-operator部署监控/index.html","hash":"bb701dffb910ae836f572c06125ef67187a594ef","modified":1595317090637},{"_id":"public/2020/07/21/k8s实践系列-使用Prometheus-operator部署监控/prometheus-operator.png","hash":"13e87f81047a1b236f4cd78a6613c791aee9b689","modified":1595317090637},{"_id":"public/2020/07/21/k8s实践系列-使用Prometheus-operator部署监控/influxdb-check.png","hash":"c9518eb9172bdc513482854d2f654ebb5a0e800f","modified":1595317090637},{"_id":"source/_posts/Nginx日志相关配置.md","hash":"ac89e77840912f0eb4f0fd8aaf906c13d054e46f","modified":1596533100894},{"_id":"public/2020/07/22/Nginx日志相关配置/index.html","hash":"610fa57f0f4c7853664b0a00e9f0bf8d988df9fc","modified":1600492645158},{"_id":"source/_posts/部署MySQL5-7.md","hash":"0f049f0a4061b2ea19814d80dfafe492dda3d646","modified":1596779873364},{"_id":"public/2020/07/23/部署MySQL5-7/index.html","hash":"7ee2475a84f0dfedaf8bdf7a0909837a00c09fbd","modified":1600492645158},{"_id":"public/page/4/index.html","hash":"7fd9b44ad4cf0fe61d2d16566744e51580be5d7a","modified":1600573774076},{"_id":"public/tags/MySQL/index.html","hash":"07c3f774179747cd358e4cac6ad3f9e008ad22e9","modified":1600573774076},{"_id":"public/archives/page/3/index.html","hash":"724f207a9de9317269091bdce6f90dc619a84e27","modified":1600573774076},{"_id":"public/archives/2020/page/3/index.html","hash":"37d567f9c1d504c605c7bee26f26fb4390da96bc","modified":1600573774076},{"_id":"public/archives/2020/07/page/3/index.html","hash":"63e44551c5a3ca4450c3d210c12b156266afa399","modified":1600573774076},{"_id":"public/categories/MySQL/index.html","hash":"fff44e601320a32d050e12767cf6b74e1ae788f0","modified":1596778976198},{"_id":"source/_posts/Django-ORM操作数据库.md","hash":"a922431b94b1f4348bfb6457df13967d90afb290","modified":1596439935768},{"_id":"public/2020/07/23/Django-ORM操作数据库/index.html","hash":"f51ba2277dd23b879a4213ac3e2ba2b7d42e28f8","modified":1600492645158},{"_id":"public/categories/Django/index.html","hash":"e4598dd5f369fe1fbf8206a4aacb152e67d1b4b6","modified":1596189399532},{"_id":"public/tags/Django/index.html","hash":"3e0491bc44ba32f834e2195f7a9b52592e59d925","modified":1600573774076},{"_id":"source/_posts/部署Harbor镜像仓库.md","hash":"aa727112dc2084143e6368f260c51c81f561f595","modified":1595485623852},{"_id":"source/_posts/部署Harbor镜像仓库/.DS_Store","hash":"6304adf081222edfba82f1ad461c3ca3cd703ba9","modified":1595485760473},{"_id":"source/_posts/部署Harbor镜像仓库/create.png","hash":"0a05e0a64c5bea9574e23e55de01dd1ff5003015","modified":1595470508981},{"_id":"source/_posts/部署Harbor镜像仓库/harbor-login.png","hash":"23c85d368e48163f874e45c89983c759c4346460","modified":1595470508983},{"_id":"source/_posts/部署Harbor镜像仓库/upload-image.png","hash":"25f96e2071491cc9dff09777d6cbad204962c28c","modified":1595470508984},{"_id":"source/_posts/部署Harbor镜像仓库/create-user.png","hash":"f75c209500395f7b6e6bbbef29d549289e39a3b2","modified":1595470508980},{"_id":"public/2020/07/23/部署Harbor镜像仓库/index.html","hash":"e7d2caead4e72bc618a7ced245ee0673b0145fc2","modified":1600492645158},{"_id":"public/categories/Docker/Harbor/index.html","hash":"67d9042a8b3bb0124ebd496d31087172252250b9","modified":1600573774076},{"_id":"public/2020/07/23/部署Harbor镜像仓库/create-user.png","hash":"f75c209500395f7b6e6bbbef29d549289e39a3b2","modified":1595485634238},{"_id":"public/2020/07/23/部署Harbor镜像仓库/create.png","hash":"0a05e0a64c5bea9574e23e55de01dd1ff5003015","modified":1595485634238},{"_id":"public/2020/07/23/部署Harbor镜像仓库/upload-image.png","hash":"25f96e2071491cc9dff09777d6cbad204962c28c","modified":1595485634238},{"_id":"public/2020/07/23/部署Harbor镜像仓库/harbor-login.png","hash":"23c85d368e48163f874e45c89983c759c4346460","modified":1595485634238},{"_id":"source/_posts/python读取配置文件.md","hash":"0f166a2245bf156d33d94c5616b16af996fc3076","modified":1595491365682},{"_id":"public/2020/07/23/python读取配置文件/index.html","hash":"a569a221b25a9c4179b6ddfa8eb5729b08d2d46e","modified":1600492645158},{"_id":"public/categories/Python/index.html","hash":"d7f350c4098dc1c5ad7641a906296f9d6b7c3e9c","modified":1600573774076},{"_id":"public/categories/Python/代码/index.html","hash":"1bd0b922147d4e03b021884ba28b755ff5b05945","modified":1600573774076},{"_id":"public/tags/Python/index.html","hash":"a914cad3f3b00016c3f3fb408007757756197269","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor.md","hash":"9de88a57423fa4416fa3410605a24c5ec7b18c29","modified":1595580050427},{"_id":"public/2020/07/24/k8s实践系列-在k8s中部署harbor/index.html","hash":"afc5bbf27f19df76639383139e7303a483a9a7a7","modified":1600492645158},{"_id":"public/categories/实践K8s/Harbor/index.html","hash":"84b5d2c285aeae1423ffd85d80481bc878a27b04","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/index.png","hash":"0193f041c17c987d84e2113b22440f5372101efd","modified":1595578124383},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/prepare.png","hash":"4597ddb40a2d1e297e1544c8b7333754133d6668","modified":1595575432188},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/login.png","hash":"2b928534465f436f986bfe1aa021557526ddef7a","modified":1595578049696},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/check.png","hash":"f239402929e192b25980d8776732ca43e5524997","modified":1595577851056},{"_id":"public/2020/07/24/k8s实践系列-在k8s中部署harbor/prepare.png","hash":"4597ddb40a2d1e297e1544c8b7333754133d6668","modified":1595578152321},{"_id":"public/2020/07/24/k8s实践系列-在k8s中部署harbor/index.png","hash":"0193f041c17c987d84e2113b22440f5372101efd","modified":1595578152321},{"_id":"public/2020/07/24/k8s实践系列-在k8s中部署harbor/login.png","hash":"2b928534465f436f986bfe1aa021557526ddef7a","modified":1595578152321},{"_id":"public/2020/07/24/k8s实践系列-在k8s中部署harbor/check.png","hash":"f239402929e192b25980d8776732ca43e5524997","modified":1595578152321},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/push.png","hash":"0c9d5e05f2b7dca4cce4c0db79c1ccf77f4fcb29","modified":1595580040821},{"_id":"public/2020/07/24/k8s实践系列-在k8s中部署harbor/push.png","hash":"0c9d5e05f2b7dca4cce4c0db79c1ccf77f4fcb29","modified":1595580066499},{"_id":"source/_posts/主流消息中间件对比.md","hash":"10bd54ecb821debdb8bd367b86fd35762ebb2819","modified":1595735895155},{"_id":"public/2020/07/26/主流消息中间件对比/index.html","hash":"677cd4515c4426e60e7f9f78cafd1145714fec85","modified":1600492645158},{"_id":"public/categories/消息中间件/index.html","hash":"5e8685c618abdb3091b8910ece30c3ac3a5ca0c0","modified":1600573774076},{"_id":"public/tags/消息中间件/index.html","hash":"90aade06a578002740bd40b5721fe2169bceeb01","modified":1600573774076},{"_id":"source/_posts/消息队列RabbitMQ.md","hash":"3a418437fdc23d0835f977f85bad75df938b8fe6","modified":1597370223002},{"_id":"public/2020/07/26/消息队列RabbitMQ/index.html","hash":"910770c0f7f36530d727177bae02a18ea84c68c7","modified":1600492645158},{"_id":"public/categories/消息中间件/RabbitMQ/index.html","hash":"f359408532eb0642060909ffd7219900f7b5b998","modified":1600573774076},{"_id":"public/tags/RabbitMQ/index.html","hash":"a02101816519f200463f17b6139987ba1237d4b7","modified":1600573774076},{"_id":"source/_posts/消息队列RabbitMQ/arch.png","hash":"ae5457e5f82be1f75596d96141685df7dbebb9f9","modified":1595751641133},{"_id":"source/_posts/消息队列RabbitMQ/message-trans.png","hash":"383248b6110418190c5f8ebdd70bac45861f09f3","modified":1595751953094},{"_id":"source/_posts/消息队列RabbitMQ/amqp.png","hash":"0df5de208421516b4cce16d60cf576ab6bffa0d5","modified":1595741504298},{"_id":"public/2020/07/26/消息队列RabbitMQ/arch.png","hash":"ae5457e5f82be1f75596d96141685df7dbebb9f9","modified":1595754144598},{"_id":"public/2020/07/26/消息队列RabbitMQ/message-trans.png","hash":"383248b6110418190c5f8ebdd70bac45861f09f3","modified":1595754144598},{"_id":"public/2020/07/26/消息队列RabbitMQ/amqp.png","hash":"0df5de208421516b4cce16d60cf576ab6bffa0d5","modified":1595754144598},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容.md","hash":"23c658942f12f35e3ab04948b824a3c089ce74a6","modified":1595819070490},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/k8s-hpa-ms.png","hash":"da3a08c33019b622fcfc7c1d08ebe83d71df6325","modified":1595816339703},{"_id":"themes/butterfly/source/js/.DS_Store","hash":"663288021e7b1ca2d0eda1aa46d64a8275604b07","modified":1595811933390},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/pod.png","hash":"a6dcf448d5e288045955d87179164e1c6d0795a9","modified":1595816795028},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/hpa-mem.png","hash":"aac9ad0981414d627ed8e14091d94ca7106fca5e","modified":1595818583233},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/hpa-cpu.png","hash":"499d7d962e6b16f12bb15e4ebfc0d3cf24f7b130","modified":1595817180941},{"_id":"public/2020/07/27/k8s实践系列-利用HPA的服务自动扩容/index.html","hash":"32b19d9109a27db723f92c81819d206bb8d2ae8b","modified":1600492645158},{"_id":"public/2020/07/27/k8s实践系列-利用HPA的服务自动扩容/k8s-hpa-ms.png","hash":"da3a08c33019b622fcfc7c1d08ebe83d71df6325","modified":1595818981719},{"_id":"public/2020/07/27/k8s实践系列-利用HPA的服务自动扩容/pod.png","hash":"a6dcf448d5e288045955d87179164e1c6d0795a9","modified":1595818981719},{"_id":"public/2020/07/27/k8s实践系列-利用HPA的服务自动扩容/hpa-mem.png","hash":"aac9ad0981414d627ed8e14091d94ca7106fca5e","modified":1595818981719},{"_id":"public/2020/07/27/k8s实践系列-利用HPA的服务自动扩容/hpa-cpu.png","hash":"499d7d962e6b16f12bb15e4ebfc0d3cf24f7b130","modified":1595818981719},{"_id":"source/_posts/Nginx流量限制.md","hash":"7935b723314db80757bf5b756af7c7073168ceea","modified":1596006770478},{"_id":"public/2020/07/29/Nginx流量限制/index.html","hash":"f2956ad98afcdbea918d0d34a0f58bb49e55b423","modified":1600492645158},{"_id":"source/_posts/Nginx-Status模块.md","hash":"db618fc74889908cda9d1604cc09442de0790541","modified":1596006834647},{"_id":"source/_posts/Nginx-Status模块/status.png","hash":"5c17ea8fd01ce557ccb57dde03b46c662cde58aa","modified":1588577857238},{"_id":"public/2020/07/29/Nginx-Status模块/index.html","hash":"a3d89b0422cb94e829bb1ee3ead046afe2c8a51d","modified":1600492645158},{"_id":"public/2020/07/29/Nginx-Status模块/status.png","hash":"5c17ea8fd01ce557ccb57dde03b46c662cde58aa","modified":1595992180918},{"_id":"source/_posts/Nginx返回随机主页.md","hash":"20da1a486b409fd07f3535ee41a4a486d255c625","modified":1596006821881},{"_id":"source/_posts/Nginx返回随机主页/random.png","hash":"4fe72db71cd06b2f7655e1744039ace55316a401","modified":1588579522004},{"_id":"source/_posts/Nginx返回随机主页/.DS_Store","hash":"79fc1e5eb317fe8993cf4800e97539b34dc39074","modified":1595992719464},{"_id":"source/_posts/Nginx-Status模块/.DS_Store","hash":"33610c9b745eafc6cf1d3d9eb1e3e4b499372614","modified":1595992355432},{"_id":"public/2020/07/29/Nginx返回随机主页/index.html","hash":"d44b12b010b3dc3a25b48dd5969a45ed4a9b3a0f","modified":1600492645158},{"_id":"public/page/5/index.html","hash":"1efbda00d1bdd21f8a87af79efccc9c5ffd98b73","modified":1600573774076},{"_id":"public/2020/07/29/Nginx返回随机主页/random.png","hash":"4fe72db71cd06b2f7655e1744039ace55316a401","modified":1595992720755},{"_id":"source/_posts/Nginx替换响应内容.md","hash":"0873cdc006ce06793860390c59ef5ed7b947c756","modified":1596006800227},{"_id":"public/2020/07/29/Nginx替换响应内容/index.html","hash":"b32a6bf281b537255194f2d74f7f9fb7f8ca7e3b","modified":1600492645158},{"_id":"source/_posts/Nginx用户名密码认证.md","hash":"7fea067de94165a6380ba1743c7fb4b186b53335","modified":1596006691753},{"_id":"source/_posts/Nginx用户名密码认证/.DS_Store","hash":"4299ca2c1cec8a20f28bbbadd27631eb581c4f7a","modified":1596006573875},{"_id":"source/_posts/Nginx用户名密码认证/htpass.png","hash":"82cf3e303587814840767a84295ca7474071c0c2","modified":1590133053304},{"_id":"public/2020/07/29/Nginx用户名密码认证/index.html","hash":"97fb7b1ec3b1f83c43a23d32a070dc4c01b7d0bf","modified":1600492645158},{"_id":"public/2020/07/29/Nginx用户名密码认证/htpass.png","hash":"82cf3e303587814840767a84295ca7474071c0c2","modified":1596006618999},{"_id":"public/categories/Nginx/常用模块/index.html","hash":"d9490657cb38ba289d8010381eb3bf3a473ed035","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务.md","hash":"efd740baea3feda02345698adbdbe8a6ea6bcff6","modified":1596009811051},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/index.html","hash":"62f7d8126c5ce89363de6e6ea9cdf66e2be71e8d","modified":1600492645158},{"_id":"public/tags/Jenkins/index.html","hash":"e9b61de3ae2c6f4e8147dfa1efe8d50a86d8f36e","modified":1600573774076},{"_id":"public/categories/实践K8s/Jenkins/index.html","hash":"3b392e0265a030571cbaad28ef857151d9267fe4","modified":1600573774076},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-certs.png","hash":"655623166eff11cb2a62fa1f7cc2fbd65b895bd5","modified":1590464223312},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/.DS_Store","hash":"b03e84ed88b5c70c52a030f98e71190891399230","modified":1596008109810},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-slave","hash":"10ca92006cf3e96fc5d907ab87e783ca042ba00a","modified":1590391757180},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pipline-script.png","hash":"be3d82f09adde8ce28af53566af201707c6c427c","modified":1590459083338},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/result.png","hash":"383c987c9a60f3a4a385e46a4b978cecfa57ced1","modified":1590403705938},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/success.png","hash":"621db01be07290ebf4e74137afbb70d1e7e03c57","modified":1590473638469},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/volume.png","hash":"b34696eef8c9c978d2f25e3d25493e9aaf3cc0e3","modified":1590403572402},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/deploy-jenkins.png","hash":"b244f57fbeec4a482936749afbf3f229a40e471d","modified":1590472842830},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/gitlab-push.png","hash":"37530e39ddd9b640616e260d636a379d505488ff","modified":1590464624991},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/add-cloud.png","hash":"47d5c7beb6d0f24a4dd163a28bd5fc7c87842d04","modified":1590399741853},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/demo.png","hash":"adaaac40f7397d07234c76b0d70d956020506446","modified":1590401056420},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkinsfile-pipeline.png","hash":"6ab2255bcc1775d2ae912404a48fcc6e939ebb0c","modified":1590465059487},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-home.png","hash":"e5a74e0a646eabba2008a711fc819453c117d04f","modified":1590392506135},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pipline-build.png","hash":"860b6cd07ef18df13b0fa08e1894aca6dff00ba3","modified":1590459229858},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/run-demo.png","hash":"4e2019cf99c8987faa890752b2d8ae049ddd28ed","modified":1590473727074},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/label.png","hash":"744d553a6c4fba01c18c74a02de104f89925b934","modified":1590403617491},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/kubernetes.png","hash":"7fa08efb048db0e914bf23ee96a9504260d2372d","modified":1590395744711},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pod-template.png","hash":"4aa915e4f8848e860a2bad43c836df16eba768c6","modified":1590403415791},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pvc.png","hash":"adead9954e7ac9569d93f9b6c30857b7959b6b3f","modified":1590389850991},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/gitinit.png","hash":"3190c0bc856451df8bd11aeccace00a6c7c999c6","modified":1590460088297},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-init.png","hash":"b6a25f7f8e86ed0a873e8524bde00b167bab4183","modified":1590390639458},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/onk8s.png","hash":"5d8b9ee4325e9865a03c8533dfa3e93d5eff046e","modified":1590459346249},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/timeout.png","hash":"4c5cd5b98e23af4ecd188beb60addd8ef4aa9966","modified":1590400909703},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-password.png","hash":"6fa806af7a912dea550b16f02c618683cb1aba4a","modified":1590390754707},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pipline-demo.png","hash":"359435b654561a9359a42ed084828f3aedf90fb8","modified":1590458987676},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/status.png","hash":"11706a3f0f5b7e08b3ffcc43d8eca3b5bb0fd15e","modified":1590390140235},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/result.png","hash":"383c987c9a60f3a4a385e46a4b978cecfa57ced1","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/success.png","hash":"621db01be07290ebf4e74137afbb70d1e7e03c57","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/volume.png","hash":"b34696eef8c9c978d2f25e3d25493e9aaf3cc0e3","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/add-cloud.png","hash":"47d5c7beb6d0f24a4dd163a28bd5fc7c87842d04","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/deploy-jenkins.png","hash":"b244f57fbeec4a482936749afbf3f229a40e471d","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/jenkins-certs.png","hash":"655623166eff11cb2a62fa1f7cc2fbd65b895bd5","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/jenkins-home.png","hash":"e5a74e0a646eabba2008a711fc819453c117d04f","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/jenkins-slave","hash":"10ca92006cf3e96fc5d907ab87e783ca042ba00a","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/gitlab-push.png","hash":"37530e39ddd9b640616e260d636a379d505488ff","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/jenkinsfile-pipeline.png","hash":"6ab2255bcc1775d2ae912404a48fcc6e939ebb0c","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/kubernetes.png","hash":"7fa08efb048db0e914bf23ee96a9504260d2372d","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/label.png","hash":"744d553a6c4fba01c18c74a02de104f89925b934","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/pipline-script.png","hash":"be3d82f09adde8ce28af53566af201707c6c427c","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/pod-template.png","hash":"4aa915e4f8848e860a2bad43c836df16eba768c6","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/pvc.png","hash":"adead9954e7ac9569d93f9b6c30857b7959b6b3f","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/run-demo.png","hash":"4e2019cf99c8987faa890752b2d8ae049ddd28ed","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/timeout.png","hash":"4c5cd5b98e23af4ecd188beb60addd8ef4aa9966","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/demo.png","hash":"adaaac40f7397d07234c76b0d70d956020506446","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/gitinit.png","hash":"3190c0bc856451df8bd11aeccace00a6c7c999c6","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/jenkins-password.png","hash":"6fa806af7a912dea550b16f02c618683cb1aba4a","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/onk8s.png","hash":"5d8b9ee4325e9865a03c8533dfa3e93d5eff046e","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/pipline-build.png","hash":"860b6cd07ef18df13b0fa08e1894aca6dff00ba3","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/jenkins-init.png","hash":"b6a25f7f8e86ed0a873e8524bde00b167bab4183","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/pipline-demo.png","hash":"359435b654561a9359a42ed084828f3aedf90fb8","modified":1596009715745},{"_id":"public/2020/07/29/k8s实践系列-部署Jenkins服务/status.png","hash":"11706a3f0f5b7e08b3ffcc43d8eca3b5bb0fd15e","modified":1596009715745},{"_id":"source/_posts/Prometheus监控指标-kubernetes.md","hash":"14d30af733bdbe5e48ae7ce2a1606ff2134be2ef","modified":1596092411712},{"_id":"public/2020/07/30/Prometheus监控指标-kubernetes/index.html","hash":"f922e4e95cbdeb22edd2b441460f4b954f933dfd","modified":1600492645158},{"_id":"public/categories/Prometheus/index.html","hash":"110f06d1f3d24358e3ba0519ff97f8c666a02988","modified":1600573774076},{"_id":"public/categories/Prometheus/监控指标/index.html","hash":"8c3676f31daee497d5145de76d498d7951efb403","modified":1600573774076},{"_id":"public/tags/Prometheus/index.html","hash":"4f57e75fb29c17efd948a90de99535b30da2a995","modified":1600573774076},{"_id":"source/_posts/Prometheus监控指标-服务器.md","hash":"df0f8759e5e85d53e7980a8feddada9ee322d254","modified":1597803840730},{"_id":"public/2020/07/30/Prometheus监控指标-服务器/index.html","hash":"e0e1f12cb32c611e3958b5b74f8127345ac383a4","modified":1600492645158},{"_id":"public/archives/page/4/index.html","hash":"49cab245a92d467d0b3473b7499ea3aecf2fb691","modified":1600573774076},{"_id":"public/archives/2020/page/4/index.html","hash":"a6829fcad59b51e48c455eb113e5d19db8351720","modified":1600573774076},{"_id":"public/archives/2020/07/page/4/index.html","hash":"4d33f1c8e5f291613cc9dbf2406ebfce8fe800ae","modified":1600573774076},{"_id":"source/_posts/Prometheus监控指标-ETCD.md","hash":"ac13a9ee03f807c39197ab65528889de4790cd34","modified":1596092940133},{"_id":"public/2020/07/30/Prometheus监控指标-ETCD/index.html","hash":"d6a03cd7fae6aa6c0e9533bb28d932fe7a0ae255","modified":1600492645158},{"_id":"source/_posts/Prometheus基于consul自动发现节点.md","hash":"f2d01358b6a9c544ef8b1fe30db1d5e51bf10cc2","modified":1596161389446},{"_id":"source/_posts/Prometheus基于consul自动发现节点/consul-index.png","hash":"5f4517206c5c7e591eabc2af79352b42435b69d7","modified":1596159517215},{"_id":"public/2020/07/31/Prometheus基于consul自动发现节点/index.html","hash":"af2cbc219e3cf6d9c111bc2fcd1651e7dc04f178","modified":1600492645158},{"_id":"public/categories/Prometheus/基于Consul自动发现/index.html","hash":"4ab5218809dea2e55a5d39fc2a78791fc6490791","modified":1600573774076},{"_id":"public/2020/07/31/Prometheus基于consul自动发现节点/consul-index.png","hash":"5f4517206c5c7e591eabc2af79352b42435b69d7","modified":1596159704890},{"_id":"source/_posts/Prometheus基于consul自动发现节点/zhuce.png","hash":"285afff51e3329af3154edb782eab79f1dba87f4","modified":1596160414851},{"_id":"source/_posts/Prometheus基于consul自动发现节点/cluster.png","hash":"3f8c45911c122f266b744eb866bdffdcdf7dfa52","modified":1596161193497},{"_id":"source/_posts/Prometheus基于consul自动发现节点/find.png","hash":"5e19fbd29485a480371b76f533ee1c6691e098a7","modified":1596160704969},{"_id":"public/2020/07/31/Prometheus基于consul自动发现节点/cluster.png","hash":"3f8c45911c122f266b744eb866bdffdcdf7dfa52","modified":1596161472354},{"_id":"public/2020/07/31/Prometheus基于consul自动发现节点/zhuce.png","hash":"285afff51e3329af3154edb782eab79f1dba87f4","modified":1596161472354},{"_id":"public/2020/07/31/Prometheus基于consul自动发现节点/find.png","hash":"5e19fbd29485a480371b76f533ee1c6691e098a7","modified":1596161472354},{"_id":"source/_posts/Django分页查询.md","hash":"f6e3d61d50b19a893fdc1d709169052be6cc2971","modified":1596439887387},{"_id":"public/2020/07/31/Django分页查询/index.html","hash":"acc846df604171344d6d30951f470863b0e25f4a","modified":1600492645158},{"_id":"source/_posts/LVS工作模式.md","hash":"8e1a3859cb694d7dd751e4fda8173368a239cba1","modified":1596779833978},{"_id":"source/_posts/LVS工作模式/dr-tuopu.png","hash":"8bedb4a077f6bc2ed1ca963918f361844c2d7705","modified":1590481943789},{"_id":"source/_posts/LVS工作模式/dr.png","hash":"ff06ee01c167d1945c699c64e4549c9cacceab64","modified":1590481909971},{"_id":"source/_posts/LVS工作模式/nat.png","hash":"a10da67f8004492ede6e5e5540900949c617e500","modified":1590481648604},{"_id":"source/_posts/LVS工作模式/.DS_Store","hash":"068261e4dfc48c38279ff22882fb1d6bcb27f504","modified":1596187855938},{"_id":"source/_posts/LVS工作模式/nat-tuopu.png","hash":"7cec18737bc329a740dd154a416ce7ae65decf9f","modified":1590481718038},{"_id":"public/2020/07/31/LVS工作模式/index.html","hash":"601dadf9bbb9043bbb65d923ac4dcdfcbef9866e","modified":1600492645158},{"_id":"public/categories/LVS/index.html","hash":"18395645c0e87a24e5b0ae8dd516c64d0b163d64","modified":1596778976198},{"_id":"public/tags/LVS/index.html","hash":"927661be41e888d96b077422275f1d4ddfc4fe51","modified":1600573774076},{"_id":"public/2020/07/31/LVS工作模式/dr-tuopu.png","hash":"8bedb4a077f6bc2ed1ca963918f361844c2d7705","modified":1596187668161},{"_id":"public/2020/07/31/LVS工作模式/dr.png","hash":"ff06ee01c167d1945c699c64e4549c9cacceab64","modified":1596187668161},{"_id":"public/2020/07/31/LVS工作模式/nat.png","hash":"a10da67f8004492ede6e5e5540900949c617e500","modified":1596187668161},{"_id":"public/2020/07/31/LVS工作模式/nat-tuopu.png","hash":"7cec18737bc329a740dd154a416ce7ae65decf9f","modified":1596187668161},{"_id":"source/_posts/LVS调度算法.md","hash":"4eca44e81a34982e473d9d23c24de943b57a0a41","modified":1596779821312},{"_id":"source/_posts/LVS工作模式/tun-tuopu.png","hash":"6e579ec388306b4e603934e1e3f2526f45e550b5","modified":1590482117623},{"_id":"source/_posts/LVS工作模式/duibi.png","hash":"c90109c6332e3865eee842f998ff1207162abddd","modified":1590482301695},{"_id":"public/page/6/index.html","hash":"79d10a5197fc30542a594758523b227fc3e550af","modified":1600573774076},{"_id":"public/2020/07/31/LVS调度算法/index.html","hash":"580686ba27a860a62ac6ec7475b248409b155852","modified":1600492645158},{"_id":"public/2020/07/31/LVS工作模式/tun-tuopu.png","hash":"6e579ec388306b4e603934e1e3f2526f45e550b5","modified":1596187988967},{"_id":"public/2020/07/31/LVS工作模式/duibi.png","hash":"c90109c6332e3865eee842f998ff1207162abddd","modified":1596187988967},{"_id":"source/_posts/MacOS安装mysqlclient失败.md","hash":"d36a367c2439d888dc68d6af803c986fc5a99d04","modified":1596439864180},{"_id":"public/categories/Django/常见问题/index.html","hash":"1115996eab03a30a703982572ec98e656094c56d","modified":1596189399532},{"_id":"public/2020/07/31/MacOS安装mysqlclient失败/index.html","hash":"2d78c24ebaa09e3cd4803c70883964d28bca3162","modified":1600492645158},{"_id":"public/categories/python-web开发/index.html","hash":"4fec1c90590710dbb039d2ba3cf9a8b6196b2886","modified":1600573774076},{"_id":"public/categories/python-web开发/Django/index.html","hash":"f38a683360465b4034cdc02c0a96f22bd1ee12cf","modified":1600573774076},{"_id":"public/categories/python-web开发/Django/常见问题/index.html","hash":"83212865b0bf647e33a9dd861105ccedb62492ea","modified":1600573774076},{"_id":"source/_posts/Flask蓝图.md","hash":"1f665748cdcbb095fc9e67c749067f709182a13c","modified":1596441729768},{"_id":"source/_posts/Flask蓝图/tree.png","hash":"3e04ff7ed287f5159eda8e7fb9e619d7e665483c","modified":1596441003895},{"_id":"public/2020/08/03/Flask蓝图/index.html","hash":"7c9db75cb3a46a0ea30d9e9e6b6f7055f6077c2b","modified":1600492645158},{"_id":"public/categories/python-web开发/Flask/index.html","hash":"84c22557b4756875bd557612d68668568a0f3c87","modified":1600573774076},{"_id":"public/archives/2020/08/index.html","hash":"41c0b69902d2ffacd1be547b6e394fdbad9b1bfa","modified":1600573774076},{"_id":"public/tags/Flask/index.html","hash":"217e875012c8b6d7d595800ac0eca7da0c6720d4","modified":1600573774076},{"_id":"public/2020/08/03/Flask蓝图/tree.png","hash":"3e04ff7ed287f5159eda8e7fb9e619d7e665483c","modified":1596441641749},{"_id":"source/_posts/Linux上安装python.md","hash":"ffbe23fa37a81f72e526cbfa76001a225f45b777","modified":1596443809054},{"_id":"public/2020/08/03/Linux上安装python/index.html","hash":"374a69214c200a1a6d94b08c7dc8de0a25dbed34","modified":1600492645158},{"_id":"source/_posts/部署gitlab.md","hash":"991b2d4cd1344387a9299cb65b4f54787faa60a8","modified":1597733039490},{"_id":"source/_posts/部署gitlab/.DS_Store","hash":"c09061a41354f414f1e55d19f3fda356c3493d5f","modified":1596445159649},{"_id":"source/_posts/部署gitlab/gitlab-login.png","hash":"370ebdc16678de7c6f4c1f8fba5ed84ef0ed1a4c","modified":1589252387420},{"_id":"public/tags/gitlab/index.html","hash":"94708f09e296d38f13163b2fc3b11ca54b1175df","modified":1600573774076},{"_id":"public/2020/08/03/部署gitlab/index.html","hash":"1279ffc9b198f235438e9e301bd628a85192c804","modified":1600492645158},{"_id":"public/categories/gitlab/index.html","hash":"b228517b1fdf486ccb35d62a28c07431c761b6c7","modified":1596445373597},{"_id":"public/2020/08/03/部署gitlab/gitlab-login.png","hash":"370ebdc16678de7c6f4c1f8fba5ed84ef0ed1a4c","modified":1596444997859},{"_id":"source/_posts/部署gitlab/gitlab.png","hash":"e01f1436e3b41f0a33c0de191e38b1e9849316eb","modified":1589250610030},{"_id":"public/2020/08/03/部署gitlab/gitlab.png","hash":"e01f1436e3b41f0a33c0de191e38b1e9849316eb","modified":1596445277405},{"_id":"source/_posts/Jenkins忘记密码如何处理.md","hash":"8d236cbb1a7a4c52a7b664d747b0be8e10f1d199","modified":1596446900057},{"_id":"source/_posts/Jenkins忘记密码如何处理/.DS_Store","hash":"6ab864cf514bb381068609e96e631ad0cc57a74e","modified":1596446835333},{"_id":"source/_posts/Jenkins忘记密码如何处理/jenkins-forgetpass.png","hash":"dab7b9b72dcdfc278c55f1ae1590bd85078eef47","modified":1589975275149},{"_id":"public/2020/08/03/Jenkins忘记密码如何处理/index.html","hash":"466b6b301142ddcbf0a852e3e1ec00f33aa97a41","modified":1600492645158},{"_id":"public/categories/CICD/index.html","hash":"26350c2c7297464faf28cd1ed19aa2afe8fe5326","modified":1600573774076},{"_id":"public/categories/CICD/Jenkins/index.html","hash":"37f7ba36091ca885a749148f0805737017b5c160","modified":1600573774076},{"_id":"public/categories/CICD/gitlab/index.html","hash":"508a045c7f14de22288070379fc4454b7a57d0cf","modified":1600573774076},{"_id":"public/2020/08/03/Jenkins忘记密码如何处理/jenkins-forgetpass.png","hash":"dab7b9b72dcdfc278c55f1ae1590bd85078eef47","modified":1596446842578},{"_id":"source/_posts/Nginx基础概念.md","hash":"7236414df62bd185cfe06670dddcc3e7af3b8104","modified":1596532492696},{"_id":"source/_posts/Nginx基础概念/.DS_Store","hash":"48dff16df3c95378587e9f011369150c207ccd32","modified":1596530256316},{"_id":"source/_posts/Nginx基础概念/nginx-process.png","hash":"85d202eaa8248989b2c531776131ba790748f2fa","modified":1589253424577},{"_id":"public/2020/08/04/Nginx基础概念/index.html","hash":"ad7e7764b67614a4db250be1d8166c533ac37308","modified":1596530496520},{"_id":"public/2020/08/04/Nginx基础概念/nginx-process.png","hash":"85d202eaa8248989b2c531776131ba790748f2fa","modified":1596530440215},{"_id":"public/2020/07/03/Nginx基础概念/index.html","hash":"c9b7158e323ebdf6d0d42f94b29d8cbdf613aef7","modified":1600492645158},{"_id":"public/2020/07/03/Nginx基础概念/nginx-process.png","hash":"85d202eaa8248989b2c531776131ba790748f2fa","modified":1596533107723},{"_id":"source/_posts/Django使用Middleware记录日志.md","hash":"2bc1a9d58f835f65df8bd606c55805b5e00aa558","modified":1596617079821},{"_id":"public/2020/08/05/Django使用Middleware记录日志/index.html","hash":"06ae7fa98368a65039a518669e90782b0832e22a","modified":1600492645158},{"_id":"source/_posts/NFS存储.md","hash":"7298958d2b8ebcac1d2a1d9c9db7123ee855204c","modified":1596698597083},{"_id":"public/2020/08/06/NFS存储/index.html","hash":"1dd6a9593227cadf1cab0c4b1c8e5c2ea994cb6b","modified":1600492645158},{"_id":"public/categories/存储系统/index.html","hash":"6b30e37dd44e613a0b0b73fc0fe8675f3d84bebe","modified":1600573774076},{"_id":"public/categories/存储系统/NFS/index.html","hash":"6c293d385ca7acd717a603c50cb2d71595169c34","modified":1600573774076},{"_id":"public/tags/NFS/index.html","hash":"bf685fc4ad1720bc17a121982f48e6bedfc946a7","modified":1600573774076},{"_id":"source/_posts/解决if语句中不能设置proxy-set-header的问题.md","hash":"d5121231c81bfc30908265d9ee71822596e7d6ac","modified":1596705126268},{"_id":"public/categories/Nginx/常见问题/index.html","hash":"88759e13570e17e670e480d197e5c23df500f2b8","modified":1600573774076},{"_id":"public/2020/08/06/解决if语句中不能设置proxy-set-header的问题/index.html","hash":"5cf327efb5af8cc3fe5fd2597ad3d76d5a807312","modified":1600492645158},{"_id":"source/_posts/Docker部署kafka.md","hash":"d6b5b6c9fe24e576f393982b177fc5cf4a03cf55","modified":1596778877313},{"_id":"public/2020/08/07/Docker部署kafka/index.html","hash":"d0106628de19654a6efbb391f5ef56b7d9461f92","modified":1600492645158},{"_id":"public/archives/page/5/index.html","hash":"6935e9e8ff73f2a98b2521eb07772078a17099f5","modified":1600573774076},{"_id":"public/archives/2020/page/5/index.html","hash":"de0ac35911bf340378cdbe768327f2162fe25fd9","modified":1600573774076},{"_id":"public/page/7/index.html","hash":"710992add1a889dd96b5baa416a8e4a186a25192","modified":1600573774076},{"_id":"public/categories/消息队列/kafka/index.html","hash":"cffdd8c1898368a3e37ae0be86c5e4006620af0b","modified":1596768842857},{"_id":"public/categories/消息队列/index.html","hash":"7d3ebdb1ca9cebad793e1c49b3dbfdd818c0c211","modified":1596768842857},{"_id":"public/tags/kafka/index.html","hash":"da191488b30721b315082b7a3277ba8e21ff0477","modified":1600573774076},{"_id":"source/_posts/Docker部署kafka/status.png","hash":"3f87bb1677e78a2cf77ce34ba2573edbef8977da","modified":1596778803618},{"_id":"public/categories/消息中间件/kafka/index.html","hash":"9faab7866d5a8cededf653702874879220c2f261","modified":1600573774076},{"_id":"public/2020/08/07/Docker部署kafka/status.png","hash":"3f87bb1677e78a2cf77ce34ba2573edbef8977da","modified":1596778976198},{"_id":"public/categories/负载均衡和高可用方案/index.html","hash":"114b541ac90bab08bd148143d38013eda4fc0fcd","modified":1600573774076},{"_id":"public/categories/负载均衡和高可用方案/LVS/index.html","hash":"2ed252255686ef047c217bc8541806547752cd33","modified":1600573774076},{"_id":"public/categories/数据库/index.html","hash":"073a2d9e13b89323dfaa6ac46a2e85dee08bf70c","modified":1600573774076},{"_id":"public/categories/数据库/MySQL/index.html","hash":"7c2245e9c60d5d16d358cc6065c357e3de077a04","modified":1600573774076},{"_id":"public/categories/数据库/Redis/index.html","hash":"a7915e8b849681417a3e6932c903e7998032bdff","modified":1600573774076},{"_id":"source/_posts/keepalived原理.md","hash":"e645e4b5f8867b310c224f433e0cb724d9e84f1e","modified":1596783004649},{"_id":"public/2020/08/07/keepalived原理/index.html","hash":"7301d58efe202b1c34b0b77b2594b3c0faf1b2ea","modified":1600492645158},{"_id":"public/tags/keepalived/index.html","hash":"b8a38b2d048561b175565784d852e007bd5b5400","modified":1600573774076},{"_id":"public/categories/负载均衡和高可用方案/keepalived/index.html","hash":"6a3339ef602e12a8a1aa42101aa3b0e433d0f5c1","modified":1600573774076},{"_id":"source/_posts/keepalived原理/keepalived.png","hash":"e550b2b64f8ea1702469810543bedfbc44757b71","modified":1596780519023},{"_id":"public/2020/08/07/keepalived原理/keepalived.png","hash":"e550b2b64f8ea1702469810543bedfbc44757b71","modified":1596783025200},{"_id":"source/_posts/k8s实践系列-部署MySQL5-7.md","hash":"2da6b2f1e33c76f3634089031176334b8d6bbdc9","modified":1597038381112},{"_id":"source/_posts/安装RabbitMQ.md","hash":"7e508370c532717cc3ae5ba216a19965a78b53dc","modified":1597050809292},{"_id":"source/_posts/安装RabbitMQ/index.png","hash":"1094d319f6981b978db6f9a6d26dd0a765505819","modified":1596943046602},{"_id":"public/2020/08/10/k8s实践系列-部署MySQL5-7/index.html","hash":"f970b76955344c04416cd343ed07866cfd952709","modified":1597038385081},{"_id":"public/2020/08/09/安装RabbitMQ/index.html","hash":"8c4409d13e98fded6f9f683aca69c16320fce195","modified":1600492645158},{"_id":"public/categories/实践K8s/数据库/index.html","hash":"b73fc2c42fd598848f3d91999fd6bee8894e0afa","modified":1597038385081},{"_id":"public/2020/08/09/安装RabbitMQ/index.png","hash":"1094d319f6981b978db6f9a6d26dd0a765505819","modified":1597038385081},{"_id":"source/_posts/二进制方式部署kafka-zookeeper集群.md","hash":"72254f3c2d56a7816f9d053d0e53fd3490e49b73","modified":1597053278112},{"_id":"public/2020/08/10/二进制方式部署kafka-zookeeper集群/index.html","hash":"061f3bb6c1434034bcdd67f99340be674e2959f1","modified":1600492645158},{"_id":"source/_posts/kafka的常用操作.md","hash":"822082c0eedb29e6bd855b77285f3e8f77fd3032","modified":1597391738958},{"_id":"public/2020/08/10/kafka的常用操作/index.html","hash":"7add48c8dcecf85a387c3dcce33dc5fcc967c667","modified":1600492645158},{"_id":"source/_posts/迭代器和生成器.md","hash":"2e35c233b738bfc148c6aee396d1c91ee8f89912","modified":1597115909806},{"_id":"public/2020/08/11/迭代器和生成器/index.html","hash":"8acc29c00d3b483c25d4e34b69093dcd52ce57d1","modified":1600492645158},{"_id":"source/_posts/部署zabbix4-0.md","hash":"de257612842dd1864a46f55fb380611b84f3f3eb","modified":1597390380237},{"_id":"source/_posts/Request库的使用.md","hash":"343c35132a2c75a9cafc631ce537d353fea6c401","modified":1597731800082},{"_id":"public/2020/08/18/Request库的使用/index.html","hash":"3d3f02031d2b19e836ee45d9669b2dbb8821c663","modified":1600492645158},{"_id":"source/_posts/部署Jenkins.md","hash":"5bbb9de1e43eeebf73092ad3134bde952c796681","modified":1597734037256},{"_id":"public/2020/08/18/部署Jenkins/index.html","hash":"d59c89fbb7c4527dee899c7f7ef8e363fb5fc132","modified":1600492645158},{"_id":"source/_posts/ceph介绍.md","hash":"6608c4b8dde063caad1511d4c6456a92364adf0b","modified":1597735692601},{"_id":"source/_posts/ceph介绍/ceph_arch.png","hash":"e69e2e5c083777acb2a410549f058a82d9625b27","modified":1597734848148},{"_id":"public/tags/Ceph/index.html","hash":"08ae676c014136f5cd04dbabfeb6d733f5435e2d","modified":1600573774076},{"_id":"public/2020/08/18/ceph介绍/index.html","hash":"6d5b0245680686a2408d9b51e6eb5813a62c76e9","modified":1600492645158},{"_id":"public/archives/2020/08/page/2/index.html","hash":"04764f9af367e896949ef60bb4d5682e7dd7310d","modified":1600573774076},{"_id":"public/categories/存储系统/Ceph/index.html","hash":"8f73b51406e8d92e5503e597a6a1f10bbd30cc44","modified":1600573774076},{"_id":"public/2020/08/18/ceph介绍/ceph_arch.png","hash":"e69e2e5c083777acb2a410549f058a82d9625b27","modified":1597734964585},{"_id":"source/_posts/ceph介绍/fstype.png","hash":"a4790fcaf34ef68388b715d96cb3a7fe34233a86","modified":1597735627561},{"_id":"source/_posts/ceph介绍/journal.png","hash":"461a79ac7df754babffcee6d308d3e3766d2e8ce","modified":1597735651613},{"_id":"source/_posts/ceph介绍/rados.png","hash":"a4c736743dc8bcaf36babab3f285ba288366ccdd","modified":1597735542619},{"_id":"source/_posts/ceph介绍/rados_arch.png","hash":"10321649647b6588fdff9b49ab4296ad6e295fb5","modified":1597735595692},{"_id":"public/2020/08/18/ceph介绍/fstype.png","hash":"a4790fcaf34ef68388b715d96cb3a7fe34233a86","modified":1597735709149},{"_id":"public/2020/08/18/ceph介绍/journal.png","hash":"461a79ac7df754babffcee6d308d3e3766d2e8ce","modified":1597735709149},{"_id":"public/2020/08/18/ceph介绍/rados.png","hash":"a4c736743dc8bcaf36babab3f285ba288366ccdd","modified":1597735709149},{"_id":"public/2020/08/18/ceph介绍/rados_arch.png","hash":"10321649647b6588fdff9b49ab4296ad6e295fb5","modified":1597735709149},{"_id":"source/_posts/MySQL数据备份和恢复.md","hash":"11b95ed4cce66d8257bdd9491c2eea8f471dc1d4","modified":1597737836276},{"_id":"public/2020/08/18/MySQL数据备份和恢复/index.html","hash":"8fa9a3221be4bce5d100481ccff0720fd46f896d","modified":1600492645158},{"_id":"source/_posts/MySQL日志.md","hash":"c8429320d2195fce43adaa95b6b3fb39adc29d03","modified":1597739617186},{"_id":"public/page/8/index.html","hash":"90e8558d56b7b761067c08b2738e1f522c7a7eef","modified":1600573774076},{"_id":"public/2020/08/18/MySQL日志/index.html","hash":"12fbacc168776ee4896fb3f3cd262ca324586123","modified":1600492645158},{"_id":"source/_posts/部署Prometheus和node-exporter.md","hash":"cb1251e68000ed8a6e4c49ee4eb2619e529c0d73","modified":1599302568705},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/index.html","hash":"0ba96acba4e141da53c73b93b6daf31a4f8d06db","modified":1600492645158},{"_id":"source/_posts/部署Prometheus和node-exporter/5.png","hash":"905031518bb5e3c6c58f6e7fe3ddc19a8c45d713","modified":1597802815289},{"_id":"source/_posts/部署Prometheus和node-exporter/2.png","hash":"bef9b117acc02b3a2ad25fba31df19d0617f263b","modified":1597802759184},{"_id":"source/_posts/部署Prometheus和node-exporter/4.png","hash":"6bc1c6c56c05358fe1745430d1b49fc199faf6fd","modified":1597802791197},{"_id":"source/_posts/部署Prometheus和node-exporter/prome-web.png","hash":"911aa8583199e2ef0d2812bde86dbc9e7f3b9256","modified":1597801644250},{"_id":"source/_posts/部署Prometheus和node-exporter/3.png","hash":"cbfb5ca14c6d459bd6f29b5930454e5f11ae7e51","modified":1597802767276},{"_id":"source/_posts/部署Prometheus和node-exporter/prome-node.png","hash":"e4f6c4fc399b3d16e260abd6312e5ba7c8f7da66","modified":1597802160061},{"_id":"source/_posts/部署Prometheus和node-exporter/1.png","hash":"22815f8bc0b8393db4d0bb82b12b49c747684d8a","modified":1597802738428},{"_id":"source/_posts/部署Prometheus和node-exporter/empdash.png","hash":"209b8dd56409cf44539c2635509d3f04f77139af","modified":1597802699767},{"_id":"source/_posts/部署Prometheus和node-exporter/grafana.png","hash":"9220dd88c2e5a31b67b0fde73df480b47c05667a","modified":1597802543699},{"_id":"source/_posts/部署Prometheus和node-exporter/datasource.png","hash":"8d0db18edf52128375d061a510129d6b10dc6d0a","modified":1597802606357},{"_id":"source/_posts/部署Prometheus和node-exporter/config.png","hash":"66e16738837b3a4de6aec495f7f58d6dce62bf5d","modified":1597802657868},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/5.png","hash":"905031518bb5e3c6c58f6e7fe3ddc19a8c45d713","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/prome-web.png","hash":"911aa8583199e2ef0d2812bde86dbc9e7f3b9256","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/2.png","hash":"bef9b117acc02b3a2ad25fba31df19d0617f263b","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/4.png","hash":"6bc1c6c56c05358fe1745430d1b49fc199faf6fd","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/prome-node.png","hash":"e4f6c4fc399b3d16e260abd6312e5ba7c8f7da66","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/1.png","hash":"22815f8bc0b8393db4d0bb82b12b49c747684d8a","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/3.png","hash":"cbfb5ca14c6d459bd6f29b5930454e5f11ae7e51","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/empdash.png","hash":"209b8dd56409cf44539c2635509d3f04f77139af","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/datasource.png","hash":"8d0db18edf52128375d061a510129d6b10dc6d0a","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/grafana.png","hash":"9220dd88c2e5a31b67b0fde73df480b47c05667a","modified":1597802891905},{"_id":"public/2020/08/19/部署Prometheus和node-exporter/config.png","hash":"66e16738837b3a4de6aec495f7f58d6dce62bf5d","modified":1597802891905},{"_id":"source/_posts/Pushgateway推送监控数据.md","hash":"79de5de398f7c7d80cfc699f455ed718fe8bb782","modified":1597804649115},{"_id":"public/2020/08/19/Pushgateway推送监控数据/index.html","hash":"7217fb4596fab752bc336293de6683c878783153","modified":1600492645158},{"_id":"source/_posts/k8s实践系列-Python调用kubernetes-API管理资源.md","hash":"37025af3029328dc12089334ab1aa787cb621f77","modified":1599296680256},{"_id":"public/2020/09/05/k8s实践系列-Python调用kubernetes-API管理资源/index.html","hash":"ae7a0c12d9894135cbcad3d2ee45044ba962fd7c","modified":1600492645158},{"_id":"public/categories/实践K8s/kubernetes-api/index.html","hash":"b12f675e30b45be66fe3cd95cc937bb3ccafe8d9","modified":1600573774076},{"_id":"public/tags/kubernetes-api/index.html","hash":"98bdf326221b4d97bf7f9d532312e5c0d526c027","modified":1600573774076},{"_id":"public/archives/2020/09/index.html","hash":"cd9ff99f32eb26babcdc14b29ac0897a7431cbaa","modified":1600573774076},{"_id":"public/categories/Prometheus/服务部署/index.html","hash":"7dac5bddad2262f9f0a61c787c9700d049eea788","modified":1600573774076},{"_id":"source/_posts/Docker方式部署prometheus.md","hash":"60ee4d37b947501100793e75461d1265b1a606b5","modified":1599305707937},{"_id":"public/2020/09/05/Docker方式部署prometheus/index.html","hash":"bbc74f072607b621b13aad4a12a3048399b387d7","modified":1600492645158},{"_id":"source/_posts/提升程序性能的技巧.md","hash":"e46d3331d12fdf3aab826819f2172daa5d33db07","modified":1599311363223},{"_id":"public/2020/09/05/提升程序性能的技巧/index.html","hash":"0713fb435e89be9792d2e5c3b890287b91e052de","modified":1600492645158},{"_id":"public/archives/page/6/index.html","hash":"a0587d75ce55ec4d5a1f8dbc6fa42fe3b614d2bc","modified":1600573774076},{"_id":"public/archives/2020/page/6/index.html","hash":"86a1c1a779ea937812c5b65d199b67beb99329dc","modified":1600573774076},{"_id":"source/_posts/提升程序性能的技巧/1.png","hash":"8649ad2e46045c1ae9b032ad8a25f2af6598bdc5","modified":1599308811989},{"_id":"source/_posts/提升程序性能的技巧/2.png","hash":"3b2e007fb4db2c067e4a306054b766fb1c709617","modified":1599309020955},{"_id":"source/_posts/提升程序性能的技巧/3-1.png","hash":"e1dc7259add3bd170d468c6890a7279a07350284","modified":1599309216667},{"_id":"source/_posts/提升程序性能的技巧/3-2.png","hash":"7000e54ac1ad16da9a21179a1f1f7551f1f888ba","modified":1599309342637},{"_id":"source/_posts/提升程序性能的技巧/3-3.png","hash":"9b7b11ae27d997439ba6e172bc8a7cdeb9c4d81c","modified":1599309496272},{"_id":"source/_posts/提升程序性能的技巧/3-4.png","hash":"a5a47b19093ff92e8766e7ddc0103fea3a644c76","modified":1599309682185},{"_id":"source/_posts/提升程序性能的技巧/4-1.png","hash":"408138b3549a407ea30462a8b6471ba5c3e995d1","modified":1599309873831},{"_id":"source/_posts/提升程序性能的技巧/4-2.png","hash":"d04f767d54624bc21eb3f8e219260138a97fecf4","modified":1599309992806},{"_id":"source/_posts/提升程序性能的技巧/5-1.png","hash":"13919823cfc2e11c0f3571d3cc797e6ae95fa9ae","modified":1599310095362},{"_id":"source/_posts/提升程序性能的技巧/5-2.png","hash":"5e476d8d099b69f9de459752c8958488ac2c195a","modified":1599310188597},{"_id":"source/_posts/提升程序性能的技巧/6-1.png","hash":"6b3eed433cb8faed92983c6f06eb331f4bf764e8","modified":1599310326255},{"_id":"source/_posts/提升程序性能的技巧/6-2.png","hash":"40553c28d75c20b316c10f6b99dcd6d5a8ad15bf","modified":1599310405955},{"_id":"source/_posts/提升程序性能的技巧/7-1.png","hash":"bcbd186ab4301d5dc65a069170a1bc8fbf7eaed2","modified":1599310822025},{"_id":"source/_posts/提升程序性能的技巧/.DS_Store","hash":"7f3818fc8c2d940ba7ec0aadafb555f902ec5982","modified":1599311782434},{"_id":"source/_posts/提升程序性能的技巧/7-2.png","hash":"6efab2b4243567dfc7d4850c3e14d8ada9bf450e","modified":1599310975966},{"_id":"public/categories/Python/优化/index.html","hash":"98e0da6cd60591908ffa6afaf753c6bd81739b05","modified":1600573774076},{"_id":"public/2020/09/05/提升程序性能的技巧/1.png","hash":"8649ad2e46045c1ae9b032ad8a25f2af6598bdc5","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/2.png","hash":"3b2e007fb4db2c067e4a306054b766fb1c709617","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/6-1.png","hash":"6b3eed433cb8faed92983c6f06eb331f4bf764e8","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/6-2.png","hash":"40553c28d75c20b316c10f6b99dcd6d5a8ad15bf","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/7-1.png","hash":"bcbd186ab4301d5dc65a069170a1bc8fbf7eaed2","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/7-2.png","hash":"6efab2b4243567dfc7d4850c3e14d8ada9bf450e","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/3-3.png","hash":"9b7b11ae27d997439ba6e172bc8a7cdeb9c4d81c","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/3-2.png","hash":"7000e54ac1ad16da9a21179a1f1f7551f1f888ba","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/3-1.png","hash":"e1dc7259add3bd170d468c6890a7279a07350284","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/3-4.png","hash":"a5a47b19093ff92e8766e7ddc0103fea3a644c76","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/4-2.png","hash":"d04f767d54624bc21eb3f8e219260138a97fecf4","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/5-1.png","hash":"13919823cfc2e11c0f3571d3cc797e6ae95fa9ae","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/4-1.png","hash":"408138b3549a407ea30462a8b6471ba5c3e995d1","modified":1599311404539},{"_id":"public/2020/09/05/提升程序性能的技巧/5-2.png","hash":"5e476d8d099b69f9de459752c8958488ac2c195a","modified":1599311404539},{"_id":"source/_posts/Python操作redis.md","hash":"4851b0cd70bb9eb6d3035fb72c987ad942f59991","modified":1599564572434},{"_id":"public/2020/09/08/Python操作redis/index.html","hash":"b08325bddd8eac08d48c39e203d919f992bfaca3","modified":1600492645158},{"_id":"public/categories/Python/Python操作数据库/index.html","hash":"efd56e1783b1c9d444d17b931d2bdedfcb24e027","modified":1600573774076},{"_id":"public/tags/数据库/index.html","hash":"6146a9cf11968aad7ff18a2611935012867201ae","modified":1600573774076},{"_id":"source/_posts/Django序列化查询数据.md","hash":"fec1c0daec7c808338edc2a53c6450b7a9416f26","modified":1599618365495},{"_id":"public/2020/09/09/Django序列化查询数据/index.html","hash":"520a77af44b70e40bd61564551b3bd79e3912ffb","modified":1600492645158},{"_id":"source/_posts/Nginx-Ingress性能调优.md","hash":"ca9afc7f774835bf68da7c5ff2415131dca1313d","modified":1599650378221},{"_id":"public/2020/09/09/Nginx-Ingress性能调优/index.html","hash":"0fd20cdc8d43f0356607a1f84a8a4077413e0a8b","modified":1600492645158},{"_id":"public/categories/实践k8s/调优/index.html","hash":"00ec822849740ed2e22d4b0fa922a8a2f652c18a","modified":1599650342792},{"_id":"public/tags/Ingress/index.html","hash":"3ec52a96f2c39a30b65ff6fa4a7e432915128cea","modified":1600573774076},{"_id":"public/categories/实践K8s/调优/index.html","hash":"eb7ccfd89cc2954427ff841330bffec9ef97acf8","modified":1600573774076},{"_id":"source/_posts/升级Nginx/1.png","hash":"12190a8d94802497c65ffbc5b3dc2573fa2b7fe8","modified":1599652283704},{"_id":"public/2020/07/05/升级Nginx/1.png","hash":"12190a8d94802497c65ffbc5b3dc2573fa2b7fe8","modified":1599652340994},{"_id":"source/_posts/升级Nginx/2.png","hash":"6a4b514f269d534fdf32860eda43fed073a47652","modified":1599652512961},{"_id":"source/_posts/升级Nginx/3.png","hash":"c40604772474c45cd27311b88bd16411cf98f676","modified":1599652743080},{"_id":"source/_posts/升级Nginx/4.png","hash":"5f2c9e242ebe225ba28a50f8af998b1bcd4b0427","modified":1599653097571},{"_id":"source/_posts/升级Nginx/5.png","hash":"bb44e537b35bfbc14fd20f66942ba3f7de6a1ac8","modified":1599653254668},{"_id":"source/_posts/升级Nginx/6.png","hash":"6baa19d02408281c20b66d255897f21482a402e9","modified":1599653324370},{"_id":"source/_posts/升级Nginx/7.png","hash":"e7d78c7cd66f61a2a9127d8e78e5d23284205f72","modified":1599653591614},{"_id":"public/2020/07/05/升级Nginx/3.png","hash":"c40604772474c45cd27311b88bd16411cf98f676","modified":1599653821658},{"_id":"public/2020/07/05/升级Nginx/6.png","hash":"6baa19d02408281c20b66d255897f21482a402e9","modified":1599653821658},{"_id":"public/2020/07/05/升级Nginx/2.png","hash":"6a4b514f269d534fdf32860eda43fed073a47652","modified":1599653821658},{"_id":"public/2020/07/05/升级Nginx/5.png","hash":"bb44e537b35bfbc14fd20f66942ba3f7de6a1ac8","modified":1599653821658},{"_id":"public/2020/07/05/升级Nginx/4.png","hash":"5f2c9e242ebe225ba28a50f8af998b1bcd4b0427","modified":1599653821658},{"_id":"public/2020/07/05/升级Nginx/7.png","hash":"e7d78c7cd66f61a2a9127d8e78e5d23284205f72","modified":1599653821658},{"_id":"source/_posts/使用uwsgi-nginx部署django服务.md","hash":"0bddd645681e680e4608dfc5b063275f2fd4f972","modified":1599893997430},{"_id":"source/_posts/升级Nginx/.DS_Store","hash":"4b23970ff721022fbb59fe26c25e10a7b9563567","modified":1599702951632},{"_id":"public/2020/09/12/使用uwsgi-nginx部署django服务/index.html","hash":"bae1c7781162a879994b93fd2a9773ffd6a35f42","modified":1600492645158},{"_id":"public/categories/python-web开发/Django/服务部署/index.html","hash":"14a73fcaca01c41a65901fed6212a6922c317025","modified":1600573774076},{"_id":"public/tags/uwsgi/index.html","hash":"a111a188526a202615a6efc61ac209fb0b688653","modified":1600573774076},{"_id":"source/_posts/flask中的GET和POST请求.md","hash":"731405cb16ea21febc5d30e2fac96fc59732fcf2","modified":1599974603964},{"_id":"public/2020/09/13/flask中的GET和POST请求/index.html","hash":"3512d15dc18ecada946db11f25b9de964032b81c","modified":1599973800717},{"_id":"public/page/9/index.html","hash":"bad01be7311a7c3cffc76740f498d7212b996a7c","modified":1600573774076},{"_id":"source/_posts/git的常用操作.md","hash":"69351fec4364258a89da20fedead77bda7e063ae","modified":1599978615137},{"_id":"public/2020/09/13/git的常用操作/index.html","hash":"8bac1cdd2b7781765705186ad69ec80901df1729","modified":1600492645158},{"_id":"public/categories/git/index.html","hash":"402ddc9ea85378a6dedcbc283b250d110fababa6","modified":1600573774076},{"_id":"public/tags/git/index.html","hash":"8b51c7fcbb0def496c11eb7002494e72e06c2f4d","modified":1600573774076},{"_id":"source/_posts/使用python发送邮件.md","hash":"d1b8af24bdec6c940ea354c129fa7d13a12ed8dd","modified":1600492579177},{"_id":"public/2020/09/19/使用python发送邮件/index.html","hash":"952846d461d5c0a246a48ac86fdd389acd3331ba","modified":1600492645158},{"_id":"source/CNAME","hash":"48f01e357230864df594b4549a67d838047b39dd","modified":1600573768005},{"_id":"public/CNAME","hash":"48f01e357230864df594b4549a67d838047b39dd","modified":1600573774076}],"Category":[{"name":"实践K8s","_id":"ckc449cjr0001ypn0fyelgeg0"},{"name":"实践k8s","_id":"ckc8g4d120001xeje79sh6s17"},{"name":"Nginx","_id":"ckc8qusoe00011sje5sxmfy4d"},{"name":"Redis","_id":"ckc93ufmf00010vjeanog2hz0"},{"name":"Docker","_id":"ckchljzck0001f9n0ci9u0p5o"},{"name":"Istio","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckclsw7im0002lwn060s32h1y"},{"name":"常见问题","_id":"ckco8beoo0001vln05dj7djch"},{"name":"Linux系统","parent":"ckco8beoo0001vln05dj7djch","_id":"ckco8beow0004vln0ggus7a1x"},{"name":"EFK日志收集","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcodiw7c0000d1n04ua49cak"},{"name":"shell脚本系列","_id":"ckcoei9kg0001j3n07haj76yr"},{"name":"网络","parent":"ckcoei9kg0001j3n07haj76yr","_id":"ckcoei9kn0004j3n07cl22gvd"},{"name":"k8s监控","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcrdkcrj0002n2n00tn870w7"},{"name":"自动化运维","_id":"ckcsklvcr0001sojd9pgg1vb7"},{"name":"Ansible","parent":"ckcsklvcr0001sojd9pgg1vb7","_id":"ckcsklvd20004sojd6rth4r3m"},{"name":"MySQL","_id":"ckcy6vl1d0001d7n0ckeld6d6"},{"name":"Django","_id":"ckcy7pdh80001j9n0hwmv1n33"},{"name":"Harbor","parent":"ckchljzck0001f9n0ci9u0p5o","_id":"ckcyeyd3y000291n01ax2hl3a"},{"name":"Python","_id":"ckcyi223v0001qtn0894eh8v5"},{"name":"代码","parent":"ckcyi223v0001qtn0894eh8v5","_id":"ckcyi22430004qtn0f598dryp"},{"name":"Harbor","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckczw6x3l0002uxn04x5t7stm"},{"name":"消息中间件","_id":"ckd2j0oy90001ojjchyl891je"},{"name":"RabbitMQ","parent":"ckd2j0oy90001ojjchyl891je","_id":"ckd2k6nni0002swjc5c9z33gl"},{"name":"常用模块","parent":"ckc8qusoe00011sje5sxmfy4d","_id":"ckd716d7j0000fxn09rbtbkfc"},{"name":"Jenkins","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckd71w2pi0002mnn00z3v4j8i"},{"name":"Prometheus","_id":"ckd8g7yjp000118n0c7347sbu"},{"name":"监控指标","parent":"ckd8g7yjp000118n0c7347sbu","_id":"ckd8g7yjy000418n057m93y5y"},{"name":"基于Consul自动发现","parent":"ckd8g7yjp000118n0c7347sbu","_id":"ckd9ka1kc0002yan0bxdbcafo"},{"name":"LVS","_id":"ckda0xe910001pon00p4z8ua6"},{"name":"常见问题","parent":"ckcy7pdh80001j9n0hwmv1n33","_id":"ckda1xp1p0002z0n03owgafl2"},{"name":"python web开发","_id":"ckde74rhx000049n0c43xftl1"},{"name":"Django","parent":"ckde74rhx000049n0c43xftl1","_id":"ckde74rif000249n0cty5386g"},{"name":"常见问题","parent":"ckde74rif000249n0cty5386g","_id":"ckde74rih000549n00txl4lup"},{"name":"Flask","parent":"ckde74rhx000049n0c43xftl1","_id":"ckde84xw800029gn0dh6e5wi8"},{"name":"gitlab","_id":"ckdea4v430001tin0hvqy1zxl"},{"name":"CICD","_id":"ckdeb8ejx00015fn016r8e2o5"},{"name":"Jenkins","parent":"ckdeb8ejx00015fn016r8e2o5","_id":"ckdeb8ek700035fn04zukfdh0"},{"name":"gitlab","parent":"ckdeb8ejx00015fn016r8e2o5","_id":"ckdeb8epf00065fn08qyj51pz"},{"name":"存储系统","_id":"ckdidrkd400013hn04ly740ff"},{"name":"NFS","parent":"ckdidrkd400013hn04ly740ff","_id":"ckdidrkdp00043hn013ua62pz"},{"name":"常见问题","parent":"ckc8qusoe00011sje5sxmfy4d","_id":"ckdil0i9h00026dn0872l4bxr"},{"name":"消息队列","_id":"ckdjmxztp000068n0ccyp4777"},{"name":"kafka","parent":"ckdjmxztp000068n0ccyp4777","_id":"ckdjmxzu1000368n06zoj7hw6"},{"name":"kafka","parent":"ckd2j0oy90001ojjchyl891je","_id":"ckdjmz0lm00006xn0ds7z7ae6"},{"name":"负载均衡和高可用方案","_id":"ckdjtjm9c0000r4n08go55nzc"},{"name":"数据库","_id":"ckdjtjm9p0001r4n02tkc25ui"},{"name":"LVS","parent":"ckdjtjm9c0000r4n08go55nzc","_id":"ckdjtjm9q0003r4n03iau6vw9"},{"name":"MySQL","parent":"ckdjtjm9p0001r4n02tkc25ui","_id":"ckdjtjm9s0005r4n0g7b689og"},{"name":"Redis","parent":"ckdjtjm9p0001r4n02tkc25ui","_id":"ckdjtjm9s0009r4n03245fiik"},{"name":"keepalived","parent":"ckdjtjm9c0000r4n08go55nzc","_id":"ckdjtoc140002txn08gah7jvo"},{"name":"数据库","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckdo3f7s00003n5n0b1ie091a"},{"name":"zabbix","_id":"ckdtx10x200025zn05kjm8uef"},{"name":"Ceph","parent":"ckdidrkd400013hn04ly740ff","_id":"ckdzm5cfe0002ejn05iwvetdw"},{"name":"kubernetes api","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckepf6ezp0002glklhjwrhkk4"},{"name":"服务部署","parent":"ckd8g7yjp000118n0c7347sbu","_id":"ckepjgptm0000kmklgri401un"},{"name":"优化","parent":"ckcyi223v0001qtn0894eh8v5","_id":"ckepmxacy00002zklbztpcmfq"},{"name":"Python操作数据库","parent":"ckcyi223v0001qtn0894eh8v5","_id":"cketvgcdt000289kl28r76gxt"},{"name":"调优","parent":"ckc8g4d120001xeje79sh6s17","_id":"ckevaiia1000213kl9v2eeyfv"},{"name":"调优","parent":"ckc449cjr0001ypn0fyelgeg0","_id":"ckevaj7jg00001xklh8cw92pz"},{"name":"服务部署","parent":"ckde74rif000249n0cty5386g","_id":"ckezay5cw0002uwkl61tqbf0p"},{"name":"git","_id":"ckf0oevuu0001tgklgl286dke"}],"Data":[],"Page":[{"title":"标签","date":"2020-07-01T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-07-02 00:00:00\ntype: \"tags\"\n---\n","updated":"2020-07-02T10:49:46.958Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckc4o369v0000qdn085go80x0","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""},{"title":"分类","date":"2020-07-01T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-07-02 00:00:00\ntype: \"categories\"\n---\n","updated":"2020-07-02T10:51:14.126Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckc4o52030000rfn0c8gaacu4","content":"","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""}],"Post":[{"title":"[k8s实践系列]kubeadm部署k8s 1.17","date":"2020-07-02T01:33:03.000Z","description":"通过kubeadm部署3master节点高可用k8s 1.17.3集群","cover":"https://raw.githubusercontent.com/kubernetes/kubeadm/master/logos/stacked/color/kubeadm-stacked-color.png","_content":"\n## 集群规划\n\n|    主机名     |   IP地址    |        用途        |\n| :-----------: | :---------: | :----------------: |\n| SCA-LUM700011 | 10.8.138.8  | nginx+nfs+运维节点 |\n| SCA-LUM700007 | 10.8.138.5  |      master-1      |\n| SCA-LUM700008 | 10.8.138.6  |      Master-2      |\n| SCA-LUM700012 | 10.8.138.10 |      Master-3      |\n| SCA-LUM700013 | 10.8.138.9  |       Node-1       |\n| SCA-LUM700014 | 10.8.138.11 |       node-2       |\n\n\n\n操作系统`centos7.6`，前端还有一个elb，地址为`10.8.138.12`，代理master的apiserver。kube-proxy使用`ipvs`模式。\n\n\n\n集群使用`1.17.3`版本\n\n\n\n<br>\n\n## 升级内核版本\n\n**注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下**\n\n```bash\n# 载入公钥\n$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n\n# 安装 ELRepo 最新版本\n$ yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm\n\n# 列出可以使用的 kernel 包版本\n$ yum list available --disablerepo=* --enablerepo=elrepo-kernel\n\n# 安装内核\n$ yum install -y kernel-lt-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel\n\n# 查看可用内核\n$ cat /boot/grub2/grub.cfg | grep menuentry\nmenuentry 'CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)' --class centos （略）\nmenuentry 'CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)' --class centos ...（略）\n\n# 设置从新的内核起动\n$ grub2-set-default \"CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\"\n\n# 查看内核启动项\n$ grub2-editenv list\nsaved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\n\n# 重启\nreboot\n```\n\n<br>\n\n\n\n## 设置内核参数\n\n```bash\n$ cat > /etc/k8s.conf << EOF\nfs.file-max=6815744\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nnet.ipv4.tcp_tw_recycle=0\nvm.swappiness=0\nvm.panic_on_oom=0\n\n# 当内核维护的arp表过于庞大时候，可以考虑优化\nnet.ipv4.neigh.default.gc_thresh1=1024\nnet.ipv4.neigh.default.gc_thresh2=4096\nnet.ipv4.neigh.default.gc_thresh3=8192\n\n# netfilter优化\nnet.netfilter.nf_conntrack_max=10485760\nnet.netfilter.nf_conntrack_tcp_timeout_established=300\nnet.netfilter.nf_conntrack_buckets=655360\n\nnet.core.netdev_max_backlog=10000\nfs.inotify.max_user_instances=524288\nfs.inotify.max_user_watches=524288\n\nEOF\n```\n\n- `fs.file-max`表示系统级别最大文件句柄数量；\n- `net.ipv4.neigh.default.gc_thresh1`表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；\n- `net.ipv4.neigh.default.gc_thresh2`保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；\n- `net.ipv4.neigh.default.gc_thresh3`保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；\n- `net.netfilter.nf_conntrack_max`内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；\n- `net.netfilter.nf_conntrack_buckets`哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;\n- `net.core.netdev_max_backlog`网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；\n- `fs.inotify.max_user_instances`默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；\n- `fs.inotify.max_user_watches`默认值: 8192 指定了每个inotify instance相关联的watches的上限；\n\n\n\n执行下面的命令在每个节点生效配置：\n\n```bash\n$ ansible cluster -m copy -a 'src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755'\n$ ansible cluster -m shell -a 'sysctl -p /etc/sysctl.d/k8s.conf'\n$ ansible cluster -m shell -a 'echo \"/sbin/sysctl -p /etc/sysctl.d/k8s.conf\" >> /etc/rc.local'\n```\n\n<br>\n\n\n\n## 安装nfs和nginx\n\n\n\n### 安装nfs\n\nnfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在`SCA-LUM700011`这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：\n\n```bash\n$ mkfs.xfs /dev/vdb -f\n$ mkdir -p /data/nfs-data\n$ echo \"/dev/vdb /data/nfs-data xfs defaults 0 0\" >> /etc/fstab\n$ mount -a\n$ df -h\n```\n\n\n\n安装nfs相关服务并启动nfs：\n\n```bash\n$ yum install -y nfs-utils rpcbind\n$ echo \"/data/nfs-data *(rw,no_root_squash)\" >> /etc/exports\n$ systemctl start rpcbind\n$ systemctl status rpcbind\n$ systemctl enable rpcbind\n$ systemctl start nfs \n$ systemctl status nfs\n$ systemctl enable nfs\n```\n\n\n\n在集群的每一个节点上执行下面的命令安装`nfs-utils`工具：\n\n```bash\n$ yum install -y nfs-utils \n```\n\n\n\n### 安装nginx\n\n这里使用yum方式安装nginx。\n\n```bash\n# 安装依赖\n$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n\n# 添加yum源\n$ cat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\n# 安装nginx\n$ yum install -y nginx\n\n# 检查\n$ nginx -v\n$ nginx -V\n\n# 启动nginx\n$ systemctl start nginx\n$ systenctl status nginx\n$ systenctl enable nginx\n```\n\n<br>\n\n\n\n## 配置sshkey\n\n在`SCA-LUM700011`这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。\n\n```bash\n$ ssh-keygen\n$ ssh-copy-id 10.8.138.5\n$ ssh-copy-id 10.8.138.6\n$ ssh-copy-id 10.8.138.10\n$ ssh-copy-id 10.8.138.9\n$ ssh-copy-id 10.8.138.11\n```\n\n<br>\n\n\n\n## 安装ansible\n\n`ansible`可以方便批量执行指令：\n\n\n\n### 安装\n\n```bash\n$ yum install -y ansible\n```\n\n\n\n### 设置配置文件\n\n```bash\n$ cat > /etc/ansible/ansible.cfg <<EOF\n[defaults]\nlog_path = /var/log/ansible.log\nforks = 20\nhost_key_checking = False\nretry_files_enabled = False\ndeprecation_warnings = False\nnocows = True\nremote_user = root\nroles_path = roles/\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = /etc/ansible/facts\nfact_caching_timeout = 600\ncallback_whitelist = profile_tasks\ninventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini\ntimeout = 30\n\n[inventory]\nunparsed_is_failed=true\n\n[ssh_connection]\npipelining = True\nssh_args = -o ControlMaster=auto -o ControlPersist=600s\ntimeout = 10\ncontrol_path = %(directory)s/%%h-%%r\nEOF\n```\n\n\n\n### 设置ansible host文件\n\n```bash\n$ cat > /etc/ansible/hosts <<EOF\n[cluster]\n10.8.138.5  hostname='SCA-LUM700007'\n10.8.138.6  hostname='SCA-LUM700008'\n10.8.138.10 hostname='SCA-LUM700012'\n10.8.138.9  hostname='SCA-LUM700013'\n10.8.138.11 hostname='SCA-LUM700014'\n\n[ans]\n10.8.138.8\n\n[master]\n10.8.138.5\n10.8.138.6\n10.8.138.10\n\n[worker]\n10.8.138.9\n10.8.138.11\nEOF\n```\n\n\n\n### 验证ansible\n\n```bash\n$ ansible cluster -m ping \n```\n\n<img src=\"ansible-check.png\" style=\"zoom:40%;\" />\n\n<br>\n\n## 设置host\n\n通过`ansible`为每个节点设置host文件：\n\n```bash\n$ ansible cluster -m shell -a 'cat >> /etc/hosts <<EOF\n10.8.138.5  SCA-LUM700007 sca-lum700007 master1\n10.8.138.6  SCA-LUM700008 sca-lum700008 master2\n10.8.138.10 SCA-LUM700012 sca-lum700012 master3\n10.8.138.9  SCA-LUM700013 sca-lum700013 node1\n10.8.138.11 SCA-LUM700014 sca-lum700014 node2\nEOF'\n```\n\n\n\n<br>\n\n\n\n## 安装docker\n\n需要给集群所有的节点安装docker：\n\n\n\n### 添加docker repo文件\n\n```bash\n$ ansible cluster -m shell -a 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'\n```\n\n\n\n### 设置存储目录\n\n一般docker的数据存放路径为`/var/lib/docker`，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：\n\n```bash\n$ mkdir /var/lib/docker\n$ mkfs.xfs -f /dev/vdb\n$ echo \"/dev/vdb /var/lib/docker xfs defaults 0 0\" >> /etc/fstab\n$ mount -a\n$ df -h\n```\n\n\n\n### 安装docker\n\n这里使用的是18.06.3的版本：\n\n```bash\n# 查看当前可用的版本\n$ yum list docker-ce --showduplicates|sort -r\n\n# 安装docker\n$ ansible cluster -m shell -a 'yum install -y docker-ce-18.06.3.ce-3.el7'\n```\n\n\n\n### 配置docker配置文件\n\n```bash\n$ cat > daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\",\n    \"max-file\": \"5\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n\n# 分发到集群节点\n$ ansible cluster -m shell -a 'mkdir /etc/docker'\n$ ansible cluster -m copy -a 'src=daemon.json dest=/etc/docker/daemon.json'\n```\n\n\n\n### 启动docker服务\n\n```bash\n$ ansible cluster -m shell -a 'systemctl daemon-reload'\n$ ansible cluster -m shell -a 'systemctl restart docker'\n$ ansible cluster -m shell -a 'systemctl status docker'\n$ ansible cluster -m shell -a 'systemctl enable docker'\n```\n\n<br>\n\n\n\n## 关闭swap\n\n```bash\n$ ansible cluster -m shell -a 'swapoff -a'\n$ ansible cluster -m shell -a 'sed -i \"/swap/s/^/#/g\" /etc/fstab'\n```\n\n<br>\n\n\n\n## 开启ipvs\n\n本集群的service网络采用ipvs模式：\n\n```bash\n# 配置内核参数\n$ ansible cluster -m sysctl -a 'name=net.ipv4.ip_forward value=1 state=present'\n$ ansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-iptables value=1 state=present'\n$ ansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-ip6tables value=1 state=present'\n\n# 加载ipvs模块\n$ cat > /tmp/ipvs.modules <<EOF\n#!/bin/bash\nipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"\nfor kernel_module in \\${ipvs_modules}; do\n    /sbin/modinfo -F filename \\${kernel_module} > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        /sbin/modprobe \\${kernel_module}\n    fi\ndone\nEOF\n\n$ ansible cluster -m copy -a 'src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755'\n$ ansible cluster -m shell -a 'sh /root/ipvs.modules'\n\n# 设置开机启动执行该脚本\n$ ansible cluster -m shell -a 'echo \"sh /root/ipvs.modules\" >> /etc/rc.local'\n\n# 验证 ipvs 支持\n$ ansible cluster -m shell -a 'lsmod | grep ip_vs'\n\n# 安装ipvsadm\n$ ansible cluster -m yum -a 'name=ipvsadm state=present'\n```\n\n<br>\n\n\n\n## 添加阿里云k8s yum源\n\n```bash\n$ cat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n# 分发文件\n$ ansible cluster -m copy -a 'src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo'\n```\n\n<br>\n\n\n\n## 安装kubernetes基础工具\n\n这里安装的是`1.17.3`版本：\n\n```bash\n# 安装kubectl、kubeadm、kubelet\nansible cluster -m shell -a 'yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3'\n\n# 检查\nansible cluster -m shell -a 'ls /usr/bin/kube*'\n\n# 设置kubelet自启动\nansible cluster -m shell -a 'systemctl enable kubelet'\n```\n\n<br>\n\n\n\n## 创建master\n\n这一步在任意一个master上执行，这里我在`master1`上执行。需要配置下kubeadm的相关参数。\n\n\n\n### 配置kubeadm参数\n\n```shell\n$ cat > kubeadm-config.yaml << EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 0.0.0.0\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n  kubeletExtraArgs:\n    cgroup-driver: \"systemd\"\n  ignorePreflightErrors:\n  - IsPrivilegedUser\n---\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\ncontrolPlaneEndpoint: 10.8.138.12:6443\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\napiServer:\n  timeoutForControlPlane: 5m0s\n  extraArgs:\n    authorization-mode: \"Node,RBAC\"\n  certSANs:\n  - \"10.8.138.12\"\n  - \"14.116.177.22\"\n  - \"kubernetes\"\n  - \"kubernetes.default\"\n  - \"kubernetes.default.svc\"\n  - \"kubernetes.default.svc.cluster\"\n  - \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    \"node-cidr-mask-size\": \"20\"\nscheduler:\n  extraArgs:\n    address: \"0.0.0.0\"\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\n#    extraArgs:\n#      listen-client-urls: \"http://10.100.0.1:2379\"\n#    serverCertSANs:\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\nkubernetesVersion: v1.17.3\nnetworking:\n  dnsDomain: cluster.local\n  serviceSubnet: 172.24.0.0/16\n  podSubnet: 172.21.0.0/16\n---\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nkind: KubeProxyConfiguration\nbindAddress: 0.0.0.0\n#clusterCIDR:\nmode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。\nipvs:\n  scheduler: lc\n  syncPeriod: 30s\n  minSyncPeriod: 5s\n  tcpTimeout: 0s\n  tcpFinTimeout: 0s\n  udpTimeout: 0s\n---\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\nEOF\n```\n\n- 其中`10.8.138.12`为我前端slb的IP地址，代理后端三个master节点的6443；\n- 根据实际情况在`certSANs`中添加IP和域名；\n- 注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）\n\n\n\n### 验证配置\n\n下面的命令可以验证配置是否有误，并不会真正执行：\n\n```\n$ kubeadm init --config=kubeadm-config.yaml --upload-certs --dry-run\n```\n\n\n\n### 创建集群\n\n```\n# 创建集群\n$ kubeadm init --config=kubeadm-config.yaml --upload-certs\n```\n\n\n\n执行成功的话，会出现下面的信息：\n\n![](kubeadm-init.png)\n\n\n\n从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：\n\n```shell\n# 添加master\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n    \n# 添加node节点\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n> 命令中的token有两个小时时效，时效后需要重新获取\n\n\n\n### 添加其他master\n\n在剩下的两个master节点`SCA-LUM700008`和`SCA-LUM700012`执行下面的命令：\n\n```shell\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n```\n\n> 不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver回去配置信息；\n\n\n\n<br>\n\n## 设置kubectl\n\n### 自动补全\n\n```bash\n$ ansible master -m shell -a 'echo \"source <(kubectl completion bash)\" >> ~/.bashrc'\n```\n\n\n\n### 设置kubectl证书\n\n现在执行kubectl命令需要`--kubeconfig`参数指定配置文件，执行下面的命令设置：\n\n```bash\n$ cp /etc/kubernetes/admin.conf /root/.kube/config\n```\n\n\n\n<br>\n\n## 验证master部署情况\n\n```bash\n# 查看master\n$ kubectl get node --kubeconfig /etc/kubernetes/admin.conf\n\n# 查看pod\n$ kubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf\n```\n\n![](check-master.png)\n\n\n\n> 这里有些pod没有启动是正常的，因为集群还没部署完成。\n\n\n\n## 确认kube-proxy开启了ipvs\n\n首先查看网卡信息，多了一个kube-ipvs0网卡：\n\n```bash\n$ ip a s\n```\n\n<img src=\"ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n\n\n查看ipvs规则：\n\n```bash\n$ ipvsadm -Ln\n```\n\n<img src=\"ipvs-rule.png\" style=\"zoom:40%;\" />\n\n<br>\n\n\n\n## etcd配置\n\n### 更新etcd配置\n\n更新后会自动重启服务：\n\n```bash\n$ ansible master -m shell -a 'sed -i \"/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380\" /etc/kubernetes/manifests/etcd.yaml'\n\n# apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。\n$ ansible master -m shell -a 'sed -i \"/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379\" /etc/kubernetes/manifests/kube-apiserver.yaml'\n```\n\n\n\n### 查看etcd节点状态\n\n```bash\n# 下载etcdctl\n$ curl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz\n$ tar xzf etcd-v3.4.3-linux-amd64.tar.gz\n$ mv etcd-v3.4.3-linux-amd64/etcd* /usr/local/bin/\n\n# 查看状态\n$ ETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list\n```\n\n![](etcd-member.png)\n\n\n\n### 查看集群状态\n\n```bash\n$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status\n```\n\n![](etcd-cluster.png)\n\n\n\n### etcd节点健康状态\n\n```bash\n$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health\n```\n\n![](etcd-helth.png)\n\n<br>\n\n\n\n## 创建node\n\n在所有node节点上执行下面的命令：\n\n```bash\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n\n\n查看：\n\n```bash\n$ kubectl get node \n```\n\n<img src=\"getnode.png\" style=\"zoom:67%;\" />\n\n\n\n*节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。*\n\n<br>\n\n\n\n## 部署calico\n\n### 下载calico\n\n```bash\n# 下载calico的yaml文件\n$ curl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml\n```\n\n\n\n### 部署calico\n\n修改calico.yaml：\n\n```yaml\n# 修改为pod网段\n- name: CALICO_IPV4POOL_CIDR\n  value: \"172.21.0.0/16\"\n  \n# 增加该参数，设定端口范围\n- name: FELIX_KUBENODEPORTRANGES\n  value: \"30000:50000\"\n```\n\n\n\n部署calico：\n\n```bash\n$ kubectl apply -f calico.yaml\n```\n\n\n\n部署完成后，查看节点状态，应该都READY：\n\n```bash\n$ kubectl get node\n```\n\n<img src=\"nodes.png\" style=\"zoom:50%;\" />\n\n\n\n### 设置calico命令行工具\n\n下载calico命令行工具：\n\n```bash\n# 下载\n$ curl -L -o /usr/local/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64\n\n# 配置\n$ mkdir -p /etc/calico\n$ cat > /etc/calico/calicoctl.cfg <<EOF\napiVersion: projectcalico.org/v3\nkind: CalicoAPIConfig\nmetadata:\nspec:\n  datastoreType: kubernetes\n  kubeconfig: /etc/kubernetes/admin.conf  # 使用 admin 配置\n  #k8sAPIEndpoint: https://10.8.138.12:6443\n  #k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt\n  #k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key\n  #k8sCAFile: /etc/kubernetes/pki/ca.crt\nEOF\n```\n\n\n\n### 查看calico节点\n\n```bash\n$ calicoctl node status\n```\n\n<img src=\"calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n### 查看ippool\n\n```bash\n$ calicoctl get ippool -o wide\nNAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR\ndefault-ipv4-ippool   172.21.0.0/16   true   Always     Never       false      all()\n```\n\n\n\n### 查看ip状态\n\n```bash\n$ calicoctl ipam show\n```\n\n![](calico-ip.png)\n\n<br>\n\n\n\n## 集群校验\n\n```bash\nkubectl config get-clusters\nkubectl cluster-info\n```\n\n![](cluster-check.png)\n\n\n\n<br>\n\n\n\n## nginx服务其配置\n\n`SCA-LUM700011`作为nginx服务器，将会代理ingress服务，所以先设置一下。\n\n\n\n### 自签证书\n\n```bash\n# 确认安装了openssl\nopenssl version\n\n# 确定nginx安装了https模块(应该有--with-http_ssl_module)\nnginx -V\n\n# 创建整数目录\ncd /etc/nginx/\nmkdir ssl\ncd ssl\n\n# 生成秘钥\n$ openssl genrsa -out nginx.key 2048\nGenerating RSA private key, 2048 bit long modulus\n..............................................+++\n.....................................................................+++\ne is 65537 (0x10001)\n\n# 生成签名请求文件（csr），输入上边的密码，并输入相关的信息\nopenssl req -new -key nginx.key -out nginx.csr\n\n# 也可以在一行，不用交互式输入\nopenssl req -subj \"/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com\" -new -key nginx.key -out nginx.csr\n\n# 生成自签名证书，指定过期时间3650天，输入密码即可生成\nopenssl x509 -req -days 3650 -in nginx.csr -signkey nginx.key -out nginx.crt\n\n# 查看生成的文件\n$ ls\nnginx.crt  nginx.csr  nginx.key\n```\n\n\n\n### 修改nginx主配置文件\n\n修改`/etc/nginx/nginx.conf`文件为如下内容：\n\n```nginx\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n\n\n这里使用`include`导入其他的配置文件，所有服务的nginx配置都放在`/etc/nginx/conf.d`下，如果目录不存在需要自己创建。\n\n\n\n在``/etc/nginx/conf.d`下先创建一个通用配置文件`common.ini`，这个是所有配置文件都要用的，所以抽离出来：\n\n```nginx\nlocation = /favicon.ico {\n    log_not_found off;\n    access_log off;\n}\n\nlocation ~* /\\.(svn|git)/ {\n    return 404;\n}\n```\n\n\n\n### 创建一个测试配置\n\n在`/etc/nginx/conf.d`下新建一个配置文件`https.conf`：\n\n```nginx\nserver {\n  listen 80;\n  server_name https-server.example.com;\n\n  rewrite ^(.*) https://$host$1 permanent;\n\n}\n\nserver {\n    listen 443 ssl;\n    server_name https-server.example.com;\n\n    ssl_certificate /etc/nginx/ssl/new/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/new/nginx.key;\n\n    access_log /var/log/nginx/https-server.example.com_access.log main;\n    error_log /var/log/nginx/https-server.example.com_error.log;\n\n    location / {\n      root /usr/share/nginx/html;\n      index index.html index.htm;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n在`/usr/share/nginx/html`下创建测试页面：\n\n```bash\n$ echo \"this is https page\" > /usr/share/nginx/html/index.html\n```\n\n\n\n### 绑定host\n\n因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。\n\n\n\n### 重启nginx并访问\n\n执行下面的命令检查配置并重新加载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n然后通过浏览器访问域名：`https-server.example.com`，应该就可以看到设置的https页面了。\n\n> 注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。\n\n","source":"_posts/k8s实践系列-kubeadm部署k8s-1.18.md","raw":"---\ntitle: '[k8s实践系列]kubeadm部署k8s 1.17'\ndate: 2020-07-02 09:33:03\ntags:\n- k8s\n- k8s集群部署\ncategories: 实践K8s\ndescription: 通过kubeadm部署3master节点高可用k8s 1.17.3集群 \ncover: https://raw.githubusercontent.com/kubernetes/kubeadm/master/logos/stacked/color/kubeadm-stacked-color.png\n---\n\n## 集群规划\n\n|    主机名     |   IP地址    |        用途        |\n| :-----------: | :---------: | :----------------: |\n| SCA-LUM700011 | 10.8.138.8  | nginx+nfs+运维节点 |\n| SCA-LUM700007 | 10.8.138.5  |      master-1      |\n| SCA-LUM700008 | 10.8.138.6  |      Master-2      |\n| SCA-LUM700012 | 10.8.138.10 |      Master-3      |\n| SCA-LUM700013 | 10.8.138.9  |       Node-1       |\n| SCA-LUM700014 | 10.8.138.11 |       node-2       |\n\n\n\n操作系统`centos7.6`，前端还有一个elb，地址为`10.8.138.12`，代理master的apiserver。kube-proxy使用`ipvs`模式。\n\n\n\n集群使用`1.17.3`版本\n\n\n\n<br>\n\n## 升级内核版本\n\n**注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下**\n\n```bash\n# 载入公钥\n$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n\n# 安装 ELRepo 最新版本\n$ yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm\n\n# 列出可以使用的 kernel 包版本\n$ yum list available --disablerepo=* --enablerepo=elrepo-kernel\n\n# 安装内核\n$ yum install -y kernel-lt-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel\n\n# 查看可用内核\n$ cat /boot/grub2/grub.cfg | grep menuentry\nmenuentry 'CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)' --class centos （略）\nmenuentry 'CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)' --class centos ...（略）\n\n# 设置从新的内核起动\n$ grub2-set-default \"CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\"\n\n# 查看内核启动项\n$ grub2-editenv list\nsaved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\n\n# 重启\nreboot\n```\n\n<br>\n\n\n\n## 设置内核参数\n\n```bash\n$ cat > /etc/k8s.conf << EOF\nfs.file-max=6815744\nnet.ipv4.ip_forward=1\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nnet.ipv4.tcp_tw_recycle=0\nvm.swappiness=0\nvm.panic_on_oom=0\n\n# 当内核维护的arp表过于庞大时候，可以考虑优化\nnet.ipv4.neigh.default.gc_thresh1=1024\nnet.ipv4.neigh.default.gc_thresh2=4096\nnet.ipv4.neigh.default.gc_thresh3=8192\n\n# netfilter优化\nnet.netfilter.nf_conntrack_max=10485760\nnet.netfilter.nf_conntrack_tcp_timeout_established=300\nnet.netfilter.nf_conntrack_buckets=655360\n\nnet.core.netdev_max_backlog=10000\nfs.inotify.max_user_instances=524288\nfs.inotify.max_user_watches=524288\n\nEOF\n```\n\n- `fs.file-max`表示系统级别最大文件句柄数量；\n- `net.ipv4.neigh.default.gc_thresh1`表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；\n- `net.ipv4.neigh.default.gc_thresh2`保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；\n- `net.ipv4.neigh.default.gc_thresh3`保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；\n- `net.netfilter.nf_conntrack_max`内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；\n- `net.netfilter.nf_conntrack_buckets`哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;\n- `net.core.netdev_max_backlog`网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；\n- `fs.inotify.max_user_instances`默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；\n- `fs.inotify.max_user_watches`默认值: 8192 指定了每个inotify instance相关联的watches的上限；\n\n\n\n执行下面的命令在每个节点生效配置：\n\n```bash\n$ ansible cluster -m copy -a 'src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755'\n$ ansible cluster -m shell -a 'sysctl -p /etc/sysctl.d/k8s.conf'\n$ ansible cluster -m shell -a 'echo \"/sbin/sysctl -p /etc/sysctl.d/k8s.conf\" >> /etc/rc.local'\n```\n\n<br>\n\n\n\n## 安装nfs和nginx\n\n\n\n### 安装nfs\n\nnfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在`SCA-LUM700011`这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：\n\n```bash\n$ mkfs.xfs /dev/vdb -f\n$ mkdir -p /data/nfs-data\n$ echo \"/dev/vdb /data/nfs-data xfs defaults 0 0\" >> /etc/fstab\n$ mount -a\n$ df -h\n```\n\n\n\n安装nfs相关服务并启动nfs：\n\n```bash\n$ yum install -y nfs-utils rpcbind\n$ echo \"/data/nfs-data *(rw,no_root_squash)\" >> /etc/exports\n$ systemctl start rpcbind\n$ systemctl status rpcbind\n$ systemctl enable rpcbind\n$ systemctl start nfs \n$ systemctl status nfs\n$ systemctl enable nfs\n```\n\n\n\n在集群的每一个节点上执行下面的命令安装`nfs-utils`工具：\n\n```bash\n$ yum install -y nfs-utils \n```\n\n\n\n### 安装nginx\n\n这里使用yum方式安装nginx。\n\n```bash\n# 安装依赖\n$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n\n# 添加yum源\n$ cat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\n# 安装nginx\n$ yum install -y nginx\n\n# 检查\n$ nginx -v\n$ nginx -V\n\n# 启动nginx\n$ systemctl start nginx\n$ systenctl status nginx\n$ systenctl enable nginx\n```\n\n<br>\n\n\n\n## 配置sshkey\n\n在`SCA-LUM700011`这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。\n\n```bash\n$ ssh-keygen\n$ ssh-copy-id 10.8.138.5\n$ ssh-copy-id 10.8.138.6\n$ ssh-copy-id 10.8.138.10\n$ ssh-copy-id 10.8.138.9\n$ ssh-copy-id 10.8.138.11\n```\n\n<br>\n\n\n\n## 安装ansible\n\n`ansible`可以方便批量执行指令：\n\n\n\n### 安装\n\n```bash\n$ yum install -y ansible\n```\n\n\n\n### 设置配置文件\n\n```bash\n$ cat > /etc/ansible/ansible.cfg <<EOF\n[defaults]\nlog_path = /var/log/ansible.log\nforks = 20\nhost_key_checking = False\nretry_files_enabled = False\ndeprecation_warnings = False\nnocows = True\nremote_user = root\nroles_path = roles/\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = /etc/ansible/facts\nfact_caching_timeout = 600\ncallback_whitelist = profile_tasks\ninventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini\ntimeout = 30\n\n[inventory]\nunparsed_is_failed=true\n\n[ssh_connection]\npipelining = True\nssh_args = -o ControlMaster=auto -o ControlPersist=600s\ntimeout = 10\ncontrol_path = %(directory)s/%%h-%%r\nEOF\n```\n\n\n\n### 设置ansible host文件\n\n```bash\n$ cat > /etc/ansible/hosts <<EOF\n[cluster]\n10.8.138.5  hostname='SCA-LUM700007'\n10.8.138.6  hostname='SCA-LUM700008'\n10.8.138.10 hostname='SCA-LUM700012'\n10.8.138.9  hostname='SCA-LUM700013'\n10.8.138.11 hostname='SCA-LUM700014'\n\n[ans]\n10.8.138.8\n\n[master]\n10.8.138.5\n10.8.138.6\n10.8.138.10\n\n[worker]\n10.8.138.9\n10.8.138.11\nEOF\n```\n\n\n\n### 验证ansible\n\n```bash\n$ ansible cluster -m ping \n```\n\n<img src=\"ansible-check.png\" style=\"zoom:40%;\" />\n\n<br>\n\n## 设置host\n\n通过`ansible`为每个节点设置host文件：\n\n```bash\n$ ansible cluster -m shell -a 'cat >> /etc/hosts <<EOF\n10.8.138.5  SCA-LUM700007 sca-lum700007 master1\n10.8.138.6  SCA-LUM700008 sca-lum700008 master2\n10.8.138.10 SCA-LUM700012 sca-lum700012 master3\n10.8.138.9  SCA-LUM700013 sca-lum700013 node1\n10.8.138.11 SCA-LUM700014 sca-lum700014 node2\nEOF'\n```\n\n\n\n<br>\n\n\n\n## 安装docker\n\n需要给集群所有的节点安装docker：\n\n\n\n### 添加docker repo文件\n\n```bash\n$ ansible cluster -m shell -a 'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'\n```\n\n\n\n### 设置存储目录\n\n一般docker的数据存放路径为`/var/lib/docker`，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：\n\n```bash\n$ mkdir /var/lib/docker\n$ mkfs.xfs -f /dev/vdb\n$ echo \"/dev/vdb /var/lib/docker xfs defaults 0 0\" >> /etc/fstab\n$ mount -a\n$ df -h\n```\n\n\n\n### 安装docker\n\n这里使用的是18.06.3的版本：\n\n```bash\n# 查看当前可用的版本\n$ yum list docker-ce --showduplicates|sort -r\n\n# 安装docker\n$ ansible cluster -m shell -a 'yum install -y docker-ce-18.06.3.ce-3.el7'\n```\n\n\n\n### 配置docker配置文件\n\n```bash\n$ cat > daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\",\n    \"max-file\": \"5\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF\n\n# 分发到集群节点\n$ ansible cluster -m shell -a 'mkdir /etc/docker'\n$ ansible cluster -m copy -a 'src=daemon.json dest=/etc/docker/daemon.json'\n```\n\n\n\n### 启动docker服务\n\n```bash\n$ ansible cluster -m shell -a 'systemctl daemon-reload'\n$ ansible cluster -m shell -a 'systemctl restart docker'\n$ ansible cluster -m shell -a 'systemctl status docker'\n$ ansible cluster -m shell -a 'systemctl enable docker'\n```\n\n<br>\n\n\n\n## 关闭swap\n\n```bash\n$ ansible cluster -m shell -a 'swapoff -a'\n$ ansible cluster -m shell -a 'sed -i \"/swap/s/^/#/g\" /etc/fstab'\n```\n\n<br>\n\n\n\n## 开启ipvs\n\n本集群的service网络采用ipvs模式：\n\n```bash\n# 配置内核参数\n$ ansible cluster -m sysctl -a 'name=net.ipv4.ip_forward value=1 state=present'\n$ ansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-iptables value=1 state=present'\n$ ansible cluster -m sysctl -a 'name=net.bridge.bridge-nf-call-ip6tables value=1 state=present'\n\n# 加载ipvs模块\n$ cat > /tmp/ipvs.modules <<EOF\n#!/bin/bash\nipvs_modules=\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"\nfor kernel_module in \\${ipvs_modules}; do\n    /sbin/modinfo -F filename \\${kernel_module} > /dev/null 2>&1\n    if [ $? -eq 0 ]; then\n        /sbin/modprobe \\${kernel_module}\n    fi\ndone\nEOF\n\n$ ansible cluster -m copy -a 'src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755'\n$ ansible cluster -m shell -a 'sh /root/ipvs.modules'\n\n# 设置开机启动执行该脚本\n$ ansible cluster -m shell -a 'echo \"sh /root/ipvs.modules\" >> /etc/rc.local'\n\n# 验证 ipvs 支持\n$ ansible cluster -m shell -a 'lsmod | grep ip_vs'\n\n# 安装ipvsadm\n$ ansible cluster -m yum -a 'name=ipvsadm state=present'\n```\n\n<br>\n\n\n\n## 添加阿里云k8s yum源\n\n```bash\n$ cat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n# 分发文件\n$ ansible cluster -m copy -a 'src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo'\n```\n\n<br>\n\n\n\n## 安装kubernetes基础工具\n\n这里安装的是`1.17.3`版本：\n\n```bash\n# 安装kubectl、kubeadm、kubelet\nansible cluster -m shell -a 'yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3'\n\n# 检查\nansible cluster -m shell -a 'ls /usr/bin/kube*'\n\n# 设置kubelet自启动\nansible cluster -m shell -a 'systemctl enable kubelet'\n```\n\n<br>\n\n\n\n## 创建master\n\n这一步在任意一个master上执行，这里我在`master1`上执行。需要配置下kubeadm的相关参数。\n\n\n\n### 配置kubeadm参数\n\n```shell\n$ cat > kubeadm-config.yaml << EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 0.0.0.0\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /var/run/dockershim.sock\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n  kubeletExtraArgs:\n    cgroup-driver: \"systemd\"\n  ignorePreflightErrors:\n  - IsPrivilegedUser\n---\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\ncontrolPlaneEndpoint: 10.8.138.12:6443\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\napiServer:\n  timeoutForControlPlane: 5m0s\n  extraArgs:\n    authorization-mode: \"Node,RBAC\"\n  certSANs:\n  - \"10.8.138.12\"\n  - \"14.116.177.22\"\n  - \"kubernetes\"\n  - \"kubernetes.default\"\n  - \"kubernetes.default.svc\"\n  - \"kubernetes.default.svc.cluster\"\n  - \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    \"node-cidr-mask-size\": \"20\"\nscheduler:\n  extraArgs:\n    address: \"0.0.0.0\"\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\n#    extraArgs:\n#      listen-client-urls: \"http://10.100.0.1:2379\"\n#    serverCertSANs:\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\nkubernetesVersion: v1.17.3\nnetworking:\n  dnsDomain: cluster.local\n  serviceSubnet: 172.24.0.0/16\n  podSubnet: 172.21.0.0/16\n---\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nkind: KubeProxyConfiguration\nbindAddress: 0.0.0.0\n#clusterCIDR:\nmode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。\nipvs:\n  scheduler: lc\n  syncPeriod: 30s\n  minSyncPeriod: 5s\n  tcpTimeout: 0s\n  tcpFinTimeout: 0s\n  udpTimeout: 0s\n---\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\nEOF\n```\n\n- 其中`10.8.138.12`为我前端slb的IP地址，代理后端三个master节点的6443；\n- 根据实际情况在`certSANs`中添加IP和域名；\n- 注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）\n\n\n\n### 验证配置\n\n下面的命令可以验证配置是否有误，并不会真正执行：\n\n```\n$ kubeadm init --config=kubeadm-config.yaml --upload-certs --dry-run\n```\n\n\n\n### 创建集群\n\n```\n# 创建集群\n$ kubeadm init --config=kubeadm-config.yaml --upload-certs\n```\n\n\n\n执行成功的话，会出现下面的信息：\n\n![](kubeadm-init.png)\n\n\n\n从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：\n\n```shell\n# 添加master\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n    \n# 添加node节点\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n> 命令中的token有两个小时时效，时效后需要重新获取\n\n\n\n### 添加其他master\n\n在剩下的两个master节点`SCA-LUM700008`和`SCA-LUM700012`执行下面的命令：\n\n```shell\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\\n    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c\n```\n\n> 不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver回去配置信息；\n\n\n\n<br>\n\n## 设置kubectl\n\n### 自动补全\n\n```bash\n$ ansible master -m shell -a 'echo \"source <(kubectl completion bash)\" >> ~/.bashrc'\n```\n\n\n\n### 设置kubectl证书\n\n现在执行kubectl命令需要`--kubeconfig`参数指定配置文件，执行下面的命令设置：\n\n```bash\n$ cp /etc/kubernetes/admin.conf /root/.kube/config\n```\n\n\n\n<br>\n\n## 验证master部署情况\n\n```bash\n# 查看master\n$ kubectl get node --kubeconfig /etc/kubernetes/admin.conf\n\n# 查看pod\n$ kubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf\n```\n\n![](check-master.png)\n\n\n\n> 这里有些pod没有启动是正常的，因为集群还没部署完成。\n\n\n\n## 确认kube-proxy开启了ipvs\n\n首先查看网卡信息，多了一个kube-ipvs0网卡：\n\n```bash\n$ ip a s\n```\n\n<img src=\"ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n\n\n查看ipvs规则：\n\n```bash\n$ ipvsadm -Ln\n```\n\n<img src=\"ipvs-rule.png\" style=\"zoom:40%;\" />\n\n<br>\n\n\n\n## etcd配置\n\n### 更新etcd配置\n\n更新后会自动重启服务：\n\n```bash\n$ ansible master -m shell -a 'sed -i \"/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380\" /etc/kubernetes/manifests/etcd.yaml'\n\n# apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。\n$ ansible master -m shell -a 'sed -i \"/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379\" /etc/kubernetes/manifests/kube-apiserver.yaml'\n```\n\n\n\n### 查看etcd节点状态\n\n```bash\n# 下载etcdctl\n$ curl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz\n$ tar xzf etcd-v3.4.3-linux-amd64.tar.gz\n$ mv etcd-v3.4.3-linux-amd64/etcd* /usr/local/bin/\n\n# 查看状态\n$ ETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list\n```\n\n![](etcd-member.png)\n\n\n\n### 查看集群状态\n\n```bash\n$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status\n```\n\n![](etcd-cluster.png)\n\n\n\n### etcd节点健康状态\n\n```bash\n$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health\n```\n\n![](etcd-helth.png)\n\n<br>\n\n\n\n## 创建node\n\n在所有node节点上执行下面的命令：\n\n```bash\n$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\\n    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e\n```\n\n\n\n查看：\n\n```bash\n$ kubectl get node \n```\n\n<img src=\"getnode.png\" style=\"zoom:67%;\" />\n\n\n\n*节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。*\n\n<br>\n\n\n\n## 部署calico\n\n### 下载calico\n\n```bash\n# 下载calico的yaml文件\n$ curl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml\n```\n\n\n\n### 部署calico\n\n修改calico.yaml：\n\n```yaml\n# 修改为pod网段\n- name: CALICO_IPV4POOL_CIDR\n  value: \"172.21.0.0/16\"\n  \n# 增加该参数，设定端口范围\n- name: FELIX_KUBENODEPORTRANGES\n  value: \"30000:50000\"\n```\n\n\n\n部署calico：\n\n```bash\n$ kubectl apply -f calico.yaml\n```\n\n\n\n部署完成后，查看节点状态，应该都READY：\n\n```bash\n$ kubectl get node\n```\n\n<img src=\"nodes.png\" style=\"zoom:50%;\" />\n\n\n\n### 设置calico命令行工具\n\n下载calico命令行工具：\n\n```bash\n# 下载\n$ curl -L -o /usr/local/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64\n\n# 配置\n$ mkdir -p /etc/calico\n$ cat > /etc/calico/calicoctl.cfg <<EOF\napiVersion: projectcalico.org/v3\nkind: CalicoAPIConfig\nmetadata:\nspec:\n  datastoreType: kubernetes\n  kubeconfig: /etc/kubernetes/admin.conf  # 使用 admin 配置\n  #k8sAPIEndpoint: https://10.8.138.12:6443\n  #k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt\n  #k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key\n  #k8sCAFile: /etc/kubernetes/pki/ca.crt\nEOF\n```\n\n\n\n### 查看calico节点\n\n```bash\n$ calicoctl node status\n```\n\n<img src=\"calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n### 查看ippool\n\n```bash\n$ calicoctl get ippool -o wide\nNAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR\ndefault-ipv4-ippool   172.21.0.0/16   true   Always     Never       false      all()\n```\n\n\n\n### 查看ip状态\n\n```bash\n$ calicoctl ipam show\n```\n\n![](calico-ip.png)\n\n<br>\n\n\n\n## 集群校验\n\n```bash\nkubectl config get-clusters\nkubectl cluster-info\n```\n\n![](cluster-check.png)\n\n\n\n<br>\n\n\n\n## nginx服务其配置\n\n`SCA-LUM700011`作为nginx服务器，将会代理ingress服务，所以先设置一下。\n\n\n\n### 自签证书\n\n```bash\n# 确认安装了openssl\nopenssl version\n\n# 确定nginx安装了https模块(应该有--with-http_ssl_module)\nnginx -V\n\n# 创建整数目录\ncd /etc/nginx/\nmkdir ssl\ncd ssl\n\n# 生成秘钥\n$ openssl genrsa -out nginx.key 2048\nGenerating RSA private key, 2048 bit long modulus\n..............................................+++\n.....................................................................+++\ne is 65537 (0x10001)\n\n# 生成签名请求文件（csr），输入上边的密码，并输入相关的信息\nopenssl req -new -key nginx.key -out nginx.csr\n\n# 也可以在一行，不用交互式输入\nopenssl req -subj \"/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com\" -new -key nginx.key -out nginx.csr\n\n# 生成自签名证书，指定过期时间3650天，输入密码即可生成\nopenssl x509 -req -days 3650 -in nginx.csr -signkey nginx.key -out nginx.crt\n\n# 查看生成的文件\n$ ls\nnginx.crt  nginx.csr  nginx.key\n```\n\n\n\n### 修改nginx主配置文件\n\n修改`/etc/nginx/nginx.conf`文件为如下内容：\n\n```nginx\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n```\n\n\n\n这里使用`include`导入其他的配置文件，所有服务的nginx配置都放在`/etc/nginx/conf.d`下，如果目录不存在需要自己创建。\n\n\n\n在``/etc/nginx/conf.d`下先创建一个通用配置文件`common.ini`，这个是所有配置文件都要用的，所以抽离出来：\n\n```nginx\nlocation = /favicon.ico {\n    log_not_found off;\n    access_log off;\n}\n\nlocation ~* /\\.(svn|git)/ {\n    return 404;\n}\n```\n\n\n\n### 创建一个测试配置\n\n在`/etc/nginx/conf.d`下新建一个配置文件`https.conf`：\n\n```nginx\nserver {\n  listen 80;\n  server_name https-server.example.com;\n\n  rewrite ^(.*) https://$host$1 permanent;\n\n}\n\nserver {\n    listen 443 ssl;\n    server_name https-server.example.com;\n\n    ssl_certificate /etc/nginx/ssl/new/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/new/nginx.key;\n\n    access_log /var/log/nginx/https-server.example.com_access.log main;\n    error_log /var/log/nginx/https-server.example.com_error.log;\n\n    location / {\n      root /usr/share/nginx/html;\n      index index.html index.htm;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n在`/usr/share/nginx/html`下创建测试页面：\n\n```bash\n$ echo \"this is https page\" > /usr/share/nginx/html/index.html\n```\n\n\n\n### 绑定host\n\n因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。\n\n\n\n### 重启nginx并访问\n\n执行下面的命令检查配置并重新加载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n然后通过浏览器访问域名：`https-server.example.com`，应该就可以看到设置的https页面了。\n\n> 注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。\n\n","slug":"k8s实践系列-kubeadm部署k8s-1.18","published":1,"updated":"2020-08-04T07:26:08.748Z","_id":"ckc4gokzn0000apn0f1ii9opn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h2><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SCA-LUM700011</td>\n<td align=\"center\">10.8.138.8</td>\n<td align=\"center\">nginx+nfs+运维节点</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700007</td>\n<td align=\"center\">10.8.138.5</td>\n<td align=\"center\">master-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700008</td>\n<td align=\"center\">10.8.138.6</td>\n<td align=\"center\">Master-2</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700012</td>\n<td align=\"center\">10.8.138.10</td>\n<td align=\"center\">Master-3</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700013</td>\n<td align=\"center\">10.8.138.9</td>\n<td align=\"center\">Node-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700014</td>\n<td align=\"center\">10.8.138.11</td>\n<td align=\"center\">node-2</td>\n</tr>\n</tbody></table>\n<p>操作系统<code>centos7.6</code>，前端还有一个elb，地址为<code>10.8.138.12</code>，代理master的apiserver。kube-proxy使用<code>ipvs</code>模式。</p>\n<p>集群使用<code>1.17.3</code>版本</p>\n<br>\n\n<h2 id=\"升级内核版本\"><a href=\"#升级内核版本\" class=\"headerlink\" title=\"升级内核版本\"></a>升级内核版本</h2><p><strong>注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 载入公钥</span></span><br><span class=\"line\">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 ELRepo 最新版本</span></span><br><span class=\"line\">$ yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出可以使用的 kernel 包版本</span></span><br><span class=\"line\">$ yum list available --disablerepo=* --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装内核</span></span><br><span class=\"line\">$ yum install -y kernel<span class=\"_\">-lt</span>-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可用内核</span></span><br><span class=\"line\">$ cat /boot/grub2/grub.cfg | grep menuentry</span><br><span class=\"line\">menuentry <span class=\"string\">'CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)'</span> --class centos （略）</span><br><span class=\"line\">menuentry <span class=\"string\">'CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)'</span> --class centos ...（略）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置从新的内核起动</span></span><br><span class=\"line\">$ grub2-set-default <span class=\"string\">\"CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核启动项</span></span><br><span class=\"line\">$ grub2-editenv list</span><br><span class=\"line\">saved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"设置内核参数\"><a href=\"#设置内核参数\" class=\"headerlink\" title=\"设置内核参数\"></a>设置内核参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\">fs.file-max=6815744</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables=1</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle=0</span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\">vm.panic_on_oom=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当内核维护的arp表过于庞大时候，可以考虑优化</span></span><br><span class=\"line\">net.ipv4.neigh.default.gc_thresh1=1024</span><br><span class=\"line\">net.ipv4.neigh.default.gc_thresh2=4096</span><br><span class=\"line\">net.ipv4.neigh.default.gc_thresh3=8192</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># netfilter优化</span></span><br><span class=\"line\">net.netfilter.nf_conntrack_max=10485760</span><br><span class=\"line\">net.netfilter.nf_conntrack_tcp_timeout_established=300</span><br><span class=\"line\">net.netfilter.nf_conntrack_buckets=655360</span><br><span class=\"line\"></span><br><span class=\"line\">net.core.netdev_max_backlog=10000</span><br><span class=\"line\">fs.inotify.max_user_instances=524288</span><br><span class=\"line\">fs.inotify.max_user_watches=524288</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>fs.file-max</code>表示系统级别最大文件句柄数量；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh1</code>表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh2</code>保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh3</code>保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；</li>\n<li><code>net.netfilter.nf_conntrack_max</code>内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；</li>\n<li><code>net.netfilter.nf_conntrack_buckets</code>哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;</li>\n<li><code>net.core.netdev_max_backlog</code>网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；</li>\n<li><code>fs.inotify.max_user_instances</code>默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；</li>\n<li><code>fs.inotify.max_user_watches</code>默认值: 8192 指定了每个inotify instance相关联的watches的上限；</li>\n</ul>\n<p>执行下面的命令在每个节点生效配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'sysctl -p /etc/sysctl.d/k8s.conf'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'echo \"/sbin/sysctl -p /etc/sysctl.d/k8s.conf\" &gt;&gt; /etc/rc.local'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"安装nfs和nginx\"><a href=\"#安装nfs和nginx\" class=\"headerlink\" title=\"安装nfs和nginx\"></a>安装nfs和nginx</h2><h3 id=\"安装nfs\"><a href=\"#安装nfs\" class=\"headerlink\" title=\"安装nfs\"></a>安装nfs</h3><p>nfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在<code>SCA-LUM700011</code>这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/vdb -f</span><br><span class=\"line\">$ mkdir -p /data/nfs-data</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/dev/vdb /data/nfs-data xfs defaults 0 0\"</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br><span class=\"line\">$ df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装nfs相关服务并启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils rpcbind</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/data/nfs-data *(rw,no_root_squash)\"</span> &gt;&gt; /etc/exports</span><br><span class=\"line\">$ systemctl start rpcbind</span><br><span class=\"line\">$ systemctl status rpcbind</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">$ systemctl start nfs </span><br><span class=\"line\">$ systemctl status nfs</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在集群的每一个节点上执行下面的命令安装<code>nfs-utils</code>工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><p>这里使用yum方式安装nginx。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加yum源</span></span><br><span class=\"line\">$ cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; EOF</span><br><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[nginx-mainline]</span><br><span class=\"line\">name=nginx mainline repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/mainline/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装nginx</span></span><br><span class=\"line\">$ yum install -y nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">$ nginx -v</span><br><span class=\"line\">$ nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\">$ systenctl status nginx</span><br><span class=\"line\">$ systenctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"配置sshkey\"><a href=\"#配置sshkey\" class=\"headerlink\" title=\"配置sshkey\"></a>配置sshkey</h2><p>在<code>SCA-LUM700011</code>这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.5</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.6</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.10</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.9</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.11</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"安装ansible\"><a href=\"#安装ansible\" class=\"headerlink\" title=\"安装ansible\"></a>安装ansible</h2><p><code>ansible</code>可以方便批量执行指令：</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y ansible</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/ansible/ansible.cfg &lt;&lt;EOF</span><br><span class=\"line\">[defaults]</span><br><span class=\"line\">log_path = /var/<span class=\"built_in\">log</span>/ansible.log</span><br><span class=\"line\">forks = 20</span><br><span class=\"line\">host_key_checking = False</span><br><span class=\"line\">retry_files_enabled = False</span><br><span class=\"line\">deprecation_warnings = False</span><br><span class=\"line\">nocows = True</span><br><span class=\"line\">remote_user = root</span><br><span class=\"line\">roles_path = roles/</span><br><span class=\"line\">gathering = smart</span><br><span class=\"line\">fact_caching = jsonfile</span><br><span class=\"line\">fact_caching_connection = /etc/ansible/facts</span><br><span class=\"line\">fact_caching_timeout = 600</span><br><span class=\"line\">callback_whitelist = profile_tasks</span><br><span class=\"line\">inventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini</span><br><span class=\"line\">timeout = 30</span><br><span class=\"line\"></span><br><span class=\"line\">[inventory]</span><br><span class=\"line\">unparsed_is_failed=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_connection]</span><br><span class=\"line\">pipelining = True</span><br><span class=\"line\">ssh_args = -o ControlMaster=auto -o ControlPersist=600s</span><br><span class=\"line\">timeout = 10</span><br><span class=\"line\">control_path = %(directory)s/%%h-%%r</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置ansible-host文件\"><a href=\"#设置ansible-host文件\" class=\"headerlink\" title=\"设置ansible host文件\"></a>设置ansible host文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/ansible/hosts &lt;&lt;EOF</span><br><span class=\"line\">[cluster]</span><br><span class=\"line\">10.8.138.5  hostname=<span class=\"string\">'SCA-LUM700007'</span></span><br><span class=\"line\">10.8.138.6  hostname=<span class=\"string\">'SCA-LUM700008'</span></span><br><span class=\"line\">10.8.138.10 hostname=<span class=\"string\">'SCA-LUM700012'</span></span><br><span class=\"line\">10.8.138.9  hostname=<span class=\"string\">'SCA-LUM700013'</span></span><br><span class=\"line\">10.8.138.11 hostname=<span class=\"string\">'SCA-LUM700014'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ans]</span><br><span class=\"line\">10.8.138.8</span><br><span class=\"line\"></span><br><span class=\"line\">[master]</span><br><span class=\"line\">10.8.138.5</span><br><span class=\"line\">10.8.138.6</span><br><span class=\"line\">10.8.138.10</span><br><span class=\"line\"></span><br><span class=\"line\">[worker]</span><br><span class=\"line\">10.8.138.9</span><br><span class=\"line\">10.8.138.11</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"验证ansible\"><a href=\"#验证ansible\" class=\"headerlink\" title=\"验证ansible\"></a>验证ansible</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m ping</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"ansible-check.png\" style=\"zoom:40%;\" />\n\n<br>\n\n<h2 id=\"设置host\"><a href=\"#设置host\" class=\"headerlink\" title=\"设置host\"></a>设置host</h2><p>通过<code>ansible</code>为每个节点设置host文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5  SCA-LUM700007 sca-lum700007 master1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6  SCA-LUM700008 sca-lum700008 master2</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10 SCA-LUM700012 sca-lum700012 master3</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9  SCA-LUM700013 sca-lum700013 node1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11 SCA-LUM700014 sca-lum700014 node2</span></span><br><span class=\"line\"><span class=\"string\">EOF'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>需要给集群所有的节点安装docker：</p>\n<h3 id=\"添加docker-repo文件\"><a href=\"#添加docker-repo文件\" class=\"headerlink\" title=\"添加docker repo文件\"></a>添加docker repo文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置存储目录\"><a href=\"#设置存储目录\" class=\"headerlink\" title=\"设置存储目录\"></a>设置存储目录</h3><p>一般docker的数据存放路径为<code>/var/lib/docker</code>，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /var/lib/docker</span><br><span class=\"line\">$ mkfs.xfs -f /dev/vdb</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/dev/vdb /var/lib/docker xfs defaults 0 0\"</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br><span class=\"line\">$ df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装docker-1\"><a href=\"#安装docker-1\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>这里使用的是18.06.3的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前可用的版本</span></span><br><span class=\"line\">$ yum list docker-ce --showduplicates|sort -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装docker</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'yum install -y docker-ce-18.06.3.ce-3.el7'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置docker配置文件\"><a href=\"#配置docker配置文件\" class=\"headerlink\" title=\"配置docker配置文件\"></a>配置docker配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"exec-opts\"</span>: [<span class=\"string\">\"native.cgroupdriver=systemd\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"log-driver\"</span>: <span class=\"string\">\"json-file\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"log-opts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"max-size\"</span>: <span class=\"string\">\"100m\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"max-file\"</span>: <span class=\"string\">\"5\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"storage-driver\"</span>: <span class=\"string\">\"overlay2\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发到集群节点</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'mkdir /etc/docker'</span></span><br><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=daemon.json dest=/etc/docker/daemon.json'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动docker服务\"><a href=\"#启动docker服务\" class=\"headerlink\" title=\"启动docker服务\"></a>启动docker服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl daemon-reload'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl restart docker'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl status docker'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl enable docker'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"关闭swap\"><a href=\"#关闭swap\" class=\"headerlink\" title=\"关闭swap\"></a>关闭swap</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'swapoff -a'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'sed -i \"/swap/s/^/#/g\" /etc/fstab'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"开启ipvs\"><a href=\"#开启ipvs\" class=\"headerlink\" title=\"开启ipvs\"></a>开启ipvs</h2><p>本集群的service网络采用ipvs模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置内核参数</span></span><br><span class=\"line\">$ ansible cluster -m sysctl -a <span class=\"string\">'name=net.ipv4.ip_forward value=1 state=present'</span></span><br><span class=\"line\">$ ansible cluster -m sysctl -a <span class=\"string\">'name=net.bridge.bridge-nf-call-iptables value=1 state=present'</span></span><br><span class=\"line\">$ ansible cluster -m sysctl -a <span class=\"string\">'name=net.bridge.bridge-nf-call-ip6tables value=1 state=present'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载ipvs模块</span></span><br><span class=\"line\">$ cat &gt; /tmp/ipvs.modules &lt;&lt;EOF</span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ipvs_modules=<span class=\"string\">\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> kernel_module <span class=\"keyword\">in</span> \\<span class=\"variable\">$&#123;ipvs_modules&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    /sbin/modinfo -F filename \\<span class=\"variable\">$&#123;kernel_module&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        /sbin/modprobe \\<span class=\"variable\">$&#123;kernel_module&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'sh /root/ipvs.modules'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动执行该脚本</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'echo \"sh /root/ipvs.modules\" &gt;&gt; /etc/rc.local'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 ipvs 支持</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'lsmod | grep ip_vs'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装ipvsadm</span></span><br><span class=\"line\">$ ansible cluster -m yum -a <span class=\"string\">'name=ipvsadm state=present'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"添加阿里云k8s-yum源\"><a href=\"#添加阿里云k8s-yum源\" class=\"headerlink\" title=\"添加阿里云k8s yum源\"></a>添加阿里云k8s yum源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发文件</span></span><br><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"安装kubernetes基础工具\"><a href=\"#安装kubernetes基础工具\" class=\"headerlink\" title=\"安装kubernetes基础工具\"></a>安装kubernetes基础工具</h2><p>这里安装的是<code>1.17.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装kubectl、kubeadm、kubelet</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">'yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">'ls /usr/bin/kube*'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置kubelet自启动</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">'systemctl enable kubelet'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"创建master\"><a href=\"#创建master\" class=\"headerlink\" title=\"创建master\"></a>创建master</h2><p>这一步在任意一个master上执行，这里我在<code>master1</code>上执行。需要配置下kubeadm的相关参数。</p>\n<h3 id=\"配置kubeadm参数\"><a href=\"#配置kubeadm参数\" class=\"headerlink\" title=\"配置kubeadm参数\"></a>配置kubeadm参数</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat &gt; kubeadm-config.yaml &lt;&lt; EOF</span></span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 0.0.0.0</span><br><span class=\"line\">  bindPort: 6443</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">  kubeletExtraArgs:</span><br><span class=\"line\">    cgroup-driver: \"systemd\"</span><br><span class=\"line\">  ignorePreflightErrors:</span><br><span class=\"line\">  - IsPrivilegedUser</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">controlPlaneEndpoint: 10.8.138.12:6443</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 5m0s</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    authorization-mode: \"Node,RBAC\"</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - \"10.8.138.12\"</span><br><span class=\"line\">  - \"14.116.177.22\"</span><br><span class=\"line\">  - \"kubernetes\"</span><br><span class=\"line\">  - \"kubernetes.default\"</span><br><span class=\"line\">  - \"kubernetes.default.svc\"</span><br><span class=\"line\">  - \"kubernetes.default.svc.cluster\"</span><br><span class=\"line\">  - \"kubernetes.default.svc.cluster.local\"</span><br><span class=\"line\">controllerManager:</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    \"node-cidr-mask-size\": \"20\"</span><br><span class=\"line\">scheduler:</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    address: \"0.0.0.0\"</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  type: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    extraArgs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">      listen-client-urls: <span class=\"string\">\"http://10.100.0.1:2379\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"localhost\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"127.0.0.1\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"localhost\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"127.0.0.1\"</span></span></span><br><span class=\"line\">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class=\"line\">kubernetesVersion: v1.17.3</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  serviceSubnet: 172.24.0.0/16</span><br><span class=\"line\">  podSubnet: 172.21.0.0/16</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class=\"line\">kind: KubeProxyConfiguration</span><br><span class=\"line\">bindAddress: 0.0.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">clusterCIDR:</span></span><br><span class=\"line\">mode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。</span><br><span class=\"line\">ipvs:</span><br><span class=\"line\">  scheduler: lc</span><br><span class=\"line\">  syncPeriod: 30s</span><br><span class=\"line\">  minSyncPeriod: 5s</span><br><span class=\"line\">  tcpTimeout: 0s</span><br><span class=\"line\">  tcpFinTimeout: 0s</span><br><span class=\"line\">  udpTimeout: 0s</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class=\"line\">kind: KubeletConfiguration</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中<code>10.8.138.12</code>为我前端slb的IP地址，代理后端三个master节点的6443；</li>\n<li>根据实际情况在<code>certSANs</code>中添加IP和域名；</li>\n<li>注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）</li>\n</ul>\n<h3 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h3><p>下面的命令可以验证配置是否有误，并不会真正执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init --config&#x3D;kubeadm-config.yaml --upload-certs --dry-run</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建集群\"><a href=\"#创建集群\" class=\"headerlink\" title=\"创建集群\"></a>创建集群</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建集群</span><br><span class=\"line\">$ kubeadm init --config&#x3D;kubeadm-config.yaml --upload-certs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行成功的话，会出现下面的信息：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"kubeadm-init.png\" alt=\"\"></p>\n<p>从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加master</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span></span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加node节点</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span></span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令中的token有两个小时时效，时效后需要重新获取</p>\n</blockquote>\n<h3 id=\"添加其他master\"><a href=\"#添加其他master\" class=\"headerlink\" title=\"添加其他master\"></a>添加其他master</h3><p>在剩下的两个master节点<code>SCA-LUM700008</code>和<code>SCA-LUM700012</code>执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span></span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver回去配置信息；</p>\n</blockquote>\n<br>\n\n<h2 id=\"设置kubectl\"><a href=\"#设置kubectl\" class=\"headerlink\" title=\"设置kubectl\"></a>设置kubectl</h2><h3 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'echo \"source &lt;(kubectl completion bash)\" &gt;&gt; ~/.bashrc'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置kubectl证书\"><a href=\"#设置kubectl证书\" class=\"headerlink\" title=\"设置kubectl证书\"></a>设置kubectl证书</h3><p>现在执行kubectl命令需要<code>--kubeconfig</code>参数指定配置文件，执行下面的命令设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp /etc/kubernetes/admin.conf /root/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"验证master部署情况\"><a href=\"#验证master部署情况\" class=\"headerlink\" title=\"验证master部署情况\"></a>验证master部署情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看master</span></span><br><span class=\"line\">$ kubectl get node --kubeconfig /etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">$ kubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"check-master.png\" alt=\"\"></p>\n<blockquote>\n<p>这里有些pod没有启动是正常的，因为集群还没部署完成。</p>\n</blockquote>\n<h2 id=\"确认kube-proxy开启了ipvs\"><a href=\"#确认kube-proxy开启了ipvs\" class=\"headerlink\" title=\"确认kube-proxy开启了ipvs\"></a>确认kube-proxy开启了ipvs</h2><p>首先查看网卡信息，多了一个kube-ipvs0网卡：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip a s</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n\n\n<p>查看ipvs规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"ipvs-rule.png\" style=\"zoom:40%;\" />\n\n<br>\n\n\n\n<h2 id=\"etcd配置\"><a href=\"#etcd配置\" class=\"headerlink\" title=\"etcd配置\"></a>etcd配置</h2><h3 id=\"更新etcd配置\"><a href=\"#更新etcd配置\" class=\"headerlink\" title=\"更新etcd配置\"></a>更新etcd配置</h3><p>更新后会自动重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'sed -i \"/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380\" /etc/kubernetes/manifests/etcd.yaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'sed -i \"/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379\" /etc/kubernetes/manifests/kube-apiserver.yaml'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看etcd节点状态\"><a href=\"#查看etcd节点状态\" class=\"headerlink\" title=\"查看etcd节点状态\"></a>查看etcd节点状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载etcdctl</span></span><br><span class=\"line\">$ curl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">$ tar xzf etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">$ mv etcd-v3.4.3-linux-amd64/etcd* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">$ ETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"etcd-member.png\" alt=\"\"></p>\n<h3 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"etcd-cluster.png\" alt=\"\"></p>\n<h3 id=\"etcd节点健康状态\"><a href=\"#etcd节点健康状态\" class=\"headerlink\" title=\"etcd节点健康状态\"></a>etcd节点健康状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"etcd-helth.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"创建node\"><a href=\"#创建node\" class=\"headerlink\" title=\"创建node\"></a>创建node</h2><p>在所有node节点上执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"getnode.png\" style=\"zoom:67%;\" />\n\n\n\n<p><em>节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。</em></p>\n<br>\n\n\n\n<h2 id=\"部署calico\"><a href=\"#部署calico\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h2><h3 id=\"下载calico\"><a href=\"#下载calico\" class=\"headerlink\" title=\"下载calico\"></a>下载calico</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载calico的yaml文件</span></span><br><span class=\"line\">$ curl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署calico-1\"><a href=\"#部署calico-1\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h3><p>修改calico.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改为pod网段</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CALICO_IPV4POOL_CIDR</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">\"172.21.0.0/16\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 增加该参数，设定端口范围</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">FELIX_KUBENODEPORTRANGES</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">\"30000:50000\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署calico：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署完成后，查看节点状态，应该都READY：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"nodes.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"设置calico命令行工具\"><a href=\"#设置calico命令行工具\" class=\"headerlink\" title=\"设置calico命令行工具\"></a>设置calico命令行工具</h3><p>下载calico命令行工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">$ curl -L -o /usr/<span class=\"built_in\">local</span>/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置</span></span><br><span class=\"line\">$ mkdir -p /etc/calico</span><br><span class=\"line\">$ cat &gt; /etc/calico/calicoctl.cfg &lt;&lt;EOF</span><br><span class=\"line\">apiVersion: projectcalico.org/v3</span><br><span class=\"line\">kind: CalicoAPIConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  datastoreType: kubernetes</span><br><span class=\"line\">  kubeconfig: /etc/kubernetes/admin.conf  <span class=\"comment\"># 使用 admin 配置</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sAPIEndpoint: https://10.8.138.12:6443</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sCAFile: /etc/kubernetes/pki/ca.crt</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看calico节点\"><a href=\"#查看calico节点\" class=\"headerlink\" title=\"查看calico节点\"></a>查看calico节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ calicoctl node status</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"查看ippool\"><a href=\"#查看ippool\" class=\"headerlink\" title=\"查看ippool\"></a>查看ippool</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ calicoctl get ippool -o wide</span><br><span class=\"line\">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR</span><br><span class=\"line\">default-ipv4-ippool   172.21.0.0/16   <span class=\"literal\">true</span>   Always     Never       <span class=\"literal\">false</span>      all()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看ip状态\"><a href=\"#查看ip状态\" class=\"headerlink\" title=\"查看ip状态\"></a>查看ip状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ calicoctl ipam show</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"calico-ip.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"集群校验\"><a href=\"#集群校验\" class=\"headerlink\" title=\"集群校验\"></a>集群校验</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config get-clusters</span><br><span class=\"line\">kubectl cluster-info</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"cluster-check.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"nginx服务其配置\"><a href=\"#nginx服务其配置\" class=\"headerlink\" title=\"nginx服务其配置\"></a>nginx服务其配置</h2><p><code>SCA-LUM700011</code>作为nginx服务器，将会代理ingress服务，所以先设置一下。</p>\n<h3 id=\"自签证书\"><a href=\"#自签证书\" class=\"headerlink\" title=\"自签证书\"></a>自签证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确认安装了openssl</span></span><br><span class=\"line\">openssl version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定nginx安装了https模块(应该有--with-http_ssl_module)</span></span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建整数目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">mkdir ssl</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ssl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成秘钥</span></span><br><span class=\"line\">$ openssl genrsa -out nginx.key 2048</span><br><span class=\"line\">Generating RSA private key, 2048 bit long modulus</span><br><span class=\"line\">..............................................+++</span><br><span class=\"line\">.....................................................................+++</span><br><span class=\"line\">e is 65537 (0x10001)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成签名请求文件（csr），输入上边的密码，并输入相关的信息</span></span><br><span class=\"line\">openssl req -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以在一行，不用交互式输入</span></span><br><span class=\"line\">openssl req -subj <span class=\"string\">\"/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com\"</span> -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成自签名证书，指定过期时间3650天，输入密码即可生成</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> nginx.csr -signkey nginx.key -out nginx.crt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看生成的文件</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">nginx.crt  nginx.csr  nginx.key</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改nginx主配置文件\"><a href=\"#修改nginx主配置文件\" class=\"headerlink\" title=\"修改nginx主配置文件\"></a>修改nginx主配置文件</h3><p>修改<code>/etc/nginx/nginx.conf</code>文件为如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"literal\">warn</span>;</span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] \"<span class=\"variable\">$request</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> \"<span class=\"variable\">$http_referer</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"<span class=\"variable\">$http_user_agent</span>\" \"<span class=\"variable\">$http_x_forwarded_for</span>\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里使用<code>include</code>导入其他的配置文件，所有服务的nginx配置都放在<code>/etc/nginx/conf.d</code>下，如果目录不存在需要自己创建。</p>\n<p>在``/etc/nginx/conf.d<code>下先创建一个通用配置文件</code>common.ini`，这个是所有配置文件都要用的，所以抽离出来：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">    <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建一个测试配置\"><a href=\"#创建一个测试配置\" class=\"headerlink\" title=\"创建一个测试配置\"></a>创建一个测试配置</h3><p>在<code>/etc/nginx/conf.d</code>下新建一个配置文件<code>https.conf</code>：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/new/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/new/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/https-server.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/https-server.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在<code>/usr/share/nginx/html</code>下创建测试页面：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"this is https page\"</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绑定host\"><a href=\"#绑定host\" class=\"headerlink\" title=\"绑定host\"></a>绑定host</h3><p>因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。</p>\n<h3 id=\"重启nginx并访问\"><a href=\"#重启nginx并访问\" class=\"headerlink\" title=\"重启nginx并访问\"></a>重启nginx并访问</h3><p>执行下面的命令检查配置并重新加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后通过浏览器访问域名：<code>https-server.example.com</code>，应该就可以看到设置的https页面了。</p>\n<blockquote>\n<p>注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"集群规划\"><a href=\"#集群规划\" class=\"headerlink\" title=\"集群规划\"></a>集群规划</h2><table>\n<thead>\n<tr>\n<th align=\"center\">主机名</th>\n<th align=\"center\">IP地址</th>\n<th align=\"center\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SCA-LUM700011</td>\n<td align=\"center\">10.8.138.8</td>\n<td align=\"center\">nginx+nfs+运维节点</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700007</td>\n<td align=\"center\">10.8.138.5</td>\n<td align=\"center\">master-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700008</td>\n<td align=\"center\">10.8.138.6</td>\n<td align=\"center\">Master-2</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700012</td>\n<td align=\"center\">10.8.138.10</td>\n<td align=\"center\">Master-3</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700013</td>\n<td align=\"center\">10.8.138.9</td>\n<td align=\"center\">Node-1</td>\n</tr>\n<tr>\n<td align=\"center\">SCA-LUM700014</td>\n<td align=\"center\">10.8.138.11</td>\n<td align=\"center\">node-2</td>\n</tr>\n</tbody></table>\n<p>操作系统<code>centos7.6</code>，前端还有一个elb，地址为<code>10.8.138.12</code>，代理master的apiserver。kube-proxy使用<code>ipvs</code>模式。</p>\n<p>集群使用<code>1.17.3</code>版本</p>\n<br>\n\n<h2 id=\"升级内核版本\"><a href=\"#升级内核版本\" class=\"headerlink\" title=\"升级内核版本\"></a>升级内核版本</h2><p><strong>注意，我这里计划使用ipvs模式，需要升级内核版本，每台服务器都升级一下</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 载入公钥</span></span><br><span class=\"line\">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 ELRepo 最新版本</span></span><br><span class=\"line\">$ yum install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出可以使用的 kernel 包版本</span></span><br><span class=\"line\">$ yum list available --disablerepo=* --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装内核</span></span><br><span class=\"line\">$ yum install -y kernel<span class=\"_\">-lt</span>-4.4.226-1.el7.elrepo --enablerepo=elrepo-kernel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可用内核</span></span><br><span class=\"line\">$ cat /boot/grub2/grub.cfg | grep menuentry</span><br><span class=\"line\">menuentry <span class=\"string\">'CentOS Linux (3.10.0-1062.el7.x86_64) 7 (Core)'</span> --class centos （略）</span><br><span class=\"line\">menuentry <span class=\"string\">'CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)'</span> --class centos ...（略）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置从新的内核起动</span></span><br><span class=\"line\">$ grub2-set-default <span class=\"string\">\"CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看内核启动项</span></span><br><span class=\"line\">$ grub2-editenv list</span><br><span class=\"line\">saved_entry=CentOS Linux (4.4.226-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"设置内核参数\"><a href=\"#设置内核参数\" class=\"headerlink\" title=\"设置内核参数\"></a>设置内核参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/k8s.conf &lt;&lt; EOF</span><br><span class=\"line\">fs.file-max=6815744</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\">net.bridge.bridge-nf-call-iptables=1</span><br><span class=\"line\">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle=0</span><br><span class=\"line\">vm.swappiness=0</span><br><span class=\"line\">vm.panic_on_oom=0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当内核维护的arp表过于庞大时候，可以考虑优化</span></span><br><span class=\"line\">net.ipv4.neigh.default.gc_thresh1=1024</span><br><span class=\"line\">net.ipv4.neigh.default.gc_thresh2=4096</span><br><span class=\"line\">net.ipv4.neigh.default.gc_thresh3=8192</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># netfilter优化</span></span><br><span class=\"line\">net.netfilter.nf_conntrack_max=10485760</span><br><span class=\"line\">net.netfilter.nf_conntrack_tcp_timeout_established=300</span><br><span class=\"line\">net.netfilter.nf_conntrack_buckets=655360</span><br><span class=\"line\"></span><br><span class=\"line\">net.core.netdev_max_backlog=10000</span><br><span class=\"line\">fs.inotify.max_user_instances=524288</span><br><span class=\"line\">fs.inotify.max_user_watches=524288</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>fs.file-max</code>表示系统级别最大文件句柄数量；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh1</code>表示存在于ARP高速缓存中的最少层数，如果少于这个数垃圾收集器将不会运行。缺省值是128；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh2</code>保存在ARP高速缓存中的最多的记录软限制。垃圾收集器在开始收集前允许记录数超过这个数字 5 秒。缺省值是 512；</li>\n<li><code>net.ipv4.neigh.default.gc_thresh3</code>保存在ARP高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是1024；</li>\n<li><code>net.netfilter.nf_conntrack_max</code>内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；</li>\n<li><code>net.netfilter.nf_conntrack_buckets</code>哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）;</li>\n<li><code>net.core.netdev_max_backlog</code>网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目；</li>\n<li><code>fs.inotify.max_user_instances</code>默认值: 128 指定了每一个real user ID可创建的inotify instatnces的数量上限；</li>\n<li><code>fs.inotify.max_user_watches</code>默认值: 8192 指定了每个inotify instance相关联的watches的上限；</li>\n</ul>\n<p>执行下面的命令在每个节点生效配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=/etc/sysctl.d/k8s.conf dest=/etc/sysctl.d/k8s.conf mode=0755'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'sysctl -p /etc/sysctl.d/k8s.conf'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'echo \"/sbin/sysctl -p /etc/sysctl.d/k8s.conf\" &gt;&gt; /etc/rc.local'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"安装nfs和nginx\"><a href=\"#安装nfs和nginx\" class=\"headerlink\" title=\"安装nfs和nginx\"></a>安装nfs和nginx</h2><h3 id=\"安装nfs\"><a href=\"#安装nfs\" class=\"headerlink\" title=\"安装nfs\"></a>安装nfs</h3><p>nfs的作用是为集群提供共享存储，nginx后面用来代理集群的ingress等服务。在<code>SCA-LUM700011</code>这台nfs服务器上有挂载的磁盘，先对其格式化并创建nfs的数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/vdb -f</span><br><span class=\"line\">$ mkdir -p /data/nfs-data</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/dev/vdb /data/nfs-data xfs defaults 0 0\"</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br><span class=\"line\">$ df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装nfs相关服务并启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils rpcbind</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/data/nfs-data *(rw,no_root_squash)\"</span> &gt;&gt; /etc/exports</span><br><span class=\"line\">$ systemctl start rpcbind</span><br><span class=\"line\">$ systemctl status rpcbind</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">$ systemctl start nfs </span><br><span class=\"line\">$ systemctl status nfs</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在集群的每一个节点上执行下面的命令安装<code>nfs-utils</code>工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><p>这里使用yum方式安装nginx。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加yum源</span></span><br><span class=\"line\">$ cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; EOF</span><br><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[nginx-mainline]</span><br><span class=\"line\">name=nginx mainline repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/mainline/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装nginx</span></span><br><span class=\"line\">$ yum install -y nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">$ nginx -v</span><br><span class=\"line\">$ nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\">$ systenctl status nginx</span><br><span class=\"line\">$ systenctl <span class=\"built_in\">enable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"配置sshkey\"><a href=\"#配置sshkey\" class=\"headerlink\" title=\"配置sshkey\"></a>配置sshkey</h2><p>在<code>SCA-LUM700011</code>这台创建ssh key并分发到其他节点，将这台服务器作为运维节点，下面使用的ansible就在这个上面运行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.5</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.6</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.10</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.9</span><br><span class=\"line\">$ ssh-copy-id 10.8.138.11</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"安装ansible\"><a href=\"#安装ansible\" class=\"headerlink\" title=\"安装ansible\"></a>安装ansible</h2><p><code>ansible</code>可以方便批量执行指令：</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y ansible</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/ansible/ansible.cfg &lt;&lt;EOF</span><br><span class=\"line\">[defaults]</span><br><span class=\"line\">log_path = /var/<span class=\"built_in\">log</span>/ansible.log</span><br><span class=\"line\">forks = 20</span><br><span class=\"line\">host_key_checking = False</span><br><span class=\"line\">retry_files_enabled = False</span><br><span class=\"line\">deprecation_warnings = False</span><br><span class=\"line\">nocows = True</span><br><span class=\"line\">remote_user = root</span><br><span class=\"line\">roles_path = roles/</span><br><span class=\"line\">gathering = smart</span><br><span class=\"line\">fact_caching = jsonfile</span><br><span class=\"line\">fact_caching_connection = /etc/ansible/facts</span><br><span class=\"line\">fact_caching_timeout = 600</span><br><span class=\"line\">callback_whitelist = profile_tasks</span><br><span class=\"line\">inventory_ignore_extensions = secrets.py, .pyc, .cfg, .crt, .ini</span><br><span class=\"line\">timeout = 30</span><br><span class=\"line\"></span><br><span class=\"line\">[inventory]</span><br><span class=\"line\">unparsed_is_failed=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_connection]</span><br><span class=\"line\">pipelining = True</span><br><span class=\"line\">ssh_args = -o ControlMaster=auto -o ControlPersist=600s</span><br><span class=\"line\">timeout = 10</span><br><span class=\"line\">control_path = %(directory)s/%%h-%%r</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置ansible-host文件\"><a href=\"#设置ansible-host文件\" class=\"headerlink\" title=\"设置ansible host文件\"></a>设置ansible host文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/ansible/hosts &lt;&lt;EOF</span><br><span class=\"line\">[cluster]</span><br><span class=\"line\">10.8.138.5  hostname=<span class=\"string\">'SCA-LUM700007'</span></span><br><span class=\"line\">10.8.138.6  hostname=<span class=\"string\">'SCA-LUM700008'</span></span><br><span class=\"line\">10.8.138.10 hostname=<span class=\"string\">'SCA-LUM700012'</span></span><br><span class=\"line\">10.8.138.9  hostname=<span class=\"string\">'SCA-LUM700013'</span></span><br><span class=\"line\">10.8.138.11 hostname=<span class=\"string\">'SCA-LUM700014'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ans]</span><br><span class=\"line\">10.8.138.8</span><br><span class=\"line\"></span><br><span class=\"line\">[master]</span><br><span class=\"line\">10.8.138.5</span><br><span class=\"line\">10.8.138.6</span><br><span class=\"line\">10.8.138.10</span><br><span class=\"line\"></span><br><span class=\"line\">[worker]</span><br><span class=\"line\">10.8.138.9</span><br><span class=\"line\">10.8.138.11</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"验证ansible\"><a href=\"#验证ansible\" class=\"headerlink\" title=\"验证ansible\"></a>验证ansible</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m ping</span><br></pre></td></tr></table></figure>\n\n<img src=\"ansible-check.png\" style=\"zoom:40%;\" />\n\n<br>\n\n<h2 id=\"设置host\"><a href=\"#设置host\" class=\"headerlink\" title=\"设置host\"></a>设置host</h2><p>通过<code>ansible</code>为每个节点设置host文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.5  SCA-LUM700007 sca-lum700007 master1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.6  SCA-LUM700008 sca-lum700008 master2</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.10 SCA-LUM700012 sca-lum700012 master3</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.9  SCA-LUM700013 sca-lum700013 node1</span></span><br><span class=\"line\"><span class=\"string\">10.8.138.11 SCA-LUM700014 sca-lum700014 node2</span></span><br><span class=\"line\"><span class=\"string\">EOF'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>需要给集群所有的节点安装docker：</p>\n<h3 id=\"添加docker-repo文件\"><a href=\"#添加docker-repo文件\" class=\"headerlink\" title=\"添加docker repo文件\"></a>添加docker repo文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置存储目录\"><a href=\"#设置存储目录\" class=\"headerlink\" title=\"设置存储目录\"></a>设置存储目录</h3><p>一般docker的数据存放路径为<code>/var/lib/docker</code>，所以在每个服务器上最好都有一个数据盘挂载到该目录下，防止docker数据过多爆盘。这里以一台服务器的设置为例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /var/lib/docker</span><br><span class=\"line\">$ mkfs.xfs -f /dev/vdb</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/dev/vdb /var/lib/docker xfs defaults 0 0\"</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a</span><br><span class=\"line\">$ df -h</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装docker-1\"><a href=\"#安装docker-1\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>这里使用的是18.06.3的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看当前可用的版本</span></span><br><span class=\"line\">$ yum list docker-ce --showduplicates|sort -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装docker</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'yum install -y docker-ce-18.06.3.ce-3.el7'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置docker配置文件\"><a href=\"#配置docker配置文件\" class=\"headerlink\" title=\"配置docker配置文件\"></a>配置docker配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"exec-opts\"</span>: [<span class=\"string\">\"native.cgroupdriver=systemd\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"log-driver\"</span>: <span class=\"string\">\"json-file\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"log-opts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"max-size\"</span>: <span class=\"string\">\"100m\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"max-file\"</span>: <span class=\"string\">\"5\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"storage-driver\"</span>: <span class=\"string\">\"overlay2\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发到集群节点</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'mkdir /etc/docker'</span></span><br><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=daemon.json dest=/etc/docker/daemon.json'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动docker服务\"><a href=\"#启动docker服务\" class=\"headerlink\" title=\"启动docker服务\"></a>启动docker服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl daemon-reload'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl restart docker'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl status docker'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'systemctl enable docker'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"关闭swap\"><a href=\"#关闭swap\" class=\"headerlink\" title=\"关闭swap\"></a>关闭swap</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'swapoff -a'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'sed -i \"/swap/s/^/#/g\" /etc/fstab'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"开启ipvs\"><a href=\"#开启ipvs\" class=\"headerlink\" title=\"开启ipvs\"></a>开启ipvs</h2><p>本集群的service网络采用ipvs模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置内核参数</span></span><br><span class=\"line\">$ ansible cluster -m sysctl -a <span class=\"string\">'name=net.ipv4.ip_forward value=1 state=present'</span></span><br><span class=\"line\">$ ansible cluster -m sysctl -a <span class=\"string\">'name=net.bridge.bridge-nf-call-iptables value=1 state=present'</span></span><br><span class=\"line\">$ ansible cluster -m sysctl -a <span class=\"string\">'name=net.bridge.bridge-nf-call-ip6tables value=1 state=present'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载ipvs模块</span></span><br><span class=\"line\">$ cat &gt; /tmp/ipvs.modules &lt;&lt;EOF</span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">ipvs_modules=<span class=\"string\">\"ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> kernel_module <span class=\"keyword\">in</span> \\<span class=\"variable\">$&#123;ipvs_modules&#125;</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    /sbin/modinfo -F filename \\<span class=\"variable\">$&#123;kernel_module&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -eq 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        /sbin/modprobe \\<span class=\"variable\">$&#123;kernel_module&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=/tmp/ipvs.modules dest=/root/ipvs.modules mode=0755'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'sh /root/ipvs.modules'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动执行该脚本</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'echo \"sh /root/ipvs.modules\" &gt;&gt; /etc/rc.local'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证 ipvs 支持</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'lsmod | grep ip_vs'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装ipvsadm</span></span><br><span class=\"line\">$ ansible cluster -m yum -a <span class=\"string\">'name=ipvsadm state=present'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"添加阿里云k8s-yum源\"><a href=\"#添加阿里云k8s-yum源\" class=\"headerlink\" title=\"添加阿里云k8s yum源\"></a>添加阿里云k8s yum源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分发文件</span></span><br><span class=\"line\">$ ansible cluster -m copy -a <span class=\"string\">'src=/etc/yum.repos.d/kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"安装kubernetes基础工具\"><a href=\"#安装kubernetes基础工具\" class=\"headerlink\" title=\"安装kubernetes基础工具\"></a>安装kubernetes基础工具</h2><p>这里安装的是<code>1.17.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装kubectl、kubeadm、kubelet</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">'yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">'ls /usr/bin/kube*'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置kubelet自启动</span></span><br><span class=\"line\">ansible cluster -m shell -a <span class=\"string\">'systemctl enable kubelet'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"创建master\"><a href=\"#创建master\" class=\"headerlink\" title=\"创建master\"></a>创建master</h2><p>这一步在任意一个master上执行，这里我在<code>master1</code>上执行。需要配置下kubeadm的相关参数。</p>\n<h3 id=\"配置kubeadm参数\"><a href=\"#配置kubeadm参数\" class=\"headerlink\" title=\"配置kubeadm参数\"></a>配置kubeadm参数</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> cat &gt; kubeadm-config.yaml &lt;&lt; EOF</span></span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">localAPIEndpoint:</span><br><span class=\"line\">  advertiseAddress: 0.0.0.0</span><br><span class=\"line\">  bindPort: 6443</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  criSocket: /var/run/dockershim.sock</span><br><span class=\"line\">  taints:</span><br><span class=\"line\">  - effect: NoSchedule</span><br><span class=\"line\">    key: node-role.kubernetes.io/master</span><br><span class=\"line\">  kubeletExtraArgs:</span><br><span class=\"line\">    cgroup-driver: \"systemd\"</span><br><span class=\"line\">  ignorePreflightErrors:</span><br><span class=\"line\">  - IsPrivilegedUser</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">controlPlaneEndpoint: 10.8.138.12:6443</span><br><span class=\"line\">certificatesDir: /etc/kubernetes/pki</span><br><span class=\"line\">clusterName: kubernetes</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  timeoutForControlPlane: 5m0s</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    authorization-mode: \"Node,RBAC\"</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - \"10.8.138.12\"</span><br><span class=\"line\">  - \"14.116.177.22\"</span><br><span class=\"line\">  - \"kubernetes\"</span><br><span class=\"line\">  - \"kubernetes.default\"</span><br><span class=\"line\">  - \"kubernetes.default.svc\"</span><br><span class=\"line\">  - \"kubernetes.default.svc.cluster\"</span><br><span class=\"line\">  - \"kubernetes.default.svc.cluster.local\"</span><br><span class=\"line\">controllerManager:</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    \"node-cidr-mask-size\": \"20\"</span><br><span class=\"line\">scheduler:</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    address: \"0.0.0.0\"</span><br><span class=\"line\">dns:</span><br><span class=\"line\">  type: CoreDNS</span><br><span class=\"line\">etcd:</span><br><span class=\"line\">  local:</span><br><span class=\"line\">    dataDir: /var/lib/etcd</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    extraArgs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">      listen-client-urls: <span class=\"string\">\"http://10.100.0.1:2379\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"localhost\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"127.0.0.1\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"localhost\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">    - <span class=\"string\">\"127.0.0.1\"</span></span></span><br><span class=\"line\">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class=\"line\">kubernetesVersion: v1.17.3</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  dnsDomain: cluster.local</span><br><span class=\"line\">  serviceSubnet: 172.24.0.0/16</span><br><span class=\"line\">  podSubnet: 172.21.0.0/16</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class=\"line\">kind: KubeProxyConfiguration</span><br><span class=\"line\">bindAddress: 0.0.0.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">clusterCIDR:</span></span><br><span class=\"line\">mode: ipvs  # 定义代理模式： userspace、 iptables 或 ipvs 。默认使用 iptables ，大集群建议使用 ipvs。</span><br><span class=\"line\">ipvs:</span><br><span class=\"line\">  scheduler: lc</span><br><span class=\"line\">  syncPeriod: 30s</span><br><span class=\"line\">  minSyncPeriod: 5s</span><br><span class=\"line\">  tcpTimeout: 0s</span><br><span class=\"line\">  tcpFinTimeout: 0s</span><br><span class=\"line\">  udpTimeout: 0s</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class=\"line\">kind: KubeletConfiguration</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中<code>10.8.138.12</code>为我前端slb的IP地址，代理后端三个master节点的6443；</li>\n<li>根据实际情况在<code>certSANs</code>中添加IP和域名；</li>\n<li>注意修改其中的kubernetes的版本，以及ipvs模式的调度算法（这里我使用的是lc）</li>\n</ul>\n<h3 id=\"验证配置\"><a href=\"#验证配置\" class=\"headerlink\" title=\"验证配置\"></a>验证配置</h3><p>下面的命令可以验证配置是否有误，并不会真正执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm init --config&#x3D;kubeadm-config.yaml --upload-certs --dry-run</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建集群\"><a href=\"#创建集群\" class=\"headerlink\" title=\"创建集群\"></a>创建集群</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建集群</span><br><span class=\"line\">$ kubeadm init --config&#x3D;kubeadm-config.yaml --upload-certs</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行成功的话，会出现下面的信息：</p>\n<p><img src=\"kubeadm-init.png\" alt=\"\"></p>\n<p>从上边可以看出，添加master节点和node节点就可以在对应服务器上执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加master</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span></span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加node节点</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span></span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令中的token有两个小时时效，时效后需要重新获取</p>\n</blockquote>\n<h3 id=\"添加其他master\"><a href=\"#添加其他master\" class=\"headerlink\" title=\"添加其他master\"></a>添加其他master</h3><p>在剩下的两个master节点<code>SCA-LUM700008</code>和<code>SCA-LUM700012</code>执行下面的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span></span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e \\</span><br><span class=\"line\">    --control-plane --certificate-key d708ea62b465ecfd667fa807eb6a0cc7babbb4969a3bb9256f13543a2ddfe20c</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>不需要拷贝kubeadm-config.yaml文件，会通过第一个apiserver回去配置信息；</p>\n</blockquote>\n<br>\n\n<h2 id=\"设置kubectl\"><a href=\"#设置kubectl\" class=\"headerlink\" title=\"设置kubectl\"></a>设置kubectl</h2><h3 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'echo \"source &lt;(kubectl completion bash)\" &gt;&gt; ~/.bashrc'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置kubectl证书\"><a href=\"#设置kubectl证书\" class=\"headerlink\" title=\"设置kubectl证书\"></a>设置kubectl证书</h3><p>现在执行kubectl命令需要<code>--kubeconfig</code>参数指定配置文件，执行下面的命令设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp /etc/kubernetes/admin.conf /root/.kube/config</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"验证master部署情况\"><a href=\"#验证master部署情况\" class=\"headerlink\" title=\"验证master部署情况\"></a>验证master部署情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看master</span></span><br><span class=\"line\">$ kubectl get node --kubeconfig /etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看pod</span></span><br><span class=\"line\">$ kubectl get pod --all-namespaces --kubeconfig /etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"check-master.png\" alt=\"\"></p>\n<blockquote>\n<p>这里有些pod没有启动是正常的，因为集群还没部署完成。</p>\n</blockquote>\n<h2 id=\"确认kube-proxy开启了ipvs\"><a href=\"#确认kube-proxy开启了ipvs\" class=\"headerlink\" title=\"确认kube-proxy开启了ipvs\"></a>确认kube-proxy开启了ipvs</h2><p>首先查看网卡信息，多了一个kube-ipvs0网卡：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip a s</span><br></pre></td></tr></table></figure>\n\n<img src=\"ipvs.png\" style=\"zoom:50%;\" />\n\n\n\n\n\n<p>查看ipvs规则：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipvsadm -Ln</span><br></pre></td></tr></table></figure>\n\n<img src=\"ipvs-rule.png\" style=\"zoom:40%;\" />\n\n<br>\n\n\n\n<h2 id=\"etcd配置\"><a href=\"#etcd配置\" class=\"headerlink\" title=\"etcd配置\"></a>etcd配置</h2><h3 id=\"更新etcd配置\"><a href=\"#更新etcd配置\" class=\"headerlink\" title=\"更新etcd配置\"></a>更新etcd配置</h3><p>更新后会自动重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'sed -i \"/--initial-cluster=/c\\    - --initial-cluster=sca-lum700012=https://10.8.138.10:2380,sca-lum700007=https://10.8.138.5:2380,sca-lum700008=https://10.8.138.6:2380\" /etc/kubernetes/manifests/etcd.yaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apiserver 默认访问本地的 etcd 节点，如果需要访问集群所有节点可以修改配置。</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'sed -i \"/- --etcd-servers/c\\    - --etcd-servers=https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379\" /etc/kubernetes/manifests/kube-apiserver.yaml'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看etcd节点状态\"><a href=\"#查看etcd节点状态\" class=\"headerlink\" title=\"查看etcd节点状态\"></a>查看etcd节点状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载etcdctl</span></span><br><span class=\"line\">$ curl -L -O https://github.com/etcd-io/etcd/releases/download/v3.4.3/etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">$ tar xzf etcd-v3.4.3-linux-amd64.tar.gz</span><br><span class=\"line\">$ mv etcd-v3.4.3-linux-amd64/etcd* /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">$ ETCDCTL=3 etcdctl --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   member list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"etcd-member.png\" alt=\"\"></p>\n<h3 id=\"查看集群状态\"><a href=\"#查看集群状态\" class=\"headerlink\" title=\"查看集群状态\"></a>查看集群状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint status</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"etcd-cluster.png\" alt=\"\"></p>\n<h3 id=\"etcd节点健康状态\"><a href=\"#etcd节点健康状态\" class=\"headerlink\" title=\"etcd节点健康状态\"></a>etcd节点健康状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ETCDCTL=3 etcdctl --cluster --write-out=table   --cert /etc/kubernetes/pki/etcd/peer.crt   --key /etc/kubernetes/pki/etcd/peer.key   --cacert /etc/kubernetes/pki/etcd/ca.crt   --endpoints https://10.8.138.10:2379,https://10.8.138.5:2379,https://10.8.138.6:2379   endpoint health</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"etcd-helth.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"创建node\"><a href=\"#创建node\" class=\"headerlink\" title=\"创建node\"></a>创建node</h2><p>在所有node节点上执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm join 10.8.138.12:6443 --token z9ibq2.s5ttzyxvc49mep02 \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:71a025d1a18f9ec0f4c16ab771b2d01674ce9921316c87e0bdfd162d53f8524e</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src=\"getnode.png\" style=\"zoom:67%;\" />\n\n\n\n<p><em>节点已经添加进来了，因为没有部署CNI所以都是NOTREADY。</em></p>\n<br>\n\n\n\n<h2 id=\"部署calico\"><a href=\"#部署calico\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h2><h3 id=\"下载calico\"><a href=\"#下载calico\" class=\"headerlink\" title=\"下载calico\"></a>下载calico</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载calico的yaml文件</span></span><br><span class=\"line\">$ curl -L https://docs.projectcalico.org/v3.11/manifests/calico.yaml -o calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署calico-1\"><a href=\"#部署calico-1\" class=\"headerlink\" title=\"部署calico\"></a>部署calico</h3><p>修改calico.yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改为pod网段</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">CALICO_IPV4POOL_CIDR</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">\"172.21.0.0/16\"</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 增加该参数，设定端口范围</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">FELIX_KUBENODEPORTRANGES</span></span><br><span class=\"line\">  <span class=\"attr\">value:</span> <span class=\"string\">\"30000:50000\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署calico：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>部署完成后，查看节点状态，应该都READY：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src=\"nodes.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"设置calico命令行工具\"><a href=\"#设置calico命令行工具\" class=\"headerlink\" title=\"设置calico命令行工具\"></a>设置calico命令行工具</h3><p>下载calico命令行工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">$ curl -L -o /usr/<span class=\"built_in\">local</span>/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v3.11.2/calicoctl-linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置</span></span><br><span class=\"line\">$ mkdir -p /etc/calico</span><br><span class=\"line\">$ cat &gt; /etc/calico/calicoctl.cfg &lt;&lt;EOF</span><br><span class=\"line\">apiVersion: projectcalico.org/v3</span><br><span class=\"line\">kind: CalicoAPIConfig</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  datastoreType: kubernetes</span><br><span class=\"line\">  kubeconfig: /etc/kubernetes/admin.conf  <span class=\"comment\"># 使用 admin 配置</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sAPIEndpoint: https://10.8.138.12:6443</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sCertFile: /etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sKeyFile: /etc/kubernetes/pki/apiserver-kubelet-client.key</span></span><br><span class=\"line\">  <span class=\"comment\">#k8sCAFile: /etc/kubernetes/pki/ca.crt</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看calico节点\"><a href=\"#查看calico节点\" class=\"headerlink\" title=\"查看calico节点\"></a>查看calico节点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ calicoctl node status</span><br></pre></td></tr></table></figure>\n\n<img src=\"calico-node.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"查看ippool\"><a href=\"#查看ippool\" class=\"headerlink\" title=\"查看ippool\"></a>查看ippool</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ calicoctl get ippool -o wide</span><br><span class=\"line\">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   SELECTOR</span><br><span class=\"line\">default-ipv4-ippool   172.21.0.0/16   <span class=\"literal\">true</span>   Always     Never       <span class=\"literal\">false</span>      all()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看ip状态\"><a href=\"#查看ip状态\" class=\"headerlink\" title=\"查看ip状态\"></a>查看ip状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ calicoctl ipam show</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"calico-ip.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"集群校验\"><a href=\"#集群校验\" class=\"headerlink\" title=\"集群校验\"></a>集群校验</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl config get-clusters</span><br><span class=\"line\">kubectl cluster-info</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"cluster-check.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"nginx服务其配置\"><a href=\"#nginx服务其配置\" class=\"headerlink\" title=\"nginx服务其配置\"></a>nginx服务其配置</h2><p><code>SCA-LUM700011</code>作为nginx服务器，将会代理ingress服务，所以先设置一下。</p>\n<h3 id=\"自签证书\"><a href=\"#自签证书\" class=\"headerlink\" title=\"自签证书\"></a>自签证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确认安装了openssl</span></span><br><span class=\"line\">openssl version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确定nginx安装了https模块(应该有--with-http_ssl_module)</span></span><br><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建整数目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/</span><br><span class=\"line\">mkdir ssl</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ssl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成秘钥</span></span><br><span class=\"line\">$ openssl genrsa -out nginx.key 2048</span><br><span class=\"line\">Generating RSA private key, 2048 bit long modulus</span><br><span class=\"line\">..............................................+++</span><br><span class=\"line\">.....................................................................+++</span><br><span class=\"line\">e is 65537 (0x10001)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成签名请求文件（csr），输入上边的密码，并输入相关的信息</span></span><br><span class=\"line\">openssl req -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以在一行，不用交互式输入</span></span><br><span class=\"line\">openssl req -subj <span class=\"string\">\"/C=CN/ST=Guangdong/L=Shenzhen/O=nginx/OU=dev/CN=test.example.com/emailAddress=test@123.com\"</span> -new -key nginx.key -out nginx.csr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成自签名证书，指定过期时间3650天，输入密码即可生成</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -<span class=\"keyword\">in</span> nginx.csr -signkey nginx.key -out nginx.crt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看生成的文件</span></span><br><span class=\"line\">$ ls</span><br><span class=\"line\">nginx.crt  nginx.csr  nginx.key</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改nginx主配置文件\"><a href=\"#修改nginx主配置文件\" class=\"headerlink\" title=\"修改nginx主配置文件\"></a>修改nginx主配置文件</h3><p>修改<code>/etc/nginx/nginx.conf</code>文件为如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span>  nginx;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"literal\">warn</span>;</span><br><span class=\"line\"><span class=\"attribute\">pid</span>        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       /etc/nginx/mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">log_format</span>  main  <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] \"<span class=\"variable\">$request</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> \"<span class=\"variable\">$http_referer</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"<span class=\"variable\">$http_user_agent</span>\" \"<span class=\"variable\">$http_x_forwarded_for</span>\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> /etc/nginx/conf.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里使用<code>include</code>导入其他的配置文件，所有服务的nginx配置都放在<code>/etc/nginx/conf.d</code>下，如果目录不存在需要自己创建。</p>\n<p>在``/etc/nginx/conf.d<code>下先创建一个通用配置文件</code>common.ini`，这个是所有配置文件都要用的，所以抽离出来：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">    <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建一个测试配置\"><a href=\"#创建一个测试配置\" class=\"headerlink\" title=\"创建一个测试配置\"></a>创建一个测试配置</h3><p>在<code>/etc/nginx/conf.d</code>下新建一个配置文件<code>https.conf</code>：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> https-server.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/new/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/new/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/https-server.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/https-server.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在<code>/usr/share/nginx/html</code>下创建测试页面：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"this is https page\"</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绑定host\"><a href=\"#绑定host\" class=\"headerlink\" title=\"绑定host\"></a>绑定host</h3><p>因为我是测试环境，且我要通过域名的方式访问服务，所以需要绑定host，这一步在自己的电脑上操作，过程不赘述。</p>\n<h3 id=\"重启nginx并访问\"><a href=\"#重启nginx并访问\" class=\"headerlink\" title=\"重启nginx并访问\"></a>重启nginx并访问</h3><p>执行下面的命令检查配置并重新加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后通过浏览器访问域名：<code>https-server.example.com</code>，应该就可以看到设置的https页面了。</p>\n<blockquote>\n<p>注意，有的浏览器对于自签证书是不信任的，需要手动下载证书然后在电脑中导入就可以了。</p>\n</blockquote>\n"},{"title":"[k8s实践系列]升级集群到1.18","date":"2020-07-03T12:40:43.000Z","description":"通过kubeadm升级集群到1.18版本","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593790386156&di=943b925fcd65f439c473b846f9c0d9d5&imgtype=0&src=http%3A%2F%2Fgit.oschina.net%2Fkkomge%2Fkubeadm-ha%2Fraw%2Fe2b531dd2d3ca8202ca33da7063444ac750cc9f4%2Fimages%2FKubernetes.png","_content":"\n\n\n## 检查 kubeadm 可用版本\n\n```bash\n$ yum list kubeadm --showduplicates\n```\n\n<img src=\"newversion.png\" style=\"zoom:50%;\" />\n\n\n\n这里我们当前的版本为1.17，下面升级到1.18.0。\n\n<br>\n\n\n\n## 升级 kubeadm\n\n建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。\n\n```bash\n$ yum install -y kubeadm-1.18.0-0\n$ kubeadm version\n```\n\n![](update-kubeadm.png)\n\n<br>\n\n\n\n## 隔离 master1\n\n先将master1隔离，使用`drain`命令可以优雅地结束节点的pod并将节点设置为不可调度：\n\n```bash\n$ kubectl drain sca-lum700007 --ignore-daemonsets\n```\n\n<img src=\"drain.png\" style=\"zoom:50%;\" />\n\n> 看到第一个master已经处于不可调度的状态了。\n\n<br>\n\n\n\n## 升级 kubernetes\n\n```bash\n$ kubeadm upgrade apply v1.18.0\n```\n\n当出现下面的输出内容时，表示命令执行成功了。\n\n![](update.png)\n\n<br>\n\n\n\n## 取消隔离master1\n\n```bash\n$ kubectl uncordon sca-lum700007\n```\n\n<br>\n\n\n\n## 升级 kubectl 和 kubelet\n\n```bash\n$ yum install -y kubelet-1.18.0-0 kubectl-1.18.0-0\n```\n\n<br>\n\n\n\n## 重启kubelet\n\n```bash\n$ systemctl daemon-reload\n$ systemctl restart kubelet\n```\n\n<br>\n\n\n\n## 确认节点升级成功\n\n```bash\n$ kubectl get node\n```\n\n<img src=\"carbon.png\" style=\"zoom:50%;\" />\n\n\n\n**可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级**\n\n<br>\n\n\n\n## 升级node节点\n\nnode节点的升级最好也是一个一个来，首先将node节点驱逐：\n\n```bash\n$ kubectl drain sca-lum700013 --ignore-daemonsets\n```\n\n\n\n然后在节点上执行下面的命令，升级kubernetes：\n\n```bash\n$ kubeadm upgrade node\n```\n\n![](update-node.png)\n\n\n\n在master上取消禁止调度：\n\n```bash\n$ kubectl uncordon sca-lum00013\n```\n\n\n\n升级worker节点上的kubelet：\n\n```bash\n$ yum install -y kubelet-1.18.0-0\n$ systemctl daemon-reload\n$ systemctl restart kubelet\n```\n\n\n\n<br>\n\n## 注意事项\n\n\n\n需要注意的是：\n\n- 跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；\n- 升级的时候先从master开始，再升级worker；\n- 升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；\n\n\n\n最后，所有的节点都升级完毕：\n\n<img src=\"update-res.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/k8s实践系列-升级集群到1-18.md","raw":"---\ntitle: '[k8s实践系列]升级集群到1.18'\ndate: 2020-07-03 20:40:43\ntags:\n- k8s\n- k8s集群升级\ncategories: 实践K8s\ndescription: 通过kubeadm升级集群到1.18版本 \ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593790386156&di=943b925fcd65f439c473b846f9c0d9d5&imgtype=0&src=http%3A%2F%2Fgit.oschina.net%2Fkkomge%2Fkubeadm-ha%2Fraw%2Fe2b531dd2d3ca8202ca33da7063444ac750cc9f4%2Fimages%2FKubernetes.png\n---\n\n\n\n## 检查 kubeadm 可用版本\n\n```bash\n$ yum list kubeadm --showduplicates\n```\n\n<img src=\"newversion.png\" style=\"zoom:50%;\" />\n\n\n\n这里我们当前的版本为1.17，下面升级到1.18.0。\n\n<br>\n\n\n\n## 升级 kubeadm\n\n建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。\n\n```bash\n$ yum install -y kubeadm-1.18.0-0\n$ kubeadm version\n```\n\n![](update-kubeadm.png)\n\n<br>\n\n\n\n## 隔离 master1\n\n先将master1隔离，使用`drain`命令可以优雅地结束节点的pod并将节点设置为不可调度：\n\n```bash\n$ kubectl drain sca-lum700007 --ignore-daemonsets\n```\n\n<img src=\"drain.png\" style=\"zoom:50%;\" />\n\n> 看到第一个master已经处于不可调度的状态了。\n\n<br>\n\n\n\n## 升级 kubernetes\n\n```bash\n$ kubeadm upgrade apply v1.18.0\n```\n\n当出现下面的输出内容时，表示命令执行成功了。\n\n![](update.png)\n\n<br>\n\n\n\n## 取消隔离master1\n\n```bash\n$ kubectl uncordon sca-lum700007\n```\n\n<br>\n\n\n\n## 升级 kubectl 和 kubelet\n\n```bash\n$ yum install -y kubelet-1.18.0-0 kubectl-1.18.0-0\n```\n\n<br>\n\n\n\n## 重启kubelet\n\n```bash\n$ systemctl daemon-reload\n$ systemctl restart kubelet\n```\n\n<br>\n\n\n\n## 确认节点升级成功\n\n```bash\n$ kubectl get node\n```\n\n<img src=\"carbon.png\" style=\"zoom:50%;\" />\n\n\n\n**可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级**\n\n<br>\n\n\n\n## 升级node节点\n\nnode节点的升级最好也是一个一个来，首先将node节点驱逐：\n\n```bash\n$ kubectl drain sca-lum700013 --ignore-daemonsets\n```\n\n\n\n然后在节点上执行下面的命令，升级kubernetes：\n\n```bash\n$ kubeadm upgrade node\n```\n\n![](update-node.png)\n\n\n\n在master上取消禁止调度：\n\n```bash\n$ kubectl uncordon sca-lum00013\n```\n\n\n\n升级worker节点上的kubelet：\n\n```bash\n$ yum install -y kubelet-1.18.0-0\n$ systemctl daemon-reload\n$ systemctl restart kubelet\n```\n\n\n\n<br>\n\n## 注意事项\n\n\n\n需要注意的是：\n\n- 跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；\n- 升级的时候先从master开始，再升级worker；\n- 升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；\n\n\n\n最后，所有的节点都升级完毕：\n\n<img src=\"update-res.png\" style=\"zoom:50%;\" />\n\n","slug":"k8s实践系列-升级集群到1-18","published":1,"updated":"2020-07-03T12:56:49.467Z","_id":"ckc67w4460000t9n0euijbcdf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"检查-kubeadm-可用版本\"><a href=\"#检查-kubeadm-可用版本\" class=\"headerlink\" title=\"检查 kubeadm 可用版本\"></a>检查 kubeadm 可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list kubeadm --showduplicates</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"newversion.png\" style=\"zoom:50%;\" />\n\n\n\n<p>这里我们当前的版本为1.17，下面升级到1.18.0。</p>\n<br>\n\n\n\n<h2 id=\"升级-kubeadm\"><a href=\"#升级-kubeadm\" class=\"headerlink\" title=\"升级 kubeadm\"></a>升级 kubeadm</h2><p>建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y kubeadm-1.18.0-0</span><br><span class=\"line\">$ kubeadm version</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"update-kubeadm.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"隔离-master1\"><a href=\"#隔离-master1\" class=\"headerlink\" title=\"隔离 master1\"></a>隔离 master1</h2><p>先将master1隔离，使用<code>drain</code>命令可以优雅地结束节点的pod并将节点设置为不可调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl drain sca-lum700007 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"drain.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>看到第一个master已经处于不可调度的状态了。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"升级-kubernetes\"><a href=\"#升级-kubernetes\" class=\"headerlink\" title=\"升级 kubernetes\"></a>升级 kubernetes</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm upgrade apply v1.18.0</span><br></pre></td></tr></table></figure>\n\n<p>当出现下面的输出内容时，表示命令执行成功了。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"update.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"取消隔离master1\"><a href=\"#取消隔离master1\" class=\"headerlink\" title=\"取消隔离master1\"></a>取消隔离master1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl uncordon sca-lum700007</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"升级-kubectl-和-kubelet\"><a href=\"#升级-kubectl-和-kubelet\" class=\"headerlink\" title=\"升级 kubectl 和 kubelet\"></a>升级 kubectl 和 kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y kubelet-1.18.0-0 kubectl-1.18.0-0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"重启kubelet\"><a href=\"#重启kubelet\" class=\"headerlink\" title=\"重启kubelet\"></a>重启kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"确认节点升级成功\"><a href=\"#确认节点升级成功\" class=\"headerlink\" title=\"确认节点升级成功\"></a>确认节点升级成功</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"carbon.png\" style=\"zoom:50%;\" />\n\n\n\n<p><strong>可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级</strong></p>\n<br>\n\n\n\n<h2 id=\"升级node节点\"><a href=\"#升级node节点\" class=\"headerlink\" title=\"升级node节点\"></a>升级node节点</h2><p>node节点的升级最好也是一个一个来，首先将node节点驱逐：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl drain sca-lum700013 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在节点上执行下面的命令，升级kubernetes：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm upgrade node</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"update-node.png\" alt=\"\"></p>\n<p>在master上取消禁止调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl uncordon sca-lum00013</span><br></pre></td></tr></table></figure>\n\n\n\n<p>升级worker节点上的kubelet：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y kubelet-1.18.0-0</span><br><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>需要注意的是：</p>\n<ul>\n<li>跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；</li>\n<li>升级的时候先从master开始，再升级worker；</li>\n<li>升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；</li>\n</ul>\n<p>最后，所有的节点都升级完毕：</p>\n<img src= \"/img/loading.gif\" data-src=\"update-res.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"检查-kubeadm-可用版本\"><a href=\"#检查-kubeadm-可用版本\" class=\"headerlink\" title=\"检查 kubeadm 可用版本\"></a>检查 kubeadm 可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list kubeadm --showduplicates</span><br></pre></td></tr></table></figure>\n\n<img src=\"newversion.png\" style=\"zoom:50%;\" />\n\n\n\n<p>这里我们当前的版本为1.17，下面升级到1.18.0。</p>\n<br>\n\n\n\n<h2 id=\"升级-kubeadm\"><a href=\"#升级-kubeadm\" class=\"headerlink\" title=\"升级 kubeadm\"></a>升级 kubeadm</h2><p>建议一台一台升级，批量操作存在无法预估的错误。这里先升级第一台master的kubeadm。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y kubeadm-1.18.0-0</span><br><span class=\"line\">$ kubeadm version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"update-kubeadm.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"隔离-master1\"><a href=\"#隔离-master1\" class=\"headerlink\" title=\"隔离 master1\"></a>隔离 master1</h2><p>先将master1隔离，使用<code>drain</code>命令可以优雅地结束节点的pod并将节点设置为不可调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl drain sca-lum700007 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n<img src=\"drain.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>看到第一个master已经处于不可调度的状态了。</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"升级-kubernetes\"><a href=\"#升级-kubernetes\" class=\"headerlink\" title=\"升级 kubernetes\"></a>升级 kubernetes</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm upgrade apply v1.18.0</span><br></pre></td></tr></table></figure>\n\n<p>当出现下面的输出内容时，表示命令执行成功了。</p>\n<p><img src=\"update.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"取消隔离master1\"><a href=\"#取消隔离master1\" class=\"headerlink\" title=\"取消隔离master1\"></a>取消隔离master1</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl uncordon sca-lum700007</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"升级-kubectl-和-kubelet\"><a href=\"#升级-kubectl-和-kubelet\" class=\"headerlink\" title=\"升级 kubectl 和 kubelet\"></a>升级 kubectl 和 kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y kubelet-1.18.0-0 kubectl-1.18.0-0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"重启kubelet\"><a href=\"#重启kubelet\" class=\"headerlink\" title=\"重启kubelet\"></a>重启kubelet</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"确认节点升级成功\"><a href=\"#确认节点升级成功\" class=\"headerlink\" title=\"确认节点升级成功\"></a>确认节点升级成功</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get node</span><br></pre></td></tr></table></figure>\n\n<img src=\"carbon.png\" style=\"zoom:50%;\" />\n\n\n\n<p><strong>可以看到第一个节点已经升级成为1.18.0版本的了。后续几个master节点也是按照上边的步骤升级</strong></p>\n<br>\n\n\n\n<h2 id=\"升级node节点\"><a href=\"#升级node节点\" class=\"headerlink\" title=\"升级node节点\"></a>升级node节点</h2><p>node节点的升级最好也是一个一个来，首先将node节点驱逐：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl drain sca-lum700013 --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在节点上执行下面的命令，升级kubernetes：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm upgrade node</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"update-node.png\" alt=\"\"></p>\n<p>在master上取消禁止调度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl uncordon sca-lum00013</span><br></pre></td></tr></table></figure>\n\n\n\n<p>升级worker节点上的kubelet：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y kubelet-1.18.0-0</span><br><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>需要注意的是：</p>\n<ul>\n<li>跨多个版本升级需要注意，最好不要一次升上去，防止出现问题；</li>\n<li>升级的时候先从master开始，再升级worker；</li>\n<li>升级的时候一个一个节点的进行，要先驱逐节点的pod并设置为不可调度；</li>\n</ul>\n<p>最后，所有的节点都升级完毕：</p>\n<img src=\"update-res.png\" style=\"zoom:50%;\" />\n\n"},{"title":"[k8s实践系列]卸载集群","date":"2020-07-05T02:11:40.000Z","description":"使用kubeadm卸载集群","cover":"http://www.soft6.com/uploadfile/2017/1009/20171009035234769.jpg","_content":"\n\n\n## 先隔离再删除节点\n\n```bash\n$ kubectl drain SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014 --delete-local-data --force --ignore-daemonsets\n\n$ kubectl delete node SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014\n```\n\n<br>\n\n\n\n## 重置节点状态\n\n```bash\n$ ansible ins -m shell -a 'kubeadm reset --force'\n\n$ ansible ins -m shell -a 'rm -rf /etc/cni /opt/cni/ /var/lib/calico/ ~/.kube/'\n```\n\n","source":"_posts/k8s实践系列-卸载集群.md","raw":"---\ntitle: '[k8s实践系列]卸载集群'\ndate: 2020-07-05 10:11:40\ntags:\n- k8s\ncategories: 实践K8s\ndescription: 使用kubeadm卸载集群\ncover: http://www.soft6.com/uploadfile/2017/1009/20171009035234769.jpg\n---\n\n\n\n## 先隔离再删除节点\n\n```bash\n$ kubectl drain SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014 --delete-local-data --force --ignore-daemonsets\n\n$ kubectl delete node SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014\n```\n\n<br>\n\n\n\n## 重置节点状态\n\n```bash\n$ ansible ins -m shell -a 'kubeadm reset --force'\n\n$ ansible ins -m shell -a 'rm -rf /etc/cni /opt/cni/ /var/lib/calico/ ~/.kube/'\n```\n\n","slug":"k8s实践系列-卸载集群","published":1,"updated":"2020-07-05T02:22:33.908Z","_id":"ckc8g4d0r0000xejecwgydl8t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"先隔离再删除节点\"><a href=\"#先隔离再删除节点\" class=\"headerlink\" title=\"先隔离再删除节点\"></a>先隔离再删除节点</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl drain SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014 --delete-local-data --force --ignore-daemonsets</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl delete node SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"重置节点状态\"><a href=\"#重置节点状态\" class=\"headerlink\" title=\"重置节点状态\"></a>重置节点状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible ins -m shell -a <span class=\"string\">'kubeadm reset --force'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ ansible ins -m shell -a <span class=\"string\">'rm -rf /etc/cni /opt/cni/ /var/lib/calico/ ~/.kube/'</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先隔离再删除节点\"><a href=\"#先隔离再删除节点\" class=\"headerlink\" title=\"先隔离再删除节点\"></a>先隔离再删除节点</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl drain SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014 --delete-local-data --force --ignore-daemonsets</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl delete node SCA-LUM700007\tSCA-LUM700008 SCA-LUM700012 SCA-LUM700013 SCA-LUM700014</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"重置节点状态\"><a href=\"#重置节点状态\" class=\"headerlink\" title=\"重置节点状态\"></a>重置节点状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible ins -m shell -a <span class=\"string\">'kubeadm reset --force'</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ ansible ins -m shell -a <span class=\"string\">'rm -rf /etc/cni /opt/cni/ /var/lib/calico/ ~/.kube/'</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"[k8s实践系列]证书管理","date":"2020-07-05T02:26:34.000Z","description":"使用kubeadm管理k8s证书状态","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg","_content":"\n\n\n## 查看证书状态\n\n```bash\n$ kubeadm alpha certs check-expiration\n[check-expiration] Reading configuration from the cluster...\n[check-expiration] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\nCERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED\nadmin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no\napiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no\napiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\napiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no\ncontroller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no\netcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\nfront-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no\nscheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no\n\nCERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED\nca                      Apr 14, 2030 11:18 UTC   9y              no\netcd-ca                 Apr 14, 2030 11:18 UTC   9y              no\nfront-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no\n```\n\n<br>\n\n## 更新所有证书\n\n```bash\n$ kubeadm alpha certs renew all\n[renew] Reading configuration from the cluster...\n[renew] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\ncertificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed\ncertificate for serving the Kubernetes API renewed\ncertificate the apiserver uses to access etcd renewed\ncertificate for the API server to connect to kubelet renewed\ncertificate embedded in the kubeconfig file for the controller manager to use renewed\ncertificate for liveness probes to healthcheck etcd renewed\ncertificate for etcd nodes to communicate with each other renewed\ncertificate for serving etcd renewed\ncertificate for the front proxy client renewed\ncertificate embedded in the kubeconfig file for the scheduler manager to use renewed\n```\n\n<br>\n\n\n\n## 更改证书签名\n\n\n\n### 创建新的证书配置文件\n\n```bash\n# 创建更新配置\n$ cat > ca-sign.yaml <<EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\napiServer:\n  certSANs:\n  - \"10.10.34.89\"\n  - \"113.108.71.77\"\n  #- \"kubernetes\"\n  #- \"kubernetes.default\"\n  #- \"kubernetes.default.svc\"\n  #- \"kubernetes.default.svc.cluster\"\n  #- \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt\n    cluster-signing-key-file: /etc/kubernetes/pki/ca.key\n#etcd:\n#  local:\n#    dataDir: /var/lib/etcd\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nEOF\n```\n\n\n\n### 更新并生效配置\n\n```bash\n# 更新 kubernetes 配置\n$ kubeadm config upload from-file --config=ca-sign.yaml\n\n# 确认更新配置生效\n$ kubeadm config view\napiServer:\n  certSANs:\n  - 10.10.34.89\n  - 113.108.71.77\n...\n```\n\n\n\n### 重新生成apiserver证书\n\n```bash\n# 删除原 apiserver 证书\n$ rm -rf /etc/kubernetes/pki/apiserver.*\n\n# 重新生成 apiserver 证书\n$ kubeadm init phase certs apiserver --config=ca-sign.yaml\n[certs] Generating \"apiserver\" certificate and key\n[certs] apiserver serving cert is signed for DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]\n\n# 确认 apiserver 证书更新情况\n$ openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt\n...\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication\n            X509v3 Subject Alternative Name:\n                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77\n...\n```\n\n\n\n### 重新生成所有证书\n\n```bash\n# 重新生成所有证书\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/ && rm -rf apiserver* front* sa*'\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/etcd/ && rm -rf healthcheck-client* peer* server*'\n$ ansible master -m copy -a 'src=ca-sign.yaml dest=ca-sign.yaml'\n$ ansible master -m shell -a 'kubeadm init phase certs all --config=ca-sign.yaml'\n\n# 验证证书\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS'\n```\n\n\n\n### 更新证书\n\n```bash\n# 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。\n$ docker ps | awk '/k8s_etcd/{print \"docker rm -f \"$1}' | bash\n$ kubectl delete pod etcd-01 -n kube-system\n\n# 更新所有证书\n$ kubeadm alpha certs renew all --config=ca-sign.yaml\n```\n\n<img src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n### 通过api更新\n\n可以通过apiserver的api更新证书，这一步需要进行验证\n\n```bash\n$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &\n...\n[certs] Certificate request \"kubeadm-cert-kubernetes-admin-8pvf8\" created\n...\n\n# 批准更新\n$ kubectl get csr | awk '!/Approved/ && !/NAME/{print \"kubectl certificate approve \"$1}' | bash\n...\ncertificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved\n...\n```\n\n","source":"_posts/k8s实践系列-证书管理.md","raw":"---\ntitle: '[k8s实践系列]证书管理'\ndate: 2020-07-05 10:26:34\ntags:\n- k8s\n- k8s证书管理\ncategories: 实践K8s\ndescription: 使用kubeadm管理k8s证书状态\ncover: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg\n---\n\n\n\n## 查看证书状态\n\n```bash\n$ kubeadm alpha certs check-expiration\n[check-expiration] Reading configuration from the cluster...\n[check-expiration] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\nCERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED\nadmin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no\napiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no\napiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\napiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no\ncontroller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no\netcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\netcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no\nfront-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no\nscheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no\n\nCERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED\nca                      Apr 14, 2030 11:18 UTC   9y              no\netcd-ca                 Apr 14, 2030 11:18 UTC   9y              no\nfront-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no\n```\n\n<br>\n\n## 更新所有证书\n\n```bash\n$ kubeadm alpha certs renew all\n[renew] Reading configuration from the cluster...\n[renew] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\n\ncertificate embedded in the kubeconfig file for the admin to use and for kubeadm itself renewed\ncertificate for serving the Kubernetes API renewed\ncertificate the apiserver uses to access etcd renewed\ncertificate for the API server to connect to kubelet renewed\ncertificate embedded in the kubeconfig file for the controller manager to use renewed\ncertificate for liveness probes to healthcheck etcd renewed\ncertificate for etcd nodes to communicate with each other renewed\ncertificate for serving etcd renewed\ncertificate for the front proxy client renewed\ncertificate embedded in the kubeconfig file for the scheduler manager to use renewed\n```\n\n<br>\n\n\n\n## 更改证书签名\n\n\n\n### 创建新的证书配置文件\n\n```bash\n# 创建更新配置\n$ cat > ca-sign.yaml <<EOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\napiServer:\n  certSANs:\n  - \"10.10.34.89\"\n  - \"113.108.71.77\"\n  #- \"kubernetes\"\n  #- \"kubernetes.default\"\n  #- \"kubernetes.default.svc\"\n  #- \"kubernetes.default.svc.cluster\"\n  #- \"kubernetes.default.svc.cluster.local\"\ncontrollerManager:\n  extraArgs:\n    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt\n    cluster-signing-key-file: /etc/kubernetes/pki/ca.key\n#etcd:\n#  local:\n#    dataDir: /var/lib/etcd\n#    serverCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\n#    peerCertSANs:\n#    - \"localhost\"\n#    - \"127.0.0.1\"\nEOF\n```\n\n\n\n### 更新并生效配置\n\n```bash\n# 更新 kubernetes 配置\n$ kubeadm config upload from-file --config=ca-sign.yaml\n\n# 确认更新配置生效\n$ kubeadm config view\napiServer:\n  certSANs:\n  - 10.10.34.89\n  - 113.108.71.77\n...\n```\n\n\n\n### 重新生成apiserver证书\n\n```bash\n# 删除原 apiserver 证书\n$ rm -rf /etc/kubernetes/pki/apiserver.*\n\n# 重新生成 apiserver 证书\n$ kubeadm init phase certs apiserver --config=ca-sign.yaml\n[certs] Generating \"apiserver\" certificate and key\n[certs] apiserver serving cert is signed for DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]\n\n# 确认 apiserver 证书更新情况\n$ openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt\n...\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication\n            X509v3 Subject Alternative Name:\n                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77\n...\n```\n\n\n\n### 重新生成所有证书\n\n```bash\n# 重新生成所有证书\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/ && rm -rf apiserver* front* sa*'\n$ ansible master -m shell -a 'cd /etc/kubernetes/pki/etcd/ && rm -rf healthcheck-client* peer* server*'\n$ ansible master -m copy -a 'src=ca-sign.yaml dest=ca-sign.yaml'\n$ ansible master -m shell -a 'kubeadm init phase certs all --config=ca-sign.yaml'\n\n# 验证证书\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS'\n$ ansible master -m shell -a 'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS'\n```\n\n\n\n### 更新证书\n\n```bash\n# 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。\n$ docker ps | awk '/k8s_etcd/{print \"docker rm -f \"$1}' | bash\n$ kubectl delete pod etcd-01 -n kube-system\n\n# 更新所有证书\n$ kubeadm alpha certs renew all --config=ca-sign.yaml\n```\n\n<img src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n### 通过api更新\n\n可以通过apiserver的api更新证书，这一步需要进行验证\n\n```bash\n$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &\n...\n[certs] Certificate request \"kubeadm-cert-kubernetes-admin-8pvf8\" created\n...\n\n# 批准更新\n$ kubectl get csr | awk '!/Approved/ && !/NAME/{print \"kubectl certificate approve \"$1}' | bash\n...\ncertificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved\n...\n```\n\n","slug":"k8s实践系列-证书管理","published":1,"updated":"2020-07-05T02:45:14.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc8h3rvm000057jebm31csr9","content":"<h2 id=\"查看证书状态\"><a href=\"#查看证书状态\" class=\"headerlink\" title=\"查看证书状态\"></a>查看证书状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs check-expiration</span><br><span class=\"line\">[check-expiration] Reading configuration from the cluster...</span><br><span class=\"line\">[check-expiration] FYI: You can look at this config file with <span class=\"string\">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class=\"line\">admin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">apiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">apiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">apiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">controller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">etcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">front-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no</span><br><span class=\"line\">scheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class=\"line\">ca                      Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">etcd-ca                 Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">front-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"更新所有证书\"><a href=\"#更新所有证书\" class=\"headerlink\" title=\"更新所有证书\"></a>更新所有证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all</span><br><span class=\"line\">[renew] Reading configuration from the cluster...</span><br><span class=\"line\">[renew] FYI: You can look at this config file with <span class=\"string\">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the admin to use and <span class=\"keyword\">for</span> kubeadm itself renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving the Kubernetes API renewed</span><br><span class=\"line\">certificate the apiserver uses to access etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the API server to connect to kubelet renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the controller manager to use renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> liveness probes to healthcheck etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> etcd nodes to communicate with each other renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the front proxy client renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the scheduler manager to use renewed</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"更改证书签名\"><a href=\"#更改证书签名\" class=\"headerlink\" title=\"更改证书签名\"></a>更改证书签名</h2><h3 id=\"创建新的证书配置文件\"><a href=\"#创建新的证书配置文件\" class=\"headerlink\" title=\"创建新的证书配置文件\"></a>创建新的证书配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建更新配置</span></span><br><span class=\"line\">$ cat &gt; ca-sign.yaml &lt;&lt;EOF</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - <span class=\"string\">\"10.10.34.89\"</span></span><br><span class=\"line\">  - <span class=\"string\">\"113.108.71.77\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default.svc\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default.svc.cluster\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default.svc.cluster.local\"</span></span><br><span class=\"line\">controllerManager:</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt</span><br><span class=\"line\">    cluster-signing-key-file: /etc/kubernetes/pki/ca.key</span><br><span class=\"line\"><span class=\"comment\">#etcd:</span></span><br><span class=\"line\"><span class=\"comment\">#  local:</span></span><br><span class=\"line\"><span class=\"comment\">#    dataDir: /var/lib/etcd</span></span><br><span class=\"line\"><span class=\"comment\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"localhost\"</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"comment\">#    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"localhost\"</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"127.0.0.1\"</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新并生效配置\"><a href=\"#更新并生效配置\" class=\"headerlink\" title=\"更新并生效配置\"></a>更新并生效配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 kubernetes 配置</span></span><br><span class=\"line\">$ kubeadm config upload from-file --config=ca-sign.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认更新配置生效</span></span><br><span class=\"line\">$ kubeadm config view</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - 10.10.34.89</span><br><span class=\"line\">  - 113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重新生成apiserver证书\"><a href=\"#重新生成apiserver证书\" class=\"headerlink\" title=\"重新生成apiserver证书\"></a>重新生成apiserver证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除原 apiserver 证书</span></span><br><span class=\"line\">$ rm -rf /etc/kubernetes/pki/apiserver.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新生成 apiserver 证书</span></span><br><span class=\"line\">$ kubeadm init phase certs apiserver --config=ca-sign.yaml</span><br><span class=\"line\">[certs] Generating <span class=\"string\">\"apiserver\"</span> certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认 apiserver 证书更新情况</span></span><br><span class=\"line\">$ openssl x509 -text -noout -<span class=\"keyword\">in</span> /etc/kubernetes/pki/apiserver.crt</span><br><span class=\"line\">...</span><br><span class=\"line\">        X509v3 extensions:</span><br><span class=\"line\">            X509v3 Key Usage: critical</span><br><span class=\"line\">                Digital Signature, Key Encipherment</span><br><span class=\"line\">            X509v3 Extended Key Usage:</span><br><span class=\"line\">                TLS Web Server Authentication</span><br><span class=\"line\">            X509v3 Subject Alternative Name:</span><br><span class=\"line\">                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重新生成所有证书\"><a href=\"#重新生成所有证书\" class=\"headerlink\" title=\"重新生成所有证书\"></a>重新生成所有证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新生成所有证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'cd /etc/kubernetes/pki/ &amp;&amp; rm -rf apiserver* front* sa*'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'cd /etc/kubernetes/pki/etcd/ &amp;&amp; rm -rf healthcheck-client* peer* server*'</span></span><br><span class=\"line\">$ ansible master -m copy -a <span class=\"string\">'src=ca-sign.yaml dest=ca-sign.yaml'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'kubeadm init phase certs all --config=ca-sign.yaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。</span></span><br><span class=\"line\">$ docker ps | awk <span class=\"string\">'/k8s_etcd/&#123;print \"docker rm -f \"$1&#125;'</span> | bash</span><br><span class=\"line\">$ kubectl delete pod etcd-01 -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新所有证书</span></span><br><span class=\"line\">$ kubeadm alpha certs renew all --config=ca-sign.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"通过api更新\"><a href=\"#通过api更新\" class=\"headerlink\" title=\"通过api更新\"></a>通过api更新</h3><p>可以通过apiserver的api更新证书，这一步需要进行验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &amp;</span><br><span class=\"line\">...</span><br><span class=\"line\">[certs] Certificate request <span class=\"string\">\"kubeadm-cert-kubernetes-admin-8pvf8\"</span> created</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批准更新</span></span><br><span class=\"line\">$ kubectl get csr | awk <span class=\"string\">'!/Approved/ &amp;&amp; !/NAME/&#123;print \"kubectl certificate approve \"$1&#125;'</span> | bash</span><br><span class=\"line\">...</span><br><span class=\"line\">certificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看证书状态\"><a href=\"#查看证书状态\" class=\"headerlink\" title=\"查看证书状态\"></a>查看证书状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs check-expiration</span><br><span class=\"line\">[check-expiration] Reading configuration from the cluster...</span><br><span class=\"line\">[check-expiration] FYI: You can look at this config file with <span class=\"string\">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED</span><br><span class=\"line\">admin.conf                 Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">apiserver                  Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">apiserver-etcd-client      Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">apiserver-kubelet-client   Apr 22, 2021 09:03 UTC   364d            ca                      no</span><br><span class=\"line\">controller-manager.conf    Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\">etcd-healthcheck-client    Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-peer                  Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">etcd-server                Apr 22, 2021 09:03 UTC   364d            etcd-ca                 no</span><br><span class=\"line\">front-proxy-client         Apr 22, 2021 09:03 UTC   364d            front-proxy-ca          no</span><br><span class=\"line\">scheduler.conf             Apr 22, 2021 09:03 UTC   364d                                    no</span><br><span class=\"line\"></span><br><span class=\"line\">CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED</span><br><span class=\"line\">ca                      Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">etcd-ca                 Apr 14, 2030 11:18 UTC   9y              no</span><br><span class=\"line\">front-proxy-ca          Apr 14, 2030 11:18 UTC   9y              no</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"更新所有证书\"><a href=\"#更新所有证书\" class=\"headerlink\" title=\"更新所有证书\"></a>更新所有证书</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all</span><br><span class=\"line\">[renew] Reading configuration from the cluster...</span><br><span class=\"line\">[renew] FYI: You can look at this config file with <span class=\"string\">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the admin to use and <span class=\"keyword\">for</span> kubeadm itself renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving the Kubernetes API renewed</span><br><span class=\"line\">certificate the apiserver uses to access etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the API server to connect to kubelet renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the controller manager to use renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> liveness probes to healthcheck etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> etcd nodes to communicate with each other renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> serving etcd renewed</span><br><span class=\"line\">certificate <span class=\"keyword\">for</span> the front proxy client renewed</span><br><span class=\"line\">certificate embedded <span class=\"keyword\">in</span> the kubeconfig file <span class=\"keyword\">for</span> the scheduler manager to use renewed</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"更改证书签名\"><a href=\"#更改证书签名\" class=\"headerlink\" title=\"更改证书签名\"></a>更改证书签名</h2><h3 id=\"创建新的证书配置文件\"><a href=\"#创建新的证书配置文件\" class=\"headerlink\" title=\"创建新的证书配置文件\"></a>创建新的证书配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建更新配置</span></span><br><span class=\"line\">$ cat &gt; ca-sign.yaml &lt;&lt;EOF</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - <span class=\"string\">\"10.10.34.89\"</span></span><br><span class=\"line\">  - <span class=\"string\">\"113.108.71.77\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default.svc\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default.svc.cluster\"</span></span><br><span class=\"line\">  <span class=\"comment\">#- \"kubernetes.default.svc.cluster.local\"</span></span><br><span class=\"line\">controllerManager:</span><br><span class=\"line\">  extraArgs:</span><br><span class=\"line\">    cluster-signing-cert-file: /etc/kubernetes/pki/ca.crt</span><br><span class=\"line\">    cluster-signing-key-file: /etc/kubernetes/pki/ca.key</span><br><span class=\"line\"><span class=\"comment\">#etcd:</span></span><br><span class=\"line\"><span class=\"comment\">#  local:</span></span><br><span class=\"line\"><span class=\"comment\">#    dataDir: /var/lib/etcd</span></span><br><span class=\"line\"><span class=\"comment\">#    serverCertSANs:</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"localhost\"</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"127.0.0.1\"</span></span><br><span class=\"line\"><span class=\"comment\">#    peerCertSANs:</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"localhost\"</span></span><br><span class=\"line\"><span class=\"comment\">#    - \"127.0.0.1\"</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新并生效配置\"><a href=\"#更新并生效配置\" class=\"headerlink\" title=\"更新并生效配置\"></a>更新并生效配置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 kubernetes 配置</span></span><br><span class=\"line\">$ kubeadm config upload from-file --config=ca-sign.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认更新配置生效</span></span><br><span class=\"line\">$ kubeadm config view</span><br><span class=\"line\">apiServer:</span><br><span class=\"line\">  certSANs:</span><br><span class=\"line\">  - 10.10.34.89</span><br><span class=\"line\">  - 113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重新生成apiserver证书\"><a href=\"#重新生成apiserver证书\" class=\"headerlink\" title=\"重新生成apiserver证书\"></a>重新生成apiserver证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除原 apiserver 证书</span></span><br><span class=\"line\">$ rm -rf /etc/kubernetes/pki/apiserver.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新生成 apiserver 证书</span></span><br><span class=\"line\">$ kubeadm init phase certs apiserver --config=ca-sign.yaml</span><br><span class=\"line\">[certs] Generating <span class=\"string\">\"apiserver\"</span> certificate and key</span><br><span class=\"line\">[certs] apiserver serving cert is signed <span class=\"keyword\">for</span> DNS names [ukm01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.10.34.92 113.108.71.77]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 确认 apiserver 证书更新情况</span></span><br><span class=\"line\">$ openssl x509 -text -noout -<span class=\"keyword\">in</span> /etc/kubernetes/pki/apiserver.crt</span><br><span class=\"line\">...</span><br><span class=\"line\">        X509v3 extensions:</span><br><span class=\"line\">            X509v3 Key Usage: critical</span><br><span class=\"line\">                Digital Signature, Key Encipherment</span><br><span class=\"line\">            X509v3 Extended Key Usage:</span><br><span class=\"line\">                TLS Web Server Authentication</span><br><span class=\"line\">            X509v3 Subject Alternative Name:</span><br><span class=\"line\">                DNS:ukm01, DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster.local, IP Address:10.96.0.1, IP Address:10.10.34.92, IP Address:10.10.34.89, IP Address:113.108.71.77</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"重新生成所有证书\"><a href=\"#重新生成所有证书\" class=\"headerlink\" title=\"重新生成所有证书\"></a>重新生成所有证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新生成所有证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'cd /etc/kubernetes/pki/ &amp;&amp; rm -rf apiserver* front* sa*'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'cd /etc/kubernetes/pki/etcd/ &amp;&amp; rm -rf healthcheck-client* peer* server*'</span></span><br><span class=\"line\">$ ansible master -m copy -a <span class=\"string\">'src=ca-sign.yaml dest=ca-sign.yaml'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'kubeadm init phase certs all --config=ca-sign.yaml'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证证书</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'openssl x509 -text -noout -in /etc/kubernetes/pki/apiserver.crt | grep DNS'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/server.crt | grep DNS'</span></span><br><span class=\"line\">$ ansible master -m shell -a <span class=\"string\">'openssl x509 -text -noout -in /etc/kubernetes/pki/etcd/peer.crt | grep DNS'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"更新证书\"><a href=\"#更新证书\" class=\"headerlink\" title=\"更新证书\"></a>更新证书</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 由于 docker container 有缓存，证书并未加载到 pod 中，因此需要删掉 docker 中的 container 并重启 pod 才可以使证书生效。</span></span><br><span class=\"line\">$ docker ps | awk <span class=\"string\">'/k8s_etcd/&#123;print \"docker rm -f \"$1&#125;'</span> | bash</span><br><span class=\"line\">$ kubectl delete pod etcd-01 -n kube-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更新所有证书</span></span><br><span class=\"line\">$ kubeadm alpha certs renew all --config=ca-sign.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"update.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"通过api更新\"><a href=\"#通过api更新\" class=\"headerlink\" title=\"通过api更新\"></a>通过api更新</h3><p>可以通过apiserver的api更新证书，这一步需要进行验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeadm alpha certs renew all --use-api --config=ca-sign.yaml &amp;</span><br><span class=\"line\">...</span><br><span class=\"line\">[certs] Certificate request <span class=\"string\">\"kubeadm-cert-kubernetes-admin-8pvf8\"</span> created</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 批准更新</span></span><br><span class=\"line\">$ kubectl get csr | awk <span class=\"string\">'!/Approved/ &amp;&amp; !/NAME/&#123;print \"kubectl certificate approve \"$1&#125;'</span> | bash</span><br><span class=\"line\">...</span><br><span class=\"line\">certificatesigningrequest.certificates.k8s.io/kubeadm-cert-kubernetes-admin-8pvf8 approved</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n"},{"title":"[k8s实践系列]使用nfs存储","date":"2020-07-05T02:50:25.000Z","description":"使用nfs作为k8s后端持久化存储","cover":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=251466455,608736426&fm=26&gp=0.jpg","_content":"\n\n\n在之前的文章 {% post_link k8s实践系列-kubeadm部署k8s-1.18 %} 中，有一台nfs服务器`SCA-LUM700011`，这里我们就在这个服务器上部署nfs并向k8s提供的持久化存储。\n\n------\n\n\n\n## 安装nfs\n\n在`SCA-LUM700011`上安装nfs服务：\n\n```bash\n$ yum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs目录：\n\n```bash\n$ mkdir -p /opt/nfs/data\n$ echo \"/opt/nfs/data *(rw,no_root_squash)\" >> /etc/exports\n```\n\n> 生产上应该给该目录挂载一个数据盘\n\n\n\n启动nfs：\n\n```bash\n$ systemctl start rpcbind\n$ systemctl status rpcbind\n$ systemctl enable rpcbind\n$ systemctl start nfs \n$ systemctl status nfs\n$ systemctl enable nfs\n```\n\n<br>\n\n\n\n在每个node节点和master节点上，都要安装nfs-utils：\n\n```bash\n$ yum install -y nfs-utils\n```\n\n\n\n<br>\n\n\n\n## 使用方式一、nfs类型的volume\n\n这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        nfs:\n          server: 10.8.138.8\n          path: /opt/nfs/data\n```\n\n\n\n然后直接apply即可创建一个使用nfs类型volume的pod：\n\n```bash\n$ kubectl apply -f pod-nfs-volume.yaml\n```\n\n<img src=\"pod-nfs.png\" style=\"zoom:50%;\" />\n\n\n\n然后可以将这个pod作为service暴露出来：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-nfs-svc\n  labels:\n    app: nginx-nfs-svc\nspec:\n  ports:\n  - port: 80\n    targetPort: 80\n  selector:\n    app: nginx-nfs\n```\n\n\n\n```bash\n$ kubectl apply -f pod-nfs-svc.yaml\n```\n\n<img src=\"pod-nfs-svc.png\" style=\"zoom:50%;\" />\n\n\n\n验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：\n\n<img src=\"pod-nfs-test.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 使用方式二、创建nfs类型的pv和pvc\n\n### 创建pv\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfs-pv\nspec:\n  capacity:\n    storage: 500Mi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  nfs:\n    path: /opt/nfs/data\n    server: 10.8.138.8\n```\n\n\n\n这里就创建了一个名为`nfs-pv`的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。\n\n- `accessModes`：pv访问模式，支持如下几个：\n  - `ReadWriteOnce`：读写挂载在一个节点上；\n  - `ReadOnlyMany`：只读挂载多个节点上；\n  - `ReadWriteMany`：读写挂载在多个节点上；\n- `persistentVolumeReclaimPolicy`：回收策略，支持以下几个：\n  - `Retain`：不作任何操作，需要手动删除（默认）\n  - `Recycle`：没有pvc使用时清空数据让其他pvc使用；\n  - `Delete`：删除；\n\n\n\n<img src=\"pv.png\" style=\"zoom:50%;\" />\n\n\n\n> 可以看到pv目前是可用状态。\n\n<br>\n\n\n\n### 创建pvc\n\n服务，例如pod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc01\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 500Mi\n```\n\n这里就创建了一个大小为500Mi，名字为pvc01的pvc请求。\n\n\n\npvc是自动绑定pv的，有如下两个原则：\n\n- 根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；\n- 根据访问模式匹配，绑定pv和pvc访问模式一致的；\n\n\n\n<img src=\"pvc.png\" style=\"zoom:50%;\" />\n\n> 可以看到pvc和pv都是绑定状态了。\n\n<br>\n\n\n\n### 应用使用pvc\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        persistentVolumeClaim:\n          claimName: pvc01\n```\n\n 使用pvc的时候，只需要在`volumes`定义的时候制定pvc名称即可。\n\n\n\n<img src=\"pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n## 方式三、nfs类型的storageclass\n\n**nfs默认不支持storageclass，需要安装额外的插件**\n\n### helm方式安装nfs-client\n\n```bash\n$ helm install nfs-storageclass --set nfs.server=10.8.138.8 --set nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner\n```\n\n\n\n![](nfs-client.png)\n\n> 可以看到nfs-client服务已经创建，storageclass也已经创建了。\n\n\n\n### yaml方式部署nfs-client\n\n使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：\n\n```yaml\n# nfs-cluster-role.yaml\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: nfs-client-provisioner-runner\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumes\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumeclaims\"]\n    verbs: [\"get\", \"list\", \"watch\", \"update\"]\n  - apiGroups: [\"storage.k8s.io\"]\n    resources: [\"storageclasses\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"events\"]\n    verbs: [\"create\", \"update\", \"patch\"]\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: run-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: nfs-client-provisioner-runner \n  apiGroup: rbac.authorization.k8s.io \n\n---\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\n  namespace: kube-system\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: Role \n  name: leader-locking-nfs-client-provisioner\n  apiGroup: rbac.authorization.k8s.io\n```\n\n\n\n```yaml\n# nfs-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nfs-client-provisioner\n  namespace: kube-system\n  labels:\n    app: nfs-client-provisioner\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: nfs-client-provisioner\n  template:\n    metadata:\n      annotations:\n      labels:\n        app: nfs-client-provisioner\n    spec:\n      serviceAccountName: nfs-client-provisioner\n      containers:\n        - name: nfs-client-provisioner\n          image: \"quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11\"\n          imagePullPolicy: IfNotPresent\n          volumeMounts:\n            - name: nfs-client-root\n              mountPath: /persistentvolumes\n          env:\n            - name: PROVISIONER_NAME\n              value: cluster.local/nfs-client-provisioner\n            - name: NFS_SERVER\n              value: 10.8.138.8\n            - name: NFS_PATH\n              value: /data/nfs-data\n      volumes:\n        - name: nfs-client-root\n          nfs:\n            server: 10.8.138.8 \n            path: /data/nfs-data\n```\n\n\n\n```yaml\n# nfs-service.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: nfs-client-provisioner \n  name: nfs-client-provisioner \n  namespace: kube-system\n```\n\n\n\n直接部署这三个文件即可：\n\n```bash\n$ kubectl apply -f nfs-cluster-role.yaml\n$ kubectl apply -f nfs-deployment.yaml\n$ kubectl apply -f nfs-service.yaml\n```\n\n\n\n### 使用yaml创建storageclass\n\n使用类似下面的yaml文件可以创建其他的storageclass：\n\n```yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: es-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n### PVC使用storageclass\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: testclaim\nspec:\n  storageClassName: \"nfs-client\"\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 100Mi\n```\n\n这里创建一个名为`testclaim`的100Mi的pvc，使用`nfs-client`这个storageclass。\n\n\n\n![](storageclass-pvc.png)\n\n\n\n","source":"_posts/k8s实践系列-使用nfs存储.md","raw":"---\ntitle: '[k8s实践系列]使用nfs存储'\ndate: 2020-07-05 10:50:25\ntags:\n- k8s\n- k8s持久化存储\ncategories: 实践K8s\ndescription: 使用nfs作为k8s后端持久化存储\ncover: https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=251466455,608736426&fm=26&gp=0.jpg\n---\n\n\n\n在之前的文章 {% post_link k8s实践系列-kubeadm部署k8s-1.18 %} 中，有一台nfs服务器`SCA-LUM700011`，这里我们就在这个服务器上部署nfs并向k8s提供的持久化存储。\n\n------\n\n\n\n## 安装nfs\n\n在`SCA-LUM700011`上安装nfs服务：\n\n```bash\n$ yum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs目录：\n\n```bash\n$ mkdir -p /opt/nfs/data\n$ echo \"/opt/nfs/data *(rw,no_root_squash)\" >> /etc/exports\n```\n\n> 生产上应该给该目录挂载一个数据盘\n\n\n\n启动nfs：\n\n```bash\n$ systemctl start rpcbind\n$ systemctl status rpcbind\n$ systemctl enable rpcbind\n$ systemctl start nfs \n$ systemctl status nfs\n$ systemctl enable nfs\n```\n\n<br>\n\n\n\n在每个node节点和master节点上，都要安装nfs-utils：\n\n```bash\n$ yum install -y nfs-utils\n```\n\n\n\n<br>\n\n\n\n## 使用方式一、nfs类型的volume\n\n这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        nfs:\n          server: 10.8.138.8\n          path: /opt/nfs/data\n```\n\n\n\n然后直接apply即可创建一个使用nfs类型volume的pod：\n\n```bash\n$ kubectl apply -f pod-nfs-volume.yaml\n```\n\n<img src=\"pod-nfs.png\" style=\"zoom:50%;\" />\n\n\n\n然后可以将这个pod作为service暴露出来：\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-nfs-svc\n  labels:\n    app: nginx-nfs-svc\nspec:\n  ports:\n  - port: 80\n    targetPort: 80\n  selector:\n    app: nginx-nfs\n```\n\n\n\n```bash\n$ kubectl apply -f pod-nfs-svc.yaml\n```\n\n<img src=\"pod-nfs-svc.png\" style=\"zoom:50%;\" />\n\n\n\n验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：\n\n<img src=\"pod-nfs-test.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 使用方式二、创建nfs类型的pv和pvc\n\n### 创建pv\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfs-pv\nspec:\n  capacity:\n    storage: 500Mi\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Recycle\n  nfs:\n    path: /opt/nfs/data\n    server: 10.8.138.8\n```\n\n\n\n这里就创建了一个名为`nfs-pv`的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。\n\n- `accessModes`：pv访问模式，支持如下几个：\n  - `ReadWriteOnce`：读写挂载在一个节点上；\n  - `ReadOnlyMany`：只读挂载多个节点上；\n  - `ReadWriteMany`：读写挂载在多个节点上；\n- `persistentVolumeReclaimPolicy`：回收策略，支持以下几个：\n  - `Retain`：不作任何操作，需要手动删除（默认）\n  - `Recycle`：没有pvc使用时清空数据让其他pvc使用；\n  - `Delete`：删除；\n\n\n\n<img src=\"pv.png\" style=\"zoom:50%;\" />\n\n\n\n> 可以看到pv目前是可用状态。\n\n<br>\n\n\n\n### 创建pvc\n\n服务，例如pod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pvc01\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 500Mi\n```\n\n这里就创建了一个大小为500Mi，名字为pvc01的pvc请求。\n\n\n\npvc是自动绑定pv的，有如下两个原则：\n\n- 根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；\n- 根据访问模式匹配，绑定pv和pvc访问模式一致的；\n\n\n\n<img src=\"pvc.png\" style=\"zoom:50%;\" />\n\n> 可以看到pvc和pv都是绑定状态了。\n\n<br>\n\n\n\n### 应用使用pvc\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-nfs\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx-nfs\n  template:\n    metadata:\n      labels:\n          app: nginx-nfs\n    spec:\n      containers:\n      - name: nginx-nfs\n        image: nginx\n        volumeMounts:\n        - name: wwwroot\n          mountPath: /usr/share/nginx/html\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: wwwroot\n        persistentVolumeClaim:\n          claimName: pvc01\n```\n\n 使用pvc的时候，只需要在`volumes`定义的时候制定pvc名称即可。\n\n\n\n<img src=\"pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n## 方式三、nfs类型的storageclass\n\n**nfs默认不支持storageclass，需要安装额外的插件**\n\n### helm方式安装nfs-client\n\n```bash\n$ helm install nfs-storageclass --set nfs.server=10.8.138.8 --set nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner\n```\n\n\n\n![](nfs-client.png)\n\n> 可以看到nfs-client服务已经创建，storageclass也已经创建了。\n\n\n\n### yaml方式部署nfs-client\n\n使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：\n\n```yaml\n# nfs-cluster-role.yaml\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: nfs-client-provisioner-runner\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumes\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumeclaims\"]\n    verbs: [\"get\", \"list\", \"watch\", \"update\"]\n  - apiGroups: [\"storage.k8s.io\"]\n    resources: [\"storageclasses\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"events\"]\n    verbs: [\"create\", \"update\", \"patch\"]\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: run-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: nfs-client-provisioner-runner \n  apiGroup: rbac.authorization.k8s.io \n\n---\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\n  namespace: kube-system\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\n\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    app: nfs-client-provisioner\n  name: leader-locking-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner \n    namespace: kube-system\nroleRef:\n  kind: Role \n  name: leader-locking-nfs-client-provisioner\n  apiGroup: rbac.authorization.k8s.io\n```\n\n\n\n```yaml\n# nfs-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nfs-client-provisioner\n  namespace: kube-system\n  labels:\n    app: nfs-client-provisioner\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: nfs-client-provisioner\n  template:\n    metadata:\n      annotations:\n      labels:\n        app: nfs-client-provisioner\n    spec:\n      serviceAccountName: nfs-client-provisioner\n      containers:\n        - name: nfs-client-provisioner\n          image: \"quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11\"\n          imagePullPolicy: IfNotPresent\n          volumeMounts:\n            - name: nfs-client-root\n              mountPath: /persistentvolumes\n          env:\n            - name: PROVISIONER_NAME\n              value: cluster.local/nfs-client-provisioner\n            - name: NFS_SERVER\n              value: 10.8.138.8\n            - name: NFS_PATH\n              value: /data/nfs-data\n      volumes:\n        - name: nfs-client-root\n          nfs:\n            server: 10.8.138.8 \n            path: /data/nfs-data\n```\n\n\n\n```yaml\n# nfs-service.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    app: nfs-client-provisioner \n  name: nfs-client-provisioner \n  namespace: kube-system\n```\n\n\n\n直接部署这三个文件即可：\n\n```bash\n$ kubectl apply -f nfs-cluster-role.yaml\n$ kubectl apply -f nfs-deployment.yaml\n$ kubectl apply -f nfs-service.yaml\n```\n\n\n\n### 使用yaml创建storageclass\n\n使用类似下面的yaml文件可以创建其他的storageclass：\n\n```yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: es-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n### PVC使用storageclass\n\n```yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: testclaim\nspec:\n  storageClassName: \"nfs-client\"\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 100Mi\n```\n\n这里创建一个名为`testclaim`的100Mi的pvc，使用`nfs-client`这个storageclass。\n\n\n\n![](storageclass-pvc.png)\n\n\n\n","slug":"k8s实践系列-使用nfs存储","published":1,"updated":"2020-07-05T03:42:22.140Z","_id":"ckc8hq1m1000097je1j5e1u6z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在之前的文章 <a href=\"/2020/07/02/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-kubeadm%E9%83%A8%E7%BD%B2k8s-1.18/\" title=\"[k8s实践系列]kubeadm部署k8s 1.17\">[k8s实践系列]kubeadm部署k8s 1.17</a> 中，有一台nfs服务器<code>SCA-LUM700011</code>，这里我们就在这个服务器上部署nfs并向k8s提供的持久化存储。</p>\n<hr>\n<h2 id=\"安装nfs\"><a href=\"#安装nfs\" class=\"headerlink\" title=\"安装nfs\"></a>安装nfs</h2><p>在<code>SCA-LUM700011</code>上安装nfs服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/nfs/data</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/opt/nfs/data *(rw,no_root_squash)\"</span> &gt;&gt; /etc/exports</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>生产上应该给该目录挂载一个数据盘</p>\n</blockquote>\n<p>启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start rpcbind</span><br><span class=\"line\">$ systemctl status rpcbind</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">$ systemctl start nfs </span><br><span class=\"line\">$ systemctl status nfs</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<p>在每个node节点和master节点上，都要安装nfs-utils：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"使用方式一、nfs类型的volume\"><a href=\"#使用方式一、nfs类型的volume\" class=\"headerlink\" title=\"使用方式一、nfs类型的volume\"></a>使用方式一、nfs类型的volume</h2><p>这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">nfs:</span></span><br><span class=\"line\">          <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后直接apply即可创建一个使用nfs类型volume的pod：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f pod-nfs-volume.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"pod-nfs.png\" style=\"zoom:50%;\" />\n\n\n\n<p>然后可以将这个pod作为service暴露出来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f pod-nfs-svc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"pod-nfs-svc.png\" style=\"zoom:50%;\" />\n\n\n\n<p>验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：</p>\n<img src= \"/img/loading.gif\" data-src=\"pod-nfs-test.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"使用方式二、创建nfs类型的pv和pvc\"><a href=\"#使用方式二、创建nfs类型的pv和pvc\" class=\"headerlink\" title=\"使用方式二、创建nfs类型的pv和pvc\"></a>使用方式二、创建nfs类型的pv和pvc</h2><h3 id=\"创建pv\"><a href=\"#创建pv\" class=\"headerlink\" title=\"创建pv\"></a>创建pv</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Recycle</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里就创建了一个名为<code>nfs-pv</code>的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。</p>\n<ul>\n<li><code>accessModes</code>：pv访问模式，支持如下几个：<ul>\n<li><code>ReadWriteOnce</code>：读写挂载在一个节点上；</li>\n<li><code>ReadOnlyMany</code>：只读挂载多个节点上；</li>\n<li><code>ReadWriteMany</code>：读写挂载在多个节点上；</li>\n</ul>\n</li>\n<li><code>persistentVolumeReclaimPolicy</code>：回收策略，支持以下几个：<ul>\n<li><code>Retain</code>：不作任何操作，需要手动删除（默认）</li>\n<li><code>Recycle</code>：没有pvc使用时清空数据让其他pvc使用；</li>\n<li><code>Delete</code>：删除；</li>\n</ul>\n</li>\n</ul>\n<img src= \"/img/loading.gif\" data-src=\"pv.png\" style=\"zoom:50%;\" />\n\n\n\n<blockquote>\n<p>可以看到pv目前是可用状态。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"创建pvc\"><a href=\"#创建pvc\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h3><p>服务，例如pod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc01</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br></pre></td></tr></table></figure>\n\n<p>这里就创建了一个大小为500Mi，名字为pvc01的pvc请求。</p>\n<p>pvc是自动绑定pv的，有如下两个原则：</p>\n<ul>\n<li>根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；</li>\n<li>根据访问模式匹配，绑定pv和pvc访问模式一致的；</li>\n</ul>\n<img src= \"/img/loading.gif\" data-src=\"pvc.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>可以看到pvc和pv都是绑定状态了。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"应用使用pvc\"><a href=\"#应用使用pvc\" class=\"headerlink\" title=\"应用使用pvc\"></a>应用使用pvc</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">pvc01</span></span><br></pre></td></tr></table></figure>\n\n<p> 使用pvc的时候，只需要在<code>volumes</code>定义的时候制定pvc名称即可。</p>\n<img src= \"/img/loading.gif\" data-src=\"pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"方式三、nfs类型的storageclass\"><a href=\"#方式三、nfs类型的storageclass\" class=\"headerlink\" title=\"方式三、nfs类型的storageclass\"></a>方式三、nfs类型的storageclass</h2><p><strong>nfs默认不支持storageclass，需要安装额外的插件</strong></p>\n<h3 id=\"helm方式安装nfs-client\"><a href=\"#helm方式安装nfs-client\" class=\"headerlink\" title=\"helm方式安装nfs-client\"></a>helm方式安装nfs-client</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install nfs-storageclass --<span class=\"built_in\">set</span> nfs.server=10.8.138.8 --<span class=\"built_in\">set</span> nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"nfs-client.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到nfs-client服务已经创建，storageclass也已经创建了。</p>\n</blockquote>\n<h3 id=\"yaml方式部署nfs-client\"><a href=\"#yaml方式部署nfs-client\" class=\"headerlink\" title=\"yaml方式部署nfs-client\"></a>yaml方式部署nfs-client</h3><p>使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-cluster-role.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"persistentvolumes\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"create\"</span><span class=\"string\">,</span> <span class=\"string\">\"delete\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"persistentvolumeclaims\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"storage.k8s.io\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"storageclasses\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"events\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",</span> <span class=\"string\">\"update\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"endpoints\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"create\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">run-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span> </span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"endpoints\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"create\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">\"quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11\"</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/persistentvolumes</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PROVISIONER_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_SERVER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_PATH</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/data/nfs-data</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">          <span class=\"attr\">nfs:</span></span><br><span class=\"line\">            <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span> </span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/data/nfs-data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接部署这三个文件即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nfs-cluster-role.yaml</span><br><span class=\"line\">$ kubectl apply -f nfs-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f nfs-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用yaml创建storageclass\"><a href=\"#使用yaml创建storageclass\" class=\"headerlink\" title=\"使用yaml创建storageclass\"></a>使用yaml创建storageclass</h3><p>使用类似下面的yaml文件可以创建其他的storageclass：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">\"true\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"PVC使用storageclass\"><a href=\"#PVC使用storageclass\" class=\"headerlink\" title=\"PVC使用storageclass\"></a>PVC使用storageclass</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">testclaim</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">\"nfs-client\"</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br></pre></td></tr></table></figure>\n\n<p>这里创建一个名为<code>testclaim</code>的100Mi的pvc，使用<code>nfs-client</code>这个storageclass。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"storageclass-pvc.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在之前的文章 <a href=\"/2020/07/02/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-kubeadm%E9%83%A8%E7%BD%B2k8s-1.18/\" title=\"[k8s实践系列]kubeadm部署k8s 1.17\">[k8s实践系列]kubeadm部署k8s 1.17</a> 中，有一台nfs服务器<code>SCA-LUM700011</code>，这里我们就在这个服务器上部署nfs并向k8s提供的持久化存储。</p>\n<hr>\n<h2 id=\"安装nfs\"><a href=\"#安装nfs\" class=\"headerlink\" title=\"安装nfs\"></a>安装nfs</h2><p>在<code>SCA-LUM700011</code>上安装nfs服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /opt/nfs/data</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/opt/nfs/data *(rw,no_root_squash)\"</span> &gt;&gt; /etc/exports</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>生产上应该给该目录挂载一个数据盘</p>\n</blockquote>\n<p>启动nfs：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start rpcbind</span><br><span class=\"line\">$ systemctl status rpcbind</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">$ systemctl start nfs </span><br><span class=\"line\">$ systemctl status nfs</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nfs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<p>在每个node节点和master节点上，都要安装nfs-utils：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"使用方式一、nfs类型的volume\"><a href=\"#使用方式一、nfs类型的volume\" class=\"headerlink\" title=\"使用方式一、nfs类型的volume\"></a>使用方式一、nfs类型的volume</h2><p>这种方式是直接在yaml中定义数据卷为nfs类型，示例如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">nfs:</span></span><br><span class=\"line\">          <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后直接apply即可创建一个使用nfs类型volume的pod：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f pod-nfs-volume.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"pod-nfs.png\" style=\"zoom:50%;\" />\n\n\n\n<p>然后可以将这个pod作为service暴露出来：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs-svc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f pod-nfs-svc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"pod-nfs-svc.png\" style=\"zoom:50%;\" />\n\n\n\n<p>验证访问的话，可以向nfs数据目录中放入一个html文件然后访问：</p>\n<img src=\"pod-nfs-test.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"使用方式二、创建nfs类型的pv和pvc\"><a href=\"#使用方式二、创建nfs类型的pv和pvc\" class=\"headerlink\" title=\"使用方式二、创建nfs类型的pv和pvc\"></a>使用方式二、创建nfs类型的pv和pvc</h2><h3 id=\"创建pv\"><a href=\"#创建pv\" class=\"headerlink\" title=\"创建pv\"></a>创建pv</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Recycle</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/opt/nfs/data</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里就创建了一个名为<code>nfs-pv</code>的pv，大小500Mi，其中指定了nfs的数据目录和nfs地址。</p>\n<ul>\n<li><code>accessModes</code>：pv访问模式，支持如下几个：<ul>\n<li><code>ReadWriteOnce</code>：读写挂载在一个节点上；</li>\n<li><code>ReadOnlyMany</code>：只读挂载多个节点上；</li>\n<li><code>ReadWriteMany</code>：读写挂载在多个节点上；</li>\n</ul>\n</li>\n<li><code>persistentVolumeReclaimPolicy</code>：回收策略，支持以下几个：<ul>\n<li><code>Retain</code>：不作任何操作，需要手动删除（默认）</li>\n<li><code>Recycle</code>：没有pvc使用时清空数据让其他pvc使用；</li>\n<li><code>Delete</code>：删除；</li>\n</ul>\n</li>\n</ul>\n<img src=\"pv.png\" style=\"zoom:50%;\" />\n\n\n\n<blockquote>\n<p>可以看到pv目前是可用状态。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"创建pvc\"><a href=\"#创建pvc\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h3><p>服务，例如pod的直接消费对象为pvc而非pv，所以还需要创建pvc来绑定pv。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc01</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">500Mi</span></span><br></pre></td></tr></table></figure>\n\n<p>这里就创建了一个大小为500Mi，名字为pvc01的pvc请求。</p>\n<p>pvc是自动绑定pv的，有如下两个原则：</p>\n<ul>\n<li>根据pvc申请的容量，采用最小配原则匹配到合适的pv并绑定；</li>\n<li>根据访问模式匹配，绑定pv和pvc访问模式一致的；</li>\n</ul>\n<img src=\"pvc.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>可以看到pvc和pv都是绑定状态了。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"应用使用pvc\"><a href=\"#应用使用pvc\" class=\"headerlink\" title=\"应用使用pvc\"></a>应用使用pvc</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">app:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx-nfs</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wwwroot</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">pvc01</span></span><br></pre></td></tr></table></figure>\n\n<p> 使用pvc的时候，只需要在<code>volumes</code>定义的时候制定pvc名称即可。</p>\n<img src=\"pvc-nginx.png\" style=\"zoom:50%;\" />\n\n\n\n<h2 id=\"方式三、nfs类型的storageclass\"><a href=\"#方式三、nfs类型的storageclass\" class=\"headerlink\" title=\"方式三、nfs类型的storageclass\"></a>方式三、nfs类型的storageclass</h2><p><strong>nfs默认不支持storageclass，需要安装额外的插件</strong></p>\n<h3 id=\"helm方式安装nfs-client\"><a href=\"#helm方式安装nfs-client\" class=\"headerlink\" title=\"helm方式安装nfs-client\"></a>helm方式安装nfs-client</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install nfs-storageclass --<span class=\"built_in\">set</span> nfs.server=10.8.138.8 --<span class=\"built_in\">set</span> nfs.path=/opt/nfs/data --namespace default  stable/nfs-client-provisioner</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"nfs-client.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到nfs-client服务已经创建，storageclass也已经创建了。</p>\n</blockquote>\n<h3 id=\"yaml方式部署nfs-client\"><a href=\"#yaml方式部署nfs-client\" class=\"headerlink\" title=\"yaml方式部署nfs-client\"></a>yaml方式部署nfs-client</h3><p>使用yaml文件方式安装，需要部署下面的三个yaml文件来安装nfs-client：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-cluster-role.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"persistentvolumes\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"create\"</span><span class=\"string\">,</span> <span class=\"string\">\"delete\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"persistentvolumeclaims\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"storage.k8s.io\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"storageclasses\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"events\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",</span> <span class=\"string\">\"update\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"endpoints\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"create\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">run-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner-runner</span> </span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"endpoints\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"create\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">leader-locking-nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">Recreate</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">\"quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11\"</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/persistentvolumes</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">PROVISIONER_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_SERVER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NFS_PATH</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/data/nfs-data</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-root</span></span><br><span class=\"line\">          <span class=\"attr\">nfs:</span></span><br><span class=\"line\">            <span class=\"attr\">server:</span> <span class=\"number\">10.8</span><span class=\"number\">.138</span><span class=\"number\">.8</span> </span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/data/nfs-data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nfs-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nfs-client-provisioner</span> </span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接部署这三个文件即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nfs-cluster-role.yaml</span><br><span class=\"line\">$ kubectl apply -f nfs-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f nfs-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用yaml创建storageclass\"><a href=\"#使用yaml创建storageclass\" class=\"headerlink\" title=\"使用yaml创建storageclass\"></a>使用yaml创建storageclass</h3><p>使用类似下面的yaml文件可以创建其他的storageclass：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">\"true\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"PVC使用storageclass\"><a href=\"#PVC使用storageclass\" class=\"headerlink\" title=\"PVC使用storageclass\"></a>PVC使用storageclass</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">testclaim</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">\"nfs-client\"</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">100Mi</span></span><br></pre></td></tr></table></figure>\n\n<p>这里创建一个名为<code>testclaim</code>的100Mi的pvc，使用<code>nfs-client</code>这个storageclass。</p>\n<p><img src=\"storageclass-pvc.png\" alt=\"\"></p>\n"},{"title":"[k8s实践系列]部署MetricServer","date":"2020-07-05T05:56:14.000Z","description":"在k8s中部署MetricsServer服务","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg","_content":"\n\n\n## metrics-server介绍\n\nmetrics-server是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。\n\n<br>\n\n\n\n## 前提条件\n\nkube-apiserver需要设置如下的参数：\n\n```yaml\n--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem \n--requestheader-username-headers=X-Remote-User \n--requestheader-group-headers=X-Remote-Group \n--requestheader-extra-headers-prefix=X-Remote-Extra- \n--requestheader-allowed-names=\"\"\n--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem \n--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem \n--enable-aggregator-routing=true\n--runtime-config=api/all\n```\n\n-  --requestheader-XXX、--proxy-client-XXX 是 kube-apiserver 的 aggregator layer 相关的配置参数，metrics-server & HPA 需要使用；\n- --requestheader-client-ca-file：用于签名 --proxy-client-cert-file 和 --proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用；\n- 如果 --requestheader-allowed-names 不为空，则--proxy-client-cert-file 证书的 CN 必须位于 allowed-names 中，默认为 aggregator，这里让其匹配所有名称；\n\n\n\n> 如果是kubeadm部署，默认已经添加了\n\n<br>\n\n\n\n## yaml文件准备\n\n可以从官方获取，地址为：[metrics-server](https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server)，或者使用下面的yaml文件：\n\n```yaml\n# metric-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n--- \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"extensions\"\n  resources:\n  - deployments\n  verbs:\n  - get\n  - list\n  - update\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n```\n\n\n\n```yaml\n# metric-apiservice.yaml\napiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n  groupPriorityMinimum: 100\n  versionPriority: 100\n```\n\n\n\n```yaml\n# metric-server-deployment.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: metrics-server-config\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: EnsureExists\ndata:\n  NannyConfiguration: |-\n    apiVersion: nannyconfig/v1alpha1\n    kind: NannyConfiguration\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: metrics-server-v0.3.6\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n    version: v0.3.6\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n      version: v0.3.6\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n        version: v0.3.6\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'\n    spec:\n      priorityClassName: system-cluster-critical\n      serviceAccountName: metrics-server\n      containers:\n      - name: metrics-server\n        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.6\n        command:\n        - /metrics-server\n        - --metric-resolution=30s\n        - --kubelet-insecure-tls\n        # These are needed for GKE, which doesn't support secure communication yet.\n        # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.\n        #- --kubelet-port=10255\n        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP\n        #- --deprecated-kubelet-completely-insecure=true\n        ports:\n        - containerPort: 443\n          name: https\n          protocol: TCP\n      - name: metrics-server-nanny\n        image: mirrorgooglecontainers/addon-resizer:1.8.4\n        resources:\n          limits:\n            cpu: 100m\n            memory: 300Mi\n          requests:\n            cpu: 5m\n            memory: 50Mi\n        env:\n          - name: MY_POD_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          - name: MY_POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n        volumeMounts:\n        - name: metrics-server-config-volume\n          mountPath: /etc/config\n        command:\n          - /pod_nanny\n          - --config-dir=/etc/config\n          - --cpu=80m\n          - --extra-cpu=0.5m\n          - --memory=80Mi\n          - --extra-memory=8Mi\n          - --threshold=5\n          - --deployment=metrics-server-v0.3.6\n          - --container=metrics-server\n          - --poll-period=300000\n          - --estimator=exponential\n          # Specifies the smallest cluster (defined in number of nodes)\n          # resources will be scaled to.\n          #- --minClusterSize={{ metrics_server_min_cluster_size }}\n      volumes:\n        - name: metrics-server-config-volume\n          configMap:\n            name: metrics-server-config\n      tolerations:\n        - key: \"CriticalAddonsOnly\"\n          operator: \"Exists\"\n```\n\n\n\n```yaml\n# metric-server-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    addonmanager.kubernetes.io/mode: Reconcile\n    kubernetes.io/cluster-service: \"true\"\n    kubernetes.io/name: \"Metrics-server\"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: https\n```\n\n\n\n<br>\n\n\n\n## 部署\n\n将上述yaml文件准备好，直接执行下面的命令进行部署：\n\n```bash\n$ kubectl apply -f metric-rbac.yaml\n$ kubectl apply -f metric-apiservice.yaml\n$ kubectl apply -f metric-server-deployment.yaml\n$ kubectl apply -f metric-server-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查\n\n部署完成后检查并校验是否能够正常工作：\n\n```bash\n$ kubectl get all -n kube-system | grep metrics\n$ kubectl top node \n```\n\n\n\n![](check.png)","source":"_posts/k8s实践系列-部署MetricServer.md","raw":"---\ntitle: '[k8s实践系列]部署MetricServer'\ndate: 2020-07-05 13:56:14\ntags:\n- k8s\ncategories: 实践K8s\ndescription: 在k8s中部署MetricsServer服务\ncover: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=175965930,2539474621&fm=26&gp=0.jpg\n---\n\n\n\n## metrics-server介绍\n\nmetrics-server是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。\n\n<br>\n\n\n\n## 前提条件\n\nkube-apiserver需要设置如下的参数：\n\n```yaml\n--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem \n--requestheader-username-headers=X-Remote-User \n--requestheader-group-headers=X-Remote-Group \n--requestheader-extra-headers-prefix=X-Remote-Extra- \n--requestheader-allowed-names=\"\"\n--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem \n--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem \n--enable-aggregator-routing=true\n--runtime-config=api/all\n```\n\n-  --requestheader-XXX、--proxy-client-XXX 是 kube-apiserver 的 aggregator layer 相关的配置参数，metrics-server & HPA 需要使用；\n- --requestheader-client-ca-file：用于签名 --proxy-client-cert-file 和 --proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用；\n- 如果 --requestheader-allowed-names 不为空，则--proxy-client-cert-file 证书的 CN 必须位于 allowed-names 中，默认为 aggregator，这里让其匹配所有名称；\n\n\n\n> 如果是kubeadm部署，默认已经添加了\n\n<br>\n\n\n\n## yaml文件准备\n\n可以从官方获取，地址为：[metrics-server](https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server)，或者使用下面的yaml文件：\n\n```yaml\n# metric-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n--- \napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - \"extensions\"\n  resources:\n  - deployments\n  verbs:\n  - get\n  - list\n  - update\n  - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n```\n\n\n\n```yaml\n# metric-apiservice.yaml\napiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n  groupPriorityMinimum: 100\n  versionPriority: 100\n```\n\n\n\n```yaml\n# metric-server-deployment.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: metrics-server-config\n  namespace: kube-system\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: EnsureExists\ndata:\n  NannyConfiguration: |-\n    apiVersion: nannyconfig/v1alpha1\n    kind: NannyConfiguration\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: metrics-server-v0.3.6\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n    version: v0.3.6\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n      version: v0.3.6\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n        version: v0.3.6\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'\n    spec:\n      priorityClassName: system-cluster-critical\n      serviceAccountName: metrics-server\n      containers:\n      - name: metrics-server\n        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.6\n        command:\n        - /metrics-server\n        - --metric-resolution=30s\n        - --kubelet-insecure-tls\n        # These are needed for GKE, which doesn't support secure communication yet.\n        # Remove these lines for non-GKE clusters, and when GKE supports token-based auth.\n        #- --kubelet-port=10255\n        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP\n        #- --deprecated-kubelet-completely-insecure=true\n        ports:\n        - containerPort: 443\n          name: https\n          protocol: TCP\n      - name: metrics-server-nanny\n        image: mirrorgooglecontainers/addon-resizer:1.8.4\n        resources:\n          limits:\n            cpu: 100m\n            memory: 300Mi\n          requests:\n            cpu: 5m\n            memory: 50Mi\n        env:\n          - name: MY_POD_NAME\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.name\n          - name: MY_POD_NAMESPACE\n            valueFrom:\n              fieldRef:\n                fieldPath: metadata.namespace\n        volumeMounts:\n        - name: metrics-server-config-volume\n          mountPath: /etc/config\n        command:\n          - /pod_nanny\n          - --config-dir=/etc/config\n          - --cpu=80m\n          - --extra-cpu=0.5m\n          - --memory=80Mi\n          - --extra-memory=8Mi\n          - --threshold=5\n          - --deployment=metrics-server-v0.3.6\n          - --container=metrics-server\n          - --poll-period=300000\n          - --estimator=exponential\n          # Specifies the smallest cluster (defined in number of nodes)\n          # resources will be scaled to.\n          #- --minClusterSize={{ metrics_server_min_cluster_size }}\n      volumes:\n        - name: metrics-server-config-volume\n          configMap:\n            name: metrics-server-config\n      tolerations:\n        - key: \"CriticalAddonsOnly\"\n          operator: \"Exists\"\n```\n\n\n\n```yaml\n# metric-server-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    addonmanager.kubernetes.io/mode: Reconcile\n    kubernetes.io/cluster-service: \"true\"\n    kubernetes.io/name: \"Metrics-server\"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: https\n```\n\n\n\n<br>\n\n\n\n## 部署\n\n将上述yaml文件准备好，直接执行下面的命令进行部署：\n\n```bash\n$ kubectl apply -f metric-rbac.yaml\n$ kubectl apply -f metric-apiservice.yaml\n$ kubectl apply -f metric-server-deployment.yaml\n$ kubectl apply -f metric-server-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查\n\n部署完成后检查并校验是否能够正常工作：\n\n```bash\n$ kubectl get all -n kube-system | grep metrics\n$ kubectl top node \n```\n\n\n\n![](check.png)","slug":"k8s实践系列-部署MetricServer","published":1,"updated":"2020-07-05T06:11:32.400Z","_id":"ckc8ofbrw0000qijed4ui9h6o","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"metrics-server介绍\"><a href=\"#metrics-server介绍\" class=\"headerlink\" title=\"metrics-server介绍\"></a>metrics-server介绍</h2><p>metrics-server是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。</p>\n<br>\n\n\n\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p>kube-apiserver需要设置如下的参数：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-username-headers=X-Remote-User</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-group-headers=X-Remote-Group</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-extra-headers-prefix=X-Remote-Extra-</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-allowed-names=\"\"</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem</span> </span><br><span class=\"line\"><span class=\"string\">--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem</span> </span><br><span class=\"line\"><span class=\"string\">--enable-aggregator-routing=true</span></span><br><span class=\"line\"><span class=\"string\">--runtime-config=api/all</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–requestheader-XXX、–proxy-client-XXX 是 kube-apiserver 的 aggregator layer 相关的配置参数，metrics-server &amp; HPA 需要使用；</li>\n<li>–requestheader-client-ca-file：用于签名 –proxy-client-cert-file 和 –proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用；</li>\n<li>如果 –requestheader-allowed-names 不为空，则–proxy-client-cert-file 证书的 CN 必须位于 allowed-names 中，默认为 aggregator，这里让其匹配所有名称；</li>\n</ul>\n<blockquote>\n<p>如果是kubeadm部署，默认已经添加了</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"yaml文件准备\"><a href=\"#yaml文件准备\" class=\"headerlink\" title=\"yaml文件准备\"></a>yaml文件准备</h2><p>可以从官方获取，地址为：<a href=\"https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server\" target=\"_blank\" rel=\"noopener\">metrics-server</a>，或者使用下面的yaml文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server:system:auth-delegator</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:auth-delegator</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-auth-reader</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">extension-apiserver-authentication-reader</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"string\">---</span> </span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/stats</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"extensions\"</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deployments</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-apiservice.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiregistration.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">APIService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">v1beta1.metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1beta1</span></span><br><span class=\"line\">  <span class=\"attr\">insecureSkipTLSVerify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">groupPriorityMinimum:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"attr\">versionPriority:</span> <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-server-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">EnsureExists</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">NannyConfiguration:</span> <span class=\"string\">|-</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">nannyconfig/v1alpha1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">NannyConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"attr\">seccomp.security.alpha.kubernetes.io/pod:</span> <span class=\"string\">'docker/default'</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">priorityClassName:</span> <span class=\"string\">system-cluster-critical</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/metrics-server-amd64:v0.3.6</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/metrics-server</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--metric-resolution=30s</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-insecure-tls</span></span><br><span class=\"line\">        <span class=\"comment\"># These are needed for GKE, which doesn't support secure communication yet.</span></span><br><span class=\"line\">        <span class=\"comment\"># Remove these lines for non-GKE clusters, and when GKE supports token-based auth.</span></span><br><span class=\"line\">        <span class=\"comment\">#- --kubelet-port=10255</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span></span><br><span class=\"line\">        <span class=\"comment\">#- --deprecated-kubelet-completely-insecure=true</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">https</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-nanny</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/addon-resizer:1.8.4</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">300Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">5m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAMESPACE</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/config</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">/pod_nanny</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--config-dir=/etc/config</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--cpu=80m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-cpu=0.5m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--memory=80Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-memory=8Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--threshold=5</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--deployment=metrics-server-v0.3.6</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--container=metrics-server</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--poll-period=300000</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--estimator=exponential</span></span><br><span class=\"line\">          <span class=\"comment\"># Specifies the smallest cluster (defined in number of nodes)</span></span><br><span class=\"line\">          <span class=\"comment\"># resources will be scaled to.</span></span><br><span class=\"line\">          <span class=\"comment\">#- --minClusterSize=&#123;&#123; metrics_server_min_cluster_size &#125;&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">\"CriticalAddonsOnly\"</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">\"Exists\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-server-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/name:</span> <span class=\"string\">\"Metrics-server\"</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"string\">https</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>将上述yaml文件准备好，直接执行下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f metric-rbac.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-apiservice.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>部署完成后检查并校验是否能够正常工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get all -n kube-system | grep metrics</span><br><span class=\"line\">$ kubectl top node</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"check.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"metrics-server介绍\"><a href=\"#metrics-server介绍\" class=\"headerlink\" title=\"metrics-server介绍\"></a>metrics-server介绍</h2><p>metrics-server是一个集群内的性能监控服务，可以用来在集群范围可以进行资源使用状况信息的收集，它通过Kubelet收集在各个节点上提供的指标信息。很多功能例如自动扩缩容都依赖它。</p>\n<br>\n\n\n\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p>kube-apiserver需要设置如下的参数：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">--requestheader-client-ca-file=/opt/kubernetes/cert/ca.pem</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-username-headers=X-Remote-User</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-group-headers=X-Remote-Group</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-extra-headers-prefix=X-Remote-Extra-</span> </span><br><span class=\"line\"><span class=\"string\">--requestheader-allowed-names=\"\"</span></span><br><span class=\"line\"><span class=\"string\">--proxy-client-key-file=/opt/kubernetes/cert/st01009vm2-key.pem</span> </span><br><span class=\"line\"><span class=\"string\">--proxy-client-cert-file=/opt/kubernetes/cert/st01009vm2.pem</span> </span><br><span class=\"line\"><span class=\"string\">--enable-aggregator-routing=true</span></span><br><span class=\"line\"><span class=\"string\">--runtime-config=api/all</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–requestheader-XXX、–proxy-client-XXX 是 kube-apiserver 的 aggregator layer 相关的配置参数，metrics-server &amp; HPA 需要使用；</li>\n<li>–requestheader-client-ca-file：用于签名 –proxy-client-cert-file 和 –proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用；</li>\n<li>如果 –requestheader-allowed-names 不为空，则–proxy-client-cert-file 证书的 CN 必须位于 allowed-names 中，默认为 aggregator，这里让其匹配所有名称；</li>\n</ul>\n<blockquote>\n<p>如果是kubeadm部署，默认已经添加了</p>\n</blockquote>\n<br>\n\n\n\n<h2 id=\"yaml文件准备\"><a href=\"#yaml文件准备\" class=\"headerlink\" title=\"yaml文件准备\"></a>yaml文件准备</h2><p>可以从官方获取，地址为：<a href=\"https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/metrics-server\" target=\"_blank\" rel=\"noopener\">metrics-server</a>，或者使用下面的yaml文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server:system:auth-delegator</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:auth-delegator</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-auth-reader</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">extension-apiserver-authentication-reader</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"string\">---</span> </span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodes/stats</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"extensions\"</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deployments</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">update</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">system:metrics-server</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-apiservice.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apiregistration.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">APIService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">v1beta1.metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">service:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">group:</span> <span class=\"string\">metrics.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"string\">v1beta1</span></span><br><span class=\"line\">  <span class=\"attr\">insecureSkipTLSVerify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">groupPriorityMinimum:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"attr\">versionPriority:</span> <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-server-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">EnsureExists</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">NannyConfiguration:</span> <span class=\"string\">|-</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">nannyconfig/v1alpha1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">NannyConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v0.3.6</span></span><br><span class=\"line\">      <span class=\"attr\">annotations:</span></span><br><span class=\"line\">        <span class=\"attr\">scheduler.alpha.kubernetes.io/critical-pod:</span> <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"attr\">seccomp.security.alpha.kubernetes.io/pod:</span> <span class=\"string\">'docker/default'</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">priorityClassName:</span> <span class=\"string\">system-cluster-critical</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/metrics-server-amd64:v0.3.6</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/metrics-server</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--metric-resolution=30s</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-insecure-tls</span></span><br><span class=\"line\">        <span class=\"comment\"># These are needed for GKE, which doesn't support secure communication yet.</span></span><br><span class=\"line\">        <span class=\"comment\"># Remove these lines for non-GKE clusters, and when GKE supports token-based auth.</span></span><br><span class=\"line\">        <span class=\"comment\">#- --kubelet-port=10255</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span></span><br><span class=\"line\">        <span class=\"comment\">#- --deprecated-kubelet-completely-insecure=true</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">443</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">https</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-nanny</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">mirrorgooglecontainers/addon-resizer:1.8.4</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">300Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">5m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MY_POD_NAMESPACE</span></span><br><span class=\"line\">            <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">              <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.namespace</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/config</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">/pod_nanny</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--config-dir=/etc/config</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--cpu=80m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-cpu=0.5m</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--memory=80Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--extra-memory=8Mi</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--threshold=5</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--deployment=metrics-server-v0.3.6</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--container=metrics-server</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--poll-period=300000</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">--estimator=exponential</span></span><br><span class=\"line\">          <span class=\"comment\"># Specifies the smallest cluster (defined in number of nodes)</span></span><br><span class=\"line\">          <span class=\"comment\"># resources will be scaled to.</span></span><br><span class=\"line\">          <span class=\"comment\">#- --minClusterSize=&#123;&#123; metrics_server_min_cluster_size &#125;&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">metrics-server-config</span></span><br><span class=\"line\">      <span class=\"attr\">tolerations:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">\"CriticalAddonsOnly\"</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">\"Exists\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># metric-server-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/name:</span> <span class=\"string\">\"Metrics-server\"</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">metrics-server</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"string\">https</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>将上述yaml文件准备好，直接执行下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f metric-rbac.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-apiservice.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f metric-server-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>部署完成后检查并校验是否能够正常工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get all -n kube-system | grep metrics</span><br><span class=\"line\">$ kubectl top node</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"check.png\" alt=\"\"></p>\n"},{"title":"部署Nginx","date":"2020-07-05T07:10:51.000Z","description":"使用yum和源码两种方式部署Nginx","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593943627391&di=d6453026cf2261fcc6ef47454aef5be2&imgtype=0&src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D292861757%2C2192443207%26fm%3D214%26gp%3D0.jpg","_content":"\n\n\n## YUM方式部署\n\n### 安装依赖\n\n```bash\n$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n 有些工具包也可以选择安装：\n\n```bash\n$ yum install -y wget http-tools vim\n```\n\n‌\n\n### 添加yum源\n\n```bash\n$ cat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n```\n\n‌\n\n### 安装nginx\n\n```bash\n# 查看nginx版本\n$ yum list | grep nginx\n\n# 安装最新版\n$ yum install -y nginx\n```\n\n\n\n### 查看nginx版本和编译参数\n\n```bash\n# 查看nginx版本\n$ nginx -v\n\n# 查看nginx编译参数\n$ nginx -V\n```\n\n\n\n### 默认安装的目录和文件\n\n使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：\n\n```bash\n$ rpm -ql nginx\n```\n\n\n\n重要的配置文件如下：\n\n- `/etc/logrotate.d/nginx`：nginx配置logrotate日志切割的配置文件；\n- `/etc/nginx`：安装目录；\n- `/etc/nginx/nginx.conf`：主配置文件；\n- `/etc/nginx/conf.d`：其他配置存放的目录；\n- `/etc/nginx/conf.d/default.conf`：默认加载的配置；\n- `/etc/nginx/fastcgi_params`：fastcgi配置文件；\n- `/etc/nginx/scgi_params`：scgi配置文件；\n- `/etc/nginx/uwsgi_params`：uwsgi配置文件；\n- `/etc/nginx/{koi-win, koi-utf, win-utf}`：编码转换配置文件；\n- `/etc/nginx/mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n- `/var/cache/nginx`：用于缓存的目录；\n- `/var/log/nginx`：日志目录；\n\n\n\n### nginx启动\n\n```bash\n# 启动\n$ systemctl start nginx\n\n# 开机自启动\n$ systemctl enable nginx\n\n# 查看nginx状态\n$ systemctl status nginx\n\n# 停止nginx\n$ systemctl stop nginx\n\n# 重启\n$ systemctl restart nginx\n```\n\n<br>\n\n------\n\n\n\n## 源码方式部署\n\n### 安装依赖\n\n```bash\n$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n### 下载源码包\n\n这里我使用的是1.18.0版本\n\n```bash\n$ wget http://nginx.org/download/nginx-1.18.0.tar.gz\n```\n\n\n\n### 编译安装\n\n```bash\n# 添加用户和组\n$ groupadd nginx\n$ useradd -g nginx nginx \n\n# 编译安装\n$ tar zxf nginx-1.18.0.tar.gz\n$ cd nginx-1.18.0\n$ ./configure \\\n--user=nginx \\\n--group=nginx \\\n--prefix=/usr/local/nginx \\\n--with-http_ssl_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-threads\n\n$ make && make install\n\n# 设置环境变量\n$ echo \"export PATH=$PATH:/usr/local/nginx/sbin\" >> /etc/profile\n$ source /etc/profile\n```\n\n> 根据实际需求增减编译的模块\n\n\n\n### 检查\n\n```bash\n$ nginx -v\n$ nginx -V\n```\n\n\n\n![](install_source.png)\n\n\n\n### 设置启动文件\n\n```bash\n$ cat > /usr/lib/systemd/system/nginx.service << EOF\n[Unit]\nDescription=nginx service\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s quit\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n\n\n### 启动nginx\n\n```bash\n$ systemctl daemon-reload\n$ systemctl start nginx\n$ systemctl enable nginx\n$ systemctl status nginx\n```\n\n\n\n### 安装的文件\n\n在编译的时候指定了nginx的安装目录为：`--prefix=/usr/local/nginx`，安装后会有以下文件：\n\n- `conf`：配置文件目录；\n  - `fastcgi.conf`：fastcgi配置文件；\n  - `mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n  - `uwsgi_params`：uwsgi配置文件；\n  - `koi-win, koi-utf, win-utf`：编码转换配置文件；\n  - `scgi_params`：scgi配置文件；\n  - `fastcgi_params`：fastcgi配置文件；\n  - `nginx.conf`：nginx主配置文件；\n- `html`：默认的静态文件根目录；\n- `sbin`：二进制命令文件目录；\n\n","source":"_posts/部署Nginx.md","raw":"---\ntitle: 部署Nginx\ndate: 2020-07-05 15:10:51\ntags:\n- Nginx\ncategories: Nginx\ndescription: 使用yum和源码两种方式部署Nginx\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593943627391&di=d6453026cf2261fcc6ef47454aef5be2&imgtype=0&src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D292861757%2C2192443207%26fm%3D214%26gp%3D0.jpg\n---\n\n\n\n## YUM方式部署\n\n### 安装依赖\n\n```bash\n$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n 有些工具包也可以选择安装：\n\n```bash\n$ yum install -y wget http-tools vim\n```\n\n‌\n\n### 添加yum源\n\n```bash\n$ cat > /etc/yum.repos.d/nginx.repo << EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n```\n\n‌\n\n### 安装nginx\n\n```bash\n# 查看nginx版本\n$ yum list | grep nginx\n\n# 安装最新版\n$ yum install -y nginx\n```\n\n\n\n### 查看nginx版本和编译参数\n\n```bash\n# 查看nginx版本\n$ nginx -v\n\n# 查看nginx编译参数\n$ nginx -V\n```\n\n\n\n### 默认安装的目录和文件\n\n使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：\n\n```bash\n$ rpm -ql nginx\n```\n\n\n\n重要的配置文件如下：\n\n- `/etc/logrotate.d/nginx`：nginx配置logrotate日志切割的配置文件；\n- `/etc/nginx`：安装目录；\n- `/etc/nginx/nginx.conf`：主配置文件；\n- `/etc/nginx/conf.d`：其他配置存放的目录；\n- `/etc/nginx/conf.d/default.conf`：默认加载的配置；\n- `/etc/nginx/fastcgi_params`：fastcgi配置文件；\n- `/etc/nginx/scgi_params`：scgi配置文件；\n- `/etc/nginx/uwsgi_params`：uwsgi配置文件；\n- `/etc/nginx/{koi-win, koi-utf, win-utf}`：编码转换配置文件；\n- `/etc/nginx/mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n- `/var/cache/nginx`：用于缓存的目录；\n- `/var/log/nginx`：日志目录；\n\n\n\n### nginx启动\n\n```bash\n# 启动\n$ systemctl start nginx\n\n# 开机自启动\n$ systemctl enable nginx\n\n# 查看nginx状态\n$ systemctl status nginx\n\n# 停止nginx\n$ systemctl stop nginx\n\n# 重启\n$ systemctl restart nginx\n```\n\n<br>\n\n------\n\n\n\n## 源码方式部署\n\n### 安装依赖\n\n```bash\n$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel\n```\n\n\n\n### 下载源码包\n\n这里我使用的是1.18.0版本\n\n```bash\n$ wget http://nginx.org/download/nginx-1.18.0.tar.gz\n```\n\n\n\n### 编译安装\n\n```bash\n# 添加用户和组\n$ groupadd nginx\n$ useradd -g nginx nginx \n\n# 编译安装\n$ tar zxf nginx-1.18.0.tar.gz\n$ cd nginx-1.18.0\n$ ./configure \\\n--user=nginx \\\n--group=nginx \\\n--prefix=/usr/local/nginx \\\n--with-http_ssl_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-threads\n\n$ make && make install\n\n# 设置环境变量\n$ echo \"export PATH=$PATH:/usr/local/nginx/sbin\" >> /etc/profile\n$ source /etc/profile\n```\n\n> 根据实际需求增减编译的模块\n\n\n\n### 检查\n\n```bash\n$ nginx -v\n$ nginx -V\n```\n\n\n\n![](install_source.png)\n\n\n\n### 设置启动文件\n\n```bash\n$ cat > /usr/lib/systemd/system/nginx.service << EOF\n[Unit]\nDescription=nginx service\nAfter=network.target\n\n[Service]\nType=forking\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s quit\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n\n\n### 启动nginx\n\n```bash\n$ systemctl daemon-reload\n$ systemctl start nginx\n$ systemctl enable nginx\n$ systemctl status nginx\n```\n\n\n\n### 安装的文件\n\n在编译的时候指定了nginx的安装目录为：`--prefix=/usr/local/nginx`，安装后会有以下文件：\n\n- `conf`：配置文件目录；\n  - `fastcgi.conf`：fastcgi配置文件；\n  - `mime.types`：设置http协议的Content-Type与扩展名对应关系的配置文件；\n  - `uwsgi_params`：uwsgi配置文件；\n  - `koi-win, koi-utf, win-utf`：编码转换配置文件；\n  - `scgi_params`：scgi配置文件；\n  - `fastcgi_params`：fastcgi配置文件；\n  - `nginx.conf`：nginx主配置文件；\n- `html`：默认的静态文件根目录；\n- `sbin`：二进制命令文件目录；\n\n","slug":"部署Nginx","published":1,"updated":"2020-07-05T07:19:26.797Z","_id":"ckc8quso800001sje8x2e4mkt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"YUM方式部署\"><a href=\"#YUM方式部署\" class=\"headerlink\" title=\"YUM方式部署\"></a>YUM方式部署</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 有些工具包也可以选择安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y wget http-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h3 id=\"添加yum源\"><a href=\"#添加yum源\" class=\"headerlink\" title=\"添加yum源\"></a>添加yum源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; EOF</span><br><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[nginx-mainline]</span><br><span class=\"line\">name=nginx mainline repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/mainline/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">$ yum list | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装最新版</span></span><br><span class=\"line\">$ yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看nginx版本和编译参数\"><a href=\"#查看nginx版本和编译参数\" class=\"headerlink\" title=\"查看nginx版本和编译参数\"></a>查看nginx版本和编译参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">$ nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx编译参数</span></span><br><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"默认安装的目录和文件\"><a href=\"#默认安装的目录和文件\" class=\"headerlink\" title=\"默认安装的目录和文件\"></a>默认安装的目录和文件</h3><p>使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重要的配置文件如下：</p>\n<ul>\n<li><code>/etc/logrotate.d/nginx</code>：nginx配置logrotate日志切割的配置文件；</li>\n<li><code>/etc/nginx</code>：安装目录；</li>\n<li><code>/etc/nginx/nginx.conf</code>：主配置文件；</li>\n<li><code>/etc/nginx/conf.d</code>：其他配置存放的目录；</li>\n<li><code>/etc/nginx/conf.d/default.conf</code>：默认加载的配置；</li>\n<li><code>/etc/nginx/fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>/etc/nginx/scgi_params</code>：scgi配置文件；</li>\n<li><code>/etc/nginx/uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>/etc/nginx/{koi-win, koi-utf, win-utf}</code>：编码转换配置文件；</li>\n<li><code>/etc/nginx/mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>/var/cache/nginx</code>：用于缓存的目录；</li>\n<li><code>/var/log/nginx</code>：日志目录；</li>\n</ul>\n<h3 id=\"nginx启动\"><a href=\"#nginx启动\" class=\"headerlink\" title=\"nginx启动\"></a>nginx启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自启动</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx状态</span></span><br><span class=\"line\">$ systemctl status nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止nginx</span></span><br><span class=\"line\">$ systemctl stop nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">$ systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"源码方式部署\"><a href=\"#源码方式部署\" class=\"headerlink\" title=\"源码方式部署\"></a>源码方式部署</h2><h3 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h3><p>这里我使用的是1.18.0版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加用户和组</span></span><br><span class=\"line\">$ groupadd nginx</span><br><span class=\"line\">$ useradd -g nginx nginx </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">$ tar zxf nginx-1.18.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-1.18.0</span><br><span class=\"line\">$ ./configure \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-threads</span><br><span class=\"line\"></span><br><span class=\"line\">$ make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/local/nginx/sbin\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>根据实际需求增减编译的模块</p>\n</blockquote>\n<h3 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -v</span><br><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"install_source.png\" alt=\"\"></p>\n<h3 id=\"设置启动文件\"><a href=\"#设置启动文件\" class=\"headerlink\" title=\"设置启动文件\"></a>设置启动文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /usr/lib/systemd/system/nginx.service &lt;&lt; EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nginx service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx</span><br><span class=\"line\">ExecReload=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s quit</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\">$ systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装的文件\"><a href=\"#安装的文件\" class=\"headerlink\" title=\"安装的文件\"></a>安装的文件</h3><p>在编译的时候指定了nginx的安装目录为：<code>--prefix=/usr/local/nginx</code>，安装后会有以下文件：</p>\n<ul>\n<li><code>conf</code>：配置文件目录；<ul>\n<li><code>fastcgi.conf</code>：fastcgi配置文件；</li>\n<li><code>mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>koi-win, koi-utf, win-utf</code>：编码转换配置文件；</li>\n<li><code>scgi_params</code>：scgi配置文件；</li>\n<li><code>fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>nginx.conf</code>：nginx主配置文件；</li>\n</ul>\n</li>\n<li><code>html</code>：默认的静态文件根目录；</li>\n<li><code>sbin</code>：二进制命令文件目录；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"YUM方式部署\"><a href=\"#YUM方式部署\" class=\"headerlink\" title=\"YUM方式部署\"></a>YUM方式部署</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p> 有些工具包也可以选择安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y wget http-tools vim</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h3 id=\"添加yum源\"><a href=\"#添加yum源\" class=\"headerlink\" title=\"添加yum源\"></a>添加yum源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; EOF</span><br><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[nginx-mainline]</span><br><span class=\"line\">name=nginx mainline repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/mainline/centos/\\<span class=\"variable\">$releasever</span>/\\<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">$ yum list | grep nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装最新版</span></span><br><span class=\"line\">$ yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看nginx版本和编译参数\"><a href=\"#查看nginx版本和编译参数\" class=\"headerlink\" title=\"查看nginx版本和编译参数\"></a>查看nginx版本和编译参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nginx版本</span></span><br><span class=\"line\">$ nginx -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx编译参数</span></span><br><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"默认安装的目录和文件\"><a href=\"#默认安装的目录和文件\" class=\"headerlink\" title=\"默认安装的目录和文件\"></a>默认安装的目录和文件</h3><p>使用下面的命令可以查看nginx通过rpm方式安装的目录结构和文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -ql nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重要的配置文件如下：</p>\n<ul>\n<li><code>/etc/logrotate.d/nginx</code>：nginx配置logrotate日志切割的配置文件；</li>\n<li><code>/etc/nginx</code>：安装目录；</li>\n<li><code>/etc/nginx/nginx.conf</code>：主配置文件；</li>\n<li><code>/etc/nginx/conf.d</code>：其他配置存放的目录；</li>\n<li><code>/etc/nginx/conf.d/default.conf</code>：默认加载的配置；</li>\n<li><code>/etc/nginx/fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>/etc/nginx/scgi_params</code>：scgi配置文件；</li>\n<li><code>/etc/nginx/uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>/etc/nginx/{koi-win, koi-utf, win-utf}</code>：编码转换配置文件；</li>\n<li><code>/etc/nginx/mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>/var/cache/nginx</code>：用于缓存的目录；</li>\n<li><code>/var/log/nginx</code>：日志目录；</li>\n</ul>\n<h3 id=\"nginx启动\"><a href=\"#nginx启动\" class=\"headerlink\" title=\"nginx启动\"></a>nginx启动</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机自启动</span></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看nginx状态</span></span><br><span class=\"line\">$ systemctl status nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止nginx</span></span><br><span class=\"line\">$ systemctl stop nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">$ systemctl restart nginx</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"源码方式部署\"><a href=\"#源码方式部署\" class=\"headerlink\" title=\"源码方式部署\"></a>源码方式部署</h2><h3 id=\"安装依赖-1\"><a href=\"#安装依赖-1\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc gcc-c++ autoconf pcre pcre-devel make automake yum-utils zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h3><p>这里我使用的是1.18.0版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加用户和组</span></span><br><span class=\"line\">$ groupadd nginx</span><br><span class=\"line\">$ useradd -g nginx nginx </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">$ tar zxf nginx-1.18.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> nginx-1.18.0</span><br><span class=\"line\">$ ./configure \\</span><br><span class=\"line\">--user=nginx \\</span><br><span class=\"line\">--group=nginx \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--with-http_ssl_module \\</span><br><span class=\"line\">--with-http_stub_status_module \\</span><br><span class=\"line\">--with-http_realip_module \\</span><br><span class=\"line\">--with-threads</span><br><span class=\"line\"></span><br><span class=\"line\">$ make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/local/nginx/sbin\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>根据实际需求增减编译的模块</p>\n</blockquote>\n<h3 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -v</span><br><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"install_source.png\" alt=\"\"></p>\n<h3 id=\"设置启动文件\"><a href=\"#设置启动文件\" class=\"headerlink\" title=\"设置启动文件\"></a>设置启动文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /usr/lib/systemd/system/nginx.service &lt;&lt; EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nginx service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx</span><br><span class=\"line\">ExecReload=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s quit</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl daemon-reload</span><br><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\">$ systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装的文件\"><a href=\"#安装的文件\" class=\"headerlink\" title=\"安装的文件\"></a>安装的文件</h3><p>在编译的时候指定了nginx的安装目录为：<code>--prefix=/usr/local/nginx</code>，安装后会有以下文件：</p>\n<ul>\n<li><code>conf</code>：配置文件目录；<ul>\n<li><code>fastcgi.conf</code>：fastcgi配置文件；</li>\n<li><code>mime.types</code>：设置http协议的Content-Type与扩展名对应关系的配置文件；</li>\n<li><code>uwsgi_params</code>：uwsgi配置文件；</li>\n<li><code>koi-win, koi-utf, win-utf</code>：编码转换配置文件；</li>\n<li><code>scgi_params</code>：scgi配置文件；</li>\n<li><code>fastcgi_params</code>：fastcgi配置文件；</li>\n<li><code>nginx.conf</code>：nginx主配置文件；</li>\n</ul>\n</li>\n<li><code>html</code>：默认的静态文件根目录；</li>\n<li><code>sbin</code>：二进制命令文件目录；</li>\n</ul>\n"},{"title":"升级Nginx","date":"2020-07-05T07:22:46.000Z","description":"两种升级Nginx服务的方式","cover":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1375552705,3642822908&fm=26&gp=0.jpg","_content":"\n\n\n# 停机升级\n\n停机升级的过程就是直接将新版本的二进制文件进行替换，然后重启nginx进程即可。\n\n\n\n<br>\n\n\n\n# 平滑升级\n\n## 确认旧版本\n\n首先通过命令确定旧版本nginx进程存在：\n\n```bash\n$ ps aux | grep nginx\n```\n\n\n\n![](1.png)\n\n\n\n## 编译安装新版本\n\n首先获取旧版本的编译选项：\n\n```bash\n$ nginx -V\n```\n\n![](2.png)\n\n\n\n找到编译命令后，用这个命令编译新版本：\n\n```bash\n$ wget http://nginx.org/download/nginx-1.18.0.tar.gz\n$ mv nginx-1.18.0.tar.gz /usr/local\n$ cd /usr/local\n$ tar xf nginx-1.18.0.tar.gz\n$ cd /usr/local/nginx-1.18.0\n$ ./configure --prefix=/usr/local/nginx \\\n              --with-http_ssl_module \\\n              --with-http_v2_module \\\n              --with-http_realip_module \\\n              --with-http_addition_module \\\n              --with-http_image_filter_module \\\n              --with-http_geoip_module \\\n              --with-http_gunzip_module \\\n              --with-http_stub_status_module \\\n              --with-http_gzip_static_module \\\n              --with-pcre --with-stream \\\n              --with-stream_ssl_module \\\n              --with-stream_realip_module\n$ make \n```\n\n> 注意`--prefix`指向的是旧版本的目录，编译后先不`make install`\n\n\n\n## 备份原来的二进制程序\n\n```bash\n$ cd /usr/local/nginx/sbin\n$ cp nginx nginx.bak\n$ ./nginx -V\n```\n\n![](3.png)\n\n\n\n## 更新二进制程序\n\n在下载的新版本源码包中找到新版本的二进制程序：\n\n```bash\n$ cd /usr/local/nginx-1.18.0/objs\n\n# 用新版本覆盖旧版本\n$ cp -f nginx /usr/local/nginx/sbin/nginx\n```\n\n\n\n## 旧版本平滑停止请求\n\n当前还是旧版本的在运行，查看进程信息：\n\n```bash\n$ ps aux | grep nginx\n```\n\n\n\n![](1.png)\n\n> 可以看到，父进程的id为17400\n\n\n\n向父进程发送`USER2`信号，让新的子进程接收请求，旧的子进程不再接收新请求：\n\n```bash\n$ kill -USER2 17400\n```\n\n\n\n此时查看进程信息，发现同时存在新旧版本：\n\n```bash\n$ ps aux | grep nginx\n```\n\n![](4.png)\n\n> 尽管旧进程在监听，但不会处理新的请求。\n\n\n\n## 关闭旧进程\n\n```bash\n$ kill -WINCH 17440 \n```\n\n\n\n现在查看进程信息：\n\n```bash\n$ ps aux | grep nginx\n```\n\n![](5.png)\n\n> 现在只剩下新版本的nginx进程了\n\n\n\n查看当前的版本：\n\n```bash\n$ nginx -V\n```\n\n![](6.png)\n\n<br>\n\n","source":"_posts/升级Nginx.md","raw":"---\ntitle: 升级Nginx\ndate: 2020-07-05 15:22:46\ntags:\n- Nginx\ncategories: Nginx\ndescription: 两种升级Nginx服务的方式\ncover: https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1375552705,3642822908&fm=26&gp=0.jpg\n---\n\n\n\n# 停机升级\n\n停机升级的过程就是直接将新版本的二进制文件进行替换，然后重启nginx进程即可。\n\n\n\n<br>\n\n\n\n# 平滑升级\n\n## 确认旧版本\n\n首先通过命令确定旧版本nginx进程存在：\n\n```bash\n$ ps aux | grep nginx\n```\n\n\n\n![](1.png)\n\n\n\n## 编译安装新版本\n\n首先获取旧版本的编译选项：\n\n```bash\n$ nginx -V\n```\n\n![](2.png)\n\n\n\n找到编译命令后，用这个命令编译新版本：\n\n```bash\n$ wget http://nginx.org/download/nginx-1.18.0.tar.gz\n$ mv nginx-1.18.0.tar.gz /usr/local\n$ cd /usr/local\n$ tar xf nginx-1.18.0.tar.gz\n$ cd /usr/local/nginx-1.18.0\n$ ./configure --prefix=/usr/local/nginx \\\n              --with-http_ssl_module \\\n              --with-http_v2_module \\\n              --with-http_realip_module \\\n              --with-http_addition_module \\\n              --with-http_image_filter_module \\\n              --with-http_geoip_module \\\n              --with-http_gunzip_module \\\n              --with-http_stub_status_module \\\n              --with-http_gzip_static_module \\\n              --with-pcre --with-stream \\\n              --with-stream_ssl_module \\\n              --with-stream_realip_module\n$ make \n```\n\n> 注意`--prefix`指向的是旧版本的目录，编译后先不`make install`\n\n\n\n## 备份原来的二进制程序\n\n```bash\n$ cd /usr/local/nginx/sbin\n$ cp nginx nginx.bak\n$ ./nginx -V\n```\n\n![](3.png)\n\n\n\n## 更新二进制程序\n\n在下载的新版本源码包中找到新版本的二进制程序：\n\n```bash\n$ cd /usr/local/nginx-1.18.0/objs\n\n# 用新版本覆盖旧版本\n$ cp -f nginx /usr/local/nginx/sbin/nginx\n```\n\n\n\n## 旧版本平滑停止请求\n\n当前还是旧版本的在运行，查看进程信息：\n\n```bash\n$ ps aux | grep nginx\n```\n\n\n\n![](1.png)\n\n> 可以看到，父进程的id为17400\n\n\n\n向父进程发送`USER2`信号，让新的子进程接收请求，旧的子进程不再接收新请求：\n\n```bash\n$ kill -USER2 17400\n```\n\n\n\n此时查看进程信息，发现同时存在新旧版本：\n\n```bash\n$ ps aux | grep nginx\n```\n\n![](4.png)\n\n> 尽管旧进程在监听，但不会处理新的请求。\n\n\n\n## 关闭旧进程\n\n```bash\n$ kill -WINCH 17440 \n```\n\n\n\n现在查看进程信息：\n\n```bash\n$ ps aux | grep nginx\n```\n\n![](5.png)\n\n> 现在只剩下新版本的nginx进程了\n\n\n\n查看当前的版本：\n\n```bash\n$ nginx -V\n```\n\n![](6.png)\n\n<br>\n\n","slug":"升级Nginx","published":1,"updated":"2020-09-09T12:15:37.105Z","_id":"ckc8r4pgk00005eje1h02b65q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"停机升级\"><a href=\"#停机升级\" class=\"headerlink\" title=\"停机升级\"></a>停机升级</h1><p>停机升级的过程就是直接将新版本的二进制文件进行替换，然后重启nginx进程即可。</p>\n<br>\n\n\n\n<h1 id=\"平滑升级\"><a href=\"#平滑升级\" class=\"headerlink\" title=\"平滑升级\"></a>平滑升级</h1><h2 id=\"确认旧版本\"><a href=\"#确认旧版本\" class=\"headerlink\" title=\"确认旧版本\"></a>确认旧版本</h2><p>首先通过命令确定旧版本nginx进程存在：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"1.png\" alt=\"\"></p>\n<h2 id=\"编译安装新版本\"><a href=\"#编译安装新版本\" class=\"headerlink\" title=\"编译安装新版本\"></a>编译安装新版本</h2><p>首先获取旧版本的编译选项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"2.png\" alt=\"\"></p>\n<p>找到编译命令后，用这个命令编译新版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class=\"line\">$ mv nginx-1.18.0.tar.gz /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">$ tar xf nginx-1.18.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx-1.18.0</span><br><span class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">              --with-http_ssl_module \\</span><br><span class=\"line\">              --with-http_v2_module \\</span><br><span class=\"line\">              --with-http_realip_module \\</span><br><span class=\"line\">              --with-http_addition_module \\</span><br><span class=\"line\">              --with-http_image_filter_module \\</span><br><span class=\"line\">              --with-http_geoip_module \\</span><br><span class=\"line\">              --with-http_gunzip_module \\</span><br><span class=\"line\">              --with-http_stub_status_module \\</span><br><span class=\"line\">              --with-http_gzip_static_module \\</span><br><span class=\"line\">              --with-pcre --with-stream \\</span><br><span class=\"line\">              --with-stream_ssl_module \\</span><br><span class=\"line\">              --with-stream_realip_module</span><br><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意<code>--prefix</code>指向的是旧版本的目录，编译后先不<code>make install</code></p>\n</blockquote>\n<h2 id=\"备份原来的二进制程序\"><a href=\"#备份原来的二进制程序\" class=\"headerlink\" title=\"备份原来的二进制程序\"></a>备份原来的二进制程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\">$ cp nginx nginx.bak</span><br><span class=\"line\">$ ./nginx -V</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"3.png\" alt=\"\"></p>\n<h2 id=\"更新二进制程序\"><a href=\"#更新二进制程序\" class=\"headerlink\" title=\"更新二进制程序\"></a>更新二进制程序</h2><p>在下载的新版本源码包中找到新版本的二进制程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx-1.18.0/objs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用新版本覆盖旧版本</span></span><br><span class=\"line\">$ cp -f nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"旧版本平滑停止请求\"><a href=\"#旧版本平滑停止请求\" class=\"headerlink\" title=\"旧版本平滑停止请求\"></a>旧版本平滑停止请求</h2><p>当前还是旧版本的在运行，查看进程信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"1.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到，父进程的id为17400</p>\n</blockquote>\n<p>向父进程发送<code>USER2</code>信号，让新的子进程接收请求，旧的子进程不再接收新请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -USER2 17400</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时查看进程信息，发现同时存在新旧版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"4.png\" alt=\"\"></p>\n<blockquote>\n<p>尽管旧进程在监听，但不会处理新的请求。</p>\n</blockquote>\n<h2 id=\"关闭旧进程\"><a href=\"#关闭旧进程\" class=\"headerlink\" title=\"关闭旧进程\"></a>关闭旧进程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -WINCH 17440</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在查看进程信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"5.png\" alt=\"\"></p>\n<blockquote>\n<p>现在只剩下新版本的nginx进程了</p>\n</blockquote>\n<p>查看当前的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"6.png\" alt=\"\"></p>\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"停机升级\"><a href=\"#停机升级\" class=\"headerlink\" title=\"停机升级\"></a>停机升级</h1><p>停机升级的过程就是直接将新版本的二进制文件进行替换，然后重启nginx进程即可。</p>\n<br>\n\n\n\n<h1 id=\"平滑升级\"><a href=\"#平滑升级\" class=\"headerlink\" title=\"平滑升级\"></a>平滑升级</h1><h2 id=\"确认旧版本\"><a href=\"#确认旧版本\" class=\"headerlink\" title=\"确认旧版本\"></a>确认旧版本</h2><p>首先通过命令确定旧版本nginx进程存在：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"1.png\" alt=\"\"></p>\n<h2 id=\"编译安装新版本\"><a href=\"#编译安装新版本\" class=\"headerlink\" title=\"编译安装新版本\"></a>编译安装新版本</h2><p>首先获取旧版本的编译选项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"2.png\" alt=\"\"></p>\n<p>找到编译命令后，用这个命令编译新版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class=\"line\">$ mv nginx-1.18.0.tar.gz /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">$ tar xf nginx-1.18.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx-1.18.0</span><br><span class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">              --with-http_ssl_module \\</span><br><span class=\"line\">              --with-http_v2_module \\</span><br><span class=\"line\">              --with-http_realip_module \\</span><br><span class=\"line\">              --with-http_addition_module \\</span><br><span class=\"line\">              --with-http_image_filter_module \\</span><br><span class=\"line\">              --with-http_geoip_module \\</span><br><span class=\"line\">              --with-http_gunzip_module \\</span><br><span class=\"line\">              --with-http_stub_status_module \\</span><br><span class=\"line\">              --with-http_gzip_static_module \\</span><br><span class=\"line\">              --with-pcre --with-stream \\</span><br><span class=\"line\">              --with-stream_ssl_module \\</span><br><span class=\"line\">              --with-stream_realip_module</span><br><span class=\"line\">$ make</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意<code>--prefix</code>指向的是旧版本的目录，编译后先不<code>make install</code></p>\n</blockquote>\n<h2 id=\"备份原来的二进制程序\"><a href=\"#备份原来的二进制程序\" class=\"headerlink\" title=\"备份原来的二进制程序\"></a>备份原来的二进制程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\">$ cp nginx nginx.bak</span><br><span class=\"line\">$ ./nginx -V</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"3.png\" alt=\"\"></p>\n<h2 id=\"更新二进制程序\"><a href=\"#更新二进制程序\" class=\"headerlink\" title=\"更新二进制程序\"></a>更新二进制程序</h2><p>在下载的新版本源码包中找到新版本的二进制程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx-1.18.0/objs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用新版本覆盖旧版本</span></span><br><span class=\"line\">$ cp -f nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"旧版本平滑停止请求\"><a href=\"#旧版本平滑停止请求\" class=\"headerlink\" title=\"旧版本平滑停止请求\"></a>旧版本平滑停止请求</h2><p>当前还是旧版本的在运行，查看进程信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"1.png\" alt=\"\"></p>\n<blockquote>\n<p>可以看到，父进程的id为17400</p>\n</blockquote>\n<p>向父进程发送<code>USER2</code>信号，让新的子进程接收请求，旧的子进程不再接收新请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -USER2 17400</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时查看进程信息，发现同时存在新旧版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"4.png\" alt=\"\"></p>\n<blockquote>\n<p>尽管旧进程在监听，但不会处理新的请求。</p>\n</blockquote>\n<h2 id=\"关闭旧进程\"><a href=\"#关闭旧进程\" class=\"headerlink\" title=\"关闭旧进程\"></a>关闭旧进程</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -WINCH 17440</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在查看进程信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps aux | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"5.png\" alt=\"\"></p>\n<blockquote>\n<p>现在只剩下新版本的nginx进程了</p>\n</blockquote>\n<p>查看当前的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -V</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"6.png\" alt=\"\"></p>\n<br>\n\n"},{"title":"部署Redis","date":"2020-07-05T13:12:32.000Z","description":"使用yum和源码两种方式部署Redis","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593964908993&di=2711fc4cc3a4ac713a65fe86d24bac76&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png","_content":"\n\n\n## yum方式部署\n\n### 依赖安装\n\n```bash\n$ yum install -y epel-release\n```\n\n\n\n###  安装Redis\n\n```bash\n$ yum install -y redis\n$ redis-cli --version\n```\n\n\n\n直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：\n\n```bash\n$ yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\n$ yum --enablerepo=remi install redis -y\n```\n\n\n\n###  设置配置文件\n\n修改`/etc/redis.conf`中的`bind`参数为下面的值，监听所有IP地址：\n\n```bash\nbind 0.0.0.0\n```\n\n<br>\n\n\n\n###  设置系统参数\n\n```bash\n$ sysctl vm.overcommit_memory=1\n$ echo \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n### 启动Redis\n\n```bash\n$ systemctl start redis\n$ systemctl enable redis\n$ systemctl status redis\n```\n\n<br>\n\n------\n\n\n\n## 源码方式安装\n\n### 安装依赖\n\n```bash\n$ yum install -y gcc gcc-c++\n```\n\n\n\n### 下载并编译\n\n```bash\n$ wget https://github.com/antirez/redis/archive/5.0.3.tar.gz\n$ tar zxf 5.0.3.tar.gz\n$ cd redis-5.0.3\n$ make PREFIX=/usr/local/redis install\n```\n\n\n\n###  设置环境变量和系统参数\n\n```bash\n$ echo \"PATH=$PATH:/usr/local/redis/bin\" >> /etc/profile\n$ source /etc/profile\n```\n\n\n\n安装后会在`/usr/local/redis`下生成安装目录，安装的命令有如下：\n\n```\n# /usr/local/redis/bin\nredis-benchmark：性能测试工具\nredis-check-aof：文件修复工具\nredis-check-dump：rbd文件检查工具\nredis-cli：客户端命令行工具\nredis-server：服务启动命令\n```\n\n\n\n设置系统参数：\n\n```bash\n$ sysctl vm.overcommit_memory=1\n$ echo \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n###  设置配置文件\n\n编辑配置文件`/usr/local/redis/redis.conf`，修改`daemonize`参数为下面的值，让redis在后台运行：\n\n```\ndaemonize yes\n```\n\n> 如果没有`redis.conf`，可以拷贝源码包中的配置文件过去\n\n\n\n###  启动Redis\n\n```bash\n$ redis-server /usr/loca/redis/redis.conf\n\n$ ps -ef | grep redis\nroot      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379\n\n$ netstat -ntlp | grep redis\ntcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server\n```\n\n\n\n###  连接Redis\n\n```bash\n$ redis-cli\n127.0.0.1:6379>\n```\n\n\n\n###  停止Redis\n\n```bash\n$ redis-cli shutdonw\n```\n\n","source":"_posts/部署Redis.md","raw":"---\ntitle: 部署Redis\ndate: 2020-07-05 21:12:32\ntags:\n- Redis\ncategories: \n- 数据库\n- Redis\ndescription: 使用yum和源码两种方式部署Redis\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593964908993&di=2711fc4cc3a4ac713a65fe86d24bac76&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180327%2F34adc98d775145f0b23c5fa67217af1d.png\n---\n\n\n\n## yum方式部署\n\n### 依赖安装\n\n```bash\n$ yum install -y epel-release\n```\n\n\n\n###  安装Redis\n\n```bash\n$ yum install -y redis\n$ redis-cli --version\n```\n\n\n\n直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：\n\n```bash\n$ yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\n$ yum --enablerepo=remi install redis -y\n```\n\n\n\n###  设置配置文件\n\n修改`/etc/redis.conf`中的`bind`参数为下面的值，监听所有IP地址：\n\n```bash\nbind 0.0.0.0\n```\n\n<br>\n\n\n\n###  设置系统参数\n\n```bash\n$ sysctl vm.overcommit_memory=1\n$ echo \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n### 启动Redis\n\n```bash\n$ systemctl start redis\n$ systemctl enable redis\n$ systemctl status redis\n```\n\n<br>\n\n------\n\n\n\n## 源码方式安装\n\n### 安装依赖\n\n```bash\n$ yum install -y gcc gcc-c++\n```\n\n\n\n### 下载并编译\n\n```bash\n$ wget https://github.com/antirez/redis/archive/5.0.3.tar.gz\n$ tar zxf 5.0.3.tar.gz\n$ cd redis-5.0.3\n$ make PREFIX=/usr/local/redis install\n```\n\n\n\n###  设置环境变量和系统参数\n\n```bash\n$ echo \"PATH=$PATH:/usr/local/redis/bin\" >> /etc/profile\n$ source /etc/profile\n```\n\n\n\n安装后会在`/usr/local/redis`下生成安装目录，安装的命令有如下：\n\n```\n# /usr/local/redis/bin\nredis-benchmark：性能测试工具\nredis-check-aof：文件修复工具\nredis-check-dump：rbd文件检查工具\nredis-cli：客户端命令行工具\nredis-server：服务启动命令\n```\n\n\n\n设置系统参数：\n\n```bash\n$ sysctl vm.overcommit_memory=1\n$ echo \"sysctl vm.overcommit_memory=1\" >> /etc/rc.local\n```\n\n\n\n`vm.overcommit_memory`是控制内存分配策略的参数：\n\n- 1：内核分配所有的物理内存而不管当前内存状态；\n- 0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；\n- 2：内核允许分配超过物理内存和交换空间总和的内存；\n\n\n\n###  设置配置文件\n\n编辑配置文件`/usr/local/redis/redis.conf`，修改`daemonize`参数为下面的值，让redis在后台运行：\n\n```\ndaemonize yes\n```\n\n> 如果没有`redis.conf`，可以拷贝源码包中的配置文件过去\n\n\n\n###  启动Redis\n\n```bash\n$ redis-server /usr/loca/redis/redis.conf\n\n$ ps -ef | grep redis\nroot      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379\n\n$ netstat -ntlp | grep redis\ntcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server\n```\n\n\n\n###  连接Redis\n\n```bash\n$ redis-cli\n127.0.0.1:6379>\n```\n\n\n\n###  停止Redis\n\n```bash\n$ redis-cli shutdonw\n```\n\n","slug":"部署Redis","published":1,"updated":"2020-08-07T05:58:21.935Z","_id":"ckc93ufm600000vje32awcqbl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"yum方式部署\"><a href=\"#yum方式部署\" class=\"headerlink\" title=\"yum方式部署\"></a>yum方式部署</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装Redis\"><a href=\"#安装Redis\" class=\"headerlink\" title=\"安装Redis\"></a>安装Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y redis</span><br><span class=\"line\">$ redis-cli --version</span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">$ yum --enablerepo=remi install redis -y</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>修改<code>/etc/redis.conf</code>中的<code>bind</code>参数为下面的值，监听所有IP地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"设置系统参数\"><a href=\"#设置系统参数\" class=\"headerlink\" title=\"设置系统参数\"></a>设置系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl vm.overcommit_memory=1</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"sysctl vm.overcommit_memory=1\"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"启动Redis\"><a href=\"#启动Redis\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start redis</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> redis</span><br><span class=\"line\">$ systemctl status redis</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载并编译\"><a href=\"#下载并编译\" class=\"headerlink\" title=\"下载并编译\"></a>下载并编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/antirez/redis/archive/5.0.3.tar.gz</span><br><span class=\"line\">$ tar zxf 5.0.3.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> redis-5.0.3</span><br><span class=\"line\">$ make PREFIX=/usr/<span class=\"built_in\">local</span>/redis install</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置环境变量和系统参数\"><a href=\"#设置环境变量和系统参数\" class=\"headerlink\" title=\"设置环境变量和系统参数\"></a>设置环境变量和系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"PATH=<span class=\"variable\">$PATH</span>:/usr/local/redis/bin\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装后会在<code>/usr/local/redis</code>下生成安装目录，安装的命令有如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class=\"line\">redis-benchmark：性能测试工具</span><br><span class=\"line\">redis-check-aof：文件修复工具</span><br><span class=\"line\">redis-check-dump：rbd文件检查工具</span><br><span class=\"line\">redis-cli：客户端命令行工具</span><br><span class=\"line\">redis-server：服务启动命令</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置系统参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl vm.overcommit_memory=1</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"sysctl vm.overcommit_memory=1\"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"设置配置文件-1\"><a href=\"#设置配置文件-1\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>编辑配置文件<code>/usr/local/redis/redis.conf</code>，修改<code>daemonize</code>参数为下面的值，让redis在后台运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果没有<code>redis.conf</code>，可以拷贝源码包中的配置文件过去</p>\n</blockquote>\n<h3 id=\"启动Redis-1\"><a href=\"#启动Redis-1\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-server /usr/loca/redis/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">$ ps -ef | grep redis</span><br><span class=\"line\">root      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class=\"line\"></span><br><span class=\"line\">$ netstat -ntlp | grep redis</span><br><span class=\"line\">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接Redis\"><a href=\"#连接Redis\" class=\"headerlink\" title=\"连接Redis\"></a>连接Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"停止Redis\"><a href=\"#停止Redis\" class=\"headerlink\" title=\"停止Redis\"></a>停止Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli shutdonw</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"yum方式部署\"><a href=\"#yum方式部署\" class=\"headerlink\" title=\"yum方式部署\"></a>yum方式部署</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装Redis\"><a href=\"#安装Redis\" class=\"headerlink\" title=\"安装Redis\"></a>安装Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y redis</span><br><span class=\"line\">$ redis-cli --version</span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接yum安装的redis不是最新的版本，如果要安装最新版本需要执行下面的步骤：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">$ yum --enablerepo=remi install redis -y</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>修改<code>/etc/redis.conf</code>中的<code>bind</code>参数为下面的值，监听所有IP地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"设置系统参数\"><a href=\"#设置系统参数\" class=\"headerlink\" title=\"设置系统参数\"></a>设置系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl vm.overcommit_memory=1</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"sysctl vm.overcommit_memory=1\"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"启动Redis\"><a href=\"#启动Redis\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start redis</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> redis</span><br><span class=\"line\">$ systemctl status redis</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h2><h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载并编译\"><a href=\"#下载并编译\" class=\"headerlink\" title=\"下载并编译\"></a>下载并编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/antirez/redis/archive/5.0.3.tar.gz</span><br><span class=\"line\">$ tar zxf 5.0.3.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> redis-5.0.3</span><br><span class=\"line\">$ make PREFIX=/usr/<span class=\"built_in\">local</span>/redis install</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置环境变量和系统参数\"><a href=\"#设置环境变量和系统参数\" class=\"headerlink\" title=\"设置环境变量和系统参数\"></a>设置环境变量和系统参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"PATH=<span class=\"variable\">$PATH</span>:/usr/local/redis/bin\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装后会在<code>/usr/local/redis</code>下生成安装目录，安装的命令有如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class=\"line\">redis-benchmark：性能测试工具</span><br><span class=\"line\">redis-check-aof：文件修复工具</span><br><span class=\"line\">redis-check-dump：rbd文件检查工具</span><br><span class=\"line\">redis-cli：客户端命令行工具</span><br><span class=\"line\">redis-server：服务启动命令</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置系统参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl vm.overcommit_memory=1</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"sysctl vm.overcommit_memory=1\"</span> &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>vm.overcommit_memory</code>是控制内存分配策略的参数：</p>\n<ul>\n<li>1：内核分配所有的物理内存而不管当前内存状态；</li>\n<li>0：内核检查是否有足够的内存共当前进程使用，没有则会返回错误给进程；</li>\n<li>2：内核允许分配超过物理内存和交换空间总和的内存；</li>\n</ul>\n<h3 id=\"设置配置文件-1\"><a href=\"#设置配置文件-1\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><p>编辑配置文件<code>/usr/local/redis/redis.conf</code>，修改<code>daemonize</code>参数为下面的值，让redis在后台运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果没有<code>redis.conf</code>，可以拷贝源码包中的配置文件过去</p>\n</blockquote>\n<h3 id=\"启动Redis-1\"><a href=\"#启动Redis-1\" class=\"headerlink\" title=\"启动Redis\"></a>启动Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-server /usr/loca/redis/redis.conf</span><br><span class=\"line\"></span><br><span class=\"line\">$ ps -ef | grep redis</span><br><span class=\"line\">root      10983      1  0 13:57 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class=\"line\"></span><br><span class=\"line\">$ netstat -ntlp | grep redis</span><br><span class=\"line\">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      10983/redis-server</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接Redis\"><a href=\"#连接Redis\" class=\"headerlink\" title=\"连接Redis\"></a>连接Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"停止Redis\"><a href=\"#停止Redis\" class=\"headerlink\" title=\"停止Redis\"></a>停止Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-cli shutdonw</span><br></pre></td></tr></table></figure>\n\n"},{"title":"[k8s实践系列]EFK+Kafka日志收集(一)--架构方案和准备","date":"2020-07-09T10:48:44.000Z","description":"使用filebeat、kafka、logstash、elasticsearch和kibana进行k8s日志收集","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594302026732&di=01120f85d5d842f277b2ab6c42ef3373&imgtype=0&src=http%3A%2F%2Fwww.ruanyifeng.com%2Fblogimg%2Fasset%2F2017%2Fbg2017081701.jpg","_content":"\n\n\n## 架构方案\n\n整体收集方案使用如下的组件：\n\n- `filebeat`：采集节点和容器日志，发送到kafka；\n- `kafka`：接收filebeat发送的日志消息；\n- `logstash`：从kafka中消费日志消息并进行处理；\n- `elasticsearch`：进行日志存储；\n- `kibana`：日志可视化展示；\n\n\n\n<br>\n\n## 版本选择\n\n- `filebeat`：7.6.2；\n- `kafka`：2.12-2.5.0；\n- `zookeeper`：3.5.7；\n- `logstash`：7.8.0；\n- `elasticsearch`：7.8.0；\n- `kibana`：7.8.0；\n\n\n\n<br>\n\n## 方案可能存在的问题\n\n这套日志收集方案可能存在下面的问题：\n\n- elasticsearch可能存在瓶颈（es还需要进一步调优）；\n- logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；\n- ......\n\n\n\n<br>\n\n## 准备工作\n\n\n\n### nfs准备\n\n创建nfs相关资源，包括nfs控制器和storageclass的方法都可以在 {% post_link k8s实践系列-使用nfs存储 %} 中找到，这里不再赘述。\n\n\n\n### 创建命名空间\n\n使用下面的yaml文件创建一个namespace：\n\n```yaml\n# namesapce.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: logging\n```\n\n\n\n```bash\n$ kubectl apply -f namespace.yaml\n```\n\n\n\n### 设置elasticsearch密码\n\nelasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：\n\n```bash\n$ espassword=\"elastic\"\n$ kubectl create secret generic es-logging-password --from-literal=elastic='elastic' -n logging\n```\n\n\n\n> 这里将密码设置为了`elastic`","source":"_posts/k8s实践系列-EFK-Kafka日志收集-一.md","raw":"---\ntitle: '[k8s实践系列]EFK+Kafka日志收集(一)--架构方案和准备'\ndate: 2020-07-09 18:48:44\ntags:\n- k8s\n- k8s日志收集\ncategories: \n- 实践K8s\n- EFK日志收集\ndescription: 使用filebeat、kafka、logstash、elasticsearch和kibana进行k8s日志收集\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594302026732&di=01120f85d5d842f277b2ab6c42ef3373&imgtype=0&src=http%3A%2F%2Fwww.ruanyifeng.com%2Fblogimg%2Fasset%2F2017%2Fbg2017081701.jpg\n---\n\n\n\n## 架构方案\n\n整体收集方案使用如下的组件：\n\n- `filebeat`：采集节点和容器日志，发送到kafka；\n- `kafka`：接收filebeat发送的日志消息；\n- `logstash`：从kafka中消费日志消息并进行处理；\n- `elasticsearch`：进行日志存储；\n- `kibana`：日志可视化展示；\n\n\n\n<br>\n\n## 版本选择\n\n- `filebeat`：7.6.2；\n- `kafka`：2.12-2.5.0；\n- `zookeeper`：3.5.7；\n- `logstash`：7.8.0；\n- `elasticsearch`：7.8.0；\n- `kibana`：7.8.0；\n\n\n\n<br>\n\n## 方案可能存在的问题\n\n这套日志收集方案可能存在下面的问题：\n\n- elasticsearch可能存在瓶颈（es还需要进一步调优）；\n- logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；\n- ......\n\n\n\n<br>\n\n## 准备工作\n\n\n\n### nfs准备\n\n创建nfs相关资源，包括nfs控制器和storageclass的方法都可以在 {% post_link k8s实践系列-使用nfs存储 %} 中找到，这里不再赘述。\n\n\n\n### 创建命名空间\n\n使用下面的yaml文件创建一个namespace：\n\n```yaml\n# namesapce.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: logging\n```\n\n\n\n```bash\n$ kubectl apply -f namespace.yaml\n```\n\n\n\n### 设置elasticsearch密码\n\nelasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：\n\n```bash\n$ espassword=\"elastic\"\n$ kubectl create secret generic es-logging-password --from-literal=elastic='elastic' -n logging\n```\n\n\n\n> 这里将密码设置为了`elastic`","slug":"k8s实践系列-EFK-Kafka日志收集-一","published":1,"updated":"2020-07-20T01:52:15.719Z","_id":"ckceqci0s00008yn00y5sfy18","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"架构方案\"><a href=\"#架构方案\" class=\"headerlink\" title=\"架构方案\"></a>架构方案</h2><p>整体收集方案使用如下的组件：</p>\n<ul>\n<li><code>filebeat</code>：采集节点和容器日志，发送到kafka；</li>\n<li><code>kafka</code>：接收filebeat发送的日志消息；</li>\n<li><code>logstash</code>：从kafka中消费日志消息并进行处理；</li>\n<li><code>elasticsearch</code>：进行日志存储；</li>\n<li><code>kibana</code>：日志可视化展示；</li>\n</ul>\n<br>\n\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><ul>\n<li><code>filebeat</code>：7.6.2；</li>\n<li><code>kafka</code>：2.12-2.5.0；</li>\n<li><code>zookeeper</code>：3.5.7；</li>\n<li><code>logstash</code>：7.8.0；</li>\n<li><code>elasticsearch</code>：7.8.0；</li>\n<li><code>kibana</code>：7.8.0；</li>\n</ul>\n<br>\n\n<h2 id=\"方案可能存在的问题\"><a href=\"#方案可能存在的问题\" class=\"headerlink\" title=\"方案可能存在的问题\"></a>方案可能存在的问题</h2><p>这套日志收集方案可能存在下面的问题：</p>\n<ul>\n<li>elasticsearch可能存在瓶颈（es还需要进一步调优）；</li>\n<li>logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；</li>\n<li>……</li>\n</ul>\n<br>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"nfs准备\"><a href=\"#nfs准备\" class=\"headerlink\" title=\"nfs准备\"></a>nfs准备</h3><p>创建nfs相关资源，包括nfs控制器和storageclass的方法都可以在 <a href=\"/2020/07/05/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E4%BD%BF%E7%94%A8nfs%E5%AD%98%E5%82%A8/\" title=\"[k8s实践系列]使用nfs存储\">[k8s实践系列]使用nfs存储</a> 中找到，这里不再赘述。</p>\n<h3 id=\"创建命名空间\"><a href=\"#创建命名空间\" class=\"headerlink\" title=\"创建命名空间\"></a>创建命名空间</h3><p>使用下面的yaml文件创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namesapce.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logging</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置elasticsearch密码\"><a href=\"#设置elasticsearch密码\" class=\"headerlink\" title=\"设置elasticsearch密码\"></a>设置elasticsearch密码</h3><p>elasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ espassword=<span class=\"string\">\"elastic\"</span></span><br><span class=\"line\">$ kubectl create secret generic es-logging-password --from-literal=elastic=<span class=\"string\">'elastic'</span> -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里将密码设置为了<code>elastic</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"架构方案\"><a href=\"#架构方案\" class=\"headerlink\" title=\"架构方案\"></a>架构方案</h2><p>整体收集方案使用如下的组件：</p>\n<ul>\n<li><code>filebeat</code>：采集节点和容器日志，发送到kafka；</li>\n<li><code>kafka</code>：接收filebeat发送的日志消息；</li>\n<li><code>logstash</code>：从kafka中消费日志消息并进行处理；</li>\n<li><code>elasticsearch</code>：进行日志存储；</li>\n<li><code>kibana</code>：日志可视化展示；</li>\n</ul>\n<br>\n\n<h2 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h2><ul>\n<li><code>filebeat</code>：7.6.2；</li>\n<li><code>kafka</code>：2.12-2.5.0；</li>\n<li><code>zookeeper</code>：3.5.7；</li>\n<li><code>logstash</code>：7.8.0；</li>\n<li><code>elasticsearch</code>：7.8.0；</li>\n<li><code>kibana</code>：7.8.0；</li>\n</ul>\n<br>\n\n<h2 id=\"方案可能存在的问题\"><a href=\"#方案可能存在的问题\" class=\"headerlink\" title=\"方案可能存在的问题\"></a>方案可能存在的问题</h2><p>这套日志收集方案可能存在下面的问题：</p>\n<ul>\n<li>elasticsearch可能存在瓶颈（es还需要进一步调优）；</li>\n<li>logstash会根据写入es的速度调整消息消费的速度，所有kafka有时候会出现消息堆积的情况；</li>\n<li>……</li>\n</ul>\n<br>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"nfs准备\"><a href=\"#nfs准备\" class=\"headerlink\" title=\"nfs准备\"></a>nfs准备</h3><p>创建nfs相关资源，包括nfs控制器和storageclass的方法都可以在 <a href=\"/2020/07/05/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E4%BD%BF%E7%94%A8nfs%E5%AD%98%E5%82%A8/\" title=\"[k8s实践系列]使用nfs存储\">[k8s实践系列]使用nfs存储</a> 中找到，这里不再赘述。</p>\n<h3 id=\"创建命名空间\"><a href=\"#创建命名空间\" class=\"headerlink\" title=\"创建命名空间\"></a>创建命名空间</h3><p>使用下面的yaml文件创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namesapce.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logging</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"设置elasticsearch密码\"><a href=\"#设置elasticsearch密码\" class=\"headerlink\" title=\"设置elasticsearch密码\"></a>设置elasticsearch密码</h3><p>elasticsearch开启x-pack认证功能，这里将elasticsearch的密码保存在secret资源中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ espassword=<span class=\"string\">\"elastic\"</span></span><br><span class=\"line\">$ kubectl create secret generic es-logging-password --from-literal=elastic=<span class=\"string\">'elastic'</span> -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这里将密码设置为了<code>elastic</code></p>\n</blockquote>\n"},{"title":"[k8s实践系列]部署Ingress","date":"2020-07-09T06:09:15.000Z","description":"在集群中部署Ingress-nginx将集群内服务暴露出去","cover":"https://www.kubernetes.org.cn/img/2019/10/fe9890c6467aa42ebd24d536416942d3-768x442.jpg","_content":"\n\n\n## 什么是Ingress\n\nIngress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：\n\n- `Ingress NGINX`: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；\n- `F5 BIG-IP Controller`: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；\n- `Ingress Kong`: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；\n- `Traefik`: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；\n- `Voyager`: 一套以 HAProxy 为底的 Ingress Controller；\n\n\n\n这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。\n\n\n\n<br>\n\n\n\n## 部署Ingress Nginx\n\n官方维护的配置yaml文件在 [官方YAML文件](https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml)，可以直接执行下面的命令部署：\n\n```bash\n$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\n```\n\n\n\n这个文件会创建一个名为：`ingress-nginx`的namespace，相关的pod会部署在这个namespace下面。\n\n\n\n有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：\n\n```yaml\nspec:\n      hostNetwork: true\n      dnsPolicy: ClusterFirst\n      containers:\n        - name: controller\n          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0\n          imagePullPolicy: IfNotPresent\n```\n\n> 这里增加了`hostNetwork: true`，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。\n\n\n\n<br>\n\n\n\n","source":"_posts/k8s实践系列-部署Ingress.md","raw":"---\ntitle: '[k8s实践系列]部署Ingress'\ndate: 2020-07-09 14:09:15\ntags:\n- k8s\n- ingress\ncategories: 实践K8s\ndescription: 在集群中部署Ingress-nginx将集群内服务暴露出去\ncover: https://www.kubernetes.org.cn/img/2019/10/fe9890c6467aa42ebd24d536416942d3-768x442.jpg\n---\n\n\n\n## 什么是Ingress\n\nIngress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：\n\n- `Ingress NGINX`: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；\n- `F5 BIG-IP Controller`: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；\n- `Ingress Kong`: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；\n- `Traefik`: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；\n- `Voyager`: 一套以 HAProxy 为底的 Ingress Controller；\n\n\n\n这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。\n\n\n\n<br>\n\n\n\n## 部署Ingress Nginx\n\n官方维护的配置yaml文件在 [官方YAML文件](https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml)，可以直接执行下面的命令部署：\n\n```bash\n$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\n```\n\n\n\n这个文件会创建一个名为：`ingress-nginx`的namespace，相关的pod会部署在这个namespace下面。\n\n\n\n有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：\n\n```yaml\nspec:\n      hostNetwork: true\n      dnsPolicy: ClusterFirst\n      containers:\n        - name: controller\n          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0\n          imagePullPolicy: IfNotPresent\n```\n\n> 这里增加了`hostNetwork: true`，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。\n\n\n\n<br>\n\n\n\n","slug":"k8s实践系列-部署Ingress","published":1,"updated":"2020-07-16T02:19:31.934Z","_id":"ckceqci2d00058yn01f5mbxir","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是Ingress\"><a href=\"#什么是Ingress\" class=\"headerlink\" title=\"什么是Ingress\"></a>什么是Ingress</h2><p>Ingress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：</p>\n<ul>\n<li><code>Ingress NGINX</code>: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；</li>\n<li><code>F5 BIG-IP Controller</code>: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；</li>\n<li><code>Ingress Kong</code>: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；</li>\n<li><code>Traefik</code>: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；</li>\n<li><code>Voyager</code>: 一套以 HAProxy 为底的 Ingress Controller；</li>\n</ul>\n<p>这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。</p>\n<br>\n\n\n\n<h2 id=\"部署Ingress-Nginx\"><a href=\"#部署Ingress-Nginx\" class=\"headerlink\" title=\"部署Ingress Nginx\"></a>部署Ingress Nginx</h2><p>官方维护的配置yaml文件在 <a href=\"https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\" target=\"_blank\" rel=\"noopener\">官方YAML文件</a>，可以直接执行下面的命令部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个文件会创建一个名为：<code>ingress-nginx</code>的namespace，相关的pod会部署在这个namespace下面。</p>\n<p>有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">controller</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里增加了<code>hostNetwork: true</code>，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。</p>\n</blockquote>\n<br>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Ingress\"><a href=\"#什么是Ingress\" class=\"headerlink\" title=\"什么是Ingress\"></a>什么是Ingress</h2><p>Ingress实际是集群的流量统一入口，可以根据不同请求的URL将流量转发给集群中的服务（通过Ingress-Controller实现）。目前有很多Ingress-controller的实现方案：</p>\n<ul>\n<li><code>Ingress NGINX</code>: Kubernetes 官方维护的方案，也是本次安装使用的 Controller；</li>\n<li><code>F5 BIG-IP Controller</code>: F5 所开发的 Controller，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备；</li>\n<li><code>Ingress Kong</code>: 著名的开源 API Gateway 方案所维护的 Kubernetes Ingress Controller；</li>\n<li><code>Traefik</code>: 是一套开源的 HTTP 反向代理与负载均衡器，而它也支援了 Ingress；</li>\n<li><code>Voyager</code>: 一套以 HAProxy 为底的 Ingress Controller；</li>\n</ul>\n<p>这里使用的是Ingress Nginx，它实质就是一个nginx服务，他可以通过apiserver动态更新nginx的配置，实现基于域名的虚拟主机工功能。</p>\n<br>\n\n\n\n<h2 id=\"部署Ingress-Nginx\"><a href=\"#部署Ingress-Nginx\" class=\"headerlink\" title=\"部署Ingress Nginx\"></a>部署Ingress Nginx</h2><p>官方维护的配置yaml文件在 <a href=\"https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml\" target=\"_blank\" rel=\"noopener\">官方YAML文件</a>，可以直接执行下面的命令部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://github.com/kubernetes/ingress-nginx/blob/master/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个文件会创建一个名为：<code>ingress-nginx</code>的namespace，相关的pod会部署在这个namespace下面。</p>\n<p>有一点需要注意的是，最好修改一下这个文件中deployment的这个地方：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">hostNetwork:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">controller</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里增加了<code>hostNetwork: true</code>，让ingress使用host网络，这样才可以通过默认的service配置被外部访问。</p>\n</blockquote>\n<br>\n\n\n\n"},{"title":"[k8s实践系列]EFK+Kafka日志收集(二)--部署elasticsearch","date":"2020-07-09T11:54:03.000Z","description":"部署Elasticsearch集群","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594302026732&di=01120f85d5d842f277b2ab6c42ef3373&imgtype=0&src=http%3A%2F%2Fwww.ruanyifeng.com%2Fblogimg%2Fasset%2F2017%2Fbg2017081701.jpg","_content":"\n\n\n## 创建es配置\n\n```yaml\n# elasticsearch-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: es-logging-config\n  namespace: logging\ndata:\n  elasticsearch.yml: |\n    cluster.name: es-logging-cluster\n    node.name: ${NODE_NAME}\n    network.host: 0.0.0.0\n    http.port: 9200\n    transport.port: 9300\n    discovery.seed_hosts: [\"es-logging-cluster\"]\n    cluster.initial_master_nodes:\n      - es-logging-0\n      - es-logging-1\n      - es-logging-2\n    xpack.monitoring.collection.enabled: true\n    xpack.security.enabled: true\n    xpack.license.self_generated.type: basic\n    indices.lifecycle.history_index_enabled: false\n    xpack.ilm.enabled: true\n    \n    cluster.routing.allocation.disk.threshold_enabled: false\n\n    # xpack.security.transport.ssl.enabled: true\n    # xpack.security.transport.ssl.verification_mode: certificate\n    # xpack.security.transport.ssl.key: certs/es-logging-service.key\n    # xpack.security.transport.ssl.certificate: certs/es-logging-service.crt\n    # xpack.security.transport.ssl.certificate_authorities: certs/ca.crt\n    # xpack.security.http.ssl.enabled: false\n    # xpack.security.authc.realms:\n    #   native.realm1:\n    #     order: 0\n  es_check.sh: >\n    #!/bin/bash\n\n    ES_REST_BASEURL=http://localhost:9200\n\n    EXPECTED_RESPONSE_CODE=200\n\n    max_time=${READINESS_PROBE_TIMEOUT:-30}\n\n\n    function check_if_ready() {\n      path=\"$1\"\n      err_msg=\"$2\"\n      response_code=$(curl -s -k --head \\\n          -u elastic:${ELASTIC_PASSWORD} \\\n          --max-time $max_time \\\n          -o /dev/null \\\n          -w '%{response_code}' \\\n          \"${ES_REST_BASEURL}${path}\")\n\n      if [ \"${response_code}\" != ${EXPECTED_RESPONSE_CODE} ]; then\n        echo \"${err_msg} [response code: ${response_code}]\"\n        exit 1\n      fi\n      exit 0\n    }\n\n\n    check_if_ready \"/\" \"Elasticsearch node is not ready to accept HTTP requests yet\"\n```\n\n\n\n配置中的相关参数解释：\n\n- `cluster.name`：设置es集群名称，用于唯一标识一个集群；\n- `network.host`：监听的地址；\n- `discovery.seed_hosts`：节点发现方式；\n- `xpack.security.enabled`起用xpack安全组件；\n- `cluster.routing.allocation.disk.threshold_enabled`是否启动磁盘分配器；\n\n\n\n> `cluster.routing.allocation.disk.threshold_enabled`这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。[相关文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation)\n\n\n\nes启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：\n\n```bash\n$ kubectl apply -f elasticsearch-config.yaml\n```\n\n\n\n\n\n<br>\n\n\n\n## 创建es集群\n\n```yaml\n# elasticsearch-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: es-logging\n  serviceName: es-logging-cluster\n  template:\n    metadata:\n      labels:\n        app: es-logging\n      name: es-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - es-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: ES_JAVA_OPTS\n              value: '-Xms2g -Xmx2g'\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'docker.elastic.co/elasticsearch/elasticsearch:7.8.0'\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          name: es-logging\n          ports:\n            - containerPort: 9200\n              name: tcp-9200\n              protocol: TCP\n            - containerPort: 9300\n              name: tcp-9300\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n          volumeMounts:\n            - mountPath: /usr/share/elasticsearch/data\n              name: es7x-data\n            - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\n              name: es7x-config\n              subPath: elasticsearch.yml\n            - mountPath: /usr/share/elasticsearch/config/es_check.sh\n              name: es7x-config\n              subPath: es_check.sh\n            # - mountPath: /usr/share/elasticsearch/config/certs\n            #   name: es-certs\n            #   readOnly: true\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n            - name: ES_URI\n              value: 'http://elastic:$(ELASTIC_PASSWORD)@localhost:9200'\n            - name: ES_INDICES\n              value: 'true'\n            - name: ES_ALL\n              value: 'true'\n            - name: ES_INDICES_SETTINGS\n              value: 'true'\n          image: 'justwatch/elasticsearch_exporter:1.1.0'\n          imagePullPolicy: IfNotPresent\n          name: elasticsearch-exporter\n          ports:\n            - containerPort: 9114\n              name: tcp-9114\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 200Mi\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sysctl\n            - '-w'\n            - vm.max_map_count=262144\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-vm-max-map\n          securityContext:\n            privileged: true\n            runAsUser: 0\n        - command:\n            - sh\n            - '-c'\n            - ulimit -n 65536\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-fd-ulimit\n          securityContext:\n            privileged: true\n            runAsUser: 0\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n    #   serviceAccount: es-logging-sa\n    #   serviceAccountName: es-logging-sa\n      terminationGracePeriodSeconds: 10\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: es-logging-config\n          name: es7x-config\n        # - name: es-certs\n        #   secret:\n        #     defaultMode: 420\n        #     secretName: es-logging-certs\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        labels:\n          name: es-logging\n        name: es7x-data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\nes集群使用了statefulset方式部署，其中storageclass`logging-storageclass`需要自己手动创建，执行下面的命令完成部署。\n\n```bash\n$ kubectl apply -f elasticsearch-cluster.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建es service资源\n\n```yaml\n# elasticsearch-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-9200\n      port: 9200\n      protocol: TCP\n      targetPort: 9200\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n    monitor-app: elasticsearch-exporter\n  name: es-logging-cluster\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: tcp-9300\n      port: 9300\n      protocol: TCP\n      targetPort: 9300\n    - name: tcp-9114\n      port: 9114\n      protocol: TCP\n      targetPort: 9114\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubeclt apply -f elasticsearch-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查\n\n首先确保所有的pod都处于running状态：\n\n```bash\n$ kubectl get pod -n logging | grep es\n```\n\n<img src=\"es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n然后执行下面的命令：\n\n```bash\n$ kubectl logs -f es-logging-1 -n logging -c es-logging\n```\n\n\n\n如果输出的日志中有`Cluster health status changed from [YELLOW] to [GREEN]`，说明集群正常了。\n\n","source":"_posts/k8s实践系列-EFK-Kafka日志收集-二.md","raw":"---\ntitle: '[k8s实践系列]EFK+Kafka日志收集(二)--部署elasticsearch'\ndate: 2020-07-09 19:54:03\ntags: \n- k8s\n- k8s日志收集\ncategories: \n- 实践K8s\n- EFK日志收集\ndescription: 部署Elasticsearch集群\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594302026732&di=01120f85d5d842f277b2ab6c42ef3373&imgtype=0&src=http%3A%2F%2Fwww.ruanyifeng.com%2Fblogimg%2Fasset%2F2017%2Fbg2017081701.jpg\n---\n\n\n\n## 创建es配置\n\n```yaml\n# elasticsearch-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: es-logging-config\n  namespace: logging\ndata:\n  elasticsearch.yml: |\n    cluster.name: es-logging-cluster\n    node.name: ${NODE_NAME}\n    network.host: 0.0.0.0\n    http.port: 9200\n    transport.port: 9300\n    discovery.seed_hosts: [\"es-logging-cluster\"]\n    cluster.initial_master_nodes:\n      - es-logging-0\n      - es-logging-1\n      - es-logging-2\n    xpack.monitoring.collection.enabled: true\n    xpack.security.enabled: true\n    xpack.license.self_generated.type: basic\n    indices.lifecycle.history_index_enabled: false\n    xpack.ilm.enabled: true\n    \n    cluster.routing.allocation.disk.threshold_enabled: false\n\n    # xpack.security.transport.ssl.enabled: true\n    # xpack.security.transport.ssl.verification_mode: certificate\n    # xpack.security.transport.ssl.key: certs/es-logging-service.key\n    # xpack.security.transport.ssl.certificate: certs/es-logging-service.crt\n    # xpack.security.transport.ssl.certificate_authorities: certs/ca.crt\n    # xpack.security.http.ssl.enabled: false\n    # xpack.security.authc.realms:\n    #   native.realm1:\n    #     order: 0\n  es_check.sh: >\n    #!/bin/bash\n\n    ES_REST_BASEURL=http://localhost:9200\n\n    EXPECTED_RESPONSE_CODE=200\n\n    max_time=${READINESS_PROBE_TIMEOUT:-30}\n\n\n    function check_if_ready() {\n      path=\"$1\"\n      err_msg=\"$2\"\n      response_code=$(curl -s -k --head \\\n          -u elastic:${ELASTIC_PASSWORD} \\\n          --max-time $max_time \\\n          -o /dev/null \\\n          -w '%{response_code}' \\\n          \"${ES_REST_BASEURL}${path}\")\n\n      if [ \"${response_code}\" != ${EXPECTED_RESPONSE_CODE} ]; then\n        echo \"${err_msg} [response code: ${response_code}]\"\n        exit 1\n      fi\n      exit 0\n    }\n\n\n    check_if_ready \"/\" \"Elasticsearch node is not ready to accept HTTP requests yet\"\n```\n\n\n\n配置中的相关参数解释：\n\n- `cluster.name`：设置es集群名称，用于唯一标识一个集群；\n- `network.host`：监听的地址；\n- `discovery.seed_hosts`：节点发现方式；\n- `xpack.security.enabled`起用xpack安全组件；\n- `cluster.routing.allocation.disk.threshold_enabled`是否启动磁盘分配器；\n\n\n\n> `cluster.routing.allocation.disk.threshold_enabled`这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。[相关文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation)\n\n\n\nes启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：\n\n```bash\n$ kubectl apply -f elasticsearch-config.yaml\n```\n\n\n\n\n\n<br>\n\n\n\n## 创建es集群\n\n```yaml\n# elasticsearch-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: es-logging\n  serviceName: es-logging-cluster\n  template:\n    metadata:\n      labels:\n        app: es-logging\n      name: es-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - es-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: ES_JAVA_OPTS\n              value: '-Xms2g -Xmx2g'\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'docker.elastic.co/elasticsearch/elasticsearch:7.8.0'\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          name: es-logging\n          ports:\n            - containerPort: 9200\n              name: tcp-9200\n              protocol: TCP\n            - containerPort: 9300\n              name: tcp-9300\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/elasticsearch/config/es_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n          volumeMounts:\n            - mountPath: /usr/share/elasticsearch/data\n              name: es7x-data\n            - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml\n              name: es7x-config\n              subPath: elasticsearch.yml\n            - mountPath: /usr/share/elasticsearch/config/es_check.sh\n              name: es7x-config\n              subPath: es_check.sh\n            # - mountPath: /usr/share/elasticsearch/config/certs\n            #   name: es-certs\n            #   readOnly: true\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n            - name: ES_URI\n              value: 'http://elastic:$(ELASTIC_PASSWORD)@localhost:9200'\n            - name: ES_INDICES\n              value: 'true'\n            - name: ES_ALL\n              value: 'true'\n            - name: ES_INDICES_SETTINGS\n              value: 'true'\n          image: 'justwatch/elasticsearch_exporter:1.1.0'\n          imagePullPolicy: IfNotPresent\n          name: elasticsearch-exporter\n          ports:\n            - containerPort: 9114\n              name: tcp-9114\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 200Mi\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sysctl\n            - '-w'\n            - vm.max_map_count=262144\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-vm-max-map\n          securityContext:\n            privileged: true\n            runAsUser: 0\n        - command:\n            - sh\n            - '-c'\n            - ulimit -n 65536\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: increase-fd-ulimit\n          securityContext:\n            privileged: true\n            runAsUser: 0\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n    #   serviceAccount: es-logging-sa\n    #   serviceAccountName: es-logging-sa\n      terminationGracePeriodSeconds: 10\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: es-logging-config\n          name: es7x-config\n        # - name: es-certs\n        #   secret:\n        #     defaultMode: 420\n        #     secretName: es-logging-certs\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        labels:\n          name: es-logging\n        name: es7x-data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\nes集群使用了statefulset方式部署，其中storageclass`logging-storageclass`需要自己手动创建，执行下面的命令完成部署。\n\n```bash\n$ kubectl apply -f elasticsearch-cluster.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建es service资源\n\n```yaml\n# elasticsearch-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n  name: es-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-9200\n      port: 9200\n      protocol: TCP\n      targetPort: 9200\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: es-logging\n    monitor-app: elasticsearch-exporter\n  name: es-logging-cluster\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: tcp-9300\n      port: 9300\n      protocol: TCP\n      targetPort: 9300\n    - name: tcp-9114\n      port: 9114\n      protocol: TCP\n      targetPort: 9114\n  selector:\n    app: es-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubeclt apply -f elasticsearch-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查\n\n首先确保所有的pod都处于running状态：\n\n```bash\n$ kubectl get pod -n logging | grep es\n```\n\n<img src=\"es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n然后执行下面的命令：\n\n```bash\n$ kubectl logs -f es-logging-1 -n logging -c es-logging\n```\n\n\n\n如果输出的日志中有`Cluster health status changed from [YELLOW] to [GREEN]`，说明集群正常了。\n\n","slug":"k8s实践系列-EFK-Kafka日志收集-二","published":1,"updated":"2020-07-20T02:39:19.578Z","_id":"ckceqp6ub0000ben08ym94hbb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建es配置\"><a href=\"#创建es配置\" class=\"headerlink\" title=\"创建es配置\"></a>创建es配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">cluster.name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">node.name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    <span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">    <span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"attr\">discovery.seed_hosts:</span> <span class=\"string\">[\"es-logging-cluster\"]</span></span><br><span class=\"line\">    <span class=\"attr\">cluster.initial_master_nodes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-2</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.collection.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">basic</span></span><br><span class=\"line\">    <span class=\"attr\">indices.lifecycle.history_index_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.ilm.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">cluster.routing.allocation.disk.threshold_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.enabled: true</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.verification_mode: certificate</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.key: certs/es-logging-service.key</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate: certs/es-logging-service.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate_authorities: certs/ca.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.http.ssl.enabled: false</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.authc.realms:</span></span><br><span class=\"line\">    <span class=\"comment\">#   native.realm1:</span></span><br><span class=\"line\">    <span class=\"comment\">#     order: 0</span></span><br><span class=\"line\">  <span class=\"attr\">es_check.sh:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">ES_REST_BASEURL=http://localhost:9200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">max_time=$&#123;READINESS_PROBE_TIMEOUT:-30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">function</span> <span class=\"string\">check_if_ready()</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">      <span class=\"string\">path=\"$1\"</span></span><br><span class=\"line\">      <span class=\"string\">err_msg=\"$2\"</span></span><br><span class=\"line\">      <span class=\"string\">response_code=$(curl</span> <span class=\"string\">-s</span> <span class=\"string\">-k</span> <span class=\"string\">--head</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-u</span> <span class=\"string\">elastic:$&#123;ELASTIC_PASSWORD&#125;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">--max-time</span> <span class=\"string\">$max_time</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-o</span> <span class=\"string\">/dev/null</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-w</span> <span class=\"string\">'<span class=\"template-variable\">%&#123;response_code&#125;</span>'</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">\"$&#123;ES_REST_BASEURL&#125;$&#123;path&#125;\"</span><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">\"$&#123;response_code&#125;\"</span> <span class=\"string\">!=</span> <span class=\"string\">$&#123;EXPECTED_RESPONSE_CODE&#125;</span> <span class=\"string\">];</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">\"$&#123;err_msg&#125; [response code: $&#123;response_code&#125;]\"</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"string\">fi</span></span><br><span class=\"line\">      <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">check_if_ready</span> <span class=\"string\">\"/\"</span> <span class=\"string\">\"Elasticsearch node is not ready to accept HTTP requests yet\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置中的相关参数解释：</p>\n<ul>\n<li><code>cluster.name</code>：设置es集群名称，用于唯一标识一个集群；</li>\n<li><code>network.host</code>：监听的地址；</li>\n<li><code>discovery.seed_hosts</code>：节点发现方式；</li>\n<li><code>xpack.security.enabled</code>起用xpack安全组件；</li>\n<li><code>cluster.routing.allocation.disk.threshold_enabled</code>是否启动磁盘分配器；</li>\n</ul>\n<blockquote>\n<p><code>cluster.routing.allocation.disk.threshold_enabled</code>这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation\" target=\"_blank\" rel=\"noopener\">相关文档</a></p>\n</blockquote>\n<p>es启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f elasticsearch-config.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h2 id=\"创建es集群\"><a href=\"#创建es集群\" class=\"headerlink\" title=\"创建es集群\"></a>创建es集群</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - es-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_JAVA_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'-Xms2g -Xmx2g'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'docker.elastic.co/elasticsearch/elasticsearch:7.8.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">elasticsearch.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">es_check.sh</span></span><br><span class=\"line\">            <span class=\"comment\"># - mountPath: /usr/share/elasticsearch/config/certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   name: es-certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   readOnly: true</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_URI</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'http://elastic:$(ELASTIC_PASSWORD)@localhost:9200'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_ALL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES_SETTINGS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'justwatch/elasticsearch_exporter:1.1.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sysctl</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-w'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">vm.max_map_count=262144</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'busybox:1.31.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-vm-max-map</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ulimit</span> <span class=\"string\">-n</span> <span class=\"number\">65536</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'busybox:1.31.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-fd-ulimit</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">'s0:c13,c12'</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: es-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: es-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">        <span class=\"comment\"># - name: es-certs</span></span><br><span class=\"line\">        <span class=\"comment\">#   secret:</span></span><br><span class=\"line\">        <span class=\"comment\">#     defaultMode: 420</span></span><br><span class=\"line\">        <span class=\"comment\">#     secretName: es-logging-certs</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>es集群使用了statefulset方式部署，其中storageclass<code>logging-storageclass</code>需要自己手动创建，执行下面的命令完成部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f elasticsearch-cluster.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建es-service资源\"><a href=\"#创建es-service资源\" class=\"headerlink\" title=\"创建es service资源\"></a>创建es service资源</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">monitor-app:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeclt apply -f elasticsearch-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>首先确保所有的pod都处于running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n logging | grep es</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl logs -f es-logging-1 -n logging -c es-logging</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果输出的日志中有<code>Cluster health status changed from [YELLOW] to [GREEN]</code>，说明集群正常了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建es配置\"><a href=\"#创建es配置\" class=\"headerlink\" title=\"创建es配置\"></a>创建es配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">cluster.name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">    <span class=\"attr\">node.name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">network.host:</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">    <span class=\"attr\">http.port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">    <span class=\"attr\">transport.port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"attr\">discovery.seed_hosts:</span> <span class=\"string\">[\"es-logging-cluster\"]</span></span><br><span class=\"line\">    <span class=\"attr\">cluster.initial_master_nodes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">es-logging-2</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.collection.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.license.self_generated.type:</span> <span class=\"string\">basic</span></span><br><span class=\"line\">    <span class=\"attr\">indices.lifecycle.history_index_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.ilm.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attr\">cluster.routing.allocation.disk.threshold_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.enabled: true</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.verification_mode: certificate</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.key: certs/es-logging-service.key</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate: certs/es-logging-service.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.transport.ssl.certificate_authorities: certs/ca.crt</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.http.ssl.enabled: false</span></span><br><span class=\"line\">    <span class=\"comment\"># xpack.security.authc.realms:</span></span><br><span class=\"line\">    <span class=\"comment\">#   native.realm1:</span></span><br><span class=\"line\">    <span class=\"comment\">#     order: 0</span></span><br><span class=\"line\">  <span class=\"attr\">es_check.sh:</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">ES_REST_BASEURL=http://localhost:9200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">max_time=$&#123;READINESS_PROBE_TIMEOUT:-30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">function</span> <span class=\"string\">check_if_ready()</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">      <span class=\"string\">path=\"$1\"</span></span><br><span class=\"line\">      <span class=\"string\">err_msg=\"$2\"</span></span><br><span class=\"line\">      <span class=\"string\">response_code=$(curl</span> <span class=\"string\">-s</span> <span class=\"string\">-k</span> <span class=\"string\">--head</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-u</span> <span class=\"string\">elastic:$&#123;ELASTIC_PASSWORD&#125;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">--max-time</span> <span class=\"string\">$max_time</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-o</span> <span class=\"string\">/dev/null</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">-w</span> <span class=\"string\">'<span class=\"template-variable\">%&#123;response_code&#125;</span>'</span> <span class=\"string\">\\</span></span><br><span class=\"line\">          <span class=\"string\">\"$&#123;ES_REST_BASEURL&#125;$&#123;path&#125;\"</span><span class=\"string\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">\"$&#123;response_code&#125;\"</span> <span class=\"string\">!=</span> <span class=\"string\">$&#123;EXPECTED_RESPONSE_CODE&#125;</span> <span class=\"string\">];</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">\"$&#123;err_msg&#125; [response code: $&#123;response_code&#125;]\"</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"string\">fi</span></span><br><span class=\"line\">      <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">check_if_ready</span> <span class=\"string\">\"/\"</span> <span class=\"string\">\"Elasticsearch node is not ready to accept HTTP requests yet\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置中的相关参数解释：</p>\n<ul>\n<li><code>cluster.name</code>：设置es集群名称，用于唯一标识一个集群；</li>\n<li><code>network.host</code>：监听的地址；</li>\n<li><code>discovery.seed_hosts</code>：节点发现方式；</li>\n<li><code>xpack.security.enabled</code>起用xpack安全组件；</li>\n<li><code>cluster.routing.allocation.disk.threshold_enabled</code>是否启动磁盘分配器；</li>\n</ul>\n<blockquote>\n<p><code>cluster.routing.allocation.disk.threshold_enabled</code>这个参数这里设置为false，表示关闭磁盘分配器，这样es可以使用全部磁盘空间。默认情况下当磁盘空间大于85%后，es就不能再创建分片了。这个参数在es使用同一个后端存储的时候应该调节一下。<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html#disk-based-shard-allocation\" target=\"_blank\" rel=\"noopener\">相关文档</a></p>\n</blockquote>\n<p>es启用了x-pack密码认证，并且通过脚本检查es是否正常启动。我这里将es https通信方式注释掉了，如果有需要可以生成相关证书并起用https配置。直接运行下面的命令创建es配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f elasticsearch-config.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h2 id=\"创建es集群\"><a href=\"#创建es集群\" class=\"headerlink\" title=\"创建es集群\"></a>创建es集群</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - es-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_JAVA_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'-Xms2g -Xmx2g'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'docker.elastic.co/elasticsearch/elasticsearch:7.8.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">elasticsearch.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/elasticsearch/config/es_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">es_check.sh</span></span><br><span class=\"line\">            <span class=\"comment\"># - mountPath: /usr/share/elasticsearch/config/certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   name: es-certs</span></span><br><span class=\"line\">            <span class=\"comment\">#   readOnly: true</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_URI</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'http://elastic:$(ELASTIC_PASSWORD)@localhost:9200'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_ALL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ES_INDICES_SETTINGS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'justwatch/elasticsearch_exporter:1.1.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sysctl</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-w'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">vm.max_map_count=262144</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'busybox:1.31.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-vm-max-map</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">ulimit</span> <span class=\"string\">-n</span> <span class=\"number\">65536</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'busybox:1.31.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-fd-ulimit</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">'s0:c13,c12'</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: es-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: es-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">es-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es7x-config</span></span><br><span class=\"line\">        <span class=\"comment\"># - name: es-certs</span></span><br><span class=\"line\">        <span class=\"comment\">#   secret:</span></span><br><span class=\"line\">        <span class=\"comment\">#     defaultMode: 420</span></span><br><span class=\"line\">        <span class=\"comment\">#     secretName: es-logging-certs</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">es7x-data</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>es集群使用了statefulset方式部署，其中storageclass<code>logging-storageclass</code>需要自己手动创建，执行下面的命令完成部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f elasticsearch-cluster.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建es-service资源\"><a href=\"#创建es-service资源\" class=\"headerlink\" title=\"创建es service资源\"></a>创建es service资源</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># elasticsearch-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9200</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9200</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">    <span class=\"attr\">monitor-app:</span> <span class=\"string\">elasticsearch-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-cluster</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9300</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9300</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-9114</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9114</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">es-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubeclt apply -f elasticsearch-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>首先确保所有的pod都处于running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n logging | grep es</span><br></pre></td></tr></table></figure>\n\n<img src=\"es-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl logs -f es-logging-1 -n logging -c es-logging</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果输出的日志中有<code>Cluster health status changed from [YELLOW] to [GREEN]</code>，说明集群正常了。</p>\n"},{"title":"[k8s实践系列]EFK+Kafka日志收集(三)--部署zookeeper和kafka集群","date":"2020-07-09T12:03:25.000Z","description":"部署kafka集群，并安装kafka-manager管理平台","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594370538704&di=ee50dd4647d528d43e4f3f5ded7058f0&imgtype=0&src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20160525%2F20160525083516_270.png","_content":"\n\n\n## 部署zookeeper集群\n\n```yaml\n# zookeeper-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: zk-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zk-logging\n  serviceName: zk-logging-headless\n  template:\n    metadata:\n      labels:\n        app: zk-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - zk-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: ZOO_SERVERS\n              value: >-\n                server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n            - name: ZOO_4LW_COMMANDS_WHITELIST\n              value: 'ruok,srvr,conf,stat'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'zookeeper:3.5.7'\n          imagePullPolicy: Always\n          name: zk-logging\n          ports:\n            - containerPort: 2181\n              name: client\n              protocol: TCP\n            - containerPort: 2888\n              name: server\n              protocol: TCP\n            - containerPort: 3888\n              name: leader-election\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - >-\n              echo $(( $(echo ${POD_NAME} | awk -F \"-\" '{print $NF}') + 1 )) >\n              /data/myid\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: init-zk-logging\n          resources: {}\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n    #   nodeSelector:\n        # node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n    #   serviceAccount: zk-logging-sa\n    #   serviceAccountName: zk-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 5Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n```bash\n$ kubectl apply -f zookeeper-cluster.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建zookeeper service对象\n\n```yaml\n# zookeeper-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: client\n      port: 2181\n      protocol: TCP\n      targetPort: 2181\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-headless\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 2888\n      protocol: TCP\n      targetPort: 2888\n    - name: leader-election\n      port: 3888\n      protocol: TCP\n      targetPort: 3888\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f zookeeper-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kafka集群\n\n```yaml\n# kafka-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: kafka-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kafka-logging\n  serviceName: kafka-logging-service\n  template:\n    metadata:\n      labels:\n        app: kafka-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - kafka-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: KAFKA_REPLICAS\n              value: '3'\n            - name: KAFKA_ZK_LOCAL\n              value: 'false'\n            - name: KAFKA_HEAP_OPTS\n              value: '-Xmx1024M -Xms1024M'\n            - name: SERVER_num_partitions\n              value: '3'\n            - name: SERVER_delete_topic_enable\n              value: 'true'\n            - name: SERVER_log_retention_hours\n              value: '2147483647'\n            - name: KAFKA_ADVERTISED_PORT\n              value: '9092'\n            - name: SERVER_zookeeper_connection_timeout_ms\n              value: '6000'\n            - name: SERVER_log_dirs\n              value: /opt/kafka/data/logs\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: KAFKA_ZOOKEEPER_CONNECT\n              value: 'zk-logging-service.logging.svc.cluster.local:2181'\n            - name: BROKER_ID_COMMAND\n              value: 'hostname | awk -F ''-'' ''{print $NF}'''\n            - name: KAFKA_PORT_NUMBER\n              value: '9092'\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              value: >-\n                $(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'wurstmeister/kafka:2.12-2.5.0'\n          imagePullPolicy: Always\n          name: kafka-logging\n          ports:\n            - containerPort: 9092\n              name: server\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /kafka\n              name: datadir\n      dnsPolicy: ClusterFirst\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 0\n        runAsUser: 0\n    #   serviceAccount: kafka-logging-sa\n    #   serviceAccountName: kafka-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-cluster.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kafka service对象\n\n```yaml\n# kafka-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-logging\n  name: kafka-logging-service\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 9092\n      protocol: TCP\n      targetPort: 9092\n  selector:\n    app: kafka-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署kafka-manager\n\nkafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。\n\n```yaml\n# kafka-manager.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kafka-manager\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kafka-manager\n    spec:\n      containers:\n        - env:\n            - name: ZK_HOSTS\n              value: 'zk-logging-service.logging.svc:2181'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'kafkamanager/kafka-manager:2.0.0.2'\n          imagePullPolicy: IfNotPresent\n          name: kafka-manager\n          ports:\n            - containerPort: 9000\n              name: tcp-9000\n              protocol: TCP\n          resources: {}\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-manager.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kafka-manager service对象\n\n```yaml\n# kafka-manager-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  ports:\n    - name: kafka-manager\n      port: 9000\n      protocol: TCP\n      targetPort: 9000\n  selector:\n    app: kafka-manager\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-manager-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 通过ingress暴露kafka-manager服务\n\n```yaml\n# kafka-manager-ingress.yaml\nkind: Ingress\nmetadata:\n   name: kafka-manager\n   namespace: logging\nspec:\n   rules:\n   - host: kafka-manager.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kafka-manager\n          servicePort: 9000\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-manager-ingress.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n检查所有的pod都正常运行：\n\n```bash\n$ kubectl get pod,svc,ingress -n logging | grep -E 'kafka|zk'\n```\n\n<img src=\"kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n## 创建nginx配置\n\n在nginx服务器上增加kafka-manager配置，代理kafka服务：\n\n```nginx\n# /etc/nginx/conf.d/kafka-manager.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kafka-manager.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kafka-manager.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kafka-manager.example.com_access.log main;\n    error_log /var/log/nginx/kafka-manager.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查配置并重载nginx：\n\n```bash\n$ nginx -t \n$ nginx -s reload \n```\n\n\n\n<br>\n\n\n\n## 访问并配置kafka-manager\n\n通过浏览器访问kafka-manager的域名`kafka-manager.example.com`即可进入kafka-manager的控制页面，点击上边的`Cluster`，然后选择`Add Cluster`添加kafka集群，需要填入下面几个信息：\n\n<img src=\"add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n最后点击`save`后集群信息添加完成。","source":"_posts/k8s实践系列-EFK-Kafka日志收集-三.md","raw":"---\ntitle: '[k8s实践系列]EFK+Kafka日志收集(三)--部署zookeeper和kafka集群'\ndate: 2020-07-09 20:03:25\ntags:\n- k8s\n- k8s日志收集\ncategories: \n- 实践K8s\n- EFK日志收集\ndescription: 部署kafka集群，并安装kafka-manager管理平台\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594370538704&di=ee50dd4647d528d43e4f3f5ded7058f0&imgtype=0&src=http%3A%2F%2Fstatic.open-open.com%2Fnews%2FuploadImg%2F20160525%2F20160525083516_270.png\n---\n\n\n\n## 部署zookeeper集群\n\n```yaml\n# zookeeper-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: zk-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zk-logging\n  serviceName: zk-logging-headless\n  template:\n    metadata:\n      labels:\n        app: zk-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - zk-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: ZOO_SERVERS\n              value: >-\n                server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n                server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181\n            - name: ZOO_4LW_COMMANDS_WHITELIST\n              value: 'ruok,srvr,conf,stat'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'zookeeper:3.5.7'\n          imagePullPolicy: Always\n          name: zk-logging\n          ports:\n            - containerPort: 2181\n              name: client\n              protocol: TCP\n            - containerPort: 2888\n              name: server\n              protocol: TCP\n            - containerPort: 3888\n              name: leader-election\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - >-\n              echo $(( $(echo ${POD_NAME} | awk -F \"-\" '{print $NF}') + 1 )) >\n              /data/myid\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n          image: 'busybox:1.31.0'\n          imagePullPolicy: IfNotPresent\n          name: init-zk-logging\n          resources: {}\n          volumeMounts:\n            - mountPath: /data\n              name: datadir\n    #   nodeSelector:\n        # node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n    #   serviceAccount: zk-logging-sa\n    #   serviceAccountName: zk-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 5Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n```bash\n$ kubectl apply -f zookeeper-cluster.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建zookeeper service对象\n\n```yaml\n# zookeeper-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: client\n      port: 2181\n      protocol: TCP\n      targetPort: 2181\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: zk-logging\n  name: zk-logging-headless\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 2888\n      protocol: TCP\n      targetPort: 2888\n    - name: leader-election\n      port: 3888\n      protocol: TCP\n      targetPort: 3888\n  selector:\n    app: zk-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f zookeeper-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kafka集群\n\n```yaml\n# kafka-cluster.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: kafka-logging\n  namespace: logging\nspec:\n  podManagementPolicy: Parallel\n  replicas: 3\n  selector:\n    matchLabels:\n      app: kafka-logging\n  serviceName: kafka-logging-service\n  template:\n    metadata:\n      labels:\n        app: kafka-logging\n    spec:\n    #   affinity:\n    #     podAntiAffinity:\n    #       requiredDuringSchedulingIgnoredDuringExecution:\n    #         - labelSelector:\n    #             matchExpressions:\n    #               - key: app\n    #                 operator: In\n    #                 values:\n    #                   - kafka-logging\n    #           topologyKey: kubernetes.io/hostname\n      containers:\n        - env:\n            - name: KAFKA_REPLICAS\n              value: '3'\n            - name: KAFKA_ZK_LOCAL\n              value: 'false'\n            - name: KAFKA_HEAP_OPTS\n              value: '-Xmx1024M -Xms1024M'\n            - name: SERVER_num_partitions\n              value: '3'\n            - name: SERVER_delete_topic_enable\n              value: 'true'\n            - name: SERVER_log_retention_hours\n              value: '2147483647'\n            - name: KAFKA_ADVERTISED_PORT\n              value: '9092'\n            - name: SERVER_zookeeper_connection_timeout_ms\n              value: '6000'\n            - name: SERVER_log_dirs\n              value: /opt/kafka/data/logs\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: KAFKA_ZOOKEEPER_CONNECT\n              value: 'zk-logging-service.logging.svc.cluster.local:2181'\n            - name: BROKER_ID_COMMAND\n              value: 'hostname | awk -F ''-'' ''{print $NF}'''\n            - name: KAFKA_PORT_NUMBER\n              value: '9092'\n            - name: KAFKA_ADVERTISED_HOST_NAME\n              value: >-\n                $(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'wurstmeister/kafka:2.12-2.5.0'\n          imagePullPolicy: Always\n          name: kafka-logging\n          ports:\n            - containerPort: 9092\n              name: server\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /kafka\n              name: datadir\n      dnsPolicy: ClusterFirst\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 0\n        runAsUser: 0\n    #   serviceAccount: kafka-logging-sa\n    #   serviceAccountName: kafka-logging-sa\n      terminationGracePeriodSeconds: 30\n  updateStrategy:\n    type: RollingUpdate\n  volumeClaimTemplates:\n    - metadata:\n        creationTimestamp: null\n        name: datadir\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 20Gi\n        storageClassName: logging-storageclass\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-cluster.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kafka service对象\n\n```yaml\n# kafka-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-logging\n  name: kafka-logging-service\n  namespace: logging\nspec:\n  clusterIP: None\n  ports:\n    - name: server\n      port: 9092\n      protocol: TCP\n      targetPort: 9092\n  selector:\n    app: kafka-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署kafka-manager\n\nkafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。\n\n```yaml\n# kafka-manager.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kafka-manager\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kafka-manager\n    spec:\n      containers:\n        - env:\n            - name: ZK_HOSTS\n              value: 'zk-logging-service.logging.svc:2181'\n            - name: TZ\n              value: Asia/Shanghai\n          image: 'kafkamanager/kafka-manager:2.0.0.2'\n          imagePullPolicy: IfNotPresent\n          name: kafka-manager\n          ports:\n            - containerPort: 9000\n              name: tcp-9000\n              protocol: TCP\n          resources: {}\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-manager.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kafka-manager service对象\n\n```yaml\n# kafka-manager-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: kafka-manager\n  name: kafka-manager\n  namespace: logging\nspec:\n  ports:\n    - name: kafka-manager\n      port: 9000\n      protocol: TCP\n      targetPort: 9000\n  selector:\n    app: kafka-manager\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-manager-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 通过ingress暴露kafka-manager服务\n\n```yaml\n# kafka-manager-ingress.yaml\nkind: Ingress\nmetadata:\n   name: kafka-manager\n   namespace: logging\nspec:\n   rules:\n   - host: kafka-manager.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kafka-manager\n          servicePort: 9000\n```\n\n\n\n```bash\n$ kubectl apply -f kafka-manager-ingress.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n检查所有的pod都正常运行：\n\n```bash\n$ kubectl get pod,svc,ingress -n logging | grep -E 'kafka|zk'\n```\n\n<img src=\"kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n## 创建nginx配置\n\n在nginx服务器上增加kafka-manager配置，代理kafka服务：\n\n```nginx\n# /etc/nginx/conf.d/kafka-manager.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kafka-manager.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kafka-manager.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kafka-manager.example.com_access.log main;\n    error_log /var/log/nginx/kafka-manager.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查配置并重载nginx：\n\n```bash\n$ nginx -t \n$ nginx -s reload \n```\n\n\n\n<br>\n\n\n\n## 访问并配置kafka-manager\n\n通过浏览器访问kafka-manager的域名`kafka-manager.example.com`即可进入kafka-manager的控制页面，点击上边的`Cluster`，然后选择`Add Cluster`添加kafka集群，需要填入下面几个信息：\n\n<img src=\"add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n最后点击`save`后集群信息添加完成。","slug":"k8s实践系列-EFK-Kafka日志收集-三","published":1,"updated":"2020-07-18T07:33:34.464Z","_id":"ckceqtkm60000dxn0datw5htb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"部署zookeeper集群\"><a href=\"#部署zookeeper集群\" class=\"headerlink\" title=\"部署zookeeper集群\"></a>部署zookeeper集群</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - zk-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_SERVERS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_4LW_COMMANDS_WHITELIST</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'ruok,srvr,conf,stat'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'zookeeper:3.5.7'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">              <span class=\"string\">echo</span> <span class=\"string\">$((</span> <span class=\"string\">$(echo</span> <span class=\"string\">$&#123;POD_NAME&#125;</span> <span class=\"string\">|</span> <span class=\"string\">awk</span> <span class=\"string\">-F</span> <span class=\"string\">\"-\"</span> <span class=\"string\">'&#123;print $NF&#125;'</span><span class=\"string\">)</span> <span class=\"string\">+</span> <span class=\"number\">1</span> <span class=\"string\">))</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">              <span class=\"string\">/data/myid</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'busybox:1.31.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">        <span class=\"comment\"># node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: zk-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: zk-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f zookeeper-cluster.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建zookeeper-service对象\"><a href=\"#创建zookeeper-service对象\" class=\"headerlink\" title=\"创建zookeeper service对象\"></a>创建zookeeper service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f zookeeper-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kafka集群\"><a href=\"#创建kafka集群\" class=\"headerlink\" title=\"创建kafka集群\"></a>创建kafka集群</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - kafka-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_REPLICAS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZK_LOCAL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'false'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_HEAP_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'-Xmx1024M -Xms1024M'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_num_partitions</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_delete_topic_enable</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_retention_hours</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'2147483647'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_PORT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'9092'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_zookeeper_connection_timeout_ms</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'6000'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_dirs</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/opt/kafka/data/logs</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZOOKEEPER_CONNECT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'zk-logging-service.logging.svc.cluster.local:2181'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">BROKER_ID_COMMAND</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'hostname | awk -F '</span><span class=\"string\">'-'</span><span class=\"string\">' '</span><span class=\"string\">'&#123;print $NF&#125;'</span><span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_PORT_NUMBER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'9092'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">$(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'wurstmeister/kafka:2.12-2.5.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/kafka</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: kafka-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: kafka-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-cluster.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kafka-service对象\"><a href=\"#创建kafka-service对象\" class=\"headerlink\" title=\"创建kafka service对象\"></a>创建kafka service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署kafka-manager\"><a href=\"#部署kafka-manager\" class=\"headerlink\" title=\"部署kafka-manager\"></a>部署kafka-manager</h2><p>kafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZK_HOSTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'zk-logging-service.logging.svc:2181'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'kafkamanager/kafka-manager:2.0.0.2'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9000</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-manager.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kafka-manager-service对象\"><a href=\"#创建kafka-manager-service对象\" class=\"headerlink\" title=\"创建kafka-manager service对象\"></a>创建kafka-manager service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-manager-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"通过ingress暴露kafka-manager服务\"><a href=\"#通过ingress暴露kafka-manager服务\" class=\"headerlink\" title=\"通过ingress暴露kafka-manager服务\"></a>通过ingress暴露kafka-manager服务</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kafka-manager.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-manager-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>检查所有的pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc,ingress -n logging | grep -E <span class=\"string\">'kafka|zk'</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n<h2 id=\"创建nginx配置\"><a href=\"#创建nginx配置\" class=\"headerlink\" title=\"创建nginx配置\"></a>创建nginx配置</h2><p>在nginx服务器上增加kafka-manager配置，代理kafka服务：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kafka-manager.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kafka-manager.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kafka-manager.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t </span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"访问并配置kafka-manager\"><a href=\"#访问并配置kafka-manager\" class=\"headerlink\" title=\"访问并配置kafka-manager\"></a>访问并配置kafka-manager</h2><p>通过浏览器访问kafka-manager的域名<code>kafka-manager.example.com</code>即可进入kafka-manager的控制页面，点击上边的<code>Cluster</code>，然后选择<code>Add Cluster</code>添加kafka集群，需要填入下面几个信息：</p>\n<img src= \"/img/loading.gif\" data-src=\"add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n<p>最后点击<code>save</code>后集群信息添加完成。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"部署zookeeper集群\"><a href=\"#部署zookeeper集群\" class=\"headerlink\" title=\"部署zookeeper集群\"></a>部署zookeeper集群</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - zk-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_SERVERS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">server.1=zk-logging-0.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.2=zk-logging-1.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">                <span class=\"string\">server.3=zk-logging-2.zk-logging-headless.logging.svc.cluster.local:2888:3888;2181</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZOO_4LW_COMMANDS_WHITELIST</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'ruok,srvr,conf,stat'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'zookeeper:3.5.7'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">              <span class=\"string\">echo</span> <span class=\"string\">$((</span> <span class=\"string\">$(echo</span> <span class=\"string\">$&#123;POD_NAME&#125;</span> <span class=\"string\">|</span> <span class=\"string\">awk</span> <span class=\"string\">-F</span> <span class=\"string\">\"-\"</span> <span class=\"string\">'&#123;print $NF&#125;'</span><span class=\"string\">)</span> <span class=\"string\">+</span> <span class=\"number\">1</span> <span class=\"string\">))</span> <span class=\"string\">&gt;</span></span><br><span class=\"line\">              <span class=\"string\">/data/myid</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'busybox:1.31.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-zk-logging</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">        <span class=\"comment\"># node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: zk-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: zk-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">5Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f zookeeper-cluster.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建zookeeper-service对象\"><a href=\"#创建zookeeper-service对象\" class=\"headerlink\" title=\"创建zookeeper service对象\"></a>创建zookeeper service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">client</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2181</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zk-logging-headless</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">2888</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">leader-election</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">3888</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">zk-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f zookeeper-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kafka集群\"><a href=\"#创建kafka集群\" class=\"headerlink\" title=\"创建kafka集群\"></a>创建kafka集群</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-cluster.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StatefulSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">podManagementPolicy:</span> <span class=\"string\">Parallel</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">    <span class=\"comment\">#   affinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#     podAntiAffinity:</span></span><br><span class=\"line\">    <span class=\"comment\">#       requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">    <span class=\"comment\">#         - labelSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#             matchExpressions:</span></span><br><span class=\"line\">    <span class=\"comment\">#               - key: app</span></span><br><span class=\"line\">    <span class=\"comment\">#                 operator: In</span></span><br><span class=\"line\">    <span class=\"comment\">#                 values:</span></span><br><span class=\"line\">    <span class=\"comment\">#                   - kafka-logging</span></span><br><span class=\"line\">    <span class=\"comment\">#           topologyKey: kubernetes.io/hostname</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_REPLICAS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZK_LOCAL</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'false'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_HEAP_OPTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'-Xmx1024M -Xms1024M'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_num_partitions</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_delete_topic_enable</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_retention_hours</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'2147483647'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_PORT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'9092'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_zookeeper_connection_timeout_ms</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'6000'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">SERVER_log_dirs</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">/opt/kafka/data/logs</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ZOOKEEPER_CONNECT</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'zk-logging-service.logging.svc.cluster.local:2181'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">BROKER_ID_COMMAND</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'hostname | awk -F '</span><span class=\"string\">'-'</span><span class=\"string\">' '</span><span class=\"string\">'&#123;print $NF&#125;'</span><span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_PORT_NUMBER</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'9092'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KAFKA_ADVERTISED_HOST_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">                <span class=\"string\">$(KAFKA_ADVERTISED_HOST_NAME).kafka-logging-service.logging.svc.cluster.local</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'wurstmeister/kafka:2.12-2.5.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/kafka</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccount: kafka-logging-sa</span></span><br><span class=\"line\">    <span class=\"comment\">#   serviceAccountName: kafka-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">volumeClaimTemplates:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">metadata:</span></span><br><span class=\"line\">        <span class=\"attr\">creationTimestamp:</span> <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">datadir</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span></span><br><span class=\"line\">        <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">        <span class=\"attr\">storageClassName:</span> <span class=\"string\">logging-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-cluster.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kafka-service对象\"><a href=\"#创建kafka-service对象\" class=\"headerlink\" title=\"创建kafka service对象\"></a>创建kafka service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9092</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署kafka-manager\"><a href=\"#部署kafka-manager\" class=\"headerlink\" title=\"部署kafka-manager\"></a>部署kafka-manager</h2><p>kafka-manager是kafka的一个web管理平台，这里部署一下方便在有需要时进行管理。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">25</span><span class=\"string\">%</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ZK_HOSTS</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">'zk-logging-service.logging.svc:2181'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'kafkamanager/kafka-manager:2.0.0.2'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9000</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-manager.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kafka-manager-service对象\"><a href=\"#创建kafka-manager-service对象\" class=\"headerlink\" title=\"创建kafka-manager service对象\"></a>创建kafka-manager service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9000</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-manager-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"通过ingress暴露kafka-manager服务\"><a href=\"#通过ingress暴露kafka-manager服务\" class=\"headerlink\" title=\"通过ingress暴露kafka-manager服务\"></a>通过ingress暴露kafka-manager服务</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kafka-manager-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kafka-manager.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kafka-manager</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">9000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kafka-manager-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>检查所有的pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc,ingress -n logging | grep -E <span class=\"string\">'kafka|zk'</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"kafka-pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n<h2 id=\"创建nginx配置\"><a href=\"#创建nginx配置\" class=\"headerlink\" title=\"创建nginx配置\"></a>创建nginx配置</h2><p>在nginx服务器上增加kafka-manager配置，代理kafka服务：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kafka-manager.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kafka-manager.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kafka-manager.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kafka-manager.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t </span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"访问并配置kafka-manager\"><a href=\"#访问并配置kafka-manager\" class=\"headerlink\" title=\"访问并配置kafka-manager\"></a>访问并配置kafka-manager</h2><p>通过浏览器访问kafka-manager的域名<code>kafka-manager.example.com</code>即可进入kafka-manager的控制页面，点击上边的<code>Cluster</code>，然后选择<code>Add Cluster</code>添加kafka集群，需要填入下面几个信息：</p>\n<img src=\"add-cluster-1.png\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"add-cluster-2.png\" style=\"zoom:50%;\" />\n\n\n\n<p>最后点击<code>save</code>后集群信息添加完成。</p>\n"},{"title":"[k8s实践系列]EFK+Kafka日志收集(四)--部署logstash","date":"2020-07-10T02:47:57.000Z","description":"部署logstash","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594370632842&di=f01ac8d28b717c7dcd0e297ae0f25e1c&imgtype=0&src=http%3A%2F%2Fattach.dataguru.cn%2Fattachments%2Fforum%2F201605%2F01%2F224314k0sjhntg3je4qj15.png","_content":"\n\n\n##  创建logstash配置\n\nlogstash相关的配置文件可以在[logstash配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`efk-template.json`, `init_efk.sh`, `k8s-log.json`, `logstash.conf`, `logstash.yml`, `systemd-log.json` 放入一个目录下，例如`logstash-conf`下：\n\n- `efk-template.json`：定义的是针对索引的日志策略；\n- `init_efk.sh`：操作es ，初始化一些配置；\n-  `k8s-log.json`：收集k8s日志的配置；\n-  `logstash.conf`：logstash的流水线配置；\n- `logstash.yml`：logstash配置文件；\n-  `systemd-log.json`：收集系统日志的配置；\n\n\n\n然后执行下面的命令：\n\n```bash\n$ kubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging \n```\n\n\n\n<img src=\"configmap.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 部署logstash\n\nlogstash不需要很多实例，所以使用`deployment`方式部署，可以根据需要进行扩展：\n\n```yaml\n# logstash-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: logstash-logging\n  name: logstash-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: logstash-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: logstash-logging\n      name: logstash-logging\n    spec:\n      containers:\n        - env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'logstash:7.8.0'\n          imagePullPolicy: IfNotPresent\n          name: logstash-logging\n          ports:\n            - containerPort: 5044\n              name: tcp-5044\n              protocol: TCP\n            - containerPort: 9600\n              name: tcp-9600\n              protocol: TCP\n          resources: {}\n          securityContext:\n            privileged: true\n            runAsUser: 1000\n          volumeMounts:\n            - mountPath: /usr/share/logstash/config/logstash.yml\n              name: logstash-config\n              subPath: logstash.yml\n            - mountPath: /usr/share/logstash/pipeline/logstash.conf\n              name: logstash-config\n              subPath: logstash.conf\n            - mountPath: /usr/share/logstash/config/efk-template.json\n              name: logstash-config\n              subPath: efk-template.json\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_efk.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-efk\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_efk.sh\n              name: logstash-config\n              subPath: init_efk.sh\n            - mountPath: /tmp/k8s-log.json\n              name: logstash-config\n              subPath: k8s-log.json\n            - mountPath: /tmp/systemd-log.json\n              name: logstash-config\n              subPath: systemd-log.json\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: logstash-logging-config\n          name: logstash-config\n```\n\n\n\n直接运行下面的命令部署logstash：\n\n```bash\n$ kubectl apply -f logstash-deployment.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n确保所有的pod都处于Running状态：\n\n```bash\n$ kubectl get pod -n logging | grep logstash\n```\n\n<img src=\"logstash-pod.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/k8s实践系列-EFK-Kafka日志收集-四.md","raw":"---\ntitle: '[k8s实践系列]EFK+Kafka日志收集(四)--部署logstash'\ndate: 2020-07-10 10:47:57\ntags:\n- k8s\n- k8s日志收集\ncategories: \n- 实践K8s\n- EFK日志收集\ndescription: 部署logstash\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594370632842&di=f01ac8d28b717c7dcd0e297ae0f25e1c&imgtype=0&src=http%3A%2F%2Fattach.dataguru.cn%2Fattachments%2Fforum%2F201605%2F01%2F224314k0sjhntg3je4qj15.png\n---\n\n\n\n##  创建logstash配置\n\nlogstash相关的配置文件可以在[logstash配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`efk-template.json`, `init_efk.sh`, `k8s-log.json`, `logstash.conf`, `logstash.yml`, `systemd-log.json` 放入一个目录下，例如`logstash-conf`下：\n\n- `efk-template.json`：定义的是针对索引的日志策略；\n- `init_efk.sh`：操作es ，初始化一些配置；\n-  `k8s-log.json`：收集k8s日志的配置；\n-  `logstash.conf`：logstash的流水线配置；\n- `logstash.yml`：logstash配置文件；\n-  `systemd-log.json`：收集系统日志的配置；\n\n\n\n然后执行下面的命令：\n\n```bash\n$ kubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging \n```\n\n\n\n<img src=\"configmap.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 部署logstash\n\nlogstash不需要很多实例，所以使用`deployment`方式部署，可以根据需要进行扩展：\n\n```yaml\n# logstash-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: logstash-logging\n  name: logstash-logging\n  namespace: logging\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: logstash-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: logstash-logging\n      name: logstash-logging\n    spec:\n      containers:\n        - env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'logstash:7.8.0'\n          imagePullPolicy: IfNotPresent\n          name: logstash-logging\n          ports:\n            - containerPort: 5044\n              name: tcp-5044\n              protocol: TCP\n            - containerPort: 9600\n              name: tcp-9600\n              protocol: TCP\n          resources: {}\n          securityContext:\n            privileged: true\n            runAsUser: 1000\n          volumeMounts:\n            - mountPath: /usr/share/logstash/config/logstash.yml\n              name: logstash-config\n              subPath: logstash.yml\n            - mountPath: /usr/share/logstash/pipeline/logstash.conf\n              name: logstash-config\n              subPath: logstash.conf\n            - mountPath: /usr/share/logstash/config/efk-template.json\n              name: logstash-config\n              subPath: efk-template.json\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_efk.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-efk\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_efk.sh\n              name: logstash-config\n              subPath: init_efk.sh\n            - mountPath: /tmp/k8s-log.json\n              name: logstash-config\n              subPath: k8s-log.json\n            - mountPath: /tmp/systemd-log.json\n              name: logstash-config\n              subPath: systemd-log.json\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n        seLinuxOptions:\n          level: 's0:c13,c12'\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: logstash-logging-config\n          name: logstash-config\n```\n\n\n\n直接运行下面的命令部署logstash：\n\n```bash\n$ kubectl apply -f logstash-deployment.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n确保所有的pod都处于Running状态：\n\n```bash\n$ kubectl get pod -n logging | grep logstash\n```\n\n<img src=\"logstash-pod.png\" style=\"zoom:50%;\" />\n\n","slug":"k8s实践系列-EFK-Kafka日志收集-四","published":1,"updated":"2020-07-18T07:30:22.032Z","_id":"ckcfnkyk30000kon0cqxg9vvz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建logstash配置\"><a href=\"#创建logstash配置\" class=\"headerlink\" title=\"创建logstash配置\"></a>创建logstash配置</h2><p>logstash相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\" target=\"_blank\" rel=\"noopener\">logstash配置文件</a> 找到，这里需要将<code>efk-template.json</code>, <code>init_efk.sh</code>, <code>k8s-log.json</code>, <code>logstash.conf</code>, <code>logstash.yml</code>, <code>systemd-log.json</code> 放入一个目录下，例如<code>logstash-conf</code>下：</p>\n<ul>\n<li><code>efk-template.json</code>：定义的是针对索引的日志策略；</li>\n<li><code>init_efk.sh</code>：操作es ，初始化一些配置；</li>\n<li><code>k8s-log.json</code>：收集k8s日志的配置；</li>\n<li><code>logstash.conf</code>：logstash的流水线配置；</li>\n<li><code>logstash.yml</code>：logstash配置文件；</li>\n<li><code>systemd-log.json</code>：收集系统日志的配置；</li>\n</ul>\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"configmap.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"部署logstash\"><a href=\"#部署logstash\" class=\"headerlink\" title=\"部署logstash\"></a>部署logstash</h2><p>logstash不需要很多实例，所以使用<code>deployment</code>方式部署，可以根据需要进行扩展：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logstash-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'logstash:7.8.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5044</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5044</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9600</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9600</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/logstash.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.conf</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/efk-template.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">efk-template.json</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'curlimages/curl:latest'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-efk</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_efk.sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/k8s-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">k8s-log.json</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/systemd-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">systemd-log.json</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">'s0:c13,c12'</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接运行下面的命令部署logstash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f logstash-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有的pod都处于Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n logging | grep logstash</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"logstash-pod.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建logstash配置\"><a href=\"#创建logstash配置\" class=\"headerlink\" title=\"创建logstash配置\"></a>创建logstash配置</h2><p>logstash相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\" target=\"_blank\" rel=\"noopener\">logstash配置文件</a> 找到，这里需要将<code>efk-template.json</code>, <code>init_efk.sh</code>, <code>k8s-log.json</code>, <code>logstash.conf</code>, <code>logstash.yml</code>, <code>systemd-log.json</code> 放入一个目录下，例如<code>logstash-conf</code>下：</p>\n<ul>\n<li><code>efk-template.json</code>：定义的是针对索引的日志策略；</li>\n<li><code>init_efk.sh</code>：操作es ，初始化一些配置；</li>\n<li><code>k8s-log.json</code>：收集k8s日志的配置；</li>\n<li><code>logstash.conf</code>：logstash的流水线配置；</li>\n<li><code>logstash.yml</code>：logstash配置文件；</li>\n<li><code>systemd-log.json</code>：收集系统日志的配置；</li>\n</ul>\n<p>然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap logstash-logging-config --from-file=./logstash-conf/ -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"configmap.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"部署logstash\"><a href=\"#部署logstash\" class=\"headerlink\" title=\"部署logstash\"></a>部署logstash</h2><p>logstash不需要很多实例，所以使用<code>deployment</code>方式部署，可以根据需要进行扩展：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logstash-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'logstash:7.8.0'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5044</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5044</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9600</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-9600</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/logstash.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">logstash.conf</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/logstash/config/efk-template.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">efk-template.json</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'curlimages/curl:latest'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-efk</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_efk.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_efk.sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/k8s-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">k8s-log.json</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/tmp/systemd-log.json</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">systemd-log.json</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"attr\">seLinuxOptions:</span></span><br><span class=\"line\">          <span class=\"attr\">level:</span> <span class=\"string\">'s0:c13,c12'</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">logstash-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">logstash-config</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>直接运行下面的命令部署logstash：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f logstash-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有的pod都处于Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n logging | grep logstash</span><br></pre></td></tr></table></figure>\n\n<img src=\"logstash-pod.png\" style=\"zoom:50%;\" />\n\n"},{"title":"[k8s实践系列]EFK+Kafka日志收集(五)--部署filebeat","date":"2020-07-10T03:27:47.000Z","description":"部署filebeat","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594302026732&di=01120f85d5d842f277b2ab6c42ef3373&imgtype=0&src=http%3A%2F%2Fwww.ruanyifeng.com%2Fblogimg%2Fasset%2F2017%2Fbg2017081701.jpg","_content":"\n\n\n## 创建filebeat相关权限\n\n```yaml\n# filebeat-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: filebeat-logging-sa\n  namespace: logging\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: filebeat-logging-bind\nsubjects:\n- kind: ServiceAccount\n  name: filebeat-logging-sa\n  namespace: logging\nroleRef:\n  kind: ClusterRole\n  name: filebeat-logging-clusterrole\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: filebeat-logging-clusterrole\nrules:\n- apiGroups: [\"\"] # \"\" indicates the core API group\n  resources:\n  - namespaces\n  - pods\n  verbs:\n  - get\n  - watch\n  - list\n```\n\n\n\n```bash\n$ kubectl apply -f filebeat-rbac.yaml\n```\n\n<br>\n\n\n\n## 创建相关配置\n\n```yaml\n# filebeat-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: filebeat-logging-config\n  namespace: logging\ndata:\n  filebeat.yml: |\n    name: \"filebeat-k8s\"\n    filebeat.registry.path: /var/log/filebeat/registry\n    logging.level: warning\n    filebeat.inputs:\n    - type: container\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/lib/docker/containers/*/*-json.log\n      multiline.pattern: '^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+'\n      multiline.negate: false\n      multiline.match: after\n      multiline.max_lines: 500\n      multiline.timeout: 5s\n      fields_under_root: true\n      overwrite_keys: true\n\n    - type: log\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/log/messages\n      fields_under_root: true\n      overwrite_keys: true\n\n    processors:\n      - add_kubernetes_metadata:\n          in_cluster: true\n      - add_host_metadata: \n          netinfo.enabled: true\n      - add_locale: ~\n      - add_fields:\n          target: host\n          fields:\n            name: ${NODE_NAME}\n            ip: ${NODE_IP}\n            podip: ${POD_IP}\n      - drop_fields:\n          fields: [\"agent.ephemeral_id\",\"agent.id\",\"log.offset\",\"suricata.eve.timestamp\",\"host.os.codename\",\"host.hostname\"]\n          ignore_missing: false\n\n    output.kafka:\n      hosts: [\"kafka-logging-service:9092\"]\n      version: 2.0.0\n      worker: 3\n      topics: \n        - topic: \"k8s-log.%{[kubernetes.namespace]}\"\n          when.contains: \n            input.type: \"container\"\n        - topic: \"systemd-log.%{[host.name]}\"\n          when.contains: \n            input.type: \"log\"\n      partition.round_robin:\n        reachable_only: false\n      required_acks: 1\n      compression: gzip\n      max_message_bytes: 1000000\n\n\n    xpack.monitoring.enabled: true\n    xpack.monitoring.elasticsearch.hosts: [ \"es-logging-service:9200\" ]\n    xpack.monitoring.elasticsearch.protocol: \"http\"\n    xpack.monitoring.elasticsearch.username: \"elastic\" \n    xpack.monitoring.elasticsearch.password: \"${ELASTIC_PASSWORD}\"\n```\n\n\n\n在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。\n\n\n\n```bash\n$ kubectl apply -f filebeat-configmap.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署filebeat\n\n每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：\n\n```yaml\n# fileat-daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: filebeat-logging\n    version: v1\n  name: filebeat-logging\n  namespace: logging\nspec:\n  selector:\n    matchLabels:\n      app: filebeat-logging\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: filebeat-logging\n        version: v1\n    spec:\n      containers:\n        - args:\n            - '-c'\n            - /home/filebeat-config/filebeat.yml\n            - '-e'\n          env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: spec.nodeName\n            - name: NODE_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.hostIP\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'elastic/filebeat:7.6.8'\n          imagePullPolicy: IfNotPresent\n          name: filebeat-logging\n          securityContext:\n            privileged: true\n            runAsUser: 0\n          volumeMounts:\n            - mountPath: /var/log\n              name: filebeat-storage\n            - mountPath: /var/log/pods\n              name: varlogpods\n            - mountPath: /var/lib/docker/containers\n              name: varlibdockercontainers\n            - mountPath: /home/filebeat-config\n              name: filebeat-volume\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      serviceAccount: filebeat-logging-sa\n      serviceAccountName: filebeat-logging-sa\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - hostPath:\n            path: /var/log\n            type: ''\n          name: filebeat-storage\n        - hostPath:\n            path: /var/log/pods\n            type: ''\n          name: varlogpods\n        - hostPath:\n            path: /var/lib/docker/containers\n            type: ''\n          name: varlibdockercontainers\n        - configMap:\n            defaultMode: 420\n            name: filebeat-logging-config\n          name: filebeat-volume\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 1\n    type: RollingUpdate\n```\n\n\n\n在yaml文件中，将`/var/lib/docker/containers`和`/var/log`挂载到了容器中，方便容器进行日志收集。\n\n```bash\n$ kubectl apply -f filebeat-daemonset.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n确保所有pod都正常运行：\n\n```bash\n$ kubectl get pod -n logging | grep filebeat\n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />","source":"_posts/k8s实践系列-EFK-Kafka日志收集-五.md","raw":"---\ntitle: '[k8s实践系列]EFK+Kafka日志收集(五)--部署filebeat'\ndate: 2020-07-10 11:27:47\ntags:\n- k8s\n- k8s日志收集\ncategories: \n- 实践K8s\n- EFK日志收集\ndescription: 部署filebeat\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594302026732&di=01120f85d5d842f277b2ab6c42ef3373&imgtype=0&src=http%3A%2F%2Fwww.ruanyifeng.com%2Fblogimg%2Fasset%2F2017%2Fbg2017081701.jpg\n---\n\n\n\n## 创建filebeat相关权限\n\n```yaml\n# filebeat-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: filebeat-logging-sa\n  namespace: logging\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: filebeat-logging-bind\nsubjects:\n- kind: ServiceAccount\n  name: filebeat-logging-sa\n  namespace: logging\nroleRef:\n  kind: ClusterRole\n  name: filebeat-logging-clusterrole\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: filebeat-logging-clusterrole\nrules:\n- apiGroups: [\"\"] # \"\" indicates the core API group\n  resources:\n  - namespaces\n  - pods\n  verbs:\n  - get\n  - watch\n  - list\n```\n\n\n\n```bash\n$ kubectl apply -f filebeat-rbac.yaml\n```\n\n<br>\n\n\n\n## 创建相关配置\n\n```yaml\n# filebeat-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: filebeat-logging-config\n  namespace: logging\ndata:\n  filebeat.yml: |\n    name: \"filebeat-k8s\"\n    filebeat.registry.path: /var/log/filebeat/registry\n    logging.level: warning\n    filebeat.inputs:\n    - type: container\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/lib/docker/containers/*/*-json.log\n      multiline.pattern: '^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+'\n      multiline.negate: false\n      multiline.match: after\n      multiline.max_lines: 500\n      multiline.timeout: 5s\n      fields_under_root: true\n      overwrite_keys: true\n\n    - type: log\n      scan_frequency: 5s\n      enable: true\n      symlinks: false\n      harvester_buffer_size: 16384\n      max_bytes: 10485760\n      paths:\n      - /var/log/messages\n      fields_under_root: true\n      overwrite_keys: true\n\n    processors:\n      - add_kubernetes_metadata:\n          in_cluster: true\n      - add_host_metadata: \n          netinfo.enabled: true\n      - add_locale: ~\n      - add_fields:\n          target: host\n          fields:\n            name: ${NODE_NAME}\n            ip: ${NODE_IP}\n            podip: ${POD_IP}\n      - drop_fields:\n          fields: [\"agent.ephemeral_id\",\"agent.id\",\"log.offset\",\"suricata.eve.timestamp\",\"host.os.codename\",\"host.hostname\"]\n          ignore_missing: false\n\n    output.kafka:\n      hosts: [\"kafka-logging-service:9092\"]\n      version: 2.0.0\n      worker: 3\n      topics: \n        - topic: \"k8s-log.%{[kubernetes.namespace]}\"\n          when.contains: \n            input.type: \"container\"\n        - topic: \"systemd-log.%{[host.name]}\"\n          when.contains: \n            input.type: \"log\"\n      partition.round_robin:\n        reachable_only: false\n      required_acks: 1\n      compression: gzip\n      max_message_bytes: 1000000\n\n\n    xpack.monitoring.enabled: true\n    xpack.monitoring.elasticsearch.hosts: [ \"es-logging-service:9200\" ]\n    xpack.monitoring.elasticsearch.protocol: \"http\"\n    xpack.monitoring.elasticsearch.username: \"elastic\" \n    xpack.monitoring.elasticsearch.password: \"${ELASTIC_PASSWORD}\"\n```\n\n\n\n在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。\n\n\n\n```bash\n$ kubectl apply -f filebeat-configmap.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署filebeat\n\n每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：\n\n```yaml\n# fileat-daemonset.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  labels:\n    app: filebeat-logging\n    version: v1\n  name: filebeat-logging\n  namespace: logging\nspec:\n  selector:\n    matchLabels:\n      app: filebeat-logging\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: filebeat-logging\n        version: v1\n    spec:\n      containers:\n        - args:\n            - '-c'\n            - /home/filebeat-config/filebeat.yml\n            - '-e'\n          env:\n            - name: TZ\n              value: Asia/Shanghai\n            - name: POD_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.podIP\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: spec.nodeName\n            - name: NODE_IP\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: status.hostIP\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'elastic/filebeat:7.6.8'\n          imagePullPolicy: IfNotPresent\n          name: filebeat-logging\n          securityContext:\n            privileged: true\n            runAsUser: 0\n          volumeMounts:\n            - mountPath: /var/log\n              name: filebeat-storage\n            - mountPath: /var/log/pods\n              name: varlogpods\n            - mountPath: /var/lib/docker/containers\n              name: varlibdockercontainers\n            - mountPath: /home/filebeat-config\n              name: filebeat-volume\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      serviceAccount: filebeat-logging-sa\n      serviceAccountName: filebeat-logging-sa\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - hostPath:\n            path: /var/log\n            type: ''\n          name: filebeat-storage\n        - hostPath:\n            path: /var/log/pods\n            type: ''\n          name: varlogpods\n        - hostPath:\n            path: /var/lib/docker/containers\n            type: ''\n          name: varlibdockercontainers\n        - configMap:\n            defaultMode: 420\n            name: filebeat-logging-config\n          name: filebeat-volume\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 1\n    type: RollingUpdate\n```\n\n\n\n在yaml文件中，将`/var/lib/docker/containers`和`/var/log`挂载到了容器中，方便容器进行日志收集。\n\n```bash\n$ kubectl apply -f filebeat-daemonset.yaml\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n确保所有pod都正常运行：\n\n```bash\n$ kubectl get pod -n logging | grep filebeat\n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />","slug":"k8s实践系列-EFK-Kafka日志收集-五","published":1,"updated":"2020-07-18T07:33:56.387Z","_id":"ckcfocah70000o7n099ht2m5h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建filebeat相关权限\"><a href=\"#创建filebeat相关权限\" class=\"headerlink\" title=\"创建filebeat相关权限\"></a>创建filebeat相关权限</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-bind</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span> <span class=\"comment\"># \"\" indicates the core API group</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f filebeat-rbac.yaml</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"创建相关配置\"><a href=\"#创建相关配置\" class=\"headerlink\" title=\"创建相关配置\"></a>创建相关配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-configmap.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">\"filebeat-k8s\"</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.registry.path:</span> <span class=\"string\">/var/log/filebeat/registry</span></span><br><span class=\"line\">    <span class=\"attr\">logging.level:</span> <span class=\"string\">warning</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">container</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/lib/docker/containers/*/*-json.log</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.pattern:</span> <span class=\"string\">'^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+'</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.negate:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.match:</span> <span class=\"string\">after</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.max_lines:</span> <span class=\"number\">500</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/log/messages</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">processors:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_kubernetes_metadata:</span></span><br><span class=\"line\">          <span class=\"attr\">in_cluster:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_host_metadata:</span> </span><br><span class=\"line\">          <span class=\"attr\">netinfo.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_locale:</span> <span class=\"string\">~</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">target:</span> <span class=\"string\">host</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">ip:</span> <span class=\"string\">$&#123;NODE_IP&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">podip:</span> <span class=\"string\">$&#123;POD_IP&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">drop_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span> <span class=\"string\">[\"agent.ephemeral_id\",\"agent.id\",\"log.offset\",\"suricata.eve.timestamp\",\"host.os.codename\",\"host.hostname\"]</span></span><br><span class=\"line\">          <span class=\"attr\">ignore_missing:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output.kafka:</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span> <span class=\"string\">[\"kafka-logging-service:9092\"]</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"number\">2.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"attr\">worker:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">topics:</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">\"k8s-log.<span class=\"template-variable\">%&#123;[kubernetes.namespace]&#125;</span>\"</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">\"container\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">\"systemd-log.<span class=\"template-variable\">%&#123;[host.name]&#125;</span>\"</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">\"log\"</span></span><br><span class=\"line\">      <span class=\"attr\">partition.round_robin:</span></span><br><span class=\"line\">        <span class=\"attr\">reachable_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">required_acks:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">compression:</span> <span class=\"string\">gzip</span></span><br><span class=\"line\">      <span class=\"attr\">max_message_bytes:</span> <span class=\"number\">1000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.hosts:</span> <span class=\"string\">[</span> <span class=\"string\">\"es-logging-service:9200\"</span> <span class=\"string\">]</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.protocol:</span> <span class=\"string\">\"http\"</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.username:</span> <span class=\"string\">\"elastic\"</span> </span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.password:</span> <span class=\"string\">\"$&#123;ELASTIC_PASSWORD&#125;\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f filebeat-configmap.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署filebeat\"><a href=\"#部署filebeat\" class=\"headerlink\" title=\"部署filebeat\"></a>部署filebeat</h2><p>每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># fileat-daemonset.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/home/filebeat-config/filebeat.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-e'</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">spec.nodeName</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.hostIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'elastic/filebeat:7.6.8'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/home/filebeat-config</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">420</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在yaml文件中，将<code>/var/lib/docker/containers</code>和<code>/var/log</code>挂载到了容器中，方便容器进行日志收集。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f filebeat-daemonset.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n logging | grep filebeat</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"pod.png\" style=\"zoom:50%;\" />","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建filebeat相关权限\"><a href=\"#创建filebeat相关权限\" class=\"headerlink\" title=\"创建filebeat相关权限\"></a>创建filebeat相关权限</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-bind</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-clusterrole</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span> <span class=\"comment\"># \"\" indicates the core API group</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">namespaces</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">  <span class=\"attr\">verbs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f filebeat-rbac.yaml</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"创建相关配置\"><a href=\"#创建相关配置\" class=\"headerlink\" title=\"创建相关配置\"></a>创建相关配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># filebeat-configmap.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">filebeat.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">\"filebeat-k8s\"</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.registry.path:</span> <span class=\"string\">/var/log/filebeat/registry</span></span><br><span class=\"line\">    <span class=\"attr\">logging.level:</span> <span class=\"string\">warning</span></span><br><span class=\"line\">    <span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">container</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/lib/docker/containers/*/*-json.log</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.pattern:</span> <span class=\"string\">'^[[:space:]]+.+\\b|^Caused by:|^[[:alpha:]]+.+Exception:\\s\\w+.+|^[[:alpha:]]+.+Exception$|^Exception\\s\\w+.+'</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.negate:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.match:</span> <span class=\"string\">after</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.max_lines:</span> <span class=\"number\">500</span></span><br><span class=\"line\">      <span class=\"attr\">multiline.timeout:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">      <span class=\"attr\">scan_frequency:</span> <span class=\"string\">5s</span></span><br><span class=\"line\">      <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">symlinks:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">harvester_buffer_size:</span> <span class=\"number\">16384</span></span><br><span class=\"line\">      <span class=\"attr\">max_bytes:</span> <span class=\"number\">10485760</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/log/messages</span></span><br><span class=\"line\">      <span class=\"attr\">fields_under_root:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overwrite_keys:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">processors:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_kubernetes_metadata:</span></span><br><span class=\"line\">          <span class=\"attr\">in_cluster:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_host_metadata:</span> </span><br><span class=\"line\">          <span class=\"attr\">netinfo.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_locale:</span> <span class=\"string\">~</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">add_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">target:</span> <span class=\"string\">host</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">$&#123;NODE_NAME&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">ip:</span> <span class=\"string\">$&#123;NODE_IP&#125;</span></span><br><span class=\"line\">            <span class=\"attr\">podip:</span> <span class=\"string\">$&#123;POD_IP&#125;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">drop_fields:</span></span><br><span class=\"line\">          <span class=\"attr\">fields:</span> <span class=\"string\">[\"agent.ephemeral_id\",\"agent.id\",\"log.offset\",\"suricata.eve.timestamp\",\"host.os.codename\",\"host.hostname\"]</span></span><br><span class=\"line\">          <span class=\"attr\">ignore_missing:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">output.kafka:</span></span><br><span class=\"line\">      <span class=\"attr\">hosts:</span> <span class=\"string\">[\"kafka-logging-service:9092\"]</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"number\">2.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">      <span class=\"attr\">worker:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">topics:</span> </span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">\"k8s-log.<span class=\"template-variable\">%&#123;[kubernetes.namespace]&#125;</span>\"</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">\"container\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">topic:</span> <span class=\"string\">\"systemd-log.<span class=\"template-variable\">%&#123;[host.name]&#125;</span>\"</span></span><br><span class=\"line\">          <span class=\"attr\">when.contains:</span> </span><br><span class=\"line\">            <span class=\"attr\">input.type:</span> <span class=\"string\">\"log\"</span></span><br><span class=\"line\">      <span class=\"attr\">partition.round_robin:</span></span><br><span class=\"line\">        <span class=\"attr\">reachable_only:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">required_acks:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">compression:</span> <span class=\"string\">gzip</span></span><br><span class=\"line\">      <span class=\"attr\">max_message_bytes:</span> <span class=\"number\">1000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.hosts:</span> <span class=\"string\">[</span> <span class=\"string\">\"es-logging-service:9200\"</span> <span class=\"string\">]</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.protocol:</span> <span class=\"string\">\"http\"</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.username:</span> <span class=\"string\">\"elastic\"</span> </span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.elasticsearch.password:</span> <span class=\"string\">\"$&#123;ELASTIC_PASSWORD&#125;\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在配置文件中，指定filebeat去读取docker日志和系统日志，并将日志发送给kafka。filebeat本身不对日志进行处理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f filebeat-configmap.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署filebeat\"><a href=\"#部署filebeat\" class=\"headerlink\" title=\"部署filebeat\"></a>部署filebeat</h2><p>每一个工作节点都需要收集日志，所以使用daemonset方式进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># fileat-daemonset.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/home/filebeat-config/filebeat.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-e'</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">POD_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.podIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">spec.nodeName</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_IP</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">status.hostIP</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'elastic/filebeat:7.6.8'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging</span></span><br><span class=\"line\">          <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">            <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"attr\">runAsUser:</span> <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/home/filebeat-config</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">filebeat-logging-sa</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-storage</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/log/pods</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlogpods</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/var/lib/docker/containers</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">varlibdockercontainers</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">420</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">filebeat-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">filebeat-volume</span></span><br><span class=\"line\">  <span class=\"attr\">updateStrategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在yaml文件中，将<code>/var/lib/docker/containers</code>和<code>/var/log</code>挂载到了容器中，方便容器进行日志收集。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f filebeat-daemonset.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保所有pod都正常运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod -n logging | grep filebeat</span><br></pre></td></tr></table></figure>\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />"},{"title":"[k8s实践系列]EFK+Kafka日志收集(六)--部署kibana","date":"2020-07-10T03:43:40.000Z","description":"部署kibana","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594370496285&di=e5ead59539c19a8a8aa1568284feae3f&imgtype=0&src=http%3A%2F%2Fp4.ssl.qhimg.com%2Ft0187295c3528fa925f.png","_content":"\n\n\n## 创建kibana初始化配置\n\nKibana相关的配置文件可以在[kibana配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`init_kibana.sh` 放入一个目录下，例如`kibana-conf`下，然后执行下面的命令：\n\n```bash\n$ kubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging\n```\n\n\n\n<br>\n\n\n\n## 创建kibana配置文件\n\n```yaml\n# kibana-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kibana-logging-config\n  namespace: logging\ndata:\n  kibana.yml: |\n    server.port: 5601\n    server.host: \"0.0.0.0\"\n    server.name: \"kibana-logging\"\n    elasticsearch.hosts: [\"http://es-logging-service:9200\"]\n    xpack.monitoring.ui.container.elasticsearch.enabled: true\n    xpack.security.enabled: true\n    elasticsearch.username: \"kibana\"\n    elasticsearch.password: \"${KIBANA_PASSWORD}\"\n    elasticsearch.requestHeadersWhitelist: [ 'es-security-runas-user',\n    'authorization', 'X-Proxy-Remote-User', 'x-forwarded-for',\n    'x-forwarded-access-token' ]\n    elasticsearch.requestTimeout: 300000\n    kibana.index: \".kibana\"\n    logging.quiet: true\n  kibana_check.sh: |\n    #!/bin/bash\n    KIBANA_REST_BASEURL=http://localhost:5601/login\n    EXPECTED_RESPONSE_CODE=200\n    max_time=\"${max_time:-4}\"\n\n    response_code=\"$(\n        curl --silent                          \\\n             --request HEAD                    \\\n             --head                            \\\n             --output /dev/null                \\\n             --max-time \"${max_time}\"          \\\n             --write-out '%{response_code}'    \\\n             \"${KIBANA_REST_BASEURL}\"\n    )\"\n\n    if [ \"${response_code}\" == \"${EXPECTED_RESPONSE_CODE}\" ]; then\n        exit 0\n    else\n        echo \"Kibana node is not ready to accept HTTP requests yet [response code: ${response_code}]\"\n        exit 1\n    fi\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-config.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署kibana\n\n```yaml\n# kibana-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kibana-logging\n  name: kibana-logging\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kibana-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kibana-logging\n      name: kibana-logging\n    spec:\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: TZ\n              value: Asia/Shanghai\n            - name: KIBANA_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'kibana:7.8.0'\n          name: kibana-logging\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          ports:\n            - containerPort: 5601\n              name: tcp-5601\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n              memory: 2Gi\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /usr/share/kibana/config/kibana.yml\n              name: kibana-config\n              subPath: kibana.yml\n            - mountPath: /usr/share/kibana/config/kibana_check.sh\n              name: kibana-config\n              subPath: kibana_check.sh\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_kibana.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-kibana\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_kibana.sh\n              name: kibana-init\n              subPath: init_kibana.sh\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-config\n          name: kibana-config\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-init-config\n          name: kibana-init\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-deployment.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kibana service对象\n\n```yaml\n# kibana-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kibana-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-5601\n      port: 5601\n      protocol: TCP\n      targetPort: 5601\n  selector:\n    app: kibana-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 通过ingress暴露服务\n\n```yaml\n# kibana-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: kibana\n   namespace: logging\nspec:\n   rules:\n   - host: kibana.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kibana-logging-service\n          servicePort: 5601\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-ingress.yaml\n```\n\n\n\n新增nginx配置：\n\n```nginx\n# /etc/nginx/conf.d/kibana.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kibana.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kibana.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kibana.example.com_access.log main;\n    error_log /var/log/nginx/kibana.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查并重载nginx：\n\n```bash\n$ nginx -t\n$ nginx -s reload\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n确保相关pod都处在Running状态：\n\n```bash\n$ kubectl get pod,svc,ingress -n logging | grep kibana\n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 访问页面\n\n通过浏览器访问`kibana.example.com`即可进入kibana的页面，输入在第一节设置的初始账号密码：`elastic/elastic`。然后在kibana中创建`Index patterns`就可以了。\n\n<img src=\"kibana.png\" style=\"zoom:50%;\" />\n\n\n\n访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：\n\n<img src=\"kafka.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/k8s实践系列-EFK-Kafka日志收集-六.md","raw":"---\ntitle: '[k8s实践系列]EFK+Kafka日志收集(六)--部署kibana'\ndate: 2020-07-10 11:43:40\ntags:\n- k8s\n- k8s日志收集\ncategories: \n- 实践K8s\n- EFK日志收集\ndescription: 部署kibana\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594370496285&di=e5ead59539c19a8a8aa1568284feae3f&imgtype=0&src=http%3A%2F%2Fp4.ssl.qhimg.com%2Ft0187295c3528fa925f.png\n---\n\n\n\n## 创建kibana初始化配置\n\nKibana相关的配置文件可以在[kibana配置文件](https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集) 找到，这里需要将`init_kibana.sh` 放入一个目录下，例如`kibana-conf`下，然后执行下面的命令：\n\n```bash\n$ kubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging\n```\n\n\n\n<br>\n\n\n\n## 创建kibana配置文件\n\n```yaml\n# kibana-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kibana-logging-config\n  namespace: logging\ndata:\n  kibana.yml: |\n    server.port: 5601\n    server.host: \"0.0.0.0\"\n    server.name: \"kibana-logging\"\n    elasticsearch.hosts: [\"http://es-logging-service:9200\"]\n    xpack.monitoring.ui.container.elasticsearch.enabled: true\n    xpack.security.enabled: true\n    elasticsearch.username: \"kibana\"\n    elasticsearch.password: \"${KIBANA_PASSWORD}\"\n    elasticsearch.requestHeadersWhitelist: [ 'es-security-runas-user',\n    'authorization', 'X-Proxy-Remote-User', 'x-forwarded-for',\n    'x-forwarded-access-token' ]\n    elasticsearch.requestTimeout: 300000\n    kibana.index: \".kibana\"\n    logging.quiet: true\n  kibana_check.sh: |\n    #!/bin/bash\n    KIBANA_REST_BASEURL=http://localhost:5601/login\n    EXPECTED_RESPONSE_CODE=200\n    max_time=\"${max_time:-4}\"\n\n    response_code=\"$(\n        curl --silent                          \\\n             --request HEAD                    \\\n             --head                            \\\n             --output /dev/null                \\\n             --max-time \"${max_time}\"          \\\n             --write-out '%{response_code}'    \\\n             \"${KIBANA_REST_BASEURL}\"\n    )\"\n\n    if [ \"${response_code}\" == \"${EXPECTED_RESPONSE_CODE}\" ]; then\n        exit 0\n    else\n        echo \"Kibana node is not ready to accept HTTP requests yet [response code: ${response_code}]\"\n        exit 1\n    fi\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-config.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署kibana\n\n```yaml\n# kibana-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kibana-logging\n  name: kibana-logging\n  namespace: logging\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kibana-logging\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kibana-logging\n      name: kibana-logging\n    spec:\n      containers:\n        - env:\n            - name: NODE_NAME\n              valueFrom:\n                fieldRef:\n                  apiVersion: v1\n                  fieldPath: metadata.name\n            - name: TZ\n              value: Asia/Shanghai\n            - name: KIBANA_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'kibana:7.8.0'\n          name: kibana-logging\n          imagePullPolicy: IfNotPresent\n          livenessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 60\n            periodSeconds: 20\n            successThreshold: 1\n            timeoutSeconds: 1\n          ports:\n            - containerPort: 5601\n              name: tcp-5601\n              protocol: TCP\n          readinessProbe:\n            exec:\n              command:\n                - sh\n                - '-c'\n                - /usr/share/kibana/config/kibana_check.sh\n            failureThreshold: 3\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n          resources:\n            limits:\n              cpu: '2'\n              memory: 2Gi\n            requests:\n              cpu: 500m\n              memory: 500Mi\n          volumeMounts:\n            - mountPath: /usr/share/kibana/config/kibana.yml\n              name: kibana-config\n              subPath: kibana.yml\n            - mountPath: /usr/share/kibana/config/kibana_check.sh\n              name: kibana-config\n              subPath: kibana_check.sh\n      dnsPolicy: ClusterFirst\n      initContainers:\n        - command:\n            - sh\n            - '-c'\n            - /bin/init_kibana.sh\n          env:\n            - name: ELASTIC_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  key: elastic\n                  name: es-logging-password\n          image: 'curlimages/curl:latest'\n          imagePullPolicy: Always\n          name: init-kibana\n          resources: {}\n          volumeMounts:\n            - mountPath: /bin/init_kibana.sh\n              name: kibana-init\n              subPath: init_kibana.sh\n    #   nodeSelector:\n    #     node-role.kubernetes.io/compute: 'true'\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      volumes:\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-config\n          name: kibana-config\n        - configMap:\n            defaultMode: 493\n            name: kibana-logging-init-config\n          name: kibana-init\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-deployment.yaml\n```\n\n\n\n<br>\n\n\n\n## 创建kibana service对象\n\n```yaml\n# kibana-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: kibana-logging-service\n  namespace: logging\nspec:\n  ports:\n    - name: tcp-5601\n      port: 5601\n      protocol: TCP\n      targetPort: 5601\n  selector:\n    app: kibana-logging\n  sessionAffinity: None\n  type: ClusterIP\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-service.yaml\n```\n\n\n\n<br>\n\n\n\n## 通过ingress暴露服务\n\n```yaml\n# kibana-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: kibana\n   namespace: logging\nspec:\n   rules:\n   - host: kibana.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: kibana-logging-service\n          servicePort: 5601\n```\n\n\n\n```bash\n$ kubectl apply -f kibana-ingress.yaml\n```\n\n\n\n新增nginx配置：\n\n```nginx\n# /etc/nginx/conf.d/kibana.conf\nupstream ingress-80 {\n    server 10.8.138.9:80 max_fails=3 fail_timeout=5s weight=2;\n    server 10.8.138.11:80 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name kibana.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name kibana.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/kibana.example.com_access.log main;\n    error_log /var/log/nginx/kibana.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    include conf.d/common.ini;\n}\n```\n\n\n\n检查并重载nginx：\n\n```bash\n$ nginx -t\n$ nginx -s reload\n```\n\n\n\n<br>\n\n\n\n## 检查服务\n\n确保相关pod都处在Running状态：\n\n```bash\n$ kubectl get pod,svc,ingress -n logging | grep kibana\n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 访问页面\n\n通过浏览器访问`kibana.example.com`即可进入kibana的页面，输入在第一节设置的初始账号密码：`elastic/elastic`。然后在kibana中创建`Index patterns`就可以了。\n\n<img src=\"kibana.png\" style=\"zoom:50%;\" />\n\n\n\n访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：\n\n<img src=\"kafka.png\" style=\"zoom:50%;\" />\n\n","slug":"k8s实践系列-EFK-Kafka日志收集-六","published":1,"updated":"2020-07-18T07:34:26.407Z","_id":"ckcfsx98d00004zn0hnr6eqh9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建kibana初始化配置\"><a href=\"#创建kibana初始化配置\" class=\"headerlink\" title=\"创建kibana初始化配置\"></a>创建kibana初始化配置</h2><p>Kibana相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\" target=\"_blank\" rel=\"noopener\">kibana配置文件</a> 找到，这里需要将<code>init_kibana.sh</code> 放入一个目录下，例如<code>kibana-conf</code>下，然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kibana配置文件\"><a href=\"#创建kibana配置文件\" class=\"headerlink\" title=\"创建kibana配置文件\"></a>创建kibana配置文件</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">kibana.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">    <span class=\"attr\">server.host:</span> <span class=\"string\">\"0.0.0.0\"</span></span><br><span class=\"line\">    <span class=\"attr\">server.name:</span> <span class=\"string\">\"kibana-logging\"</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.hosts:</span> <span class=\"string\">[\"http://es-logging-service:9200\"]</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.username:</span> <span class=\"string\">\"kibana\"</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.password:</span> <span class=\"string\">\"$&#123;KIBANA_PASSWORD&#125;\"</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestHeadersWhitelist:</span> <span class=\"string\">[</span> <span class=\"string\">'es-security-runas-user'</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">'authorization'</span><span class=\"string\">,</span> <span class=\"string\">'X-Proxy-Remote-User'</span><span class=\"string\">,</span> <span class=\"string\">'x-forwarded-for'</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">'x-forwarded-access-token'</span> <span class=\"string\">]</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestTimeout:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">kibana.index:</span> <span class=\"string\">\".kibana\"</span></span><br><span class=\"line\">    <span class=\"attr\">logging.quiet:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">kibana_check.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    <span class=\"string\">KIBANA_REST_BASEURL=http://localhost:5601/login</span></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\">    <span class=\"string\">max_time=\"$&#123;max_time:-4&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">response_code=\"$(</span></span><br><span class=\"line\">        <span class=\"string\">curl</span> <span class=\"string\">--silent</span>                          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--request</span> <span class=\"string\">HEAD</span>                    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--head</span>                            <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--output</span> <span class=\"string\">/dev/null</span>                <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--max-time</span> <span class=\"string\">\"$&#123;max_time&#125;\"</span>          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--write-out</span> <span class=\"string\">'<span class=\"template-variable\">%&#123;response_code&#125;</span>'</span>    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">\"$&#123;KIBANA_REST_BASEURL&#125;\"</span></span><br><span class=\"line\">    <span class=\"string\">)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">\"$&#123;response_code&#125;\"</span> <span class=\"string\">==</span> <span class=\"string\">\"$&#123;EXPECTED_RESPONSE_CODE&#125;\"</span> <span class=\"string\">];</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">else</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">\"Kibana node is not ready to accept HTTP requests yet [response code: $&#123;response_code&#125;]\"</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">fi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-config.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署kibana\"><a href=\"#部署kibana\" class=\"headerlink\" title=\"部署kibana\"></a>部署kibana</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KIBANA_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'kibana:7.8.0'</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana_check.sh</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'curlimages/curl:latest'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-kibana</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_kibana.sh</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-init-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kibana-service对象\"><a href=\"#创建kibana-service对象\" class=\"headerlink\" title=\"创建kibana service对象\"></a>创建kibana service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"通过ingress暴露服务\"><a href=\"#通过ingress暴露服务\" class=\"headerlink\" title=\"通过ingress暴露服务\"></a>通过ingress暴露服务</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kibana.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">5601</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新增nginx配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kibana.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kibana.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kibana.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保相关pod都处在Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc,ingress -n logging | grep kibana</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"pod.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h2><p>通过浏览器访问<code>kibana.example.com</code>即可进入kibana的页面，输入在第一节设置的初始账号密码：<code>elastic/elastic</code>。然后在kibana中创建<code>Index patterns</code>就可以了。</p>\n<img src= \"/img/loading.gif\" data-src=\"kibana.png\" style=\"zoom:50%;\" />\n\n\n\n<p>访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：</p>\n<img src= \"/img/loading.gif\" data-src=\"kafka.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建kibana初始化配置\"><a href=\"#创建kibana初始化配置\" class=\"headerlink\" title=\"创建kibana初始化配置\"></a>创建kibana初始化配置</h2><p>Kibana相关的配置文件可以在<a href=\"https://github.com/liyongzhezz/yaml/tree/master/EFK-kafka日志收集\" target=\"_blank\" rel=\"noopener\">kibana配置文件</a> 找到，这里需要将<code>init_kibana.sh</code> 放入一个目录下，例如<code>kibana-conf</code>下，然后执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create configmap kibana-logging-init-config --from-file=./kibana-conf/init_kibana.sh -n logging</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kibana配置文件\"><a href=\"#创建kibana配置文件\" class=\"headerlink\" title=\"创建kibana配置文件\"></a>创建kibana配置文件</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">kibana.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">server.port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">    <span class=\"attr\">server.host:</span> <span class=\"string\">\"0.0.0.0\"</span></span><br><span class=\"line\">    <span class=\"attr\">server.name:</span> <span class=\"string\">\"kibana-logging\"</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.hosts:</span> <span class=\"string\">[\"http://es-logging-service:9200\"]</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xpack.security.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.username:</span> <span class=\"string\">\"kibana\"</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.password:</span> <span class=\"string\">\"$&#123;KIBANA_PASSWORD&#125;\"</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestHeadersWhitelist:</span> <span class=\"string\">[</span> <span class=\"string\">'es-security-runas-user'</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">'authorization'</span><span class=\"string\">,</span> <span class=\"string\">'X-Proxy-Remote-User'</span><span class=\"string\">,</span> <span class=\"string\">'x-forwarded-for'</span><span class=\"string\">,</span></span><br><span class=\"line\">    <span class=\"string\">'x-forwarded-access-token'</span> <span class=\"string\">]</span></span><br><span class=\"line\">    <span class=\"attr\">elasticsearch.requestTimeout:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">kibana.index:</span> <span class=\"string\">\".kibana\"</span></span><br><span class=\"line\">    <span class=\"attr\">logging.quiet:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">kibana_check.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">    <span class=\"string\">KIBANA_REST_BASEURL=http://localhost:5601/login</span></span><br><span class=\"line\">    <span class=\"string\">EXPECTED_RESPONSE_CODE=200</span></span><br><span class=\"line\">    <span class=\"string\">max_time=\"$&#123;max_time:-4&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">response_code=\"$(</span></span><br><span class=\"line\">        <span class=\"string\">curl</span> <span class=\"string\">--silent</span>                          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--request</span> <span class=\"string\">HEAD</span>                    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--head</span>                            <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--output</span> <span class=\"string\">/dev/null</span>                <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--max-time</span> <span class=\"string\">\"$&#123;max_time&#125;\"</span>          <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">--write-out</span> <span class=\"string\">'<span class=\"template-variable\">%&#123;response_code&#125;</span>'</span>    <span class=\"string\">\\</span></span><br><span class=\"line\">             <span class=\"string\">\"$&#123;KIBANA_REST_BASEURL&#125;\"</span></span><br><span class=\"line\">    <span class=\"string\">)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">if</span> <span class=\"string\">[</span> <span class=\"string\">\"$&#123;response_code&#125;\"</span> <span class=\"string\">==</span> <span class=\"string\">\"$&#123;EXPECTED_RESPONSE_CODE&#125;\"</span> <span class=\"string\">];</span> <span class=\"string\">then</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"string\">else</span></span><br><span class=\"line\">        <span class=\"string\">echo</span> <span class=\"string\">\"Kibana node is not ready to accept HTTP requests yet [response code: $&#123;response_code&#125;]\"</span></span><br><span class=\"line\">        <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">fi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-config.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署kibana\"><a href=\"#部署kibana\" class=\"headerlink\" title=\"部署kibana\"></a>部署kibana</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">strategy:</span></span><br><span class=\"line\">    <span class=\"attr\">rollingUpdate:</span></span><br><span class=\"line\">      <span class=\"attr\">maxSurge:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">maxUnavailable:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">RollingUpdate</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">NODE_NAME</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">fieldRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">                  <span class=\"attr\">fieldPath:</span> <span class=\"string\">metadata.name</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">TZ</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">KIBANA_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'kibana:7.8.0'</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">20</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">              <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">            <span class=\"attr\">exec:</span></span><br><span class=\"line\">              <span class=\"attr\">command:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">            <span class=\"attr\">failureThreshold:</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">15</span></span><br><span class=\"line\">            <span class=\"attr\">periodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">            <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span></span><br><span class=\"line\">            <span class=\"attr\">limits:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">            <span class=\"attr\">requests:</span></span><br><span class=\"line\">              <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">              <span class=\"attr\">memory:</span> <span class=\"string\">500Mi</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana.yml</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana.yml</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/kibana/config/kibana_check.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">kibana_check.sh</span></span><br><span class=\"line\">      <span class=\"attr\">dnsPolicy:</span> <span class=\"string\">ClusterFirst</span></span><br><span class=\"line\">      <span class=\"attr\">initContainers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">command:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'-c'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ELASTIC_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">                <span class=\"attr\">secretKeyRef:</span></span><br><span class=\"line\">                  <span class=\"attr\">key:</span> <span class=\"string\">elastic</span></span><br><span class=\"line\">                  <span class=\"attr\">name:</span> <span class=\"string\">es-logging-password</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">'curlimages/curl:latest'</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">init-kibana</span></span><br><span class=\"line\">          <span class=\"attr\">resources:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/bin/init_kibana.sh</span></span><br><span class=\"line\">              <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br><span class=\"line\">              <span class=\"attr\">subPath:</span> <span class=\"string\">init_kibana.sh</span></span><br><span class=\"line\">    <span class=\"comment\">#   nodeSelector:</span></span><br><span class=\"line\">    <span class=\"comment\">#     node-role.kubernetes.io/compute: 'true'</span></span><br><span class=\"line\">      <span class=\"attr\">restartPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-config</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">            <span class=\"attr\">defaultMode:</span> <span class=\"number\">493</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-init-config</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">kibana-init</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"创建kibana-service对象\"><a href=\"#创建kibana-service对象\" class=\"headerlink\" title=\"创建kibana service对象\"></a>创建kibana service对象</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp-5601</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">5601</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kibana-logging</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"通过ingress暴露服务\"><a href=\"#通过ingress暴露服务\" class=\"headerlink\" title=\"通过ingress暴露服务\"></a>通过ingress暴露服务</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kibana-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">kibana</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">logging</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">kibana.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">kibana-logging-service</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">5601</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kibana-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新增nginx配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nginx/conf.d/kibana.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> kibana.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/kibana.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/kibana.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">include</span> conf.d/common.ini;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查并重载nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"检查服务\"><a href=\"#检查服务\" class=\"headerlink\" title=\"检查服务\"></a>检查服务</h2><p>确保相关pod都处在Running状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc,ingress -n logging | grep kibana</span><br></pre></td></tr></table></figure>\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"访问页面\"><a href=\"#访问页面\" class=\"headerlink\" title=\"访问页面\"></a>访问页面</h2><p>通过浏览器访问<code>kibana.example.com</code>即可进入kibana的页面，输入在第一节设置的初始账号密码：<code>elastic/elastic</code>。然后在kibana中创建<code>Index patterns</code>就可以了。</p>\n<img src=\"kibana.png\" style=\"zoom:50%;\" />\n\n\n\n<p>访问kafka-manager观察，发现消息topic也创建出来并且有消息在队列中被logstash消费：</p>\n<img src=\"kafka.png\" style=\"zoom:50%;\" />\n\n"},{"title":"部署Docker CE","date":"2020-07-11T11:55:44.000Z","description":"使用yum方式部署Docker CE","cover":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4156517757,536988701&fm=26&gp=0.jpg","_content":"\n\n\n**我选择的docker-ce版本为18.06，docker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。**\n\n\n\n------\n\n\n\n# 卸载旧版docker\n\n```bash\n$ yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n```\n\n<br>\n\n\n\n# 安装依赖\n\n```bash\n$ yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n<br>\n\n\n\n\n\n# 添加docker源\n\n```bash\n$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n<br>\n\n\n\n# 【可选】挂载数据目录\n\n一般docker会把数据存储在`/var/lib/docker`下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。\n\n<br>\n\n\n\n\n\n# 安装Docker CE\n\n## 查看可用版本\n\n```bash\n$ yum list docker-ce --showduplicates|sort -r\n```\n\n‌\n\n## 安装最新版本\n\n```bash\n$ yum install -y docker-ce\n```\n\n‌\n\n## 安装指定版本\n\n```bash\n$ yum install -y docker-ce-18.06.1.ce-1.el7.centos\n```\n\n\n\n<br>\n\n\n\n#  启动docker\n\n```bash\n$ systemctl start docker\n$ systemctl enable docker\n```\n\n<br>\n\n\n\n# 验证安装\n\n```bash\n# 查看docker server和client的版本\n$ docker version\n```\n\n<img src=\"docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 卸载docker\n\n首先卸载docker软件包：\n\n```bash\n$ yum remove docker-ce\n```\n\n\n\n然后需要手动删除docker镜像、容器等相关文件：\n\n```bash\n$ rm -rf /var/lib/docker\n```\n\n","source":"_posts/部署Docker-CE.md","raw":"---\ntitle: 部署Docker CE\ndate: 2020-07-11 19:55:44\ntags:\n- Docker\ncategories: Docker\ndescription: 使用yum方式部署Docker CE\ncover: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4156517757,536988701&fm=26&gp=0.jpg\n\n---\n\n\n\n**我选择的docker-ce版本为18.06，docker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。**\n\n\n\n------\n\n\n\n# 卸载旧版docker\n\n```bash\n$ yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine\n```\n\n<br>\n\n\n\n# 安装依赖\n\n```bash\n$ yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\n<br>\n\n\n\n\n\n# 添加docker源\n\n```bash\n$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n<br>\n\n\n\n# 【可选】挂载数据目录\n\n一般docker会把数据存储在`/var/lib/docker`下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。\n\n<br>\n\n\n\n\n\n# 安装Docker CE\n\n## 查看可用版本\n\n```bash\n$ yum list docker-ce --showduplicates|sort -r\n```\n\n‌\n\n## 安装最新版本\n\n```bash\n$ yum install -y docker-ce\n```\n\n‌\n\n## 安装指定版本\n\n```bash\n$ yum install -y docker-ce-18.06.1.ce-1.el7.centos\n```\n\n\n\n<br>\n\n\n\n#  启动docker\n\n```bash\n$ systemctl start docker\n$ systemctl enable docker\n```\n\n<br>\n\n\n\n# 验证安装\n\n```bash\n# 查看docker server和client的版本\n$ docker version\n```\n\n<img src=\"docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 卸载docker\n\n首先卸载docker软件包：\n\n```bash\n$ yum remove docker-ce\n```\n\n\n\n然后需要手动删除docker镜像、容器等相关文件：\n\n```bash\n$ rm -rf /var/lib/docker\n```\n\n","slug":"部署Docker-CE","published":1,"updated":"2020-07-23T05:54:02.774Z","_id":"ckchljzcf0000f9n0ao3w9meq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>我选择的docker-ce版本为18.06，docker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。</strong></p>\n<hr>\n<h1 id=\"卸载旧版docker\"><a href=\"#卸载旧版docker\" class=\"headerlink\" title=\"卸载旧版docker\"></a>卸载旧版docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"添加docker源\"><a href=\"#添加docker源\" class=\"headerlink\" title=\"添加docker源\"></a>添加docker源</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"【可选】挂载数据目录\"><a href=\"#【可选】挂载数据目录\" class=\"headerlink\" title=\"【可选】挂载数据目录\"></a>【可选】挂载数据目录</h1><p>一般docker会把数据存储在<code>/var/lib/docker</code>下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。</p>\n<br>\n\n\n\n\n\n<h1 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h1><h2 id=\"查看可用版本\"><a href=\"#查看可用版本\" class=\"headerlink\" title=\"查看可用版本\"></a>查看可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list docker-ce --showduplicates|sort -r</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装最新版本\"><a href=\"#安装最新版本\" class=\"headerlink\" title=\"安装最新版本\"></a>安装最新版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker-ce-18.06.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start docker</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker server和client的版本</span></span><br><span class=\"line\">$ docker version</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"卸载docker\"><a href=\"#卸载docker\" class=\"headerlink\" title=\"卸载docker\"></a>卸载docker</h1><p>首先卸载docker软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum remove docker-ce</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后需要手动删除docker镜像、容器等相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>我选择的docker-ce版本为18.06，docker在拆分为ce和ee之后，大版本例如18表示发布的年份，小版本表示的是月份。</strong></p>\n<hr>\n<h1 id=\"卸载旧版docker\"><a href=\"#卸载旧版docker\" class=\"headerlink\" title=\"卸载旧版docker\"></a>卸载旧版docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"添加docker源\"><a href=\"#添加docker源\" class=\"headerlink\" title=\"添加docker源\"></a>添加docker源</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"【可选】挂载数据目录\"><a href=\"#【可选】挂载数据目录\" class=\"headerlink\" title=\"【可选】挂载数据目录\"></a>【可选】挂载数据目录</h1><p>一般docker会把数据存储在<code>/var/lib/docker</code>下，所以如果是生产环境，建议挂载一个数据盘到该目录下防止爆盘。</p>\n<br>\n\n\n\n\n\n<h1 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h1><h2 id=\"查看可用版本\"><a href=\"#查看可用版本\" class=\"headerlink\" title=\"查看可用版本\"></a>查看可用版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list docker-ce --showduplicates|sort -r</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装最新版本\"><a href=\"#安装最新版本\" class=\"headerlink\" title=\"安装最新版本\"></a>安装最新版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker-ce</span><br></pre></td></tr></table></figure>\n\n<p>‌</p>\n<h2 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y docker-ce-18.06.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start docker</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> docker</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker server和client的版本</span></span><br><span class=\"line\">$ docker version</span><br></pre></td></tr></table></figure>\n\n<img src=\"docker-version.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"卸载docker\"><a href=\"#卸载docker\" class=\"headerlink\" title=\"卸载docker\"></a>卸载docker</h1><p>首先卸载docker软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum remove docker-ce</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后需要手动删除docker镜像、容器等相关文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>\n\n"},{"title":"[k8s实践系列]Istio实践(一)--部署Istio","date":"2020-07-14T01:57:06.000Z","description":"部署一个适合于生产环境的Istio。","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594702185957&di=f0f1cc6419b7f1704a202d56ea54eb1d&imgtype=0&src=http%3A%2F%2Ft9.baidu.com%2Fit%2Fu%3D2440958369%2C359184656%26fm%3D193","_content":"\n\n\n这里使用的是Istio-1.6.5版本。\n\n\n\n------\n\n\n\n# 下载Istio\n\n可以在官方下载页面下载对应版本的包：[Download Istio](https://github.com/istio/istio/releases)，也可以使用如下的命令下载：\n\n```bash\n# 设定要下载的Istio版本\n$ export ISTIO_VERSION=\"1.6.5\"\n\n$ curl -L https://istio.io/downloadIstio | sh -\n```\n\n\n\n在istio的目录中，有如下的几个目录：\n\n- `samples`：示例应用程序；\n- `bin`：客户端工具二进制文件；\n\n\n\n设置系统环境变量并开启`istioctl`命令自动补全：\n\n```bash\n$ cd istio-1.6.5\n$ echo \"PATH=$PWD/bin:$PATH\" >> /etc/profile\n$ cp tools/istioctl.bash /root/\n$ echo \"source ~/istioctl.bash\" >> /root/.bashrc\n$ source /etc/profile\n```\n\n\n\n<br>\n\n\n\n# 部署Istio\n\n目前的Istio版本，官方建议使用`istioctl`方式部署。istio下载好后默认有几个配置文件模板：\n\n- `default`：包含最主要的istio组件，适合于生产环境部署；\n- `demo`：包含的组件最多，包含了很多额外的组件；\n- `minimal`：仅包含`istio-pilot`组件，仅适合测试；\n- `sds`：类似于`default`，但是启动了sdas功能；\n\n> 这里就使用`default`配置文件部署\n\n\n\n执行下面的命令进行部署：\n\n```bash\n# 查看都有哪些profile\n$ istioctl profile list\n\n# 使用default配置文件部署\n$ istioctl manifest apply --set profile=default\n\n# 如果起用grafana daashboard和kial等组件，则使用下面的命令\n$ istioctl manifest apply --set profile=default --set addonComponents.grafana.enabled=true --set addonComponents.tracing.enabled=true --set addonComponents.kiali.enabled=true\n```\n\n\n\n<img src=\"istio-install.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n# 检查服务情况\n\n默认会创建一个名为`istio-system`的namespace，istio相关服务都会放在这个namespace下：\n\n```bash\n$ kubectl get pod,svc -n istio-system\n```\n\n<img src=\"check.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 服务要求\n\n## namespace\n\n当使用 `kubectl apply` 来部署应用时，如果 pod 启动在标有 `istio-injection=enabled` 的命名空间中，那么，[Istio sidecar 注入器](https://istio.io/zh/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection)将自动注入 Envoy 容器到应用的 pod 中：\n\n```shell\n$ kubectl label namespace <namespace> istio-injection=enabled\n$ kubectl create -n <namespace> -f <your-app-spec>.yaml\n```\n\n\n\n在没有 `istio-injection` 标记的命名空间中，在部署前可以使用 [`istioctl kube-inject`](https://istio.io/zh/docs/reference/commands/istioctl/#istioctl-kube-inject) 命令将 Envoy 容器手动注入到应用的 pod 中：\n\n```shell\n$ istioctl kube-inject -f <your-app-spec>.yaml | kubectl apply -f -\n```\n\n\n\n## pod和service\n\n如果服务要使用istio的相关功能，只注入sidecar是不够的，pod和service还需要满足如下的需求：\n\n- **命名的服务端口**: Service 的端口必须命名。端口名键值对必须按以下格式：`name: <protocol>[-<suffix>]`。更多说明请参看[协议选择](https://istio.io/zh/docs/ops/configuration/traffic-management/protocol-selection/)。\n- **Service 关联**: 每个 Pod 必须至少属于一个 Kubernetes Service，不管这个 Pod 是否对外暴露端口。如果一个 Pod 同时属于多个 [Kubernetes Service](https://kubernetes.io/docs/concepts/services-networking/service/)， 那么这些 Service 不能同时在一个端口号上使用不同的协议（比如：HTTP 和 TCP）。\n- **带有 app 和 version 标签（label） 的 Deployment**: 我们建议显式地给 Deployment 加上 `app` 和 `version` 标签。给使用 Kubernetes `Deployment` 部署的 Pod 部署配置中增加这些标签，可以给 Istio 收集的指标和遥测信息中增加上下文信息。\n  - `app` 标签：每个部署配置应该有一个不同的 `app` 标签并且该标签的值应该有一定意义。`app` label 用于在分布式追踪中添加上下文信息。\n  - `version` 标签：这个标签用于在特定方式部署的应用中表示版本。\n- **应用 UID**: 确保你的 Pod 不会以用户 ID（UID）为 1337 的用户运行应用。\n- **`NET_ADMIN` 功能**: 如果你的集群执行 Pod 安全策略，必须给 Pod 配置 `NET_ADMIN` 功能。如果你使用 [Istio CNI 插件](https://istio.io/zh/docs/setup/additional-setup/cni/) 可以不配置。要了解更多 `NET_ADMIN` 功能的知识，请查看[所需的 Pod 功能](https://istio.io/zh/docs/ops/deployment/requirements/#required-pod-capabilities)。\n\n\n\n<br>\n\n\n\n# 卸载\n\n```bash\n$ istioctl manifest generate --set profile=default | kubectl delete -f -\n```\n\n\n\n\n\n<br>\n\n# 创建kiali秘钥\n\n可以看到创建了一个叫kiali的服务，这是一个链路监控的服务，但是要使用这个服务，需要设置一个初始的秘钥文件。\n\n\n\n这里我们设置初始的用户名和密码为`admin`，并用base64加密：\n\n```bash\n$ echo -n 'admin' | base64\nYWRtaW4=\n```\n\n\n\n创建一个secret资源类型：\n\n```yaml\n# kiali-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: kiali\n  namespace: istio-system\n  labels:\n    app: kiali\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  passphrase: YWRtaW4=\n```\n\n> kiali服务会挂载名为`kiali`的secret到容器中，设置初始用户和密码\n\n\n\n创建并重启kiali服务：\n\n```bash\n$ kubectl apply -f kiali-secret.yaml\n$ kubectl delete pod $(kubectl get pod -n istio-system | grep kiali | awk '{print $1}')\n```\n\n","source":"_posts/k8s实践系列-Istio实践-一-部署Istio.md","raw":"---\ntitle: '[k8s实践系列]Istio实践(一)--部署Istio'\ndate: 2020-07-14 09:57:06\ntags:\n- k8s\n- Istio\ncategories:\n- 实践K8s\n- Istio\ndescription: 部署一个适合于生产环境的Istio。\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594702185957&di=f0f1cc6419b7f1704a202d56ea54eb1d&imgtype=0&src=http%3A%2F%2Ft9.baidu.com%2Fit%2Fu%3D2440958369%2C359184656%26fm%3D193\n---\n\n\n\n这里使用的是Istio-1.6.5版本。\n\n\n\n------\n\n\n\n# 下载Istio\n\n可以在官方下载页面下载对应版本的包：[Download Istio](https://github.com/istio/istio/releases)，也可以使用如下的命令下载：\n\n```bash\n# 设定要下载的Istio版本\n$ export ISTIO_VERSION=\"1.6.5\"\n\n$ curl -L https://istio.io/downloadIstio | sh -\n```\n\n\n\n在istio的目录中，有如下的几个目录：\n\n- `samples`：示例应用程序；\n- `bin`：客户端工具二进制文件；\n\n\n\n设置系统环境变量并开启`istioctl`命令自动补全：\n\n```bash\n$ cd istio-1.6.5\n$ echo \"PATH=$PWD/bin:$PATH\" >> /etc/profile\n$ cp tools/istioctl.bash /root/\n$ echo \"source ~/istioctl.bash\" >> /root/.bashrc\n$ source /etc/profile\n```\n\n\n\n<br>\n\n\n\n# 部署Istio\n\n目前的Istio版本，官方建议使用`istioctl`方式部署。istio下载好后默认有几个配置文件模板：\n\n- `default`：包含最主要的istio组件，适合于生产环境部署；\n- `demo`：包含的组件最多，包含了很多额外的组件；\n- `minimal`：仅包含`istio-pilot`组件，仅适合测试；\n- `sds`：类似于`default`，但是启动了sdas功能；\n\n> 这里就使用`default`配置文件部署\n\n\n\n执行下面的命令进行部署：\n\n```bash\n# 查看都有哪些profile\n$ istioctl profile list\n\n# 使用default配置文件部署\n$ istioctl manifest apply --set profile=default\n\n# 如果起用grafana daashboard和kial等组件，则使用下面的命令\n$ istioctl manifest apply --set profile=default --set addonComponents.grafana.enabled=true --set addonComponents.tracing.enabled=true --set addonComponents.kiali.enabled=true\n```\n\n\n\n<img src=\"istio-install.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n# 检查服务情况\n\n默认会创建一个名为`istio-system`的namespace，istio相关服务都会放在这个namespace下：\n\n```bash\n$ kubectl get pod,svc -n istio-system\n```\n\n<img src=\"check.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 服务要求\n\n## namespace\n\n当使用 `kubectl apply` 来部署应用时，如果 pod 启动在标有 `istio-injection=enabled` 的命名空间中，那么，[Istio sidecar 注入器](https://istio.io/zh/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection)将自动注入 Envoy 容器到应用的 pod 中：\n\n```shell\n$ kubectl label namespace <namespace> istio-injection=enabled\n$ kubectl create -n <namespace> -f <your-app-spec>.yaml\n```\n\n\n\n在没有 `istio-injection` 标记的命名空间中，在部署前可以使用 [`istioctl kube-inject`](https://istio.io/zh/docs/reference/commands/istioctl/#istioctl-kube-inject) 命令将 Envoy 容器手动注入到应用的 pod 中：\n\n```shell\n$ istioctl kube-inject -f <your-app-spec>.yaml | kubectl apply -f -\n```\n\n\n\n## pod和service\n\n如果服务要使用istio的相关功能，只注入sidecar是不够的，pod和service还需要满足如下的需求：\n\n- **命名的服务端口**: Service 的端口必须命名。端口名键值对必须按以下格式：`name: <protocol>[-<suffix>]`。更多说明请参看[协议选择](https://istio.io/zh/docs/ops/configuration/traffic-management/protocol-selection/)。\n- **Service 关联**: 每个 Pod 必须至少属于一个 Kubernetes Service，不管这个 Pod 是否对外暴露端口。如果一个 Pod 同时属于多个 [Kubernetes Service](https://kubernetes.io/docs/concepts/services-networking/service/)， 那么这些 Service 不能同时在一个端口号上使用不同的协议（比如：HTTP 和 TCP）。\n- **带有 app 和 version 标签（label） 的 Deployment**: 我们建议显式地给 Deployment 加上 `app` 和 `version` 标签。给使用 Kubernetes `Deployment` 部署的 Pod 部署配置中增加这些标签，可以给 Istio 收集的指标和遥测信息中增加上下文信息。\n  - `app` 标签：每个部署配置应该有一个不同的 `app` 标签并且该标签的值应该有一定意义。`app` label 用于在分布式追踪中添加上下文信息。\n  - `version` 标签：这个标签用于在特定方式部署的应用中表示版本。\n- **应用 UID**: 确保你的 Pod 不会以用户 ID（UID）为 1337 的用户运行应用。\n- **`NET_ADMIN` 功能**: 如果你的集群执行 Pod 安全策略，必须给 Pod 配置 `NET_ADMIN` 功能。如果你使用 [Istio CNI 插件](https://istio.io/zh/docs/setup/additional-setup/cni/) 可以不配置。要了解更多 `NET_ADMIN` 功能的知识，请查看[所需的 Pod 功能](https://istio.io/zh/docs/ops/deployment/requirements/#required-pod-capabilities)。\n\n\n\n<br>\n\n\n\n# 卸载\n\n```bash\n$ istioctl manifest generate --set profile=default | kubectl delete -f -\n```\n\n\n\n\n\n<br>\n\n# 创建kiali秘钥\n\n可以看到创建了一个叫kiali的服务，这是一个链路监控的服务，但是要使用这个服务，需要设置一个初始的秘钥文件。\n\n\n\n这里我们设置初始的用户名和密码为`admin`，并用base64加密：\n\n```bash\n$ echo -n 'admin' | base64\nYWRtaW4=\n```\n\n\n\n创建一个secret资源类型：\n\n```yaml\n# kiali-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: kiali\n  namespace: istio-system\n  labels:\n    app: kiali\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  passphrase: YWRtaW4=\n```\n\n> kiali服务会挂载名为`kiali`的secret到容器中，设置初始用户和密码\n\n\n\n创建并重启kiali服务：\n\n```bash\n$ kubectl apply -f kiali-secret.yaml\n$ kubectl delete pod $(kubectl get pod -n istio-system | grep kiali | awk '{print $1}')\n```\n\n","slug":"k8s实践系列-Istio实践-一-部署Istio","published":1,"updated":"2020-08-03T08:45:22.420Z","_id":"ckclsw7i50000lwn06y1231pt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这里使用的是Istio-1.6.5版本。</p>\n<hr>\n<h1 id=\"下载Istio\"><a href=\"#下载Istio\" class=\"headerlink\" title=\"下载Istio\"></a>下载Istio</h1><p>可以在官方下载页面下载对应版本的包：<a href=\"https://github.com/istio/istio/releases\" target=\"_blank\" rel=\"noopener\">Download Istio</a>，也可以使用如下的命令下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设定要下载的Istio版本</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> ISTIO_VERSION=<span class=\"string\">\"1.6.5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -L https://istio.io/downloadIstio | sh -</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在istio的目录中，有如下的几个目录：</p>\n<ul>\n<li><code>samples</code>：示例应用程序；</li>\n<li><code>bin</code>：客户端工具二进制文件；</li>\n</ul>\n<p>设置系统环境变量并开启<code>istioctl</code>命令自动补全：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> istio-1.6.5</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"PATH=<span class=\"variable\">$PWD</span>/bin:<span class=\"variable\">$PATH</span>\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ cp tools/istioctl.bash /root/</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"source ~/istioctl.bash\"</span> &gt;&gt; /root/.bashrc</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署Istio\"><a href=\"#部署Istio\" class=\"headerlink\" title=\"部署Istio\"></a>部署Istio</h1><p>目前的Istio版本，官方建议使用<code>istioctl</code>方式部署。istio下载好后默认有几个配置文件模板：</p>\n<ul>\n<li><code>default</code>：包含最主要的istio组件，适合于生产环境部署；</li>\n<li><code>demo</code>：包含的组件最多，包含了很多额外的组件；</li>\n<li><code>minimal</code>：仅包含<code>istio-pilot</code>组件，仅适合测试；</li>\n<li><code>sds</code>：类似于<code>default</code>，但是启动了sdas功能；</li>\n</ul>\n<blockquote>\n<p>这里就使用<code>default</code>配置文件部署</p>\n</blockquote>\n<p>执行下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看都有哪些profile</span></span><br><span class=\"line\">$ istioctl profile list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用default配置文件部署</span></span><br><span class=\"line\">$ istioctl manifest apply --<span class=\"built_in\">set</span> profile=default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果起用grafana daashboard和kial等组件，则使用下面的命令</span></span><br><span class=\"line\">$ istioctl manifest apply --<span class=\"built_in\">set</span> profile=default --<span class=\"built_in\">set</span> addonComponents.grafana.enabled=<span class=\"literal\">true</span> --<span class=\"built_in\">set</span> addonComponents.tracing.enabled=<span class=\"literal\">true</span> --<span class=\"built_in\">set</span> addonComponents.kiali.enabled=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"istio-install.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h1 id=\"检查服务情况\"><a href=\"#检查服务情况\" class=\"headerlink\" title=\"检查服务情况\"></a>检查服务情况</h1><p>默认会创建一个名为<code>istio-system</code>的namespace，istio相关服务都会放在这个namespace下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc -n istio-system</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"check.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"服务要求\"><a href=\"#服务要求\" class=\"headerlink\" title=\"服务要求\"></a>服务要求</h1><h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a>namespace</h2><p>当使用 <code>kubectl apply</code> 来部署应用时，如果 pod 启动在标有 <code>istio-injection=enabled</code> 的命名空间中，那么，<a href=\"https://istio.io/zh/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection\" target=\"_blank\" rel=\"noopener\">Istio sidecar 注入器</a>将自动注入 Envoy 容器到应用的 pod 中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label namespace &lt;namespace&gt; istio-injection=enabled</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create -n &lt;namespace&gt; -f &lt;your-app-spec&gt;.yaml</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在没有 <code>istio-injection</code> 标记的命名空间中，在部署前可以使用 <a href=\"https://istio.io/zh/docs/reference/commands/istioctl/#istioctl-kube-inject\" target=\"_blank\" rel=\"noopener\"><code>istioctl kube-inject</code></a> 命令将 Envoy 容器手动注入到应用的 pod 中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> istioctl kube-inject -f &lt;your-app-spec&gt;.yaml | kubectl apply -f -</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pod和service\"><a href=\"#pod和service\" class=\"headerlink\" title=\"pod和service\"></a>pod和service</h2><p>如果服务要使用istio的相关功能，只注入sidecar是不够的，pod和service还需要满足如下的需求：</p>\n<ul>\n<li><strong>命名的服务端口</strong>: Service 的端口必须命名。端口名键值对必须按以下格式：<code>name: &lt;protocol&gt;[-&lt;suffix&gt;]</code>。更多说明请参看<a href=\"https://istio.io/zh/docs/ops/configuration/traffic-management/protocol-selection/\" target=\"_blank\" rel=\"noopener\">协议选择</a>。</li>\n<li><strong>Service 关联</strong>: 每个 Pod 必须至少属于一个 Kubernetes Service，不管这个 Pod 是否对外暴露端口。如果一个 Pod 同时属于多个 <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/\" target=\"_blank\" rel=\"noopener\">Kubernetes Service</a>， 那么这些 Service 不能同时在一个端口号上使用不同的协议（比如：HTTP 和 TCP）。</li>\n<li><strong>带有 app 和 version 标签（label） 的 Deployment</strong>: 我们建议显式地给 Deployment 加上 <code>app</code> 和 <code>version</code> 标签。给使用 Kubernetes <code>Deployment</code> 部署的 Pod 部署配置中增加这些标签，可以给 Istio 收集的指标和遥测信息中增加上下文信息。<ul>\n<li><code>app</code> 标签：每个部署配置应该有一个不同的 <code>app</code> 标签并且该标签的值应该有一定意义。<code>app</code> label 用于在分布式追踪中添加上下文信息。</li>\n<li><code>version</code> 标签：这个标签用于在特定方式部署的应用中表示版本。</li>\n</ul>\n</li>\n<li><strong>应用 UID</strong>: 确保你的 Pod 不会以用户 ID（UID）为 1337 的用户运行应用。</li>\n<li><strong><code>NET_ADMIN</code> 功能</strong>: 如果你的集群执行 Pod 安全策略，必须给 Pod 配置 <code>NET_ADMIN</code> 功能。如果你使用 <a href=\"https://istio.io/zh/docs/setup/additional-setup/cni/\" target=\"_blank\" rel=\"noopener\">Istio CNI 插件</a> 可以不配置。要了解更多 <code>NET_ADMIN</code> 功能的知识，请查看<a href=\"https://istio.io/zh/docs/ops/deployment/requirements/#required-pod-capabilities\" target=\"_blank\" rel=\"noopener\">所需的 Pod 功能</a>。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ istioctl manifest generate --<span class=\"built_in\">set</span> profile=default | kubectl delete -f -</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n<h1 id=\"创建kiali秘钥\"><a href=\"#创建kiali秘钥\" class=\"headerlink\" title=\"创建kiali秘钥\"></a>创建kiali秘钥</h1><p>可以看到创建了一个叫kiali的服务，这是一个链路监控的服务，但是要使用这个服务，需要设置一个初始的秘钥文件。</p>\n<p>这里我们设置初始的用户名和密码为<code>admin</code>，并用base64加密：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> -n <span class=\"string\">'admin'</span> | base64</span><br><span class=\"line\">YWRtaW4=</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建一个secret资源类型：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kiali-secret.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kiali</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kiali</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">YWRtaW4=</span></span><br><span class=\"line\">  <span class=\"attr\">passphrase:</span> <span class=\"string\">YWRtaW4=</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>kiali服务会挂载名为<code>kiali</code>的secret到容器中，设置初始用户和密码</p>\n</blockquote>\n<p>创建并重启kiali服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kiali-secret.yaml</span><br><span class=\"line\">$ kubectl delete pod $(kubectl get pod -n istio-system | grep kiali | awk <span class=\"string\">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>这里使用的是Istio-1.6.5版本。</p>\n<hr>\n<h1 id=\"下载Istio\"><a href=\"#下载Istio\" class=\"headerlink\" title=\"下载Istio\"></a>下载Istio</h1><p>可以在官方下载页面下载对应版本的包：<a href=\"https://github.com/istio/istio/releases\" target=\"_blank\" rel=\"noopener\">Download Istio</a>，也可以使用如下的命令下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设定要下载的Istio版本</span></span><br><span class=\"line\">$ <span class=\"built_in\">export</span> ISTIO_VERSION=<span class=\"string\">\"1.6.5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ curl -L https://istio.io/downloadIstio | sh -</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在istio的目录中，有如下的几个目录：</p>\n<ul>\n<li><code>samples</code>：示例应用程序；</li>\n<li><code>bin</code>：客户端工具二进制文件；</li>\n</ul>\n<p>设置系统环境变量并开启<code>istioctl</code>命令自动补全：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> istio-1.6.5</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"PATH=<span class=\"variable\">$PWD</span>/bin:<span class=\"variable\">$PATH</span>\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ cp tools/istioctl.bash /root/</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"source ~/istioctl.bash\"</span> &gt;&gt; /root/.bashrc</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署Istio\"><a href=\"#部署Istio\" class=\"headerlink\" title=\"部署Istio\"></a>部署Istio</h1><p>目前的Istio版本，官方建议使用<code>istioctl</code>方式部署。istio下载好后默认有几个配置文件模板：</p>\n<ul>\n<li><code>default</code>：包含最主要的istio组件，适合于生产环境部署；</li>\n<li><code>demo</code>：包含的组件最多，包含了很多额外的组件；</li>\n<li><code>minimal</code>：仅包含<code>istio-pilot</code>组件，仅适合测试；</li>\n<li><code>sds</code>：类似于<code>default</code>，但是启动了sdas功能；</li>\n</ul>\n<blockquote>\n<p>这里就使用<code>default</code>配置文件部署</p>\n</blockquote>\n<p>执行下面的命令进行部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看都有哪些profile</span></span><br><span class=\"line\">$ istioctl profile list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用default配置文件部署</span></span><br><span class=\"line\">$ istioctl manifest apply --<span class=\"built_in\">set</span> profile=default</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果起用grafana daashboard和kial等组件，则使用下面的命令</span></span><br><span class=\"line\">$ istioctl manifest apply --<span class=\"built_in\">set</span> profile=default --<span class=\"built_in\">set</span> addonComponents.grafana.enabled=<span class=\"literal\">true</span> --<span class=\"built_in\">set</span> addonComponents.tracing.enabled=<span class=\"literal\">true</span> --<span class=\"built_in\">set</span> addonComponents.kiali.enabled=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"istio-install.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h1 id=\"检查服务情况\"><a href=\"#检查服务情况\" class=\"headerlink\" title=\"检查服务情况\"></a>检查服务情况</h1><p>默认会创建一个名为<code>istio-system</code>的namespace，istio相关服务都会放在这个namespace下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc -n istio-system</span><br></pre></td></tr></table></figure>\n\n<img src=\"check.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"服务要求\"><a href=\"#服务要求\" class=\"headerlink\" title=\"服务要求\"></a>服务要求</h1><h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a>namespace</h2><p>当使用 <code>kubectl apply</code> 来部署应用时，如果 pod 启动在标有 <code>istio-injection=enabled</code> 的命名空间中，那么，<a href=\"https://istio.io/zh/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection\" target=\"_blank\" rel=\"noopener\">Istio sidecar 注入器</a>将自动注入 Envoy 容器到应用的 pod 中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl label namespace &lt;namespace&gt; istio-injection=enabled</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> kubectl create -n &lt;namespace&gt; -f &lt;your-app-spec&gt;.yaml</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在没有 <code>istio-injection</code> 标记的命名空间中，在部署前可以使用 <a href=\"https://istio.io/zh/docs/reference/commands/istioctl/#istioctl-kube-inject\" target=\"_blank\" rel=\"noopener\"><code>istioctl kube-inject</code></a> 命令将 Envoy 容器手动注入到应用的 pod 中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> istioctl kube-inject -f &lt;your-app-spec&gt;.yaml | kubectl apply -f -</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pod和service\"><a href=\"#pod和service\" class=\"headerlink\" title=\"pod和service\"></a>pod和service</h2><p>如果服务要使用istio的相关功能，只注入sidecar是不够的，pod和service还需要满足如下的需求：</p>\n<ul>\n<li><strong>命名的服务端口</strong>: Service 的端口必须命名。端口名键值对必须按以下格式：<code>name: &lt;protocol&gt;[-&lt;suffix&gt;]</code>。更多说明请参看<a href=\"https://istio.io/zh/docs/ops/configuration/traffic-management/protocol-selection/\" target=\"_blank\" rel=\"noopener\">协议选择</a>。</li>\n<li><strong>Service 关联</strong>: 每个 Pod 必须至少属于一个 Kubernetes Service，不管这个 Pod 是否对外暴露端口。如果一个 Pod 同时属于多个 <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/\" target=\"_blank\" rel=\"noopener\">Kubernetes Service</a>， 那么这些 Service 不能同时在一个端口号上使用不同的协议（比如：HTTP 和 TCP）。</li>\n<li><strong>带有 app 和 version 标签（label） 的 Deployment</strong>: 我们建议显式地给 Deployment 加上 <code>app</code> 和 <code>version</code> 标签。给使用 Kubernetes <code>Deployment</code> 部署的 Pod 部署配置中增加这些标签，可以给 Istio 收集的指标和遥测信息中增加上下文信息。<ul>\n<li><code>app</code> 标签：每个部署配置应该有一个不同的 <code>app</code> 标签并且该标签的值应该有一定意义。<code>app</code> label 用于在分布式追踪中添加上下文信息。</li>\n<li><code>version</code> 标签：这个标签用于在特定方式部署的应用中表示版本。</li>\n</ul>\n</li>\n<li><strong>应用 UID</strong>: 确保你的 Pod 不会以用户 ID（UID）为 1337 的用户运行应用。</li>\n<li><strong><code>NET_ADMIN</code> 功能</strong>: 如果你的集群执行 Pod 安全策略，必须给 Pod 配置 <code>NET_ADMIN</code> 功能。如果你使用 <a href=\"https://istio.io/zh/docs/setup/additional-setup/cni/\" target=\"_blank\" rel=\"noopener\">Istio CNI 插件</a> 可以不配置。要了解更多 <code>NET_ADMIN</code> 功能的知识，请查看<a href=\"https://istio.io/zh/docs/ops/deployment/requirements/#required-pod-capabilities\" target=\"_blank\" rel=\"noopener\">所需的 Pod 功能</a>。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ istioctl manifest generate --<span class=\"built_in\">set</span> profile=default | kubectl delete -f -</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n<h1 id=\"创建kiali秘钥\"><a href=\"#创建kiali秘钥\" class=\"headerlink\" title=\"创建kiali秘钥\"></a>创建kiali秘钥</h1><p>可以看到创建了一个叫kiali的服务，这是一个链路监控的服务，但是要使用这个服务，需要设置一个初始的秘钥文件。</p>\n<p>这里我们设置初始的用户名和密码为<code>admin</code>，并用base64加密：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> -n <span class=\"string\">'admin'</span> | base64</span><br><span class=\"line\">YWRtaW4=</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建一个secret资源类型：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kiali-secret.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Secret</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kiali</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kiali</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">Opaque</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">YWRtaW4=</span></span><br><span class=\"line\">  <span class=\"attr\">passphrase:</span> <span class=\"string\">YWRtaW4=</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>kiali服务会挂载名为<code>kiali</code>的secret到容器中，设置初始用户和密码</p>\n</blockquote>\n<p>创建并重启kiali服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f kiali-secret.yaml</span><br><span class=\"line\">$ kubectl delete pod $(kubectl get pod -n istio-system | grep kiali | awk <span class=\"string\">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"为什么删除文件后磁盘空间不释放","date":"2020-07-16T03:02:31.000Z","description":"删除文件后磁盘空间不释放的原因分析和实验","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594878899027&di=f873d906117286440a61a4b821bfcbbe&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180916%2Fb4ccdc6b88ab43fca605caf3155d2dd0.jpeg","_content":"\n\n\n## 现象\n\n磁盘空间达到报警阈值产生报警，删除多于的文件后空间并没有释放。\n\n\n\n<br>\n\n\n\n## 测试\n\n首先看下分区空间剩余大小：\n\n```bash\n$ df -h | grep boot\n/dev/vda1      1014M  186M  829M   19% /boot\n```\n\n\n\n然后在这个分区下创建一个随机文件占据一定的空间：\n\n```bash\n$ dd if=/dev/urandom of=/boot/test.txt bs=50M count=1\n$ df -h | grep boot\n/dev/vda1      1014M  218M  797M   22% /boot\n```\n\n\n\n用一个测试测C程序，编译并运行：\n\n```c\n// test.c\n#include<stdio.h>\n#include<unistd.h>\nint main(void)\n{\n    FILE *fp = NULL;\n    fp = fopen(\"/boot/test.txt\", \"rw+\");\n    if(NULL == fp)\n    {\n       perror(\"open file failed\");\n       return -1;\n    }\n    while(1)\n    {\n       //do nothing\n       sleep(1);\n    }\n    fclose(fp);\n    return 0;\n}\n```\n\n> 这个程序就是打开测试文件，然后循环。\n\n\n\n编译并运行：\n\n```bash\n$ gcc -o openfile test.c\n$ ./openfile\n```\n\n\n\n然后删除测试文件`test.txt`，并查看剩余空间：\n\n```bash\n$ rm -f test.txt\n$ df -h | grep boot\n/dev/vda1      1014M  218M  797M   22% /boot\n```\n\n\n\n看到尽管文件删除了，空间并没有释放。\n\n\n\n现在停止测试程序再查看：\n\n```bash\n$ df -h | grep boot\n/dev/vda1      1014M  186M  829M   19% /boot\n```\n\n 空间释放掉了。\n\n\n\n<br>\n\n\n\n## 原因\n\n所谓的删除，也不过是文件名到 inode 的链接删除，只要不被重新写入新的数据，磁盘上的block数据块不会被删除。只有当一个文件的引用计数为0（包括硬链接数）的时候，才可能调用unlink删除，只要它不是0，那么就不会被删除。当一个程序打开一个文件的时候（获取到文件描述符），它的引用计数会被+1，rm虽然看似删除了文件，实际上只是会将引用计数减1，但由于引用计数不为0，因此文件不会被删除\n\n\n\n所以上边的问题在于，尽管删除了文件，但是依然有程序在占用这个文件，导致空间不能被释放。通过下面的命令可以查看到已经删除但是还在占用的文件：\n\n```bash\n$ lsof | grep delete\nopenfile  15148          root    3u      REG              253,1  33554431         86 /boot/test.txt (deleted)\n```\n\n> 看到openfile程序在占用test.txt文件，且test.txt是被删除的状态。\n\n\n\n这类问题往往出现在程序的日志文件中，尤其是日志文件滚动之后。所以养成好习惯，打开文件后，不用时，记得关闭文件描述符。","source":"_posts/为什么删除文件后磁盘空间不释放.md","raw":"---\ntitle: 为什么删除文件后磁盘空间不释放\ndate: 2020-07-16 11:02:31\ntags: 常见问题\ncategories:\n- 常见问题\n- Linux系统\ndescription: 删除文件后磁盘空间不释放的原因分析和实验\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594878899027&di=f873d906117286440a61a4b821bfcbbe&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180916%2Fb4ccdc6b88ab43fca605caf3155d2dd0.jpeg\n---\n\n\n\n## 现象\n\n磁盘空间达到报警阈值产生报警，删除多于的文件后空间并没有释放。\n\n\n\n<br>\n\n\n\n## 测试\n\n首先看下分区空间剩余大小：\n\n```bash\n$ df -h | grep boot\n/dev/vda1      1014M  186M  829M   19% /boot\n```\n\n\n\n然后在这个分区下创建一个随机文件占据一定的空间：\n\n```bash\n$ dd if=/dev/urandom of=/boot/test.txt bs=50M count=1\n$ df -h | grep boot\n/dev/vda1      1014M  218M  797M   22% /boot\n```\n\n\n\n用一个测试测C程序，编译并运行：\n\n```c\n// test.c\n#include<stdio.h>\n#include<unistd.h>\nint main(void)\n{\n    FILE *fp = NULL;\n    fp = fopen(\"/boot/test.txt\", \"rw+\");\n    if(NULL == fp)\n    {\n       perror(\"open file failed\");\n       return -1;\n    }\n    while(1)\n    {\n       //do nothing\n       sleep(1);\n    }\n    fclose(fp);\n    return 0;\n}\n```\n\n> 这个程序就是打开测试文件，然后循环。\n\n\n\n编译并运行：\n\n```bash\n$ gcc -o openfile test.c\n$ ./openfile\n```\n\n\n\n然后删除测试文件`test.txt`，并查看剩余空间：\n\n```bash\n$ rm -f test.txt\n$ df -h | grep boot\n/dev/vda1      1014M  218M  797M   22% /boot\n```\n\n\n\n看到尽管文件删除了，空间并没有释放。\n\n\n\n现在停止测试程序再查看：\n\n```bash\n$ df -h | grep boot\n/dev/vda1      1014M  186M  829M   19% /boot\n```\n\n 空间释放掉了。\n\n\n\n<br>\n\n\n\n## 原因\n\n所谓的删除，也不过是文件名到 inode 的链接删除，只要不被重新写入新的数据，磁盘上的block数据块不会被删除。只有当一个文件的引用计数为0（包括硬链接数）的时候，才可能调用unlink删除，只要它不是0，那么就不会被删除。当一个程序打开一个文件的时候（获取到文件描述符），它的引用计数会被+1，rm虽然看似删除了文件，实际上只是会将引用计数减1，但由于引用计数不为0，因此文件不会被删除\n\n\n\n所以上边的问题在于，尽管删除了文件，但是依然有程序在占用这个文件，导致空间不能被释放。通过下面的命令可以查看到已经删除但是还在占用的文件：\n\n```bash\n$ lsof | grep delete\nopenfile  15148          root    3u      REG              253,1  33554431         86 /boot/test.txt (deleted)\n```\n\n> 看到openfile程序在占用test.txt文件，且test.txt是被删除的状态。\n\n\n\n这类问题往往出现在程序的日志文件中，尤其是日志文件滚动之后。所以养成好习惯，打开文件后，不用时，记得关闭文件描述符。","slug":"为什么删除文件后磁盘空间不释放","published":1,"updated":"2020-07-16T03:23:13.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckco8beoh0000vln04s8ea6e2","content":"<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>磁盘空间达到报警阈值产生报警，删除多于的文件后空间并没有释放。</p>\n<br>\n\n\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>首先看下分区空间剩余大小：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  186M  829M   19% /boot</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在这个分区下创建一个随机文件占据一定的空间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dd <span class=\"keyword\">if</span>=/dev/urandom of=/boot/test.txt bs=50M count=1</span><br><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  218M  797M   22% /boot</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用一个测试测C程序，编译并运行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE *fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    fp = fopen(<span class=\"string\">\"/boot/test.txt\"</span>, <span class=\"string\">\"rw+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       perror(<span class=\"string\">\"open file failed\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">       sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个程序就是打开测试文件，然后循环。</p>\n</blockquote>\n<p>编译并运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o openfile test.c</span><br><span class=\"line\">$ ./openfile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后删除测试文件<code>test.txt</code>，并查看剩余空间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f test.txt</span><br><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  218M  797M   22% /boot</span><br></pre></td></tr></table></figure>\n\n\n\n<p>看到尽管文件删除了，空间并没有释放。</p>\n<p>现在停止测试程序再查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  186M  829M   19% /boot</span><br></pre></td></tr></table></figure>\n\n<p> 空间释放掉了。</p>\n<br>\n\n\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>所谓的删除，也不过是文件名到 inode 的链接删除，只要不被重新写入新的数据，磁盘上的block数据块不会被删除。只有当一个文件的引用计数为0（包括硬链接数）的时候，才可能调用unlink删除，只要它不是0，那么就不会被删除。当一个程序打开一个文件的时候（获取到文件描述符），它的引用计数会被+1，rm虽然看似删除了文件，实际上只是会将引用计数减1，但由于引用计数不为0，因此文件不会被删除</p>\n<p>所以上边的问题在于，尽管删除了文件，但是依然有程序在占用这个文件，导致空间不能被释放。通过下面的命令可以查看到已经删除但是还在占用的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof | grep delete</span><br><span class=\"line\">openfile  15148          root    3u      REG              253,1  33554431         86 /boot/test.txt (deleted)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>看到openfile程序在占用test.txt文件，且test.txt是被删除的状态。</p>\n</blockquote>\n<p>这类问题往往出现在程序的日志文件中，尤其是日志文件滚动之后。所以养成好习惯，打开文件后，不用时，记得关闭文件描述符。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h2><p>磁盘空间达到报警阈值产生报警，删除多于的文件后空间并没有释放。</p>\n<br>\n\n\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>首先看下分区空间剩余大小：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  186M  829M   19% /boot</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在这个分区下创建一个随机文件占据一定的空间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dd <span class=\"keyword\">if</span>=/dev/urandom of=/boot/test.txt bs=50M count=1</span><br><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  218M  797M   22% /boot</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用一个测试测C程序，编译并运行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE *fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    fp = fopen(<span class=\"string\">\"/boot/test.txt\"</span>, <span class=\"string\">\"rw+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == fp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       perror(<span class=\"string\">\"open file failed\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"comment\">//do nothing</span></span><br><span class=\"line\">       sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个程序就是打开测试文件，然后循环。</p>\n</blockquote>\n<p>编译并运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o openfile test.c</span><br><span class=\"line\">$ ./openfile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后删除测试文件<code>test.txt</code>，并查看剩余空间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -f test.txt</span><br><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  218M  797M   22% /boot</span><br></pre></td></tr></table></figure>\n\n\n\n<p>看到尽管文件删除了，空间并没有释放。</p>\n<p>现在停止测试程序再查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ df -h | grep boot</span><br><span class=\"line\">/dev/vda1      1014M  186M  829M   19% /boot</span><br></pre></td></tr></table></figure>\n\n<p> 空间释放掉了。</p>\n<br>\n\n\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>所谓的删除，也不过是文件名到 inode 的链接删除，只要不被重新写入新的数据，磁盘上的block数据块不会被删除。只有当一个文件的引用计数为0（包括硬链接数）的时候，才可能调用unlink删除，只要它不是0，那么就不会被删除。当一个程序打开一个文件的时候（获取到文件描述符），它的引用计数会被+1，rm虽然看似删除了文件，实际上只是会将引用计数减1，但由于引用计数不为0，因此文件不会被删除</p>\n<p>所以上边的问题在于，尽管删除了文件，但是依然有程序在占用这个文件，导致空间不能被释放。通过下面的命令可以查看到已经删除但是还在占用的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof | grep delete</span><br><span class=\"line\">openfile  15148          root    3u      REG              253,1  33554431         86 /boot/test.txt (deleted)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>看到openfile程序在占用test.txt文件，且test.txt是被删除的状态。</p>\n</blockquote>\n<p>这类问题往往出现在程序的日志文件中，尤其是日志文件滚动之后。所以养成好习惯，打开文件后，不用时，记得关闭文件描述符。</p>\n"},{"title":"[shell脚本系列]网络","date":"2020-07-16T06:11:07.000Z","description":"使用shell脚本监控网络相关信息","cover":"https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00525-3.jpg","_content":"\n\n\n## 监控网卡流量\n\n```shell\n# network.sh\n# 监控实时网卡流量\n# $1 接收所传第一个参数 即要监控的网卡\nNIC=$1\n# echo -e \"traffic in --- traffic out\"\nwhile true;do\n        # $0 命令输出结果 ~ 匹配模式\n        OLD_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        OLD_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        sleep 1\n        NEW_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        NEW_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        clear\n        # printf不换行 %s占位符\n        IN=$(printf \"%.1f%s\" \"$(($NEW_IN-$OLD_IN))\" \"B/s\")\n        OUT=$(printf \"%.1f%s\" \"$(($NEW_OUT-$OLD_OUT))\" \"B/s\")\n        echo \"       traffic in  `date +%k:%M:%S`  traffic out \"\n        echo \"$NIC   $IN              $OUT\"\n\ndone\n```\n\n\n\n使用方法：\n\n```bash\n$ sh network.sh eth0\n```\n\n","source":"_posts/shell脚本系列-网络.md","raw":"---\ntitle: '[shell脚本系列]网络'\ndate: 2020-07-16 14:11:07\ntags: \n- shell脚本\n- 网络\ncategories:\n- shell脚本系列\n- 网络\ndescription: 使用shell脚本监控网络相关信息\ncover: https://ns-strategy.cdn.bcebos.com/ns-strategy/upload/fc_big_pic/part-00525-3.jpg\n---\n\n\n\n## 监控网卡流量\n\n```shell\n# network.sh\n# 监控实时网卡流量\n# $1 接收所传第一个参数 即要监控的网卡\nNIC=$1\n# echo -e \"traffic in --- traffic out\"\nwhile true;do\n        # $0 命令输出结果 ~ 匹配模式\n        OLD_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        OLD_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        sleep 1\n        NEW_IN=`awk '$0~\"'$NIC'\"{print $2}' /proc/net/dev`\n        NEW_OUT=`awk '$0~\"'$NIC'\"{print $10}' /proc/net/dev`\n        clear\n        # printf不换行 %s占位符\n        IN=$(printf \"%.1f%s\" \"$(($NEW_IN-$OLD_IN))\" \"B/s\")\n        OUT=$(printf \"%.1f%s\" \"$(($NEW_OUT-$OLD_OUT))\" \"B/s\")\n        echo \"       traffic in  `date +%k:%M:%S`  traffic out \"\n        echo \"$NIC   $IN              $OUT\"\n\ndone\n```\n\n\n\n使用方法：\n\n```bash\n$ sh network.sh eth0\n```\n\n","slug":"shell脚本系列-网络","published":1,"updated":"2020-07-16T06:16:51.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcoei9k30000j3n05bii3ec6","content":"<h2 id=\"监控网卡流量\"><a href=\"#监控网卡流量\" class=\"headerlink\" title=\"监控网卡流量\"></a>监控网卡流量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> network.sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 监控实时网卡流量</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"variable\">$1</span> 接收所传第一个参数 即要监控的网卡</span></span><br><span class=\"line\">NIC=$1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"traffic in --- traffic out\"</span></span></span><br><span class=\"line\">while true;do</span><br><span class=\"line\">        # $0 命令输出结果 ~ 匹配模式</span><br><span class=\"line\">        OLD_IN=`awk '$0~\"'$NIC'\"&#123;print $2&#125;' /proc/net/dev`</span><br><span class=\"line\">        OLD_OUT=`awk '$0~\"'$NIC'\"&#123;print $10&#125;' /proc/net/dev`</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        NEW_IN=`awk '$0~\"'$NIC'\"&#123;print $2&#125;' /proc/net/dev`</span><br><span class=\"line\">        NEW_OUT=`awk '$0~\"'$NIC'\"&#123;print $10&#125;' /proc/net/dev`</span><br><span class=\"line\">        clear</span><br><span class=\"line\">        # printf不换行 %s占位符</span><br><span class=\"line\">        IN=$(printf \"%.1f%s\" \"$(($NEW_IN-$OLD_IN))\" \"B/s\")</span><br><span class=\"line\">        OUT=$(printf \"%.1f%s\" \"$(($NEW_OUT-$OLD_OUT))\" \"B/s\")</span><br><span class=\"line\">        echo \"       traffic in  `date +%k:%M:%S`  traffic out \"</span><br><span class=\"line\">        echo \"$NIC   $IN              $OUT\"</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh network.sh eth0</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"监控网卡流量\"><a href=\"#监控网卡流量\" class=\"headerlink\" title=\"监控网卡流量\"></a>监控网卡流量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> network.sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 监控实时网卡流量</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"variable\">$1</span> 接收所传第一个参数 即要监控的网卡</span></span><br><span class=\"line\">NIC=$1</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">echo</span> -e <span class=\"string\">\"traffic in --- traffic out\"</span></span></span><br><span class=\"line\">while true;do</span><br><span class=\"line\">        # $0 命令输出结果 ~ 匹配模式</span><br><span class=\"line\">        OLD_IN=`awk '$0~\"'$NIC'\"&#123;print $2&#125;' /proc/net/dev`</span><br><span class=\"line\">        OLD_OUT=`awk '$0~\"'$NIC'\"&#123;print $10&#125;' /proc/net/dev`</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        NEW_IN=`awk '$0~\"'$NIC'\"&#123;print $2&#125;' /proc/net/dev`</span><br><span class=\"line\">        NEW_OUT=`awk '$0~\"'$NIC'\"&#123;print $10&#125;' /proc/net/dev`</span><br><span class=\"line\">        clear</span><br><span class=\"line\">        # printf不换行 %s占位符</span><br><span class=\"line\">        IN=$(printf \"%.1f%s\" \"$(($NEW_IN-$OLD_IN))\" \"B/s\")</span><br><span class=\"line\">        OUT=$(printf \"%.1f%s\" \"$(($NEW_OUT-$OLD_OUT))\" \"B/s\")</span><br><span class=\"line\">        echo \"       traffic in  `date +%k:%M:%S`  traffic out \"</span><br><span class=\"line\">        echo \"$NIC   $IN              $OUT\"</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh network.sh eth0</span><br></pre></td></tr></table></figure>\n\n"},{"title":"[k8s实践系列]Istio实践(二)--部署测试服务","date":"2020-07-16T06:51:08.000Z","description":"部署官方的bookinfo测试服务","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594702185957&di=f0f1cc6419b7f1704a202d56ea54eb1d&imgtype=0&src=http%3A%2F%2Ft9.baidu.com%2Fit%2Fu%3D2440958369%2C359184656%26fm%3D193","_content":"\n\n\n## 准备\n\nIstio工作依赖于在服务pod中注入代理sidecar，这个功能需要依赖一个标签。是这里新建一个namespace部署bookinfo服务并打上标签，允许istio注入sidecar：\n\n```bash\n$ kubectl create ns istio-app\n$ kubectl label namespace istio-app istio-injection=enabled\n```\n\n<br>\n\n\n\n## bookinfo服务架构\n\n<img src=\"bookinfo.svg\" style=\"zoom:80%;\" />\n\n从整体架构图上看，总共分为如下的几个服务：\n\n- `productpage`： 这个微服务会调用 `details` 和 `reviews` 两个微服务，用来生成页面。\n- `details`：这个微服务中包含了书籍的信息。\n- `reviews`：这个微服务中包含了书籍相关的评论。它还会调用 `ratings` 微服务。有三个版本：\n  - v1 版本不会调用 `ratings` 服务。\n  - v2 版本会调用 `ratings` 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。\n  - v3 版本会调用 `ratings` 服务，并使用 1 到 5 个红色星形图标来显示评分信息。\n- `ratings`：这个微服务中包含了由书籍评价组成的评级信息。\n\n\n\n<br>\n\n\n\n## 部署服务\n\n服务的yaml文件在`istio-1.6.5/samples/bookinfo/platform/kube`下名叫`bookinfo.yaml`，直接部署这个文件：\n\n```bash\n$ kubectl apply -f istio-1.6.5/samples/bookinfo/platform/kube/bookinfo.yaml -n istio-app\n```\n\n> 注意，一定部署到上边新建的并且打了标签的namespace下，否则sidecar无法注入\n\n\n\n查看服务部署情况，确保所有服务都启动并且sidecar注入：\n\n<img src=\"service.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n## 对外暴露bookinfo服务\n\n首先创建一个ingress：\n\n```yaml\n# bookinfo-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: bookinfo\n   namespace: istio-app\nspec:\n   rules:\n   - host: bookinfo.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: productpage\n          servicePort: 9080\n```\n\n\n\n执行创建命令：\n\n```bash\n$ kubectl apply -f bookinfo-ingress.yaml\n```\n\n\n\n然后新建一个nginx的配置文件：\n\n```nginx\n# bookinfo.conf\nserver {\n    listen 80;\n    server_name bookinfo.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name bookinfo.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/bookinfo.example.com_access.log main;\n    error_log /var/log/nginx/bookinfo.example.com_error.log;\n\n    location ^~/ {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n\t\t}\n\n    location ~* /\\.(svn|git)/ {\n        return 404;\n    }\n}\n```\n\n\n\n检查nginx配置文件并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload\n```\n\n\n\n本地设置好host解析，通过url访问即可看到服务的页面：\n\n<img src=\"v1.png\" style=\"zoom:50%;\" />\n\n\n\n多刷新几次，可以看到不同的reviews服务版本：\n\n<img src=\"v2.png\" style=\"zoom:50%;\" />\n\n<img src=\"v3.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/k8s实践系列-Istio实践-二-部署测试服务.md","raw":"---\ntitle: '[k8s实践系列]Istio实践(二)--部署测试服务'\ndate: 2020-07-16 14:51:08\ntags:\n- k8s\n- Istio\ncategories:\n- 实践K8s\n- Istio\ndescription: 部署官方的bookinfo测试服务\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594702185957&di=f0f1cc6419b7f1704a202d56ea54eb1d&imgtype=0&src=http%3A%2F%2Ft9.baidu.com%2Fit%2Fu%3D2440958369%2C359184656%26fm%3D193\n---\n\n\n\n## 准备\n\nIstio工作依赖于在服务pod中注入代理sidecar，这个功能需要依赖一个标签。是这里新建一个namespace部署bookinfo服务并打上标签，允许istio注入sidecar：\n\n```bash\n$ kubectl create ns istio-app\n$ kubectl label namespace istio-app istio-injection=enabled\n```\n\n<br>\n\n\n\n## bookinfo服务架构\n\n<img src=\"bookinfo.svg\" style=\"zoom:80%;\" />\n\n从整体架构图上看，总共分为如下的几个服务：\n\n- `productpage`： 这个微服务会调用 `details` 和 `reviews` 两个微服务，用来生成页面。\n- `details`：这个微服务中包含了书籍的信息。\n- `reviews`：这个微服务中包含了书籍相关的评论。它还会调用 `ratings` 微服务。有三个版本：\n  - v1 版本不会调用 `ratings` 服务。\n  - v2 版本会调用 `ratings` 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。\n  - v3 版本会调用 `ratings` 服务，并使用 1 到 5 个红色星形图标来显示评分信息。\n- `ratings`：这个微服务中包含了由书籍评价组成的评级信息。\n\n\n\n<br>\n\n\n\n## 部署服务\n\n服务的yaml文件在`istio-1.6.5/samples/bookinfo/platform/kube`下名叫`bookinfo.yaml`，直接部署这个文件：\n\n```bash\n$ kubectl apply -f istio-1.6.5/samples/bookinfo/platform/kube/bookinfo.yaml -n istio-app\n```\n\n> 注意，一定部署到上边新建的并且打了标签的namespace下，否则sidecar无法注入\n\n\n\n查看服务部署情况，确保所有服务都启动并且sidecar注入：\n\n<img src=\"service.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n## 对外暴露bookinfo服务\n\n首先创建一个ingress：\n\n```yaml\n# bookinfo-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: bookinfo\n   namespace: istio-app\nspec:\n   rules:\n   - host: bookinfo.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: productpage\n          servicePort: 9080\n```\n\n\n\n执行创建命令：\n\n```bash\n$ kubectl apply -f bookinfo-ingress.yaml\n```\n\n\n\n然后新建一个nginx的配置文件：\n\n```nginx\n# bookinfo.conf\nserver {\n    listen 80;\n    server_name bookinfo.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name bookinfo.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/bookinfo.example.com_access.log main;\n    error_log /var/log/nginx/bookinfo.example.com_error.log;\n\n    location ^~/ {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n\t\t}\n\n    location ~* /\\.(svn|git)/ {\n        return 404;\n    }\n}\n```\n\n\n\n检查nginx配置文件并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload\n```\n\n\n\n本地设置好host解析，通过url访问即可看到服务的页面：\n\n<img src=\"v1.png\" style=\"zoom:50%;\" />\n\n\n\n多刷新几次，可以看到不同的reviews服务版本：\n\n<img src=\"v2.png\" style=\"zoom:50%;\" />\n\n<img src=\"v3.png\" style=\"zoom:50%;\" />\n\n","slug":"k8s实践系列-Istio实践-二-部署测试服务","published":1,"updated":"2020-07-16T07:18:16.586Z","_id":"ckcognpqa0000vyn013sebg47","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>Istio工作依赖于在服务pod中注入代理sidecar，这个功能需要依赖一个标签。是这里新建一个namespace部署bookinfo服务并打上标签，允许istio注入sidecar：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create ns istio-app</span><br><span class=\"line\">$ kubectl label namespace istio-app istio-injection=enabled</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"bookinfo服务架构\"><a href=\"#bookinfo服务架构\" class=\"headerlink\" title=\"bookinfo服务架构\"></a>bookinfo服务架构</h2><img src= \"/img/loading.gif\" data-src=\"bookinfo.svg\" style=\"zoom:80%;\" />\n\n<p>从整体架构图上看，总共分为如下的几个服务：</p>\n<ul>\n<li><code>productpage</code>： 这个微服务会调用 <code>details</code> 和 <code>reviews</code> 两个微服务，用来生成页面。</li>\n<li><code>details</code>：这个微服务中包含了书籍的信息。</li>\n<li><code>reviews</code>：这个微服务中包含了书籍相关的评论。它还会调用 <code>ratings</code> 微服务。有三个版本：<ul>\n<li>v1 版本不会调用 <code>ratings</code> 服务。</li>\n<li>v2 版本会调用 <code>ratings</code> 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。</li>\n<li>v3 版本会调用 <code>ratings</code> 服务，并使用 1 到 5 个红色星形图标来显示评分信息。</li>\n</ul>\n</li>\n<li><code>ratings</code>：这个微服务中包含了由书籍评价组成的评级信息。</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h2><p>服务的yaml文件在<code>istio-1.6.5/samples/bookinfo/platform/kube</code>下名叫<code>bookinfo.yaml</code>，直接部署这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f istio-1.6.5/samples/bookinfo/platform/kube/bookinfo.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，一定部署到上边新建的并且打了标签的namespace下，否则sidecar无法注入</p>\n</blockquote>\n<p>查看服务部署情况，确保所有服务都启动并且sidecar注入：</p>\n<img src= \"/img/loading.gif\" data-src=\"service.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"对外暴露bookinfo服务\"><a href=\"#对外暴露bookinfo服务\" class=\"headerlink\" title=\"对外暴露bookinfo服务\"></a>对外暴露bookinfo服务</h2><p>首先创建一个ingress：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bookinfo-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">bookinfo</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">bookinfo.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">productpage</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">9080</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行创建命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f bookinfo-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后新建一个nginx的配置文件：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bookinfo.conf</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> bookinfo.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> bookinfo.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/bookinfo.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/bookinfo.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查nginx配置文件并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>本地设置好host解析，通过url访问即可看到服务的页面：</p>\n<img src= \"/img/loading.gif\" data-src=\"v1.png\" style=\"zoom:50%;\" />\n\n\n\n<p>多刷新几次，可以看到不同的reviews服务版本：</p>\n<img src= \"/img/loading.gif\" data-src=\"v2.png\" style=\"zoom:50%;\" />\n\n<img src= \"/img/loading.gif\" data-src=\"v3.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>Istio工作依赖于在服务pod中注入代理sidecar，这个功能需要依赖一个标签。是这里新建一个namespace部署bookinfo服务并打上标签，允许istio注入sidecar：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create ns istio-app</span><br><span class=\"line\">$ kubectl label namespace istio-app istio-injection=enabled</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"bookinfo服务架构\"><a href=\"#bookinfo服务架构\" class=\"headerlink\" title=\"bookinfo服务架构\"></a>bookinfo服务架构</h2><img src=\"bookinfo.svg\" style=\"zoom:80%;\" />\n\n<p>从整体架构图上看，总共分为如下的几个服务：</p>\n<ul>\n<li><code>productpage</code>： 这个微服务会调用 <code>details</code> 和 <code>reviews</code> 两个微服务，用来生成页面。</li>\n<li><code>details</code>：这个微服务中包含了书籍的信息。</li>\n<li><code>reviews</code>：这个微服务中包含了书籍相关的评论。它还会调用 <code>ratings</code> 微服务。有三个版本：<ul>\n<li>v1 版本不会调用 <code>ratings</code> 服务。</li>\n<li>v2 版本会调用 <code>ratings</code> 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。</li>\n<li>v3 版本会调用 <code>ratings</code> 服务，并使用 1 到 5 个红色星形图标来显示评分信息。</li>\n</ul>\n</li>\n<li><code>ratings</code>：这个微服务中包含了由书籍评价组成的评级信息。</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h2><p>服务的yaml文件在<code>istio-1.6.5/samples/bookinfo/platform/kube</code>下名叫<code>bookinfo.yaml</code>，直接部署这个文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f istio-1.6.5/samples/bookinfo/platform/kube/bookinfo.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，一定部署到上边新建的并且打了标签的namespace下，否则sidecar无法注入</p>\n</blockquote>\n<p>查看服务部署情况，确保所有服务都启动并且sidecar注入：</p>\n<img src=\"service.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"对外暴露bookinfo服务\"><a href=\"#对外暴露bookinfo服务\" class=\"headerlink\" title=\"对外暴露bookinfo服务\"></a>对外暴露bookinfo服务</h2><p>首先创建一个ingress：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bookinfo-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">bookinfo</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">bookinfo.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">productpage</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">9080</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行创建命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f bookinfo-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后新建一个nginx的配置文件：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bookinfo.conf</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> bookinfo.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> bookinfo.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/bookinfo.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/bookinfo.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span><span class=\"regexp\"> ^~/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查nginx配置文件并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>本地设置好host解析，通过url访问即可看到服务的页面：</p>\n<img src=\"v1.png\" style=\"zoom:50%;\" />\n\n\n\n<p>多刷新几次，可以看到不同的reviews服务版本：</p>\n<img src=\"v2.png\" style=\"zoom:50%;\" />\n\n<img src=\"v3.png\" style=\"zoom:50%;\" />\n\n"},{"title":"[k8s实践系列]Istio实践(三)--路由请求","date":"2020-07-16T07:37:51.000Z","description":"将流量路由到不同版本的后端服务","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594702185957&di=f0f1cc6419b7f1704a202d56ea54eb1d&imgtype=0&src=http%3A%2F%2Ft9.baidu.com%2Fit%2Fu%3D2440958369%2C359184656%26fm%3D193","_content":"\n\n\n在bookinfo这个服务中，`reviews`服务有三个版本，在访问的时候会重定向到其中一个版本的服务。如果是实际生产场景，应该只允许用户访问其中一个版本，这个就可以用istio的路由请求来实现。\n\n\n\n------\n\n\n\n## 设定目标规则\n\n目标规则用于根据某种规则将服务分为一些子集，这里我们根据版本标签将服务分组，分组之后就可以配置将流量导入某一个子集中。\n\n\n\n官方的标准配置在`istio-1.6.5/samples/bookinfo/networking`下叫`destination-rule-all.yaml`，这里以其中`reviews`服务为例：\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n```\n\n\n\n从配置中可以看到，`subsets`指定了三个子集`v1,v2,v3`对应三个版本的服务，每个子集通过lable进行服务的匹配。\n\n\n\n直接运行这个配置即可：\n\n```bash\n$ kubectl apply -f destination-rule-all.yaml -n istio-app\n```\n\n<br>\n\n\n\n## 应用虚拟服务\n\n虚拟服务是一类服务的抽象，一个虚拟服务中可能有一个或多个服务，在虚拟服务中可以进行灵活的流量配置。\n\n\n\n标准的虚拟服务配置在`istio-1.6.5/samples/bookinfo/networking`名叫`virtual-service-all-v1.yaml`，其中大致的配置如下：\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n> 例如在上边的配置中，配置了名为`reviews`的服务，并将流量转到名为`v1`，host为`reviews`的目标规则中\n\n\n\n直接应用这个配置：\n\n```bash\n$ kubectl apply -f virtual-service-all-v1.yaml -n istio-app\n```\n\n<br>\n\n\n\n## 测试\n\n按照目前的配置，我们将流量全部导入v1版本的reviews服务中，在页面上不断刷新，应该只显示v1版本的reviews页面（没有星级评分服务）\n\n<img src=\"v1.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 基于http header的路由控制\n\n`productpage` 服务在所有到 `reviews` 服务的 HTTP 请求中都增加了一个自定义的 `end-user` 请求头，利用这个header信息可以实现对访问用户的限制。\n\n\n\n新建一个yaml配置文件，配置基于header的路由控制：\n\n```yaml\n# virtual-service-reviews-v2.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n\n\n这个配置中，通过匹配`header: end-user == jason`，将路由调度到v2版本，其他的调度到v1版本。使用下面的命令生效该配置：\n\n```bash\n$ kubectl apply -f virtual-service-reviews-v2.yaml -n istio-app\n```\n\n\n\n<br>\n\n\n\n## 测试\n\n使用jason用户登录，发现无论怎么刷新，都会请求到v2版本的reviews服务（带有黑白色星星）\n\n<img src=\"jason.png\" style=\"zoom:50%;\" />\n\n\n\n而使用其他用户登录，则还是在v1版本：\n\n<img src=\"peter.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/k8s实践系列-Istio实践-三-路由请求.md","raw":"---\ntitle: '[k8s实践系列]Istio实践(三)--路由请求'\ndate: 2020-07-16 15:37:51\ntags:\n- k8s\n- Istio\ncategories:\n- 实践K8s\n- Istio\ndescription: 将流量路由到不同版本的后端服务\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594702185957&di=f0f1cc6419b7f1704a202d56ea54eb1d&imgtype=0&src=http%3A%2F%2Ft9.baidu.com%2Fit%2Fu%3D2440958369%2C359184656%26fm%3D193\n---\n\n\n\n在bookinfo这个服务中，`reviews`服务有三个版本，在访问的时候会重定向到其中一个版本的服务。如果是实际生产场景，应该只允许用户访问其中一个版本，这个就可以用istio的路由请求来实现。\n\n\n\n------\n\n\n\n## 设定目标规则\n\n目标规则用于根据某种规则将服务分为一些子集，这里我们根据版本标签将服务分组，分组之后就可以配置将流量导入某一个子集中。\n\n\n\n官方的标准配置在`istio-1.6.5/samples/bookinfo/networking`下叫`destination-rule-all.yaml`，这里以其中`reviews`服务为例：\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: reviews\nspec:\n  host: reviews\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n  - name: v3\n    labels:\n      version: v3\n```\n\n\n\n从配置中可以看到，`subsets`指定了三个子集`v1,v2,v3`对应三个版本的服务，每个子集通过lable进行服务的匹配。\n\n\n\n直接运行这个配置即可：\n\n```bash\n$ kubectl apply -f destination-rule-all.yaml -n istio-app\n```\n\n<br>\n\n\n\n## 应用虚拟服务\n\n虚拟服务是一类服务的抽象，一个虚拟服务中可能有一个或多个服务，在虚拟服务中可以进行灵活的流量配置。\n\n\n\n标准的虚拟服务配置在`istio-1.6.5/samples/bookinfo/networking`名叫`virtual-service-all-v1.yaml`，其中大致的配置如下：\n\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n  - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n> 例如在上边的配置中，配置了名为`reviews`的服务，并将流量转到名为`v1`，host为`reviews`的目标规则中\n\n\n\n直接应用这个配置：\n\n```bash\n$ kubectl apply -f virtual-service-all-v1.yaml -n istio-app\n```\n\n<br>\n\n\n\n## 测试\n\n按照目前的配置，我们将流量全部导入v1版本的reviews服务中，在页面上不断刷新，应该只显示v1版本的reviews页面（没有星级评分服务）\n\n<img src=\"v1.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n## 基于http header的路由控制\n\n`productpage` 服务在所有到 `reviews` 服务的 HTTP 请求中都增加了一个自定义的 `end-user` 请求头，利用这个header信息可以实现对访问用户的限制。\n\n\n\n新建一个yaml配置文件，配置基于header的路由控制：\n\n```yaml\n# virtual-service-reviews-v2.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n\n\n这个配置中，通过匹配`header: end-user == jason`，将路由调度到v2版本，其他的调度到v1版本。使用下面的命令生效该配置：\n\n```bash\n$ kubectl apply -f virtual-service-reviews-v2.yaml -n istio-app\n```\n\n\n\n<br>\n\n\n\n## 测试\n\n使用jason用户登录，发现无论怎么刷新，都会请求到v2版本的reviews服务（带有黑白色星星）\n\n<img src=\"jason.png\" style=\"zoom:50%;\" />\n\n\n\n而使用其他用户登录，则还是在v1版本：\n\n<img src=\"peter.png\" style=\"zoom:50%;\" />\n\n","slug":"k8s实践系列-Istio实践-三-路由请求","published":1,"updated":"2020-07-16T08:17:09.817Z","_id":"ckcoirl8900004xn01gpj7knb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在bookinfo这个服务中，<code>reviews</code>服务有三个版本，在访问的时候会重定向到其中一个版本的服务。如果是实际生产场景，应该只允许用户访问其中一个版本，这个就可以用istio的路由请求来实现。</p>\n<hr>\n<h2 id=\"设定目标规则\"><a href=\"#设定目标规则\" class=\"headerlink\" title=\"设定目标规则\"></a>设定目标规则</h2><p>目标规则用于根据某种规则将服务分为一些子集，这里我们根据版本标签将服务分组，分组之后就可以配置将流量导入某一个子集中。</p>\n<p>官方的标准配置在<code>istio-1.6.5/samples/bookinfo/networking</code>下叫<code>destination-rule-all.yaml</code>，这里以其中<code>reviews</code>服务为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DestinationRule</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">  <span class=\"attr\">subsets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">v3</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>从配置中可以看到，<code>subsets</code>指定了三个子集<code>v1,v2,v3</code>对应三个版本的服务，每个子集通过lable进行服务的匹配。</p>\n<p>直接运行这个配置即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f destination-rule-all.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"应用虚拟服务\"><a href=\"#应用虚拟服务\" class=\"headerlink\" title=\"应用虚拟服务\"></a>应用虚拟服务</h2><p>虚拟服务是一类服务的抽象，一个虚拟服务中可能有一个或多个服务，在虚拟服务中可以进行灵活的流量配置。</p>\n<p>标准的虚拟服务配置在<code>istio-1.6.5/samples/bookinfo/networking</code>名叫<code>virtual-service-all-v1.yaml</code>，其中大致的配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">        <span class=\"attr\">subset:</span> <span class=\"string\">v1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>例如在上边的配置中，配置了名为<code>reviews</code>的服务，并将流量转到名为<code>v1</code>，host为<code>reviews</code>的目标规则中</p>\n</blockquote>\n<p>直接应用这个配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f virtual-service-all-v1.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>按照目前的配置，我们将流量全部导入v1版本的reviews服务中，在页面上不断刷新，应该只显示v1版本的reviews页面（没有星级评分服务）</p>\n<img src= \"/img/loading.gif\" data-src=\"v1.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"基于http-header的路由控制\"><a href=\"#基于http-header的路由控制\" class=\"headerlink\" title=\"基于http header的路由控制\"></a>基于http header的路由控制</h2><p><code>productpage</code> 服务在所有到 <code>reviews</code> 服务的 HTTP 请求中都增加了一个自定义的 <code>end-user</code> 请求头，利用这个header信息可以实现对访问用户的限制。</p>\n<p>新建一个yaml配置文件，配置基于header的路由控制：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># virtual-service-reviews-v2.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">match:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">headers:</span></span><br><span class=\"line\">        <span class=\"attr\">end-user:</span></span><br><span class=\"line\">          <span class=\"attr\">exact:</span> <span class=\"string\">jason</span></span><br><span class=\"line\">    <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">        <span class=\"attr\">subset:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">        <span class=\"attr\">subset:</span> <span class=\"string\">v1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个配置中，通过匹配<code>header: end-user == jason</code>，将路由调度到v2版本，其他的调度到v1版本。使用下面的命令生效该配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f virtual-service-reviews-v2.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>使用jason用户登录，发现无论怎么刷新，都会请求到v2版本的reviews服务（带有黑白色星星）</p>\n<img src= \"/img/loading.gif\" data-src=\"jason.png\" style=\"zoom:50%;\" />\n\n\n\n<p>而使用其他用户登录，则还是在v1版本：</p>\n<img src= \"/img/loading.gif\" data-src=\"peter.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<p>在bookinfo这个服务中，<code>reviews</code>服务有三个版本，在访问的时候会重定向到其中一个版本的服务。如果是实际生产场景，应该只允许用户访问其中一个版本，这个就可以用istio的路由请求来实现。</p>\n<hr>\n<h2 id=\"设定目标规则\"><a href=\"#设定目标规则\" class=\"headerlink\" title=\"设定目标规则\"></a>设定目标规则</h2><p>目标规则用于根据某种规则将服务分为一些子集，这里我们根据版本标签将服务分组，分组之后就可以配置将流量导入某一个子集中。</p>\n<p>官方的标准配置在<code>istio-1.6.5/samples/bookinfo/networking</code>下叫<code>destination-rule-all.yaml</code>，这里以其中<code>reviews</code>服务为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DestinationRule</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">  <span class=\"attr\">subsets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">v3</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>从配置中可以看到，<code>subsets</code>指定了三个子集<code>v1,v2,v3</code>对应三个版本的服务，每个子集通过lable进行服务的匹配。</p>\n<p>直接运行这个配置即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f destination-rule-all.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"应用虚拟服务\"><a href=\"#应用虚拟服务\" class=\"headerlink\" title=\"应用虚拟服务\"></a>应用虚拟服务</h2><p>虚拟服务是一类服务的抽象，一个虚拟服务中可能有一个或多个服务，在虚拟服务中可以进行灵活的流量配置。</p>\n<p>标准的虚拟服务配置在<code>istio-1.6.5/samples/bookinfo/networking</code>名叫<code>virtual-service-all-v1.yaml</code>，其中大致的配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">        <span class=\"attr\">subset:</span> <span class=\"string\">v1</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>例如在上边的配置中，配置了名为<code>reviews</code>的服务，并将流量转到名为<code>v1</code>，host为<code>reviews</code>的目标规则中</p>\n</blockquote>\n<p>直接应用这个配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f virtual-service-all-v1.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>按照目前的配置，我们将流量全部导入v1版本的reviews服务中，在页面上不断刷新，应该只显示v1版本的reviews页面（没有星级评分服务）</p>\n<img src=\"v1.png\" style=\"zoom:50%;\" />\n\n<br>\n\n\n\n<h2 id=\"基于http-header的路由控制\"><a href=\"#基于http-header的路由控制\" class=\"headerlink\" title=\"基于http header的路由控制\"></a>基于http header的路由控制</h2><p><code>productpage</code> 服务在所有到 <code>reviews</code> 服务的 HTTP 请求中都增加了一个自定义的 <code>end-user</code> 请求头，利用这个header信息可以实现对访问用户的限制。</p>\n<p>新建一个yaml配置文件，配置基于header的路由控制：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># virtual-service-reviews-v2.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">match:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">headers:</span></span><br><span class=\"line\">        <span class=\"attr\">end-user:</span></span><br><span class=\"line\">          <span class=\"attr\">exact:</span> <span class=\"string\">jason</span></span><br><span class=\"line\">    <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">        <span class=\"attr\">subset:</span> <span class=\"string\">v2</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">reviews</span></span><br><span class=\"line\">        <span class=\"attr\">subset:</span> <span class=\"string\">v1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个配置中，通过匹配<code>header: end-user == jason</code>，将路由调度到v2版本，其他的调度到v1版本。使用下面的命令生效该配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f virtual-service-reviews-v2.yaml -n istio-app</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>使用jason用户登录，发现无论怎么刷新，都会请求到v2版本的reviews服务（带有黑白色星星）</p>\n<img src=\"jason.png\" style=\"zoom:50%;\" />\n\n\n\n<p>而使用其他用户登录，则还是在v1版本：</p>\n<img src=\"peter.png\" style=\"zoom:50%;\" />\n\n"},{"title":"[k8s实践系列]部署集群监控服务","date":"2020-07-17T02:59:50.000Z","description":"部署node-exporter+prometheus+grafana监控kubernetes集群","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594965034057&di=d1f69b33314f89e42ed55a48f909043b&imgtype=0&src=http%3A%2F%2Fimgcdn.sdk.cn%2Farticle%2FC89u2eYpm4ZIY7BxRTxK.png","_content":"\n\n\n使用node_exporter + prometheus + grafana 构建一套监控平台。\n\n\n\n------\n\n\n\n## 组件和架构\n\n在这一套监控服务中，使用到了如下的一些组件：\n\n- `node-exporter`：负责采集服务器监控指标；\n- `prometheus`：负责从k8s api和node_exporter周期性获取监控指标并存储数据；\n- `grafana`：负责进行数据展示；\n- `alertmanager`：根据报警规则进行报警发送。\n\n\n\n组件的架构图如下图所示：\n\n<img src=\"prometheus.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n## 准备\n\n新建一个namespace用于部署监控组件相关的服务：\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitor\n```\n\n\n\n```bash\n$ kubectl apply -f namespace.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署node-exporter\n\n\n\n### 部署daemonset服务\n\nnode-exporter用于采集集群节点监控资源，所以采用`daemonset`方式部署：\n\n```yaml\n# node-exporter-ds.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-exporter\n  namespace: monitor\n  labels:\n    k8s-app: node-exporter\nspec:\n  selector:\n    matchLabels:\n      k8s-app: node-exporter\n  template:\n    metadata:\n      labels:\n        k8s-app: node-exporter\n    spec:\n      containers:\n      - image: 'prom/node-exporter:v1.0.1'\n        imagePullPolicy: IfNotPresent\n        name: node-exporter\n        args:\n          - '--path.procfs=/host/proc'\n          - '--path.sysfs=/host/sys'\n          - '--collector.filesystem.ignored-mount-points=^/(dev|proc|sys)($|/)'\n          - >-\n            --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$\n          - '--no-collector.wifi'\n        ports:\n        - containerPort: 9100\n          protocol: TCP\n          name: http-9100\n        resources:\n          limits:\n            cpu: 400m\n            memory: 50Mi\n          requests:\n            cpu: 200m\n            memory: 30Mi\n        volumeMounts:\n          - mountPath: /host/proc\n            name: proc\n            readOnly: true\n          - mountPath: /host/sys\n            name: sys\n            readOnly: true\n      volumes:\n        - hostPath:\n            path: /proc\n            type: ''\n          name: proc\n        - hostPath:\n            path: /sys\n            type: ''\n          name: sys\n```\n\n\n\n执行下面的命令部署node-exporter服务：\n\n```bash\nkubectl apply -f node-exporter-ds.yaml\n```\n\n\n\n### 部署service\n\n部署node-exporter service对象：\n\n```yaml\n# node-exporter-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: node-exporter\n  name: node-exporter\n  namespace: monitor\nspec:\n  ports:\n  - name: http-9100\n    port: 9100\n    nodePort: 31672\n    protocol: TCP\n  type: NodePort\n  selector:\n    k8s-app: node-exporter\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl apply -f node-exporter-service.yaml\n```\n\n\n\n### 验证\n\n确保服务正常启动：\n\n<img src=\"node-exporter.png\" style=\"zoom:60%;\" />\n\n\n\nnode-exporter服务对外暴露了31672端口，可以通过访问node节点的31672端口测试是否能获取到metrics数据：\n\n<img src=\"check-node.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n## 部署prometheus\n\n\n\n### 创建configmap\n\n通过configmap方式管理prometheus配置文件：\n\n```yaml\n# prometheus-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitor\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: EnsureExists\ndata:\n  prometheus.yml: |\n    scrape_configs:\n    - job_name: node_exporter\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      - source_labels: [__meta_kubernetes_role]\n        action: replace\n        target_label: kubernetes_role\n      - source_labels: [__address__]\n        regex: '(.*):10250'\n        replacement: '${1}:31672'\n        target_label: __address__\n\n    - job_name: prometheus\n      static_configs:\n      - targets:\n        - localhost:9090\n    - job_name: kubernetes-apiservers\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - action: keep\n        regex: default;kubernetes;https\n        source_labels:\n        - __meta_kubernetes_namespace\n        - __meta_kubernetes_service_name\n        - __meta_kubernetes_endpoint_port_name\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    - job_name: kubernetes-nodes-kubelet\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    - job_name: kubernetes-nodes-cadvisor\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      - target_label: __metrics_path__\n        replacement: /metrics/cadvisor\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    - job_name: kubernetes-service-endpoints\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - action: keep\n        regex: true\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_scrape\n      - action: replace\n        regex: (https?)\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_scheme\n        target_label: __scheme__\n      - action: replace\n        regex: (.+)\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_path\n        target_label: __metrics_path__\n      - action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        source_labels:\n        - __address__\n        - __meta_kubernetes_service_annotation_prometheus_io_port\n        target_label: __address__\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_namespace\n        target_label: kubernetes_namespace\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_service_name\n        target_label: kubernetes_name\n\n    - job_name: kubernetes-services\n      kubernetes_sd_configs:\n      - role: service\n      metrics_path: /probe\n      params:\n        module:\n        - http_2xx\n      relabel_configs:\n      - action: keep\n        regex: true\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_probe\n      - source_labels:\n        - __address__\n        target_label: __param_target\n      - replacement: blackbox\n        target_label: __address__\n      - source_labels:\n        - __param_target\n        target_label: instance\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels:\n        - __meta_kubernetes_namespace\n        target_label: kubernetes_namespace\n      - source_labels:\n        - __meta_kubernetes_service_name\n        target_label: kubernetes_name\n\n    - job_name: 'kubernetes-nodes'\n      kubernetes_sd_configs:\n      - role: node\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      - target_label: __address__\n        replacement: kubernetes.default.svc:443\n      - source_labels: [__meta_kubernetes_node_name]\n        regex: (.+)\n        target_label: __metrics_path__\n        replacement: /api/v1/nodes/${1}/proxy/metrics\n\n    - job_name: kubernetes-pods\n      kubernetes_sd_configs:\n      - role: pod\n      relabel_configs:\n      - action: keep\n        regex: true\n        source_labels:\n        - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n      - action: replace\n        regex: (.+)\n        source_labels:\n        - __meta_kubernetes_pod_annotation_prometheus_io_path\n        target_label: __metrics_path__\n      - action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        source_labels:\n        - __address__\n        - __meta_kubernetes_pod_annotation_prometheus_io_port\n        target_label: __address__\n      - action: labelmap\n        regex: __meta_kubernetes_pod_label_(.+)\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_namespace\n        target_label: kubernetes_namespace\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_pod_name\n        target_label: kubernetes_pod_name\n    alerting:\n      alertmanagers:\n      - kubernetes_sd_configs:\n          - role: pod\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n        relabel_configs:\n        - source_labels: [__meta_kubernetes_namespace]\n          regex: kube-system\n          action: keep\n        - source_labels: [__meta_kubernetes_pod_label_k8s_app]\n          regex: alertmanager\n          action: keep\n        - source_labels: [__meta_kubernetes_pod_container_port_number]\n          regex:\n          action: drop\n```\n\n\n\n在这个config中定义了常用的监控配置，运行下面的命令创建：\n\n```bash\n$ kubectl apply -f prometheus-configmap.yaml\n```\n\n\n\n### 创建pvc\n\n这里使用storageclass创建一个pvc，用于持久化存储prometheus的数据。后端的存储为nfs。（官方不建议使用nfs）：\n\n```yaml\n# prometheus-pvc.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: monitor-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n\n---\n\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: prometheus-data\n  namespace: monitor\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 20Gi\n  storageClassName: monitor-storageclass\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl apply -f prometheus-pvc.yaml\n```\n\n<img src=\"pvc.png\" style=\"zoom:60%;\" />\n\n\n\n### 服务授权\n\n需要对prometheus进行权限控制，因为它要从apiserver进行监控数据采集：\n\n```yaml\n# prometheus-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus\n  namespace: monitor\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: prometheus\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - nodes\n      - nodes/metrics\n      - services\n      - endpoints\n      - pods\n      - nodes/proxy\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n    verbs:\n      - get\n  - nonResourceURLs:\n      - \"/metrics\"\n    verbs:\n      - get\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus\n  namespace: monitor\n```\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f prometheus-rbac.yaml\n```\n\n\n\n### 部署服务\n\n```yaml\n# prometheus-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: prometheus-deployment\n  name: prometheus\n  namespace: monitor\nspec:\n  selector:\n    matchLabels:\n      app: prometheus\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: prometheus\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - image: prom/prometheus:v2.19.2\n        name: prometheus\n        command:\n        - \"/bin/prometheus\"\n        args:\n        - \"--config.file=/etc/prometheus/prometheus.yml\"\n        - \"--storage.tsdb.path=/prometheus\"\n        - \"--web.console.libraries=/etc/prometheus/console_libraries\"\n        - \"--web.console.templates=/etc/prometheus/consoles\"\n        - \"--web.enable-lifecycle\"\n        ports:\n        - containerPort: 9090\n          protocol: TCP\n        volumeMounts:\n        - mountPath: \"/prometheus\"\n          name: data\n          subPath: prometheus\n        - mountPath: \"/etc/prometheus\"\n          name: config-volume\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi\n          limits:\n            cpu: 200m\n            memory: 1Gi\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: prometheus-data\n      - configMap:\n          name: prometheus-config\n        name: config-volume\n```\n\n\n\n执行下面的命令部署服务：\n\n```bash\n$ kubectl apply -f prometheus-deployment.yaml\n```\n\n\n\n确保服务正常启动：\n\n<img src=\"check-prome.png\" style=\"zoom:60%;\" />\n\n\n\n### 创建service\n\n```yaml\n# prometheus-service.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: prometheus\n  namespace: monitor\n  labels:\n    kubernetes.io/name: \"Prometheus\"\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  type: ClusterIP\n  ports:\n    - name: http\n      port: 9090\n      protocol: TCP\n      targetPort: 9090\n  selector:\n    app: prometheus\n```\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f prometheus-service.yaml\n```\n\n\n\n### 创建ingress暴露服务\n\n首先在集群中创建ingress对象资源：\n\n```bash\n# prometheus-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: prometheus\n  namespace: monitor\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: prometheus.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: prometheus\n          servicePort: 9090\n        path: /\n```\n\n\n\n执行下面的命令进行创建：\n\n```bash\n$ kubectl apply -f prometheus-ingress.yaml\n```\n\n\n\n然后在nginx服务器上添加一个配置：\n\n```nginx\n# prometheus.conf\nserver {\n    listen 80;\n    server_name prometheus.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name prometheus.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/prometheus.example.com_access.log main;\n    error_log /var/log/nginx/peometheus.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n    \tlog_not_found off;\n    \taccess_log off;\n\t\t}\n\n\t\tlocation ~* /\\.(svn|git)/ {\n    \treturn 404;\n\t\t}\n}\n```\n\n\n\n检查nginx配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n设置好host通过浏览器访问`prometheus.example.com`，正产展示prometheus页面即可：\n\n<img src=\"prometheus-web.png\" style=\"zoom:60%;\" />\n\n\n\n<br>\n\n\n\n## 部署grafana\n\n这里我是创建了一个空白的grafana服务，即不包含dashboard。可以把需要导入的dashboard作为configmap挂载到pod中，即可实现在创建服务的时候同时生成dashboard\n\n\n\n### 创建pvc\n\n使用pvc对grafana的数据进行持久化存储：\n\n```yaml\n# grafana-pvc.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: grafana-data\n  namespace: monitor\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 20Gi\n  storageClassName: monitor-storageclass\n```\n\n\n\n使用下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-pvc.yaml\n```\n\n<img src=\"grafana-pvc.png\" style=\"zoom:60%;\" />\n\n\n\n### 创建grafana服务\n\n```yaml\n# grafana-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: monitor\n  labels:\n    app: grafana\nspec:\n  selector:\n    matchLabels:\n      app: grafana\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: grafana\n    spec:\n      securityContext:\n        runAsGroup: 472\n        runAsUser: 472\n        fsGroup: 472\n      containers:\n      - image: grafana/grafana:7.1.0\n        name: grafana-core\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          protocol: TCP\n        resources:\n          limits:\n            cpu: 1000m\n            memory: 1000Mi\n          requests:\n            cpu: 200m\n            memory: 256Mi\n        env:\n          - name: GF_AUTH_DISABLE_LOGIN_FORM\n            value: \"false\"\n          - name: GF_AUTH_BASIC_ENABLED\n            value: \"true\"\n          - name: GF_AUTH_ANONYMOUS_ENABLED\n            value: \"false\"\n          - name: GF_AUTH_ANONYMOUS_ORG_NAME\n            value: \"Main Org.\"\n          - name: GF_AUTH_ANONYMOUS_ORG_ROLE\n            value: \"Admin\"\n          - name: GF_DASHBOARDS_JSON_ENABLED\n            value: \"true\"\n          # - name: GF_AUTH_ANONYMOUS_ORG_ROLE\n          #   value: Admin\n          # does not really work, because of template variables in exported dashboards:\n          # - name: GF_DASHBOARDS_JSON_ENABLED\n          #   value: \"true\"\n        readinessProbe:\n          httpGet:\n            path: /login\n            port: 3000\n          # initialDelaySeconds: 30\n          # timeoutSeconds: 1\n        volumeMounts:\n        - name: grafana-persistent-storage\n          mountPath: /var/lib/grafana\n      volumes:\n      - name: grafana-persistent-storage\n        persistentVolumeClaim:\n          claimName: grafana-data\n```\n\n\n\n如果想取消grafana的登录功能，则需要将：\n\n- `GF_AUTH_DISABLE_LOGIN_FORM`设置为false来启用登录表单；\n- `GF_AUTH_BASIC_ENABLED`设置为true起用认证；\n- `GF_AUTH_ANONYMOUS_ENABLED`设置为false禁用匿名用户登录；\n\n\n\n运行下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-deployment.yaml\n```\n\n\n\n### 创建service\n\n```yaml\n# grafana-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\n  namespace: monitor\n  labels:\n    app: grafana\nspec:\n\ttype: ClusterIP\n  ports:\n    - name: http\n      port: 3000\n      targetPort: 3000\n      protocol: TCP\n  selector:\n    app: grafana\n```\n\n\n\n通过下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-service.yaml\n```\n\n\n\n\n\n### 创建ingress暴露服务\n\n```yaml\n# grafana-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: grafana\n   namespace: monitor\nspec:\n   rules:\n   - host: grafana.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: grafana\n          servicePort: 3000\n```\n\n\n\n使用下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-ingress.yaml\n```\n\n\n\n在nginx上增加一个配置：\n\n```nginx\n# grafana.conf\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/grafana.example.com_access.log main;\n    error_log /var/log/nginx/grafana.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n\t\t}\n\n\t\tlocation ~* /\\.(svn|git)/ {\n    \treturn 404;\n\t\t}\n}\n```\n\n\n\n检查配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n通过浏览器访问`grafana.example.com`，默认的密码为`admin/admin`，输入后修改密码即可进入grafana页面：\n\n<img src=\"grafana-index.png\" style=\"zoom:50%;\" />\n\n\n\n### 添加数据源\n\n我们的场景中，使用的是prometheus作为数据源的，所以添加一个prometheus的数据源：\n\n<img src=\"datasource.png\" style=\"zoom:50%;\" />\n\n\n\n剩下的就是添加dashboard了，可以自己根据promsql编写，也可以在 [grafana dasboard库](https://grafana.com/grafana/dashboards)找需要的模板。","source":"_posts/k8s实践系列-部署集群监控服务.md","raw":"---\ntitle: '[k8s实践系列]部署集群监控服务'\ndate: 2020-07-17 10:59:50\ntags:\n- k8s\n- k8s监控\ncategories:\n- 实践K8s\n- k8s监控\ndescription: 部署node-exporter+prometheus+grafana监控kubernetes集群\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594965034057&di=d1f69b33314f89e42ed55a48f909043b&imgtype=0&src=http%3A%2F%2Fimgcdn.sdk.cn%2Farticle%2FC89u2eYpm4ZIY7BxRTxK.png\n---\n\n\n\n使用node_exporter + prometheus + grafana 构建一套监控平台。\n\n\n\n------\n\n\n\n## 组件和架构\n\n在这一套监控服务中，使用到了如下的一些组件：\n\n- `node-exporter`：负责采集服务器监控指标；\n- `prometheus`：负责从k8s api和node_exporter周期性获取监控指标并存储数据；\n- `grafana`：负责进行数据展示；\n- `alertmanager`：根据报警规则进行报警发送。\n\n\n\n组件的架构图如下图所示：\n\n<img src=\"prometheus.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n## 准备\n\n新建一个namespace用于部署监控组件相关的服务：\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitor\n```\n\n\n\n```bash\n$ kubectl apply -f namespace.yaml\n```\n\n\n\n<br>\n\n\n\n## 部署node-exporter\n\n\n\n### 部署daemonset服务\n\nnode-exporter用于采集集群节点监控资源，所以采用`daemonset`方式部署：\n\n```yaml\n# node-exporter-ds.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-exporter\n  namespace: monitor\n  labels:\n    k8s-app: node-exporter\nspec:\n  selector:\n    matchLabels:\n      k8s-app: node-exporter\n  template:\n    metadata:\n      labels:\n        k8s-app: node-exporter\n    spec:\n      containers:\n      - image: 'prom/node-exporter:v1.0.1'\n        imagePullPolicy: IfNotPresent\n        name: node-exporter\n        args:\n          - '--path.procfs=/host/proc'\n          - '--path.sysfs=/host/sys'\n          - '--collector.filesystem.ignored-mount-points=^/(dev|proc|sys)($|/)'\n          - >-\n            --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$\n          - '--no-collector.wifi'\n        ports:\n        - containerPort: 9100\n          protocol: TCP\n          name: http-9100\n        resources:\n          limits:\n            cpu: 400m\n            memory: 50Mi\n          requests:\n            cpu: 200m\n            memory: 30Mi\n        volumeMounts:\n          - mountPath: /host/proc\n            name: proc\n            readOnly: true\n          - mountPath: /host/sys\n            name: sys\n            readOnly: true\n      volumes:\n        - hostPath:\n            path: /proc\n            type: ''\n          name: proc\n        - hostPath:\n            path: /sys\n            type: ''\n          name: sys\n```\n\n\n\n执行下面的命令部署node-exporter服务：\n\n```bash\nkubectl apply -f node-exporter-ds.yaml\n```\n\n\n\n### 部署service\n\n部署node-exporter service对象：\n\n```yaml\n# node-exporter-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    k8s-app: node-exporter\n  name: node-exporter\n  namespace: monitor\nspec:\n  ports:\n  - name: http-9100\n    port: 9100\n    nodePort: 31672\n    protocol: TCP\n  type: NodePort\n  selector:\n    k8s-app: node-exporter\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl apply -f node-exporter-service.yaml\n```\n\n\n\n### 验证\n\n确保服务正常启动：\n\n<img src=\"node-exporter.png\" style=\"zoom:60%;\" />\n\n\n\nnode-exporter服务对外暴露了31672端口，可以通过访问node节点的31672端口测试是否能获取到metrics数据：\n\n<img src=\"check-node.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n## 部署prometheus\n\n\n\n### 创建configmap\n\n通过configmap方式管理prometheus配置文件：\n\n```yaml\n# prometheus-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitor\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: EnsureExists\ndata:\n  prometheus.yml: |\n    scrape_configs:\n    - job_name: node_exporter\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      - source_labels: [__meta_kubernetes_role]\n        action: replace\n        target_label: kubernetes_role\n      - source_labels: [__address__]\n        regex: '(.*):10250'\n        replacement: '${1}:31672'\n        target_label: __address__\n\n    - job_name: prometheus\n      static_configs:\n      - targets:\n        - localhost:9090\n    - job_name: kubernetes-apiservers\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - action: keep\n        regex: default;kubernetes;https\n        source_labels:\n        - __meta_kubernetes_namespace\n        - __meta_kubernetes_service_name\n        - __meta_kubernetes_endpoint_port_name\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    - job_name: kubernetes-nodes-kubelet\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    - job_name: kubernetes-nodes-cadvisor\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      - target_label: __metrics_path__\n        replacement: /metrics/cadvisor\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    - job_name: kubernetes-service-endpoints\n      kubernetes_sd_configs:\n      - role: endpoints\n      relabel_configs:\n      - action: keep\n        regex: true\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_scrape\n      - action: replace\n        regex: (https?)\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_scheme\n        target_label: __scheme__\n      - action: replace\n        regex: (.+)\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_path\n        target_label: __metrics_path__\n      - action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        source_labels:\n        - __address__\n        - __meta_kubernetes_service_annotation_prometheus_io_port\n        target_label: __address__\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_namespace\n        target_label: kubernetes_namespace\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_service_name\n        target_label: kubernetes_name\n\n    - job_name: kubernetes-services\n      kubernetes_sd_configs:\n      - role: service\n      metrics_path: /probe\n      params:\n        module:\n        - http_2xx\n      relabel_configs:\n      - action: keep\n        regex: true\n        source_labels:\n        - __meta_kubernetes_service_annotation_prometheus_io_probe\n      - source_labels:\n        - __address__\n        target_label: __param_target\n      - replacement: blackbox\n        target_label: __address__\n      - source_labels:\n        - __param_target\n        target_label: instance\n      - action: labelmap\n        regex: __meta_kubernetes_service_label_(.+)\n      - source_labels:\n        - __meta_kubernetes_namespace\n        target_label: kubernetes_namespace\n      - source_labels:\n        - __meta_kubernetes_service_name\n        target_label: kubernetes_name\n\n    - job_name: 'kubernetes-nodes'\n      kubernetes_sd_configs:\n      - role: node\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n      - target_label: __address__\n        replacement: kubernetes.default.svc:443\n      - source_labels: [__meta_kubernetes_node_name]\n        regex: (.+)\n        target_label: __metrics_path__\n        replacement: /api/v1/nodes/${1}/proxy/metrics\n\n    - job_name: kubernetes-pods\n      kubernetes_sd_configs:\n      - role: pod\n      relabel_configs:\n      - action: keep\n        regex: true\n        source_labels:\n        - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n      - action: replace\n        regex: (.+)\n        source_labels:\n        - __meta_kubernetes_pod_annotation_prometheus_io_path\n        target_label: __metrics_path__\n      - action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        source_labels:\n        - __address__\n        - __meta_kubernetes_pod_annotation_prometheus_io_port\n        target_label: __address__\n      - action: labelmap\n        regex: __meta_kubernetes_pod_label_(.+)\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_namespace\n        target_label: kubernetes_namespace\n      - action: replace\n        source_labels:\n        - __meta_kubernetes_pod_name\n        target_label: kubernetes_pod_name\n    alerting:\n      alertmanagers:\n      - kubernetes_sd_configs:\n          - role: pod\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n        relabel_configs:\n        - source_labels: [__meta_kubernetes_namespace]\n          regex: kube-system\n          action: keep\n        - source_labels: [__meta_kubernetes_pod_label_k8s_app]\n          regex: alertmanager\n          action: keep\n        - source_labels: [__meta_kubernetes_pod_container_port_number]\n          regex:\n          action: drop\n```\n\n\n\n在这个config中定义了常用的监控配置，运行下面的命令创建：\n\n```bash\n$ kubectl apply -f prometheus-configmap.yaml\n```\n\n\n\n### 创建pvc\n\n这里使用storageclass创建一个pvc，用于持久化存储prometheus的数据。后端的存储为nfs。（官方不建议使用nfs）：\n\n```yaml\n# prometheus-pvc.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: monitor-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n\n---\n\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: prometheus-data\n  namespace: monitor\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 20Gi\n  storageClassName: monitor-storageclass\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl apply -f prometheus-pvc.yaml\n```\n\n<img src=\"pvc.png\" style=\"zoom:60%;\" />\n\n\n\n### 服务授权\n\n需要对prometheus进行权限控制，因为它要从apiserver进行监控数据采集：\n\n```yaml\n# prometheus-rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus\n  namespace: monitor\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: prometheus\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - nodes\n      - nodes/metrics\n      - services\n      - endpoints\n      - pods\n      - nodes/proxy\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - \"\"\n    resources:\n      - configmaps\n    verbs:\n      - get\n  - nonResourceURLs:\n      - \"/metrics\"\n    verbs:\n      - get\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\n  labels:\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus\n  namespace: monitor\n```\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f prometheus-rbac.yaml\n```\n\n\n\n### 部署服务\n\n```yaml\n# prometheus-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: prometheus-deployment\n  name: prometheus\n  namespace: monitor\nspec:\n  selector:\n    matchLabels:\n      app: prometheus\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: prometheus\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - image: prom/prometheus:v2.19.2\n        name: prometheus\n        command:\n        - \"/bin/prometheus\"\n        args:\n        - \"--config.file=/etc/prometheus/prometheus.yml\"\n        - \"--storage.tsdb.path=/prometheus\"\n        - \"--web.console.libraries=/etc/prometheus/console_libraries\"\n        - \"--web.console.templates=/etc/prometheus/consoles\"\n        - \"--web.enable-lifecycle\"\n        ports:\n        - containerPort: 9090\n          protocol: TCP\n        volumeMounts:\n        - mountPath: \"/prometheus\"\n          name: data\n          subPath: prometheus\n        - mountPath: \"/etc/prometheus\"\n          name: config-volume\n        resources:\n          requests:\n            cpu: 100m\n            memory: 100Mi\n          limits:\n            cpu: 200m\n            memory: 1Gi\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: prometheus-data\n      - configMap:\n          name: prometheus-config\n        name: config-volume\n```\n\n\n\n执行下面的命令部署服务：\n\n```bash\n$ kubectl apply -f prometheus-deployment.yaml\n```\n\n\n\n确保服务正常启动：\n\n<img src=\"check-prome.png\" style=\"zoom:60%;\" />\n\n\n\n### 创建service\n\n```yaml\n# prometheus-service.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: prometheus\n  namespace: monitor\n  labels:\n    kubernetes.io/name: \"Prometheus\"\n    kubernetes.io/cluster-service: \"true\"\n    addonmanager.kubernetes.io/mode: Reconcile\nspec:\n  type: ClusterIP\n  ports:\n    - name: http\n      port: 9090\n      protocol: TCP\n      targetPort: 9090\n  selector:\n    app: prometheus\n```\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f prometheus-service.yaml\n```\n\n\n\n### 创建ingress暴露服务\n\n首先在集群中创建ingress对象资源：\n\n```bash\n# prometheus-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: prometheus\n  namespace: monitor\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: prometheus.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: prometheus\n          servicePort: 9090\n        path: /\n```\n\n\n\n执行下面的命令进行创建：\n\n```bash\n$ kubectl apply -f prometheus-ingress.yaml\n```\n\n\n\n然后在nginx服务器上添加一个配置：\n\n```nginx\n# prometheus.conf\nserver {\n    listen 80;\n    server_name prometheus.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name prometheus.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/prometheus.example.com_access.log main;\n    error_log /var/log/nginx/peometheus.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n    \tlog_not_found off;\n    \taccess_log off;\n\t\t}\n\n\t\tlocation ~* /\\.(svn|git)/ {\n    \treturn 404;\n\t\t}\n}\n```\n\n\n\n检查nginx配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n设置好host通过浏览器访问`prometheus.example.com`，正产展示prometheus页面即可：\n\n<img src=\"prometheus-web.png\" style=\"zoom:60%;\" />\n\n\n\n<br>\n\n\n\n## 部署grafana\n\n这里我是创建了一个空白的grafana服务，即不包含dashboard。可以把需要导入的dashboard作为configmap挂载到pod中，即可实现在创建服务的时候同时生成dashboard\n\n\n\n### 创建pvc\n\n使用pvc对grafana的数据进行持久化存储：\n\n```yaml\n# grafana-pvc.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: grafana-data\n  namespace: monitor\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 20Gi\n  storageClassName: monitor-storageclass\n```\n\n\n\n使用下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-pvc.yaml\n```\n\n<img src=\"grafana-pvc.png\" style=\"zoom:60%;\" />\n\n\n\n### 创建grafana服务\n\n```yaml\n# grafana-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: grafana\n  namespace: monitor\n  labels:\n    app: grafana\nspec:\n  selector:\n    matchLabels:\n      app: grafana\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: grafana\n    spec:\n      securityContext:\n        runAsGroup: 472\n        runAsUser: 472\n        fsGroup: 472\n      containers:\n      - image: grafana/grafana:7.1.0\n        name: grafana-core\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          protocol: TCP\n        resources:\n          limits:\n            cpu: 1000m\n            memory: 1000Mi\n          requests:\n            cpu: 200m\n            memory: 256Mi\n        env:\n          - name: GF_AUTH_DISABLE_LOGIN_FORM\n            value: \"false\"\n          - name: GF_AUTH_BASIC_ENABLED\n            value: \"true\"\n          - name: GF_AUTH_ANONYMOUS_ENABLED\n            value: \"false\"\n          - name: GF_AUTH_ANONYMOUS_ORG_NAME\n            value: \"Main Org.\"\n          - name: GF_AUTH_ANONYMOUS_ORG_ROLE\n            value: \"Admin\"\n          - name: GF_DASHBOARDS_JSON_ENABLED\n            value: \"true\"\n          # - name: GF_AUTH_ANONYMOUS_ORG_ROLE\n          #   value: Admin\n          # does not really work, because of template variables in exported dashboards:\n          # - name: GF_DASHBOARDS_JSON_ENABLED\n          #   value: \"true\"\n        readinessProbe:\n          httpGet:\n            path: /login\n            port: 3000\n          # initialDelaySeconds: 30\n          # timeoutSeconds: 1\n        volumeMounts:\n        - name: grafana-persistent-storage\n          mountPath: /var/lib/grafana\n      volumes:\n      - name: grafana-persistent-storage\n        persistentVolumeClaim:\n          claimName: grafana-data\n```\n\n\n\n如果想取消grafana的登录功能，则需要将：\n\n- `GF_AUTH_DISABLE_LOGIN_FORM`设置为false来启用登录表单；\n- `GF_AUTH_BASIC_ENABLED`设置为true起用认证；\n- `GF_AUTH_ANONYMOUS_ENABLED`设置为false禁用匿名用户登录；\n\n\n\n运行下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-deployment.yaml\n```\n\n\n\n### 创建service\n\n```yaml\n# grafana-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\n  namespace: monitor\n  labels:\n    app: grafana\nspec:\n\ttype: ClusterIP\n  ports:\n    - name: http\n      port: 3000\n      targetPort: 3000\n      protocol: TCP\n  selector:\n    app: grafana\n```\n\n\n\n通过下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-service.yaml\n```\n\n\n\n\n\n### 创建ingress暴露服务\n\n```yaml\n# grafana-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n   name: grafana\n   namespace: monitor\nspec:\n   rules:\n   - host: grafana.example.com\n     http:\n       paths:\n       - path: /\n         backend:\n          serviceName: grafana\n          servicePort: 3000\n```\n\n\n\n使用下面的命令创建：\n\n```bash\n$ kubectl apply -f grafana-ingress.yaml\n```\n\n\n\n在nginx上增加一个配置：\n\n```nginx\n# grafana.conf\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/grafana.example.com_access.log main;\n    error_log /var/log/nginx/grafana.example.com_error.log;\n\n    location / {\n      proxy_pass http://ingress-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n\t\t}\n\n\t\tlocation ~* /\\.(svn|git)/ {\n    \treturn 404;\n\t\t}\n}\n```\n\n\n\n检查配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n通过浏览器访问`grafana.example.com`，默认的密码为`admin/admin`，输入后修改密码即可进入grafana页面：\n\n<img src=\"grafana-index.png\" style=\"zoom:50%;\" />\n\n\n\n### 添加数据源\n\n我们的场景中，使用的是prometheus作为数据源的，所以添加一个prometheus的数据源：\n\n<img src=\"datasource.png\" style=\"zoom:50%;\" />\n\n\n\n剩下的就是添加dashboard了，可以自己根据promsql编写，也可以在 [grafana dasboard库](https://grafana.com/grafana/dashboards)找需要的模板。","slug":"k8s实践系列-部署集群监控服务","published":1,"updated":"2020-07-20T08:28:38.410Z","_id":"ckcrdkcr30000n2n06esnb29q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用node_exporter + prometheus + grafana 构建一套监控平台。</p>\n<hr>\n<h2 id=\"组件和架构\"><a href=\"#组件和架构\" class=\"headerlink\" title=\"组件和架构\"></a>组件和架构</h2><p>在这一套监控服务中，使用到了如下的一些组件：</p>\n<ul>\n<li><code>node-exporter</code>：负责采集服务器监控指标；</li>\n<li><code>prometheus</code>：负责从k8s api和node_exporter周期性获取监控指标并存储数据；</li>\n<li><code>grafana</code>：负责进行数据展示；</li>\n<li><code>alertmanager</code>：根据报警规则进行报警发送。</li>\n</ul>\n<p>组件的架构图如下图所示：</p>\n<img src= \"/img/loading.gif\" data-src=\"prometheus.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>新建一个namespace用于部署监控组件相关的服务：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">monitor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署node-exporter\"><a href=\"#部署node-exporter\" class=\"headerlink\" title=\"部署node-exporter\"></a>部署node-exporter</h2><h3 id=\"部署daemonset服务\"><a href=\"#部署daemonset服务\" class=\"headerlink\" title=\"部署daemonset服务\"></a>部署daemonset服务</h3><p>node-exporter用于采集集群节点监控资源，所以采用<code>daemonset</code>方式部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node-exporter-ds.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">'prom/node-exporter:v1.0.1'</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--path.procfs=/host/proc'</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--path.sysfs=/host/sys'</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--collector.filesystem.ignored-mount-points=^/(dev|proc|sys)($|/)'</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">            <span class=\"string\">--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--no-collector.wifi'</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9100</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">http-9100</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">400m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">30Mi</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/host/proc</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">proc</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/host/sys</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">sys</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/proc</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">proc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/sys</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">sys</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令部署node-exporter服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f node-exporter-ds.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署service\"><a href=\"#部署service\" class=\"headerlink\" title=\"部署service\"></a>部署service</h3><p>部署node-exporter service对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node-exporter-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-9100</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">9100</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">31672</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f node-exporter-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>确保服务正常启动：</p>\n<img src= \"/img/loading.gif\" data-src=\"node-exporter.png\" style=\"zoom:60%;\" />\n\n\n\n<p>node-exporter服务对外暴露了31672端口，可以通过访问node节点的31672端口测试是否能获取到metrics数据：</p>\n<img src= \"/img/loading.gif\" data-src=\"check-node.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n<h2 id=\"部署prometheus\"><a href=\"#部署prometheus\" class=\"headerlink\" title=\"部署prometheus\"></a>部署prometheus</h2><h3 id=\"创建configmap\"><a href=\"#创建configmap\" class=\"headerlink\" title=\"创建configmap\"></a>创建configmap</h3><p>通过configmap方式管理prometheus配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-configmap.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">EnsureExists</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">node_exporter</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_role]</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_role</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__address__]</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">'(.*):10250'</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">'$&#123;1&#125;:31672'</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">      <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">localhost:9090</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-apiservers</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">default;kubernetes;https</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_endpoint_port_name</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-nodes-kubelet</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-nodes-cadvisor</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">/metrics/cadvisor</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-service-endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_scrape</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(https?)</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_scheme</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__scheme__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_path</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">([^:]+)(?::\\d+)?;(\\d+)</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$1:$2</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_port</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_service_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_name</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-services</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">service</span></span><br><span class=\"line\">      <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">      <span class=\"attr\">params:</span></span><br><span class=\"line\">        <span class=\"attr\">module:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">http_2xx</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_probe</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_service_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_name</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'kubernetes-nodes'</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">kubernetes.default.svc:443</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_node_name]</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-pods</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">pod</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_path</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">([^:]+)(?::\\d+)?;(\\d+)</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$1:$2</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_port</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_pod_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_name</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_pod_name</span></span><br><span class=\"line\">    <span class=\"attr\">alerting:</span></span><br><span class=\"line\">      <span class=\"attr\">alertmanagers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">pod</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">        <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_namespace]</span></span><br><span class=\"line\">          <span class=\"attr\">regex:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">          <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_pod_label_k8s_app]</span></span><br><span class=\"line\">          <span class=\"attr\">regex:</span> <span class=\"string\">alertmanager</span></span><br><span class=\"line\">          <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_pod_container_port_number]</span></span><br><span class=\"line\">          <span class=\"attr\">regex:</span></span><br><span class=\"line\">          <span class=\"attr\">action:</span> <span class=\"string\">drop</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这个config中定义了常用的监控配置，运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-configmap.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建pvc\"><a href=\"#创建pvc\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h3><p>这里使用storageclass创建一个pvc，用于持久化存储prometheus的数据。后端的存储为nfs。（官方不建议使用nfs）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-pvc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">monitor-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus-data</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">monitor-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-pvc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"pvc.png\" style=\"zoom:60%;\" />\n\n\n\n<h3 id=\"服务授权\"><a href=\"#服务授权\" class=\"headerlink\" title=\"服务授权\"></a>服务授权</h3><p>需要对prometheus进行权限控制，因为它要从apiserver进行监控数据采集：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/metrics</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">services</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/proxy</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">nonResourceURLs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"/metrics\"</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-rbac.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">prometheus-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">prom/prometheus:v2.19.2</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"/bin/prometheus\"</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--config.file=/etc/prometheus/prometheus.yml\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--storage.tsdb.path=/prometheus\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--web.console.libraries=/etc/prometheus/console_libraries\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--web.console.templates=/etc/prometheus/consoles\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--web.enable-lifecycle\"</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">\"/prometheus\"</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">\"/etc/prometheus\"</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">prometheus-data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">prometheus-config</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令部署服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保服务正常启动：</p>\n<img src= \"/img/loading.gif\" data-src=\"check-prome.png\" style=\"zoom:60%;\" />\n\n\n\n<h3 id=\"创建service\"><a href=\"#创建service\" class=\"headerlink\" title=\"创建service\"></a>创建service</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/name:</span> <span class=\"string\">\"Prometheus\"</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建ingress暴露服务\"><a href=\"#创建ingress暴露服务\" class=\"headerlink\" title=\"创建ingress暴露服务\"></a>创建ingress暴露服务</h3><p>首先在集群中创建ingress对象资源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-ingress.yaml</span></span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    kubernetes.io/ingress.class: <span class=\"string\">\"nginx\"</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: prometheus.example.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          serviceName: prometheus</span><br><span class=\"line\">          servicePort: 9090</span><br><span class=\"line\">        path: /</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在nginx服务器上添加一个配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus.conf</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> prometheus.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> prometheus.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/prometheus.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/peometheus.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    \t<span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查nginx配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置好host通过浏览器访问<code>prometheus.example.com</code>，正产展示prometheus页面即可：</p>\n<img src= \"/img/loading.gif\" data-src=\"prometheus-web.png\" style=\"zoom:60%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"部署grafana\"><a href=\"#部署grafana\" class=\"headerlink\" title=\"部署grafana\"></a>部署grafana</h2><p>这里我是创建了一个空白的grafana服务，即不包含dashboard。可以把需要导入的dashboard作为configmap挂载到pod中，即可实现在创建服务的时候同时生成dashboard</p>\n<h3 id=\"创建pvc-1\"><a href=\"#创建pvc-1\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h3><p>使用pvc对grafana的数据进行持久化存储：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-pvc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana-data</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">monitor-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-pvc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"grafana-pvc.png\" style=\"zoom:60%;\" />\n\n\n\n<h3 id=\"创建grafana服务\"><a href=\"#创建grafana服务\" class=\"headerlink\" title=\"创建grafana服务\"></a>创建grafana服务</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">runAsGroup:</span> <span class=\"number\">472</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">472</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">472</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">grafana/grafana:7.1.0</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">grafana-core</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1000Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_DISABLE_LOGIN_FORM</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"false\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_BASIC_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_ANONYMOUS_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"false\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_ANONYMOUS_ORG_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"Main Org.\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"Admin\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">          <span class=\"comment\"># - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class=\"line\">          <span class=\"comment\">#   value: Admin</span></span><br><span class=\"line\">          <span class=\"comment\"># does not really work, because of template variables in exported dashboards:</span></span><br><span class=\"line\">          <span class=\"comment\"># - name: GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class=\"line\">          <span class=\"comment\">#   value: \"true\"</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/login</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">          <span class=\"comment\"># initialDelaySeconds: 30</span></span><br><span class=\"line\">          <span class=\"comment\"># timeoutSeconds: 1</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">grafana-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/grafana</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">grafana-persistent-storage</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">grafana-data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果想取消grafana的登录功能，则需要将：</p>\n<ul>\n<li><code>GF_AUTH_DISABLE_LOGIN_FORM</code>设置为false来启用登录表单；</li>\n<li><code>GF_AUTH_BASIC_ENABLED</code>设置为true起用认证；</li>\n<li><code>GF_AUTH_ANONYMOUS_ENABLED</code>设置为false禁用匿名用户登录；</li>\n</ul>\n<p>运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建service-1\"><a href=\"#创建service-1\" class=\"headerlink\" title=\"创建service\"></a>创建service</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">\t<span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"创建ingress暴露服务-1\"><a href=\"#创建ingress暴露服务-1\" class=\"headerlink\" title=\"创建ingress暴露服务\"></a>创建ingress暴露服务</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">grafana.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在nginx上增加一个配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana.conf</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> grafana.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> grafana.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/grafana.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/grafana.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问<code>grafana.example.com</code>，默认的密码为<code>admin/admin</code>，输入后修改密码即可进入grafana页面：</p>\n<img src= \"/img/loading.gif\" data-src=\"grafana-index.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"添加数据源\"><a href=\"#添加数据源\" class=\"headerlink\" title=\"添加数据源\"></a>添加数据源</h3><p>我们的场景中，使用的是prometheus作为数据源的，所以添加一个prometheus的数据源：</p>\n<img src= \"/img/loading.gif\" data-src=\"datasource.png\" style=\"zoom:50%;\" />\n\n\n\n<p>剩下的就是添加dashboard了，可以自己根据promsql编写，也可以在 <a href=\"https://grafana.com/grafana/dashboards\" target=\"_blank\" rel=\"noopener\">grafana dasboard库</a>找需要的模板。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用node_exporter + prometheus + grafana 构建一套监控平台。</p>\n<hr>\n<h2 id=\"组件和架构\"><a href=\"#组件和架构\" class=\"headerlink\" title=\"组件和架构\"></a>组件和架构</h2><p>在这一套监控服务中，使用到了如下的一些组件：</p>\n<ul>\n<li><code>node-exporter</code>：负责采集服务器监控指标；</li>\n<li><code>prometheus</code>：负责从k8s api和node_exporter周期性获取监控指标并存储数据；</li>\n<li><code>grafana</code>：负责进行数据展示；</li>\n<li><code>alertmanager</code>：根据报警规则进行报警发送。</li>\n</ul>\n<p>组件的架构图如下图所示：</p>\n<img src=\"prometheus.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>新建一个namespace用于部署监控组件相关的服务：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">monitor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"部署node-exporter\"><a href=\"#部署node-exporter\" class=\"headerlink\" title=\"部署node-exporter\"></a>部署node-exporter</h2><h3 id=\"部署daemonset服务\"><a href=\"#部署daemonset服务\" class=\"headerlink\" title=\"部署daemonset服务\"></a>部署daemonset服务</h3><p>node-exporter用于采集集群节点监控资源，所以采用<code>daemonset</code>方式部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node-exporter-ds.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">DaemonSet</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">'prom/node-exporter:v1.0.1'</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--path.procfs=/host/proc'</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--path.sysfs=/host/sys'</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--collector.filesystem.ignored-mount-points=^/(dev|proc|sys)($|/)'</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">            <span class=\"string\">--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">'--no-collector.wifi'</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9100</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">http-9100</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">400m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">30Mi</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/host/proc</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">proc</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/host/sys</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">sys</span></span><br><span class=\"line\">            <span class=\"attr\">readOnly:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/proc</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">proc</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/sys</span></span><br><span class=\"line\">            <span class=\"attr\">type:</span> <span class=\"string\">''</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">sys</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令部署node-exporter服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f node-exporter-ds.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署service\"><a href=\"#部署service\" class=\"headerlink\" title=\"部署service\"></a>部署service</h3><p>部署node-exporter service对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node-exporter-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node-exporter</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http-9100</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">9100</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">31672</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s-app:</span> <span class=\"string\">node-exporter</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f node-exporter-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>确保服务正常启动：</p>\n<img src=\"node-exporter.png\" style=\"zoom:60%;\" />\n\n\n\n<p>node-exporter服务对外暴露了31672端口，可以通过访问node节点的31672端口测试是否能获取到metrics数据：</p>\n<img src=\"check-node.png\" style=\"zoom:60%;\" />\n\n<br>\n\n\n\n<h2 id=\"部署prometheus\"><a href=\"#部署prometheus\" class=\"headerlink\" title=\"部署prometheus\"></a>部署prometheus</h2><h3 id=\"创建configmap\"><a href=\"#创建configmap\" class=\"headerlink\" title=\"创建configmap\"></a>创建configmap</h3><p>通过configmap方式管理prometheus配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-configmap.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus-config</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">EnsureExists</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus.yml:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">node_exporter</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_role]</span></span><br><span class=\"line\">        <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_role</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__address__]</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">'(.*):10250'</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">'$&#123;1&#125;:31672'</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">      <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">localhost:9090</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-apiservers</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">default;kubernetes;https</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_name</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_endpoint_port_name</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-nodes-kubelet</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-nodes-cadvisor</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">/metrics/cadvisor</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">insecure_skip_verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-service-endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_scrape</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(https?)</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_scheme</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__scheme__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_path</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">([^:]+)(?::\\d+)?;(\\d+)</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$1:$2</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_port</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_service_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_name</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-services</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">service</span></span><br><span class=\"line\">      <span class=\"attr\">metrics_path:</span> <span class=\"string\">/probe</span></span><br><span class=\"line\">      <span class=\"attr\">params:</span></span><br><span class=\"line\">        <span class=\"attr\">module:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">http_2xx</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_annotation_prometheus_io_probe</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">replacement:</span> <span class=\"string\">blackbox</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__param_target</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_service_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_service_name</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'kubernetes-nodes'</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">scheme:</span> <span class=\"string\">https</span></span><br><span class=\"line\">      <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">        <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">      <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_node_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">kubernetes.default.svc:443</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_node_name]</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">kubernetes-pods</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">pod</span></span><br><span class=\"line\">      <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">(.+)</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_path</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__metrics_path__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">([^:]+)(?::\\d+)?;(\\d+)</span></span><br><span class=\"line\">        <span class=\"attr\">replacement:</span> <span class=\"string\">$1:$2</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_annotation_prometheus_io_port</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">__address__</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br><span class=\"line\">        <span class=\"attr\">regex:</span> <span class=\"string\">__meta_kubernetes_pod_label_(.+)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_namespace</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_namespace</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">action:</span> <span class=\"string\">replace</span></span><br><span class=\"line\">        <span class=\"attr\">source_labels:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">__meta_kubernetes_pod_name</span></span><br><span class=\"line\">        <span class=\"attr\">target_label:</span> <span class=\"string\">kubernetes_pod_name</span></span><br><span class=\"line\">    <span class=\"attr\">alerting:</span></span><br><span class=\"line\">      <span class=\"attr\">alertmanagers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">kubernetes_sd_configs:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">pod</span></span><br><span class=\"line\">        <span class=\"attr\">tls_config:</span></span><br><span class=\"line\">          <span class=\"attr\">ca_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class=\"line\">        <span class=\"attr\">bearer_token_file:</span> <span class=\"string\">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class=\"line\">        <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_namespace]</span></span><br><span class=\"line\">          <span class=\"attr\">regex:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\">          <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_pod_label_k8s_app]</span></span><br><span class=\"line\">          <span class=\"attr\">regex:</span> <span class=\"string\">alertmanager</span></span><br><span class=\"line\">          <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_kubernetes_pod_container_port_number]</span></span><br><span class=\"line\">          <span class=\"attr\">regex:</span></span><br><span class=\"line\">          <span class=\"attr\">action:</span> <span class=\"string\">drop</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这个config中定义了常用的监控配置，运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-configmap.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建pvc\"><a href=\"#创建pvc\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h3><p>这里使用storageclass创建一个pvc，用于持久化存储prometheus的数据。后端的存储为nfs。（官方不建议使用nfs）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-pvc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">monitor-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus-data</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">monitor-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-pvc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"pvc.png\" style=\"zoom:60%;\" />\n\n\n\n<h3 id=\"服务授权\"><a href=\"#服务授权\" class=\"headerlink\" title=\"服务授权\"></a>服务授权</h3><p>需要对prometheus进行权限控制，因为它要从apiserver进行监控数据采集：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-rbac.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/metrics</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">services</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">endpoints</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">pods</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nodes/proxy</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">list</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">watch</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">configmaps</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">nonResourceURLs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"/metrics\"</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">get</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-rbac.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">prometheus-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccountName:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">prom/prometheus:v2.19.2</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"/bin/prometheus\"</span></span><br><span class=\"line\">        <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--config.file=/etc/prometheus/prometheus.yml\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--storage.tsdb.path=/prometheus\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--web.console.libraries=/etc/prometheus/console_libraries\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--web.console.templates=/etc/prometheus/consoles\"</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">\"--web.enable-lifecycle\"</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">\"/prometheus\"</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">\"/etc/prometheus\"</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">100Mi</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">prometheus-data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">prometheus-config</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令部署服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保服务正常启动：</p>\n<img src=\"check-prome.png\" style=\"zoom:60%;\" />\n\n\n\n<h3 id=\"创建service\"><a href=\"#创建service\" class=\"headerlink\" title=\"创建service\"></a>创建service</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/name:</span> <span class=\"string\">\"Prometheus\"</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/cluster-service:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">    <span class=\"attr\">addonmanager.kubernetes.io/mode:</span> <span class=\"string\">Reconcile</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">9090</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">prometheus</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建ingress暴露服务\"><a href=\"#创建ingress暴露服务\" class=\"headerlink\" title=\"创建ingress暴露服务\"></a>创建ingress暴露服务</h3><p>首先在集群中创建ingress对象资源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus-ingress.yaml</span></span><br><span class=\"line\">apiVersion: extensions/v1beta1</span><br><span class=\"line\">kind: Ingress</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: prometheus</span><br><span class=\"line\">  namespace: monitor</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    kubernetes.io/ingress.class: <span class=\"string\">\"nginx\"</span></span><br><span class=\"line\">spec:</span><br><span class=\"line\">  rules:</span><br><span class=\"line\">  - host: prometheus.example.com</span><br><span class=\"line\">    http:</span><br><span class=\"line\">      paths:</span><br><span class=\"line\">      - backend:</span><br><span class=\"line\">          serviceName: prometheus</span><br><span class=\"line\">          servicePort: 9090</span><br><span class=\"line\">        path: /</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f prometheus-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在nginx服务器上添加一个配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># prometheus.conf</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> prometheus.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> prometheus.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/prometheus.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/peometheus.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    \t<span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查nginx配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置好host通过浏览器访问<code>prometheus.example.com</code>，正产展示prometheus页面即可：</p>\n<img src=\"prometheus-web.png\" style=\"zoom:60%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"部署grafana\"><a href=\"#部署grafana\" class=\"headerlink\" title=\"部署grafana\"></a>部署grafana</h2><p>这里我是创建了一个空白的grafana服务，即不包含dashboard。可以把需要导入的dashboard作为configmap挂载到pod中，即可实现在创建服务的时候同时生成dashboard</p>\n<h3 id=\"创建pvc-1\"><a href=\"#创建pvc-1\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h3><p>使用pvc对grafana的数据进行持久化存储：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-pvc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana-data</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">monitor-storageclass</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-pvc.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"grafana-pvc.png\" style=\"zoom:60%;\" />\n\n\n\n<h3 id=\"创建grafana服务\"><a href=\"#创建grafana服务\" class=\"headerlink\" title=\"创建grafana服务\"></a>创建grafana服务</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">runAsGroup:</span> <span class=\"number\">472</span></span><br><span class=\"line\">        <span class=\"attr\">runAsUser:</span> <span class=\"number\">472</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">472</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">grafana/grafana:7.1.0</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">grafana-core</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">1000m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">1000Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">200m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_DISABLE_LOGIN_FORM</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"false\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_BASIC_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_ANONYMOUS_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"false\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_ANONYMOUS_ORG_NAME</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"Main Org.\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"Admin\"</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">          <span class=\"comment\"># - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class=\"line\">          <span class=\"comment\">#   value: Admin</span></span><br><span class=\"line\">          <span class=\"comment\"># does not really work, because of template variables in exported dashboards:</span></span><br><span class=\"line\">          <span class=\"comment\"># - name: GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class=\"line\">          <span class=\"comment\">#   value: \"true\"</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/login</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">          <span class=\"comment\"># initialDelaySeconds: 30</span></span><br><span class=\"line\">          <span class=\"comment\"># timeoutSeconds: 1</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">grafana-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/grafana</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">grafana-persistent-storage</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">grafana-data</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果想取消grafana的登录功能，则需要将：</p>\n<ul>\n<li><code>GF_AUTH_DISABLE_LOGIN_FORM</code>设置为false来启用登录表单；</li>\n<li><code>GF_AUTH_BASIC_ENABLED</code>设置为true起用认证；</li>\n<li><code>GF_AUTH_ANONYMOUS_ENABLED</code>设置为false禁用匿名用户登录；</li>\n</ul>\n<p>运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建service-1\"><a href=\"#创建service-1\" class=\"headerlink\" title=\"创建service\"></a>创建service</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">\t<span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">grafana</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"创建ingress暴露服务-1\"><a href=\"#创建ingress暴露服务-1\" class=\"headerlink\" title=\"创建ingress暴露服务\"></a>创建ingress暴露服务</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">   <span class=\"attr\">namespace:</span> <span class=\"string\">monitor</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">   <span class=\"attr\">rules:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">grafana.example.com</span></span><br><span class=\"line\">     <span class=\"attr\">http:</span></span><br><span class=\"line\">       <span class=\"attr\">paths:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br><span class=\"line\">         <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">grafana</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f grafana-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在nginx上增加一个配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># grafana.conf</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> grafana.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> grafana.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/grafana.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/grafana.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://ingress-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">    \t<span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问<code>grafana.example.com</code>，默认的密码为<code>admin/admin</code>，输入后修改密码即可进入grafana页面：</p>\n<img src=\"grafana-index.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"添加数据源\"><a href=\"#添加数据源\" class=\"headerlink\" title=\"添加数据源\"></a>添加数据源</h3><p>我们的场景中，使用的是prometheus作为数据源的，所以添加一个prometheus的数据源：</p>\n<img src=\"datasource.png\" style=\"zoom:50%;\" />\n\n\n\n<p>剩下的就是添加dashboard了，可以自己根据promsql编写，也可以在 <a href=\"https://grafana.com/grafana/dashboards\" target=\"_blank\" rel=\"noopener\">grafana dasboard库</a>找需要的模板。</p>\n"},{"title":"Ansible安装配置","date":"2020-07-19T04:03:53.000Z","description":"ansible介绍和安装配置","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595141641851&di=f7535d2ca33c2d72c7883c7101c85142&imgtype=0&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D722752994%2C888024066%26fm%3D214%26gp%3D0.jpg","_content":"\n\n\n## ansible介绍\n\n### 什么是ansible\n\nansible是一个基于python开发的自动化运维工具，其集成了丰富的模块和组件，并且通过一个命令行工具完成对批量服务器的运维操作。\n\n> ansible依靠各种模块完成部署任务\n\n\n\nansible常见的可以完成如下的几类任务：\n\n- 系统配置；\n- 基于ansible开发持续集成和跳板机等复杂软件；\n- 编排高级的任务（基于playbook）；\n\n\n\nansible具有如下的特点：\n\n- 轻量级：基于一个命令行工具就可以完成大量的工作；\n- 简单易用：文档丰富，社区模块多；\n- 操作灵活：命令行选项丰富，playbook提供复杂且丰富的功能；\n\n\n\n### 模块和框架\n\nAnsible主要由两大模块构成：\n\n- `Paramiko`：一个纯Python实现的ssh协议库，因此，Ansible不需要再远程主机上安装client或agents，因为它是基于ssh来和远程主机通信的；\n- `PyYAML`：是YAML的Python实现，可以用于参数化Python对象，用来当做配置文件；\n\n\n\nAnsible框架主要包括 ：\n\n- 连接插件connection plugins：负责和被监测端通信。\n- host inventory：指定操作的主机，是一个配置文件里面定义监控的主机。\n- 各种核心模块、command模块、自定义模块。\n- 借助插件完成记录日志和邮件等功能。\n- playbook：剧本执行多个任务时，非必需可以让节点一次运行多个任务。\n\n\n\n### ansible架构\n\nansible的架构图如下所示：\n\n<img src=\"ansible.png\" style=\"zoom:90%;\" />\n\n\n\n- `Ansible`：Ansible核心程序。 \n- `Host Lnventory`：记录由Ansible管理的主机信息，包括端口、密码、ip等。\n- `Playbooks`：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。 \n- `Core Modules`：核心模块，来完成管理任务。先调用此中的模块，再指定`Host Lnventory`中的主机来完成管理任务。 \n- `Custom Modules`：自定义模块，完成核心模块无法完成的功能，支持多种语言。\n- `Connection Plugins`：连接插件，做通信使用。\n\n\n\n### 工作机制\n\n<img src=\"work.png\" style=\"zoom:90%;\" />\n\nAnsible在管理节点（Control Node）将Ansible模块通过SSH协议等推送到管理端执行，执行完成后自动删除。\n\n\n\n<br>\n\n\n\n## 安装ansible\n\nansible使用的时候依赖python环境必须大于2.7，否则有些模块会报错。\n\n\n\n### 依赖安装\n\n```bash\n$ yum install -y epel-release libselinux-python\n```\n\n\n\n### 【方式一】使用pip安装\n\nansible本身使用python开发，所以可以直接使用pip进行ansible的安装：\n\n```bash\n$ pip install ansible\n```\n\n\n\n\n\n### 【方式二】使用yum安装\n\n直接使用yum方式安装ansible即可：\n\n```bash\n$ yum install -y ansible\n```\n\n\n\n### 安装的相关文件\n\n-  `/etc/ansible/ansible.cfg`：主配置文件；\n- `/etc/ansible/hosts`：主机定义文件；\n- `/usr/share/ansible/plugins`：插件目录；\n\n\n\n<br>\n\n\n\n## 配置ansible\n\n\n\n### 添加主机列表\n\n需要在`/etc/ansible/hosts` 中定义需要管理的主机列表，例如：\n\n```\n[master]\n10.8.138.5\n10.8.138.6\n10.8.138.10\n```\n\n\n\n其中，`[master]`表示一个分组，在配置文件中可以有多个分组；分组下面的服务器就是待管理的机器列表。\n\n\n\n### 设置免秘钥登录\n\nansible是基于ssh进行管理的，且需要让ansible控制服务器和其他待管理的服务器间实现免秘钥登录：\n\n```bash\n# 如果本机没有秘钥（,ssh/目录下为空），则重新生成\n$ ssh-keygen\n\n# 发送秘钥到远程主机\n$ ssh-copy-id root@10.8.138.5\n```\n\n\n\n### 联通测试\n\n使用`ping`模块测试是否能够联通：\n\n```bash\n$ ansible master -m ping --user=root\n```\n\n- `master`指定需要进行操作的分组，也可以是单个服务器；\n- `-m`指定使用的模块，这里使用的是ping模块；\n- `--user`指定远程连接使用的用户，这里用的是root用户；\n\n\n\n<img src=\"testping.png\" style=\"zoom:40%;\" />\n\n> 可以看到都是success状态，说明ansible是正常工作的。\n\n\n\n<br>\n\n\n\n","source":"_posts/Ansible安装配置.md","raw":"---\ntitle: Ansible安装配置\ndate: 2020-07-19 12:03:53\ntags:\n- 自动化运维工具\n- ansible\ncategories:\n- 自动化运维\n- Ansible\ndescription: ansible介绍和安装配置\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595141641851&di=f7535d2ca33c2d72c7883c7101c85142&imgtype=0&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D722752994%2C888024066%26fm%3D214%26gp%3D0.jpg\n---\n\n\n\n## ansible介绍\n\n### 什么是ansible\n\nansible是一个基于python开发的自动化运维工具，其集成了丰富的模块和组件，并且通过一个命令行工具完成对批量服务器的运维操作。\n\n> ansible依靠各种模块完成部署任务\n\n\n\nansible常见的可以完成如下的几类任务：\n\n- 系统配置；\n- 基于ansible开发持续集成和跳板机等复杂软件；\n- 编排高级的任务（基于playbook）；\n\n\n\nansible具有如下的特点：\n\n- 轻量级：基于一个命令行工具就可以完成大量的工作；\n- 简单易用：文档丰富，社区模块多；\n- 操作灵活：命令行选项丰富，playbook提供复杂且丰富的功能；\n\n\n\n### 模块和框架\n\nAnsible主要由两大模块构成：\n\n- `Paramiko`：一个纯Python实现的ssh协议库，因此，Ansible不需要再远程主机上安装client或agents，因为它是基于ssh来和远程主机通信的；\n- `PyYAML`：是YAML的Python实现，可以用于参数化Python对象，用来当做配置文件；\n\n\n\nAnsible框架主要包括 ：\n\n- 连接插件connection plugins：负责和被监测端通信。\n- host inventory：指定操作的主机，是一个配置文件里面定义监控的主机。\n- 各种核心模块、command模块、自定义模块。\n- 借助插件完成记录日志和邮件等功能。\n- playbook：剧本执行多个任务时，非必需可以让节点一次运行多个任务。\n\n\n\n### ansible架构\n\nansible的架构图如下所示：\n\n<img src=\"ansible.png\" style=\"zoom:90%;\" />\n\n\n\n- `Ansible`：Ansible核心程序。 \n- `Host Lnventory`：记录由Ansible管理的主机信息，包括端口、密码、ip等。\n- `Playbooks`：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。 \n- `Core Modules`：核心模块，来完成管理任务。先调用此中的模块，再指定`Host Lnventory`中的主机来完成管理任务。 \n- `Custom Modules`：自定义模块，完成核心模块无法完成的功能，支持多种语言。\n- `Connection Plugins`：连接插件，做通信使用。\n\n\n\n### 工作机制\n\n<img src=\"work.png\" style=\"zoom:90%;\" />\n\nAnsible在管理节点（Control Node）将Ansible模块通过SSH协议等推送到管理端执行，执行完成后自动删除。\n\n\n\n<br>\n\n\n\n## 安装ansible\n\nansible使用的时候依赖python环境必须大于2.7，否则有些模块会报错。\n\n\n\n### 依赖安装\n\n```bash\n$ yum install -y epel-release libselinux-python\n```\n\n\n\n### 【方式一】使用pip安装\n\nansible本身使用python开发，所以可以直接使用pip进行ansible的安装：\n\n```bash\n$ pip install ansible\n```\n\n\n\n\n\n### 【方式二】使用yum安装\n\n直接使用yum方式安装ansible即可：\n\n```bash\n$ yum install -y ansible\n```\n\n\n\n### 安装的相关文件\n\n-  `/etc/ansible/ansible.cfg`：主配置文件；\n- `/etc/ansible/hosts`：主机定义文件；\n- `/usr/share/ansible/plugins`：插件目录；\n\n\n\n<br>\n\n\n\n## 配置ansible\n\n\n\n### 添加主机列表\n\n需要在`/etc/ansible/hosts` 中定义需要管理的主机列表，例如：\n\n```\n[master]\n10.8.138.5\n10.8.138.6\n10.8.138.10\n```\n\n\n\n其中，`[master]`表示一个分组，在配置文件中可以有多个分组；分组下面的服务器就是待管理的机器列表。\n\n\n\n### 设置免秘钥登录\n\nansible是基于ssh进行管理的，且需要让ansible控制服务器和其他待管理的服务器间实现免秘钥登录：\n\n```bash\n# 如果本机没有秘钥（,ssh/目录下为空），则重新生成\n$ ssh-keygen\n\n# 发送秘钥到远程主机\n$ ssh-copy-id root@10.8.138.5\n```\n\n\n\n### 联通测试\n\n使用`ping`模块测试是否能够联通：\n\n```bash\n$ ansible master -m ping --user=root\n```\n\n- `master`指定需要进行操作的分组，也可以是单个服务器；\n- `-m`指定使用的模块，这里使用的是ping模块；\n- `--user`指定远程连接使用的用户，这里用的是root用户；\n\n\n\n<img src=\"testping.png\" style=\"zoom:40%;\" />\n\n> 可以看到都是success状态，说明ansible是正常工作的。\n\n\n\n<br>\n\n\n\n","slug":"Ansible安装配置","published":1,"updated":"2020-07-19T04:59:35.737Z","_id":"ckcsklvc10000sojd5qtb57sq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"ansible介绍\"><a href=\"#ansible介绍\" class=\"headerlink\" title=\"ansible介绍\"></a>ansible介绍</h2><h3 id=\"什么是ansible\"><a href=\"#什么是ansible\" class=\"headerlink\" title=\"什么是ansible\"></a>什么是ansible</h3><p>ansible是一个基于python开发的自动化运维工具，其集成了丰富的模块和组件，并且通过一个命令行工具完成对批量服务器的运维操作。</p>\n<blockquote>\n<p>ansible依靠各种模块完成部署任务</p>\n</blockquote>\n<p>ansible常见的可以完成如下的几类任务：</p>\n<ul>\n<li>系统配置；</li>\n<li>基于ansible开发持续集成和跳板机等复杂软件；</li>\n<li>编排高级的任务（基于playbook）；</li>\n</ul>\n<p>ansible具有如下的特点：</p>\n<ul>\n<li>轻量级：基于一个命令行工具就可以完成大量的工作；</li>\n<li>简单易用：文档丰富，社区模块多；</li>\n<li>操作灵活：命令行选项丰富，playbook提供复杂且丰富的功能；</li>\n</ul>\n<h3 id=\"模块和框架\"><a href=\"#模块和框架\" class=\"headerlink\" title=\"模块和框架\"></a>模块和框架</h3><p>Ansible主要由两大模块构成：</p>\n<ul>\n<li><code>Paramiko</code>：一个纯Python实现的ssh协议库，因此，Ansible不需要再远程主机上安装client或agents，因为它是基于ssh来和远程主机通信的；</li>\n<li><code>PyYAML</code>：是YAML的Python实现，可以用于参数化Python对象，用来当做配置文件；</li>\n</ul>\n<p>Ansible框架主要包括 ：</p>\n<ul>\n<li>连接插件connection plugins：负责和被监测端通信。</li>\n<li>host inventory：指定操作的主机，是一个配置文件里面定义监控的主机。</li>\n<li>各种核心模块、command模块、自定义模块。</li>\n<li>借助插件完成记录日志和邮件等功能。</li>\n<li>playbook：剧本执行多个任务时，非必需可以让节点一次运行多个任务。</li>\n</ul>\n<h3 id=\"ansible架构\"><a href=\"#ansible架构\" class=\"headerlink\" title=\"ansible架构\"></a>ansible架构</h3><p>ansible的架构图如下所示：</p>\n<img src= \"/img/loading.gif\" data-src=\"ansible.png\" style=\"zoom:90%;\" />\n\n\n\n<ul>\n<li><code>Ansible</code>：Ansible核心程序。 </li>\n<li><code>Host Lnventory</code>：记录由Ansible管理的主机信息，包括端口、密码、ip等。</li>\n<li><code>Playbooks</code>：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。 </li>\n<li><code>Core Modules</code>：核心模块，来完成管理任务。先调用此中的模块，再指定<code>Host Lnventory</code>中的主机来完成管理任务。 </li>\n<li><code>Custom Modules</code>：自定义模块，完成核心模块无法完成的功能，支持多种语言。</li>\n<li><code>Connection Plugins</code>：连接插件，做通信使用。</li>\n</ul>\n<h3 id=\"工作机制\"><a href=\"#工作机制\" class=\"headerlink\" title=\"工作机制\"></a>工作机制</h3><img src= \"/img/loading.gif\" data-src=\"work.png\" style=\"zoom:90%;\" />\n\n<p>Ansible在管理节点（Control Node）将Ansible模块通过SSH协议等推送到管理端执行，执行完成后自动删除。</p>\n<br>\n\n\n\n<h2 id=\"安装ansible\"><a href=\"#安装ansible\" class=\"headerlink\" title=\"安装ansible\"></a>安装ansible</h2><p>ansible使用的时候依赖python环境必须大于2.7，否则有些模块会报错。</p>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release libselinux-python</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"【方式一】使用pip安装\"><a href=\"#【方式一】使用pip安装\" class=\"headerlink\" title=\"【方式一】使用pip安装\"></a>【方式一】使用pip安装</h3><p>ansible本身使用python开发，所以可以直接使用pip进行ansible的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ansible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"【方式二】使用yum安装\"><a href=\"#【方式二】使用yum安装\" class=\"headerlink\" title=\"【方式二】使用yum安装\"></a>【方式二】使用yum安装</h3><p>直接使用yum方式安装ansible即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y ansible</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装的相关文件\"><a href=\"#安装的相关文件\" class=\"headerlink\" title=\"安装的相关文件\"></a>安装的相关文件</h3><ul>\n<li><code>/etc/ansible/ansible.cfg</code>：主配置文件；</li>\n<li><code>/etc/ansible/hosts</code>：主机定义文件；</li>\n<li><code>/usr/share/ansible/plugins</code>：插件目录；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"配置ansible\"><a href=\"#配置ansible\" class=\"headerlink\" title=\"配置ansible\"></a>配置ansible</h2><h3 id=\"添加主机列表\"><a href=\"#添加主机列表\" class=\"headerlink\" title=\"添加主机列表\"></a>添加主机列表</h3><p>需要在<code>/etc/ansible/hosts</code> 中定义需要管理的主机列表，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[master]</span><br><span class=\"line\">10.8.138.5</span><br><span class=\"line\">10.8.138.6</span><br><span class=\"line\">10.8.138.10</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中，<code>[master]</code>表示一个分组，在配置文件中可以有多个分组；分组下面的服务器就是待管理的机器列表。</p>\n<h3 id=\"设置免秘钥登录\"><a href=\"#设置免秘钥登录\" class=\"headerlink\" title=\"设置免秘钥登录\"></a>设置免秘钥登录</h3><p>ansible是基于ssh进行管理的，且需要让ansible控制服务器和其他待管理的服务器间实现免秘钥登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果本机没有秘钥（,ssh/目录下为空），则重新生成</span></span><br><span class=\"line\">$ ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送秘钥到远程主机</span></span><br><span class=\"line\">$ ssh-copy-id root@10.8.138.5</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"联通测试\"><a href=\"#联通测试\" class=\"headerlink\" title=\"联通测试\"></a>联通测试</h3><p>使用<code>ping</code>模块测试是否能够联通：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible master -m ping --user=root</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>master</code>指定需要进行操作的分组，也可以是单个服务器；</li>\n<li><code>-m</code>指定使用的模块，这里使用的是ping模块；</li>\n<li><code>--user</code>指定远程连接使用的用户，这里用的是root用户；</li>\n</ul>\n<img src= \"/img/loading.gif\" data-src=\"testping.png\" style=\"zoom:40%;\" />\n\n<blockquote>\n<p>可以看到都是success状态，说明ansible是正常工作的。</p>\n</blockquote>\n<br>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ansible介绍\"><a href=\"#ansible介绍\" class=\"headerlink\" title=\"ansible介绍\"></a>ansible介绍</h2><h3 id=\"什么是ansible\"><a href=\"#什么是ansible\" class=\"headerlink\" title=\"什么是ansible\"></a>什么是ansible</h3><p>ansible是一个基于python开发的自动化运维工具，其集成了丰富的模块和组件，并且通过一个命令行工具完成对批量服务器的运维操作。</p>\n<blockquote>\n<p>ansible依靠各种模块完成部署任务</p>\n</blockquote>\n<p>ansible常见的可以完成如下的几类任务：</p>\n<ul>\n<li>系统配置；</li>\n<li>基于ansible开发持续集成和跳板机等复杂软件；</li>\n<li>编排高级的任务（基于playbook）；</li>\n</ul>\n<p>ansible具有如下的特点：</p>\n<ul>\n<li>轻量级：基于一个命令行工具就可以完成大量的工作；</li>\n<li>简单易用：文档丰富，社区模块多；</li>\n<li>操作灵活：命令行选项丰富，playbook提供复杂且丰富的功能；</li>\n</ul>\n<h3 id=\"模块和框架\"><a href=\"#模块和框架\" class=\"headerlink\" title=\"模块和框架\"></a>模块和框架</h3><p>Ansible主要由两大模块构成：</p>\n<ul>\n<li><code>Paramiko</code>：一个纯Python实现的ssh协议库，因此，Ansible不需要再远程主机上安装client或agents，因为它是基于ssh来和远程主机通信的；</li>\n<li><code>PyYAML</code>：是YAML的Python实现，可以用于参数化Python对象，用来当做配置文件；</li>\n</ul>\n<p>Ansible框架主要包括 ：</p>\n<ul>\n<li>连接插件connection plugins：负责和被监测端通信。</li>\n<li>host inventory：指定操作的主机，是一个配置文件里面定义监控的主机。</li>\n<li>各种核心模块、command模块、自定义模块。</li>\n<li>借助插件完成记录日志和邮件等功能。</li>\n<li>playbook：剧本执行多个任务时，非必需可以让节点一次运行多个任务。</li>\n</ul>\n<h3 id=\"ansible架构\"><a href=\"#ansible架构\" class=\"headerlink\" title=\"ansible架构\"></a>ansible架构</h3><p>ansible的架构图如下所示：</p>\n<img src=\"ansible.png\" style=\"zoom:90%;\" />\n\n\n\n<ul>\n<li><code>Ansible</code>：Ansible核心程序。 </li>\n<li><code>Host Lnventory</code>：记录由Ansible管理的主机信息，包括端口、密码、ip等。</li>\n<li><code>Playbooks</code>：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。 </li>\n<li><code>Core Modules</code>：核心模块，来完成管理任务。先调用此中的模块，再指定<code>Host Lnventory</code>中的主机来完成管理任务。 </li>\n<li><code>Custom Modules</code>：自定义模块，完成核心模块无法完成的功能，支持多种语言。</li>\n<li><code>Connection Plugins</code>：连接插件，做通信使用。</li>\n</ul>\n<h3 id=\"工作机制\"><a href=\"#工作机制\" class=\"headerlink\" title=\"工作机制\"></a>工作机制</h3><img src=\"work.png\" style=\"zoom:90%;\" />\n\n<p>Ansible在管理节点（Control Node）将Ansible模块通过SSH协议等推送到管理端执行，执行完成后自动删除。</p>\n<br>\n\n\n\n<h2 id=\"安装ansible\"><a href=\"#安装ansible\" class=\"headerlink\" title=\"安装ansible\"></a>安装ansible</h2><p>ansible使用的时候依赖python环境必须大于2.7，否则有些模块会报错。</p>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release libselinux-python</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"【方式一】使用pip安装\"><a href=\"#【方式一】使用pip安装\" class=\"headerlink\" title=\"【方式一】使用pip安装\"></a>【方式一】使用pip安装</h3><p>ansible本身使用python开发，所以可以直接使用pip进行ansible的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install ansible</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"【方式二】使用yum安装\"><a href=\"#【方式二】使用yum安装\" class=\"headerlink\" title=\"【方式二】使用yum安装\"></a>【方式二】使用yum安装</h3><p>直接使用yum方式安装ansible即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y ansible</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装的相关文件\"><a href=\"#安装的相关文件\" class=\"headerlink\" title=\"安装的相关文件\"></a>安装的相关文件</h3><ul>\n<li><code>/etc/ansible/ansible.cfg</code>：主配置文件；</li>\n<li><code>/etc/ansible/hosts</code>：主机定义文件；</li>\n<li><code>/usr/share/ansible/plugins</code>：插件目录；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"配置ansible\"><a href=\"#配置ansible\" class=\"headerlink\" title=\"配置ansible\"></a>配置ansible</h2><h3 id=\"添加主机列表\"><a href=\"#添加主机列表\" class=\"headerlink\" title=\"添加主机列表\"></a>添加主机列表</h3><p>需要在<code>/etc/ansible/hosts</code> 中定义需要管理的主机列表，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[master]</span><br><span class=\"line\">10.8.138.5</span><br><span class=\"line\">10.8.138.6</span><br><span class=\"line\">10.8.138.10</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中，<code>[master]</code>表示一个分组，在配置文件中可以有多个分组；分组下面的服务器就是待管理的机器列表。</p>\n<h3 id=\"设置免秘钥登录\"><a href=\"#设置免秘钥登录\" class=\"headerlink\" title=\"设置免秘钥登录\"></a>设置免秘钥登录</h3><p>ansible是基于ssh进行管理的，且需要让ansible控制服务器和其他待管理的服务器间实现免秘钥登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果本机没有秘钥（,ssh/目录下为空），则重新生成</span></span><br><span class=\"line\">$ ssh-keygen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送秘钥到远程主机</span></span><br><span class=\"line\">$ ssh-copy-id root@10.8.138.5</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"联通测试\"><a href=\"#联通测试\" class=\"headerlink\" title=\"联通测试\"></a>联通测试</h3><p>使用<code>ping</code>模块测试是否能够联通：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible master -m ping --user=root</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>master</code>指定需要进行操作的分组，也可以是单个服务器；</li>\n<li><code>-m</code>指定使用的模块，这里使用的是ping模块；</li>\n<li><code>--user</code>指定远程连接使用的用户，这里用的是root用户；</li>\n</ul>\n<img src=\"testping.png\" style=\"zoom:40%;\" />\n\n<blockquote>\n<p>可以看到都是success状态，说明ansible是正常工作的。</p>\n</blockquote>\n<br>\n\n\n\n"},{"title":"Ansible常用配置","date":"2020-07-19T04:44:41.000Z","description":"ansible主配置文件和主机配置文件中的常用参数","cover":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=80183688,2043592912&fm=26&gp=0.jpg","_content":"\n\n\n## 主配置文件常用参数\n\nansible主配置文件默认在`/etc/ansible/ansible.cfg`，其中常用的参数如下：\n\n- `inventory = /etc/ansible/hosts`：主机定义文件位置；\n- `library = /usr/share/my_modules`：ansible默认搜寻模块的位置；\n- `remote_tmp = ~/.ansible/tmp`：远程执行的临时目录； \n- `forks = 5`：在与主机通信时的默认并行进程数；\n- `poll_interval = 15`：多久回查任务的状态，当具体的poll interval 没有定义时默认是5秒；\n- `sudo_user = root`：sudo使用的默认用户，默认是root；\n- `ask_sudo_pass = True`：用来控制Ansible playbook在执行sudo时是否询问sudo密码，默认为no；\n- `ask_pass = True`：控制Ansible playbook 是否会自动默认弹出密码；\n- `transport = smart`：通信机制。默认值为`smart`；\n- `remote_port = 22`：远程SSH端口。 默认是22；\n- `module_lang = C`：模块和系统之间通信的计算机语言，默认是C语言；\n- `host_key_checking = False`：是否检查主机密钥；\n- `timeout = 10`：SSH超时时间；\n- `log_path = /var/log/ansible.log`：日志文件存放路径；\n- `module_name = command`：ansible命令执行默认的模块；\n- `private_key_file = /path/to/file`：私钥文件存储位置；\n\n\n\n<br>\n\n\n\n## 主机配置文件常用参数\n\n主机配置文件默认为`/etc/ansible/hosts`\n\n\n\n### 基本格式\n\n```\n[dbserver]    // 使用[] 进行主机分类\n172.25.254.1    // 指定iP地址\nmysql.example.com    // 指定域名\nback.mysql.com:5505  //指定ssh的端口\ntest ansible_ssh_port=5321 ansible_ssh_host=172.25.254.2 //设定ssh端口及别名为test\ndb[1...5].example.com  //支持通配符\n\n[web]\nlocalhost ansible_connection=local    // 指定连接类型为localhost\nweb1.example.com ansible_connection=ssh ansible_ssh_user=web    // 执行连接用户为web\n```\n\n\n\n### 支持的其他配置\n\n```\n# 指定主机别名对应的真实 IP\nansible_ssh_host  \n\n# 指定连接到这个主机的 ssh 端口，默认 22   \nansible_ssh_port \n\n# 指定连接到该主机上的用户\nansible_ssh_user   \n\n# sudo 密码  \nansible_sudo_pass \n\n# sudo 命令路径\nansible_sudo_exe    \n\n# 连接类型，可以是 local、ssh 或paramiko，ansible1.2 之前默认为 paramiko   \nansible_connection  \n\n# 私钥文件路径\nansible_ssh_private_key_file      \n\n# 目标系统的 shell 类型，默认为sh\nansible_shell_type   \n```\n\n","source":"_posts/Ansible常用配置.md","raw":"---\ntitle: Ansible常用配置\ndate: 2020-07-19 12:44:41\ntags:\n- 自动化运维工具\n- ansible\ncategories:\n- 自动化运维\n- Ansible\ndescription: ansible主配置文件和主机配置文件中的常用参数\ncover: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=80183688,2043592912&fm=26&gp=0.jpg\n---\n\n\n\n## 主配置文件常用参数\n\nansible主配置文件默认在`/etc/ansible/ansible.cfg`，其中常用的参数如下：\n\n- `inventory = /etc/ansible/hosts`：主机定义文件位置；\n- `library = /usr/share/my_modules`：ansible默认搜寻模块的位置；\n- `remote_tmp = ~/.ansible/tmp`：远程执行的临时目录； \n- `forks = 5`：在与主机通信时的默认并行进程数；\n- `poll_interval = 15`：多久回查任务的状态，当具体的poll interval 没有定义时默认是5秒；\n- `sudo_user = root`：sudo使用的默认用户，默认是root；\n- `ask_sudo_pass = True`：用来控制Ansible playbook在执行sudo时是否询问sudo密码，默认为no；\n- `ask_pass = True`：控制Ansible playbook 是否会自动默认弹出密码；\n- `transport = smart`：通信机制。默认值为`smart`；\n- `remote_port = 22`：远程SSH端口。 默认是22；\n- `module_lang = C`：模块和系统之间通信的计算机语言，默认是C语言；\n- `host_key_checking = False`：是否检查主机密钥；\n- `timeout = 10`：SSH超时时间；\n- `log_path = /var/log/ansible.log`：日志文件存放路径；\n- `module_name = command`：ansible命令执行默认的模块；\n- `private_key_file = /path/to/file`：私钥文件存储位置；\n\n\n\n<br>\n\n\n\n## 主机配置文件常用参数\n\n主机配置文件默认为`/etc/ansible/hosts`\n\n\n\n### 基本格式\n\n```\n[dbserver]    // 使用[] 进行主机分类\n172.25.254.1    // 指定iP地址\nmysql.example.com    // 指定域名\nback.mysql.com:5505  //指定ssh的端口\ntest ansible_ssh_port=5321 ansible_ssh_host=172.25.254.2 //设定ssh端口及别名为test\ndb[1...5].example.com  //支持通配符\n\n[web]\nlocalhost ansible_connection=local    // 指定连接类型为localhost\nweb1.example.com ansible_connection=ssh ansible_ssh_user=web    // 执行连接用户为web\n```\n\n\n\n### 支持的其他配置\n\n```\n# 指定主机别名对应的真实 IP\nansible_ssh_host  \n\n# 指定连接到这个主机的 ssh 端口，默认 22   \nansible_ssh_port \n\n# 指定连接到该主机上的用户\nansible_ssh_user   \n\n# sudo 密码  \nansible_sudo_pass \n\n# sudo 命令路径\nansible_sudo_exe    \n\n# 连接类型，可以是 local、ssh 或paramiko，ansible1.2 之前默认为 paramiko   \nansible_connection  \n\n# 私钥文件路径\nansible_ssh_private_key_file      \n\n# 目标系统的 shell 类型，默认为sh\nansible_shell_type   \n```\n\n","slug":"Ansible常用配置","published":1,"updated":"2020-07-19T04:50:17.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcslqe970000zwjdct330b1s","content":"<h2 id=\"主配置文件常用参数\"><a href=\"#主配置文件常用参数\" class=\"headerlink\" title=\"主配置文件常用参数\"></a>主配置文件常用参数</h2><p>ansible主配置文件默认在<code>/etc/ansible/ansible.cfg</code>，其中常用的参数如下：</p>\n<ul>\n<li><code>inventory = /etc/ansible/hosts</code>：主机定义文件位置；</li>\n<li><code>library = /usr/share/my_modules</code>：ansible默认搜寻模块的位置；</li>\n<li><code>remote_tmp = ~/.ansible/tmp</code>：远程执行的临时目录； </li>\n<li><code>forks = 5</code>：在与主机通信时的默认并行进程数；</li>\n<li><code>poll_interval = 15</code>：多久回查任务的状态，当具体的poll interval 没有定义时默认是5秒；</li>\n<li><code>sudo_user = root</code>：sudo使用的默认用户，默认是root；</li>\n<li><code>ask_sudo_pass = True</code>：用来控制Ansible playbook在执行sudo时是否询问sudo密码，默认为no；</li>\n<li><code>ask_pass = True</code>：控制Ansible playbook 是否会自动默认弹出密码；</li>\n<li><code>transport = smart</code>：通信机制。默认值为<code>smart</code>；</li>\n<li><code>remote_port = 22</code>：远程SSH端口。 默认是22；</li>\n<li><code>module_lang = C</code>：模块和系统之间通信的计算机语言，默认是C语言；</li>\n<li><code>host_key_checking = False</code>：是否检查主机密钥；</li>\n<li><code>timeout = 10</code>：SSH超时时间；</li>\n<li><code>log_path = /var/log/ansible.log</code>：日志文件存放路径；</li>\n<li><code>module_name = command</code>：ansible命令执行默认的模块；</li>\n<li><code>private_key_file = /path/to/file</code>：私钥文件存储位置；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"主机配置文件常用参数\"><a href=\"#主机配置文件常用参数\" class=\"headerlink\" title=\"主机配置文件常用参数\"></a>主机配置文件常用参数</h2><p>主机配置文件默认为<code>/etc/ansible/hosts</code></p>\n<h3 id=\"基本格式\"><a href=\"#基本格式\" class=\"headerlink\" title=\"基本格式\"></a>基本格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[dbserver]    &#x2F;&#x2F; 使用[] 进行主机分类</span><br><span class=\"line\">172.25.254.1    &#x2F;&#x2F; 指定iP地址</span><br><span class=\"line\">mysql.example.com    &#x2F;&#x2F; 指定域名</span><br><span class=\"line\">back.mysql.com:5505  &#x2F;&#x2F;指定ssh的端口</span><br><span class=\"line\">test ansible_ssh_port&#x3D;5321 ansible_ssh_host&#x3D;172.25.254.2 &#x2F;&#x2F;设定ssh端口及别名为test</span><br><span class=\"line\">db[1...5].example.com  &#x2F;&#x2F;支持通配符</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">localhost ansible_connection&#x3D;local    &#x2F;&#x2F; 指定连接类型为localhost</span><br><span class=\"line\">web1.example.com ansible_connection&#x3D;ssh ansible_ssh_user&#x3D;web    &#x2F;&#x2F; 执行连接用户为web</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"支持的其他配置\"><a href=\"#支持的其他配置\" class=\"headerlink\" title=\"支持的其他配置\"></a>支持的其他配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指定主机别名对应的真实 IP</span><br><span class=\"line\">ansible_ssh_host  </span><br><span class=\"line\"></span><br><span class=\"line\"># 指定连接到这个主机的 ssh 端口，默认 22   </span><br><span class=\"line\">ansible_ssh_port </span><br><span class=\"line\"></span><br><span class=\"line\"># 指定连接到该主机上的用户</span><br><span class=\"line\">ansible_ssh_user   </span><br><span class=\"line\"></span><br><span class=\"line\"># sudo 密码  </span><br><span class=\"line\">ansible_sudo_pass </span><br><span class=\"line\"></span><br><span class=\"line\"># sudo 命令路径</span><br><span class=\"line\">ansible_sudo_exe    </span><br><span class=\"line\"></span><br><span class=\"line\"># 连接类型，可以是 local、ssh 或paramiko，ansible1.2 之前默认为 paramiko   </span><br><span class=\"line\">ansible_connection  </span><br><span class=\"line\"></span><br><span class=\"line\"># 私钥文件路径</span><br><span class=\"line\">ansible_ssh_private_key_file      </span><br><span class=\"line\"></span><br><span class=\"line\"># 目标系统的 shell 类型，默认为sh</span><br><span class=\"line\">ansible_shell_type</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主配置文件常用参数\"><a href=\"#主配置文件常用参数\" class=\"headerlink\" title=\"主配置文件常用参数\"></a>主配置文件常用参数</h2><p>ansible主配置文件默认在<code>/etc/ansible/ansible.cfg</code>，其中常用的参数如下：</p>\n<ul>\n<li><code>inventory = /etc/ansible/hosts</code>：主机定义文件位置；</li>\n<li><code>library = /usr/share/my_modules</code>：ansible默认搜寻模块的位置；</li>\n<li><code>remote_tmp = ~/.ansible/tmp</code>：远程执行的临时目录； </li>\n<li><code>forks = 5</code>：在与主机通信时的默认并行进程数；</li>\n<li><code>poll_interval = 15</code>：多久回查任务的状态，当具体的poll interval 没有定义时默认是5秒；</li>\n<li><code>sudo_user = root</code>：sudo使用的默认用户，默认是root；</li>\n<li><code>ask_sudo_pass = True</code>：用来控制Ansible playbook在执行sudo时是否询问sudo密码，默认为no；</li>\n<li><code>ask_pass = True</code>：控制Ansible playbook 是否会自动默认弹出密码；</li>\n<li><code>transport = smart</code>：通信机制。默认值为<code>smart</code>；</li>\n<li><code>remote_port = 22</code>：远程SSH端口。 默认是22；</li>\n<li><code>module_lang = C</code>：模块和系统之间通信的计算机语言，默认是C语言；</li>\n<li><code>host_key_checking = False</code>：是否检查主机密钥；</li>\n<li><code>timeout = 10</code>：SSH超时时间；</li>\n<li><code>log_path = /var/log/ansible.log</code>：日志文件存放路径；</li>\n<li><code>module_name = command</code>：ansible命令执行默认的模块；</li>\n<li><code>private_key_file = /path/to/file</code>：私钥文件存储位置；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"主机配置文件常用参数\"><a href=\"#主机配置文件常用参数\" class=\"headerlink\" title=\"主机配置文件常用参数\"></a>主机配置文件常用参数</h2><p>主机配置文件默认为<code>/etc/ansible/hosts</code></p>\n<h3 id=\"基本格式\"><a href=\"#基本格式\" class=\"headerlink\" title=\"基本格式\"></a>基本格式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[dbserver]    &#x2F;&#x2F; 使用[] 进行主机分类</span><br><span class=\"line\">172.25.254.1    &#x2F;&#x2F; 指定iP地址</span><br><span class=\"line\">mysql.example.com    &#x2F;&#x2F; 指定域名</span><br><span class=\"line\">back.mysql.com:5505  &#x2F;&#x2F;指定ssh的端口</span><br><span class=\"line\">test ansible_ssh_port&#x3D;5321 ansible_ssh_host&#x3D;172.25.254.2 &#x2F;&#x2F;设定ssh端口及别名为test</span><br><span class=\"line\">db[1...5].example.com  &#x2F;&#x2F;支持通配符</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">localhost ansible_connection&#x3D;local    &#x2F;&#x2F; 指定连接类型为localhost</span><br><span class=\"line\">web1.example.com ansible_connection&#x3D;ssh ansible_ssh_user&#x3D;web    &#x2F;&#x2F; 执行连接用户为web</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"支持的其他配置\"><a href=\"#支持的其他配置\" class=\"headerlink\" title=\"支持的其他配置\"></a>支持的其他配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 指定主机别名对应的真实 IP</span><br><span class=\"line\">ansible_ssh_host  </span><br><span class=\"line\"></span><br><span class=\"line\"># 指定连接到这个主机的 ssh 端口，默认 22   </span><br><span class=\"line\">ansible_ssh_port </span><br><span class=\"line\"></span><br><span class=\"line\"># 指定连接到该主机上的用户</span><br><span class=\"line\">ansible_ssh_user   </span><br><span class=\"line\"></span><br><span class=\"line\"># sudo 密码  </span><br><span class=\"line\">ansible_sudo_pass </span><br><span class=\"line\"></span><br><span class=\"line\"># sudo 命令路径</span><br><span class=\"line\">ansible_sudo_exe    </span><br><span class=\"line\"></span><br><span class=\"line\"># 连接类型，可以是 local、ssh 或paramiko，ansible1.2 之前默认为 paramiko   </span><br><span class=\"line\">ansible_connection  </span><br><span class=\"line\"></span><br><span class=\"line\"># 私钥文件路径</span><br><span class=\"line\">ansible_ssh_private_key_file      </span><br><span class=\"line\"></span><br><span class=\"line\"># 目标系统的 shell 类型，默认为sh</span><br><span class=\"line\">ansible_shell_type</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Ansible常用模块","date":"2020-07-19T05:00:31.000Z","description":"介绍了常用模块的功能和使用方法","cover":"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3898177574,237099017&fm=26&gp=0.jpg","_content":"\n\n\n## 命令相关模块\n\n### 远程命令command模块\n\ncommand模块用于执行远程命令，但不能使用变量、管道等。\n\n```bash\n$ ansible all -m command -a 'uptime'\n```\n\n或者\n\n```bash\n$ ansible all -a 'uptime'\n```\n\n\n\n### 远程命令shell模块\n\nshell模块可移植性远程命令，支持管道等复杂命令\n\n```bash\n$ ansible all -m shell -a 'echo test | passwd --stdin user1'\n```\n\n\n\n### 脚本script模块\n\nscript模块可以将本地脚本复制到远程执行\n\n```bash\n$ ansible all -m script -a '/tmp/a.sh'\n```\n\n<br>\n\n\n\n## 文件操作相关模块\n\n### 复制文件copy模块\n\ncopy模块用于复制文件到远程主机。\n\n```bash\n# 将当前目录下的1文件复制到远程主机的/tmp下并改名为1.asb，属主为root权限640\n$ ansible all -m copy -a 'src=1 dest=/tmp/1.asb owner=root mode=640'\n\n# 将此处的信息生成为文件内容并发送到远程主机\n$ ansible all -m copy -a 'content=\"hello \\ntest\" dest=/tmp/2.asb'\n```\n\n常用参数：\n\n- src：本地源文件路径；\n- dest：远程目录绝对路径；\n- owner：属主；\n- group：属组；\n- mode：权限；\n- content：可以取代src，表示用content的内容生成文件；\n\n\n\n### 复制文件模块fetch\n\nfetch模块可以将远程服务器上的文件复制到本地\n\n```bash\n# 将服务器 10.8.138.5上/root/app.jar复制到本地\n$ ansible 10.8.138.5 -m fetch -a \"src=/root/app.jar dest=/root\"\n```\n\n常用参数：\n\n- src：远程服务器上文件路径；\n- dest：本地文件路径\n\n\n\n文件拷贝到本地，会在`dest`指定的目录下创建一个远程服务器名称的目录，在目录中再创建名为`dest`的子目录，在其下是拷贝的文件：\n\n```bash\n$ tree 10.8.138.5/\n10.8.138.5/\n└── root\n    └── app.jar\n\n1 directory, 1 file\n```\n\n\n\n### 文件属性file模块\n\nfile模块用于设置文件属性。\n\n```bash\n# 修改属主和权限\n$ ansible all -m file -a 'owner=root group=root mode=644 path=/root/test'\n\n# 创建链接\n$ ansible all -m file -a 'path=/tmp/test.link src=/root/test state=link'\n```\n\n\n\n<br>\n\n\n\n## 系统用户和组管理相关模块\n\n### 用户管理user模块\n\nuser模块用于用户账号管理。\n\n```bash\n# 增加一个用户\n$ ansible all -m user -a 'name=\"user1\"'\n\n# 删除一个用户\n$ ansible all -m user -a 'name=\"user1\" state=absent'\n```\n\n\n\n### 组管理group模块\n\ngroup模块用于管理用户组。\n\n```bash\n# 新增一个用户组\n$ ansible all -m group -a 'name=mysql gid=306 system=yes'\n\n# 新增一个用户并添加到用户组下\n$ ansible all -m user -a 'name=mysql uid=306 system=yes group=mysql'\n```\n\n\n\n常用参数：\n\n- gid：指定组id；\n- name：指定组名；\n- state：\n  - present：新增（默认）\n  - absent：移除组；\n- system：是否为系统组；\n\n\n\n<br>\n\n\n\n## 系统服务管理相关模块\n\n### 服务管理service模块\n\nservice模块用于管理服务运行状态。\n\n```bash\n$ ansible k8snode -m service -a 'enabled=true name=httpd state=started'\n```\n\n\n\n常用参数：\n\n- enabled：是否开机自启动；\n- name：指定服务名；\n- state：指定服务状态\n  - started：启动服务；\n  - stoped：停止服务；\n  - restarted：重启服务；\n- arguments：服务参数\n\n\n\n### yum模块\n\nyum模块可以安装软件包\n\n```bash\n# 安装httpd\n$ ansible all -m yum -a 'name=httpd'\n\n# 卸载httpd\n$ ansible all -m yum -a 'name=httpd state=absent'\n```\n\n常用参数：\n\n- name：程序包名，不指定版本则安装最新版；\n- state：\n  - present、latest：安装；\n  - absent：卸载；\n\n\n\n<br>\n\n\n\n\n\n## 计划任务cron模块\n\ncron模块用于指定计划任务，每一个任务必须有一个名字。\n\n```bash\n# 每10分钟执行一个echo命令。\n$ ansibel k8snode -m cron -a 'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\"'\n\n# 查看任务\n$ ansible k8snode -a 'crontab -l'\n\n# 移除一个任务 \n$ ansibel k8snode -m cron -a 'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\" state=absend'\n```\n\n\n\n常用参数：\n\n- month：指定月份；\n- minute：指定分钟；\n- job：指定任务内容；\n- day：指定天；\n- hour：指定小时；\n- weekday：指定周几；\n- state：\n  - present：新增（默认）\n  - absent：移除任务；\n\n<br>\n\n\n\n## ping模块\n\nping模块用于测试主机是否能够联通。\n\n```bash\n$ ansible all -m ping\n```\n\n<br>\n\n\n\n## setup模块\n\nsetup模块可以让远程服务器上报自己的具体信息\n\n```bash\n$ ansible all -m setup\n```\n\n\n\n<br>\n\n\n\n## hostname主机名管理模块\n\nhostname模块可以管理远程服务器的主机名\n\n```bash\n# 修改服务器主机名为testserver\n$ ansible 10.10.1.2 -m hostname -a \"name=testserver\"\n```\n\n","source":"_posts/Ansible常用模块.md","raw":"---\ntitle: Ansible常用模块\ndate: 2020-07-19 13:00:31\ntags:\n- 自动化运维工具\n- ansible\ncategories:\n- 自动化运维\n- Ansible\ndescription: 介绍了常用模块的功能和使用方法\ncover: https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3898177574,237099017&fm=26&gp=0.jpg\n---\n\n\n\n## 命令相关模块\n\n### 远程命令command模块\n\ncommand模块用于执行远程命令，但不能使用变量、管道等。\n\n```bash\n$ ansible all -m command -a 'uptime'\n```\n\n或者\n\n```bash\n$ ansible all -a 'uptime'\n```\n\n\n\n### 远程命令shell模块\n\nshell模块可移植性远程命令，支持管道等复杂命令\n\n```bash\n$ ansible all -m shell -a 'echo test | passwd --stdin user1'\n```\n\n\n\n### 脚本script模块\n\nscript模块可以将本地脚本复制到远程执行\n\n```bash\n$ ansible all -m script -a '/tmp/a.sh'\n```\n\n<br>\n\n\n\n## 文件操作相关模块\n\n### 复制文件copy模块\n\ncopy模块用于复制文件到远程主机。\n\n```bash\n# 将当前目录下的1文件复制到远程主机的/tmp下并改名为1.asb，属主为root权限640\n$ ansible all -m copy -a 'src=1 dest=/tmp/1.asb owner=root mode=640'\n\n# 将此处的信息生成为文件内容并发送到远程主机\n$ ansible all -m copy -a 'content=\"hello \\ntest\" dest=/tmp/2.asb'\n```\n\n常用参数：\n\n- src：本地源文件路径；\n- dest：远程目录绝对路径；\n- owner：属主；\n- group：属组；\n- mode：权限；\n- content：可以取代src，表示用content的内容生成文件；\n\n\n\n### 复制文件模块fetch\n\nfetch模块可以将远程服务器上的文件复制到本地\n\n```bash\n# 将服务器 10.8.138.5上/root/app.jar复制到本地\n$ ansible 10.8.138.5 -m fetch -a \"src=/root/app.jar dest=/root\"\n```\n\n常用参数：\n\n- src：远程服务器上文件路径；\n- dest：本地文件路径\n\n\n\n文件拷贝到本地，会在`dest`指定的目录下创建一个远程服务器名称的目录，在目录中再创建名为`dest`的子目录，在其下是拷贝的文件：\n\n```bash\n$ tree 10.8.138.5/\n10.8.138.5/\n└── root\n    └── app.jar\n\n1 directory, 1 file\n```\n\n\n\n### 文件属性file模块\n\nfile模块用于设置文件属性。\n\n```bash\n# 修改属主和权限\n$ ansible all -m file -a 'owner=root group=root mode=644 path=/root/test'\n\n# 创建链接\n$ ansible all -m file -a 'path=/tmp/test.link src=/root/test state=link'\n```\n\n\n\n<br>\n\n\n\n## 系统用户和组管理相关模块\n\n### 用户管理user模块\n\nuser模块用于用户账号管理。\n\n```bash\n# 增加一个用户\n$ ansible all -m user -a 'name=\"user1\"'\n\n# 删除一个用户\n$ ansible all -m user -a 'name=\"user1\" state=absent'\n```\n\n\n\n### 组管理group模块\n\ngroup模块用于管理用户组。\n\n```bash\n# 新增一个用户组\n$ ansible all -m group -a 'name=mysql gid=306 system=yes'\n\n# 新增一个用户并添加到用户组下\n$ ansible all -m user -a 'name=mysql uid=306 system=yes group=mysql'\n```\n\n\n\n常用参数：\n\n- gid：指定组id；\n- name：指定组名；\n- state：\n  - present：新增（默认）\n  - absent：移除组；\n- system：是否为系统组；\n\n\n\n<br>\n\n\n\n## 系统服务管理相关模块\n\n### 服务管理service模块\n\nservice模块用于管理服务运行状态。\n\n```bash\n$ ansible k8snode -m service -a 'enabled=true name=httpd state=started'\n```\n\n\n\n常用参数：\n\n- enabled：是否开机自启动；\n- name：指定服务名；\n- state：指定服务状态\n  - started：启动服务；\n  - stoped：停止服务；\n  - restarted：重启服务；\n- arguments：服务参数\n\n\n\n### yum模块\n\nyum模块可以安装软件包\n\n```bash\n# 安装httpd\n$ ansible all -m yum -a 'name=httpd'\n\n# 卸载httpd\n$ ansible all -m yum -a 'name=httpd state=absent'\n```\n\n常用参数：\n\n- name：程序包名，不指定版本则安装最新版；\n- state：\n  - present、latest：安装；\n  - absent：卸载；\n\n\n\n<br>\n\n\n\n\n\n## 计划任务cron模块\n\ncron模块用于指定计划任务，每一个任务必须有一个名字。\n\n```bash\n# 每10分钟执行一个echo命令。\n$ ansibel k8snode -m cron -a 'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\"'\n\n# 查看任务\n$ ansible k8snode -a 'crontab -l'\n\n# 移除一个任务 \n$ ansibel k8snode -m cron -a 'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\" state=absend'\n```\n\n\n\n常用参数：\n\n- month：指定月份；\n- minute：指定分钟；\n- job：指定任务内容；\n- day：指定天；\n- hour：指定小时；\n- weekday：指定周几；\n- state：\n  - present：新增（默认）\n  - absent：移除任务；\n\n<br>\n\n\n\n## ping模块\n\nping模块用于测试主机是否能够联通。\n\n```bash\n$ ansible all -m ping\n```\n\n<br>\n\n\n\n## setup模块\n\nsetup模块可以让远程服务器上报自己的具体信息\n\n```bash\n$ ansible all -m setup\n```\n\n\n\n<br>\n\n\n\n## hostname主机名管理模块\n\nhostname模块可以管理远程服务器的主机名\n\n```bash\n# 修改服务器主机名为testserver\n$ ansible 10.10.1.2 -m hostname -a \"name=testserver\"\n```\n\n","slug":"Ansible常用模块","published":1,"updated":"2020-07-20T06:43:23.269Z","_id":"ckcsmc0fx000029jdhxa56nyi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"命令相关模块\"><a href=\"#命令相关模块\" class=\"headerlink\" title=\"命令相关模块\"></a>命令相关模块</h2><h3 id=\"远程命令command模块\"><a href=\"#远程命令command模块\" class=\"headerlink\" title=\"远程命令command模块\"></a>远程命令command模块</h3><p>command模块用于执行远程命令，但不能使用变量、管道等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m <span class=\"built_in\">command</span> -a <span class=\"string\">'uptime'</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -a <span class=\"string\">'uptime'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"远程命令shell模块\"><a href=\"#远程命令shell模块\" class=\"headerlink\" title=\"远程命令shell模块\"></a>远程命令shell模块</h3><p>shell模块可移植性远程命令，支持管道等复杂命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m shell -a <span class=\"string\">'echo test | passwd --stdin user1'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"脚本script模块\"><a href=\"#脚本script模块\" class=\"headerlink\" title=\"脚本script模块\"></a>脚本script模块</h3><p>script模块可以将本地脚本复制到远程执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m script -a <span class=\"string\">'/tmp/a.sh'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"文件操作相关模块\"><a href=\"#文件操作相关模块\" class=\"headerlink\" title=\"文件操作相关模块\"></a>文件操作相关模块</h2><h3 id=\"复制文件copy模块\"><a href=\"#复制文件copy模块\" class=\"headerlink\" title=\"复制文件copy模块\"></a>复制文件copy模块</h3><p>copy模块用于复制文件到远程主机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将当前目录下的1文件复制到远程主机的/tmp下并改名为1.asb，属主为root权限640</span></span><br><span class=\"line\">$ ansible all -m copy -a <span class=\"string\">'src=1 dest=/tmp/1.asb owner=root mode=640'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将此处的信息生成为文件内容并发送到远程主机</span></span><br><span class=\"line\">$ ansible all -m copy -a <span class=\"string\">'content=\"hello \\ntest\" dest=/tmp/2.asb'</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数：</p>\n<ul>\n<li>src：本地源文件路径；</li>\n<li>dest：远程目录绝对路径；</li>\n<li>owner：属主；</li>\n<li>group：属组；</li>\n<li>mode：权限；</li>\n<li>content：可以取代src，表示用content的内容生成文件；</li>\n</ul>\n<h3 id=\"复制文件模块fetch\"><a href=\"#复制文件模块fetch\" class=\"headerlink\" title=\"复制文件模块fetch\"></a>复制文件模块fetch</h3><p>fetch模块可以将远程服务器上的文件复制到本地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将服务器 10.8.138.5上/root/app.jar复制到本地</span></span><br><span class=\"line\">$ ansible 10.8.138.5 -m fetch -a <span class=\"string\">\"src=/root/app.jar dest=/root\"</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数：</p>\n<ul>\n<li>src：远程服务器上文件路径；</li>\n<li>dest：本地文件路径</li>\n</ul>\n<p>文件拷贝到本地，会在<code>dest</code>指定的目录下创建一个远程服务器名称的目录，在目录中再创建名为<code>dest</code>的子目录，在其下是拷贝的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree 10.8.138.5/</span><br><span class=\"line\">10.8.138.5/</span><br><span class=\"line\">└── root</span><br><span class=\"line\">    └── app.jar</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 1 file</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文件属性file模块\"><a href=\"#文件属性file模块\" class=\"headerlink\" title=\"文件属性file模块\"></a>文件属性file模块</h3><p>file模块用于设置文件属性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改属主和权限</span></span><br><span class=\"line\">$ ansible all -m file -a <span class=\"string\">'owner=root group=root mode=644 path=/root/test'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建链接</span></span><br><span class=\"line\">$ ansible all -m file -a <span class=\"string\">'path=/tmp/test.link src=/root/test state=link'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"系统用户和组管理相关模块\"><a href=\"#系统用户和组管理相关模块\" class=\"headerlink\" title=\"系统用户和组管理相关模块\"></a>系统用户和组管理相关模块</h2><h3 id=\"用户管理user模块\"><a href=\"#用户管理user模块\" class=\"headerlink\" title=\"用户管理user模块\"></a>用户管理user模块</h3><p>user模块用于用户账号管理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加一个用户</span></span><br><span class=\"line\">$ ansible all -m user -a <span class=\"string\">'name=\"user1\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个用户</span></span><br><span class=\"line\">$ ansible all -m user -a <span class=\"string\">'name=\"user1\" state=absent'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"组管理group模块\"><a href=\"#组管理group模块\" class=\"headerlink\" title=\"组管理group模块\"></a>组管理group模块</h3><p>group模块用于管理用户组。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新增一个用户组</span></span><br><span class=\"line\">$ ansible all -m group -a <span class=\"string\">'name=mysql gid=306 system=yes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新增一个用户并添加到用户组下</span></span><br><span class=\"line\">$ ansible all -m user -a <span class=\"string\">'name=mysql uid=306 system=yes group=mysql'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用参数：</p>\n<ul>\n<li>gid：指定组id；</li>\n<li>name：指定组名；</li>\n<li>state：<ul>\n<li>present：新增（默认）</li>\n<li>absent：移除组；</li>\n</ul>\n</li>\n<li>system：是否为系统组；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"系统服务管理相关模块\"><a href=\"#系统服务管理相关模块\" class=\"headerlink\" title=\"系统服务管理相关模块\"></a>系统服务管理相关模块</h2><h3 id=\"服务管理service模块\"><a href=\"#服务管理service模块\" class=\"headerlink\" title=\"服务管理service模块\"></a>服务管理service模块</h3><p>service模块用于管理服务运行状态。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible k8snode -m service -a <span class=\"string\">'enabled=true name=httpd state=started'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用参数：</p>\n<ul>\n<li>enabled：是否开机自启动；</li>\n<li>name：指定服务名；</li>\n<li>state：指定服务状态<ul>\n<li>started：启动服务；</li>\n<li>stoped：停止服务；</li>\n<li>restarted：重启服务；</li>\n</ul>\n</li>\n<li>arguments：服务参数</li>\n</ul>\n<h3 id=\"yum模块\"><a href=\"#yum模块\" class=\"headerlink\" title=\"yum模块\"></a>yum模块</h3><p>yum模块可以安装软件包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装httpd</span></span><br><span class=\"line\">$ ansible all -m yum -a <span class=\"string\">'name=httpd'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载httpd</span></span><br><span class=\"line\">$ ansible all -m yum -a <span class=\"string\">'name=httpd state=absent'</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数：</p>\n<ul>\n<li>name：程序包名，不指定版本则安装最新版；</li>\n<li>state：<ul>\n<li>present、latest：安装；</li>\n<li>absent：卸载；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n\n\n\n\n<h2 id=\"计划任务cron模块\"><a href=\"#计划任务cron模块\" class=\"headerlink\" title=\"计划任务cron模块\"></a>计划任务cron模块</h2><p>cron模块用于指定计划任务，每一个任务必须有一个名字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每10分钟执行一个echo命令。</span></span><br><span class=\"line\">$ ansibel k8snode -m cron -a <span class=\"string\">'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看任务</span></span><br><span class=\"line\">$ ansible k8snode -a <span class=\"string\">'crontab -l'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除一个任务 </span></span><br><span class=\"line\">$ ansibel k8snode -m cron -a <span class=\"string\">'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\" state=absend'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用参数：</p>\n<ul>\n<li>month：指定月份；</li>\n<li>minute：指定分钟；</li>\n<li>job：指定任务内容；</li>\n<li>day：指定天；</li>\n<li>hour：指定小时；</li>\n<li>weekday：指定周几；</li>\n<li>state：<ul>\n<li>present：新增（默认）</li>\n<li>absent：移除任务；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"ping模块\"><a href=\"#ping模块\" class=\"headerlink\" title=\"ping模块\"></a>ping模块</h2><p>ping模块用于测试主机是否能够联通。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m ping</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"setup模块\"><a href=\"#setup模块\" class=\"headerlink\" title=\"setup模块\"></a>setup模块</h2><p>setup模块可以让远程服务器上报自己的具体信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m setup</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"hostname主机名管理模块\"><a href=\"#hostname主机名管理模块\" class=\"headerlink\" title=\"hostname主机名管理模块\"></a>hostname主机名管理模块</h2><p>hostname模块可以管理远程服务器的主机名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改服务器主机名为testserver</span></span><br><span class=\"line\">$ ansible 10.10.1.2 -m hostname -a <span class=\"string\">\"name=testserver\"</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命令相关模块\"><a href=\"#命令相关模块\" class=\"headerlink\" title=\"命令相关模块\"></a>命令相关模块</h2><h3 id=\"远程命令command模块\"><a href=\"#远程命令command模块\" class=\"headerlink\" title=\"远程命令command模块\"></a>远程命令command模块</h3><p>command模块用于执行远程命令，但不能使用变量、管道等。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m <span class=\"built_in\">command</span> -a <span class=\"string\">'uptime'</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -a <span class=\"string\">'uptime'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"远程命令shell模块\"><a href=\"#远程命令shell模块\" class=\"headerlink\" title=\"远程命令shell模块\"></a>远程命令shell模块</h3><p>shell模块可移植性远程命令，支持管道等复杂命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m shell -a <span class=\"string\">'echo test | passwd --stdin user1'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"脚本script模块\"><a href=\"#脚本script模块\" class=\"headerlink\" title=\"脚本script模块\"></a>脚本script模块</h3><p>script模块可以将本地脚本复制到远程执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m script -a <span class=\"string\">'/tmp/a.sh'</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"文件操作相关模块\"><a href=\"#文件操作相关模块\" class=\"headerlink\" title=\"文件操作相关模块\"></a>文件操作相关模块</h2><h3 id=\"复制文件copy模块\"><a href=\"#复制文件copy模块\" class=\"headerlink\" title=\"复制文件copy模块\"></a>复制文件copy模块</h3><p>copy模块用于复制文件到远程主机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将当前目录下的1文件复制到远程主机的/tmp下并改名为1.asb，属主为root权限640</span></span><br><span class=\"line\">$ ansible all -m copy -a <span class=\"string\">'src=1 dest=/tmp/1.asb owner=root mode=640'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将此处的信息生成为文件内容并发送到远程主机</span></span><br><span class=\"line\">$ ansible all -m copy -a <span class=\"string\">'content=\"hello \\ntest\" dest=/tmp/2.asb'</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数：</p>\n<ul>\n<li>src：本地源文件路径；</li>\n<li>dest：远程目录绝对路径；</li>\n<li>owner：属主；</li>\n<li>group：属组；</li>\n<li>mode：权限；</li>\n<li>content：可以取代src，表示用content的内容生成文件；</li>\n</ul>\n<h3 id=\"复制文件模块fetch\"><a href=\"#复制文件模块fetch\" class=\"headerlink\" title=\"复制文件模块fetch\"></a>复制文件模块fetch</h3><p>fetch模块可以将远程服务器上的文件复制到本地</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将服务器 10.8.138.5上/root/app.jar复制到本地</span></span><br><span class=\"line\">$ ansible 10.8.138.5 -m fetch -a <span class=\"string\">\"src=/root/app.jar dest=/root\"</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数：</p>\n<ul>\n<li>src：远程服务器上文件路径；</li>\n<li>dest：本地文件路径</li>\n</ul>\n<p>文件拷贝到本地，会在<code>dest</code>指定的目录下创建一个远程服务器名称的目录，在目录中再创建名为<code>dest</code>的子目录，在其下是拷贝的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree 10.8.138.5/</span><br><span class=\"line\">10.8.138.5/</span><br><span class=\"line\">└── root</span><br><span class=\"line\">    └── app.jar</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 1 file</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"文件属性file模块\"><a href=\"#文件属性file模块\" class=\"headerlink\" title=\"文件属性file模块\"></a>文件属性file模块</h3><p>file模块用于设置文件属性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改属主和权限</span></span><br><span class=\"line\">$ ansible all -m file -a <span class=\"string\">'owner=root group=root mode=644 path=/root/test'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建链接</span></span><br><span class=\"line\">$ ansible all -m file -a <span class=\"string\">'path=/tmp/test.link src=/root/test state=link'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"系统用户和组管理相关模块\"><a href=\"#系统用户和组管理相关模块\" class=\"headerlink\" title=\"系统用户和组管理相关模块\"></a>系统用户和组管理相关模块</h2><h3 id=\"用户管理user模块\"><a href=\"#用户管理user模块\" class=\"headerlink\" title=\"用户管理user模块\"></a>用户管理user模块</h3><p>user模块用于用户账号管理。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加一个用户</span></span><br><span class=\"line\">$ ansible all -m user -a <span class=\"string\">'name=\"user1\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除一个用户</span></span><br><span class=\"line\">$ ansible all -m user -a <span class=\"string\">'name=\"user1\" state=absent'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"组管理group模块\"><a href=\"#组管理group模块\" class=\"headerlink\" title=\"组管理group模块\"></a>组管理group模块</h3><p>group模块用于管理用户组。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新增一个用户组</span></span><br><span class=\"line\">$ ansible all -m group -a <span class=\"string\">'name=mysql gid=306 system=yes'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新增一个用户并添加到用户组下</span></span><br><span class=\"line\">$ ansible all -m user -a <span class=\"string\">'name=mysql uid=306 system=yes group=mysql'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用参数：</p>\n<ul>\n<li>gid：指定组id；</li>\n<li>name：指定组名；</li>\n<li>state：<ul>\n<li>present：新增（默认）</li>\n<li>absent：移除组；</li>\n</ul>\n</li>\n<li>system：是否为系统组；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"系统服务管理相关模块\"><a href=\"#系统服务管理相关模块\" class=\"headerlink\" title=\"系统服务管理相关模块\"></a>系统服务管理相关模块</h2><h3 id=\"服务管理service模块\"><a href=\"#服务管理service模块\" class=\"headerlink\" title=\"服务管理service模块\"></a>服务管理service模块</h3><p>service模块用于管理服务运行状态。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible k8snode -m service -a <span class=\"string\">'enabled=true name=httpd state=started'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用参数：</p>\n<ul>\n<li>enabled：是否开机自启动；</li>\n<li>name：指定服务名；</li>\n<li>state：指定服务状态<ul>\n<li>started：启动服务；</li>\n<li>stoped：停止服务；</li>\n<li>restarted：重启服务；</li>\n</ul>\n</li>\n<li>arguments：服务参数</li>\n</ul>\n<h3 id=\"yum模块\"><a href=\"#yum模块\" class=\"headerlink\" title=\"yum模块\"></a>yum模块</h3><p>yum模块可以安装软件包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装httpd</span></span><br><span class=\"line\">$ ansible all -m yum -a <span class=\"string\">'name=httpd'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载httpd</span></span><br><span class=\"line\">$ ansible all -m yum -a <span class=\"string\">'name=httpd state=absent'</span></span><br></pre></td></tr></table></figure>\n\n<p>常用参数：</p>\n<ul>\n<li>name：程序包名，不指定版本则安装最新版；</li>\n<li>state：<ul>\n<li>present、latest：安装；</li>\n<li>absent：卸载；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n\n\n\n\n<h2 id=\"计划任务cron模块\"><a href=\"#计划任务cron模块\" class=\"headerlink\" title=\"计划任务cron模块\"></a>计划任务cron模块</h2><p>cron模块用于指定计划任务，每一个任务必须有一个名字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 每10分钟执行一个echo命令。</span></span><br><span class=\"line\">$ ansibel k8snode -m cron -a <span class=\"string\">'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\"'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看任务</span></span><br><span class=\"line\">$ ansible k8snode -a <span class=\"string\">'crontab -l'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除一个任务 </span></span><br><span class=\"line\">$ ansibel k8snode -m cron -a <span class=\"string\">'minute=\"*/10\" job=\"/bin/echo hello\" name=\"test job\" state=absend'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>常用参数：</p>\n<ul>\n<li>month：指定月份；</li>\n<li>minute：指定分钟；</li>\n<li>job：指定任务内容；</li>\n<li>day：指定天；</li>\n<li>hour：指定小时；</li>\n<li>weekday：指定周几；</li>\n<li>state：<ul>\n<li>present：新增（默认）</li>\n<li>absent：移除任务；</li>\n</ul>\n</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"ping模块\"><a href=\"#ping模块\" class=\"headerlink\" title=\"ping模块\"></a>ping模块</h2><p>ping模块用于测试主机是否能够联通。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m ping</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h2 id=\"setup模块\"><a href=\"#setup模块\" class=\"headerlink\" title=\"setup模块\"></a>setup模块</h2><p>setup模块可以让远程服务器上报自己的具体信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible all -m setup</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"hostname主机名管理模块\"><a href=\"#hostname主机名管理模块\" class=\"headerlink\" title=\"hostname主机名管理模块\"></a>hostname主机名管理模块</h2><p>hostname模块可以管理远程服务器的主机名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改服务器主机名为testserver</span></span><br><span class=\"line\">$ ansible 10.10.1.2 -m hostname -a <span class=\"string\">\"name=testserver\"</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Ansible Playbook","date":"2020-07-19T06:11:08.000Z","description":"Ansible playbook的基本原理和使用方法","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595149274046&di=36b13106c6195228a30d1ff098039ed7&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180901%2F70f9cc358e7f4e3f890316630d6fbf3f.jpeg","_content":"\n\n\n## playbook介绍\n\n### 什么是playbook\n\nansible playbook可以类比为ansible为基础的编程语言，它具有编程语言所具有的顺序结构、选择结构、循环结构，并且可以定义变量。可以通过playbook将ansible命令行编排在一起，完成一些更高级的工作。\n\n\n\n>  playbook编写方法才哟呵你给yaml格式\n\n\n\n### 功能\n\nplaybook具有如下的功能：\n\n- 编写复杂的ansible任务；\n- 控制任务执行；\n- 声明配置；\n- ......\n\n\n\n### 和命令行对比\n\n- playbook是对命令行的编排；\n- 命令行适合简单、单一、快速的任务，playbook适合复杂的任务；\n- ......\n\n\n\n<br>\n\n\n\n## playbook语法\n\n\n\n### 执行命令\n\n```yaml\n# test-playbook.yml\n- hosts: test\n  remote_user: root\n  tasks:\n  - name: Hello World\n    shell: ls /root\n```\n\n\n\n上边就是一个简单的playbook示例，其中：\n\n- `- hosts`指定了playbook运行在哪些服务器上；\n- `remote_user`指定远程运行的用户；\n- `tasks`指定运行的任务，这里是使用`shell`模块运行`ls /root`这个命令。\n\n\n\n执行playbook可以使用如下的命令：\n\n```bash\n$ ansible-playbook test-playbook.yml\n```\n\n\n\n### 定义变量\n\nplaybook变量定义可以在host文件中定义，例如：\n\n```\ntest ansible_ssh_host=192.168.1.2 ansible_ssh_port=22 ansible_ssh_user=root\n\n[node]\ntest\n```\n\n\n\n其中`test`是主机`192.168.1.2`的别名，也是一个playbook变量。\n\n\n\n变量也可以定义在yaml文件中，使用`vars`关键字，例如：\n\n```yaml\n# test-playbook.yml\n- hosts: test\n  remote_user: root\n  vars:\n    dir: /root\n  tasks:\n  - name: Hello World\n    shell: ls \"{{ dir }}\"\n```\n\n\n\n或者是：\n\n```yaml\n# test-playbook.yml\n- hosts: test\n  remote_user: root\n  vars:\n    command: /root\n  tasks:\n  - name: Hello World\n    shell: \"{{ command }}\"\n```\n\n> 引用变量的时候最好都用双引号将大括号引起来，以免报错\n\n\n\n### 系统变量\n\nansible提供了很多系统变量，可以完成根据系统的个性化操作，系统变量可以通过下面的命令查看：\n\n```bash\n$ ansible <hostname> -m setup\n```\n\n\n\n使用系统变量的时候，直接使用下面的形式即可，例如：\n\n```jinja2\n{{ ansible_devices.sda.model }}\n```\n\n\n\n###  when条件语句\n\n```yaml\n......\ntasks:\n- name: \"shutdown system\"\n  command: /sbin/shutdonw -t now\n  when: ansible_os_family == \"Debian\"\n```\n\n上边这个playbook代码段及使用了when条件语句，判断当系统为Debian时关闭系统。\n\n\n\n### bool值\n\n和其他编程语言一样，真用`true`表示，假用`false`表示：\n\n```yaml\n......\nvars:\n  change: true\ntasks:\n- shell: echo \"this is true\"\n  when: change\n- shell: echo \"this is false\"\n  when: not change\n```\n\n上边这个playbook通过变量`change`的真假来控制具体执行的任务。\n\n\n\n### with_items 循环语句\n\n```yaml\n......\ntasks:\n- name: add user\n  user: name={{ item }} state=present groups=wheel\n  with_items:\n    - user1\n    - user2\n```\n\n上边这个palybook代码段将会循环`with_items`中的内容，然后使用user模块添加对应的用户\n\n\n\n### with_nested嵌套循环\n\n```yaml\n......\ntasks:\n- name: user access control\n    mysql_user: name={{ item[0] }}\n                priv={{ item[1] }}.*:ALL\n                append_privs=yes\n                password=foo\n    with_nested:\n      - ['mike', 'admin']\n      - ['testdb', 'docdb', 'userdb']\n```\n\n上面的playbook代码段通过`with_nested`来给mysql增加用户并授权。\n\n\n\n### 有条件循环\n\n```yaml\n......\ntasks:\n- name: looping\n  command: echo {{ item }}\n  with_items: [0,1,2,3,4,5,6]\n  when: item > 5\n```\n\n上边playbook代码段通过结合`when`和`with_items`来实现有条件的循环，打印大于5的数值。\n\n\n\n<br>\n\n\n\n## paybook常用命令\n\n```bash\n# 检查语法是否正确\n$ ansible-playbook  --syntax-check  /path/to/playbook.yaml\n\n# 测试运行\n$ ansible-playbook -C /path/to/playbook.yaml\n\n# 运行playbook\n$ ansible-playbook  /path/to/playbook.yaml\n```\n\n","source":"_posts/Ansible-Playbook.md","raw":"---\ntitle: Ansible Playbook\ndate: 2020-07-19 14:11:08\ntags:\n- 自动化运维工具\n- ansible\ncategories:\n- 自动化运维\n- Ansible\ndescription: Ansible playbook的基本原理和使用方法\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595149274046&di=36b13106c6195228a30d1ff098039ed7&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180901%2F70f9cc358e7f4e3f890316630d6fbf3f.jpeg\n---\n\n\n\n## playbook介绍\n\n### 什么是playbook\n\nansible playbook可以类比为ansible为基础的编程语言，它具有编程语言所具有的顺序结构、选择结构、循环结构，并且可以定义变量。可以通过playbook将ansible命令行编排在一起，完成一些更高级的工作。\n\n\n\n>  playbook编写方法才哟呵你给yaml格式\n\n\n\n### 功能\n\nplaybook具有如下的功能：\n\n- 编写复杂的ansible任务；\n- 控制任务执行；\n- 声明配置；\n- ......\n\n\n\n### 和命令行对比\n\n- playbook是对命令行的编排；\n- 命令行适合简单、单一、快速的任务，playbook适合复杂的任务；\n- ......\n\n\n\n<br>\n\n\n\n## playbook语法\n\n\n\n### 执行命令\n\n```yaml\n# test-playbook.yml\n- hosts: test\n  remote_user: root\n  tasks:\n  - name: Hello World\n    shell: ls /root\n```\n\n\n\n上边就是一个简单的playbook示例，其中：\n\n- `- hosts`指定了playbook运行在哪些服务器上；\n- `remote_user`指定远程运行的用户；\n- `tasks`指定运行的任务，这里是使用`shell`模块运行`ls /root`这个命令。\n\n\n\n执行playbook可以使用如下的命令：\n\n```bash\n$ ansible-playbook test-playbook.yml\n```\n\n\n\n### 定义变量\n\nplaybook变量定义可以在host文件中定义，例如：\n\n```\ntest ansible_ssh_host=192.168.1.2 ansible_ssh_port=22 ansible_ssh_user=root\n\n[node]\ntest\n```\n\n\n\n其中`test`是主机`192.168.1.2`的别名，也是一个playbook变量。\n\n\n\n变量也可以定义在yaml文件中，使用`vars`关键字，例如：\n\n```yaml\n# test-playbook.yml\n- hosts: test\n  remote_user: root\n  vars:\n    dir: /root\n  tasks:\n  - name: Hello World\n    shell: ls \"{{ dir }}\"\n```\n\n\n\n或者是：\n\n```yaml\n# test-playbook.yml\n- hosts: test\n  remote_user: root\n  vars:\n    command: /root\n  tasks:\n  - name: Hello World\n    shell: \"{{ command }}\"\n```\n\n> 引用变量的时候最好都用双引号将大括号引起来，以免报错\n\n\n\n### 系统变量\n\nansible提供了很多系统变量，可以完成根据系统的个性化操作，系统变量可以通过下面的命令查看：\n\n```bash\n$ ansible <hostname> -m setup\n```\n\n\n\n使用系统变量的时候，直接使用下面的形式即可，例如：\n\n```jinja2\n{{ ansible_devices.sda.model }}\n```\n\n\n\n###  when条件语句\n\n```yaml\n......\ntasks:\n- name: \"shutdown system\"\n  command: /sbin/shutdonw -t now\n  when: ansible_os_family == \"Debian\"\n```\n\n上边这个playbook代码段及使用了when条件语句，判断当系统为Debian时关闭系统。\n\n\n\n### bool值\n\n和其他编程语言一样，真用`true`表示，假用`false`表示：\n\n```yaml\n......\nvars:\n  change: true\ntasks:\n- shell: echo \"this is true\"\n  when: change\n- shell: echo \"this is false\"\n  when: not change\n```\n\n上边这个playbook通过变量`change`的真假来控制具体执行的任务。\n\n\n\n### with_items 循环语句\n\n```yaml\n......\ntasks:\n- name: add user\n  user: name={{ item }} state=present groups=wheel\n  with_items:\n    - user1\n    - user2\n```\n\n上边这个palybook代码段将会循环`with_items`中的内容，然后使用user模块添加对应的用户\n\n\n\n### with_nested嵌套循环\n\n```yaml\n......\ntasks:\n- name: user access control\n    mysql_user: name={{ item[0] }}\n                priv={{ item[1] }}.*:ALL\n                append_privs=yes\n                password=foo\n    with_nested:\n      - ['mike', 'admin']\n      - ['testdb', 'docdb', 'userdb']\n```\n\n上面的playbook代码段通过`with_nested`来给mysql增加用户并授权。\n\n\n\n### 有条件循环\n\n```yaml\n......\ntasks:\n- name: looping\n  command: echo {{ item }}\n  with_items: [0,1,2,3,4,5,6]\n  when: item > 5\n```\n\n上边playbook代码段通过结合`when`和`with_items`来实现有条件的循环，打印大于5的数值。\n\n\n\n<br>\n\n\n\n## paybook常用命令\n\n```bash\n# 检查语法是否正确\n$ ansible-playbook  --syntax-check  /path/to/playbook.yaml\n\n# 测试运行\n$ ansible-playbook -C /path/to/playbook.yaml\n\n# 运行playbook\n$ ansible-playbook  /path/to/playbook.yaml\n```\n\n","slug":"Ansible-Playbook","published":1,"updated":"2020-07-20T06:45:04.424Z","_id":"ckcstxvvy0000ihjd8w0od881","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"playbook介绍\"><a href=\"#playbook介绍\" class=\"headerlink\" title=\"playbook介绍\"></a>playbook介绍</h2><h3 id=\"什么是playbook\"><a href=\"#什么是playbook\" class=\"headerlink\" title=\"什么是playbook\"></a>什么是playbook</h3><p>ansible playbook可以类比为ansible为基础的编程语言，它具有编程语言所具有的顺序结构、选择结构、循环结构，并且可以定义变量。可以通过playbook将ansible命令行编排在一起，完成一些更高级的工作。</p>\n<blockquote>\n<p> playbook编写方法才哟呵你给yaml格式</p>\n</blockquote>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>playbook具有如下的功能：</p>\n<ul>\n<li>编写复杂的ansible任务；</li>\n<li>控制任务执行；</li>\n<li>声明配置；</li>\n<li>……</li>\n</ul>\n<h3 id=\"和命令行对比\"><a href=\"#和命令行对比\" class=\"headerlink\" title=\"和命令行对比\"></a>和命令行对比</h3><ul>\n<li>playbook是对命令行的编排；</li>\n<li>命令行适合简单、单一、快速的任务，playbook适合复杂的任务；</li>\n<li>……</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"playbook语法\"><a href=\"#playbook语法\" class=\"headerlink\" title=\"playbook语法\"></a>playbook语法</h2><h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test-playbook.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">ls</span> <span class=\"string\">/root</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上边就是一个简单的playbook示例，其中：</p>\n<ul>\n<li><code>- hosts</code>指定了playbook运行在哪些服务器上；</li>\n<li><code>remote_user</code>指定远程运行的用户；</li>\n<li><code>tasks</code>指定运行的任务，这里是使用<code>shell</code>模块运行<code>ls /root</code>这个命令。</li>\n</ul>\n<p>执行playbook可以使用如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible-playbook <span class=\"built_in\">test</span>-playbook.yml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h3><p>playbook变量定义可以在host文件中定义，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test ansible_ssh_host&#x3D;192.168.1.2 ansible_ssh_port&#x3D;22 ansible_ssh_user&#x3D;root</span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中<code>test</code>是主机<code>192.168.1.2</code>的别名，也是一个playbook变量。</p>\n<p>变量也可以定义在yaml文件中，使用<code>vars</code>关键字，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test-playbook.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">dir:</span> <span class=\"string\">/root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">ls</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; dir &#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者是：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test-playbook.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">/root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; command &#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用变量的时候最好都用双引号将大括号引起来，以免报错</p>\n</blockquote>\n<h3 id=\"系统变量\"><a href=\"#系统变量\" class=\"headerlink\" title=\"系统变量\"></a>系统变量</h3><p>ansible提供了很多系统变量，可以完成根据系统的个性化操作，系统变量可以通过下面的命令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible &lt;hostname&gt; -m setup</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用系统变量的时候，直接使用下面的形式即可，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; ansible_devices.sda.model &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"when条件语句\"><a href=\"#when条件语句\" class=\"headerlink\" title=\"when条件语句\"></a>when条件语句</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"shutdown system\"</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span> <span class=\"string\">/sbin/shutdonw</span> <span class=\"string\">-t</span> <span class=\"string\">now</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">ansible_os_family</span> <span class=\"string\">==</span> <span class=\"string\">\"Debian\"</span></span><br></pre></td></tr></table></figure>\n\n<p>上边这个playbook代码段及使用了when条件语句，判断当系统为Debian时关闭系统。</p>\n<h3 id=\"bool值\"><a href=\"#bool值\" class=\"headerlink\" title=\"bool值\"></a>bool值</h3><p>和其他编程语言一样，真用<code>true</code>表示，假用<code>false</code>表示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">vars:</span></span><br><span class=\"line\">  <span class=\"attr\">change:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">\"this is true\"</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">change</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">\"this is false\"</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">not</span> <span class=\"string\">change</span></span><br></pre></td></tr></table></figure>\n\n<p>上边这个playbook通过变量<code>change</code>的真假来控制具体执行的任务。</p>\n<h3 id=\"with-items-循环语句\"><a href=\"#with-items-循环语句\" class=\"headerlink\" title=\"with_items 循环语句\"></a>with_items 循环语句</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">user</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span> <span class=\"string\">name=&#123;&#123;</span> <span class=\"string\">item</span> <span class=\"string\">&#125;&#125;</span> <span class=\"string\">state=present</span> <span class=\"string\">groups=wheel</span></span><br><span class=\"line\">  <span class=\"attr\">with_items:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">user1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">user2</span></span><br></pre></td></tr></table></figure>\n\n<p>上边这个palybook代码段将会循环<code>with_items</code>中的内容，然后使用user模块添加对应的用户</p>\n<h3 id=\"with-nested嵌套循环\"><a href=\"#with-nested嵌套循环\" class=\"headerlink\" title=\"with_nested嵌套循环\"></a>with_nested嵌套循环</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">user</span> <span class=\"string\">access</span> <span class=\"string\">control</span></span><br><span class=\"line\">    <span class=\"attr\">mysql_user:</span> <span class=\"string\">name=&#123;&#123;</span> <span class=\"string\">item[0]</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">                <span class=\"string\">priv=&#123;&#123;</span> <span class=\"string\">item[1]</span> <span class=\"string\">&#125;&#125;.*:ALL</span></span><br><span class=\"line\">                <span class=\"string\">append_privs=yes</span></span><br><span class=\"line\">                <span class=\"string\">password=foo</span></span><br><span class=\"line\">    <span class=\"attr\">with_nested:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">['mike',</span> <span class=\"string\">'admin'</span><span class=\"string\">]</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">['testdb',</span> <span class=\"string\">'docdb'</span><span class=\"string\">,</span> <span class=\"string\">'userdb'</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的playbook代码段通过<code>with_nested</code>来给mysql增加用户并授权。</p>\n<h3 id=\"有条件循环\"><a href=\"#有条件循环\" class=\"headerlink\" title=\"有条件循环\"></a>有条件循环</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">looping</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span> <span class=\"string\">echo</span> <span class=\"string\">&#123;&#123;</span> <span class=\"string\">item</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">with_items:</span> <span class=\"string\">[0,1,2,3,4,5,6]</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">item</span> <span class=\"string\">&gt;</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>上边playbook代码段通过结合<code>when</code>和<code>with_items</code>来实现有条件的循环，打印大于5的数值。</p>\n<br>\n\n\n\n<h2 id=\"paybook常用命令\"><a href=\"#paybook常用命令\" class=\"headerlink\" title=\"paybook常用命令\"></a>paybook常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查语法是否正确</span></span><br><span class=\"line\">$ ansible-playbook  --syntax-check  /path/to/playbook.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试运行</span></span><br><span class=\"line\">$ ansible-playbook -C /path/to/playbook.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行playbook</span></span><br><span class=\"line\">$ ansible-playbook  /path/to/playbook.yaml</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"playbook介绍\"><a href=\"#playbook介绍\" class=\"headerlink\" title=\"playbook介绍\"></a>playbook介绍</h2><h3 id=\"什么是playbook\"><a href=\"#什么是playbook\" class=\"headerlink\" title=\"什么是playbook\"></a>什么是playbook</h3><p>ansible playbook可以类比为ansible为基础的编程语言，它具有编程语言所具有的顺序结构、选择结构、循环结构，并且可以定义变量。可以通过playbook将ansible命令行编排在一起，完成一些更高级的工作。</p>\n<blockquote>\n<p> playbook编写方法才哟呵你给yaml格式</p>\n</blockquote>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>playbook具有如下的功能：</p>\n<ul>\n<li>编写复杂的ansible任务；</li>\n<li>控制任务执行；</li>\n<li>声明配置；</li>\n<li>……</li>\n</ul>\n<h3 id=\"和命令行对比\"><a href=\"#和命令行对比\" class=\"headerlink\" title=\"和命令行对比\"></a>和命令行对比</h3><ul>\n<li>playbook是对命令行的编排；</li>\n<li>命令行适合简单、单一、快速的任务，playbook适合复杂的任务；</li>\n<li>……</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"playbook语法\"><a href=\"#playbook语法\" class=\"headerlink\" title=\"playbook语法\"></a>playbook语法</h2><h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test-playbook.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">ls</span> <span class=\"string\">/root</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上边就是一个简单的playbook示例，其中：</p>\n<ul>\n<li><code>- hosts</code>指定了playbook运行在哪些服务器上；</li>\n<li><code>remote_user</code>指定远程运行的用户；</li>\n<li><code>tasks</code>指定运行的任务，这里是使用<code>shell</code>模块运行<code>ls /root</code>这个命令。</li>\n</ul>\n<p>执行playbook可以使用如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible-playbook <span class=\"built_in\">test</span>-playbook.yml</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h3><p>playbook变量定义可以在host文件中定义，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test ansible_ssh_host&#x3D;192.168.1.2 ansible_ssh_port&#x3D;22 ansible_ssh_user&#x3D;root</span><br><span class=\"line\"></span><br><span class=\"line\">[node]</span><br><span class=\"line\">test</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中<code>test</code>是主机<code>192.168.1.2</code>的别名，也是一个playbook变量。</p>\n<p>变量也可以定义在yaml文件中，使用<code>vars</code>关键字，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test-playbook.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">dir:</span> <span class=\"string\">/root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">ls</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; dir &#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者是：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test-playbook.yml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">/root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Hello</span> <span class=\"string\">World</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; command &#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>引用变量的时候最好都用双引号将大括号引起来，以免报错</p>\n</blockquote>\n<h3 id=\"系统变量\"><a href=\"#系统变量\" class=\"headerlink\" title=\"系统变量\"></a>系统变量</h3><p>ansible提供了很多系统变量，可以完成根据系统的个性化操作，系统变量可以通过下面的命令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible &lt;hostname&gt; -m setup</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用系统变量的时候，直接使用下面的形式即可，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; ansible_devices.sda.model &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"when条件语句\"><a href=\"#when条件语句\" class=\"headerlink\" title=\"when条件语句\"></a>when条件语句</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"shutdown system\"</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span> <span class=\"string\">/sbin/shutdonw</span> <span class=\"string\">-t</span> <span class=\"string\">now</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">ansible_os_family</span> <span class=\"string\">==</span> <span class=\"string\">\"Debian\"</span></span><br></pre></td></tr></table></figure>\n\n<p>上边这个playbook代码段及使用了when条件语句，判断当系统为Debian时关闭系统。</p>\n<h3 id=\"bool值\"><a href=\"#bool值\" class=\"headerlink\" title=\"bool值\"></a>bool值</h3><p>和其他编程语言一样，真用<code>true</code>表示，假用<code>false</code>表示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">vars:</span></span><br><span class=\"line\">  <span class=\"attr\">change:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">\"this is true\"</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">change</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">\"this is false\"</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">not</span> <span class=\"string\">change</span></span><br></pre></td></tr></table></figure>\n\n<p>上边这个playbook通过变量<code>change</code>的真假来控制具体执行的任务。</p>\n<h3 id=\"with-items-循环语句\"><a href=\"#with-items-循环语句\" class=\"headerlink\" title=\"with_items 循环语句\"></a>with_items 循环语句</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">user</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span> <span class=\"string\">name=&#123;&#123;</span> <span class=\"string\">item</span> <span class=\"string\">&#125;&#125;</span> <span class=\"string\">state=present</span> <span class=\"string\">groups=wheel</span></span><br><span class=\"line\">  <span class=\"attr\">with_items:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">user1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">user2</span></span><br></pre></td></tr></table></figure>\n\n<p>上边这个palybook代码段将会循环<code>with_items</code>中的内容，然后使用user模块添加对应的用户</p>\n<h3 id=\"with-nested嵌套循环\"><a href=\"#with-nested嵌套循环\" class=\"headerlink\" title=\"with_nested嵌套循环\"></a>with_nested嵌套循环</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">user</span> <span class=\"string\">access</span> <span class=\"string\">control</span></span><br><span class=\"line\">    <span class=\"attr\">mysql_user:</span> <span class=\"string\">name=&#123;&#123;</span> <span class=\"string\">item[0]</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">                <span class=\"string\">priv=&#123;&#123;</span> <span class=\"string\">item[1]</span> <span class=\"string\">&#125;&#125;.*:ALL</span></span><br><span class=\"line\">                <span class=\"string\">append_privs=yes</span></span><br><span class=\"line\">                <span class=\"string\">password=foo</span></span><br><span class=\"line\">    <span class=\"attr\">with_nested:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">['mike',</span> <span class=\"string\">'admin'</span><span class=\"string\">]</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">['testdb',</span> <span class=\"string\">'docdb'</span><span class=\"string\">,</span> <span class=\"string\">'userdb'</span><span class=\"string\">]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的playbook代码段通过<code>with_nested</code>来给mysql增加用户并授权。</p>\n<h3 id=\"有条件循环\"><a href=\"#有条件循环\" class=\"headerlink\" title=\"有条件循环\"></a>有条件循环</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">......</span></span><br><span class=\"line\"><span class=\"attr\">tasks:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">looping</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span> <span class=\"string\">echo</span> <span class=\"string\">&#123;&#123;</span> <span class=\"string\">item</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">with_items:</span> <span class=\"string\">[0,1,2,3,4,5,6]</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">item</span> <span class=\"string\">&gt;</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>上边playbook代码段通过结合<code>when</code>和<code>with_items</code>来实现有条件的循环，打印大于5的数值。</p>\n<br>\n\n\n\n<h2 id=\"paybook常用命令\"><a href=\"#paybook常用命令\" class=\"headerlink\" title=\"paybook常用命令\"></a>paybook常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查语法是否正确</span></span><br><span class=\"line\">$ ansible-playbook  --syntax-check  /path/to/playbook.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试运行</span></span><br><span class=\"line\">$ ansible-playbook -C /path/to/playbook.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行playbook</span></span><br><span class=\"line\">$ ansible-playbook  /path/to/playbook.yaml</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Playbook使用实例","date":"2020-07-20T07:09:58.000Z","description":"使用playbook完成一些任务的实例","cover":"https://pic.rmb.bdstatic.com/609935701daff991f058cfa45a4219d8.jpeg","_content":"\n\n\n## 创建系统用户和组\n\n创建系统用户组，创建新的系统用户并加入该组\n\n\n\n```yaml\n# add_user.yaml\n- hosts: cluster\n  remote_user: root\n  tasks:\n  - name: add a group\n    group: name=asgroup system=true\n  - name: add a user\n    user: name=asuser group=asgroup system=true\n```\n\n\n\n检查语法并测试运行：\n\n```bash\n# 检查语法\n$ ansible-playbook --syntax-check add_user.yaml\n\n# 测试运行\n$ ansible-playbook -C add_user.yaml\n```\n\n<img src=\"check-add-user.png\" style=\"zoom:50%;\" />\n\n\n\n测试没有报错，执行playbook：\n\n```bash\n$ ansible-playbook add_user.yaml\n```\n\n<img src=\"add-user.png\" style=\"zoom:50%;\" />\n\n\n\n验证：\n\n```bash\n$ ansible cluster -m shell -a 'tail -1 /etc/passwd'\n$ ansible cluster -m shell -a 'getent group asgroup'\n```\n\n<img src=\"check-res.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n## 部署http服务\n\n部署http服务，修改监听端口并启动服务\n\n```yaml\n- hosts: cluster\n  remote_user: root\n  tasks:\n  - name: install httpd service\n    yum: name=httpd state=latest\n  - name: install conf file\n    copy: src=httpd.conf dest=/etc/httpd/conf/httpd.conf\n    notify: restart httpd service\n    tags: instconf\n  - name: start httpd service\n    service: name=httpd state=started\n  handlers:\n  - name: restart httpd service\n    service: name=httpd state=restarted\n```\n\n\n\n> 需要在当前目录下准备好修改过的`httpd.conf`配置文件\n\n\n\n这里使用了`handlers`，它可以由特定条件触发（使用`notify`）。这里是当有新的文件复制到远程服务器就触发服务重启的操作。\n\n\n\n`install conf file`这个任务还指定了一个名为`instconf`的tag，它的作用是可以在运行playbook的时候只运行指定的tag的任务。例如后期想要更新配置文件，只需要运行tag为`instconf`的任务，即可实现更新远程服务配置文件和重启服务：\n\n```bash\n# 查看playbok中有哪些tag\n$ ansible-playbook --list-tags httpd.yaml\n\n# 运行指定tag的任务\n$ ansible-playbook -t instconf httpd.yaml\n```\n\n\n\n<br>\n\n\n\n## 安装python flask环境\n\n使用playbook安装python flask环境，具有数据库和缓存能力\n\n```yaml\n- hosts: cluster\n  remote_user: root\n  become: true\n  tasks:\n  - name: install python for centos\n    yum: \n      name: \"{{ item }}\"\n      state: installed\n    with_items:\n      - python-devel\n      - python-setuptools\n    when: ansible_distribution == 'Centos'\n  - name: install python for ubuntu\n    apt: \n      name: \"{{ item }}\"\n      state: latest\n      update_cache: yes\n    with_items:\n      - libpython-dev\n      - python-setuptools\n    when: ansible_distribution == 'Ubuntu'\n  - name: install pip\n    shell: easy_install pip\n  - name: pip install flask and redis\n    pip:\n      name: \"{{ item }}\"\n    with_items:\n      - flask\n      - redis\n    \n```\n\n\n\n<br>\n\n\n\n## 安装zabbix\n\n使用playbook安装zabbix的server和client端：\n\n```yaml\n- hosts: cluster\n  become: true\n  remote_user: root\n  tasks:\n  - name: install zabbix repo for centos\n    yum:\n      name: http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm\n      state: installed\n    when: ansible_distribution == 'Centos'\n  - name: download zabbix repo for ubuntu\n    get_url:\n      url: http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release-3.4-1+xenial_all.deb\n      dest: /tmp/zabbix.deb\n    when: ansible_distribution == 'Ubuntu'\n  - name: install zabbix repo for ubuntu\n    apt:\n      deb: /tmp/zabbix.deb\n    when: ansible_distribution == 'Ubuntu'\n  - name: install zabbix server\n    yum:\n      name: \"{{ item }}\"\n      state: installed\n    with_items:\n      - zabbix-server-mysql\n      - zabbix-proxy-mysql\n      - zabbix-web-mysql\n    when: ansible_distribution == 'Centos'\n  - name: install zabbix client\n    apt:\n      name: zabbix-agent\n      update_cache: yes\n      state: installed\n    when: ansible_distribution == 'Ubuntu'\n  - name: config zabbix server\n    replace:\n      path: /etc/zabbix/zabbix_server.conf\n      regexp: DBUser=zabbix\n      replace: DBUser=root\n    when: ansible_distribution == 'Centos'\n  - name: init zabbix mysql\n    shell: zcat /usr/share/doc/zabbix-server-mysql-3.4.7/create.sql.gz | mysql -uroot zabbix\n    when: ansible_distribution == 'Centos'\n  - name: disable selinux\n    selinux:\n      state: disabled\n    when: ansible_distribution == 'Centos'\n  - name: start zabbix server\n    systemd:\n      name: zabbix-server\n      state: started\n    when: ansible_distribution == 'Centos'\n  - name: start zabbix agent\n    systemd:\n      name: zabbix-agent\n      state: started\n    when: ansible_distribution == 'Ubuntu'\n```\n\n","source":"_posts/Playbook使用实例.md","raw":"---\ntitle: Playbook使用实例\ndate: 2020-07-20 15:09:58\ntags:\n- 自动化运维工具\n- ansible\ncategories:\n- 自动化运维\n- Ansible\ndescription: 使用playbook完成一些任务的实例\ncover: https://pic.rmb.bdstatic.com/609935701daff991f058cfa45a4219d8.jpeg\n---\n\n\n\n## 创建系统用户和组\n\n创建系统用户组，创建新的系统用户并加入该组\n\n\n\n```yaml\n# add_user.yaml\n- hosts: cluster\n  remote_user: root\n  tasks:\n  - name: add a group\n    group: name=asgroup system=true\n  - name: add a user\n    user: name=asuser group=asgroup system=true\n```\n\n\n\n检查语法并测试运行：\n\n```bash\n# 检查语法\n$ ansible-playbook --syntax-check add_user.yaml\n\n# 测试运行\n$ ansible-playbook -C add_user.yaml\n```\n\n<img src=\"check-add-user.png\" style=\"zoom:50%;\" />\n\n\n\n测试没有报错，执行playbook：\n\n```bash\n$ ansible-playbook add_user.yaml\n```\n\n<img src=\"add-user.png\" style=\"zoom:50%;\" />\n\n\n\n验证：\n\n```bash\n$ ansible cluster -m shell -a 'tail -1 /etc/passwd'\n$ ansible cluster -m shell -a 'getent group asgroup'\n```\n\n<img src=\"check-res.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n## 部署http服务\n\n部署http服务，修改监听端口并启动服务\n\n```yaml\n- hosts: cluster\n  remote_user: root\n  tasks:\n  - name: install httpd service\n    yum: name=httpd state=latest\n  - name: install conf file\n    copy: src=httpd.conf dest=/etc/httpd/conf/httpd.conf\n    notify: restart httpd service\n    tags: instconf\n  - name: start httpd service\n    service: name=httpd state=started\n  handlers:\n  - name: restart httpd service\n    service: name=httpd state=restarted\n```\n\n\n\n> 需要在当前目录下准备好修改过的`httpd.conf`配置文件\n\n\n\n这里使用了`handlers`，它可以由特定条件触发（使用`notify`）。这里是当有新的文件复制到远程服务器就触发服务重启的操作。\n\n\n\n`install conf file`这个任务还指定了一个名为`instconf`的tag，它的作用是可以在运行playbook的时候只运行指定的tag的任务。例如后期想要更新配置文件，只需要运行tag为`instconf`的任务，即可实现更新远程服务配置文件和重启服务：\n\n```bash\n# 查看playbok中有哪些tag\n$ ansible-playbook --list-tags httpd.yaml\n\n# 运行指定tag的任务\n$ ansible-playbook -t instconf httpd.yaml\n```\n\n\n\n<br>\n\n\n\n## 安装python flask环境\n\n使用playbook安装python flask环境，具有数据库和缓存能力\n\n```yaml\n- hosts: cluster\n  remote_user: root\n  become: true\n  tasks:\n  - name: install python for centos\n    yum: \n      name: \"{{ item }}\"\n      state: installed\n    with_items:\n      - python-devel\n      - python-setuptools\n    when: ansible_distribution == 'Centos'\n  - name: install python for ubuntu\n    apt: \n      name: \"{{ item }}\"\n      state: latest\n      update_cache: yes\n    with_items:\n      - libpython-dev\n      - python-setuptools\n    when: ansible_distribution == 'Ubuntu'\n  - name: install pip\n    shell: easy_install pip\n  - name: pip install flask and redis\n    pip:\n      name: \"{{ item }}\"\n    with_items:\n      - flask\n      - redis\n    \n```\n\n\n\n<br>\n\n\n\n## 安装zabbix\n\n使用playbook安装zabbix的server和client端：\n\n```yaml\n- hosts: cluster\n  become: true\n  remote_user: root\n  tasks:\n  - name: install zabbix repo for centos\n    yum:\n      name: http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm\n      state: installed\n    when: ansible_distribution == 'Centos'\n  - name: download zabbix repo for ubuntu\n    get_url:\n      url: http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release-3.4-1+xenial_all.deb\n      dest: /tmp/zabbix.deb\n    when: ansible_distribution == 'Ubuntu'\n  - name: install zabbix repo for ubuntu\n    apt:\n      deb: /tmp/zabbix.deb\n    when: ansible_distribution == 'Ubuntu'\n  - name: install zabbix server\n    yum:\n      name: \"{{ item }}\"\n      state: installed\n    with_items:\n      - zabbix-server-mysql\n      - zabbix-proxy-mysql\n      - zabbix-web-mysql\n    when: ansible_distribution == 'Centos'\n  - name: install zabbix client\n    apt:\n      name: zabbix-agent\n      update_cache: yes\n      state: installed\n    when: ansible_distribution == 'Ubuntu'\n  - name: config zabbix server\n    replace:\n      path: /etc/zabbix/zabbix_server.conf\n      regexp: DBUser=zabbix\n      replace: DBUser=root\n    when: ansible_distribution == 'Centos'\n  - name: init zabbix mysql\n    shell: zcat /usr/share/doc/zabbix-server-mysql-3.4.7/create.sql.gz | mysql -uroot zabbix\n    when: ansible_distribution == 'Centos'\n  - name: disable selinux\n    selinux:\n      state: disabled\n    when: ansible_distribution == 'Centos'\n  - name: start zabbix server\n    systemd:\n      name: zabbix-server\n      state: started\n    when: ansible_distribution == 'Centos'\n  - name: start zabbix agent\n    systemd:\n      name: zabbix-agent\n      state: started\n    when: ansible_distribution == 'Ubuntu'\n```\n\n","slug":"Playbook使用实例","published":1,"updated":"2020-07-21T12:45:25.865Z","_id":"ckcu7g05z00009en00aspe1x2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建系统用户和组\"><a href=\"#创建系统用户和组\" class=\"headerlink\" title=\"创建系统用户和组\"></a>创建系统用户和组</h2><p>创建系统用户组，创建新的系统用户并加入该组</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add_user.yaml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">a</span> <span class=\"string\">group</span></span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">name=asgroup</span> <span class=\"string\">system=true</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">a</span> <span class=\"string\">user</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">name=asuser</span> <span class=\"string\">group=asgroup</span> <span class=\"string\">system=true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查语法并测试运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查语法</span></span><br><span class=\"line\">$ ansible-playbook --syntax-check add_user.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试运行</span></span><br><span class=\"line\">$ ansible-playbook -C add_user.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"check-add-user.png\" style=\"zoom:50%;\" />\n\n\n\n<p>测试没有报错，执行playbook：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible-playbook add_user.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"add-user.png\" style=\"zoom:50%;\" />\n\n\n\n<p>验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'tail -1 /etc/passwd'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'getent group asgroup'</span></span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"check-res.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"部署http服务\"><a href=\"#部署http服务\" class=\"headerlink\" title=\"部署http服务\"></a>部署http服务</h2><p>部署http服务，修改监听端口并启动服务</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> <span class=\"string\">name=httpd</span> <span class=\"string\">state=latest</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">conf</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">copy:</span> <span class=\"string\">src=httpd.conf</span> <span class=\"string\">dest=/etc/httpd/conf/httpd.conf</span></span><br><span class=\"line\">    <span class=\"attr\">notify:</span> <span class=\"string\">restart</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">instconf</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">name=httpd</span> <span class=\"string\">state=started</span></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">restart</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">name=httpd</span> <span class=\"string\">state=restarted</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>需要在当前目录下准备好修改过的<code>httpd.conf</code>配置文件</p>\n</blockquote>\n<p>这里使用了<code>handlers</code>，它可以由特定条件触发（使用<code>notify</code>）。这里是当有新的文件复制到远程服务器就触发服务重启的操作。</p>\n<p><code>install conf file</code>这个任务还指定了一个名为<code>instconf</code>的tag，它的作用是可以在运行playbook的时候只运行指定的tag的任务。例如后期想要更新配置文件，只需要运行tag为<code>instconf</code>的任务，即可实现更新远程服务配置文件和重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看playbok中有哪些tag</span></span><br><span class=\"line\">$ ansible-playbook --list-tags httpd.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行指定tag的任务</span></span><br><span class=\"line\">$ ansible-playbook -t instconf httpd.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装python-flask环境\"><a href=\"#安装python-flask环境\" class=\"headerlink\" title=\"安装python flask环境\"></a>安装python flask环境</h2><p>使用playbook安装python flask环境，具有数据库和缓存能力</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">python</span> <span class=\"string\">for</span> <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">python-devel</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">python-setuptools</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">python</span> <span class=\"string\">for</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">apt:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">      <span class=\"attr\">update_cache:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">libpython-dev</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">python-setuptools</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">pip</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">easy_install</span> <span class=\"string\">pip</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">pip</span> <span class=\"string\">install</span> <span class=\"string\">flask</span> <span class=\"string\">and</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">pip:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">flask</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装zabbix\"><a href=\"#安装zabbix\" class=\"headerlink\" title=\"安装zabbix\"></a>安装zabbix</h2><p>使用playbook安装zabbix的server和client端：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">repo</span> <span class=\"string\">for</span> <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">download</span> <span class=\"string\">zabbix</span> <span class=\"string\">repo</span> <span class=\"string\">for</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">get_url:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release-3.4-1+xenial_all.deb</span></span><br><span class=\"line\">      <span class=\"attr\">dest:</span> <span class=\"string\">/tmp/zabbix.deb</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">repo</span> <span class=\"string\">for</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">apt:</span></span><br><span class=\"line\">      <span class=\"attr\">deb:</span> <span class=\"string\">/tmp/zabbix.deb</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zabbix-server-mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zabbix-proxy-mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zabbix-web-mysql</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">client</span></span><br><span class=\"line\">    <span class=\"attr\">apt:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">zabbix-agent</span></span><br><span class=\"line\">      <span class=\"attr\">update_cache:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span> <span class=\"string\">zabbix</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">replace:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/etc/zabbix/zabbix_server.conf</span></span><br><span class=\"line\">      <span class=\"attr\">regexp:</span> <span class=\"string\">DBUser=zabbix</span></span><br><span class=\"line\">      <span class=\"attr\">replace:</span> <span class=\"string\">DBUser=root</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">init</span> <span class=\"string\">zabbix</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">zcat</span> <span class=\"string\">/usr/share/doc/zabbix-server-mysql-3.4.7/create.sql.gz</span> <span class=\"string\">|</span> <span class=\"string\">mysql</span> <span class=\"string\">-uroot</span> <span class=\"string\">zabbix</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">disable</span> <span class=\"string\">selinux</span></span><br><span class=\"line\">    <span class=\"attr\">selinux:</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">disabled</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">zabbix</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">zabbix-server</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">zabbix</span> <span class=\"string\">agent</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">zabbix-agent</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建系统用户和组\"><a href=\"#创建系统用户和组\" class=\"headerlink\" title=\"创建系统用户和组\"></a>创建系统用户和组</h2><p>创建系统用户组，创建新的系统用户并加入该组</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add_user.yaml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">a</span> <span class=\"string\">group</span></span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">name=asgroup</span> <span class=\"string\">system=true</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">add</span> <span class=\"string\">a</span> <span class=\"string\">user</span></span><br><span class=\"line\">    <span class=\"attr\">user:</span> <span class=\"string\">name=asuser</span> <span class=\"string\">group=asgroup</span> <span class=\"string\">system=true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查语法并测试运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查语法</span></span><br><span class=\"line\">$ ansible-playbook --syntax-check add_user.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试运行</span></span><br><span class=\"line\">$ ansible-playbook -C add_user.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"check-add-user.png\" style=\"zoom:50%;\" />\n\n\n\n<p>测试没有报错，执行playbook：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible-playbook add_user.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"add-user.png\" style=\"zoom:50%;\" />\n\n\n\n<p>验证：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'tail -1 /etc/passwd'</span></span><br><span class=\"line\">$ ansible cluster -m shell -a <span class=\"string\">'getent group asgroup'</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"check-res.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"部署http服务\"><a href=\"#部署http服务\" class=\"headerlink\" title=\"部署http服务\"></a>部署http服务</h2><p>部署http服务，修改监听端口并启动服务</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> <span class=\"string\">name=httpd</span> <span class=\"string\">state=latest</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">conf</span> <span class=\"string\">file</span></span><br><span class=\"line\">    <span class=\"attr\">copy:</span> <span class=\"string\">src=httpd.conf</span> <span class=\"string\">dest=/etc/httpd/conf/httpd.conf</span></span><br><span class=\"line\">    <span class=\"attr\">notify:</span> <span class=\"string\">restart</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">instconf</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">name=httpd</span> <span class=\"string\">state=started</span></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">restart</span> <span class=\"string\">httpd</span> <span class=\"string\">service</span></span><br><span class=\"line\">    <span class=\"attr\">service:</span> <span class=\"string\">name=httpd</span> <span class=\"string\">state=restarted</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>需要在当前目录下准备好修改过的<code>httpd.conf</code>配置文件</p>\n</blockquote>\n<p>这里使用了<code>handlers</code>，它可以由特定条件触发（使用<code>notify</code>）。这里是当有新的文件复制到远程服务器就触发服务重启的操作。</p>\n<p><code>install conf file</code>这个任务还指定了一个名为<code>instconf</code>的tag，它的作用是可以在运行playbook的时候只运行指定的tag的任务。例如后期想要更新配置文件，只需要运行tag为<code>instconf</code>的任务，即可实现更新远程服务配置文件和重启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看playbok中有哪些tag</span></span><br><span class=\"line\">$ ansible-playbook --list-tags httpd.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行指定tag的任务</span></span><br><span class=\"line\">$ ansible-playbook -t instconf httpd.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装python-flask环境\"><a href=\"#安装python-flask环境\" class=\"headerlink\" title=\"安装python flask环境\"></a>安装python flask环境</h2><p>使用playbook安装python flask环境，具有数据库和缓存能力</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">python</span> <span class=\"string\">for</span> <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">python-devel</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">python-setuptools</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">python</span> <span class=\"string\">for</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">apt:</span> </span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">latest</span></span><br><span class=\"line\">      <span class=\"attr\">update_cache:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">libpython-dev</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">python-setuptools</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">pip</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">easy_install</span> <span class=\"string\">pip</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">pip</span> <span class=\"string\">install</span> <span class=\"string\">flask</span> <span class=\"string\">and</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">pip:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">flask</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"安装zabbix\"><a href=\"#安装zabbix\" class=\"headerlink\" title=\"安装zabbix\"></a>安装zabbix</h2><p>使用playbook安装zabbix的server和client端：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">cluster</span></span><br><span class=\"line\">  <span class=\"attr\">become:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">repo</span> <span class=\"string\">for</span> <span class=\"string\">centos</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">download</span> <span class=\"string\">zabbix</span> <span class=\"string\">repo</span> <span class=\"string\">for</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">get_url:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">http://repo.zabbix.com/zabbix/3.4/ubuntu/pool/main/z/zabbix-release/zabbix-release-3.4-1+xenial_all.deb</span></span><br><span class=\"line\">      <span class=\"attr\">dest:</span> <span class=\"string\">/tmp/zabbix.deb</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">repo</span> <span class=\"string\">for</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\">    <span class=\"attr\">apt:</span></span><br><span class=\"line\">      <span class=\"attr\">deb:</span> <span class=\"string\">/tmp/zabbix.deb</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">yum:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zabbix-server-mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zabbix-proxy-mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zabbix-web-mysql</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span> <span class=\"string\">zabbix</span> <span class=\"string\">client</span></span><br><span class=\"line\">    <span class=\"attr\">apt:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">zabbix-agent</span></span><br><span class=\"line\">      <span class=\"attr\">update_cache:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">installed</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span> <span class=\"string\">zabbix</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">replace:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/etc/zabbix/zabbix_server.conf</span></span><br><span class=\"line\">      <span class=\"attr\">regexp:</span> <span class=\"string\">DBUser=zabbix</span></span><br><span class=\"line\">      <span class=\"attr\">replace:</span> <span class=\"string\">DBUser=root</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">init</span> <span class=\"string\">zabbix</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">zcat</span> <span class=\"string\">/usr/share/doc/zabbix-server-mysql-3.4.7/create.sql.gz</span> <span class=\"string\">|</span> <span class=\"string\">mysql</span> <span class=\"string\">-uroot</span> <span class=\"string\">zabbix</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">disable</span> <span class=\"string\">selinux</span></span><br><span class=\"line\">    <span class=\"attr\">selinux:</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">disabled</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">zabbix</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">zabbix-server</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Centos'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">start</span> <span class=\"string\">zabbix</span> <span class=\"string\">agent</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">zabbix-agent</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">started</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ansible_distribution</span> <span class=\"string\">==</span> <span class=\"string\">'Ubuntu'</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"[k8s实践系列]istio实践(四)--通过istio-ingressgateway暴露服务","date":"2020-07-21T01:00:18.000Z","description":"通过istio-ingressgateway将服务暴露出去。","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595303468042&di=e7d983b6f90fa7b6b73ca68d00f346b8&imgtype=0&src=http%3A%2F%2Ft8.baidu.com%2Fit%2Fu%3D3446952059%2C3422785273%26fm%3D193","_content":"\n\n\n## 准备\n\n在istio部署完成后，会在默认的istio-system下生成一个`istio-ingressgateway`服务。这个服务和传统的`ingress-nginx`类似，但`istio-ingressgateway`允许应用一些监控和路由规则特性来管理进入集群的流量。\n\n```bash\n$ kubectl get svc -n istio-system | grep istio-ingressgateway\n```\n\n<img src=\"ingressgateway.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n\n\n## 部署测试服务\n\n这里为了简单，就部署一个官方的nginx服务作为测试服务，首先是deployment文件：\n\n```yaml\n# nginx-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: istio-app\n  labels:\n    app: nginx\n    version: v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: nginx\n        version: v1\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n```\n\n\n\n然后是service文件：\n\n```yaml\n# nginx-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: istio-app\n  labels:\n    app: nginx\n    version: v1\nspec:\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\n  selector:\n    app: nginx\n    version: v1\n  type: ClusterIP\n```\n\n\n\n使用下面的命令创建相关的资源：\n\n```bash\n$ kubectl apply -f nginx-deployment.yaml\n$ kubectl apply -f nginx-service.yaml\n```\n\n\n\n确保所有的服务都正常启动：\n\n```bash\n$ kubectl get pod,svc -n istio-app | grep nginx\n```\n\n<img src=\"check.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n## 创建Gateway对象\n\n使用下面的文件创建Gateway对象：\n\n```yaml\n# nginx-gateway.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: nginx-proxy\n  namespace: istio-app\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"nginx.example.com\"\n```\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f nginx-gateway.yaml\n```\n\n\n\n<br>\n\n## 创建VirtualService对象\n\n使用下面的文件创建VirtualService对象：\n\n```yaml\n# nginx-virtualservice.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: nginx-vs\n  namespace: istio-app\nspec:\n  hosts:\n  - \"nginx.example.com\"\n  gateways:\n  - nginx-proxy\n  http:\n  - route:\n    - destination:\n        host: nginx-service\n        port:\n          number: 80\n```\n\n\n\n注意这里的`gateways`名称需要和上边定义的gateway资源名称一致；`destination.host`指定的是服务service名称；\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f nginx-virtualservice.yaml\n```\n\n\n\n<br>\n\n\n\n## 配置nginx\n\n使用nginx代理istio-ingressgateway，创建如下的配置文件：\n\n```nginx\n# nginx-example.conf\nupstream istio-80 {\n    server 10.8.138.11:30283 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name nginx.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name nginx.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/nginx.example.com_access.log main;\n    error_log /var/log/nginx/nginx.example.com_error.log;\n\n    location / {\n      proxy_http_version 1.1;\n      proxy_pass http://istio-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n    }\n  \n    location ~* /\\.(svn|git)/ {\n      return 404;\n    }\n}\n```\n\n- `10.8.138.11:30283`是`istio-ingressgateway`服务对外的IP和端口（http-80）；\n- `proxy_http_version 1.1;`这个不能少；\n\n\n\n如果要公网访问，即将公网IP地址和nginx服务器绑定，或本地做host解析即可。\n\n","source":"_posts/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务.md","raw":"---\ntitle: '[k8s实践系列]istio实践(四)--通过istio-ingressgateway暴露服务'\ndate: 2020-07-21 09:00:18\ntags:\n- k8s\n- Istio\ncategories:\n- 实践K8s\n- Istio\ndescription: 通过istio-ingressgateway将服务暴露出去。\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595303468042&di=e7d983b6f90fa7b6b73ca68d00f346b8&imgtype=0&src=http%3A%2F%2Ft8.baidu.com%2Fit%2Fu%3D3446952059%2C3422785273%26fm%3D193\n---\n\n\n\n## 准备\n\n在istio部署完成后，会在默认的istio-system下生成一个`istio-ingressgateway`服务。这个服务和传统的`ingress-nginx`类似，但`istio-ingressgateway`允许应用一些监控和路由规则特性来管理进入集群的流量。\n\n```bash\n$ kubectl get svc -n istio-system | grep istio-ingressgateway\n```\n\n<img src=\"ingressgateway.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n\n\n## 部署测试服务\n\n这里为了简单，就部署一个官方的nginx服务作为测试服务，首先是deployment文件：\n\n```yaml\n# nginx-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: istio-app\n  labels:\n    app: nginx\n    version: v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: nginx\n        version: v1\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n```\n\n\n\n然后是service文件：\n\n```yaml\n# nginx-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: istio-app\n  labels:\n    app: nginx\n    version: v1\nspec:\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\n  selector:\n    app: nginx\n    version: v1\n  type: ClusterIP\n```\n\n\n\n使用下面的命令创建相关的资源：\n\n```bash\n$ kubectl apply -f nginx-deployment.yaml\n$ kubectl apply -f nginx-service.yaml\n```\n\n\n\n确保所有的服务都正常启动：\n\n```bash\n$ kubectl get pod,svc -n istio-app | grep nginx\n```\n\n<img src=\"check.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n## 创建Gateway对象\n\n使用下面的文件创建Gateway对象：\n\n```yaml\n# nginx-gateway.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: nginx-proxy\n  namespace: istio-app\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"nginx.example.com\"\n```\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f nginx-gateway.yaml\n```\n\n\n\n<br>\n\n## 创建VirtualService对象\n\n使用下面的文件创建VirtualService对象：\n\n```yaml\n# nginx-virtualservice.yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: nginx-vs\n  namespace: istio-app\nspec:\n  hosts:\n  - \"nginx.example.com\"\n  gateways:\n  - nginx-proxy\n  http:\n  - route:\n    - destination:\n        host: nginx-service\n        port:\n          number: 80\n```\n\n\n\n注意这里的`gateways`名称需要和上边定义的gateway资源名称一致；`destination.host`指定的是服务service名称；\n\n\n\n执行下面的命令创建：\n\n```bash\n$ kubectl apply -f nginx-virtualservice.yaml\n```\n\n\n\n<br>\n\n\n\n## 配置nginx\n\n使用nginx代理istio-ingressgateway，创建如下的配置文件：\n\n```nginx\n# nginx-example.conf\nupstream istio-80 {\n    server 10.8.138.11:30283 max_fails=3 fail_timeout=5s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name nginx.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name nginx.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/nginx.example.com_access.log main;\n    error_log /var/log/nginx/nginx.example.com_error.log;\n\n    location / {\n      proxy_http_version 1.1;\n      proxy_pass http://istio-80;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n    }\n  \n    location ~* /\\.(svn|git)/ {\n      return 404;\n    }\n}\n```\n\n- `10.8.138.11:30283`是`istio-ingressgateway`服务对外的IP和端口（http-80）；\n- `proxy_http_version 1.1;`这个不能少；\n\n\n\n如果要公网访问，即将公网IP地址和nginx服务器绑定，或本地做host解析即可。\n\n","slug":"k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务","published":1,"updated":"2020-07-21T02:44:30.134Z","_id":"ckcvc1j3o00002pn04s5hbjqm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>在istio部署完成后，会在默认的istio-system下生成一个<code>istio-ingressgateway</code>服务。这个服务和传统的<code>ingress-nginx</code>类似，但<code>istio-ingressgateway</code>允许应用一些监控和路由规则特性来管理进入集群的流量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc -n istio-system | grep istio-ingressgateway</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"ingressgateway.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"部署测试服务\"><a href=\"#部署测试服务\" class=\"headerlink\" title=\"部署测试服务\"></a>部署测试服务</h2><p>这里为了简单，就部署一个官方的nginx服务作为测试服务，首先是deployment文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后是service文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建相关的资源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保所有的服务都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc -n istio-app | grep nginx</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"check.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n<h2 id=\"创建Gateway对象\"><a href=\"#创建Gateway对象\" class=\"headerlink\" title=\"创建Gateway对象\"></a>创建Gateway对象</h2><p>使用下面的文件创建Gateway对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-gateway.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Gateway</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-proxy</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">istio:</span> <span class=\"string\">ingressgateway</span></span><br><span class=\"line\">  <span class=\"attr\">servers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span></span><br><span class=\"line\">      <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">\"nginx.example.com\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-gateway.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"创建VirtualService对象\"><a href=\"#创建VirtualService对象\" class=\"headerlink\" title=\"创建VirtualService对象\"></a>创建VirtualService对象</h2><p>使用下面的文件创建VirtualService对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-virtualservice.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-vs</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"nginx.example.com\"</span></span><br><span class=\"line\">  <span class=\"attr\">gateways:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nginx-proxy</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span></span><br><span class=\"line\">          <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意这里的<code>gateways</code>名称需要和上边定义的gateway资源名称一致；<code>destination.host</code>指定的是服务service名称；</p>\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-virtualservice.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2><p>使用nginx代理istio-ingressgateway，创建如下的配置文件：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-example.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> istio-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:30283</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> nginx.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> nginx.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/nginx.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/nginx.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://istio-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>10.8.138.11:30283</code>是<code>istio-ingressgateway</code>服务对外的IP和端口（http-80）；</li>\n<li><code>proxy_http_version 1.1;</code>这个不能少；</li>\n</ul>\n<p>如果要公网访问，即将公网IP地址和nginx服务器绑定，或本地做host解析即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>在istio部署完成后，会在默认的istio-system下生成一个<code>istio-ingressgateway</code>服务。这个服务和传统的<code>ingress-nginx</code>类似，但<code>istio-ingressgateway</code>允许应用一些监控和路由规则特性来管理进入集群的流量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get svc -n istio-system | grep istio-ingressgateway</span><br></pre></td></tr></table></figure>\n\n<img src=\"ingressgateway.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n\n\n<h2 id=\"部署测试服务\"><a href=\"#部署测试服务\" class=\"headerlink\" title=\"部署测试服务\"></a>部署测试服务</h2><p>这里为了简单，就部署一个官方的nginx服务作为测试服务，首先是deployment文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:latest</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后是service文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">version:</span> <span class=\"string\">v1</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用下面的命令创建相关的资源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">$ kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保所有的服务都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc -n istio-app | grep nginx</span><br></pre></td></tr></table></figure>\n\n<img src=\"check.png\" style=\"zoom:80%;\" />\n\n\n\n<br>\n\n<h2 id=\"创建Gateway对象\"><a href=\"#创建Gateway对象\" class=\"headerlink\" title=\"创建Gateway对象\"></a>创建Gateway对象</h2><p>使用下面的文件创建Gateway对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-gateway.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Gateway</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-proxy</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">istio:</span> <span class=\"string\">ingressgateway</span></span><br><span class=\"line\">  <span class=\"attr\">servers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span></span><br><span class=\"line\">      <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">HTTP</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">\"nginx.example.com\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-gateway.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n<h2 id=\"创建VirtualService对象\"><a href=\"#创建VirtualService对象\" class=\"headerlink\" title=\"创建VirtualService对象\"></a>创建VirtualService对象</h2><p>使用下面的文件创建VirtualService对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-virtualservice.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">networking.istio.io/v1alpha3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualService</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-vs</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">istio-app</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">hosts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"nginx.example.com\"</span></span><br><span class=\"line\">  <span class=\"attr\">gateways:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nginx-proxy</span></span><br><span class=\"line\">  <span class=\"attr\">http:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">route:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">destination:</span></span><br><span class=\"line\">        <span class=\"attr\">host:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span></span><br><span class=\"line\">          <span class=\"attr\">number:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意这里的<code>gateways</code>名称需要和上边定义的gateway资源名称一致；<code>destination.host</code>指定的是服务service名称；</p>\n<p>执行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-virtualservice.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2><p>使用nginx代理istio-ingressgateway，创建如下的配置文件：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># nginx-example.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> istio-<span class=\"number\">80</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.11:30283</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> nginx.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> nginx.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/nginx.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/nginx.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> http://istio-80;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>10.8.138.11:30283</code>是<code>istio-ingressgateway</code>服务对外的IP和端口（http-80）；</li>\n<li><code>proxy_http_version 1.1;</code>这个不能少；</li>\n</ul>\n<p>如果要公网访问，即将公网IP地址和nginx服务器绑定，或本地做host解析即可。</p>\n"},{"title":"Nginx日志相关配置","date":"2020-07-22T03:07:36.000Z","description":"设置nginx中的访问日志和错误日志","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595397450412&di=ab410df2454377e6bae373a582f699bf&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-2607f748a39504d37d8827306c335eb3_1200x500.jpg","_content":"\n\n\n## 日志分类\n\nnginx中的日志分为两类：\n\n- `access.log`：访问日志，记录了用户请求的一些信息；\n- `error.log`：错误日志，记录了请求中以及服务本身发生的错误信息；\n\n\n\n<br>\n\n\n\n## 访问日志\n\n用户的每一次请求都会记录在`access.log`中，包括：客户端IP，浏览器信息，referer，请求处理时间，请求URL等；\n\n\n\n### 开启访问日志\n\n访问日志的开启可以通过`access_log`参数来指定，其格式为：\n\n```nginx\naccess_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];\n```\n\n- path 指定日志的存放位置。\n- format 指定日志的格式。默认使用预定义的combined。\n- buffer 用来指定日志写入时的缓存大小。默认是64k。\n- gzip 日志写入前先进行压缩。压缩率可以指定，从1到9数值越大压缩比越高，同时压缩的速度也越慢。默认是1。\n- flush 设置缓存的有效时间。如果超过flush指定的时间，缓存中的内容将被清空。\n- if 条件判断。如果指定的条件计算为0或空字符串，那么该请求不会写入日志。\n\n\n\n例如：\n\n```nginx\n# 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined。\naccess_log /var/logs/nginx-access.log\n\n# 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined；\n# 指定日志的缓存大小为32k，日志写入前启用gzip进行压缩，压缩比使用默认值1，缓存数据有效时间为1分钟。\naccess_log /var/logs/nginx-access.log buffer=32k gzip flush=1m\n```\n\n\n\n\n\n### 关闭访问日志\n\n访问日志关闭直接设置如下的参数即可：\n\n```nginx\naccess_log off;\n```\n\n\n\n> 在合适的作用域下设置该参数，一般用在http，server，location，limit_except下。\n\n\n\n<br>\n\n\n\n### 设置日志格式\n\nnginx可以使用`log_format`参数来指定日志的格式，例如：\n\n```nginx\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n```\n\n> 这里设置了一个格式名为`main`的日志格式\n\n\n\n设置好日志格式后，就可以在`access_log`中指定使用该日志格式：\n\n```nginx\naccess_log  /var/log/nginx/access.log  main;\n```\n\n\n\n这样输出的日志就是如下的格式：\n\n```nginx\n112.195.209.90 - - [20/Feb/2018:12:12:14 +0800] \n\"GET / HTTP/1.1\" 200 190 \"-\" \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) \nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Mobile Safari/537.36\" \"-\"\n```\n\n\n\n\n\n`log_format`支持多种变量，常见的如下：\n\n```nginx\n# 发送给客户端的总字节数\n$bytes_sent\n\n# 发送给客户端的字节数，不包括响应头的大小\n$body_bytes_sent\n\n# 连接序列号\n$connection\n\n# 当前通过连接发出的请求数量\n$connection_requests\n\n# 日志写入时间，单位为秒，精度是毫秒\n$msec\n\n# 如果请求是通过http流水线发送，则其值为\"p\"，否则为“.\"\n$pipe\n\n# 完整的原始请求行，如 \"GET / HTTP/1.1\"\n$request\n\n# 请求长度（包括请求行，请求头和请求体）\n$request_length\n\n# 请求处理时长，单位为秒，精度为毫秒，从读入客户端的第一个字节开始，直到把最后一个字符发送张客户端进行日志写入为止\n$request_time\n\n# 完整的请求地址，如 \"https://daojia.com/\"\n$request_uri\n\n# 响应状态码\n$status\n\n# 标准格式的本地时间,形如“2017-05-24T18:31:27+08:00”\n$time_iso8601\n\n# 通用日志格式下的本地时间，如\"24/May/2017:18:31:27 +0800\"\n$time_local\n\n# 请求地址，即浏览器中输入的地址（IP或域名）\n$http_host\n\n# 请求的referer地址。\n$http_referer\n\n# 客户端浏览器信息。\n$http_user_agent\n\n# 当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置。\n$http_x_forwarded_for\n\n# 客户端IP\n$remote_addr\n\n# 客户端用户名称，针对启用了用户认证的请求\n$remote_user\n\n# upstream状态\n$upstream_status\n\n# 后台upstream的地址，即真实服务器的地址\n$upstream_addr\n\n# 请求过程中，upstream响应时间\n$upstream_response_time\n\n# SSL协议版本\n$ssl_protocol\n```\n\n\n\n<br>\n\n\n\n## 错误日志\n\n错误日志在Nginx中是通过error_log指令实现的。该指令记录服务器和请求处理过程中的错误信息。\n\n\n\n### 开启错误日志\n\n错误日志开启格式如下：\n\n```nginx\nerror_log file [level];\n```\n\n- file指定错误日志存放位置；\n- level指定错误日志级别；\n\n\n\n> level可以是debug, info, notice, warn, error, crit, alert,emerg中的任意值（级别从低到高）。只有日志的错误级别等于或高于level指定的值才会写入错误日志中。默认值是error。\n\n\n\n**错误日志不宜设置的太低，否则会产生大量的磁盘IO**\n\n\n\n配置实例如下：\n\n```nginx\n# 错误日志存放在/var/log/nginx/error.log，级别为warn\nerror_log  /var/log/nginx/error.log warn;\n```\n\n\n\n### 关闭错误日志\n\n关闭错误日志，将`error_log`注释即可。\n\n\n\n","source":"_posts/Nginx日志相关配置.md","raw":"---\ntitle: Nginx日志相关配置\ndate: 2020-07-22 11:07:36\ntags:\n- Nginx\ncategories: Nginx\ndescription: 设置nginx中的访问日志和错误日志\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595397450412&di=ab410df2454377e6bae373a582f699bf&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-2607f748a39504d37d8827306c335eb3_1200x500.jpg\n---\n\n\n\n## 日志分类\n\nnginx中的日志分为两类：\n\n- `access.log`：访问日志，记录了用户请求的一些信息；\n- `error.log`：错误日志，记录了请求中以及服务本身发生的错误信息；\n\n\n\n<br>\n\n\n\n## 访问日志\n\n用户的每一次请求都会记录在`access.log`中，包括：客户端IP，浏览器信息，referer，请求处理时间，请求URL等；\n\n\n\n### 开启访问日志\n\n访问日志的开启可以通过`access_log`参数来指定，其格式为：\n\n```nginx\naccess_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];\n```\n\n- path 指定日志的存放位置。\n- format 指定日志的格式。默认使用预定义的combined。\n- buffer 用来指定日志写入时的缓存大小。默认是64k。\n- gzip 日志写入前先进行压缩。压缩率可以指定，从1到9数值越大压缩比越高，同时压缩的速度也越慢。默认是1。\n- flush 设置缓存的有效时间。如果超过flush指定的时间，缓存中的内容将被清空。\n- if 条件判断。如果指定的条件计算为0或空字符串，那么该请求不会写入日志。\n\n\n\n例如：\n\n```nginx\n# 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined。\naccess_log /var/logs/nginx-access.log\n\n# 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined；\n# 指定日志的缓存大小为32k，日志写入前启用gzip进行压缩，压缩比使用默认值1，缓存数据有效时间为1分钟。\naccess_log /var/logs/nginx-access.log buffer=32k gzip flush=1m\n```\n\n\n\n\n\n### 关闭访问日志\n\n访问日志关闭直接设置如下的参数即可：\n\n```nginx\naccess_log off;\n```\n\n\n\n> 在合适的作用域下设置该参数，一般用在http，server，location，limit_except下。\n\n\n\n<br>\n\n\n\n### 设置日志格式\n\nnginx可以使用`log_format`参数来指定日志的格式，例如：\n\n```nginx\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n```\n\n> 这里设置了一个格式名为`main`的日志格式\n\n\n\n设置好日志格式后，就可以在`access_log`中指定使用该日志格式：\n\n```nginx\naccess_log  /var/log/nginx/access.log  main;\n```\n\n\n\n这样输出的日志就是如下的格式：\n\n```nginx\n112.195.209.90 - - [20/Feb/2018:12:12:14 +0800] \n\"GET / HTTP/1.1\" 200 190 \"-\" \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) \nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Mobile Safari/537.36\" \"-\"\n```\n\n\n\n\n\n`log_format`支持多种变量，常见的如下：\n\n```nginx\n# 发送给客户端的总字节数\n$bytes_sent\n\n# 发送给客户端的字节数，不包括响应头的大小\n$body_bytes_sent\n\n# 连接序列号\n$connection\n\n# 当前通过连接发出的请求数量\n$connection_requests\n\n# 日志写入时间，单位为秒，精度是毫秒\n$msec\n\n# 如果请求是通过http流水线发送，则其值为\"p\"，否则为“.\"\n$pipe\n\n# 完整的原始请求行，如 \"GET / HTTP/1.1\"\n$request\n\n# 请求长度（包括请求行，请求头和请求体）\n$request_length\n\n# 请求处理时长，单位为秒，精度为毫秒，从读入客户端的第一个字节开始，直到把最后一个字符发送张客户端进行日志写入为止\n$request_time\n\n# 完整的请求地址，如 \"https://daojia.com/\"\n$request_uri\n\n# 响应状态码\n$status\n\n# 标准格式的本地时间,形如“2017-05-24T18:31:27+08:00”\n$time_iso8601\n\n# 通用日志格式下的本地时间，如\"24/May/2017:18:31:27 +0800\"\n$time_local\n\n# 请求地址，即浏览器中输入的地址（IP或域名）\n$http_host\n\n# 请求的referer地址。\n$http_referer\n\n# 客户端浏览器信息。\n$http_user_agent\n\n# 当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置。\n$http_x_forwarded_for\n\n# 客户端IP\n$remote_addr\n\n# 客户端用户名称，针对启用了用户认证的请求\n$remote_user\n\n# upstream状态\n$upstream_status\n\n# 后台upstream的地址，即真实服务器的地址\n$upstream_addr\n\n# 请求过程中，upstream响应时间\n$upstream_response_time\n\n# SSL协议版本\n$ssl_protocol\n```\n\n\n\n<br>\n\n\n\n## 错误日志\n\n错误日志在Nginx中是通过error_log指令实现的。该指令记录服务器和请求处理过程中的错误信息。\n\n\n\n### 开启错误日志\n\n错误日志开启格式如下：\n\n```nginx\nerror_log file [level];\n```\n\n- file指定错误日志存放位置；\n- level指定错误日志级别；\n\n\n\n> level可以是debug, info, notice, warn, error, crit, alert,emerg中的任意值（级别从低到高）。只有日志的错误级别等于或高于level指定的值才会写入错误日志中。默认值是error。\n\n\n\n**错误日志不宜设置的太低，否则会产生大量的磁盘IO**\n\n\n\n配置实例如下：\n\n```nginx\n# 错误日志存放在/var/log/nginx/error.log，级别为warn\nerror_log  /var/log/nginx/error.log warn;\n```\n\n\n\n### 关闭错误日志\n\n关闭错误日志，将`error_log`注释即可。\n\n\n\n","slug":"Nginx日志相关配置","published":1,"updated":"2020-08-04T09:25:00.894Z","_id":"ckcwxvw5a0000w8n0dyg94j27","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"日志分类\"><a href=\"#日志分类\" class=\"headerlink\" title=\"日志分类\"></a>日志分类</h2><p>nginx中的日志分为两类：</p>\n<ul>\n<li><code>access.log</code>：访问日志，记录了用户请求的一些信息；</li>\n<li><code>error.log</code>：错误日志，记录了请求中以及服务本身发生的错误信息；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"访问日志\"><a href=\"#访问日志\" class=\"headerlink\" title=\"访问日志\"></a>访问日志</h2><p>用户的每一次请求都会记录在<code>access.log</code>中，包括：客户端IP，浏览器信息，referer，请求处理时间，请求URL等；</p>\n<h3 id=\"开启访问日志\"><a href=\"#开启访问日志\" class=\"headerlink\" title=\"开启访问日志\"></a>开启访问日志</h3><p>访问日志的开启可以通过<code>access_log</code>参数来指定，其格式为：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">access_log</span> path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>path 指定日志的存放位置。</li>\n<li>format 指定日志的格式。默认使用预定义的combined。</li>\n<li>buffer 用来指定日志写入时的缓存大小。默认是64k。</li>\n<li>gzip 日志写入前先进行压缩。压缩率可以指定，从1到9数值越大压缩比越高，同时压缩的速度也越慢。默认是1。</li>\n<li>flush 设置缓存的有效时间。如果超过flush指定的时间，缓存中的内容将被清空。</li>\n<li>if 条件判断。如果指定的条件计算为0或空字符串，那么该请求不会写入日志。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined。</span></span><br><span class=\"line\"><span class=\"attribute\">access_log</span> /var/logs/nginx-access.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined；</span></span><br><span class=\"line\"><span class=\"comment\"># 指定日志的缓存大小为32k，日志写入前启用gzip进行压缩，压缩比使用默认值1，缓存数据有效时间为1分钟。</span></span><br><span class=\"line\">access_log /var/logs/nginx-access.log buffer=<span class=\"number\">32k</span> gzip flush=<span class=\"number\">1m</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"关闭访问日志\"><a href=\"#关闭访问日志\" class=\"headerlink\" title=\"关闭访问日志\"></a>关闭访问日志</h3><p>访问日志关闭直接设置如下的参数即可：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在合适的作用域下设置该参数，一般用在http，server，location，limit_except下。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"设置日志格式\"><a href=\"#设置日志格式\" class=\"headerlink\" title=\"设置日志格式\"></a>设置日志格式</h3><p>nginx可以使用<code>log_format</code>参数来指定日志的格式，例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log_format</span>  main  <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] \"<span class=\"variable\">$request</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> \"<span class=\"variable\">$http_referer</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"<span class=\"variable\">$http_user_agent</span>\" \"<span class=\"variable\">$http_x_forwarded_for</span>\"'</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里设置了一个格式名为<code>main</code>的日志格式</p>\n</blockquote>\n<p>设置好日志格式后，就可以在<code>access_log</code>中指定使用该日志格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样输出的日志就是如下的格式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">112.195.209.90 - - [20/Feb/2018:12:12:14 +0800] </span><br><span class=\"line\">\"GET / HTTP/1.1\" 200 190 \"-\" \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) </span><br><span class=\"line\">AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Mobile Safari/537.36\" \"-\"</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><code>log_format</code>支持多种变量，常见的如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发送给客户端的总字节数</span></span><br><span class=\"line\">$bytes_sent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送给客户端的字节数，不包括响应头的大小</span></span><br><span class=\"line\">$body_bytes_sent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接序列号</span></span><br><span class=\"line\">$connection</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前通过连接发出的请求数量</span></span><br><span class=\"line\">$connection_requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志写入时间，单位为秒，精度是毫秒</span></span><br><span class=\"line\">$msec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果请求是通过http流水线发送，则其值为\"p\"，否则为“.\"</span></span><br><span class=\"line\">$pipe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 完整的原始请求行，如 \"GET / HTTP/1.1\"</span></span><br><span class=\"line\">$request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求长度（包括请求行，请求头和请求体）</span></span><br><span class=\"line\">$request_length</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求处理时长，单位为秒，精度为毫秒，从读入客户端的第一个字节开始，直到把最后一个字符发送张客户端进行日志写入为止</span></span><br><span class=\"line\">$request_time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 完整的请求地址，如 \"https://daojia.com/\"</span></span><br><span class=\"line\">$request_uri</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应状态码</span></span><br><span class=\"line\">$status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 标准格式的本地时间,形如“2017-05-24T18:31:27+08:00”</span></span><br><span class=\"line\">$time_iso8601</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用日志格式下的本地时间，如\"24/May/2017:18:31:27 +0800\"</span></span><br><span class=\"line\">$time_local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求地址，即浏览器中输入的地址（IP或域名）</span></span><br><span class=\"line\">$http_host</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求的referer地址。</span></span><br><span class=\"line\">$http_referer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端浏览器信息。</span></span><br><span class=\"line\">$http_user_agent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置。</span></span><br><span class=\"line\">$http_x_forwarded_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端IP</span></span><br><span class=\"line\">$remote_addr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端用户名称，针对启用了用户认证的请求</span></span><br><span class=\"line\">$remote_user</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># upstream状态</span></span><br><span class=\"line\">$upstream_status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台upstream的地址，即真实服务器的地址</span></span><br><span class=\"line\">$upstream_addr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求过程中，upstream响应时间</span></span><br><span class=\"line\">$upstream_response_time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SSL协议版本</span></span><br><span class=\"line\">$ssl_protocol</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h2><p>错误日志在Nginx中是通过error_log指令实现的。该指令记录服务器和请求处理过程中的错误信息。</p>\n<h3 id=\"开启错误日志\"><a href=\"#开启错误日志\" class=\"headerlink\" title=\"开启错误日志\"></a>开启错误日志</h3><p>错误日志开启格式如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">error_log</span> file [level];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file指定错误日志存放位置；</li>\n<li>level指定错误日志级别；</li>\n</ul>\n<blockquote>\n<p>level可以是debug, info, notice, warn, error, crit, alert,emerg中的任意值（级别从低到高）。只有日志的错误级别等于或高于level指定的值才会写入错误日志中。默认值是error。</p>\n</blockquote>\n<p><strong>错误日志不宜设置的太低，否则会产生大量的磁盘IO</strong></p>\n<p>配置实例如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误日志存放在/var/log/nginx/error.log，级别为warn</span></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"literal\">warn</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"关闭错误日志\"><a href=\"#关闭错误日志\" class=\"headerlink\" title=\"关闭错误日志\"></a>关闭错误日志</h3><p>关闭错误日志，将<code>error_log</code>注释即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"日志分类\"><a href=\"#日志分类\" class=\"headerlink\" title=\"日志分类\"></a>日志分类</h2><p>nginx中的日志分为两类：</p>\n<ul>\n<li><code>access.log</code>：访问日志，记录了用户请求的一些信息；</li>\n<li><code>error.log</code>：错误日志，记录了请求中以及服务本身发生的错误信息；</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"访问日志\"><a href=\"#访问日志\" class=\"headerlink\" title=\"访问日志\"></a>访问日志</h2><p>用户的每一次请求都会记录在<code>access.log</code>中，包括：客户端IP，浏览器信息，referer，请求处理时间，请求URL等；</p>\n<h3 id=\"开启访问日志\"><a href=\"#开启访问日志\" class=\"headerlink\" title=\"开启访问日志\"></a>开启访问日志</h3><p>访问日志的开启可以通过<code>access_log</code>参数来指定，其格式为：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">access_log</span> path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>path 指定日志的存放位置。</li>\n<li>format 指定日志的格式。默认使用预定义的combined。</li>\n<li>buffer 用来指定日志写入时的缓存大小。默认是64k。</li>\n<li>gzip 日志写入前先进行压缩。压缩率可以指定，从1到9数值越大压缩比越高，同时压缩的速度也越慢。默认是1。</li>\n<li>flush 设置缓存的有效时间。如果超过flush指定的时间，缓存中的内容将被清空。</li>\n<li>if 条件判断。如果指定的条件计算为0或空字符串，那么该请求不会写入日志。</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined。</span></span><br><span class=\"line\"><span class=\"attribute\">access_log</span> /var/logs/nginx-access.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定日志的写入路径为/var/logs/nginx-access.log，日志格式使用默认的combined；</span></span><br><span class=\"line\"><span class=\"comment\"># 指定日志的缓存大小为32k，日志写入前启用gzip进行压缩，压缩比使用默认值1，缓存数据有效时间为1分钟。</span></span><br><span class=\"line\">access_log /var/logs/nginx-access.log buffer=<span class=\"number\">32k</span> gzip flush=<span class=\"number\">1m</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"关闭访问日志\"><a href=\"#关闭访问日志\" class=\"headerlink\" title=\"关闭访问日志\"></a>关闭访问日志</h3><p>访问日志关闭直接设置如下的参数即可：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在合适的作用域下设置该参数，一般用在http，server，location，limit_except下。</p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"设置日志格式\"><a href=\"#设置日志格式\" class=\"headerlink\" title=\"设置日志格式\"></a>设置日志格式</h3><p>nginx可以使用<code>log_format</code>参数来指定日志的格式，例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log_format</span>  main  <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] \"<span class=\"variable\">$request</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'<span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> \"<span class=\"variable\">$http_referer</span>\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"<span class=\"variable\">$http_user_agent</span>\" \"<span class=\"variable\">$http_x_forwarded_for</span>\"'</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里设置了一个格式名为<code>main</code>的日志格式</p>\n</blockquote>\n<p>设置好日志格式后，就可以在<code>access_log</code>中指定使用该日志格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">access_log</span>  /var/log/nginx/access.log  main;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样输出的日志就是如下的格式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">112.195.209.90 - - [20/Feb/2018:12:12:14 +0800] </span><br><span class=\"line\">\"GET / HTTP/1.1\" 200 190 \"-\" \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) </span><br><span class=\"line\">AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Mobile Safari/537.36\" \"-\"</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><code>log_format</code>支持多种变量，常见的如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发送给客户端的总字节数</span></span><br><span class=\"line\">$bytes_sent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送给客户端的字节数，不包括响应头的大小</span></span><br><span class=\"line\">$body_bytes_sent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接序列号</span></span><br><span class=\"line\">$connection</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前通过连接发出的请求数量</span></span><br><span class=\"line\">$connection_requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日志写入时间，单位为秒，精度是毫秒</span></span><br><span class=\"line\">$msec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果请求是通过http流水线发送，则其值为\"p\"，否则为“.\"</span></span><br><span class=\"line\">$pipe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 完整的原始请求行，如 \"GET / HTTP/1.1\"</span></span><br><span class=\"line\">$request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求长度（包括请求行，请求头和请求体）</span></span><br><span class=\"line\">$request_length</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求处理时长，单位为秒，精度为毫秒，从读入客户端的第一个字节开始，直到把最后一个字符发送张客户端进行日志写入为止</span></span><br><span class=\"line\">$request_time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 完整的请求地址，如 \"https://daojia.com/\"</span></span><br><span class=\"line\">$request_uri</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 响应状态码</span></span><br><span class=\"line\">$status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 标准格式的本地时间,形如“2017-05-24T18:31:27+08:00”</span></span><br><span class=\"line\">$time_iso8601</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通用日志格式下的本地时间，如\"24/May/2017:18:31:27 +0800\"</span></span><br><span class=\"line\">$time_local</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求地址，即浏览器中输入的地址（IP或域名）</span></span><br><span class=\"line\">$http_host</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求的referer地址。</span></span><br><span class=\"line\">$http_referer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端浏览器信息。</span></span><br><span class=\"line\">$http_user_agent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置。</span></span><br><span class=\"line\">$http_x_forwarded_for</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端IP</span></span><br><span class=\"line\">$remote_addr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端用户名称，针对启用了用户认证的请求</span></span><br><span class=\"line\">$remote_user</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># upstream状态</span></span><br><span class=\"line\">$upstream_status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台upstream的地址，即真实服务器的地址</span></span><br><span class=\"line\">$upstream_addr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求过程中，upstream响应时间</span></span><br><span class=\"line\">$upstream_response_time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SSL协议版本</span></span><br><span class=\"line\">$ssl_protocol</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h2><p>错误日志在Nginx中是通过error_log指令实现的。该指令记录服务器和请求处理过程中的错误信息。</p>\n<h3 id=\"开启错误日志\"><a href=\"#开启错误日志\" class=\"headerlink\" title=\"开启错误日志\"></a>开启错误日志</h3><p>错误日志开启格式如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">error_log</span> file [level];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file指定错误日志存放位置；</li>\n<li>level指定错误日志级别；</li>\n</ul>\n<blockquote>\n<p>level可以是debug, info, notice, warn, error, crit, alert,emerg中的任意值（级别从低到高）。只有日志的错误级别等于或高于level指定的值才会写入错误日志中。默认值是error。</p>\n</blockquote>\n<p><strong>错误日志不宜设置的太低，否则会产生大量的磁盘IO</strong></p>\n<p>配置实例如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 错误日志存放在/var/log/nginx/error.log，级别为warn</span></span><br><span class=\"line\"><span class=\"attribute\">error_log</span>  /var/log/nginx/error.log <span class=\"literal\">warn</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"关闭错误日志\"><a href=\"#关闭错误日志\" class=\"headerlink\" title=\"关闭错误日志\"></a>关闭错误日志</h3><p>关闭错误日志，将<code>error_log</code>注释即可。</p>\n"},{"title":"部署MySQL5.7","date":"2020-07-23T02:17:07.000Z","description":"使用yum和源码方式部署mysql5.7版本","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595481675366&di=58b9ad344c18403904df9669767c2588&imgtype=0&src=http%3A%2F%2Fg.hiphotos.baidu.com%2Fbaike%2Fpic%2Fitem%2F83025aafa40f4bfb1527549d064f78f0f6361800.jpg","_content":"\n\n\n# RPM方式安装\n\n> 实验环境为centos7\n\n\n\n### 卸载旧版本\n\n首先检查是否存在旧的mysql：\n\n```bash\n$ rpm -qa | grep -i mysql\n```\n\n\n\n如果存在就需要卸载：\n\n```bash\n$ rpm -ev [旧的mysql包名]\n```\n\n\n\n### 下载\n\n下载mysql5.7官方prm包\n\n```bash\n$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar\n```\n\n\n\n然后解压，可以看到解压出如下的一些安装包：\n\n```bash\n$ tar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar \nmysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-5.7.26-1.el7.x86_64.rpm\nmysql-community-test-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm\nmysql-community-common-5.7.26-1.el7.x86_64.rpm\nmysql-community-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-client-5.7.26-1.el7.x86_64.rpm\nmysql-community-server-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm\n```\n\n- mysql-community-client：客户端的安装包；\n- mysql-community-server：服务端的安装包；\n- mysql-community-devel：包含开发库文件的安装包；\n- mysql-community-test：包含测试的安装包；\n- mysql-community-embedded：嵌入式mysql安装包；\n\n\n\n### 安装\n\n一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：\n\n```bash\n$ rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm\n$ rpm -ivh mysql-community-libs*\n$ rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm\n$ rpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm\n$ yum install -y perl libaio libaio-devel numactl net-tools\n$ rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm\n```\n\n\n\n### 启动服务\n\n启动mysql服务\n\n```bash\n$ systemctl start mysqld.service\n```\n\n\n\n### 获取初始密码\n\n查看mysql日志，找到类似下面的这一行：\n\n```bash\n$ cat /var/log/mysql.log\n[Note] A temporary password is generated for root@localhost: <wqB!ebdk6b4\n```\n\n> mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码\n\n\n\n### 修改密码并连接\n\n可以通过下面的命令修改root密码并删除测试数据库和匿名用户\n\n```bash\n# 设置root用户密码\n$ mysqladmin -u root -p'<wqB!ebdk6b4' password Root123?\n# 删除测试数据库和匿名用户\n$ mysql_secure_installation\n```\n\n> mysql密码需要符合一定的密码规则，否则设置会失败\n\n\n\n下面就可以连接mysql了：\n\n```bash\n$ mysql -uroot -pRoot123?\n```\n\n\n\n<br>\n\n\n\n# 源码方式安装\n\n### 依赖安装\n\n安装依赖包：\n\n```bash\n$ yum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel\n```\n\n\n\n### 下载源码包\n\n首先下载mysql5.7源码包：\n\n```bash\n$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz\n```\n\n\n\n### 创建安装目录\n\n创建安装目录和数据目录，安装目录一般放在 `/usr/local/` 下，数据目录使用单独的磁盘：\n\n```bash\n$ mkdir /usr/local/mysql\n$ mkdir -p /data/3306/data\n$ mkdir -p /data/3306/binlog\n```\n\n\n\n### 安装boost库\n\n> 从mysql5.7开始，boost库是必须依赖的\n\n```bash\n$ mkdir /usr/local/boost\n$ cd /usr/local/boost\n$ wget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz\n$ tar zxf boost_1_59_0.tar.gz\n```\n\n\n\n### 编译安装mysql\n\n编译源码：\n\n```bash\n$ tar zxf mysql-boost-5.7.26.tar.gz\n$ cd mysql-5.7.26/\n$ cmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\   \n-DMYSQL_DATADIR=/data/3306/data \\\n-DSYSCONFDIR=/data/3306 \\\n-DWITH_MYISAM_STORAGE_ENGINE=1 \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_MEMORY_STORAGE_ENGINE=1 \\\n-DWITH_READLINE=1 \\\n-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\\n-DMYSQL_TCP_PORT=3306 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_PARTITION_STORAGE_ENGINE=1 \\\n-DEXTRA_CHARSETS=all \\\n-DDEFAULT_CHARSET=utf8mb4 \\\n-DDEFAULT_COLLATION=utf8mb4_general_ci \\\n-DWITH_BOOST=/usr/local/boost\n```\n\n- `DCMAKE_INSTALL_PREFIX` ：安装的根目录；\n- `DMYSQL_DATADIR`：数据目录；\n- `DSYSCONFDIR`：配置文件目录；\n- `DWITH_MYISAM_STORAGE_ENGINE=1`：编译myisam存储引擎，默认的存储引擎，不加也可以；\n- `DWITH_INNOBASE_STORAGE_ENGINE=1`：支持InnoDB存储引擎，这个也是默认安装的；\n- `DWITH_MEMORY_STORAGE_ENGINE=1`： 持MEMORY引擎；\n- `DWITH_READLINE=1`：使用readline功能；\n- `DMYSQL_UNIX_ADDR`：sock文件存放目录；\n- `DMYSQL_TCP_PORT=3306` ：数据库端口；\n- `DENABLED_LOCAL_INFILE=1`：可以使用load data infile命令从本地导入文件；\n- `DWITH_PARTITION_STORAGE_ENGINE=1`： 安装数据库分区；\n- `DEXTRA_CHARSETS=all`： 支持所有字符集；\n- `DDEFAULT_CHARSET=utf8mb4`：默认字符集；\n- `DDEFAULT_COLLATION=utf8mb4_general_ci` ：默认效验字符集排序规则，要和`DDEFAULT_CHARSET`一起用；\n- `DWITH_BOOST=/usr/local/boost`：指定boost库位置，从5.7.5开始Boost库是必需的；\n\n\n\n编译成功后进行安装：\n\n```bash\n$ make && make install\n$ make clean\n```\n\n\n\n### 添加用户\n\n```bash\n$ groupadd mysql\n$ useradd -g mysql mysql\n$ chown -R mysql:mysql /usr/local/mysql\n$ chown -R mysql:mysql /data/3306\n```\n\n\n\n\n\n### 初始化mysql\n\n```bash\n$ cd /usr/local/mysql\n$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/3306/data/ \n```\n\n\n\n观察初始化输出，找到类似于如下的一行：\n\n```\n2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &leFGSPpM4sC\n```\n\n这个是初始化设置的mysql默认root密码，需要暂时记住。\n\n\n\n### 环境设置\n\n设置环境变量：\n\n```bash\n$ echo \"export PATH=$PATH:/usr/local/mysql/bin\" >> /etc/profile\n$ source /etc/profile\n```\n\n\n\n设置mysql启动文件：\n\n```bash\n$ cd /usr/local/mysql/support-files\n$ cp mysql.server /etc/init.d/mysqld\n$ chmod 755 /etc/init.d/mysqld\n```\n\n\n\n修改mysql启动脚本，设置数据目录和根目录：\n\n```bash\n$ vim /etc/init.d/mysqld\n\n// 修改下面的项目指定根目录\nbasedir=/usr/local/mysql/\ndatadir=/data/3306/data/\n```\n\n\n\n修改配置文件：\n\n```bash\n$ vim /etc/my.cnf\n\n// 修改为如下的形式\n[mysqld]\nbasedir=/usr/local/mysql\ndatadir=/data/3306/data/\nsocket=/data/3306/mysql.sock\nuser=mysql\ntmpdir=/data/3306/\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\n[mysqld_safe]\nlog-error=/data/3306/data/error.log\npid-file=/data/3306/data/mysql.pid\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\n```\n\n\n\n### 启动服务并连接\n\n启动mysql：\n\n```bash\n$ service mysqld start \n$ netstat -ntlp | grep mysqld\ntcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld        \n```\n\n\n\n现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：\n\n```bash\n# 设置root用户密码\n$ mysqladmin -u root -p'&leFGSPpM4sC' password Root123?\n# 删除测试数据库和匿名用户\n$ mysql_secure_installation\n$ mysql -uroot -pRoot123?\n```\n\n","source":"_posts/部署MySQL5-7.md","raw":"---\ntitle: 部署MySQL5.7\ndate: 2020-07-23 10:17:07\ntags:\n- MySQL\ncategories:\n- 数据库\n- MySQL\ndescription: 使用yum和源码方式部署mysql5.7版本\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595481675366&di=58b9ad344c18403904df9669767c2588&imgtype=0&src=http%3A%2F%2Fg.hiphotos.baidu.com%2Fbaike%2Fpic%2Fitem%2F83025aafa40f4bfb1527549d064f78f0f6361800.jpg\n---\n\n\n\n# RPM方式安装\n\n> 实验环境为centos7\n\n\n\n### 卸载旧版本\n\n首先检查是否存在旧的mysql：\n\n```bash\n$ rpm -qa | grep -i mysql\n```\n\n\n\n如果存在就需要卸载：\n\n```bash\n$ rpm -ev [旧的mysql包名]\n```\n\n\n\n### 下载\n\n下载mysql5.7官方prm包\n\n```bash\n$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar\n```\n\n\n\n然后解压，可以看到解压出如下的一些安装包：\n\n```bash\n$ tar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar \nmysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-5.7.26-1.el7.x86_64.rpm\nmysql-community-test-5.7.26-1.el7.x86_64.rpm\nmysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm\nmysql-community-common-5.7.26-1.el7.x86_64.rpm\nmysql-community-devel-5.7.26-1.el7.x86_64.rpm\nmysql-community-client-5.7.26-1.el7.x86_64.rpm\nmysql-community-server-5.7.26-1.el7.x86_64.rpm\nmysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm\n```\n\n- mysql-community-client：客户端的安装包；\n- mysql-community-server：服务端的安装包；\n- mysql-community-devel：包含开发库文件的安装包；\n- mysql-community-test：包含测试的安装包；\n- mysql-community-embedded：嵌入式mysql安装包；\n\n\n\n### 安装\n\n一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：\n\n```bash\n$ rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm\n$ rpm -ivh mysql-community-libs*\n$ rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm\n$ rpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm\n$ yum install -y perl libaio libaio-devel numactl net-tools\n$ rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm\n```\n\n\n\n### 启动服务\n\n启动mysql服务\n\n```bash\n$ systemctl start mysqld.service\n```\n\n\n\n### 获取初始密码\n\n查看mysql日志，找到类似下面的这一行：\n\n```bash\n$ cat /var/log/mysql.log\n[Note] A temporary password is generated for root@localhost: <wqB!ebdk6b4\n```\n\n> mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码\n\n\n\n### 修改密码并连接\n\n可以通过下面的命令修改root密码并删除测试数据库和匿名用户\n\n```bash\n# 设置root用户密码\n$ mysqladmin -u root -p'<wqB!ebdk6b4' password Root123?\n# 删除测试数据库和匿名用户\n$ mysql_secure_installation\n```\n\n> mysql密码需要符合一定的密码规则，否则设置会失败\n\n\n\n下面就可以连接mysql了：\n\n```bash\n$ mysql -uroot -pRoot123?\n```\n\n\n\n<br>\n\n\n\n# 源码方式安装\n\n### 依赖安装\n\n安装依赖包：\n\n```bash\n$ yum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel\n```\n\n\n\n### 下载源码包\n\n首先下载mysql5.7源码包：\n\n```bash\n$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz\n```\n\n\n\n### 创建安装目录\n\n创建安装目录和数据目录，安装目录一般放在 `/usr/local/` 下，数据目录使用单独的磁盘：\n\n```bash\n$ mkdir /usr/local/mysql\n$ mkdir -p /data/3306/data\n$ mkdir -p /data/3306/binlog\n```\n\n\n\n### 安装boost库\n\n> 从mysql5.7开始，boost库是必须依赖的\n\n```bash\n$ mkdir /usr/local/boost\n$ cd /usr/local/boost\n$ wget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz\n$ tar zxf boost_1_59_0.tar.gz\n```\n\n\n\n### 编译安装mysql\n\n编译源码：\n\n```bash\n$ tar zxf mysql-boost-5.7.26.tar.gz\n$ cd mysql-5.7.26/\n$ cmake \\\n-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\   \n-DMYSQL_DATADIR=/data/3306/data \\\n-DSYSCONFDIR=/data/3306 \\\n-DWITH_MYISAM_STORAGE_ENGINE=1 \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_MEMORY_STORAGE_ENGINE=1 \\\n-DWITH_READLINE=1 \\\n-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\\n-DMYSQL_TCP_PORT=3306 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_PARTITION_STORAGE_ENGINE=1 \\\n-DEXTRA_CHARSETS=all \\\n-DDEFAULT_CHARSET=utf8mb4 \\\n-DDEFAULT_COLLATION=utf8mb4_general_ci \\\n-DWITH_BOOST=/usr/local/boost\n```\n\n- `DCMAKE_INSTALL_PREFIX` ：安装的根目录；\n- `DMYSQL_DATADIR`：数据目录；\n- `DSYSCONFDIR`：配置文件目录；\n- `DWITH_MYISAM_STORAGE_ENGINE=1`：编译myisam存储引擎，默认的存储引擎，不加也可以；\n- `DWITH_INNOBASE_STORAGE_ENGINE=1`：支持InnoDB存储引擎，这个也是默认安装的；\n- `DWITH_MEMORY_STORAGE_ENGINE=1`： 持MEMORY引擎；\n- `DWITH_READLINE=1`：使用readline功能；\n- `DMYSQL_UNIX_ADDR`：sock文件存放目录；\n- `DMYSQL_TCP_PORT=3306` ：数据库端口；\n- `DENABLED_LOCAL_INFILE=1`：可以使用load data infile命令从本地导入文件；\n- `DWITH_PARTITION_STORAGE_ENGINE=1`： 安装数据库分区；\n- `DEXTRA_CHARSETS=all`： 支持所有字符集；\n- `DDEFAULT_CHARSET=utf8mb4`：默认字符集；\n- `DDEFAULT_COLLATION=utf8mb4_general_ci` ：默认效验字符集排序规则，要和`DDEFAULT_CHARSET`一起用；\n- `DWITH_BOOST=/usr/local/boost`：指定boost库位置，从5.7.5开始Boost库是必需的；\n\n\n\n编译成功后进行安装：\n\n```bash\n$ make && make install\n$ make clean\n```\n\n\n\n### 添加用户\n\n```bash\n$ groupadd mysql\n$ useradd -g mysql mysql\n$ chown -R mysql:mysql /usr/local/mysql\n$ chown -R mysql:mysql /data/3306\n```\n\n\n\n\n\n### 初始化mysql\n\n```bash\n$ cd /usr/local/mysql\n$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/data/3306/data/ \n```\n\n\n\n观察初始化输出，找到类似于如下的一行：\n\n```\n2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &leFGSPpM4sC\n```\n\n这个是初始化设置的mysql默认root密码，需要暂时记住。\n\n\n\n### 环境设置\n\n设置环境变量：\n\n```bash\n$ echo \"export PATH=$PATH:/usr/local/mysql/bin\" >> /etc/profile\n$ source /etc/profile\n```\n\n\n\n设置mysql启动文件：\n\n```bash\n$ cd /usr/local/mysql/support-files\n$ cp mysql.server /etc/init.d/mysqld\n$ chmod 755 /etc/init.d/mysqld\n```\n\n\n\n修改mysql启动脚本，设置数据目录和根目录：\n\n```bash\n$ vim /etc/init.d/mysqld\n\n// 修改下面的项目指定根目录\nbasedir=/usr/local/mysql/\ndatadir=/data/3306/data/\n```\n\n\n\n修改配置文件：\n\n```bash\n$ vim /etc/my.cnf\n\n// 修改为如下的形式\n[mysqld]\nbasedir=/usr/local/mysql\ndatadir=/data/3306/data/\nsocket=/data/3306/mysql.sock\nuser=mysql\ntmpdir=/data/3306/\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mariadb according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\n[mysqld_safe]\nlog-error=/data/3306/data/error.log\npid-file=/data/3306/data/mysql.pid\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\n```\n\n\n\n### 启动服务并连接\n\n启动mysql：\n\n```bash\n$ service mysqld start \n$ netstat -ntlp | grep mysqld\ntcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld        \n```\n\n\n\n现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：\n\n```bash\n# 设置root用户密码\n$ mysqladmin -u root -p'&leFGSPpM4sC' password Root123?\n# 删除测试数据库和匿名用户\n$ mysql_secure_installation\n$ mysql -uroot -pRoot123?\n```\n\n","slug":"部署MySQL5-7","published":1,"updated":"2020-08-07T05:57:53.364Z","_id":"ckcy6vl160000d7n00kei4iwj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"RPM方式安装\"><a href=\"#RPM方式安装\" class=\"headerlink\" title=\"RPM方式安装\"></a>RPM方式安装</h1><blockquote>\n<p>实验环境为centos7</p>\n</blockquote>\n<h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><p>首先检查是否存在旧的mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果存在就需要卸载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -ev [旧的mysql包名]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载mysql5.7官方prm包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后解压，可以看到解压出如下的一些安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar </span><br><span class=\"line\">mysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-test-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mysql-community-client：客户端的安装包；</li>\n<li>mysql-community-server：服务端的安装包；</li>\n<li>mysql-community-devel：包含开发库文件的安装包；</li>\n<li>mysql-community-test：包含测试的安装包；</li>\n<li>mysql-community-embedded：嵌入式mysql安装包；</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">$ rpm -ivh mysql-community-libs*</span><br><span class=\"line\">$ rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">$ rpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">$ yum install -y perl libaio libaio-devel numactl net-tools</span><br><span class=\"line\">$ rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p>启动mysql服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start mysqld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"获取初始密码\"><a href=\"#获取初始密码\" class=\"headerlink\" title=\"获取初始密码\"></a>获取初始密码</h3><p>查看mysql日志，找到类似下面的这一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /var/<span class=\"built_in\">log</span>/mysql.log</span><br><span class=\"line\">[Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: &lt;wqB!ebdk6b4</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码</p>\n</blockquote>\n<h3 id=\"修改密码并连接\"><a href=\"#修改密码并连接\" class=\"headerlink\" title=\"修改密码并连接\"></a>修改密码并连接</h3><p>可以通过下面的命令修改root密码并删除测试数据库和匿名用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">$ mysqladmin -u root -p<span class=\"string\">'&lt;wqB!ebdk6b4'</span> password Root123?</span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql密码需要符合一定的密码规则，否则设置会失败</p>\n</blockquote>\n<p>下面就可以连接mysql了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h1><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><p>安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h3><p>首先下载mysql5.7源码包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建安装目录\"><a href=\"#创建安装目录\" class=\"headerlink\" title=\"创建安装目录\"></a>创建安装目录</h3><p>创建安装目录和数据目录，安装目录一般放在 <code>/usr/local/</code> 下，数据目录使用单独的磁盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">$ mkdir -p /data/3306/data</span><br><span class=\"line\">$ mkdir -p /data/3306/binlog</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装boost库\"><a href=\"#安装boost库\" class=\"headerlink\" title=\"安装boost库\"></a>安装boost库</h3><blockquote>\n<p>从mysql5.7开始，boost库是必须依赖的</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\">$ wget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class=\"line\">$ tar zxf boost_1_59_0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"编译安装mysql\"><a href=\"#编译安装mysql\" class=\"headerlink\" title=\"编译安装mysql\"></a>编译安装mysql</h3><p>编译源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxf mysql-boost-5.7.26.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> mysql-5.7.26/</span><br><span class=\"line\">$ cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span>/mysql \\   </span><br><span class=\"line\">-DMYSQL_DATADIR=/data/3306/data \\</span><br><span class=\"line\">-DSYSCONFDIR=/data/3306 \\</span><br><span class=\"line\">-DWITH_MYISAM_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_MEMORY_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_READLINE=1 \\</span><br><span class=\"line\">-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\</span><br><span class=\"line\">-DMYSQL_TCP_PORT=3306 \\</span><br><span class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</span><br><span class=\"line\">-DWITH_PARTITION_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DEXTRA_CHARSETS=all \\</span><br><span class=\"line\">-DDEFAULT_CHARSET=utf8mb4 \\</span><br><span class=\"line\">-DDEFAULT_COLLATION=utf8mb4_general_ci \\</span><br><span class=\"line\">-DWITH_BOOST=/usr/<span class=\"built_in\">local</span>/boost</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>DCMAKE_INSTALL_PREFIX</code> ：安装的根目录；</li>\n<li><code>DMYSQL_DATADIR</code>：数据目录；</li>\n<li><code>DSYSCONFDIR</code>：配置文件目录；</li>\n<li><code>DWITH_MYISAM_STORAGE_ENGINE=1</code>：编译myisam存储引擎，默认的存储引擎，不加也可以；</li>\n<li><code>DWITH_INNOBASE_STORAGE_ENGINE=1</code>：支持InnoDB存储引擎，这个也是默认安装的；</li>\n<li><code>DWITH_MEMORY_STORAGE_ENGINE=1</code>： 持MEMORY引擎；</li>\n<li><code>DWITH_READLINE=1</code>：使用readline功能；</li>\n<li><code>DMYSQL_UNIX_ADDR</code>：sock文件存放目录；</li>\n<li><code>DMYSQL_TCP_PORT=3306</code> ：数据库端口；</li>\n<li><code>DENABLED_LOCAL_INFILE=1</code>：可以使用load data infile命令从本地导入文件；</li>\n<li><code>DWITH_PARTITION_STORAGE_ENGINE=1</code>： 安装数据库分区；</li>\n<li><code>DEXTRA_CHARSETS=all</code>： 支持所有字符集；</li>\n<li><code>DDEFAULT_CHARSET=utf8mb4</code>：默认字符集；</li>\n<li><code>DDEFAULT_COLLATION=utf8mb4_general_ci</code> ：默认效验字符集排序规则，要和<code>DDEFAULT_CHARSET</code>一起用；</li>\n<li><code>DWITH_BOOST=/usr/local/boost</code>：指定boost库位置，从5.7.5开始Boost库是必需的；</li>\n</ul>\n<p>编译成功后进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make &amp;&amp; make install</span><br><span class=\"line\">$ make clean</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ groupadd mysql</span><br><span class=\"line\">$ useradd -g mysql mysql</span><br><span class=\"line\">$ chown -R mysql:mysql /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">$ chown -R mysql:mysql /data/3306</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"初始化mysql\"><a href=\"#初始化mysql\" class=\"headerlink\" title=\"初始化mysql\"></a>初始化mysql</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/<span class=\"built_in\">local</span>/mysql --datadir=/data/3306/data/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>观察初始化输出，找到类似于如下的一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &amp;leFGSPpM4sC</span><br></pre></td></tr></table></figure>\n\n<p>这个是初始化设置的mysql默认root密码，需要暂时记住。</p>\n<h3 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h3><p>设置环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/local/mysql/bin\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置mysql启动文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql/support-files</span><br><span class=\"line\">$ cp mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">$ chmod 755 /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改mysql启动脚本，设置数据目录和根目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/init.d/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改下面的项目指定根目录</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\">datadir=/data/3306/data/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改为如下的形式</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/3306/data/</span><br><span class=\"line\">socket=/data/3306/mysql.sock</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">tmpdir=/data/3306/</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\"><span class=\"comment\"># Settings user and group are ignored when systemd is used.</span></span><br><span class=\"line\"><span class=\"comment\"># If you need to run mysqld under a different user or group,</span></span><br><span class=\"line\"><span class=\"comment\"># customize your systemd unit file for mariadb according to the</span></span><br><span class=\"line\"><span class=\"comment\"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\"><span class=\"built_in\">log</span>-error=/data/3306/data/error.log</span><br><span class=\"line\">pid-file=/data/3306/data/mysql.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># include all files from the config directory</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动服务并连接\"><a href=\"#启动服务并连接\" class=\"headerlink\" title=\"启动服务并连接\"></a>启动服务并连接</h3><p>启动mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ service mysqld start </span><br><span class=\"line\">$ netstat -ntlp | grep mysqld</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">$ mysqladmin -u root -p<span class=\"string\">'&amp;leFGSPpM4sC'</span> password Root123?</span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">$ mysql_secure_installation</span><br><span class=\"line\">$ mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RPM方式安装\"><a href=\"#RPM方式安装\" class=\"headerlink\" title=\"RPM方式安装\"></a>RPM方式安装</h1><blockquote>\n<p>实验环境为centos7</p>\n</blockquote>\n<h3 id=\"卸载旧版本\"><a href=\"#卸载旧版本\" class=\"headerlink\" title=\"卸载旧版本\"></a>卸载旧版本</h3><p>首先检查是否存在旧的mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果存在就需要卸载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -ev [旧的mysql包名]</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>下载mysql5.7官方prm包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后解压，可以看到解压出如下的一些安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar </span><br><span class=\"line\">mysql-community-embedded-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-test-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-embedded-compat-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">mysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mysql-community-client：客户端的安装包；</li>\n<li>mysql-community-server：服务端的安装包；</li>\n<li>mysql-community-devel：包含开发库文件的安装包；</li>\n<li>mysql-community-test：包含测试的安装包；</li>\n<li>mysql-community-embedded：嵌入式mysql安装包；</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>一般情况下，只需要安装client和server安装包即可，当然其也会依赖其他库的安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">$ rpm -ivh mysql-community-libs*</span><br><span class=\"line\">$ rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">$ rpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm</span><br><span class=\"line\">$ yum install -y perl libaio libaio-devel numactl net-tools</span><br><span class=\"line\">$ rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p>启动mysql服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start mysqld.service</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"获取初始密码\"><a href=\"#获取初始密码\" class=\"headerlink\" title=\"获取初始密码\"></a>获取初始密码</h3><p>查看mysql日志，找到类似下面的这一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /var/<span class=\"built_in\">log</span>/mysql.log</span><br><span class=\"line\">[Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: &lt;wqB!ebdk6b4</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql第一次运行的时候会初始化一个root用户并设置一个随机密码，这一行可以找到这个密码</p>\n</blockquote>\n<h3 id=\"修改密码并连接\"><a href=\"#修改密码并连接\" class=\"headerlink\" title=\"修改密码并连接\"></a>修改密码并连接</h3><p>可以通过下面的命令修改root密码并删除测试数据库和匿名用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">$ mysqladmin -u root -p<span class=\"string\">'&lt;wqB!ebdk6b4'</span> password Root123?</span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mysql密码需要符合一定的密码规则，否则设置会失败</p>\n</blockquote>\n<p>下面就可以连接mysql了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"源码方式安装\"><a href=\"#源码方式安装\" class=\"headerlink\" title=\"源码方式安装\"></a>源码方式安装</h1><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><p>安装依赖包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y make gcc gcc-c++ cmake bison-devel ncurses ncurses-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载源码包\"><a href=\"#下载源码包\" class=\"headerlink\" title=\"下载源码包\"></a>下载源码包</h3><p>首先下载mysql5.7源码包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-boost-5.7.26.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建安装目录\"><a href=\"#创建安装目录\" class=\"headerlink\" title=\"创建安装目录\"></a>创建安装目录</h3><p>创建安装目录和数据目录，安装目录一般放在 <code>/usr/local/</code> 下，数据目录使用单独的磁盘：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">$ mkdir -p /data/3306/data</span><br><span class=\"line\">$ mkdir -p /data/3306/binlog</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装boost库\"><a href=\"#安装boost库\" class=\"headerlink\" title=\"安装boost库\"></a>安装boost库</h3><blockquote>\n<p>从mysql5.7开始，boost库是必须依赖的</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/boost</span><br><span class=\"line\">$ wget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</span><br><span class=\"line\">$ tar zxf boost_1_59_0.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"编译安装mysql\"><a href=\"#编译安装mysql\" class=\"headerlink\" title=\"编译安装mysql\"></a>编译安装mysql</h3><p>编译源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxf mysql-boost-5.7.26.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> mysql-5.7.26/</span><br><span class=\"line\">$ cmake \\</span><br><span class=\"line\">-DCMAKE_INSTALL_PREFIX=/usr/<span class=\"built_in\">local</span>/mysql \\   </span><br><span class=\"line\">-DMYSQL_DATADIR=/data/3306/data \\</span><br><span class=\"line\">-DSYSCONFDIR=/data/3306 \\</span><br><span class=\"line\">-DWITH_MYISAM_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_MEMORY_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DWITH_READLINE=1 \\</span><br><span class=\"line\">-DMYSQL_UNIX_ADDR=/data/3306/mysql.sock \\</span><br><span class=\"line\">-DMYSQL_TCP_PORT=3306 \\</span><br><span class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</span><br><span class=\"line\">-DWITH_PARTITION_STORAGE_ENGINE=1 \\</span><br><span class=\"line\">-DEXTRA_CHARSETS=all \\</span><br><span class=\"line\">-DDEFAULT_CHARSET=utf8mb4 \\</span><br><span class=\"line\">-DDEFAULT_COLLATION=utf8mb4_general_ci \\</span><br><span class=\"line\">-DWITH_BOOST=/usr/<span class=\"built_in\">local</span>/boost</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>DCMAKE_INSTALL_PREFIX</code> ：安装的根目录；</li>\n<li><code>DMYSQL_DATADIR</code>：数据目录；</li>\n<li><code>DSYSCONFDIR</code>：配置文件目录；</li>\n<li><code>DWITH_MYISAM_STORAGE_ENGINE=1</code>：编译myisam存储引擎，默认的存储引擎，不加也可以；</li>\n<li><code>DWITH_INNOBASE_STORAGE_ENGINE=1</code>：支持InnoDB存储引擎，这个也是默认安装的；</li>\n<li><code>DWITH_MEMORY_STORAGE_ENGINE=1</code>： 持MEMORY引擎；</li>\n<li><code>DWITH_READLINE=1</code>：使用readline功能；</li>\n<li><code>DMYSQL_UNIX_ADDR</code>：sock文件存放目录；</li>\n<li><code>DMYSQL_TCP_PORT=3306</code> ：数据库端口；</li>\n<li><code>DENABLED_LOCAL_INFILE=1</code>：可以使用load data infile命令从本地导入文件；</li>\n<li><code>DWITH_PARTITION_STORAGE_ENGINE=1</code>： 安装数据库分区；</li>\n<li><code>DEXTRA_CHARSETS=all</code>： 支持所有字符集；</li>\n<li><code>DDEFAULT_CHARSET=utf8mb4</code>：默认字符集；</li>\n<li><code>DDEFAULT_COLLATION=utf8mb4_general_ci</code> ：默认效验字符集排序规则，要和<code>DDEFAULT_CHARSET</code>一起用；</li>\n<li><code>DWITH_BOOST=/usr/local/boost</code>：指定boost库位置，从5.7.5开始Boost库是必需的；</li>\n</ul>\n<p>编译成功后进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make &amp;&amp; make install</span><br><span class=\"line\">$ make clean</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加用户\"><a href=\"#添加用户\" class=\"headerlink\" title=\"添加用户\"></a>添加用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ groupadd mysql</span><br><span class=\"line\">$ useradd -g mysql mysql</span><br><span class=\"line\">$ chown -R mysql:mysql /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">$ chown -R mysql:mysql /data/3306</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"初始化mysql\"><a href=\"#初始化mysql\" class=\"headerlink\" title=\"初始化mysql\"></a>初始化mysql</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/<span class=\"built_in\">local</span>/mysql --datadir=/data/3306/data/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>观察初始化输出，找到类似于如下的一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-06-29T11:32:37.238756Z 1 [Note] A temporary password is generated for root@localhost: &amp;leFGSPpM4sC</span><br></pre></td></tr></table></figure>\n\n<p>这个是初始化设置的mysql默认root密码，需要暂时记住。</p>\n<h3 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h3><p>设置环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"export PATH=<span class=\"variable\">$PATH</span>:/usr/local/mysql/bin\"</span> &gt;&gt; /etc/profile</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置mysql启动文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/mysql/support-files</span><br><span class=\"line\">$ cp mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">$ chmod 755 /etc/init.d/mysqld</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改mysql启动脚本，设置数据目录和根目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/init.d/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改下面的项目指定根目录</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql/</span><br><span class=\"line\">datadir=/data/3306/data/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改为如下的形式</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\">datadir=/data/3306/data/</span><br><span class=\"line\">socket=/data/3306/mysql.sock</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">tmpdir=/data/3306/</span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\"><span class=\"comment\"># Settings user and group are ignored when systemd is used.</span></span><br><span class=\"line\"><span class=\"comment\"># If you need to run mysqld under a different user or group,</span></span><br><span class=\"line\"><span class=\"comment\"># customize your systemd unit file for mariadb according to the</span></span><br><span class=\"line\"><span class=\"comment\"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\"><span class=\"built_in\">log</span>-error=/data/3306/data/error.log</span><br><span class=\"line\">pid-file=/data/3306/data/mysql.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># include all files from the config directory</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动服务并连接\"><a href=\"#启动服务并连接\" class=\"headerlink\" title=\"启动服务并连接\"></a>启动服务并连接</h3><p>启动mysql：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ service mysqld start </span><br><span class=\"line\">$ netstat -ntlp | grep mysqld</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LISTEN      18471/mysqld</span><br></pre></td></tr></table></figure>\n\n\n\n<p>现在就可以使用前面获取到的默认密码登录数据库了，不过也可以使用下面的命令来重新设置密码及删除匿名用户和库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置root用户密码</span></span><br><span class=\"line\">$ mysqladmin -u root -p<span class=\"string\">'&amp;leFGSPpM4sC'</span> password Root123?</span><br><span class=\"line\"><span class=\"comment\"># 删除测试数据库和匿名用户</span></span><br><span class=\"line\">$ mysql_secure_installation</span><br><span class=\"line\">$ mysql -uroot -pRoot123?</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Django ORM操作数据库","date":"2020-07-23T02:58:03.000Z","description":"使用Django ORM操作mysql数据库","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595483262367&di=8b39aa4df23760057f69288e9ce25fc7&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Ftranslate%2Fw1280h720%2F20171204%2Fqa_i-fypikwt6342432.jpg","_content":"\n\n\ndjango中使用ORM操作数据库，其通过实例对象语法，将数据表映射成类，数据记录映射成对象，字段映射称为对象属性，从而可以很方便的操作数据库进行增删改查操作，省去了写复杂sql语句的麻烦。\n\n\n\n------\n\n\n\n# 数据表之间的关系\n\n数据表间有如下的几种关系：\n\n- 一对一：A表中的一条记录只能在B表中找到唯一一条与之形成对应关系，反之亦然。\n- 一对多：A表中的一条记录可以在B表中找到多条记录与之对应，B表中一条记录只对应A中的一条记录。\n- 多对多：A表中的一条记录可以对应B中的多条记录，反之亦然。\n\n> 一般情况下，一对一关系在一张表中就可以完成了，而多对多关系则需要一个中间表。\n\n\n\n<br>\n\n\n\n# 数据表结构\n\n**下面都是以这个 书籍-出版社-作者 三个数据表的结构为基础进行的举例**\n\n\n\n```python\nclass Book(models.Model):\n  \t\"\"\"书籍信息表\"\"\"\n    name = models.CharField(max_length=20)\n    price = models.IntegerField()\n    pub_date = models.DateField()\n    publish = models.ForeignKey(\"Publish\", on_delete=models.SET_NULL, null=True, blank=True)\n    authors = models.ManyToManyField(\"Author\")\n    \nclass Publish(models.Model):\n    \"\"\"出版社信息表\"\"\"\n    name = models.CharField(max_length=32)\n    city = models.CharField(max_length=16, default=\"北京\")\n    \nclass Author(models.Model):\n    \"\"\"作者信息表\"\"\"\n    name = models.CharField(max_length=32)\n    age = models.IntegerField(default=20)\n```\n\n其中，Book表和Publish表是一个一对多关系，通过外键publish关联，Book表和Author表是一个多对多关系，通过authors字段设置了一个 ManyToMany关系，这样django将会自动创建一个第三张表`book_authors`表。\n\n> 在django创建表的过程就省略了\n\n<br>\n\n\n\n# 向单张表添加数据\n\n**这里先忽略外键关系，单纯说一下如何添加数据，具体多表数据添加后面会说**\n\nORM将表抽象为类，字段抽象为属性，所以实例化一个类然后对属性赋值就可以实现表数据插入了，例如：\n\n```python\nbook = Book(name='python基础', price=99, author='lee', pub_date='2019-12-22')\nbook.save()\n```\n\n\n\n这种方式在最后需要调用`save`方法来保存数据，django提供了一种更简便的方式：\n\n```python\nBook.objects.create(name='java基础', price=99, author='pete', pub_date='2019-12-22')\n\n# 或者将字段单独保存到字典中，注意args前边的两个星号\nargs = {'name': 'php基础', 'price': 99, 'author': 'pete', 'pub_date': '2019-12-22'}\nBook.objects.create(**args)\n```\n\n<br>\n\n\n\n# 修改数据\n\n修改数据同样有两种方式，第一种是获取到待修改数据对象，然后修改其中的某一个属性值：\n\n```python\nb = Book.objects.get(author='lee')\nb.price = 12\nb.save()\n```\n\n> 这种方式效率不高，因为实际执行的sql其实修改了所有的字段。\n\n\n\n效率更高的方式是使用update方法进行修改，只修改了需要修改的字段：\n\n```python\nBook.objects.filter(author='lee').update(price=100)\n```\n\n<br>\n\n\n\n# 删除数据\n\n删除数据比较简单，找到指定的数据后使用del方法删除即可：\n\n```python\nBook.objects.filter(author='lee').delete()\n```\n\n<br>\n\n\n\n# 单表查找数据\n\n查询表中所有的数据可以使用all方法：\n\n```python\nBook.objects.all()\n```\n\n\n\n查询结果是QuerySet类型（对象集合），对它可以进行切片操作，例如：\n\n```python\nBook.objects.all()[:3]\nbook_list = Book.objects.all()[::-1]\n```\n\n\n\n查询第一条和最后一条可以使用first和last方法，例如：\n\n```python\nBook.objects.first()\nook.objects.first()\n```\n\n\n\n也可以使用filter活get方法进行条件筛选，例如：\n\n```python\nBook.objects.filter(id=3)\nBook.objects.get(id=4)\n```\n\n> 两者的区别是：filter的结果是一个QuerySet，可对其进行遍历，而get结果是一个对象，不可遍历；get结果只能有一个，查到多个或者没查到都会报错；\n\n\n\n使用values活values_list方法可以只去查询结果中的部分属性(字段)值，例如：\n\n```python\nBook.objects.filter(author='lee').values(\"name\", \"price\")\nBook.objects.filter(author='lee').values_list(\"name\", \"price\")\n```\n\n> 区别是：values返回的QuerySet中的元素是字典，而values_list返回的QuerySet中的元素是元组。\n\n\n\n查询不配条件的数据，使用exclude方法，例如：\n\n```python\nBook.objects.exclude(author='pete')\n```\n\n\n\n获取到的数据进行排序，使用order_by或reverse方法：\n\n```python\n# 按照price字段排序，默认从小到大\nBook.objects.all().order_by('price')\n\n# 反向排序\nBook.objects.all().reverse()\n```\n\n\n\n使用distinct方法可以进行去重：\n\n```python\nBook.objects.all().values('author').distinct()\n```\n\n> 注意，这个方法必须在使用values后使用，如果在all后使用则无法去重，因为有自增id存在，则每一个数据都是不同的(尽管字段都相同)\n\n\n\n统计查询个数可以使用count方法：\n\n```python\nBook.objects.all().count()\n```\n\n\n\ndjango还支持双下划线进行模糊匹配，类似于sql中的like语句：\n\n```python\n# 查询价格大于50的书籍\nBook.objects.filter(price__gt=50)\n# 查询名称包含p的书籍，icontains不区分大小写，contains区分大小写\nBook.objects.filter(name__icontains='p')\n# 查询价格为99元或12元之间的书籍\nBook.objects.filter(price__in=[99, 12])\n# 查询价格不是99元或12元的书籍\nBook.objects.exclude(price__in=[99, 12])\n# 查询价格在50到100范围内的书籍并按照价格排序\nBook.objects.filter(price__range=[50, 100]).order_by('price')\n```\n\n\n\n<br>\n\n\n\n# 外键关系字段添加数据\n\n在数据表定义中，Book表中的publish和Publish表是一个外键关系，那么此时在Book表中插入数据可以这样做：\n\n```python\n# 插入一本A出版社出版的书，首先查到A出版社对象\npublish_obj = Publish.objects.get(name='A')\n\n# 然后将对象赋给Book外键字段\nbook_info = {'name': 'LINUX', 'price': 998, 'author': 'mike', 'pub_date': '2019-10-01', 'publish': publish_obj}\nBook.objects.create(**book_info)\n```\n\n<br>\n\n\n\n# 一对多外键关联查询\n\n还是Book表和Publish表之间关联查询，可以通过Book表中的外键，查询到其所属的出版社信息，例如：\n\n```python\n# 方式一\n# 首先查询到一条book的对象\nbook_obj = Book.objects.get(name=\"go\")\n# 获取book的属性\nbook_obj.name  # 书籍名称\nbook_obj.price  # 书籍价格\n# 通过外键获取其对应Publish的信息\nbook_obj.publish.name  # publish是外建名\n```\n\n\n\n```python\n# 方式二，利用外键查找\nPublish.objects.filter(book__name='go').values('name', 'city')\n# 或者\nBook.objects.filter(name='go').values(\"publish__name\")\n```\n\n> 利用了双下划线，其中book为表名\n\n\n\n```python\n# 某个时间段内的书的出版社信息\nBook.objects.filter(pub_date__gt='2019-12-01', pub_date__lt='2019-12-31').values(\"publish__name\")\n```\n\n\n\n也可以反向查询，通过出版社的对象查询到出版社出版的书：\n\n```python\n# 方式一，先查询指定出版社对象，再将对象赋值到Book表的外键中查询\npublish_obj = Publish.objects.get(name=\"A\")\nbook_obj = Book.objects.filter(publish=publish_obj).values('name', 'price')\n```\n\n\n\n```python\n# 方式二，通过 _set方式进行查找\npublish_obj = Publish.objects.get(name=\"cctv\")\npublish_obj.book_set.all()\n```\n\n> 这种方式中book为表名\n\n\n\n```python\n# 方式三，利用外键查找\nBook.objects.filter(publish__name='A').values('name', 'price')\n```\n\n> 利用了双下划线，其中publish为外键名称\n\n\n\n<br>\n\n\n\n# 多对多插入数据\n\n如果是使用ManyToMany字段创建的多对多关系，中间表是自动生成的，没法用ORM直接插入数据。但可以通过ManyToMany字段赋值来实现绑定多对多关系。\n\n\n\nBook和Auhtor表是一个多对多关系，例如插入某一个书籍的作者信息可以如下：\n\n```python\n# 先查询到某书籍的信息\nbook_obj = Book.objects.get(id=4)\n# 在查询到作者信息\nauthors_obj = Author.objects.get(id=2)\n# 通过authors字段进行关系绑定\nbook_obj.authors.add(authors_obj)\n\n# 如果添加多个作者，则需要加上 *星号\nauthors_obj = Author.objects.all()\nbook_obj.authors.add(*authors_obj)\n```\n\n\n\n<br>\n\n\n\n# 多对多删除数据\n\n删除数据直接使用remove方法即可，例如：\n\n```python\nbook_obj = Book.objects.get(id=4)\nauthors_obj = Author.objects.get(id=2)\nbook_obj.authors.remove(authors_obj)\n\n# 如果是删除多个，则需要加上 *星号\nauthors_obj = Author.objects.all()\nbook_obj.authors.remove(*authors_obj)\n```\n\n\n\n也可以使用指定ID的方式来删除，例如：\n\n```python\n# 取消book id为2，author id为1的对应关系\nbook_obj = Book.objects.get(id=2)\nbook_obj.authors.remove(1)\n```\n\n\n\n<br>\n\n\n\n# 多对多查询\n\n多对多查询和一对多查询一样，可以使用双下划线进行外键查询，例如：\n\n```python\n# 查询所有pete写的书，并显示书名和价格以及作者名称\nBook.objects.filter(authors__name='pete').values('name', 'price', 'authors__name')\n```\n\n> 其中authors是Book表中多对多字段\n\n\n\n<br>\n\n\n\n# 聚合函数\n\ndjango的聚合函数可以用来进行最大值，均值等操作，首先需要引入一些函数：\n\n```python\nfrom django.db.models import Avg, Min, Sum, Max, Count\n```\n\n\n\n**聚合函数为aggregate**\n\n例如求Book表中所有书的均价和总价：\n\n```python\nBook.objects.all().aggregate(Avg(\"price\"))\nBook.objects.all().aggregate(Sum(\"price\"))\n```\n\n\n\n如果是需要多表关联，使用前面的方法过滤即可：\n\n```python\n# 求pete出版的书的总价\nBook.objects.filter(authors__name='pete').aggregate(Sum(\"price\"))\n```\n\n\n\n上边这样子写，结果的格式是一个字典，例如：\n\n```python\n{'price__sum': 1341}\n{'price__sum': 99}\n```\n\n> 其中的key为条件和方法的组合\n\n\n\n如果想自定义key，则可以这样做：\n\n```python\n# 自定义key为“pete_money”\nBook.objects.filter(authors__name='pete').aggregate(pete_money=Sum('price'))\n# 返回结果\n{'pete_money': 99}\n```\n\n\n\n获取pete出版的书的个数：\n\n```python\nBook.objects.filter(authors__name='pete').aggregate(Count('name'))\n```\n\n> Count中的条件是什么字段都可以，但是必须有\n\n\n\n<br>\n\n\n\n# 分组\n\n**分组函数为annotate**\n\n\n\n例如下面的需求就可以使用分组：获取每一个作者出版的书籍的价格总价：\n\n```python\nBook.objects.values(\"authors__name\").annotate(Sum(\"price\"))\n```\n\n> 这里先分组，使用values指定分组的字段名称，这里是作者的名称，然后使用分组方法，指定处理函数为Sum根据价格求和\n\n\n\n其返回的结果为Queryset格式，例如：\n\n```python\n<QuerySet [{'authors__name': 'pete', 'price__sum': 154}, {'authors__name': 'alex', 'price__sum': 99},...]>\n```\n\n\n\n例如：获取每一个出版社出版的最便宜的书：\n\n```python\nPublish.objects.values(\"name\").annotate(pub_min=Min(\"book__price\"))\n```\n\n> 现根据出版社的name进行分组，然后调用annotate进行处理\n\n\n\n<br>\n\n\n\n# F查询和Q查询\n\n前面的条件查询使用的是filter和get，这两种查询条件是与关系，如果想设置或或者非的条件查询关系，则filter和get做不到，需要使用F和Q查询。\n\n\n\n首先引入F和Q：\n\n```python\nfrom django.db.models import F, Q\n```\n\n\n\n例如这个需求：每个book的价格便宜10元：\n\n```python\nBook.objects.all().update(price=F(\"price\")-10)\n```\n\n> 首先查找到所有的书，调用update方法进行更新，F('price')可以查询到每一本书的价格\n\n\n\n使用Q查询可以实现或关系或者非关系查询，例如：\n\n```python\n# 查询价格为89元或者名字为go的书籍\nBook.objects.filter(Q(price=89)|Q(name='go'))\n\n# 查询书名不是go的书籍\nBook.objects.filter(~Q(name='go'))\n```\n\n> Q函数中是查询条件，使用管道符 | 表示或关系，使用~ 表示非\n\n\n\nQ查询也可以可一般的查询条件组合使用：\n\n```python\nBook.objects.filter(Q(name='go'), price=\"20\")\n```\n\n> 但是，Q查询一定要在条件第一个\n\n","source":"_posts/Django-ORM操作数据库.md","raw":"---\ntitle: Django ORM操作数据库\ndate: 2020-07-23 10:58:03\ntags:\n- Django\ncategories:\n- python web开发\n- Django\ndescription: 使用Django ORM操作mysql数据库\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595483262367&di=8b39aa4df23760057f69288e9ce25fc7&imgtype=0&src=http%3A%2F%2Fn.sinaimg.cn%2Ftranslate%2Fw1280h720%2F20171204%2Fqa_i-fypikwt6342432.jpg\n---\n\n\n\ndjango中使用ORM操作数据库，其通过实例对象语法，将数据表映射成类，数据记录映射成对象，字段映射称为对象属性，从而可以很方便的操作数据库进行增删改查操作，省去了写复杂sql语句的麻烦。\n\n\n\n------\n\n\n\n# 数据表之间的关系\n\n数据表间有如下的几种关系：\n\n- 一对一：A表中的一条记录只能在B表中找到唯一一条与之形成对应关系，反之亦然。\n- 一对多：A表中的一条记录可以在B表中找到多条记录与之对应，B表中一条记录只对应A中的一条记录。\n- 多对多：A表中的一条记录可以对应B中的多条记录，反之亦然。\n\n> 一般情况下，一对一关系在一张表中就可以完成了，而多对多关系则需要一个中间表。\n\n\n\n<br>\n\n\n\n# 数据表结构\n\n**下面都是以这个 书籍-出版社-作者 三个数据表的结构为基础进行的举例**\n\n\n\n```python\nclass Book(models.Model):\n  \t\"\"\"书籍信息表\"\"\"\n    name = models.CharField(max_length=20)\n    price = models.IntegerField()\n    pub_date = models.DateField()\n    publish = models.ForeignKey(\"Publish\", on_delete=models.SET_NULL, null=True, blank=True)\n    authors = models.ManyToManyField(\"Author\")\n    \nclass Publish(models.Model):\n    \"\"\"出版社信息表\"\"\"\n    name = models.CharField(max_length=32)\n    city = models.CharField(max_length=16, default=\"北京\")\n    \nclass Author(models.Model):\n    \"\"\"作者信息表\"\"\"\n    name = models.CharField(max_length=32)\n    age = models.IntegerField(default=20)\n```\n\n其中，Book表和Publish表是一个一对多关系，通过外键publish关联，Book表和Author表是一个多对多关系，通过authors字段设置了一个 ManyToMany关系，这样django将会自动创建一个第三张表`book_authors`表。\n\n> 在django创建表的过程就省略了\n\n<br>\n\n\n\n# 向单张表添加数据\n\n**这里先忽略外键关系，单纯说一下如何添加数据，具体多表数据添加后面会说**\n\nORM将表抽象为类，字段抽象为属性，所以实例化一个类然后对属性赋值就可以实现表数据插入了，例如：\n\n```python\nbook = Book(name='python基础', price=99, author='lee', pub_date='2019-12-22')\nbook.save()\n```\n\n\n\n这种方式在最后需要调用`save`方法来保存数据，django提供了一种更简便的方式：\n\n```python\nBook.objects.create(name='java基础', price=99, author='pete', pub_date='2019-12-22')\n\n# 或者将字段单独保存到字典中，注意args前边的两个星号\nargs = {'name': 'php基础', 'price': 99, 'author': 'pete', 'pub_date': '2019-12-22'}\nBook.objects.create(**args)\n```\n\n<br>\n\n\n\n# 修改数据\n\n修改数据同样有两种方式，第一种是获取到待修改数据对象，然后修改其中的某一个属性值：\n\n```python\nb = Book.objects.get(author='lee')\nb.price = 12\nb.save()\n```\n\n> 这种方式效率不高，因为实际执行的sql其实修改了所有的字段。\n\n\n\n效率更高的方式是使用update方法进行修改，只修改了需要修改的字段：\n\n```python\nBook.objects.filter(author='lee').update(price=100)\n```\n\n<br>\n\n\n\n# 删除数据\n\n删除数据比较简单，找到指定的数据后使用del方法删除即可：\n\n```python\nBook.objects.filter(author='lee').delete()\n```\n\n<br>\n\n\n\n# 单表查找数据\n\n查询表中所有的数据可以使用all方法：\n\n```python\nBook.objects.all()\n```\n\n\n\n查询结果是QuerySet类型（对象集合），对它可以进行切片操作，例如：\n\n```python\nBook.objects.all()[:3]\nbook_list = Book.objects.all()[::-1]\n```\n\n\n\n查询第一条和最后一条可以使用first和last方法，例如：\n\n```python\nBook.objects.first()\nook.objects.first()\n```\n\n\n\n也可以使用filter活get方法进行条件筛选，例如：\n\n```python\nBook.objects.filter(id=3)\nBook.objects.get(id=4)\n```\n\n> 两者的区别是：filter的结果是一个QuerySet，可对其进行遍历，而get结果是一个对象，不可遍历；get结果只能有一个，查到多个或者没查到都会报错；\n\n\n\n使用values活values_list方法可以只去查询结果中的部分属性(字段)值，例如：\n\n```python\nBook.objects.filter(author='lee').values(\"name\", \"price\")\nBook.objects.filter(author='lee').values_list(\"name\", \"price\")\n```\n\n> 区别是：values返回的QuerySet中的元素是字典，而values_list返回的QuerySet中的元素是元组。\n\n\n\n查询不配条件的数据，使用exclude方法，例如：\n\n```python\nBook.objects.exclude(author='pete')\n```\n\n\n\n获取到的数据进行排序，使用order_by或reverse方法：\n\n```python\n# 按照price字段排序，默认从小到大\nBook.objects.all().order_by('price')\n\n# 反向排序\nBook.objects.all().reverse()\n```\n\n\n\n使用distinct方法可以进行去重：\n\n```python\nBook.objects.all().values('author').distinct()\n```\n\n> 注意，这个方法必须在使用values后使用，如果在all后使用则无法去重，因为有自增id存在，则每一个数据都是不同的(尽管字段都相同)\n\n\n\n统计查询个数可以使用count方法：\n\n```python\nBook.objects.all().count()\n```\n\n\n\ndjango还支持双下划线进行模糊匹配，类似于sql中的like语句：\n\n```python\n# 查询价格大于50的书籍\nBook.objects.filter(price__gt=50)\n# 查询名称包含p的书籍，icontains不区分大小写，contains区分大小写\nBook.objects.filter(name__icontains='p')\n# 查询价格为99元或12元之间的书籍\nBook.objects.filter(price__in=[99, 12])\n# 查询价格不是99元或12元的书籍\nBook.objects.exclude(price__in=[99, 12])\n# 查询价格在50到100范围内的书籍并按照价格排序\nBook.objects.filter(price__range=[50, 100]).order_by('price')\n```\n\n\n\n<br>\n\n\n\n# 外键关系字段添加数据\n\n在数据表定义中，Book表中的publish和Publish表是一个外键关系，那么此时在Book表中插入数据可以这样做：\n\n```python\n# 插入一本A出版社出版的书，首先查到A出版社对象\npublish_obj = Publish.objects.get(name='A')\n\n# 然后将对象赋给Book外键字段\nbook_info = {'name': 'LINUX', 'price': 998, 'author': 'mike', 'pub_date': '2019-10-01', 'publish': publish_obj}\nBook.objects.create(**book_info)\n```\n\n<br>\n\n\n\n# 一对多外键关联查询\n\n还是Book表和Publish表之间关联查询，可以通过Book表中的外键，查询到其所属的出版社信息，例如：\n\n```python\n# 方式一\n# 首先查询到一条book的对象\nbook_obj = Book.objects.get(name=\"go\")\n# 获取book的属性\nbook_obj.name  # 书籍名称\nbook_obj.price  # 书籍价格\n# 通过外键获取其对应Publish的信息\nbook_obj.publish.name  # publish是外建名\n```\n\n\n\n```python\n# 方式二，利用外键查找\nPublish.objects.filter(book__name='go').values('name', 'city')\n# 或者\nBook.objects.filter(name='go').values(\"publish__name\")\n```\n\n> 利用了双下划线，其中book为表名\n\n\n\n```python\n# 某个时间段内的书的出版社信息\nBook.objects.filter(pub_date__gt='2019-12-01', pub_date__lt='2019-12-31').values(\"publish__name\")\n```\n\n\n\n也可以反向查询，通过出版社的对象查询到出版社出版的书：\n\n```python\n# 方式一，先查询指定出版社对象，再将对象赋值到Book表的外键中查询\npublish_obj = Publish.objects.get(name=\"A\")\nbook_obj = Book.objects.filter(publish=publish_obj).values('name', 'price')\n```\n\n\n\n```python\n# 方式二，通过 _set方式进行查找\npublish_obj = Publish.objects.get(name=\"cctv\")\npublish_obj.book_set.all()\n```\n\n> 这种方式中book为表名\n\n\n\n```python\n# 方式三，利用外键查找\nBook.objects.filter(publish__name='A').values('name', 'price')\n```\n\n> 利用了双下划线，其中publish为外键名称\n\n\n\n<br>\n\n\n\n# 多对多插入数据\n\n如果是使用ManyToMany字段创建的多对多关系，中间表是自动生成的，没法用ORM直接插入数据。但可以通过ManyToMany字段赋值来实现绑定多对多关系。\n\n\n\nBook和Auhtor表是一个多对多关系，例如插入某一个书籍的作者信息可以如下：\n\n```python\n# 先查询到某书籍的信息\nbook_obj = Book.objects.get(id=4)\n# 在查询到作者信息\nauthors_obj = Author.objects.get(id=2)\n# 通过authors字段进行关系绑定\nbook_obj.authors.add(authors_obj)\n\n# 如果添加多个作者，则需要加上 *星号\nauthors_obj = Author.objects.all()\nbook_obj.authors.add(*authors_obj)\n```\n\n\n\n<br>\n\n\n\n# 多对多删除数据\n\n删除数据直接使用remove方法即可，例如：\n\n```python\nbook_obj = Book.objects.get(id=4)\nauthors_obj = Author.objects.get(id=2)\nbook_obj.authors.remove(authors_obj)\n\n# 如果是删除多个，则需要加上 *星号\nauthors_obj = Author.objects.all()\nbook_obj.authors.remove(*authors_obj)\n```\n\n\n\n也可以使用指定ID的方式来删除，例如：\n\n```python\n# 取消book id为2，author id为1的对应关系\nbook_obj = Book.objects.get(id=2)\nbook_obj.authors.remove(1)\n```\n\n\n\n<br>\n\n\n\n# 多对多查询\n\n多对多查询和一对多查询一样，可以使用双下划线进行外键查询，例如：\n\n```python\n# 查询所有pete写的书，并显示书名和价格以及作者名称\nBook.objects.filter(authors__name='pete').values('name', 'price', 'authors__name')\n```\n\n> 其中authors是Book表中多对多字段\n\n\n\n<br>\n\n\n\n# 聚合函数\n\ndjango的聚合函数可以用来进行最大值，均值等操作，首先需要引入一些函数：\n\n```python\nfrom django.db.models import Avg, Min, Sum, Max, Count\n```\n\n\n\n**聚合函数为aggregate**\n\n例如求Book表中所有书的均价和总价：\n\n```python\nBook.objects.all().aggregate(Avg(\"price\"))\nBook.objects.all().aggregate(Sum(\"price\"))\n```\n\n\n\n如果是需要多表关联，使用前面的方法过滤即可：\n\n```python\n# 求pete出版的书的总价\nBook.objects.filter(authors__name='pete').aggregate(Sum(\"price\"))\n```\n\n\n\n上边这样子写，结果的格式是一个字典，例如：\n\n```python\n{'price__sum': 1341}\n{'price__sum': 99}\n```\n\n> 其中的key为条件和方法的组合\n\n\n\n如果想自定义key，则可以这样做：\n\n```python\n# 自定义key为“pete_money”\nBook.objects.filter(authors__name='pete').aggregate(pete_money=Sum('price'))\n# 返回结果\n{'pete_money': 99}\n```\n\n\n\n获取pete出版的书的个数：\n\n```python\nBook.objects.filter(authors__name='pete').aggregate(Count('name'))\n```\n\n> Count中的条件是什么字段都可以，但是必须有\n\n\n\n<br>\n\n\n\n# 分组\n\n**分组函数为annotate**\n\n\n\n例如下面的需求就可以使用分组：获取每一个作者出版的书籍的价格总价：\n\n```python\nBook.objects.values(\"authors__name\").annotate(Sum(\"price\"))\n```\n\n> 这里先分组，使用values指定分组的字段名称，这里是作者的名称，然后使用分组方法，指定处理函数为Sum根据价格求和\n\n\n\n其返回的结果为Queryset格式，例如：\n\n```python\n<QuerySet [{'authors__name': 'pete', 'price__sum': 154}, {'authors__name': 'alex', 'price__sum': 99},...]>\n```\n\n\n\n例如：获取每一个出版社出版的最便宜的书：\n\n```python\nPublish.objects.values(\"name\").annotate(pub_min=Min(\"book__price\"))\n```\n\n> 现根据出版社的name进行分组，然后调用annotate进行处理\n\n\n\n<br>\n\n\n\n# F查询和Q查询\n\n前面的条件查询使用的是filter和get，这两种查询条件是与关系，如果想设置或或者非的条件查询关系，则filter和get做不到，需要使用F和Q查询。\n\n\n\n首先引入F和Q：\n\n```python\nfrom django.db.models import F, Q\n```\n\n\n\n例如这个需求：每个book的价格便宜10元：\n\n```python\nBook.objects.all().update(price=F(\"price\")-10)\n```\n\n> 首先查找到所有的书，调用update方法进行更新，F('price')可以查询到每一本书的价格\n\n\n\n使用Q查询可以实现或关系或者非关系查询，例如：\n\n```python\n# 查询价格为89元或者名字为go的书籍\nBook.objects.filter(Q(price=89)|Q(name='go'))\n\n# 查询书名不是go的书籍\nBook.objects.filter(~Q(name='go'))\n```\n\n> Q函数中是查询条件，使用管道符 | 表示或关系，使用~ 表示非\n\n\n\nQ查询也可以可一般的查询条件组合使用：\n\n```python\nBook.objects.filter(Q(name='go'), price=\"20\")\n```\n\n> 但是，Q查询一定要在条件第一个\n\n","slug":"Django-ORM操作数据库","published":1,"updated":"2020-08-03T07:32:15.768Z","_id":"ckcy7pdh10000j9n091shce48","comments":1,"layout":"post","photos":[],"link":"","content":"<p>django中使用ORM操作数据库，其通过实例对象语法，将数据表映射成类，数据记录映射成对象，字段映射称为对象属性，从而可以很方便的操作数据库进行增删改查操作，省去了写复杂sql语句的麻烦。</p>\n<hr>\n<h1 id=\"数据表之间的关系\"><a href=\"#数据表之间的关系\" class=\"headerlink\" title=\"数据表之间的关系\"></a>数据表之间的关系</h1><p>数据表间有如下的几种关系：</p>\n<ul>\n<li>一对一：A表中的一条记录只能在B表中找到唯一一条与之形成对应关系，反之亦然。</li>\n<li>一对多：A表中的一条记录可以在B表中找到多条记录与之对应，B表中一条记录只对应A中的一条记录。</li>\n<li>多对多：A表中的一条记录可以对应B中的多条记录，反之亦然。</li>\n</ul>\n<blockquote>\n<p>一般情况下，一对一关系在一张表中就可以完成了，而多对多关系则需要一个中间表。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"数据表结构\"><a href=\"#数据表结构\" class=\"headerlink\" title=\"数据表结构\"></a>数据表结构</h1><p><strong>下面都是以这个 书籍-出版社-作者 三个数据表的结构为基础进行的举例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">  \t<span class=\"string\">\"\"\"书籍信息表\"\"\"</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">20</span>)</span><br><span class=\"line\">    price = models.IntegerField()</span><br><span class=\"line\">    pub_date = models.DateField()</span><br><span class=\"line\">    publish = models.ForeignKey(<span class=\"string\">\"Publish\"</span>, on_delete=models.SET_NULL, null=<span class=\"literal\">True</span>, blank=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    authors = models.ManyToManyField(<span class=\"string\">\"Author\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Publish</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"出版社信息表\"\"\"</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">    city = models.CharField(max_length=<span class=\"number\">16</span>, default=<span class=\"string\">\"北京\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"作者信息表\"\"\"</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">    age = models.IntegerField(default=<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中，Book表和Publish表是一个一对多关系，通过外键publish关联，Book表和Author表是一个多对多关系，通过authors字段设置了一个 ManyToMany关系，这样django将会自动创建一个第三张表<code>book_authors</code>表。</p>\n<blockquote>\n<p>在django创建表的过程就省略了</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"向单张表添加数据\"><a href=\"#向单张表添加数据\" class=\"headerlink\" title=\"向单张表添加数据\"></a>向单张表添加数据</h1><p><strong>这里先忽略外键关系，单纯说一下如何添加数据，具体多表数据添加后面会说</strong></p>\n<p>ORM将表抽象为类，字段抽象为属性，所以实例化一个类然后对属性赋值就可以实现表数据插入了，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = Book(name=<span class=\"string\">'python基础'</span>, price=<span class=\"number\">99</span>, author=<span class=\"string\">'lee'</span>, pub_date=<span class=\"string\">'2019-12-22'</span>)</span><br><span class=\"line\">book.save()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这种方式在最后需要调用<code>save</code>方法来保存数据，django提供了一种更简便的方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.create(name=<span class=\"string\">'java基础'</span>, price=<span class=\"number\">99</span>, author=<span class=\"string\">'pete'</span>, pub_date=<span class=\"string\">'2019-12-22'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者将字段单独保存到字典中，注意args前边的两个星号</span></span><br><span class=\"line\">args = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'php基础'</span>, <span class=\"string\">'price'</span>: <span class=\"number\">99</span>, <span class=\"string\">'author'</span>: <span class=\"string\">'pete'</span>, <span class=\"string\">'pub_date'</span>: <span class=\"string\">'2019-12-22'</span>&#125;</span><br><span class=\"line\">Book.objects.create(**args)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h1><p>修改数据同样有两种方式，第一种是获取到待修改数据对象，然后修改其中的某一个属性值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = Book.objects.get(author=<span class=\"string\">'lee'</span>)</span><br><span class=\"line\">b.price = <span class=\"number\">12</span></span><br><span class=\"line\">b.save()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这种方式效率不高，因为实际执行的sql其实修改了所有的字段。</p>\n</blockquote>\n<p>效率更高的方式是使用update方法进行修改，只修改了需要修改的字段：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).update(price=<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h1><p>删除数据比较简单，找到指定的数据后使用del方法删除即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).delete()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"单表查找数据\"><a href=\"#单表查找数据\" class=\"headerlink\" title=\"单表查找数据\"></a>单表查找数据</h1><p>查询表中所有的数据可以使用all方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询结果是QuerySet类型（对象集合），对它可以进行切片操作，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all()[:<span class=\"number\">3</span>]</span><br><span class=\"line\">book_list = Book.objects.all()[::<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询第一条和最后一条可以使用first和last方法，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.first()</span><br><span class=\"line\">ook.objects.first()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以使用filter活get方法进行条件筛选，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(id=<span class=\"number\">3</span>)</span><br><span class=\"line\">Book.objects.get(id=<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>两者的区别是：filter的结果是一个QuerySet，可对其进行遍历，而get结果是一个对象，不可遍历；get结果只能有一个，查到多个或者没查到都会报错；</p>\n</blockquote>\n<p>使用values活values_list方法可以只去查询结果中的部分属性(字段)值，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).values(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"price\"</span>)</span><br><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).values_list(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"price\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>区别是：values返回的QuerySet中的元素是字典，而values_list返回的QuerySet中的元素是元组。</p>\n</blockquote>\n<p>查询不配条件的数据，使用exclude方法，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.exclude(author=<span class=\"string\">'pete'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取到的数据进行排序，使用order_by或reverse方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按照price字段排序，默认从小到大</span></span><br><span class=\"line\">Book.objects.all().order_by(<span class=\"string\">'price'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反向排序</span></span><br><span class=\"line\">Book.objects.all().reverse()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用distinct方法可以进行去重：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().values(<span class=\"string\">'author'</span>).distinct()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，这个方法必须在使用values后使用，如果在all后使用则无法去重，因为有自增id存在，则每一个数据都是不同的(尽管字段都相同)</p>\n</blockquote>\n<p>统计查询个数可以使用count方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().count()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>django还支持双下划线进行模糊匹配，类似于sql中的like语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询价格大于50的书籍</span></span><br><span class=\"line\">Book.objects.filter(price__gt=<span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"comment\"># 查询名称包含p的书籍，icontains不区分大小写，contains区分大小写</span></span><br><span class=\"line\">Book.objects.filter(name__icontains=<span class=\"string\">'p'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 查询价格为99元或12元之间的书籍</span></span><br><span class=\"line\">Book.objects.filter(price__in=[<span class=\"number\">99</span>, <span class=\"number\">12</span>])</span><br><span class=\"line\"><span class=\"comment\"># 查询价格不是99元或12元的书籍</span></span><br><span class=\"line\">Book.objects.exclude(price__in=[<span class=\"number\">99</span>, <span class=\"number\">12</span>])</span><br><span class=\"line\"><span class=\"comment\"># 查询价格在50到100范围内的书籍并按照价格排序</span></span><br><span class=\"line\">Book.objects.filter(price__range=[<span class=\"number\">50</span>, <span class=\"number\">100</span>]).order_by(<span class=\"string\">'price'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"外键关系字段添加数据\"><a href=\"#外键关系字段添加数据\" class=\"headerlink\" title=\"外键关系字段添加数据\"></a>外键关系字段添加数据</h1><p>在数据表定义中，Book表中的publish和Publish表是一个外键关系，那么此时在Book表中插入数据可以这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入一本A出版社出版的书，首先查到A出版社对象</span></span><br><span class=\"line\">publish_obj = Publish.objects.get(name=<span class=\"string\">'A'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后将对象赋给Book外键字段</span></span><br><span class=\"line\">book_info = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'LINUX'</span>, <span class=\"string\">'price'</span>: <span class=\"number\">998</span>, <span class=\"string\">'author'</span>: <span class=\"string\">'mike'</span>, <span class=\"string\">'pub_date'</span>: <span class=\"string\">'2019-10-01'</span>, <span class=\"string\">'publish'</span>: publish_obj&#125;</span><br><span class=\"line\">Book.objects.create(**book_info)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"一对多外键关联查询\"><a href=\"#一对多外键关联查询\" class=\"headerlink\" title=\"一对多外键关联查询\"></a>一对多外键关联查询</h1><p>还是Book表和Publish表之间关联查询，可以通过Book表中的外键，查询到其所属的出版社信息，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一</span></span><br><span class=\"line\"><span class=\"comment\"># 首先查询到一条book的对象</span></span><br><span class=\"line\">book_obj = Book.objects.get(name=<span class=\"string\">\"go\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 获取book的属性</span></span><br><span class=\"line\">book_obj.name  <span class=\"comment\"># 书籍名称</span></span><br><span class=\"line\">book_obj.price  <span class=\"comment\"># 书籍价格</span></span><br><span class=\"line\"><span class=\"comment\"># 通过外键获取其对应Publish的信息</span></span><br><span class=\"line\">book_obj.publish.name  <span class=\"comment\"># publish是外建名</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式二，利用外键查找</span></span><br><span class=\"line\">Publish.objects.filter(book__name=<span class=\"string\">'go'</span>).values(<span class=\"string\">'name'</span>, <span class=\"string\">'city'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">Book.objects.filter(name=<span class=\"string\">'go'</span>).values(<span class=\"string\">\"publish__name\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>利用了双下划线，其中book为表名</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 某个时间段内的书的出版社信息</span></span><br><span class=\"line\">Book.objects.filter(pub_date__gt=<span class=\"string\">'2019-12-01'</span>, pub_date__lt=<span class=\"string\">'2019-12-31'</span>).values(<span class=\"string\">\"publish__name\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以反向查询，通过出版社的对象查询到出版社出版的书：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一，先查询指定出版社对象，再将对象赋值到Book表的外键中查询</span></span><br><span class=\"line\">publish_obj = Publish.objects.get(name=<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">book_obj = Book.objects.filter(publish=publish_obj).values(<span class=\"string\">'name'</span>, <span class=\"string\">'price'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式二，通过 _set方式进行查找</span></span><br><span class=\"line\">publish_obj = Publish.objects.get(name=<span class=\"string\">\"cctv\"</span>)</span><br><span class=\"line\">publish_obj.book_set.all()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这种方式中book为表名</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式三，利用外键查找</span></span><br><span class=\"line\">Book.objects.filter(publish__name=<span class=\"string\">'A'</span>).values(<span class=\"string\">'name'</span>, <span class=\"string\">'price'</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>利用了双下划线，其中publish为外键名称</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"多对多插入数据\"><a href=\"#多对多插入数据\" class=\"headerlink\" title=\"多对多插入数据\"></a>多对多插入数据</h1><p>如果是使用ManyToMany字段创建的多对多关系，中间表是自动生成的，没法用ORM直接插入数据。但可以通过ManyToMany字段赋值来实现绑定多对多关系。</p>\n<p>Book和Auhtor表是一个多对多关系，例如插入某一个书籍的作者信息可以如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先查询到某书籍的信息</span></span><br><span class=\"line\">book_obj = Book.objects.get(id=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 在查询到作者信息</span></span><br><span class=\"line\">authors_obj = Author.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 通过authors字段进行关系绑定</span></span><br><span class=\"line\">book_obj.authors.add(authors_obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果添加多个作者，则需要加上 *星号</span></span><br><span class=\"line\">authors_obj = Author.objects.all()</span><br><span class=\"line\">book_obj.authors.add(*authors_obj)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"多对多删除数据\"><a href=\"#多对多删除数据\" class=\"headerlink\" title=\"多对多删除数据\"></a>多对多删除数据</h1><p>删除数据直接使用remove方法即可，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book_obj = Book.objects.get(id=<span class=\"number\">4</span>)</span><br><span class=\"line\">authors_obj = Author.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\">book_obj.authors.remove(authors_obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果是删除多个，则需要加上 *星号</span></span><br><span class=\"line\">authors_obj = Author.objects.all()</span><br><span class=\"line\">book_obj.authors.remove(*authors_obj)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以使用指定ID的方式来删除，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取消book id为2，author id为1的对应关系</span></span><br><span class=\"line\">book_obj = Book.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\">book_obj.authors.remove(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"多对多查询\"><a href=\"#多对多查询\" class=\"headerlink\" title=\"多对多查询\"></a>多对多查询</h1><p>多对多查询和一对多查询一样，可以使用双下划线进行外键查询，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询所有pete写的书，并显示书名和价格以及作者名称</span></span><br><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).values(<span class=\"string\">'name'</span>, <span class=\"string\">'price'</span>, <span class=\"string\">'authors__name'</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中authors是Book表中多对多字段</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h1><p>django的聚合函数可以用来进行最大值，均值等操作，首先需要引入一些函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Avg, Min, Sum, Max, Count</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>聚合函数为aggregate</strong></p>\n<p>例如求Book表中所有书的均价和总价：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().aggregate(Avg(<span class=\"string\">\"price\"</span>))</span><br><span class=\"line\">Book.objects.all().aggregate(Sum(<span class=\"string\">\"price\"</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果是需要多表关联，使用前面的方法过滤即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求pete出版的书的总价</span></span><br><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).aggregate(Sum(<span class=\"string\">\"price\"</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上边这样子写，结果的格式是一个字典，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'price__sum'</span>: <span class=\"number\">1341</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'price__sum'</span>: <span class=\"number\">99</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中的key为条件和方法的组合</p>\n</blockquote>\n<p>如果想自定义key，则可以这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义key为“pete_money”</span></span><br><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).aggregate(pete_money=Sum(<span class=\"string\">'price'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">&#123;<span class=\"string\">'pete_money'</span>: <span class=\"number\">99</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取pete出版的书的个数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).aggregate(Count(<span class=\"string\">'name'</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Count中的条件是什么字段都可以，但是必须有</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h1><p><strong>分组函数为annotate</strong></p>\n<p>例如下面的需求就可以使用分组：获取每一个作者出版的书籍的价格总价：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.values(<span class=\"string\">\"authors__name\"</span>).annotate(Sum(<span class=\"string\">\"price\"</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里先分组，使用values指定分组的字段名称，这里是作者的名称，然后使用分组方法，指定处理函数为Sum根据价格求和</p>\n</blockquote>\n<p>其返回的结果为Queryset格式，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;QuerySet [&#123;<span class=\"string\">'authors__name'</span>: <span class=\"string\">'pete'</span>, <span class=\"string\">'price__sum'</span>: <span class=\"number\">154</span>&#125;, &#123;<span class=\"string\">'authors__name'</span>: <span class=\"string\">'alex'</span>, <span class=\"string\">'price__sum'</span>: <span class=\"number\">99</span>&#125;,...]&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：获取每一个出版社出版的最便宜的书：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Publish.objects.values(<span class=\"string\">\"name\"</span>).annotate(pub_min=Min(<span class=\"string\">\"book__price\"</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现根据出版社的name进行分组，然后调用annotate进行处理</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"F查询和Q查询\"><a href=\"#F查询和Q查询\" class=\"headerlink\" title=\"F查询和Q查询\"></a>F查询和Q查询</h1><p>前面的条件查询使用的是filter和get，这两种查询条件是与关系，如果想设置或或者非的条件查询关系，则filter和get做不到，需要使用F和Q查询。</p>\n<p>首先引入F和Q：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> F, Q</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如这个需求：每个book的价格便宜10元：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().update(price=F(<span class=\"string\">\"price\"</span>)<span class=\"number\">-10</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>首先查找到所有的书，调用update方法进行更新，F(‘price’)可以查询到每一本书的价格</p>\n</blockquote>\n<p>使用Q查询可以实现或关系或者非关系查询，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询价格为89元或者名字为go的书籍</span></span><br><span class=\"line\">Book.objects.filter(Q(price=<span class=\"number\">89</span>)|Q(name=<span class=\"string\">'go'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询书名不是go的书籍</span></span><br><span class=\"line\">Book.objects.filter(~Q(name=<span class=\"string\">'go'</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Q函数中是查询条件，使用管道符 | 表示或关系，使用~ 表示非</p>\n</blockquote>\n<p>Q查询也可以可一般的查询条件组合使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(Q(name=<span class=\"string\">'go'</span>), price=<span class=\"string\">\"20\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>但是，Q查询一定要在条件第一个</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>django中使用ORM操作数据库，其通过实例对象语法，将数据表映射成类，数据记录映射成对象，字段映射称为对象属性，从而可以很方便的操作数据库进行增删改查操作，省去了写复杂sql语句的麻烦。</p>\n<hr>\n<h1 id=\"数据表之间的关系\"><a href=\"#数据表之间的关系\" class=\"headerlink\" title=\"数据表之间的关系\"></a>数据表之间的关系</h1><p>数据表间有如下的几种关系：</p>\n<ul>\n<li>一对一：A表中的一条记录只能在B表中找到唯一一条与之形成对应关系，反之亦然。</li>\n<li>一对多：A表中的一条记录可以在B表中找到多条记录与之对应，B表中一条记录只对应A中的一条记录。</li>\n<li>多对多：A表中的一条记录可以对应B中的多条记录，反之亦然。</li>\n</ul>\n<blockquote>\n<p>一般情况下，一对一关系在一张表中就可以完成了，而多对多关系则需要一个中间表。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"数据表结构\"><a href=\"#数据表结构\" class=\"headerlink\" title=\"数据表结构\"></a>数据表结构</h1><p><strong>下面都是以这个 书籍-出版社-作者 三个数据表的结构为基础进行的举例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">  \t<span class=\"string\">\"\"\"书籍信息表\"\"\"</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">20</span>)</span><br><span class=\"line\">    price = models.IntegerField()</span><br><span class=\"line\">    pub_date = models.DateField()</span><br><span class=\"line\">    publish = models.ForeignKey(<span class=\"string\">\"Publish\"</span>, on_delete=models.SET_NULL, null=<span class=\"literal\">True</span>, blank=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    authors = models.ManyToManyField(<span class=\"string\">\"Author\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Publish</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"出版社信息表\"\"\"</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">    city = models.CharField(max_length=<span class=\"number\">16</span>, default=<span class=\"string\">\"北京\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"作者信息表\"\"\"</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">32</span>)</span><br><span class=\"line\">    age = models.IntegerField(default=<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中，Book表和Publish表是一个一对多关系，通过外键publish关联，Book表和Author表是一个多对多关系，通过authors字段设置了一个 ManyToMany关系，这样django将会自动创建一个第三张表<code>book_authors</code>表。</p>\n<blockquote>\n<p>在django创建表的过程就省略了</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"向单张表添加数据\"><a href=\"#向单张表添加数据\" class=\"headerlink\" title=\"向单张表添加数据\"></a>向单张表添加数据</h1><p><strong>这里先忽略外键关系，单纯说一下如何添加数据，具体多表数据添加后面会说</strong></p>\n<p>ORM将表抽象为类，字段抽象为属性，所以实例化一个类然后对属性赋值就可以实现表数据插入了，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book = Book(name=<span class=\"string\">'python基础'</span>, price=<span class=\"number\">99</span>, author=<span class=\"string\">'lee'</span>, pub_date=<span class=\"string\">'2019-12-22'</span>)</span><br><span class=\"line\">book.save()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这种方式在最后需要调用<code>save</code>方法来保存数据，django提供了一种更简便的方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.create(name=<span class=\"string\">'java基础'</span>, price=<span class=\"number\">99</span>, author=<span class=\"string\">'pete'</span>, pub_date=<span class=\"string\">'2019-12-22'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者将字段单独保存到字典中，注意args前边的两个星号</span></span><br><span class=\"line\">args = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'php基础'</span>, <span class=\"string\">'price'</span>: <span class=\"number\">99</span>, <span class=\"string\">'author'</span>: <span class=\"string\">'pete'</span>, <span class=\"string\">'pub_date'</span>: <span class=\"string\">'2019-12-22'</span>&#125;</span><br><span class=\"line\">Book.objects.create(**args)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h1><p>修改数据同样有两种方式，第一种是获取到待修改数据对象，然后修改其中的某一个属性值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = Book.objects.get(author=<span class=\"string\">'lee'</span>)</span><br><span class=\"line\">b.price = <span class=\"number\">12</span></span><br><span class=\"line\">b.save()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这种方式效率不高，因为实际执行的sql其实修改了所有的字段。</p>\n</blockquote>\n<p>效率更高的方式是使用update方法进行修改，只修改了需要修改的字段：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).update(price=<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h1><p>删除数据比较简单，找到指定的数据后使用del方法删除即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).delete()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"单表查找数据\"><a href=\"#单表查找数据\" class=\"headerlink\" title=\"单表查找数据\"></a>单表查找数据</h1><p>查询表中所有的数据可以使用all方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询结果是QuerySet类型（对象集合），对它可以进行切片操作，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all()[:<span class=\"number\">3</span>]</span><br><span class=\"line\">book_list = Book.objects.all()[::<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询第一条和最后一条可以使用first和last方法，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.first()</span><br><span class=\"line\">ook.objects.first()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以使用filter活get方法进行条件筛选，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(id=<span class=\"number\">3</span>)</span><br><span class=\"line\">Book.objects.get(id=<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>两者的区别是：filter的结果是一个QuerySet，可对其进行遍历，而get结果是一个对象，不可遍历；get结果只能有一个，查到多个或者没查到都会报错；</p>\n</blockquote>\n<p>使用values活values_list方法可以只去查询结果中的部分属性(字段)值，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).values(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"price\"</span>)</span><br><span class=\"line\">Book.objects.filter(author=<span class=\"string\">'lee'</span>).values_list(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"price\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>区别是：values返回的QuerySet中的元素是字典，而values_list返回的QuerySet中的元素是元组。</p>\n</blockquote>\n<p>查询不配条件的数据，使用exclude方法，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.exclude(author=<span class=\"string\">'pete'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取到的数据进行排序，使用order_by或reverse方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按照price字段排序，默认从小到大</span></span><br><span class=\"line\">Book.objects.all().order_by(<span class=\"string\">'price'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 反向排序</span></span><br><span class=\"line\">Book.objects.all().reverse()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用distinct方法可以进行去重：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().values(<span class=\"string\">'author'</span>).distinct()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，这个方法必须在使用values后使用，如果在all后使用则无法去重，因为有自增id存在，则每一个数据都是不同的(尽管字段都相同)</p>\n</blockquote>\n<p>统计查询个数可以使用count方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().count()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>django还支持双下划线进行模糊匹配，类似于sql中的like语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询价格大于50的书籍</span></span><br><span class=\"line\">Book.objects.filter(price__gt=<span class=\"number\">50</span>)</span><br><span class=\"line\"><span class=\"comment\"># 查询名称包含p的书籍，icontains不区分大小写，contains区分大小写</span></span><br><span class=\"line\">Book.objects.filter(name__icontains=<span class=\"string\">'p'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 查询价格为99元或12元之间的书籍</span></span><br><span class=\"line\">Book.objects.filter(price__in=[<span class=\"number\">99</span>, <span class=\"number\">12</span>])</span><br><span class=\"line\"><span class=\"comment\"># 查询价格不是99元或12元的书籍</span></span><br><span class=\"line\">Book.objects.exclude(price__in=[<span class=\"number\">99</span>, <span class=\"number\">12</span>])</span><br><span class=\"line\"><span class=\"comment\"># 查询价格在50到100范围内的书籍并按照价格排序</span></span><br><span class=\"line\">Book.objects.filter(price__range=[<span class=\"number\">50</span>, <span class=\"number\">100</span>]).order_by(<span class=\"string\">'price'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"外键关系字段添加数据\"><a href=\"#外键关系字段添加数据\" class=\"headerlink\" title=\"外键关系字段添加数据\"></a>外键关系字段添加数据</h1><p>在数据表定义中，Book表中的publish和Publish表是一个外键关系，那么此时在Book表中插入数据可以这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 插入一本A出版社出版的书，首先查到A出版社对象</span></span><br><span class=\"line\">publish_obj = Publish.objects.get(name=<span class=\"string\">'A'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后将对象赋给Book外键字段</span></span><br><span class=\"line\">book_info = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'LINUX'</span>, <span class=\"string\">'price'</span>: <span class=\"number\">998</span>, <span class=\"string\">'author'</span>: <span class=\"string\">'mike'</span>, <span class=\"string\">'pub_date'</span>: <span class=\"string\">'2019-10-01'</span>, <span class=\"string\">'publish'</span>: publish_obj&#125;</span><br><span class=\"line\">Book.objects.create(**book_info)</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"一对多外键关联查询\"><a href=\"#一对多外键关联查询\" class=\"headerlink\" title=\"一对多外键关联查询\"></a>一对多外键关联查询</h1><p>还是Book表和Publish表之间关联查询，可以通过Book表中的外键，查询到其所属的出版社信息，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一</span></span><br><span class=\"line\"><span class=\"comment\"># 首先查询到一条book的对象</span></span><br><span class=\"line\">book_obj = Book.objects.get(name=<span class=\"string\">\"go\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 获取book的属性</span></span><br><span class=\"line\">book_obj.name  <span class=\"comment\"># 书籍名称</span></span><br><span class=\"line\">book_obj.price  <span class=\"comment\"># 书籍价格</span></span><br><span class=\"line\"><span class=\"comment\"># 通过外键获取其对应Publish的信息</span></span><br><span class=\"line\">book_obj.publish.name  <span class=\"comment\"># publish是外建名</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式二，利用外键查找</span></span><br><span class=\"line\">Publish.objects.filter(book__name=<span class=\"string\">'go'</span>).values(<span class=\"string\">'name'</span>, <span class=\"string\">'city'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">Book.objects.filter(name=<span class=\"string\">'go'</span>).values(<span class=\"string\">\"publish__name\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>利用了双下划线，其中book为表名</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 某个时间段内的书的出版社信息</span></span><br><span class=\"line\">Book.objects.filter(pub_date__gt=<span class=\"string\">'2019-12-01'</span>, pub_date__lt=<span class=\"string\">'2019-12-31'</span>).values(<span class=\"string\">\"publish__name\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以反向查询，通过出版社的对象查询到出版社出版的书：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一，先查询指定出版社对象，再将对象赋值到Book表的外键中查询</span></span><br><span class=\"line\">publish_obj = Publish.objects.get(name=<span class=\"string\">\"A\"</span>)</span><br><span class=\"line\">book_obj = Book.objects.filter(publish=publish_obj).values(<span class=\"string\">'name'</span>, <span class=\"string\">'price'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式二，通过 _set方式进行查找</span></span><br><span class=\"line\">publish_obj = Publish.objects.get(name=<span class=\"string\">\"cctv\"</span>)</span><br><span class=\"line\">publish_obj.book_set.all()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这种方式中book为表名</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式三，利用外键查找</span></span><br><span class=\"line\">Book.objects.filter(publish__name=<span class=\"string\">'A'</span>).values(<span class=\"string\">'name'</span>, <span class=\"string\">'price'</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>利用了双下划线，其中publish为外键名称</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"多对多插入数据\"><a href=\"#多对多插入数据\" class=\"headerlink\" title=\"多对多插入数据\"></a>多对多插入数据</h1><p>如果是使用ManyToMany字段创建的多对多关系，中间表是自动生成的，没法用ORM直接插入数据。但可以通过ManyToMany字段赋值来实现绑定多对多关系。</p>\n<p>Book和Auhtor表是一个多对多关系，例如插入某一个书籍的作者信息可以如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先查询到某书籍的信息</span></span><br><span class=\"line\">book_obj = Book.objects.get(id=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 在查询到作者信息</span></span><br><span class=\"line\">authors_obj = Author.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 通过authors字段进行关系绑定</span></span><br><span class=\"line\">book_obj.authors.add(authors_obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果添加多个作者，则需要加上 *星号</span></span><br><span class=\"line\">authors_obj = Author.objects.all()</span><br><span class=\"line\">book_obj.authors.add(*authors_obj)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"多对多删除数据\"><a href=\"#多对多删除数据\" class=\"headerlink\" title=\"多对多删除数据\"></a>多对多删除数据</h1><p>删除数据直接使用remove方法即可，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">book_obj = Book.objects.get(id=<span class=\"number\">4</span>)</span><br><span class=\"line\">authors_obj = Author.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\">book_obj.authors.remove(authors_obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果是删除多个，则需要加上 *星号</span></span><br><span class=\"line\">authors_obj = Author.objects.all()</span><br><span class=\"line\">book_obj.authors.remove(*authors_obj)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也可以使用指定ID的方式来删除，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取消book id为2，author id为1的对应关系</span></span><br><span class=\"line\">book_obj = Book.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\">book_obj.authors.remove(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"多对多查询\"><a href=\"#多对多查询\" class=\"headerlink\" title=\"多对多查询\"></a>多对多查询</h1><p>多对多查询和一对多查询一样，可以使用双下划线进行外键查询，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询所有pete写的书，并显示书名和价格以及作者名称</span></span><br><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).values(<span class=\"string\">'name'</span>, <span class=\"string\">'price'</span>, <span class=\"string\">'authors__name'</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中authors是Book表中多对多字段</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h1><p>django的聚合函数可以用来进行最大值，均值等操作，首先需要引入一些函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Avg, Min, Sum, Max, Count</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>聚合函数为aggregate</strong></p>\n<p>例如求Book表中所有书的均价和总价：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().aggregate(Avg(<span class=\"string\">\"price\"</span>))</span><br><span class=\"line\">Book.objects.all().aggregate(Sum(<span class=\"string\">\"price\"</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果是需要多表关联，使用前面的方法过滤即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 求pete出版的书的总价</span></span><br><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).aggregate(Sum(<span class=\"string\">\"price\"</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上边这样子写，结果的格式是一个字典，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">'price__sum'</span>: <span class=\"number\">1341</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">'price__sum'</span>: <span class=\"number\">99</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中的key为条件和方法的组合</p>\n</blockquote>\n<p>如果想自定义key，则可以这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义key为“pete_money”</span></span><br><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).aggregate(pete_money=Sum(<span class=\"string\">'price'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">&#123;<span class=\"string\">'pete_money'</span>: <span class=\"number\">99</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取pete出版的书的个数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(authors__name=<span class=\"string\">'pete'</span>).aggregate(Count(<span class=\"string\">'name'</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Count中的条件是什么字段都可以，但是必须有</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h1><p><strong>分组函数为annotate</strong></p>\n<p>例如下面的需求就可以使用分组：获取每一个作者出版的书籍的价格总价：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.values(<span class=\"string\">\"authors__name\"</span>).annotate(Sum(<span class=\"string\">\"price\"</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里先分组，使用values指定分组的字段名称，这里是作者的名称，然后使用分组方法，指定处理函数为Sum根据价格求和</p>\n</blockquote>\n<p>其返回的结果为Queryset格式，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;QuerySet [&#123;<span class=\"string\">'authors__name'</span>: <span class=\"string\">'pete'</span>, <span class=\"string\">'price__sum'</span>: <span class=\"number\">154</span>&#125;, &#123;<span class=\"string\">'authors__name'</span>: <span class=\"string\">'alex'</span>, <span class=\"string\">'price__sum'</span>: <span class=\"number\">99</span>&#125;,...]&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：获取每一个出版社出版的最便宜的书：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Publish.objects.values(<span class=\"string\">\"name\"</span>).annotate(pub_min=Min(<span class=\"string\">\"book__price\"</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>现根据出版社的name进行分组，然后调用annotate进行处理</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"F查询和Q查询\"><a href=\"#F查询和Q查询\" class=\"headerlink\" title=\"F查询和Q查询\"></a>F查询和Q查询</h1><p>前面的条件查询使用的是filter和get，这两种查询条件是与关系，如果想设置或或者非的条件查询关系，则filter和get做不到，需要使用F和Q查询。</p>\n<p>首先引入F和Q：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> F, Q</span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如这个需求：每个book的价格便宜10元：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.all().update(price=F(<span class=\"string\">\"price\"</span>)<span class=\"number\">-10</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>首先查找到所有的书，调用update方法进行更新，F(‘price’)可以查询到每一本书的价格</p>\n</blockquote>\n<p>使用Q查询可以实现或关系或者非关系查询，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询价格为89元或者名字为go的书籍</span></span><br><span class=\"line\">Book.objects.filter(Q(price=<span class=\"number\">89</span>)|Q(name=<span class=\"string\">'go'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询书名不是go的书籍</span></span><br><span class=\"line\">Book.objects.filter(~Q(name=<span class=\"string\">'go'</span>))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Q函数中是查询条件，使用管道符 | 表示或关系，使用~ 表示非</p>\n</blockquote>\n<p>Q查询也可以可一般的查询条件组合使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.filter(Q(name=<span class=\"string\">'go'</span>), price=<span class=\"string\">\"20\"</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>但是，Q查询一定要在条件第一个</p>\n</blockquote>\n"},{"title":"部署Harbor镜像仓库","date":"2020-07-23T05:59:39.000Z","description":"部署harbor镜像仓库","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2179907255,3839696735&fm=11&gp=0.jpg","_content":"\n\n\n# 环境规划\n\n## 软件环境\n\n|      软件      |      版本       |\n| :------------: | :-------------: |\n|     docker     | docker-ce-18.06 |\n|     harbor     |  1.5.2-offline  |\n| docker-compose |      1.9.0      |\n\n\n\n## 硬件规划\n\n两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。\n\n\n\n<br>\n\n\n\n# 初始化设置\n\n\n\n## 创建数据目录\n\n```bash\n$ mkdir /data\n```\n\n\n\n## 格式化数据盘并挂载\n\n```bash\n$ mkfs.xfs /dev/vdb1\n$ echo \"/dev/vdb1 /data xfs defaults 0 0\" >> /etc/fstab\n$ mount -a \n$ df -h | grep /data\n/dev/vdb1       1.5T   33M  1.5T   1% /data\n```\n\n\n\n## 安装epel源\n\n```bash\n$ yum install -y epel-release\n```\n\n\n\n<br>\n\n\n\n# 安装docker\n\ndocker安装可以参考：{% post_link 部署Docker-CE  %}\n\n\n\n<br>\n\n\n\n# 安装docker-compose\n\nharbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。\n\n```bash\n$ yum list | grep docker-compose\n$ yum install -y docker-compose\n```\n\n\n\n<br>\n\n\n\n# 安装harbor\n\n## 下载harbor\n\n```bash\n$ mkdir /use/local/harbor1.5.2\n$ wget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/local/harbor1.5.2\n$ cd /usr/local/harbor1.5.2\n$ tar zxf harbor-offline-installer-v1.5.2.tgz\n```\n\n\n\n## 配置harbor\n\nharbor配置文件为 `harbor.cfg` ，这里编辑这个文件，设置harbor相关参数：\n\n```bash\n$ cd /usr/local/harbor1.5.2/harbor\n\n# 编辑 harbor.cfg文件，根据需要修改下面项目\n\n// harbor管理UI地址\nhostname = harbor.example.com\n\n// UI界面协议\nui_url_protocol = https\n\n// 最大复制工作数，默认为3，根据自身网络及机器配置调整\nmax_job_workers = 3\n\n// 如果使用https协议，则修改这里为自己的证书\nssl_cert = /data/cert/server.crt\nssl_cert_key = /data/cert/server.key\n\n// 用于在复制策略中加密或解密远程注册表的密码的密钥路径\nsecretkey_path = /data\n\n// 设置邮件服务器和邮箱账户，发送邮件使用\nemail_server = mail.example.com\nemail_server_port = 25\nemail_username = harbor@example.com\nemail_password = harbor123\nemail_from = harbor@example.com\n\n// harbor管理员密码\nharbor_admin_password = Harbor12345\n```\n\n\n\n## 编辑docker-compose.yml文件\n\n这里需要修改该文件中 `volumes` 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。\n\n\n\n## 安装harbor\n\nharbor已经提供了安装脚本 `install.sh` ，改脚本安装分为4个步骤：\n\n- 加载harbor镜像；\n- 准备环境；\n- 检查harbor实例；\n- 启动harbor；\n\n\n\n如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。\n\n\n\n```bash\n$ sh install.sh\n```\n\n\n\n## 检查启动情况\n\n```bash\n$ netstat -ntlp | grep docker-proxy\ntcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   \ntcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   \ntcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   \ntcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  \n\n$ docker ps \nCONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES\n1fd5462b0933        vmware/harbor-jobservice:v1.5.2        \"/harbor/start.sh\"       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice\n8627ade5943b        vmware/nginx-photon:v1.5.2             \"nginx -g 'daemon of…\"   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80->80/tcp, 10.15.0.164:443->443/tcp, 10.15.0.164:4443->4443/tcp   nginx\n5a3e9fef92a9        vmware/harbor-ui:v1.5.2                \"/harbor/start.sh\"       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui\n49481d00dae8        vmware/harbor-adminserver:v1.5.2       \"/harbor/start.sh\"       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver\n751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   \"/entrypoint.sh serv…\"   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry\n9e058c908747        vmware/harbor-db:v1.5.2                \"/usr/local/bin/dock…\"   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db\n3125d3428e36        vmware/redis-photon:v1.5.2             \"docker-entrypoint.s…\"   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis\ne4362a273d57        vmware/harbor-log:v1.5.2               \"/bin/sh -c /usr/loc…\"   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514->10514/tcp                                                      harbor-log\n\n```\n\n\n\n<br>\n\n\n\n# 使用harbor\n\n## 访问harbor\n\n安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：\n\n<img src=\"harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n默认用户名是`admin`，密码是在 `harbor.cfg` 中设置的 `admin_password` 字段的值。\n\n\n\n## 新建项目\n\n默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。\n\n<img src=\"create.png\" style=\"zoom:75%;\" />\n\n>  这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。\n\n\n\n## 创建用户\n\n默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 --> 创建用户：\n\n<img src=\"create-user.png\" style=\"zoom:75%;\" />\n\n\n\n## 上传、拉取镜像\n\n这里在本机下载一个nginx作为测试：\n\n```bash\n$ docker pull nginx\n```\n\n\n\n首先需要登录镜像仓库：\n\n```bash\n$ docker login 10.10.99.226\n```\n\n**根据提示输入用户名密码**\n\n\n\n上传前需要给待上传的镜像打标签：\n\n```bash\n$ docker tag nginx 10.10.99.226/test/nginx:v1\n```\n\n> 标签格式为 `[harbor地址]/仓库名/镜像名:[版本]`\n\n\n\n打完标签就可以上传镜像了：\n\n```bash\n$ docker push 10.10.99.226/test/nginx:v1\n```\n\n\n\n<img src=\"upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：\n\n```bash\n$ docker pull 10.10.99.226/test/nginx:v1\n```\n\n> 如果是私有仓库，则需要先登录","source":"_posts/部署Harbor镜像仓库.md","raw":"---\ntitle: 部署Harbor镜像仓库\ndate: 2020-07-23 13:59:39\ntags:\n- Docker\ncategories:\n- Docker\n- Harbor\ndescription: 部署harbor镜像仓库\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2179907255,3839696735&fm=11&gp=0.jpg\n---\n\n\n\n# 环境规划\n\n## 软件环境\n\n|      软件      |      版本       |\n| :------------: | :-------------: |\n|     docker     | docker-ce-18.06 |\n|     harbor     |  1.5.2-offline  |\n| docker-compose |      1.9.0      |\n\n\n\n## 硬件规划\n\n两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。\n\n\n\n<br>\n\n\n\n# 初始化设置\n\n\n\n## 创建数据目录\n\n```bash\n$ mkdir /data\n```\n\n\n\n## 格式化数据盘并挂载\n\n```bash\n$ mkfs.xfs /dev/vdb1\n$ echo \"/dev/vdb1 /data xfs defaults 0 0\" >> /etc/fstab\n$ mount -a \n$ df -h | grep /data\n/dev/vdb1       1.5T   33M  1.5T   1% /data\n```\n\n\n\n## 安装epel源\n\n```bash\n$ yum install -y epel-release\n```\n\n\n\n<br>\n\n\n\n# 安装docker\n\ndocker安装可以参考：{% post_link 部署Docker-CE  %}\n\n\n\n<br>\n\n\n\n# 安装docker-compose\n\nharbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。\n\n```bash\n$ yum list | grep docker-compose\n$ yum install -y docker-compose\n```\n\n\n\n<br>\n\n\n\n# 安装harbor\n\n## 下载harbor\n\n```bash\n$ mkdir /use/local/harbor1.5.2\n$ wget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/local/harbor1.5.2\n$ cd /usr/local/harbor1.5.2\n$ tar zxf harbor-offline-installer-v1.5.2.tgz\n```\n\n\n\n## 配置harbor\n\nharbor配置文件为 `harbor.cfg` ，这里编辑这个文件，设置harbor相关参数：\n\n```bash\n$ cd /usr/local/harbor1.5.2/harbor\n\n# 编辑 harbor.cfg文件，根据需要修改下面项目\n\n// harbor管理UI地址\nhostname = harbor.example.com\n\n// UI界面协议\nui_url_protocol = https\n\n// 最大复制工作数，默认为3，根据自身网络及机器配置调整\nmax_job_workers = 3\n\n// 如果使用https协议，则修改这里为自己的证书\nssl_cert = /data/cert/server.crt\nssl_cert_key = /data/cert/server.key\n\n// 用于在复制策略中加密或解密远程注册表的密码的密钥路径\nsecretkey_path = /data\n\n// 设置邮件服务器和邮箱账户，发送邮件使用\nemail_server = mail.example.com\nemail_server_port = 25\nemail_username = harbor@example.com\nemail_password = harbor123\nemail_from = harbor@example.com\n\n// harbor管理员密码\nharbor_admin_password = Harbor12345\n```\n\n\n\n## 编辑docker-compose.yml文件\n\n这里需要修改该文件中 `volumes` 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。\n\n\n\n## 安装harbor\n\nharbor已经提供了安装脚本 `install.sh` ，改脚本安装分为4个步骤：\n\n- 加载harbor镜像；\n- 准备环境；\n- 检查harbor实例；\n- 启动harbor；\n\n\n\n如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。\n\n\n\n```bash\n$ sh install.sh\n```\n\n\n\n## 检查启动情况\n\n```bash\n$ netstat -ntlp | grep docker-proxy\ntcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   \ntcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   \ntcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   \ntcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  \n\n$ docker ps \nCONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES\n1fd5462b0933        vmware/harbor-jobservice:v1.5.2        \"/harbor/start.sh\"       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice\n8627ade5943b        vmware/nginx-photon:v1.5.2             \"nginx -g 'daemon of…\"   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80->80/tcp, 10.15.0.164:443->443/tcp, 10.15.0.164:4443->4443/tcp   nginx\n5a3e9fef92a9        vmware/harbor-ui:v1.5.2                \"/harbor/start.sh\"       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui\n49481d00dae8        vmware/harbor-adminserver:v1.5.2       \"/harbor/start.sh\"       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver\n751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   \"/entrypoint.sh serv…\"   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry\n9e058c908747        vmware/harbor-db:v1.5.2                \"/usr/local/bin/dock…\"   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db\n3125d3428e36        vmware/redis-photon:v1.5.2             \"docker-entrypoint.s…\"   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis\ne4362a273d57        vmware/harbor-log:v1.5.2               \"/bin/sh -c /usr/loc…\"   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514->10514/tcp                                                      harbor-log\n\n```\n\n\n\n<br>\n\n\n\n# 使用harbor\n\n## 访问harbor\n\n安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：\n\n<img src=\"harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n默认用户名是`admin`，密码是在 `harbor.cfg` 中设置的 `admin_password` 字段的值。\n\n\n\n## 新建项目\n\n默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。\n\n<img src=\"create.png\" style=\"zoom:75%;\" />\n\n>  这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。\n\n\n\n## 创建用户\n\n默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 --> 创建用户：\n\n<img src=\"create-user.png\" style=\"zoom:75%;\" />\n\n\n\n## 上传、拉取镜像\n\n这里在本机下载一个nginx作为测试：\n\n```bash\n$ docker pull nginx\n```\n\n\n\n首先需要登录镜像仓库：\n\n```bash\n$ docker login 10.10.99.226\n```\n\n**根据提示输入用户名密码**\n\n\n\n上传前需要给待上传的镜像打标签：\n\n```bash\n$ docker tag nginx 10.10.99.226/test/nginx:v1\n```\n\n> 标签格式为 `[harbor地址]/仓库名/镜像名:[版本]`\n\n\n\n打完标签就可以上传镜像了：\n\n```bash\n$ docker push 10.10.99.226/test/nginx:v1\n```\n\n\n\n<img src=\"upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：\n\n```bash\n$ docker pull 10.10.99.226/test/nginx:v1\n```\n\n> 如果是私有仓库，则需要先登录","slug":"部署Harbor镜像仓库","published":1,"updated":"2020-07-23T06:27:03.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcyeyd3s000091n0aq0me4on","content":"<h1 id=\"环境规划\"><a href=\"#环境规划\" class=\"headerlink\" title=\"环境规划\"></a>环境规划</h1><h2 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h2><table>\n<thead>\n<tr>\n<th align=\"center\">软件</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker</td>\n<td align=\"center\">docker-ce-18.06</td>\n</tr>\n<tr>\n<td align=\"center\">harbor</td>\n<td align=\"center\">1.5.2-offline</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose</td>\n<td align=\"center\">1.9.0</td>\n</tr>\n</tbody></table>\n<h2 id=\"硬件规划\"><a href=\"#硬件规划\" class=\"headerlink\" title=\"硬件规划\"></a>硬件规划</h2><p>两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。</p>\n<br>\n\n\n\n<h1 id=\"初始化设置\"><a href=\"#初始化设置\" class=\"headerlink\" title=\"初始化设置\"></a>初始化设置</h1><h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"格式化数据盘并挂载\"><a href=\"#格式化数据盘并挂载\" class=\"headerlink\" title=\"格式化数据盘并挂载\"></a>格式化数据盘并挂载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/vdb1</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/dev/vdb1 /data xfs defaults 0 0\"</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a </span><br><span class=\"line\">$ df -h | grep /data</span><br><span class=\"line\">/dev/vdb1       1.5T   33M  1.5T   1% /data</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装epel源\"><a href=\"#安装epel源\" class=\"headerlink\" title=\"安装epel源\"></a>安装epel源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><p>docker安装可以参考：<a href=\"/2020/07/11/%E9%83%A8%E7%BD%B2Docker-CE/\" title=\"部署Docker CE\">部署Docker CE</a></p>\n<br>\n\n\n\n<h1 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h1><p>harbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list | grep docker-compose</span><br><span class=\"line\">$ yum install -y docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装harbor\"><a href=\"#安装harbor\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h1><h2 id=\"下载harbor\"><a href=\"#下载harbor\" class=\"headerlink\" title=\"下载harbor\"></a>下载harbor</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /use/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">$ wget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">$ tar zxf harbor-offline-installer-v1.5.2.tgz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置harbor\"><a href=\"#配置harbor\" class=\"headerlink\" title=\"配置harbor\"></a>配置harbor</h2><p>harbor配置文件为 <code>harbor.cfg</code> ，这里编辑这个文件，设置harbor相关参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2/harbor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 harbor.cfg文件，根据需要修改下面项目</span></span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理UI地址</span><br><span class=\"line\">hostname = harbor.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// UI界面协议</span><br><span class=\"line\">ui_url_protocol = https</span><br><span class=\"line\"></span><br><span class=\"line\">// 最大复制工作数，默认为3，根据自身网络及机器配置调整</span><br><span class=\"line\">max_job_workers = 3</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果使用https协议，则修改这里为自己的证书</span><br><span class=\"line\">ssl_cert = /data/cert/server.crt</span><br><span class=\"line\">ssl_cert_key = /data/cert/server.key</span><br><span class=\"line\"></span><br><span class=\"line\">// 用于在复制策略中加密或解密远程注册表的密码的密钥路径</span><br><span class=\"line\">secretkey_path = /data</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置邮件服务器和邮箱账户，发送邮件使用</span><br><span class=\"line\">email_server = mail.example.com</span><br><span class=\"line\">email_server_port = 25</span><br><span class=\"line\">email_username = harbor@example.com</span><br><span class=\"line\">email_password = harbor123</span><br><span class=\"line\">email_from = harbor@example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理员密码</span><br><span class=\"line\">harbor_admin_password = Harbor12345</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编辑docker-compose-yml文件\"><a href=\"#编辑docker-compose-yml文件\" class=\"headerlink\" title=\"编辑docker-compose.yml文件\"></a>编辑docker-compose.yml文件</h2><p>这里需要修改该文件中 <code>volumes</code> 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。</p>\n<h2 id=\"安装harbor-1\"><a href=\"#安装harbor-1\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h2><p>harbor已经提供了安装脚本 <code>install.sh</code> ，改脚本安装分为4个步骤：</p>\n<ul>\n<li>加载harbor镜像；</li>\n<li>准备环境；</li>\n<li>检查harbor实例；</li>\n<li>启动harbor；</li>\n</ul>\n<p>如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh install.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查启动情况\"><a href=\"#检查启动情况\" class=\"headerlink\" title=\"检查启动情况\"></a>检查启动情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep docker-proxy</span><br><span class=\"line\">tcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  </span><br><span class=\"line\"></span><br><span class=\"line\">$ docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES</span><br><span class=\"line\">1fd5462b0933        vmware/harbor-jobservice:v1.5.2        <span class=\"string\">\"/harbor/start.sh\"</span>       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice</span><br><span class=\"line\">8627ade5943b        vmware/nginx-photon:v1.5.2             <span class=\"string\">\"nginx -g 'daemon of…\"</span>   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80-&gt;80/tcp, 10.15.0.164:443-&gt;443/tcp, 10.15.0.164:4443-&gt;4443/tcp   nginx</span><br><span class=\"line\">5a3e9fef92a9        vmware/harbor-ui:v1.5.2                <span class=\"string\">\"/harbor/start.sh\"</span>       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui</span><br><span class=\"line\">49481d00dae8        vmware/harbor-adminserver:v1.5.2       <span class=\"string\">\"/harbor/start.sh\"</span>       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver</span><br><span class=\"line\">751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   <span class=\"string\">\"/entrypoint.sh serv…\"</span>   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry</span><br><span class=\"line\">9e058c908747        vmware/harbor-db:v1.5.2                <span class=\"string\">\"/usr/local/bin/dock…\"</span>   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db</span><br><span class=\"line\">3125d3428e36        vmware/redis-photon:v1.5.2             <span class=\"string\">\"docker-entrypoint.s…\"</span>   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis</span><br><span class=\"line\">e4362a273d57        vmware/harbor-log:v1.5.2               <span class=\"string\">\"/bin/sh -c /usr/loc…\"</span>   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514-&gt;10514/tcp                                                      harbor-log</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"使用harbor\"><a href=\"#使用harbor\" class=\"headerlink\" title=\"使用harbor\"></a>使用harbor</h1><h2 id=\"访问harbor\"><a href=\"#访问harbor\" class=\"headerlink\" title=\"访问harbor\"></a>访问harbor</h2><p>安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：</p>\n<img src= \"/img/loading.gif\" data-src=\"harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n<p>默认用户名是<code>admin</code>，密码是在 <code>harbor.cfg</code> 中设置的 <code>admin_password</code> 字段的值。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。</p>\n<img src= \"/img/loading.gif\" data-src=\"create.png\" style=\"zoom:75%;\" />\n\n<blockquote>\n<p> 这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。</p>\n</blockquote>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p>默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 –&gt; 创建用户：</p>\n<img src= \"/img/loading.gif\" data-src=\"create-user.png\" style=\"zoom:75%;\" />\n\n\n\n<h2 id=\"上传、拉取镜像\"><a href=\"#上传、拉取镜像\" class=\"headerlink\" title=\"上传、拉取镜像\"></a>上传、拉取镜像</h2><p>这里在本机下载一个nginx作为测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先需要登录镜像仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login 10.10.99.226</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据提示输入用户名密码</strong></p>\n<p>上传前需要给待上传的镜像打标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag nginx 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>标签格式为 <code>[harbor地址]/仓库名/镜像名:[版本]</code></p>\n</blockquote>\n<p>打完标签就可以上传镜像了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n<p>下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是私有仓库，则需要先登录</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"环境规划\"><a href=\"#环境规划\" class=\"headerlink\" title=\"环境规划\"></a>环境规划</h1><h2 id=\"软件环境\"><a href=\"#软件环境\" class=\"headerlink\" title=\"软件环境\"></a>软件环境</h2><table>\n<thead>\n<tr>\n<th align=\"center\">软件</th>\n<th align=\"center\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">docker</td>\n<td align=\"center\">docker-ce-18.06</td>\n</tr>\n<tr>\n<td align=\"center\">harbor</td>\n<td align=\"center\">1.5.2-offline</td>\n</tr>\n<tr>\n<td align=\"center\">docker-compose</td>\n<td align=\"center\">1.9.0</td>\n</tr>\n</tbody></table>\n<h2 id=\"硬件规划\"><a href=\"#硬件规划\" class=\"headerlink\" title=\"硬件规划\"></a>硬件规划</h2><p>两台服务器作为harbor服务器，配置8核16G，一个作为主服务器，另一个作为从服务器（从主服务器同步镜像数据），两个分别挂载1.5T数据盘作为镜像数据存储。</p>\n<br>\n\n\n\n<h1 id=\"初始化设置\"><a href=\"#初始化设置\" class=\"headerlink\" title=\"初始化设置\"></a>初始化设置</h1><h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"格式化数据盘并挂载\"><a href=\"#格式化数据盘并挂载\" class=\"headerlink\" title=\"格式化数据盘并挂载\"></a>格式化数据盘并挂载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkfs.xfs /dev/vdb1</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"/dev/vdb1 /data xfs defaults 0 0\"</span> &gt;&gt; /etc/fstab</span><br><span class=\"line\">$ mount -a </span><br><span class=\"line\">$ df -h | grep /data</span><br><span class=\"line\">/dev/vdb1       1.5T   33M  1.5T   1% /data</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装epel源\"><a href=\"#安装epel源\" class=\"headerlink\" title=\"安装epel源\"></a>安装epel源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h1><p>docker安装可以参考：<a href=\"/2020/07/11/%E9%83%A8%E7%BD%B2Docker-CE/\" title=\"部署Docker CE\">部署Docker CE</a></p>\n<br>\n\n\n\n<h1 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h1><p>harbor需要docker-compose在1.7.1及以上版本，可以从yum安装，但是需要注意版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list | grep docker-compose</span><br><span class=\"line\">$ yum install -y docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装harbor\"><a href=\"#安装harbor\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h1><h2 id=\"下载harbor\"><a href=\"#下载harbor\" class=\"headerlink\" title=\"下载harbor\"></a>下载harbor</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /use/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">$ wget https://storage.googleapis.com/harbor-releases/harbor-offline-installer-v1.5.2.tgz -P /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2</span><br><span class=\"line\">$ tar zxf harbor-offline-installer-v1.5.2.tgz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置harbor\"><a href=\"#配置harbor\" class=\"headerlink\" title=\"配置harbor\"></a>配置harbor</h2><p>harbor配置文件为 <code>harbor.cfg</code> ，这里编辑这个文件，设置harbor相关参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/harbor1.5.2/harbor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑 harbor.cfg文件，根据需要修改下面项目</span></span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理UI地址</span><br><span class=\"line\">hostname = harbor.example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// UI界面协议</span><br><span class=\"line\">ui_url_protocol = https</span><br><span class=\"line\"></span><br><span class=\"line\">// 最大复制工作数，默认为3，根据自身网络及机器配置调整</span><br><span class=\"line\">max_job_workers = 3</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果使用https协议，则修改这里为自己的证书</span><br><span class=\"line\">ssl_cert = /data/cert/server.crt</span><br><span class=\"line\">ssl_cert_key = /data/cert/server.key</span><br><span class=\"line\"></span><br><span class=\"line\">// 用于在复制策略中加密或解密远程注册表的密码的密钥路径</span><br><span class=\"line\">secretkey_path = /data</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置邮件服务器和邮箱账户，发送邮件使用</span><br><span class=\"line\">email_server = mail.example.com</span><br><span class=\"line\">email_server_port = 25</span><br><span class=\"line\">email_username = harbor@example.com</span><br><span class=\"line\">email_password = harbor123</span><br><span class=\"line\">email_from = harbor@example.com</span><br><span class=\"line\"></span><br><span class=\"line\">// harbor管理员密码</span><br><span class=\"line\">harbor_admin_password = Harbor12345</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"编辑docker-compose-yml文件\"><a href=\"#编辑docker-compose-yml文件\" class=\"headerlink\" title=\"编辑docker-compose.yml文件\"></a>编辑docker-compose.yml文件</h2><p>这里需要修改该文件中 <code>volumes</code> 挂载数据卷的位置，默认是将数据存储在本机data目录下，这个刚好满足了当前的情况（data目录挂载的是大磁盘），如果大磁盘挂载在其他目录，则需要修改这里的路径。</p>\n<h2 id=\"安装harbor-1\"><a href=\"#安装harbor-1\" class=\"headerlink\" title=\"安装harbor\"></a>安装harbor</h2><p>harbor已经提供了安装脚本 <code>install.sh</code> ，改脚本安装分为4个步骤：</p>\n<ul>\n<li>加载harbor镜像；</li>\n<li>准备环境；</li>\n<li>检查harbor实例；</li>\n<li>启动harbor；</li>\n</ul>\n<p>如果以上4个步骤都没有错误就说明harbor安装成功了，对于修改了harbor配置的情况，也需要运行这个脚本来生效配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh install.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查启动情况\"><a href=\"#检查启动情况\" class=\"headerlink\" title=\"检查启动情况\"></a>检查启动情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep docker-proxy</span><br><span class=\"line\">tcp        0      0 127.0.0.1:1514          0.0.0.0:*               LISTEN      8498/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:80          0.0.0.0:*               LISTEN      9901/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:443         0.0.0.0:*               LISTEN      9866/docker-proxy   </span><br><span class=\"line\">tcp        0      0 10.15.0.164:4443        0.0.0.0:*               LISTEN      9809/docker-proxy  </span><br><span class=\"line\"></span><br><span class=\"line\">$ docker ps </span><br><span class=\"line\">CONTAINER ID        IMAGE                                  COMMAND                  CREATED             STATUS                    PORTS                                                                          NAMES</span><br><span class=\"line\">1fd5462b0933        vmware/harbor-jobservice:v1.5.2        <span class=\"string\">\"/harbor/start.sh\"</span>       54 seconds ago      Up 50 seconds                                                                                            harbor-jobservice</span><br><span class=\"line\">8627ade5943b        vmware/nginx-photon:v1.5.2             <span class=\"string\">\"nginx -g 'daemon of…\"</span>   54 seconds ago      Up 41 seconds (healthy)   10.15.0.164:80-&gt;80/tcp, 10.15.0.164:443-&gt;443/tcp, 10.15.0.164:4443-&gt;4443/tcp   nginx</span><br><span class=\"line\">5a3e9fef92a9        vmware/harbor-ui:v1.5.2                <span class=\"string\">\"/harbor/start.sh\"</span>       55 seconds ago      Up 53 seconds (healthy)                                                                                  harbor-ui</span><br><span class=\"line\">49481d00dae8        vmware/harbor-adminserver:v1.5.2       <span class=\"string\">\"/harbor/start.sh\"</span>       56 seconds ago      Up 54 seconds (healthy)                                                                                  harbor-adminserver</span><br><span class=\"line\">751bd2b620f1        vmware/registry-photon:v2.6.2-v1.5.2   <span class=\"string\">\"/entrypoint.sh serv…\"</span>   56 seconds ago      Up 54 seconds (healthy)   5000/tcp                                                                       registry</span><br><span class=\"line\">9e058c908747        vmware/harbor-db:v1.5.2                <span class=\"string\">\"/usr/local/bin/dock…\"</span>   56 seconds ago      Up 54 seconds (healthy)   3306/tcp                                                                       harbor-db</span><br><span class=\"line\">3125d3428e36        vmware/redis-photon:v1.5.2             <span class=\"string\">\"docker-entrypoint.s…\"</span>   56 seconds ago      Up 54 seconds             6379/tcp                                                                       redis</span><br><span class=\"line\">e4362a273d57        vmware/harbor-log:v1.5.2               <span class=\"string\">\"/bin/sh -c /usr/loc…\"</span>   56 seconds ago      Up 55 seconds (healthy)   127.0.0.1:1514-&gt;10514/tcp                                                      harbor-log</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"使用harbor\"><a href=\"#使用harbor\" class=\"headerlink\" title=\"使用harbor\"></a>使用harbor</h1><h2 id=\"访问harbor\"><a href=\"#访问harbor\" class=\"headerlink\" title=\"访问harbor\"></a>访问harbor</h2><p>安装完成后，通过浏览器访问 80 端口即可进入harbor登录界面：</p>\n<img src=\"harbor-login.png\" style=\"zoom:75%;\" />\n\n\n\n<p>默认用户名是<code>admin</code>，密码是在 <code>harbor.cfg</code> 中设置的 <code>admin_password</code> 字段的值。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>默认系统自动添加了library项目，也可以点击项目标签下边的 新建项目 来添加一个新的项目。</p>\n<img src=\"create.png\" style=\"zoom:75%;\" />\n\n<blockquote>\n<p> 这里创建了一个名为test的项目，并且把它标记为 公开的项目，这样所有人都可以访问这个项目。</p>\n</blockquote>\n<h2 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h2><p>默认系统有一个admin用户，可以根据实际情况创建多个用户。点击左侧 用户管理 –&gt; 创建用户：</p>\n<img src=\"create-user.png\" style=\"zoom:75%;\" />\n\n\n\n<h2 id=\"上传、拉取镜像\"><a href=\"#上传、拉取镜像\" class=\"headerlink\" title=\"上传、拉取镜像\"></a>上传、拉取镜像</h2><p>这里在本机下载一个nginx作为测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先需要登录镜像仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login 10.10.99.226</span><br></pre></td></tr></table></figure>\n\n<p><strong>根据提示输入用户名密码</strong></p>\n<p>上传前需要给待上传的镜像打标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag nginx 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>标签格式为 <code>[harbor地址]/仓库名/镜像名:[版本]</code></p>\n</blockquote>\n<p>打完标签就可以上传镜像了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker push 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"upload-image.png\" style=\"zoom:75%;\" />\n\n\n\n<p>下载镜像可以在仓库中镜像旁边找到下载镜像的命令，直接执行即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull 10.10.99.226/<span class=\"built_in\">test</span>/nginx:v1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是私有仓库，则需要先登录</p>\n</blockquote>\n"},{"title":"python读取配置文件","date":"2020-07-23T07:51:11.000Z","description":"python读取ini格式的配置文件内容","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","_content":"\n\n\n首先定义一个配置文件如下的格式：\n\n```ini\n# host.conf\n[register]\nport = port80,port443\ntitle = AlarmPort\n\n[port80]\nport = 80\nhost = 1.1.1.1,2.2.2.2, 3.3.3.3\n```\n\n\n\n`[register]`表示一个分组，下面的变量使用`key-value`格式\n\n\n\n然后需要定义一个类，用来读取配置文件：\n\n```python\n# getconfig.py\nimport os\nimport ConfigParser\n\n\nclass Getconfig(object):\n\n    def getconfig(self, section, key):\n        conf = ConfigParser.ConfigParser()\n        path = os.path.split(os.path.realpath(__file__))[0] + '/config/host.conf'\n        conf.read(path)\n        return conf.get(section, key)\n```\n\n\n\n这个类接收两个参数：\n\n- `section`为配置文件中的分组的名称，如`register`；\n- `key`为配置文件中分组下的key名，如`title`；\n\n\n\n使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：\n\n```python\nimport getconfig\n\nconfig = getconfig.Getconfig()\nregist_port = config.getconfig('register', 'port')\n```\n\n","source":"_posts/python读取配置文件.md","raw":"---\ntitle: python读取配置文件\ndate: 2020-07-23 15:51:11\ntags:\n- Python\ncategories:\n- Python\n- 代码\ndescription: python读取ini格式的配置文件内容\ncover:\n---\n\n\n\n首先定义一个配置文件如下的格式：\n\n```ini\n# host.conf\n[register]\nport = port80,port443\ntitle = AlarmPort\n\n[port80]\nport = 80\nhost = 1.1.1.1,2.2.2.2, 3.3.3.3\n```\n\n\n\n`[register]`表示一个分组，下面的变量使用`key-value`格式\n\n\n\n然后需要定义一个类，用来读取配置文件：\n\n```python\n# getconfig.py\nimport os\nimport ConfigParser\n\n\nclass Getconfig(object):\n\n    def getconfig(self, section, key):\n        conf = ConfigParser.ConfigParser()\n        path = os.path.split(os.path.realpath(__file__))[0] + '/config/host.conf'\n        conf.read(path)\n        return conf.get(section, key)\n```\n\n\n\n这个类接收两个参数：\n\n- `section`为配置文件中的分组的名称，如`register`；\n- `key`为配置文件中分组下的key名，如`title`；\n\n\n\n使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：\n\n```python\nimport getconfig\n\nconfig = getconfig.Getconfig()\nregist_port = config.getconfig('register', 'port')\n```\n\n","slug":"python读取配置文件","published":1,"updated":"2020-07-23T08:02:45.682Z","_id":"ckcyi223k0000qtn0ggc73ixu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>首先定义一个配置文件如下的格式：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># host.conf</span></span><br><span class=\"line\"><span class=\"section\">[register]</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = port80,port443</span><br><span class=\"line\"><span class=\"attr\">title</span> = AlarmPort</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[port80]</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">host</span> = <span class=\"number\">1.1</span>.<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>.<span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>.<span class=\"number\">3.3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>[register]</code>表示一个分组，下面的变量使用<code>key-value</code>格式</p>\n<p>然后需要定义一个类，用来读取配置文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getconfig.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> ConfigParser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Getconfig</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getconfig</span><span class=\"params\">(self, section, key)</span>:</span></span><br><span class=\"line\">        conf = ConfigParser.ConfigParser()</span><br><span class=\"line\">        path = os.path.split(os.path.realpath(__file__))[<span class=\"number\">0</span>] + <span class=\"string\">'/config/host.conf'</span></span><br><span class=\"line\">        conf.read(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> conf.get(section, key)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个类接收两个参数：</p>\n<ul>\n<li><code>section</code>为配置文件中的分组的名称，如<code>register</code>；</li>\n<li><code>key</code>为配置文件中分组下的key名，如<code>title</code>；</li>\n</ul>\n<p>使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getconfig</span><br><span class=\"line\"></span><br><span class=\"line\">config = getconfig.Getconfig()</span><br><span class=\"line\">regist_port = config.getconfig(<span class=\"string\">'register'</span>, <span class=\"string\">'port'</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>首先定义一个配置文件如下的格式：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># host.conf</span></span><br><span class=\"line\"><span class=\"section\">[register]</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = port80,port443</span><br><span class=\"line\"><span class=\"attr\">title</span> = AlarmPort</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[port80]</span></span><br><span class=\"line\"><span class=\"attr\">port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">host</span> = <span class=\"number\">1.1</span>.<span class=\"number\">1.1</span>,<span class=\"number\">2.2</span>.<span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>.<span class=\"number\">3.3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>[register]</code>表示一个分组，下面的变量使用<code>key-value</code>格式</p>\n<p>然后需要定义一个类，用来读取配置文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getconfig.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> ConfigParser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Getconfig</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getconfig</span><span class=\"params\">(self, section, key)</span>:</span></span><br><span class=\"line\">        conf = ConfigParser.ConfigParser()</span><br><span class=\"line\">        path = os.path.split(os.path.realpath(__file__))[<span class=\"number\">0</span>] + <span class=\"string\">'/config/host.conf'</span></span><br><span class=\"line\">        conf.read(path)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> conf.get(section, key)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个类接收两个参数：</p>\n<ul>\n<li><code>section</code>为配置文件中的分组的名称，如<code>register</code>；</li>\n<li><code>key</code>为配置文件中分组下的key名，如<code>title</code>；</li>\n</ul>\n<p>使用中，只需要实例化这个类，然后传入需要读取的配置即可，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> getconfig</span><br><span class=\"line\"></span><br><span class=\"line\">config = getconfig.Getconfig()</span><br><span class=\"line\">regist_port = config.getconfig(<span class=\"string\">'register'</span>, <span class=\"string\">'port'</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"[k8s实践系列]在k8s中部署harbor","date":"2020-07-24T07:11:22.000Z","description":"在k8s中使用helm部署harbor仓库","cover":"https://pic.rmb.bdstatic.com/6ce58d670519dd908331dcca29097329.png@wm_2,t_55m+5a625Y+3L2JsdWVhcHBsZeW6t+S5kA==,fc_ffffff,ff_U2ltSGVp,sz_14,x_9,y_9","_content":"\n\n\n# 准备\n\n首先创建一个namespace：\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: harbor\n```\n\n\n\n然后创建storageclass用于habror数据持久化存储：\n\n```yaml\n# storageclass.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: harbor-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n执行下面的命令进行创建：\n\n```bash\n$ kubectl apply -f namespace.yaml\n$ kubectl apply -f storageclass.yaml\n```\n\n<img src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n# 下载harbor helm\n\nHarbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：\n\n```bash\n$ git clone https://github.com/goharbor/harbor-helm\n```\n\n\n\n官方说：`The master branch is in heavy development, please use the other stable versions instead`\n\n，所以需要切换到其他稳定分支，例如：\n\n```bash\n$ cd harbor-helm\n$ git checkout 1.2.0\n```\n\n\n\n<br>\n\n\n\n# 准备配置文件\n\n在helm下的`values.yaml`文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：\n\n```yaml\n# config.yaml\nexpose:\n  type: ingress\n  tls:\n    enabled: true\n  ingress:\n    hosts:\n      core: harbor.example.com\n      notary: notary.example.com\n    annotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n      nginx.ingress.kubernetes.io/proxy-body-size: \"0\"\n\nexternalURL: https://harbor.example.com\n\npersistence:\n  enabled: true\n  resourcePolicy: \"keep\"\n  persistentVolumeClaim:\n    registry:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    chartmuseum:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    jobservice:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    database:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    redis:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n \nharborAdminPassword: \"Harbor12345\"\n```\n\n\n\n如果使用的是`traefik ingress`，则`annotations`则改为如下的形式，我这里用的是`ingress-nginx`：\n\n```yaml\nannotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      kubernetes.io/ingress.class: \"traefik\"\n      traefik.ingress.kubernetes.io/router.tls: \"true\"\n      traefik.ingress.kubernetes.io/router.entrypoints: websecure\n```\n\n\n\n<br>\n\n\n\n# 部署harbor\n\n直接使用helm命令进行部署，执行下面的命令：\n\n```bash\n$ helm install harbor -f config.yaml harbor-helm/ -n harbor\n```\n\n\n\n确保都正常启动：\n\n```bash\n$ helm ls -n harbor\n$ kubectl get pod,service,ingress -n harbor\n```\n\n<img src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n# 设置nginx\n\n在nginx中增加harbor的虚拟主机配置：\n\n```nginx\n# harbor.conf\nupstream ingress-443 {\n    server 10.8.138.12:443 max_fails=3 fail_timeout=5s;\n}\n\nserver {\n    listen 80;\n    server_name harbor.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name harbor.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/harbor.example.com_access.log main;\n    error_log /var/log/nginx/harbor.example.com_error.log;\n\n    location / {\n      proxy_pass https://ingress-443;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n    }\n\n    location ~* /\\.(svn|git)/ {\n      return 404;\n    }\n}\n```\n\n\n\n检查配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n<br>\n\n\n\n# 测试\n\n本地绑定好host之后访问域名`harbor.example.com`，即可看到harbor的登录页面：\n\n<img src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n默认的用户名为admin，密码在配置文件中设置的，默认为`Harbor12345`，即可登录进去了：\n\n<img src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# docker推送镜像\n\n首先使用docker命令登录harbor：\n\n```bash\n$ docker login harbor.example.com\n```\n\n\n\n这是也许会出现这个报错：`Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority`，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。\n\n\n\n需要编辑`/etc/docker/daemon.json`，（如果没有就创建），增加下面的参数：\n\n```bash\n\"insecure-registries\": [\"harbor.example.com\"],\n```\n\n\n\n然后重启docker即可登录成功：\n\n```bash\n$ docker login harbor.example.com\nUsername: admin\nPassword:\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n```\n\n\n\n接下来下载一个镜像并重新打tag上传：\n\n```bash\n$ docker pull busybox:latest\n$ docker tag busybox:latest harbor.example.com/library/busybox:v1\n$ docker push harbor.example.com/library/busybox:v1\n```\n\n\n\n在页面上看，已经推上来镜像了，说明基本的harbor功能正常：\n\n<img src=\"push.png\" style=\"zoom:50%;\" />\n\n","source":"_posts/k8s实践系列-在k8s中部署harbor.md","raw":"---\ntitle: '[k8s实践系列]在k8s中部署harbor'\ndate: 2020-07-24 15:11:22\ntags:\n- k8s\ncategories:\n- 实践K8s\n- Harbor\ndescription: 在k8s中使用helm部署harbor仓库\ncover: https://pic.rmb.bdstatic.com/6ce58d670519dd908331dcca29097329.png@wm_2,t_55m+5a625Y+3L2JsdWVhcHBsZeW6t+S5kA==,fc_ffffff,ff_U2ltSGVp,sz_14,x_9,y_9\n---\n\n\n\n# 准备\n\n首先创建一个namespace：\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: harbor\n```\n\n\n\n然后创建storageclass用于habror数据持久化存储：\n\n```yaml\n# storageclass.yaml\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: harbor-storageclass\n  labels:\n    app: nfs-client-provisioner\nprovisioner: cluster.local/nfs-client-provisioner\nallowVolumeExpansion: true\nreclaimPolicy: Retain\nparameters:\n  archiveOnDelete: \"true\"\n```\n\n\n\n执行下面的命令进行创建：\n\n```bash\n$ kubectl apply -f namespace.yaml\n$ kubectl apply -f storageclass.yaml\n```\n\n<img src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n# 下载harbor helm\n\nHarbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：\n\n```bash\n$ git clone https://github.com/goharbor/harbor-helm\n```\n\n\n\n官方说：`The master branch is in heavy development, please use the other stable versions instead`\n\n，所以需要切换到其他稳定分支，例如：\n\n```bash\n$ cd harbor-helm\n$ git checkout 1.2.0\n```\n\n\n\n<br>\n\n\n\n# 准备配置文件\n\n在helm下的`values.yaml`文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：\n\n```yaml\n# config.yaml\nexpose:\n  type: ingress\n  tls:\n    enabled: true\n  ingress:\n    hosts:\n      core: harbor.example.com\n      notary: notary.example.com\n    annotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n      nginx.ingress.kubernetes.io/proxy-body-size: \"0\"\n\nexternalURL: https://harbor.example.com\n\npersistence:\n  enabled: true\n  resourcePolicy: \"keep\"\n  persistentVolumeClaim:\n    registry:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    chartmuseum:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    jobservice:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    database:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n    redis:\n      storageClass: \"harbor-data\"\n      size: 50Gi\n \nharborAdminPassword: \"Harbor12345\"\n```\n\n\n\n如果使用的是`traefik ingress`，则`annotations`则改为如下的形式，我这里用的是`ingress-nginx`：\n\n```yaml\nannotations:\n      ingress.kubernetes.io/ssl-redirect: \"true\"\n      ingress.kubernetes.io/proxy-body-size: \"0\"\n      kubernetes.io/ingress.class: \"traefik\"\n      traefik.ingress.kubernetes.io/router.tls: \"true\"\n      traefik.ingress.kubernetes.io/router.entrypoints: websecure\n```\n\n\n\n<br>\n\n\n\n# 部署harbor\n\n直接使用helm命令进行部署，执行下面的命令：\n\n```bash\n$ helm install harbor -f config.yaml harbor-helm/ -n harbor\n```\n\n\n\n确保都正常启动：\n\n```bash\n$ helm ls -n harbor\n$ kubectl get pod,service,ingress -n harbor\n```\n\n<img src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n# 设置nginx\n\n在nginx中增加harbor的虚拟主机配置：\n\n```nginx\n# harbor.conf\nupstream ingress-443 {\n    server 10.8.138.12:443 max_fails=3 fail_timeout=5s;\n}\n\nserver {\n    listen 80;\n    server_name harbor.example.com;\n    rewrite ^(.*) https://$host$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name harbor.example.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    access_log /var/log/nginx/harbor.example.com_access.log main;\n    error_log /var/log/nginx/harbor.example.com_error.log;\n\n    location / {\n      proxy_pass https://ingress-443;\n      proxy_set_header Host $http_host;\n    }\n\n    location = /favicon.ico {\n      log_not_found off;\n      access_log off;\n    }\n\n    location ~* /\\.(svn|git)/ {\n      return 404;\n    }\n}\n```\n\n\n\n检查配置并重载：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n<br>\n\n\n\n# 测试\n\n本地绑定好host之后访问域名`harbor.example.com`，即可看到harbor的登录页面：\n\n<img src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n默认的用户名为admin，密码在配置文件中设置的，默认为`Harbor12345`，即可登录进去了：\n\n<img src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# docker推送镜像\n\n首先使用docker命令登录harbor：\n\n```bash\n$ docker login harbor.example.com\n```\n\n\n\n这是也许会出现这个报错：`Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority`，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。\n\n\n\n需要编辑`/etc/docker/daemon.json`，（如果没有就创建），增加下面的参数：\n\n```bash\n\"insecure-registries\": [\"harbor.example.com\"],\n```\n\n\n\n然后重启docker即可登录成功：\n\n```bash\n$ docker login harbor.example.com\nUsername: admin\nPassword:\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n```\n\n\n\n接下来下载一个镜像并重新打tag上传：\n\n```bash\n$ docker pull busybox:latest\n$ docker tag busybox:latest harbor.example.com/library/busybox:v1\n$ docker push harbor.example.com/library/busybox:v1\n```\n\n\n\n在页面上看，已经推上来镜像了，说明基本的harbor功能正常：\n\n<img src=\"push.png\" style=\"zoom:50%;\" />\n\n","slug":"k8s实践系列-在k8s中部署harbor","published":1,"updated":"2020-07-24T08:40:50.427Z","_id":"ckczw6x370000uxn06b9f4wii","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>首先创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建storageclass用于habror数据持久化存储：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># storageclass.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">\"true\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br><span class=\"line\">$ kubectl apply -f storageclass.yaml</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"下载harbor-helm\"><a href=\"#下载harbor-helm\" class=\"headerlink\" title=\"下载harbor helm\"></a>下载harbor helm</h1><p>Harbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/goharbor/harbor-helm</span><br></pre></td></tr></table></figure>\n\n\n\n<p>官方说：<code>The master branch is in heavy development, please use the other stable versions instead</code></p>\n<p>，所以需要切换到其他稳定分支，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> harbor-helm</span><br><span class=\"line\">$ git checkout 1.2.0</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"准备配置文件\"><a href=\"#准备配置文件\" class=\"headerlink\" title=\"准备配置文件\"></a>准备配置文件</h1><p>在helm下的<code>values.yaml</code>文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">expose:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ingress</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ingress:</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span></span><br><span class=\"line\">      <span class=\"attr\">core:</span> <span class=\"string\">harbor.example.com</span></span><br><span class=\"line\">      <span class=\"attr\">notary:</span> <span class=\"string\">notary.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">externalURL:</span> <span class=\"string\">https://harbor.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">persistence:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">resourcePolicy:</span> <span class=\"string\">\"keep\"</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">    <span class=\"attr\">registry:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">chartmuseum:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">jobservice:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">harborAdminPassword:</span> <span class=\"string\">\"Harbor12345\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用的是<code>traefik ingress</code>，则<code>annotations</code>则改为如下的形式，我这里用的是<code>ingress-nginx</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">\"traefik\"</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.tls:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class=\"string\">websecure</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署harbor\"><a href=\"#部署harbor\" class=\"headerlink\" title=\"部署harbor\"></a>部署harbor</h1><p>直接使用helm命令进行部署，执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install harbor -f config.yaml harbor-helm/ -n harbor</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm ls -n harbor</span><br><span class=\"line\">$ kubectl get pod,service,ingress -n harbor</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n<h1 id=\"设置nginx\"><a href=\"#设置nginx\" class=\"headerlink\" title=\"设置nginx\"></a>设置nginx</h1><p>在nginx中增加harbor的虚拟主机配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># harbor.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">443</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.12:443</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/harbor.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/harbor.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> https://ingress-443;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>本地绑定好host之后访问域名<code>harbor.example.com</code>，即可看到harbor的登录页面：</p>\n<img src= \"/img/loading.gif\" data-src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n<p>默认的用户名为admin，密码在配置文件中设置的，默认为<code>Harbor12345</code>，即可登录进去了：</p>\n<img src= \"/img/loading.gif\" data-src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"docker推送镜像\"><a href=\"#docker推送镜像\" class=\"headerlink\" title=\"docker推送镜像\"></a>docker推送镜像</h1><p>首先使用docker命令登录harbor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这是也许会出现这个报错：<code>Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority</code>，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。</p>\n<p>需要编辑<code>/etc/docker/daemon.json</code>，（如果没有就创建），增加下面的参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"insecure-registries\"</span>: [<span class=\"string\">\"harbor.example.com\"</span>],</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后重启docker即可登录成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password:</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted <span class=\"keyword\">in</span> /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/<span class=\"comment\">#credentials-store</span></span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来下载一个镜像并重新打tag上传：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull busybox:latest</span><br><span class=\"line\">$ docker tag busybox:latest harbor.example.com/library/busybox:v1</span><br><span class=\"line\">$ docker push harbor.example.com/library/busybox:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在页面上看，已经推上来镜像了，说明基本的harbor功能正常：</p>\n<img src= \"/img/loading.gif\" data-src=\"push.png\" style=\"zoom:50%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>首先创建一个namespace：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后创建storageclass用于habror数据持久化存储：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># storageclass.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">storage.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">StorageClass</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">harbor-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">provisioner:</span> <span class=\"string\">cluster.local/nfs-client-provisioner</span></span><br><span class=\"line\"><span class=\"attr\">allowVolumeExpansion:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">reclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\"><span class=\"attr\">parameters:</span></span><br><span class=\"line\">  <span class=\"attr\">archiveOnDelete:</span> <span class=\"string\">\"true\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令进行创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f namespace.yaml</span><br><span class=\"line\">$ kubectl apply -f storageclass.yaml</span><br></pre></td></tr></table></figure>\n\n<img src=\"prepare.png\" style=\"zoom:70%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"下载harbor-helm\"><a href=\"#下载harbor-helm\" class=\"headerlink\" title=\"下载harbor helm\"></a>下载harbor helm</h1><p>Harbor 官方提供了对应的 Helm Chart 包，可以方便地进行安装，首先将其下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/goharbor/harbor-helm</span><br></pre></td></tr></table></figure>\n\n\n\n<p>官方说：<code>The master branch is in heavy development, please use the other stable versions instead</code></p>\n<p>，所以需要切换到其他稳定分支，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> harbor-helm</span><br><span class=\"line\">$ git checkout 1.2.0</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"准备配置文件\"><a href=\"#准备配置文件\" class=\"headerlink\" title=\"准备配置文件\"></a>准备配置文件</h1><p>在helm下的<code>values.yaml</code>文件中定义了很多参数并且有详细的解释，这里我们使用一个新的文件来覆盖其中的部分参数实现自定义配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">expose:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ingress</span></span><br><span class=\"line\">  <span class=\"attr\">tls:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ingress:</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span></span><br><span class=\"line\">      <span class=\"attr\">core:</span> <span class=\"string\">harbor.example.com</span></span><br><span class=\"line\">      <span class=\"attr\">notary:</span> <span class=\"string\">notary.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">externalURL:</span> <span class=\"string\">https://harbor.example.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">persistence:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">resourcePolicy:</span> <span class=\"string\">\"keep\"</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">    <span class=\"attr\">registry:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">chartmuseum:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">jobservice:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">storageClass:</span> <span class=\"string\">\"harbor-data\"</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">harborAdminPassword:</span> <span class=\"string\">\"Harbor12345\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用的是<code>traefik ingress</code>，则<code>annotations</code>则改为如下的形式，我这里用的是<code>ingress-nginx</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/ssl-redirect:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">ingress.kubernetes.io/proxy-body-size:</span> <span class=\"string\">\"0\"</span></span><br><span class=\"line\">      <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">\"traefik\"</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.tls:</span> <span class=\"string\">\"true\"</span></span><br><span class=\"line\">      <span class=\"attr\">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class=\"string\">websecure</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署harbor\"><a href=\"#部署harbor\" class=\"headerlink\" title=\"部署harbor\"></a>部署harbor</h1><p>直接使用helm命令进行部署，执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm install harbor -f config.yaml harbor-helm/ -n harbor</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ helm ls -n harbor</span><br><span class=\"line\">$ kubectl get pod,service,ingress -n harbor</span><br></pre></td></tr></table></figure>\n\n<img src=\"check.png\" style=\"zoom:70%;\" />\n\n\n\n<h1 id=\"设置nginx\"><a href=\"#设置nginx\" class=\"headerlink\" title=\"设置nginx\"></a>设置nginx</h1><p>在nginx中增加harbor的虚拟主机配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># harbor.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> ingress-<span class=\"number\">443</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.12:443</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">5s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> harbor.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/harbor.example.com_access.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/harbor.example.com_error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_pass</span> https://ingress-443;</span><br><span class=\"line\">      <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">      <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">      <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>检查配置并重载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>本地绑定好host之后访问域名<code>harbor.example.com</code>，即可看到harbor的登录页面：</p>\n<img src=\"login.png\" style=\"zoom:50%;\" />\n\n\n\n<p>默认的用户名为admin，密码在配置文件中设置的，默认为<code>Harbor12345</code>，即可登录进去了：</p>\n<img src=\"index.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"docker推送镜像\"><a href=\"#docker推送镜像\" class=\"headerlink\" title=\"docker推送镜像\"></a>docker推送镜像</h1><p>首先使用docker命令登录harbor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这是也许会出现这个报错：<code>Error response from daemon: Get https://harbor.example.com/v2/: x509: certificate signed by unknown authority</code>，是因为我们使用的证书是harbor自签的不受信任，所以需要修改docker的配置文件，将我们的仓库地址配置为非安全地址。</p>\n<p>需要编辑<code>/etc/docker/daemon.json</code>，（如果没有就创建），增加下面的参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"insecure-registries\"</span>: [<span class=\"string\">\"harbor.example.com\"</span>],</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后重启docker即可登录成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker login harbor.example.com</span><br><span class=\"line\">Username: admin</span><br><span class=\"line\">Password:</span><br><span class=\"line\">WARNING! Your password will be stored unencrypted <span class=\"keyword\">in</span> /root/.docker/config.json.</span><br><span class=\"line\">Configure a credential helper to remove this warning. See</span><br><span class=\"line\">https://docs.docker.com/engine/reference/commandline/login/<span class=\"comment\">#credentials-store</span></span><br><span class=\"line\"></span><br><span class=\"line\">Login Succeeded</span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来下载一个镜像并重新打tag上传：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull busybox:latest</span><br><span class=\"line\">$ docker tag busybox:latest harbor.example.com/library/busybox:v1</span><br><span class=\"line\">$ docker push harbor.example.com/library/busybox:v1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在页面上看，已经推上来镜像了，说明基本的harbor功能正常：</p>\n<img src=\"push.png\" style=\"zoom:50%;\" />\n\n"},{"title":"主流消息中间件对比","date":"2020-07-26T03:27:37.000Z","description":"主流的消息中间件对比","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2310411191,273799888&fm=26&gp=0.jpg","_content":"\n\n\n# 什么是消息中间件\n\n消息中间件适用于需要可靠的数据传送的分布式环境。采用消息中间件机制的系统中，不同的对象之间通过传递消息来激活对方的事件，完成相应的操作。\n\n发送者将消息发送给消息服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息转发给接收者。消息中间件能在不同平台之间通信，它常被用来屏蔽掉各种平台及协议之间的特性，实现应用程序之间的协同，其优点在于能够在客户和服务器之间提供同步和异步的连接，并且在任何时刻都可以将消息进行传送或者存储转发，这也是它比远程过程调用RPC更进一步的原因。\n\n\n<br>\n\n\n\n# 为什么使用消息中间件\n\n- `业务解耦，代码解耦`：例如，订单业务需要发送短信、推送app通知信息、扣除会员积分、发送email等，如果把这些全部写在订单业务代码中，订单代码将会变得十分臃肿，不利于修改维护，事物管理十分麻烦，使用中间件就不会有上述问题。\n- `同步变异步，加快业务响应时间`：相对于RPC来说，异步通信使得生产者和消费者得以充分执行自己的逻辑而无需等待。\n- `流量消峰`：消息存储堆积也是消息中间件的核心，可堆积大量的消息，当上游系统的吞吐能力远高于下游系统，在流量洪峰时可能会冲垮下游系统，消息中间件可以在峰值时堆积消息，而在峰值过去后下游系统慢慢消费消息解决流量洪峰的问题，典型的场景就是秒杀系统的设计。\n- `消息的顺序性`：消息中间件采用的是队列技术，消息队列可以保证消息的先进先出，能保证消息顺序执行。\n- `消息的可靠性`：消息中间件有消费确认机制（ACK），在收到成功被消费的确认消息之后才会把消息从队列中删除，并且消息中间件有本地刷盘存储功能。\n- 解决分布式事物复杂性。\n\n\n\n<br>\n\n\n\n# 主流的消息中间件\n\n\n\n## ActiveMQ\n\nActiveMQ是Apache出品的开源消息中间件，它完整支持JMS（java message service）规范。其具有丰富的API，拥有多种集群构建模式，是早起比较主流的消息中间件。\n\n\n\n>  性能相比于其他MQ较低，面对大规模并发时会出现消息过多堆积等问题\n\n\n\n## KAFKA\n\nKafka是apache的顶级项目，其基于pull模式来处理消息消费，追求高吞吐量，不支持事物，对消息的重复、丢失、错误没有严格的要求，适合于大量数据的收集业务，如日志收集。\n\n\n\n>  其高吞吐量主要基于服务器的pagecache，其可以达到几乎内存的读写速度，可以在廉价的服务器上达到10w/s的吞吐量。\n\n\n\n## RocketMQ\n\nRocketMQ是阿里开源的，目前是apache的顶级项目，使用java开发，具有高吞吐量、高性能，适合于大规模分布式系统。其基于kafka，并对消息的可靠传输和事物进行了优化。\n\n\n\n## RabbitMQ\n\n使用Erlang开发的消息队列系统，基于AMQP协议实现。有很好的数据一致性、稳定性、可靠性，对性能和吞吐量。\n\n\n\n其性能相对于kafka会低一些。\n\n\n\n> AMQP协议主要特征是面向消息、队列、路由、可靠性和安全","source":"_posts/主流消息中间件对比.md","raw":"---\ntitle: 主流消息中间件对比\ndate: 2020-07-26 11:27:37\ntags:\n- 消息中间件\ncategories:\n- 消息中间件\ndescription: 主流的消息中间件对比\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2310411191,273799888&fm=26&gp=0.jpg\n---\n\n\n\n# 什么是消息中间件\n\n消息中间件适用于需要可靠的数据传送的分布式环境。采用消息中间件机制的系统中，不同的对象之间通过传递消息来激活对方的事件，完成相应的操作。\n\n发送者将消息发送给消息服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息转发给接收者。消息中间件能在不同平台之间通信，它常被用来屏蔽掉各种平台及协议之间的特性，实现应用程序之间的协同，其优点在于能够在客户和服务器之间提供同步和异步的连接，并且在任何时刻都可以将消息进行传送或者存储转发，这也是它比远程过程调用RPC更进一步的原因。\n\n\n<br>\n\n\n\n# 为什么使用消息中间件\n\n- `业务解耦，代码解耦`：例如，订单业务需要发送短信、推送app通知信息、扣除会员积分、发送email等，如果把这些全部写在订单业务代码中，订单代码将会变得十分臃肿，不利于修改维护，事物管理十分麻烦，使用中间件就不会有上述问题。\n- `同步变异步，加快业务响应时间`：相对于RPC来说，异步通信使得生产者和消费者得以充分执行自己的逻辑而无需等待。\n- `流量消峰`：消息存储堆积也是消息中间件的核心，可堆积大量的消息，当上游系统的吞吐能力远高于下游系统，在流量洪峰时可能会冲垮下游系统，消息中间件可以在峰值时堆积消息，而在峰值过去后下游系统慢慢消费消息解决流量洪峰的问题，典型的场景就是秒杀系统的设计。\n- `消息的顺序性`：消息中间件采用的是队列技术，消息队列可以保证消息的先进先出，能保证消息顺序执行。\n- `消息的可靠性`：消息中间件有消费确认机制（ACK），在收到成功被消费的确认消息之后才会把消息从队列中删除，并且消息中间件有本地刷盘存储功能。\n- 解决分布式事物复杂性。\n\n\n\n<br>\n\n\n\n# 主流的消息中间件\n\n\n\n## ActiveMQ\n\nActiveMQ是Apache出品的开源消息中间件，它完整支持JMS（java message service）规范。其具有丰富的API，拥有多种集群构建模式，是早起比较主流的消息中间件。\n\n\n\n>  性能相比于其他MQ较低，面对大规模并发时会出现消息过多堆积等问题\n\n\n\n## KAFKA\n\nKafka是apache的顶级项目，其基于pull模式来处理消息消费，追求高吞吐量，不支持事物，对消息的重复、丢失、错误没有严格的要求，适合于大量数据的收集业务，如日志收集。\n\n\n\n>  其高吞吐量主要基于服务器的pagecache，其可以达到几乎内存的读写速度，可以在廉价的服务器上达到10w/s的吞吐量。\n\n\n\n## RocketMQ\n\nRocketMQ是阿里开源的，目前是apache的顶级项目，使用java开发，具有高吞吐量、高性能，适合于大规模分布式系统。其基于kafka，并对消息的可靠传输和事物进行了优化。\n\n\n\n## RabbitMQ\n\n使用Erlang开发的消息队列系统，基于AMQP协议实现。有很好的数据一致性、稳定性、可靠性，对性能和吞吐量。\n\n\n\n其性能相对于kafka会低一些。\n\n\n\n> AMQP协议主要特征是面向消息、队列、路由、可靠性和安全","slug":"主流消息中间件对比","published":1,"updated":"2020-07-26T03:58:15.155Z","_id":"ckd2j0oy10000ojjcd9xkf7te","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是消息中间件\"><a href=\"#什么是消息中间件\" class=\"headerlink\" title=\"什么是消息中间件\"></a>什么是消息中间件</h1><p>消息中间件适用于需要可靠的数据传送的分布式环境。采用消息中间件机制的系统中，不同的对象之间通过传递消息来激活对方的事件，完成相应的操作。</p>\n<p>发送者将消息发送给消息服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息转发给接收者。消息中间件能在不同平台之间通信，它常被用来屏蔽掉各种平台及协议之间的特性，实现应用程序之间的协同，其优点在于能够在客户和服务器之间提供同步和异步的连接，并且在任何时刻都可以将消息进行传送或者存储转发，这也是它比远程过程调用RPC更进一步的原因。</p>\n<br>\n\n\n\n<h1 id=\"为什么使用消息中间件\"><a href=\"#为什么使用消息中间件\" class=\"headerlink\" title=\"为什么使用消息中间件\"></a>为什么使用消息中间件</h1><ul>\n<li><code>业务解耦，代码解耦</code>：例如，订单业务需要发送短信、推送app通知信息、扣除会员积分、发送email等，如果把这些全部写在订单业务代码中，订单代码将会变得十分臃肿，不利于修改维护，事物管理十分麻烦，使用中间件就不会有上述问题。</li>\n<li><code>同步变异步，加快业务响应时间</code>：相对于RPC来说，异步通信使得生产者和消费者得以充分执行自己的逻辑而无需等待。</li>\n<li><code>流量消峰</code>：消息存储堆积也是消息中间件的核心，可堆积大量的消息，当上游系统的吞吐能力远高于下游系统，在流量洪峰时可能会冲垮下游系统，消息中间件可以在峰值时堆积消息，而在峰值过去后下游系统慢慢消费消息解决流量洪峰的问题，典型的场景就是秒杀系统的设计。</li>\n<li><code>消息的顺序性</code>：消息中间件采用的是队列技术，消息队列可以保证消息的先进先出，能保证消息顺序执行。</li>\n<li><code>消息的可靠性</code>：消息中间件有消费确认机制（ACK），在收到成功被消费的确认消息之后才会把消息从队列中删除，并且消息中间件有本地刷盘存储功能。</li>\n<li>解决分布式事物复杂性。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"主流的消息中间件\"><a href=\"#主流的消息中间件\" class=\"headerlink\" title=\"主流的消息中间件\"></a>主流的消息中间件</h1><h2 id=\"ActiveMQ\"><a href=\"#ActiveMQ\" class=\"headerlink\" title=\"ActiveMQ\"></a>ActiveMQ</h2><p>ActiveMQ是Apache出品的开源消息中间件，它完整支持JMS（java message service）规范。其具有丰富的API，拥有多种集群构建模式，是早起比较主流的消息中间件。</p>\n<blockquote>\n<p> 性能相比于其他MQ较低，面对大规模并发时会出现消息过多堆积等问题</p>\n</blockquote>\n<h2 id=\"KAFKA\"><a href=\"#KAFKA\" class=\"headerlink\" title=\"KAFKA\"></a>KAFKA</h2><p>Kafka是apache的顶级项目，其基于pull模式来处理消息消费，追求高吞吐量，不支持事物，对消息的重复、丢失、错误没有严格的要求，适合于大量数据的收集业务，如日志收集。</p>\n<blockquote>\n<p> 其高吞吐量主要基于服务器的pagecache，其可以达到几乎内存的读写速度，可以在廉价的服务器上达到10w/s的吞吐量。</p>\n</blockquote>\n<h2 id=\"RocketMQ\"><a href=\"#RocketMQ\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h2><p>RocketMQ是阿里开源的，目前是apache的顶级项目，使用java开发，具有高吞吐量、高性能，适合于大规模分布式系统。其基于kafka，并对消息的可靠传输和事物进行了优化。</p>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p>使用Erlang开发的消息队列系统，基于AMQP协议实现。有很好的数据一致性、稳定性、可靠性，对性能和吞吐量。</p>\n<p>其性能相对于kafka会低一些。</p>\n<blockquote>\n<p>AMQP协议主要特征是面向消息、队列、路由、可靠性和安全</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是消息中间件\"><a href=\"#什么是消息中间件\" class=\"headerlink\" title=\"什么是消息中间件\"></a>什么是消息中间件</h1><p>消息中间件适用于需要可靠的数据传送的分布式环境。采用消息中间件机制的系统中，不同的对象之间通过传递消息来激活对方的事件，完成相应的操作。</p>\n<p>发送者将消息发送给消息服务器，消息服务器将消息存放在若干队列中，在合适的时候再将消息转发给接收者。消息中间件能在不同平台之间通信，它常被用来屏蔽掉各种平台及协议之间的特性，实现应用程序之间的协同，其优点在于能够在客户和服务器之间提供同步和异步的连接，并且在任何时刻都可以将消息进行传送或者存储转发，这也是它比远程过程调用RPC更进一步的原因。</p>\n<br>\n\n\n\n<h1 id=\"为什么使用消息中间件\"><a href=\"#为什么使用消息中间件\" class=\"headerlink\" title=\"为什么使用消息中间件\"></a>为什么使用消息中间件</h1><ul>\n<li><code>业务解耦，代码解耦</code>：例如，订单业务需要发送短信、推送app通知信息、扣除会员积分、发送email等，如果把这些全部写在订单业务代码中，订单代码将会变得十分臃肿，不利于修改维护，事物管理十分麻烦，使用中间件就不会有上述问题。</li>\n<li><code>同步变异步，加快业务响应时间</code>：相对于RPC来说，异步通信使得生产者和消费者得以充分执行自己的逻辑而无需等待。</li>\n<li><code>流量消峰</code>：消息存储堆积也是消息中间件的核心，可堆积大量的消息，当上游系统的吞吐能力远高于下游系统，在流量洪峰时可能会冲垮下游系统，消息中间件可以在峰值时堆积消息，而在峰值过去后下游系统慢慢消费消息解决流量洪峰的问题，典型的场景就是秒杀系统的设计。</li>\n<li><code>消息的顺序性</code>：消息中间件采用的是队列技术，消息队列可以保证消息的先进先出，能保证消息顺序执行。</li>\n<li><code>消息的可靠性</code>：消息中间件有消费确认机制（ACK），在收到成功被消费的确认消息之后才会把消息从队列中删除，并且消息中间件有本地刷盘存储功能。</li>\n<li>解决分布式事物复杂性。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"主流的消息中间件\"><a href=\"#主流的消息中间件\" class=\"headerlink\" title=\"主流的消息中间件\"></a>主流的消息中间件</h1><h2 id=\"ActiveMQ\"><a href=\"#ActiveMQ\" class=\"headerlink\" title=\"ActiveMQ\"></a>ActiveMQ</h2><p>ActiveMQ是Apache出品的开源消息中间件，它完整支持JMS（java message service）规范。其具有丰富的API，拥有多种集群构建模式，是早起比较主流的消息中间件。</p>\n<blockquote>\n<p> 性能相比于其他MQ较低，面对大规模并发时会出现消息过多堆积等问题</p>\n</blockquote>\n<h2 id=\"KAFKA\"><a href=\"#KAFKA\" class=\"headerlink\" title=\"KAFKA\"></a>KAFKA</h2><p>Kafka是apache的顶级项目，其基于pull模式来处理消息消费，追求高吞吐量，不支持事物，对消息的重复、丢失、错误没有严格的要求，适合于大量数据的收集业务，如日志收集。</p>\n<blockquote>\n<p> 其高吞吐量主要基于服务器的pagecache，其可以达到几乎内存的读写速度，可以在廉价的服务器上达到10w/s的吞吐量。</p>\n</blockquote>\n<h2 id=\"RocketMQ\"><a href=\"#RocketMQ\" class=\"headerlink\" title=\"RocketMQ\"></a>RocketMQ</h2><p>RocketMQ是阿里开源的，目前是apache的顶级项目，使用java开发，具有高吞吐量、高性能，适合于大规模分布式系统。其基于kafka，并对消息的可靠传输和事物进行了优化。</p>\n<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p>使用Erlang开发的消息队列系统，基于AMQP协议实现。有很好的数据一致性、稳定性、可靠性，对性能和吞吐量。</p>\n<p>其性能相对于kafka会低一些。</p>\n<blockquote>\n<p>AMQP协议主要特征是面向消息、队列、路由、可靠性和安全</p>\n</blockquote>\n"},{"title":"消息队列RabbitMQ","date":"2020-07-26T04:03:04.000Z","description":"消息队列RabbitMQ的原理、应用和安装","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595746341236&di=2f3dc0c98e66a1dfacc78c7f45bc0ec5&imgtype=0&src=http%3A%2F%2Fdoofuu.com%2Fupload%2F2019%2F06%2F21%2F5d0cd08e17474.jpg","_content":"\n\n\nRabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用实践共享数据。RabbitMQ使用Erlang语言开发，并且RabbitMQ基于AMQP协议。\n\n\n\n------\n\n\n\n# AMQP高级消息队列协议\n\nAMQPQ全称：Advanceed Message Queuing Protocol，是具有现代特性的二进制协议，是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。\n\n\n\n\n\n## 协议模型\n\n<img src=\"amqp.png\" style=\"zoom:50%;\" />\n\n\n\n在这个模型中，生产者（Publisher）将生产的消息发送到消息服务端的交换机（Exchange），消息服务端Exchange将消息保存在队列中，消费者（Consumer）监听消息队列（Message Queue）并从中获取消息进行消费。\n\n\n\n## 核心概念\n\n- `server/broker`：接收客户端的连接，实现AMQP实体服务；\n- `connection`：应用程序和broker的网络连接；\n- `channel`：消息读写的网络信道，所有的操作都在channel中进行，客户端可以建立多个cheannel，每个channel代表一个会话任务；\n- `message`：消息，有propertites和body组成；\n  - propetities：消息修饰信息，如优先级、延迟等；\n  - body：消息的具体内容；\n- `virtual host`：虚拟主机，用于进行逻辑隔离，最上层的消息路由；\n- `exchange`：交换机，接收消息，根据路由键转发消息到绑定的队列；\n- `binding`：绑定，exchange和queue之间的虚拟连接，绑定中还有routing key；\n- `routing key`：一个路由规则，虚拟主机可以用它来确定然如何路由一个特定的消息；\n- `queue`：消息队列，保存消息并将其撞他转发给消费者；\n\n\n\n> 消费者从Queue中获取消息并消费。多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。\n\n\n\n`exchange`具有如下的类型：\n\n- `direct`：完全匹配的路由；\n- `topic`：模式匹配的路由；\n- `fanout`：广播模式；\n- `headers`：键值对匹配路由；\n\n\n\n`exchange`具有如下的属性：\n\n- `持久化`：如果起用，则rabbitmq服务重启后仍然存在；\n- `自动删除`：如果起用，exchange会在其绑定的队列都被删除后删除自身；\n\n\n\n\n\n\n\n<br>\n\n\n\n# RabbitMQ整体架构\n\n<img src=\"arch.png\" style=\"zoom:50%;\" />\n\n> 在架构图中，左侧`P`表示消息生产证，`C`表示消费者，中间的部分为RabbitMQ的`broker`\n\n\n\n消息会由生产者直接投递到`exchange`中，`exchange`会将消息传递给`queue`中，消费者从`queue`中消费信息。\n\n\n\n<img src=\"message-trans.png\" style=\"zoom:50%;\" />\n\n在上边的消息流转图中看到，消息被发送到`exchange`，`exchange`会绑定一个或多个`queue`，它根据路由策略（routing key）路由到指定的队列。\n\n\n\n综上，消息发布的流程大致是：\n\n1. 生产者和Broker建立TCP连接。\n2. 生产者和Broker建立通道。\n3. 生产者通过通道消息发送给Broker，由Exchange将消息进行转发。\n4. Exchange将消息转发到指定的Queue（队列）。\n\n\n\n消息消费的大致流程是：\n\n1. 消费者和Broker建立TCP连接 。\n2. 消费者和Broker建立通道。\n3. 消费者监听指定的Queue（队列）\n4. 当有消息到达Queue时Broker默认将消息推送给消费者。\n5. 消费者接收到消息。\n\n\n\n<br>\n\n# RabbitMQ的优点\n\n- 众多互联网公司都在使用；\n- 开源，性能优秀，稳定性可靠；\n- 提供可靠的消息投递模式、返回模式；\n- 与SpringAMQP完美整合，API丰富；\n- 集群模式丰富，表达式配置，HA模式，镜像队列模型；\n- 保证数据不丢失的前提下做到高可靠、高可用；\n\n\n\n<br>\n\n\n\n# 高性能原因\n\nErlang语言最初用于交换机领域的架构模式，使得RabbitMQ在Broker之间进行数据交互的性能非常优秀，与原生的Socket一样优秀的延迟。\n\n\n\n<br>\n\n\n\n# 消息可靠性\n\n- `Message acknowledgment`：消息确认，在消息确认机制下，收到回执才会删除消息，未收到回执而断开了连接，消息会转发给其他消费者，如果忘记回执，会导致消息堆积，消费者重启后会重复消费这些消息并重复执行业务逻辑。\n- `Message durability`：消息持久化，设置消息持久化可以避免绝大部分消息丢失，比如rabbitmq服务重启，但是采用非持久化可以提升队列的处理效率。如果要确保消息的持久化，那么消息对应的Exchange和Queue同样要设置为持久化。\n- `Prefetch count`：每次发送给消费者消息的数量，默认为1\n\n\n\n>  如果需要可靠性业务，需要设置持久化和ack机制，如果系统高吞吐，可以设置为非持久化、noack、自动删除机制。\n\n","source":"_posts/消息队列RabbitMQ.md","raw":"---\ntitle: 消息队列RabbitMQ\ndate: 2020-07-26 12:03:04\ntags:\n- 消息中间件\n- RabbitMQ\ncategories:\n- 消息中间件\n- RabbitMQ\ndescription: 消息队列RabbitMQ的原理、应用和安装\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595746341236&di=2f3dc0c98e66a1dfacc78c7f45bc0ec5&imgtype=0&src=http%3A%2F%2Fdoofuu.com%2Fupload%2F2019%2F06%2F21%2F5d0cd08e17474.jpg\n---\n\n\n\nRabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用实践共享数据。RabbitMQ使用Erlang语言开发，并且RabbitMQ基于AMQP协议。\n\n\n\n------\n\n\n\n# AMQP高级消息队列协议\n\nAMQPQ全称：Advanceed Message Queuing Protocol，是具有现代特性的二进制协议，是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。\n\n\n\n\n\n## 协议模型\n\n<img src=\"amqp.png\" style=\"zoom:50%;\" />\n\n\n\n在这个模型中，生产者（Publisher）将生产的消息发送到消息服务端的交换机（Exchange），消息服务端Exchange将消息保存在队列中，消费者（Consumer）监听消息队列（Message Queue）并从中获取消息进行消费。\n\n\n\n## 核心概念\n\n- `server/broker`：接收客户端的连接，实现AMQP实体服务；\n- `connection`：应用程序和broker的网络连接；\n- `channel`：消息读写的网络信道，所有的操作都在channel中进行，客户端可以建立多个cheannel，每个channel代表一个会话任务；\n- `message`：消息，有propertites和body组成；\n  - propetities：消息修饰信息，如优先级、延迟等；\n  - body：消息的具体内容；\n- `virtual host`：虚拟主机，用于进行逻辑隔离，最上层的消息路由；\n- `exchange`：交换机，接收消息，根据路由键转发消息到绑定的队列；\n- `binding`：绑定，exchange和queue之间的虚拟连接，绑定中还有routing key；\n- `routing key`：一个路由规则，虚拟主机可以用它来确定然如何路由一个特定的消息；\n- `queue`：消息队列，保存消息并将其撞他转发给消费者；\n\n\n\n> 消费者从Queue中获取消息并消费。多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。\n\n\n\n`exchange`具有如下的类型：\n\n- `direct`：完全匹配的路由；\n- `topic`：模式匹配的路由；\n- `fanout`：广播模式；\n- `headers`：键值对匹配路由；\n\n\n\n`exchange`具有如下的属性：\n\n- `持久化`：如果起用，则rabbitmq服务重启后仍然存在；\n- `自动删除`：如果起用，exchange会在其绑定的队列都被删除后删除自身；\n\n\n\n\n\n\n\n<br>\n\n\n\n# RabbitMQ整体架构\n\n<img src=\"arch.png\" style=\"zoom:50%;\" />\n\n> 在架构图中，左侧`P`表示消息生产证，`C`表示消费者，中间的部分为RabbitMQ的`broker`\n\n\n\n消息会由生产者直接投递到`exchange`中，`exchange`会将消息传递给`queue`中，消费者从`queue`中消费信息。\n\n\n\n<img src=\"message-trans.png\" style=\"zoom:50%;\" />\n\n在上边的消息流转图中看到，消息被发送到`exchange`，`exchange`会绑定一个或多个`queue`，它根据路由策略（routing key）路由到指定的队列。\n\n\n\n综上，消息发布的流程大致是：\n\n1. 生产者和Broker建立TCP连接。\n2. 生产者和Broker建立通道。\n3. 生产者通过通道消息发送给Broker，由Exchange将消息进行转发。\n4. Exchange将消息转发到指定的Queue（队列）。\n\n\n\n消息消费的大致流程是：\n\n1. 消费者和Broker建立TCP连接 。\n2. 消费者和Broker建立通道。\n3. 消费者监听指定的Queue（队列）\n4. 当有消息到达Queue时Broker默认将消息推送给消费者。\n5. 消费者接收到消息。\n\n\n\n<br>\n\n# RabbitMQ的优点\n\n- 众多互联网公司都在使用；\n- 开源，性能优秀，稳定性可靠；\n- 提供可靠的消息投递模式、返回模式；\n- 与SpringAMQP完美整合，API丰富；\n- 集群模式丰富，表达式配置，HA模式，镜像队列模型；\n- 保证数据不丢失的前提下做到高可靠、高可用；\n\n\n\n<br>\n\n\n\n# 高性能原因\n\nErlang语言最初用于交换机领域的架构模式，使得RabbitMQ在Broker之间进行数据交互的性能非常优秀，与原生的Socket一样优秀的延迟。\n\n\n\n<br>\n\n\n\n# 消息可靠性\n\n- `Message acknowledgment`：消息确认，在消息确认机制下，收到回执才会删除消息，未收到回执而断开了连接，消息会转发给其他消费者，如果忘记回执，会导致消息堆积，消费者重启后会重复消费这些消息并重复执行业务逻辑。\n- `Message durability`：消息持久化，设置消息持久化可以避免绝大部分消息丢失，比如rabbitmq服务重启，但是采用非持久化可以提升队列的处理效率。如果要确保消息的持久化，那么消息对应的Exchange和Queue同样要设置为持久化。\n- `Prefetch count`：每次发送给消费者消息的数量，默认为1\n\n\n\n>  如果需要可靠性业务，需要设置持久化和ack机制，如果系统高吞吐，可以设置为非持久化、noack、自动删除机制。\n\n","slug":"消息队列RabbitMQ","published":1,"updated":"2020-08-14T01:57:03.002Z","_id":"ckd2k6nn10000swjc2ghk3bkc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用实践共享数据。RabbitMQ使用Erlang语言开发，并且RabbitMQ基于AMQP协议。</p>\n<hr>\n<h1 id=\"AMQP高级消息队列协议\"><a href=\"#AMQP高级消息队列协议\" class=\"headerlink\" title=\"AMQP高级消息队列协议\"></a>AMQP高级消息队列协议</h1><p>AMQPQ全称：Advanceed Message Queuing Protocol，是具有现代特性的二进制协议，是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p>\n<h2 id=\"协议模型\"><a href=\"#协议模型\" class=\"headerlink\" title=\"协议模型\"></a>协议模型</h2><img src= \"/img/loading.gif\" data-src=\"amqp.png\" style=\"zoom:50%;\" />\n\n\n\n<p>在这个模型中，生产者（Publisher）将生产的消息发送到消息服务端的交换机（Exchange），消息服务端Exchange将消息保存在队列中，消费者（Consumer）监听消息队列（Message Queue）并从中获取消息进行消费。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><ul>\n<li><code>server/broker</code>：接收客户端的连接，实现AMQP实体服务；</li>\n<li><code>connection</code>：应用程序和broker的网络连接；</li>\n<li><code>channel</code>：消息读写的网络信道，所有的操作都在channel中进行，客户端可以建立多个cheannel，每个channel代表一个会话任务；</li>\n<li><code>message</code>：消息，有propertites和body组成；<ul>\n<li>propetities：消息修饰信息，如优先级、延迟等；</li>\n<li>body：消息的具体内容；</li>\n</ul>\n</li>\n<li><code>virtual host</code>：虚拟主机，用于进行逻辑隔离，最上层的消息路由；</li>\n<li><code>exchange</code>：交换机，接收消息，根据路由键转发消息到绑定的队列；</li>\n<li><code>binding</code>：绑定，exchange和queue之间的虚拟连接，绑定中还有routing key；</li>\n<li><code>routing key</code>：一个路由规则，虚拟主机可以用它来确定然如何路由一个特定的消息；</li>\n<li><code>queue</code>：消息队列，保存消息并将其撞他转发给消费者；</li>\n</ul>\n<blockquote>\n<p>消费者从Queue中获取消息并消费。多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。</p>\n</blockquote>\n<p><code>exchange</code>具有如下的类型：</p>\n<ul>\n<li><code>direct</code>：完全匹配的路由；</li>\n<li><code>topic</code>：模式匹配的路由；</li>\n<li><code>fanout</code>：广播模式；</li>\n<li><code>headers</code>：键值对匹配路由；</li>\n</ul>\n<p><code>exchange</code>具有如下的属性：</p>\n<ul>\n<li><code>持久化</code>：如果起用，则rabbitmq服务重启后仍然存在；</li>\n<li><code>自动删除</code>：如果起用，exchange会在其绑定的队列都被删除后删除自身；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"RabbitMQ整体架构\"><a href=\"#RabbitMQ整体架构\" class=\"headerlink\" title=\"RabbitMQ整体架构\"></a>RabbitMQ整体架构</h1><img src= \"/img/loading.gif\" data-src=\"arch.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>在架构图中，左侧<code>P</code>表示消息生产证，<code>C</code>表示消费者，中间的部分为RabbitMQ的<code>broker</code></p>\n</blockquote>\n<p>消息会由生产者直接投递到<code>exchange</code>中，<code>exchange</code>会将消息传递给<code>queue</code>中，消费者从<code>queue</code>中消费信息。</p>\n<img src= \"/img/loading.gif\" data-src=\"message-trans.png\" style=\"zoom:50%;\" />\n\n<p>在上边的消息流转图中看到，消息被发送到<code>exchange</code>，<code>exchange</code>会绑定一个或多个<code>queue</code>，它根据路由策略（routing key）路由到指定的队列。</p>\n<p>综上，消息发布的流程大致是：</p>\n<ol>\n<li>生产者和Broker建立TCP连接。</li>\n<li>生产者和Broker建立通道。</li>\n<li>生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</li>\n<li>Exchange将消息转发到指定的Queue（队列）。</li>\n</ol>\n<p>消息消费的大致流程是：</p>\n<ol>\n<li>消费者和Broker建立TCP连接 。</li>\n<li>消费者和Broker建立通道。</li>\n<li>消费者监听指定的Queue（队列）</li>\n<li>当有消息到达Queue时Broker默认将消息推送给消费者。</li>\n<li>消费者接收到消息。</li>\n</ol>\n<br>\n\n<h1 id=\"RabbitMQ的优点\"><a href=\"#RabbitMQ的优点\" class=\"headerlink\" title=\"RabbitMQ的优点\"></a>RabbitMQ的优点</h1><ul>\n<li>众多互联网公司都在使用；</li>\n<li>开源，性能优秀，稳定性可靠；</li>\n<li>提供可靠的消息投递模式、返回模式；</li>\n<li>与SpringAMQP完美整合，API丰富；</li>\n<li>集群模式丰富，表达式配置，HA模式，镜像队列模型；</li>\n<li>保证数据不丢失的前提下做到高可靠、高可用；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"高性能原因\"><a href=\"#高性能原因\" class=\"headerlink\" title=\"高性能原因\"></a>高性能原因</h1><p>Erlang语言最初用于交换机领域的架构模式，使得RabbitMQ在Broker之间进行数据交互的性能非常优秀，与原生的Socket一样优秀的延迟。</p>\n<br>\n\n\n\n<h1 id=\"消息可靠性\"><a href=\"#消息可靠性\" class=\"headerlink\" title=\"消息可靠性\"></a>消息可靠性</h1><ul>\n<li><code>Message acknowledgment</code>：消息确认，在消息确认机制下，收到回执才会删除消息，未收到回执而断开了连接，消息会转发给其他消费者，如果忘记回执，会导致消息堆积，消费者重启后会重复消费这些消息并重复执行业务逻辑。</li>\n<li><code>Message durability</code>：消息持久化，设置消息持久化可以避免绝大部分消息丢失，比如rabbitmq服务重启，但是采用非持久化可以提升队列的处理效率。如果要确保消息的持久化，那么消息对应的Exchange和Queue同样要设置为持久化。</li>\n<li><code>Prefetch count</code>：每次发送给消费者消息的数量，默认为1</li>\n</ul>\n<blockquote>\n<p> 如果需要可靠性业务，需要设置持久化和ack机制，如果系统高吞吐，可以设置为非持久化、noack、自动删除机制。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用实践共享数据。RabbitMQ使用Erlang语言开发，并且RabbitMQ基于AMQP协议。</p>\n<hr>\n<h1 id=\"AMQP高级消息队列协议\"><a href=\"#AMQP高级消息队列协议\" class=\"headerlink\" title=\"AMQP高级消息队列协议\"></a>AMQP高级消息队列协议</h1><p>AMQPQ全称：Advanceed Message Queuing Protocol，是具有现代特性的二进制协议，是一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p>\n<h2 id=\"协议模型\"><a href=\"#协议模型\" class=\"headerlink\" title=\"协议模型\"></a>协议模型</h2><img src=\"amqp.png\" style=\"zoom:50%;\" />\n\n\n\n<p>在这个模型中，生产者（Publisher）将生产的消息发送到消息服务端的交换机（Exchange），消息服务端Exchange将消息保存在队列中，消费者（Consumer）监听消息队列（Message Queue）并从中获取消息进行消费。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><ul>\n<li><code>server/broker</code>：接收客户端的连接，实现AMQP实体服务；</li>\n<li><code>connection</code>：应用程序和broker的网络连接；</li>\n<li><code>channel</code>：消息读写的网络信道，所有的操作都在channel中进行，客户端可以建立多个cheannel，每个channel代表一个会话任务；</li>\n<li><code>message</code>：消息，有propertites和body组成；<ul>\n<li>propetities：消息修饰信息，如优先级、延迟等；</li>\n<li>body：消息的具体内容；</li>\n</ul>\n</li>\n<li><code>virtual host</code>：虚拟主机，用于进行逻辑隔离，最上层的消息路由；</li>\n<li><code>exchange</code>：交换机，接收消息，根据路由键转发消息到绑定的队列；</li>\n<li><code>binding</code>：绑定，exchange和queue之间的虚拟连接，绑定中还有routing key；</li>\n<li><code>routing key</code>：一个路由规则，虚拟主机可以用它来确定然如何路由一个特定的消息；</li>\n<li><code>queue</code>：消息队列，保存消息并将其撞他转发给消费者；</li>\n</ul>\n<blockquote>\n<p>消费者从Queue中获取消息并消费。多个消费者可以订阅同一个Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。</p>\n</blockquote>\n<p><code>exchange</code>具有如下的类型：</p>\n<ul>\n<li><code>direct</code>：完全匹配的路由；</li>\n<li><code>topic</code>：模式匹配的路由；</li>\n<li><code>fanout</code>：广播模式；</li>\n<li><code>headers</code>：键值对匹配路由；</li>\n</ul>\n<p><code>exchange</code>具有如下的属性：</p>\n<ul>\n<li><code>持久化</code>：如果起用，则rabbitmq服务重启后仍然存在；</li>\n<li><code>自动删除</code>：如果起用，exchange会在其绑定的队列都被删除后删除自身；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"RabbitMQ整体架构\"><a href=\"#RabbitMQ整体架构\" class=\"headerlink\" title=\"RabbitMQ整体架构\"></a>RabbitMQ整体架构</h1><img src=\"arch.png\" style=\"zoom:50%;\" />\n\n<blockquote>\n<p>在架构图中，左侧<code>P</code>表示消息生产证，<code>C</code>表示消费者，中间的部分为RabbitMQ的<code>broker</code></p>\n</blockquote>\n<p>消息会由生产者直接投递到<code>exchange</code>中，<code>exchange</code>会将消息传递给<code>queue</code>中，消费者从<code>queue</code>中消费信息。</p>\n<img src=\"message-trans.png\" style=\"zoom:50%;\" />\n\n<p>在上边的消息流转图中看到，消息被发送到<code>exchange</code>，<code>exchange</code>会绑定一个或多个<code>queue</code>，它根据路由策略（routing key）路由到指定的队列。</p>\n<p>综上，消息发布的流程大致是：</p>\n<ol>\n<li>生产者和Broker建立TCP连接。</li>\n<li>生产者和Broker建立通道。</li>\n<li>生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</li>\n<li>Exchange将消息转发到指定的Queue（队列）。</li>\n</ol>\n<p>消息消费的大致流程是：</p>\n<ol>\n<li>消费者和Broker建立TCP连接 。</li>\n<li>消费者和Broker建立通道。</li>\n<li>消费者监听指定的Queue（队列）</li>\n<li>当有消息到达Queue时Broker默认将消息推送给消费者。</li>\n<li>消费者接收到消息。</li>\n</ol>\n<br>\n\n<h1 id=\"RabbitMQ的优点\"><a href=\"#RabbitMQ的优点\" class=\"headerlink\" title=\"RabbitMQ的优点\"></a>RabbitMQ的优点</h1><ul>\n<li>众多互联网公司都在使用；</li>\n<li>开源，性能优秀，稳定性可靠；</li>\n<li>提供可靠的消息投递模式、返回模式；</li>\n<li>与SpringAMQP完美整合，API丰富；</li>\n<li>集群模式丰富，表达式配置，HA模式，镜像队列模型；</li>\n<li>保证数据不丢失的前提下做到高可靠、高可用；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"高性能原因\"><a href=\"#高性能原因\" class=\"headerlink\" title=\"高性能原因\"></a>高性能原因</h1><p>Erlang语言最初用于交换机领域的架构模式，使得RabbitMQ在Broker之间进行数据交互的性能非常优秀，与原生的Socket一样优秀的延迟。</p>\n<br>\n\n\n\n<h1 id=\"消息可靠性\"><a href=\"#消息可靠性\" class=\"headerlink\" title=\"消息可靠性\"></a>消息可靠性</h1><ul>\n<li><code>Message acknowledgment</code>：消息确认，在消息确认机制下，收到回执才会删除消息，未收到回执而断开了连接，消息会转发给其他消费者，如果忘记回执，会导致消息堆积，消费者重启后会重复消费这些消息并重复执行业务逻辑。</li>\n<li><code>Message durability</code>：消息持久化，设置消息持久化可以避免绝大部分消息丢失，比如rabbitmq服务重启，但是采用非持久化可以提升队列的处理效率。如果要确保消息的持久化，那么消息对应的Exchange和Queue同样要设置为持久化。</li>\n<li><code>Prefetch count</code>：每次发送给消费者消息的数量，默认为1</li>\n</ul>\n<blockquote>\n<p> 如果需要可靠性业务，需要设置持久化和ack机制，如果系统高吞吐，可以设置为非持久化、noack、自动删除机制。</p>\n</blockquote>\n"},{"title":"[k8s实践系列]利用HPA的服务自动扩容","date":"2020-07-27T02:08:59.000Z","description":"利用hpa进行服务的自动扩缩容。","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595825980543&di=95a17ecbfc8ad1caaa510a788f6ad857&imgtype=0&src=http%3A%2F%2Fhackernews.cc%2Fwp-content%2Fuploads%2F2019%2F06%2F999a755b141777513c70457e07b65570460.jpg","_content":"\n\n\n# HPA\n\nkubernetes中提供了`kubectl scale`命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象`Horizontal Pod Autoscaling（Pod 水平自动伸缩）`，简称`HPA`。\n\n\n\nHPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。\n\n\n\n可以简单的通过 `kubectl autoscale` 命令来创建一个 HPA 资源对象，`HPA Controller`默认`30s`轮询一次（可通过 `kube-controller-manager` 的`--horizontal-pod-autoscaler-sync-period` 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。\n\n\n\n<br>\n\n\n\n# metric-server\n\nhpa功能需要利用`metric-server`来获取相关指标数据，`metric-server`通过kubernetes的api将指标暴露出来，例如：\n\n```bash\nhttps://<apiserver>/apis/metrics.k8s.io/v1beta1/namespaces/<namespace-name>/pods/<pod-name>\n```\n\n\n\n<img src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n部署`metric-server`可以参考 {% post_link k8s实践系列-部署MetricServer %}\n\n\n\n<br>\n\n\n\n# 创建测试服务\n\n使用下面的文件创建一个测试服务：\n\n```yaml\n# demo.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hpa-demo\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      volumes:\n      - name: increase-mem-script\n        configMap:\n          name: increase-mem-config\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: increase-mem-script\n          mountPath: /etc/script\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n        securityContext:\n          privileged: true\n```\n\n\n\n**需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存**\n\n\n\n创建内存压测脚本：\n\n```yaml\n# config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: increase-mem-config\ndata:\n  increase-mem.sh: |\n    #!/bin/bash  \n    mkdir /tmp/memory  \n    mount -t tmpfs -o size=40M tmpfs /tmp/memory  \n    dd if=/dev/zero of=/tmp/memory/block  \n    sleep 60 \n    rm /tmp/memory/block  \n    umount /tmp/memory  \n    rmdir /tmp/memory\n```\n\n\n\n\n\n直接运行下面的命令创建：\n\n```bash\n$ kubectl apply -f config.yaml\n$ kubectl apply -f demo.yaml\n```\n\n\n\n确保服务都正常启动：\n\n```bash\n$ kubectl get pod \n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 基于CPU的HPA\n\n使用`kubectl autoscale`命令来创建一个hpa对象：\n\n```bash\n$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5\n```\n\n这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。\n\n\n\n查看hpa对象创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n这里我们使用busybox创建一个测试的pod，向nginx服务发sing请求：\n\n```bash\n$ kubectl run -ti --image busybox test-hpa --restart=Never --rm /bin/sh\n/# while true; do wget -q -O- http://172.21.133.86; done\n```\n\n> 172.21.133.86 为pod的IP\n\n\n\n稍等一下即可看到hpa开始工作：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s\n\n$ kubectl get pod --watch \nNAME                        READY   STATUS              RESTARTS   AGE\nhpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s\nhpa-demo-6c6489f57-w792g   1/1     Running             0          13s\nhpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s\nhpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s\nhpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s\n```\n\n\n\n此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。\n\n\n\n此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m\n\n$ kubectl get deployment hpa-demo\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nhpa-demo   1/1     1            1           24m\n```\n\n\n\n> 可以通过设置 `kube-controller-manager` 组件的`--horizontal-pod-autoscaler-downscale-stabilization` 参数来设置一个持续时间，用于指定在当前操作完成后，`HPA` 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。\n\n\n\n<br>\n\n\n\n# 基于内存的HPA\n\n创建基于内存的hpa对象：\n\n```yaml\n# hpa-mem.yaml\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: nginx-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: hpa-demo\n  minReplicas: 1\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageUtilization: 60\n```\n\n> 命令行好像只能创建基于cpu的，内存的需要通过yaml创建。\n\n\n\n这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：\n\n```bash\n$ kubectl apply -f hpa-mem.yaml\n```\n\n\n\n确保资源创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n然后进入创建的容器，执行内存压测脚本，增加内存使用率：\n\n```bash\n$ kubectl exec -it hpa-demo-66944b79bf-tqrn9 /bin/bash\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# ls /etc/script/\nincrease-mem.sh\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# source /etc/script/increase-mem.sh \ndd: writing to '/tmp/memory/block': No space left on device\n81921+0 records in\n81920+0 records out\n41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s\n```\n\n\n\n此时可以看到，内存hpa已经超过阈值，发生了扩容：\n\n```bash\n$ kubectl get hpa\nNAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nnginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s\n\n$ kubectl get pods \nNAME                            READY   STATUS    RESTARTS   AGE\nhpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s\nhpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s\n```\n\n\n\n同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。\n\n<br>\n\n\n\n","source":"_posts/k8s实践系列-利用HPA的服务自动扩容.md","raw":"---\ntitle: '[k8s实践系列]利用HPA的服务自动扩容'\ndate: 2020-07-27 10:08:59\ntags:\n- k8s\ncategories:\n- 实践K8s\ndescription: 利用hpa进行服务的自动扩缩容。\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595825980543&di=95a17ecbfc8ad1caaa510a788f6ad857&imgtype=0&src=http%3A%2F%2Fhackernews.cc%2Fwp-content%2Fuploads%2F2019%2F06%2F999a755b141777513c70457e07b65570460.jpg\n---\n\n\n\n# HPA\n\nkubernetes中提供了`kubectl scale`命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象`Horizontal Pod Autoscaling（Pod 水平自动伸缩）`，简称`HPA`。\n\n\n\nHPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。\n\n\n\n可以简单的通过 `kubectl autoscale` 命令来创建一个 HPA 资源对象，`HPA Controller`默认`30s`轮询一次（可通过 `kube-controller-manager` 的`--horizontal-pod-autoscaler-sync-period` 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。\n\n\n\n<br>\n\n\n\n# metric-server\n\nhpa功能需要利用`metric-server`来获取相关指标数据，`metric-server`通过kubernetes的api将指标暴露出来，例如：\n\n```bash\nhttps://<apiserver>/apis/metrics.k8s.io/v1beta1/namespaces/<namespace-name>/pods/<pod-name>\n```\n\n\n\n<img src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n部署`metric-server`可以参考 {% post_link k8s实践系列-部署MetricServer %}\n\n\n\n<br>\n\n\n\n# 创建测试服务\n\n使用下面的文件创建一个测试服务：\n\n```yaml\n# demo.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hpa-demo\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      volumes:\n      - name: increase-mem-script\n        configMap:\n          name: increase-mem-config\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: increase-mem-script\n          mountPath: /etc/script\n        resources:\n          requests:\n            memory: 50Mi\n            cpu: 50m\n        securityContext:\n          privileged: true\n```\n\n\n\n**需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存**\n\n\n\n创建内存压测脚本：\n\n```yaml\n# config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: increase-mem-config\ndata:\n  increase-mem.sh: |\n    #!/bin/bash  \n    mkdir /tmp/memory  \n    mount -t tmpfs -o size=40M tmpfs /tmp/memory  \n    dd if=/dev/zero of=/tmp/memory/block  \n    sleep 60 \n    rm /tmp/memory/block  \n    umount /tmp/memory  \n    rmdir /tmp/memory\n```\n\n\n\n\n\n直接运行下面的命令创建：\n\n```bash\n$ kubectl apply -f config.yaml\n$ kubectl apply -f demo.yaml\n```\n\n\n\n确保服务都正常启动：\n\n```bash\n$ kubectl get pod \n```\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n# 基于CPU的HPA\n\n使用`kubectl autoscale`命令来创建一个hpa对象：\n\n```bash\n$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5\n```\n\n这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。\n\n\n\n查看hpa对象创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n这里我们使用busybox创建一个测试的pod，向nginx服务发sing请求：\n\n```bash\n$ kubectl run -ti --image busybox test-hpa --restart=Never --rm /bin/sh\n/# while true; do wget -q -O- http://172.21.133.86; done\n```\n\n> 172.21.133.86 为pod的IP\n\n\n\n稍等一下即可看到hpa开始工作：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s\n\n$ kubectl get pod --watch \nNAME                        READY   STATUS              RESTARTS   AGE\nhpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s\nhpa-demo-6c6489f57-w792g   1/1     Running             0          13s\nhpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s\nhpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s\nhpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s\n```\n\n\n\n此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。\n\n\n\n此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：\n\n```bash\n$ kubectl get hpa\nNAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nhpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m\n\n$ kubectl get deployment hpa-demo\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nhpa-demo   1/1     1            1           24m\n```\n\n\n\n> 可以通过设置 `kube-controller-manager` 组件的`--horizontal-pod-autoscaler-downscale-stabilization` 参数来设置一个持续时间，用于指定在当前操作完成后，`HPA` 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。\n\n\n\n<br>\n\n\n\n# 基于内存的HPA\n\n创建基于内存的hpa对象：\n\n```yaml\n# hpa-mem.yaml\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: nginx-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: hpa-demo\n  minReplicas: 1\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageUtilization: 60\n```\n\n> 命令行好像只能创建基于cpu的，内存的需要通过yaml创建。\n\n\n\n这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：\n\n```bash\n$ kubectl apply -f hpa-mem.yaml\n```\n\n\n\n确保资源创建成功：\n\n```bash\n$ kubectl get hpa\n```\n\n<img src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n然后进入创建的容器，执行内存压测脚本，增加内存使用率：\n\n```bash\n$ kubectl exec -it hpa-demo-66944b79bf-tqrn9 /bin/bash\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# ls /etc/script/\nincrease-mem.sh\nroot@hpa-mem-demo-66944b79bf-tqrn9:/# source /etc/script/increase-mem.sh \ndd: writing to '/tmp/memory/block': No space left on device\n81921+0 records in\n81920+0 records out\n41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s\n```\n\n\n\n此时可以看到，内存hpa已经超过阈值，发生了扩容：\n\n```bash\n$ kubectl get hpa\nNAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nnginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s\n\n$ kubectl get pods \nNAME                            READY   STATUS    RESTARTS   AGE\nhpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s\nhpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s\n```\n\n\n\n同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。\n\n<br>\n\n\n\n","slug":"k8s实践系列-利用HPA的服务自动扩容","published":1,"updated":"2020-07-27T03:04:30.490Z","_id":"ckd3xf5sh0000can0908zbd2i","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"HPA\"><a href=\"#HPA\" class=\"headerlink\" title=\"HPA\"></a>HPA</h1><p>kubernetes中提供了<code>kubectl scale</code>命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象<code>Horizontal Pod Autoscaling（Pod 水平自动伸缩）</code>，简称<code>HPA</code>。</p>\n<p>HPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。</p>\n<p>可以简单的通过 <code>kubectl autoscale</code> 命令来创建一个 HPA 资源对象，<code>HPA Controller</code>默认<code>30s</code>轮询一次（可通过 <code>kube-controller-manager</code> 的<code>--horizontal-pod-autoscaler-sync-period</code> 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。</p>\n<br>\n\n\n\n<h1 id=\"metric-server\"><a href=\"#metric-server\" class=\"headerlink\" title=\"metric-server\"></a>metric-server</h1><p>hpa功能需要利用<code>metric-server</code>来获取相关指标数据，<code>metric-server</code>通过kubernetes的api将指标暴露出来，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://&lt;apiserver&gt;/apis/metrics.k8s.io/v1beta1/namespaces/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src= \"/img/loading.gif\" data-src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n<p>部署<code>metric-server</code>可以参考 <a href=\"/2020/07/05/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E9%83%A8%E7%BD%B2MetricServer/\" title=\"[k8s实践系列]部署MetricServer\">[k8s实践系列]部署MetricServer</a></p>\n<br>\n\n\n\n<h1 id=\"创建测试服务\"><a href=\"#创建测试服务\" class=\"headerlink\" title=\"创建测试服务\"></a>创建测试服务</h1><p>使用下面的文件创建一个测试服务：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># demo.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/script</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存</strong></p>\n<p>创建内存压测脚本：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">increase-mem.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash  </span></span><br><span class=\"line\">    <span class=\"string\">mkdir</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">mount</span> <span class=\"string\">-t</span> <span class=\"string\">tmpfs</span> <span class=\"string\">-o</span> <span class=\"string\">size=40M</span> <span class=\"string\">tmpfs</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">dd</span> <span class=\"string\">if=/dev/zero</span> <span class=\"string\">of=/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">sleep</span> <span class=\"number\">60</span> </span><br><span class=\"line\">    <span class=\"string\">rm</span> <span class=\"string\">/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">umount</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">rmdir</span> <span class=\"string\">/tmp/memory</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>直接运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f config.yaml</span><br><span class=\"line\">$ kubectl apply -f demo.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保服务都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"基于CPU的HPA\"><a href=\"#基于CPU的HPA\" class=\"headerlink\" title=\"基于CPU的HPA\"></a>基于CPU的HPA</h1><p>使用<code>kubectl autoscale</code>命令来创建一个hpa对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5</span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。</p>\n<p>查看hpa对象创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n<p>这里我们使用busybox创建一个测试的pod，向nginx服务发sing请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl run -ti --image busybox <span class=\"built_in\">test</span>-hpa --restart=Never --rm /bin/sh</span><br><span class=\"line\">/<span class=\"comment\"># while true; do wget -q -O- http://172.21.133.86; done</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>172.21.133.86 为pod的IP</p>\n</blockquote>\n<p>稍等一下即可看到hpa开始工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod --watch </span><br><span class=\"line\">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s</span><br><span class=\"line\">hpa-demo-6c6489f57-w792g   1/1     Running             0          13s</span><br><span class=\"line\">hpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s</span><br><span class=\"line\">hpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s</span><br><span class=\"line\">hpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。</p>\n<p>此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get deployment hpa-demo</span><br><span class=\"line\">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">hpa-demo   1/1     1            1           24m</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>可以通过设置 <code>kube-controller-manager</code> 组件的<code>--horizontal-pod-autoscaler-downscale-stabilization</code> 参数来设置一个持续时间，用于指定在当前操作完成后，<code>HPA</code> 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"基于内存的HPA\"><a href=\"#基于内存的HPA\" class=\"headerlink\" title=\"基于内存的HPA\"></a>基于内存的HPA</h1><p>创建基于内存的hpa对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hpa-mem.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-hpa</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">    <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令行好像只能创建基于cpu的，内存的需要通过yaml创建。</p>\n</blockquote>\n<p>这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f hpa-mem.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保资源创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src= \"/img/loading.gif\" data-src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n<p>然后进入创建的容器，执行内存压测脚本，增加内存使用率：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -it hpa-demo-66944b79bf-tqrn9 /bin/bash</span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># ls /etc/script/</span></span><br><span class=\"line\">increase-mem.sh</span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># source /etc/script/increase-mem.sh </span></span><br><span class=\"line\">dd: writing to <span class=\"string\">'/tmp/memory/block'</span>: No space left on device</span><br><span class=\"line\">81921+0 records <span class=\"keyword\">in</span></span><br><span class=\"line\">81920+0 records out</span><br><span class=\"line\">41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时可以看到，内存hpa已经超过阈值，发生了扩容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">nginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods </span><br><span class=\"line\">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s</span><br><span class=\"line\">hpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。</p>\n<br>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HPA\"><a href=\"#HPA\" class=\"headerlink\" title=\"HPA\"></a>HPA</h1><p>kubernetes中提供了<code>kubectl scale</code>命令来实现服务的扩容和缩容，但是这是一个手动的操作。如果要实现自动的基于某些指标的自动扩缩容，就要利用kubernetes提供的资源对象<code>Horizontal Pod Autoscaling（Pod 水平自动伸缩）</code>，简称<code>HPA</code>。</p>\n<p>HPA 通过监控分析一些控制器控制的所有 Pod 的负载变化情况来确定是否需要调整 Pod 的副本数量。</p>\n<p>可以简单的通过 <code>kubectl autoscale</code> 命令来创建一个 HPA 资源对象，<code>HPA Controller</code>默认<code>30s</code>轮询一次（可通过 <code>kube-controller-manager</code> 的<code>--horizontal-pod-autoscaler-sync-period</code> 参数进行设置），查询指定的资源中的 Pod 资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。</p>\n<br>\n\n\n\n<h1 id=\"metric-server\"><a href=\"#metric-server\" class=\"headerlink\" title=\"metric-server\"></a>metric-server</h1><p>hpa功能需要利用<code>metric-server</code>来获取相关指标数据，<code>metric-server</code>通过kubernetes的api将指标暴露出来，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://&lt;apiserver&gt;/apis/metrics.k8s.io/v1beta1/namespaces/&lt;namespace-name&gt;/pods/&lt;pod-name&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"k8s-hpa-ms.png\" style=\"zoom:80%;\" />\n\n\n\n<p>部署<code>metric-server</code>可以参考 <a href=\"/2020/07/05/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E9%83%A8%E7%BD%B2MetricServer/\" title=\"[k8s实践系列]部署MetricServer\">[k8s实践系列]部署MetricServer</a></p>\n<br>\n\n\n\n<h1 id=\"创建测试服务\"><a href=\"#创建测试服务\" class=\"headerlink\" title=\"创建测试服务\"></a>创建测试服务</h1><p>使用下面的文件创建一个测试服务：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># demo.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-script</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/etc/script</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">50Mi</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">        <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">          <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>需要注意的是，Pod 资源必须添加 requests 资源声明，否则hpa不生效。其中挂载的脚本为内存压测脚本，用于增加内存</strong></p>\n<p>创建内存压测脚本：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">increase-mem-config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">increase-mem.sh:</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash  </span></span><br><span class=\"line\">    <span class=\"string\">mkdir</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">mount</span> <span class=\"string\">-t</span> <span class=\"string\">tmpfs</span> <span class=\"string\">-o</span> <span class=\"string\">size=40M</span> <span class=\"string\">tmpfs</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">dd</span> <span class=\"string\">if=/dev/zero</span> <span class=\"string\">of=/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">sleep</span> <span class=\"number\">60</span> </span><br><span class=\"line\">    <span class=\"string\">rm</span> <span class=\"string\">/tmp/memory/block</span>  </span><br><span class=\"line\">    <span class=\"string\">umount</span> <span class=\"string\">/tmp/memory</span>  </span><br><span class=\"line\">    <span class=\"string\">rmdir</span> <span class=\"string\">/tmp/memory</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>直接运行下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f config.yaml</span><br><span class=\"line\">$ kubectl apply -f demo.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保服务都正常启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod</span><br></pre></td></tr></table></figure>\n\n<img src=\"pod.png\" style=\"zoom:50%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"基于CPU的HPA\"><a href=\"#基于CPU的HPA\" class=\"headerlink\" title=\"基于CPU的HPA\"></a>基于CPU的HPA</h1><p>使用<code>kubectl autoscale</code>命令来创建一个hpa对象：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl autoscale deployment hpa-demo --cpu-percent=10 --min=1 --max=5</span><br></pre></td></tr></table></figure>\n\n<p>这里创建了一个关联资源 hpa-demo 的 HPA，最小的 Pod 副本数为1，最大为5。HPA 会根据设定的 cpu 使用率（10%）动态的增加或者减少 Pod 数量。</p>\n<p>查看hpa对象创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src=\"hpa-cpu.png\" style=\"zoom:60%;\" />\n\n\n\n<p>这里我们使用busybox创建一个测试的pod，向nginx服务发sing请求：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl run -ti --image busybox <span class=\"built_in\">test</span>-hpa --restart=Never --rm /bin/sh</span><br><span class=\"line\">/<span class=\"comment\"># while true; do wget -q -O- http://172.21.133.86; done</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>172.21.133.86 为pod的IP</p>\n</blockquote>\n<p>稍等一下即可看到hpa开始工作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   338%/10%   1         5        1          5m15s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pod --watch </span><br><span class=\"line\">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-6c6489f57-twtdp   1/1     Running             0          5m23s</span><br><span class=\"line\">hpa-demo-6c6489f57-w792g   1/1     Running             0          13s</span><br><span class=\"line\">hpa-demo-6c6489f57-zlxkp   1/1     Running             0          27s</span><br><span class=\"line\">hpa-demo-6c6489f57-znp6q   0/1     ContainerCreating   0          7s</span><br><span class=\"line\">hpa-demo-6c6489f57-ztnvx   1/1     Running             0          6s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时，由于pod的cpu使用率大于了阈值，hpa开始工作，自动创建了pod，最终pod个数达到最大值5。</p>\n<p>此时，停止busybox的请求，hpa就会恢复，pod也会缩容到1个：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME       REFERENCE             TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">hpa-demo   Deployment/hpa-demo   0%/10%    1         5        1          14m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get deployment hpa-demo</span><br><span class=\"line\">NAME       READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">hpa-demo   1/1     1            1           24m</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>可以通过设置 <code>kube-controller-manager</code> 组件的<code>--horizontal-pod-autoscaler-downscale-stabilization</code> 参数来设置一个持续时间，用于指定在当前操作完成后，<code>HPA</code> 必须等待多长时间才能执行另一次缩放操作。默认为5分钟，也就是默认需要等待5分钟后才会开始自动缩放。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"基于内存的HPA\"><a href=\"#基于内存的HPA\" class=\"headerlink\" title=\"基于内存的HPA\"></a>基于内存的HPA</h1><p>创建基于内存的hpa对象：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hpa-mem.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-hpa</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">hpa-demo</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">    <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">60</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>命令行好像只能创建基于cpu的，内存的需要通过yaml创建。</p>\n</blockquote>\n<p>这里设定pod的内存使用率超过60%时进行扩容。使用下面的命令创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f hpa-mem.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p>确保资源创建成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br></pre></td></tr></table></figure>\n\n<img src=\"hpa-mem.png\" style=\"zoom:60%;\" />\n\n\n\n<p>然后进入创建的容器，执行内存压测脚本，增加内存使用率：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl <span class=\"built_in\">exec</span> -it hpa-demo-66944b79bf-tqrn9 /bin/bash</span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># ls /etc/script/</span></span><br><span class=\"line\">increase-mem.sh</span><br><span class=\"line\">root@hpa-mem-demo-66944b79bf-tqrn9:/<span class=\"comment\"># source /etc/script/increase-mem.sh </span></span><br><span class=\"line\">dd: writing to <span class=\"string\">'/tmp/memory/block'</span>: No space left on device</span><br><span class=\"line\">81921+0 records <span class=\"keyword\">in</span></span><br><span class=\"line\">81920+0 records out</span><br><span class=\"line\">41943040 bytes (42 MB, 40 MiB) copied, 0.584029 s, 71.8 MB/s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时可以看到，内存hpa已经超过阈值，发生了扩容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get hpa</span><br><span class=\"line\">NAME        REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class=\"line\">nginx-hpa   Deployment/hpa-mem-demo   93%/60%   1         5         1          7m13s</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods </span><br><span class=\"line\">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">hpa-demo-66944b79bf-8m4d9   1/1     Running   0          2m51s</span><br><span class=\"line\">hpa-demo-66944b79bf-tqrn9   1/1     Running   0          8m11s</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理，停止脚本后，内存恢复到阈值下，服务进行自动缩容。</p>\n<br>\n\n\n\n"},{"title":"Nginx流量限制","date":"2020-07-29T02:00:20.000Z","description":"使用Nginx流量限制功能","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595998302769&di=0b91df0693ce97ad9e6b87445c49d83f&imgtype=0&src=http%3A%2F%2Fwww.nd9p.com%2Fuploads%2Fallimg%2F161029%2F0UQ31J5_1.png%3Fw%3D480","_content":"\n\n\n流量限制(rate-limiting)，是Nginx中一个非常实用的功能。可以用来限制用户在给定时间内HTTP请求的数量。请求可以是一个简单网站首页的GET请求，也可以是登录表单的POST请求。\n\n\n\n流量限制可以用作安全目的，如减慢暴力密码破解的速率、抵御DDOS攻击，保护上游应用服务器不被同时太多用户请求所压垮。\n\n\n\n------\n\n\n\n# 基本配置\n\n使用`limit_req_zone`和`limit_req`来定义和使用流量控制，基本的设置如下：\n\n```nginx\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;\n\nserver {\n    location /login/ {\n        limit_req zone=mylimit;\n        proxy_pass http://my_upstream;\n    }\n}\n```\n\n- `limit_req_zone`定义流量控制相关参数；\n- `limit_req`起用流量控制，将流控配置应用到location或server中；\n- `$binary_remote_addr`：流量限制的key，以这个key作为流量控制的指标，可以使用其他的变量；\n- `zone`：定义存储状态和被限制请求的URL访问频率的共享内存区，分为两个部分：\n  - `mylimit`：定义区域的名字；\n  - `10m`：区域大小；（1.6W个IP地址状态信息存储大约1M，所以10m可以存储大约16W个信息）\n- `rate`：最大请求速率，例子中是每秒10个，也就是100毫秒1个（nginx以毫秒粒度追踪请求）；\n\n\n\n> 当Nginx需要添加新条目时存储空间不足，将会删除旧条目。如果释放的空间仍不够容纳新记录，Nginx将会返回 503状态码(Service Temporarily Unavailable)。另外，为了防止内存被耗尽，Nginx每次创建新条目时，最多删除两条60秒内未使用的条目。\n\n\n\n在这个实例中，每个IP地址被限制为每秒只能请求10次/login/，更准确地说，在前一个请求的100毫秒内不能请求该URL。\n\n\n\n<br>\n\n\n\n# 处理突发请求\n\n如果某个时刻出现100ms内超过1次请求，并且确认是正常请求，那么需要配置允许超额的请求队列长度，否则服务器会返回503错误。\n\n```nginx\nlocation /login/ {\n    limit_req zone=mylimit burst=20;\n    proxy_pass http://my_upstream;\n}\n```\n\n\n\nburst参数定义了超出zone指定速率的情况下客户端还能发起多少请求。上一个请求100毫秒内到达的请求将会被放入队列，这里将队列大小设置为20。\n\n\n\n这意味着，如果从一个给定IP地址发送21个请求，Nginx会立即将第一个请求发送到上游服务器群，然后将余下20个请求放在队列中。然后每100毫秒转发一个排队的请求，只有当传入请求使队列中排队的请求数超过20时，Nginx才会向客户端返回503。\n\n\n\n<br>\n\n\n\n# 无延迟队列\n\nbrust的问题是队列中的请求需要排队，客户端的请求可能会出现响应等待时间过长的问题。使用`nodelay`参数可以解决：\n\n```nginx\nlocation /login/ {\n    limit_req zone=mylimit burst=20 nodelay;\n    proxy_pass http://my_upstream;\n}\n```\n\n\n\n队列中有20个空位，从给定的IP地址发出的21个请求同时到达。Nginx会立即转发这个21个请求，并且标记队列中占据的20个位置，然后每100毫秒释放一个位置。如果是25个请求同时到达，Nginx将会立即转发其中的21个请求，标记队列中占据的20个位置，并且返回503状态码来拒绝剩下的4个请求。\n\n\n\n<br>\n\n\n\n# 设置返回状态码\n\n默认情况下，如果请求由于流控被限制，则会返回客户端503状态码，可以通过下面的配置返回指定的状态码：\n\n```nginx\nlocation /login/ {\n    limit_req zone=mylimit burst=20 nodelay;\n    limit_req_status 404;\n}\n```\n\n","source":"_posts/Nginx流量限制.md","raw":"---\ntitle: Nginx流量限制\ndate: 2020-07-29 10:00:20\ntags:\n- Nginx\ncategories: Nginx\ndescription: 使用Nginx流量限制功能\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1595998302769&di=0b91df0693ce97ad9e6b87445c49d83f&imgtype=0&src=http%3A%2F%2Fwww.nd9p.com%2Fuploads%2Fallimg%2F161029%2F0UQ31J5_1.png%3Fw%3D480\n---\n\n\n\n流量限制(rate-limiting)，是Nginx中一个非常实用的功能。可以用来限制用户在给定时间内HTTP请求的数量。请求可以是一个简单网站首页的GET请求，也可以是登录表单的POST请求。\n\n\n\n流量限制可以用作安全目的，如减慢暴力密码破解的速率、抵御DDOS攻击，保护上游应用服务器不被同时太多用户请求所压垮。\n\n\n\n------\n\n\n\n# 基本配置\n\n使用`limit_req_zone`和`limit_req`来定义和使用流量控制，基本的设置如下：\n\n```nginx\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;\n\nserver {\n    location /login/ {\n        limit_req zone=mylimit;\n        proxy_pass http://my_upstream;\n    }\n}\n```\n\n- `limit_req_zone`定义流量控制相关参数；\n- `limit_req`起用流量控制，将流控配置应用到location或server中；\n- `$binary_remote_addr`：流量限制的key，以这个key作为流量控制的指标，可以使用其他的变量；\n- `zone`：定义存储状态和被限制请求的URL访问频率的共享内存区，分为两个部分：\n  - `mylimit`：定义区域的名字；\n  - `10m`：区域大小；（1.6W个IP地址状态信息存储大约1M，所以10m可以存储大约16W个信息）\n- `rate`：最大请求速率，例子中是每秒10个，也就是100毫秒1个（nginx以毫秒粒度追踪请求）；\n\n\n\n> 当Nginx需要添加新条目时存储空间不足，将会删除旧条目。如果释放的空间仍不够容纳新记录，Nginx将会返回 503状态码(Service Temporarily Unavailable)。另外，为了防止内存被耗尽，Nginx每次创建新条目时，最多删除两条60秒内未使用的条目。\n\n\n\n在这个实例中，每个IP地址被限制为每秒只能请求10次/login/，更准确地说，在前一个请求的100毫秒内不能请求该URL。\n\n\n\n<br>\n\n\n\n# 处理突发请求\n\n如果某个时刻出现100ms内超过1次请求，并且确认是正常请求，那么需要配置允许超额的请求队列长度，否则服务器会返回503错误。\n\n```nginx\nlocation /login/ {\n    limit_req zone=mylimit burst=20;\n    proxy_pass http://my_upstream;\n}\n```\n\n\n\nburst参数定义了超出zone指定速率的情况下客户端还能发起多少请求。上一个请求100毫秒内到达的请求将会被放入队列，这里将队列大小设置为20。\n\n\n\n这意味着，如果从一个给定IP地址发送21个请求，Nginx会立即将第一个请求发送到上游服务器群，然后将余下20个请求放在队列中。然后每100毫秒转发一个排队的请求，只有当传入请求使队列中排队的请求数超过20时，Nginx才会向客户端返回503。\n\n\n\n<br>\n\n\n\n# 无延迟队列\n\nbrust的问题是队列中的请求需要排队，客户端的请求可能会出现响应等待时间过长的问题。使用`nodelay`参数可以解决：\n\n```nginx\nlocation /login/ {\n    limit_req zone=mylimit burst=20 nodelay;\n    proxy_pass http://my_upstream;\n}\n```\n\n\n\n队列中有20个空位，从给定的IP地址发出的21个请求同时到达。Nginx会立即转发这个21个请求，并且标记队列中占据的20个位置，然后每100毫秒释放一个位置。如果是25个请求同时到达，Nginx将会立即转发其中的21个请求，标记队列中占据的20个位置，并且返回503状态码来拒绝剩下的4个请求。\n\n\n\n<br>\n\n\n\n# 设置返回状态码\n\n默认情况下，如果请求由于流控被限制，则会返回客户端503状态码，可以通过下面的配置返回指定的状态码：\n\n```nginx\nlocation /login/ {\n    limit_req zone=mylimit burst=20 nodelay;\n    limit_req_status 404;\n}\n```\n\n","slug":"Nginx流量限制","published":1,"updated":"2020-07-29T07:12:50.478Z","_id":"ckd6rcs780000mcn0247y73s7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>流量限制(rate-limiting)，是Nginx中一个非常实用的功能。可以用来限制用户在给定时间内HTTP请求的数量。请求可以是一个简单网站首页的GET请求，也可以是登录表单的POST请求。</p>\n<p>流量限制可以用作安全目的，如减慢暴力密码破解的速率、抵御DDOS攻击，保护上游应用服务器不被同时太多用户请求所压垮。</p>\n<hr>\n<h1 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h1><p>使用<code>limit_req_zone</code>和<code>limit_req</code>来定义和使用流量控制，基本的设置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=mylimit:<span class=\"number\">10m</span> rate=10r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">limit_req</span> zone=mylimit;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>limit_req_zone</code>定义流量控制相关参数；</li>\n<li><code>limit_req</code>起用流量控制，将流控配置应用到location或server中；</li>\n<li><code>$binary_remote_addr</code>：流量限制的key，以这个key作为流量控制的指标，可以使用其他的变量；</li>\n<li><code>zone</code>：定义存储状态和被限制请求的URL访问频率的共享内存区，分为两个部分：<ul>\n<li><code>mylimit</code>：定义区域的名字；</li>\n<li><code>10m</code>：区域大小；（1.6W个IP地址状态信息存储大约1M，所以10m可以存储大约16W个信息）</li>\n</ul>\n</li>\n<li><code>rate</code>：最大请求速率，例子中是每秒10个，也就是100毫秒1个（nginx以毫秒粒度追踪请求）；</li>\n</ul>\n<blockquote>\n<p>当Nginx需要添加新条目时存储空间不足，将会删除旧条目。如果释放的空间仍不够容纳新记录，Nginx将会返回 503状态码(Service Temporarily Unavailable)。另外，为了防止内存被耗尽，Nginx每次创建新条目时，最多删除两条60秒内未使用的条目。</p>\n</blockquote>\n<p>在这个实例中，每个IP地址被限制为每秒只能请求10次/login/，更准确地说，在前一个请求的100毫秒内不能请求该URL。</p>\n<br>\n\n\n\n<h1 id=\"处理突发请求\"><a href=\"#处理突发请求\" class=\"headerlink\" title=\"处理突发请求\"></a>处理突发请求</h1><p>如果某个时刻出现100ms内超过1次请求，并且确认是正常请求，那么需要配置允许超额的请求队列长度，否则服务器会返回503错误。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=mylimit burst=<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://my_upstream;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>burst参数定义了超出zone指定速率的情况下客户端还能发起多少请求。上一个请求100毫秒内到达的请求将会被放入队列，这里将队列大小设置为20。</p>\n<p>这意味着，如果从一个给定IP地址发送21个请求，Nginx会立即将第一个请求发送到上游服务器群，然后将余下20个请求放在队列中。然后每100毫秒转发一个排队的请求，只有当传入请求使队列中排队的请求数超过20时，Nginx才会向客户端返回503。</p>\n<br>\n\n\n\n<h1 id=\"无延迟队列\"><a href=\"#无延迟队列\" class=\"headerlink\" title=\"无延迟队列\"></a>无延迟队列</h1><p>brust的问题是队列中的请求需要排队，客户端的请求可能会出现响应等待时间过长的问题。使用<code>nodelay</code>参数可以解决：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=mylimit burst=<span class=\"number\">20</span> nodelay;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://my_upstream;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>队列中有20个空位，从给定的IP地址发出的21个请求同时到达。Nginx会立即转发这个21个请求，并且标记队列中占据的20个位置，然后每100毫秒释放一个位置。如果是25个请求同时到达，Nginx将会立即转发其中的21个请求，标记队列中占据的20个位置，并且返回503状态码来拒绝剩下的4个请求。</p>\n<br>\n\n\n\n<h1 id=\"设置返回状态码\"><a href=\"#设置返回状态码\" class=\"headerlink\" title=\"设置返回状态码\"></a>设置返回状态码</h1><p>默认情况下，如果请求由于流控被限制，则会返回客户端503状态码，可以通过下面的配置返回指定的状态码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=mylimit burst=<span class=\"number\">20</span> nodelay;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req_status</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>流量限制(rate-limiting)，是Nginx中一个非常实用的功能。可以用来限制用户在给定时间内HTTP请求的数量。请求可以是一个简单网站首页的GET请求，也可以是登录表单的POST请求。</p>\n<p>流量限制可以用作安全目的，如减慢暴力密码破解的速率、抵御DDOS攻击，保护上游应用服务器不被同时太多用户请求所压垮。</p>\n<hr>\n<h1 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h1><p>使用<code>limit_req_zone</code>和<code>limit_req</code>来定义和使用流量控制，基本的设置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">limit_req_zone</span> <span class=\"variable\">$binary_remote_addr</span> zone=mylimit:<span class=\"number\">10m</span> rate=10r/s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">limit_req</span> zone=mylimit;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://my_upstream;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>limit_req_zone</code>定义流量控制相关参数；</li>\n<li><code>limit_req</code>起用流量控制，将流控配置应用到location或server中；</li>\n<li><code>$binary_remote_addr</code>：流量限制的key，以这个key作为流量控制的指标，可以使用其他的变量；</li>\n<li><code>zone</code>：定义存储状态和被限制请求的URL访问频率的共享内存区，分为两个部分：<ul>\n<li><code>mylimit</code>：定义区域的名字；</li>\n<li><code>10m</code>：区域大小；（1.6W个IP地址状态信息存储大约1M，所以10m可以存储大约16W个信息）</li>\n</ul>\n</li>\n<li><code>rate</code>：最大请求速率，例子中是每秒10个，也就是100毫秒1个（nginx以毫秒粒度追踪请求）；</li>\n</ul>\n<blockquote>\n<p>当Nginx需要添加新条目时存储空间不足，将会删除旧条目。如果释放的空间仍不够容纳新记录，Nginx将会返回 503状态码(Service Temporarily Unavailable)。另外，为了防止内存被耗尽，Nginx每次创建新条目时，最多删除两条60秒内未使用的条目。</p>\n</blockquote>\n<p>在这个实例中，每个IP地址被限制为每秒只能请求10次/login/，更准确地说，在前一个请求的100毫秒内不能请求该URL。</p>\n<br>\n\n\n\n<h1 id=\"处理突发请求\"><a href=\"#处理突发请求\" class=\"headerlink\" title=\"处理突发请求\"></a>处理突发请求</h1><p>如果某个时刻出现100ms内超过1次请求，并且确认是正常请求，那么需要配置允许超额的请求队列长度，否则服务器会返回503错误。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=mylimit burst=<span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://my_upstream;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>burst参数定义了超出zone指定速率的情况下客户端还能发起多少请求。上一个请求100毫秒内到达的请求将会被放入队列，这里将队列大小设置为20。</p>\n<p>这意味着，如果从一个给定IP地址发送21个请求，Nginx会立即将第一个请求发送到上游服务器群，然后将余下20个请求放在队列中。然后每100毫秒转发一个排队的请求，只有当传入请求使队列中排队的请求数超过20时，Nginx才会向客户端返回503。</p>\n<br>\n\n\n\n<h1 id=\"无延迟队列\"><a href=\"#无延迟队列\" class=\"headerlink\" title=\"无延迟队列\"></a>无延迟队列</h1><p>brust的问题是队列中的请求需要排队，客户端的请求可能会出现响应等待时间过长的问题。使用<code>nodelay</code>参数可以解决：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=mylimit burst=<span class=\"number\">20</span> nodelay;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://my_upstream;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>队列中有20个空位，从给定的IP地址发出的21个请求同时到达。Nginx会立即转发这个21个请求，并且标记队列中占据的20个位置，然后每100毫秒释放一个位置。如果是25个请求同时到达，Nginx将会立即转发其中的21个请求，标记队列中占据的20个位置，并且返回503状态码来拒绝剩下的4个请求。</p>\n<br>\n\n\n\n<h1 id=\"设置返回状态码\"><a href=\"#设置返回状态码\" class=\"headerlink\" title=\"设置返回状态码\"></a>设置返回状态码</h1><p>默认情况下，如果请求由于流控被限制，则会返回客户端503状态码，可以通过下面的配置返回指定的状态码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /login/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=mylimit burst=<span class=\"number\">20</span> nodelay;</span><br><span class=\"line\">    <span class=\"attribute\">limit_req_status</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Nginx Status模块","date":"2020-07-29T03:03:46.000Z","description":"使用nginx status模块简单监控nginx状态","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596002098189&di=31ed01979fca9ba000275ac1005240c0&imgtype=0&src=http%3A%2F%2Fdata.useit.com.cn%2Fuseitdata%2Fforum%2F201510%2F20%2F183829k5771z2jqs2ssuuh.jpg","_content":"\n\n\n`http_stub_status_module`可以监控nginx的状态，其在yum安装时会默认加入，在源码安装时需要手动加入编译。\n\n\n\n------\n\n\n\n# 作用\n\n这个模块的作用是展示nginx当前处理连接的状态，常用于监控nginx。\n\n<br>\n\n\n\n# 配置\n\n格式：\n\n```nginx\nlocation /status {\n    stub_status;\n}\n```\n\n**该模块需要配置在server中的location下。**\n\n\n\n例如：\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location /status {\n        stub_status;\n    }\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n<br>\n\n\n\n# 生效配置\n\n```bash\n$ nginx -t \n$ nginx -s reload \n```\n\n\n\n通过浏览器访问`location`匹配的模块路径，例如：`http://192.168.221.201/status`，即可看到如下信息：\n\n\n\n<img src=\"status.png\" style=\"zoom:130%;\" />\n\n\n\n- `Active connections`：当前活跃的连接数；\n- `accepts`：nginx接收的总共的握手次数，这里是9；\n- `handled`：处理的连接数，这里是9；\n- `requests`：处理的请求数，这里是5；\n- `Reading`：正在读的连接数；\n- `Writing`：正在写的连接数；\n- `Waiting`：等待连接个数；\n\n\n\n> 正常情况下，握手次数和连接次数应该相等，表示没有丢失请求；\n\n\n\n","source":"_posts/Nginx-Status模块.md","raw":"---\ntitle: Nginx Status模块\ndate: 2020-07-29 11:03:46\ntags:\n- Nginx\ncategories: \n- Nginx\n- 常用模块\ndescription: 使用nginx status模块简单监控nginx状态\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596002098189&di=31ed01979fca9ba000275ac1005240c0&imgtype=0&src=http%3A%2F%2Fdata.useit.com.cn%2Fuseitdata%2Fforum%2F201510%2F20%2F183829k5771z2jqs2ssuuh.jpg\n---\n\n\n\n`http_stub_status_module`可以监控nginx的状态，其在yum安装时会默认加入，在源码安装时需要手动加入编译。\n\n\n\n------\n\n\n\n# 作用\n\n这个模块的作用是展示nginx当前处理连接的状态，常用于监控nginx。\n\n<br>\n\n\n\n# 配置\n\n格式：\n\n```nginx\nlocation /status {\n    stub_status;\n}\n```\n\n**该模块需要配置在server中的location下。**\n\n\n\n例如：\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location /status {\n        stub_status;\n    }\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n<br>\n\n\n\n# 生效配置\n\n```bash\n$ nginx -t \n$ nginx -s reload \n```\n\n\n\n通过浏览器访问`location`匹配的模块路径，例如：`http://192.168.221.201/status`，即可看到如下信息：\n\n\n\n<img src=\"status.png\" style=\"zoom:130%;\" />\n\n\n\n- `Active connections`：当前活跃的连接数；\n- `accepts`：nginx接收的总共的握手次数，这里是9；\n- `handled`：处理的连接数，这里是9；\n- `requests`：处理的请求数，这里是5；\n- `Reading`：正在读的连接数；\n- `Writing`：正在写的连接数；\n- `Waiting`：等待连接个数；\n\n\n\n> 正常情况下，握手次数和连接次数应该相等，表示没有丢失请求；\n\n\n\n","slug":"Nginx-Status模块","published":1,"updated":"2020-07-29T07:13:54.647Z","_id":"ckd6sjf7g0000rrn0ejieh2ot","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>http_stub_status_module</code>可以监控nginx的状态，其在yum安装时会默认加入，在源码安装时需要手动加入编译。</p>\n<hr>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>这个模块的作用是展示nginx当前处理连接的状态，常用于监控nginx。</p>\n<br>\n\n\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /status &#123;</span><br><span class=\"line\">    stub_status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>该模块需要配置在server中的location下。</strong></p>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /status &#123;</span><br><span class=\"line\">        stub_status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"生效配置\"><a href=\"#生效配置\" class=\"headerlink\" title=\"生效配置\"></a>生效配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t </span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问<code>location</code>匹配的模块路径，例如：<code>http://192.168.221.201/status</code>，即可看到如下信息：</p>\n<img src= \"/img/loading.gif\" data-src=\"status.png\" style=\"zoom:130%;\" />\n\n\n\n<ul>\n<li><code>Active connections</code>：当前活跃的连接数；</li>\n<li><code>accepts</code>：nginx接收的总共的握手次数，这里是9；</li>\n<li><code>handled</code>：处理的连接数，这里是9；</li>\n<li><code>requests</code>：处理的请求数，这里是5；</li>\n<li><code>Reading</code>：正在读的连接数；</li>\n<li><code>Writing</code>：正在写的连接数；</li>\n<li><code>Waiting</code>：等待连接个数；</li>\n</ul>\n<blockquote>\n<p>正常情况下，握手次数和连接次数应该相等，表示没有丢失请求；</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><code>http_stub_status_module</code>可以监控nginx的状态，其在yum安装时会默认加入，在源码安装时需要手动加入编译。</p>\n<hr>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>这个模块的作用是展示nginx当前处理连接的状态，常用于监控nginx。</p>\n<br>\n\n\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /status &#123;</span><br><span class=\"line\">    stub_status;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>该模块需要配置在server中的location下。</strong></p>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /status &#123;</span><br><span class=\"line\">        stub_status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"生效配置\"><a href=\"#生效配置\" class=\"headerlink\" title=\"生效配置\"></a>生效配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t </span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问<code>location</code>匹配的模块路径，例如：<code>http://192.168.221.201/status</code>，即可看到如下信息：</p>\n<img src=\"status.png\" style=\"zoom:130%;\" />\n\n\n\n<ul>\n<li><code>Active connections</code>：当前活跃的连接数；</li>\n<li><code>accepts</code>：nginx接收的总共的握手次数，这里是9；</li>\n<li><code>handled</code>：处理的连接数，这里是9；</li>\n<li><code>requests</code>：处理的请求数，这里是5；</li>\n<li><code>Reading</code>：正在读的连接数；</li>\n<li><code>Writing</code>：正在写的连接数；</li>\n<li><code>Waiting</code>：等待连接个数；</li>\n</ul>\n<blockquote>\n<p>正常情况下，握手次数和连接次数应该相等，表示没有丢失请求；</p>\n</blockquote>\n"},{"title":"Nginx返回随机主页","date":"2020-07-29T03:13:28.000Z","description":"让nginx返回随机的主页内容","cover":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4160398481,520081383&fm=11&gp=0.jpg","_content":"\n\n\n`--with-http_random_index_module`模块可以返回一个随机主页，yum安装时会默认加入，在源码安装时需要手动加入编译。\n\n\n\n------\n\n\n\n# 作用\n\n在主目录中随机选择一个文件作为随机主页。\n\n<br>\n\n\n\n\n\n# 配置\n\n**该模块需要配置在server中的location下。**\n\n\n\n格式：\n\n```nginx\nlocation / {\n    random_index on;\n}\n```\n\n\n\n> 默认 `random_index`为`off`。\n\n\n\n例如：\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        random_index on;\n        #index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n\n\n跟新配置后，作为测试，需要在根目录下创建几个静态文件作为测试：\n\n```bash\n$ touch /usr/share/nginx/html/{1,2,3}.html\n$ echo this is index 1 > /usr/share/nginx/html/1.html\n$ echo this is index 2 > /usr/share/nginx/html/2.html\n$ echo this is index 3 > /usr/share/nginx/html/3.html\n```\n\n\n\n<br>\n\n\n\n# 生效配置\n\n```nginx\n$ nginx -t\n$ nginx -s reload\n```\n\n\n\n通过浏览器访问首页，并不断刷新，可以看到3个页面会随机出现。\n\n![](random.png)\n\n\n\n\n\n<br>\n\n","source":"_posts/Nginx返回随机主页.md","raw":"---\ntitle: Nginx返回随机主页\ndate: 2020-07-29 11:13:28\ntags:\n- Nginx\ncategories: \n- Nginx\n- 常用模块\ndescription: 让nginx返回随机的主页内容\ncover: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=4160398481,520081383&fm=11&gp=0.jpg\n---\n\n\n\n`--with-http_random_index_module`模块可以返回一个随机主页，yum安装时会默认加入，在源码安装时需要手动加入编译。\n\n\n\n------\n\n\n\n# 作用\n\n在主目录中随机选择一个文件作为随机主页。\n\n<br>\n\n\n\n\n\n# 配置\n\n**该模块需要配置在server中的location下。**\n\n\n\n格式：\n\n```nginx\nlocation / {\n    random_index on;\n}\n```\n\n\n\n> 默认 `random_index`为`off`。\n\n\n\n例如：\n\n```nginx\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        random_index on;\n        #index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n\n\n跟新配置后，作为测试，需要在根目录下创建几个静态文件作为测试：\n\n```bash\n$ touch /usr/share/nginx/html/{1,2,3}.html\n$ echo this is index 1 > /usr/share/nginx/html/1.html\n$ echo this is index 2 > /usr/share/nginx/html/2.html\n$ echo this is index 3 > /usr/share/nginx/html/3.html\n```\n\n\n\n<br>\n\n\n\n# 生效配置\n\n```nginx\n$ nginx -t\n$ nginx -s reload\n```\n\n\n\n通过浏览器访问首页，并不断刷新，可以看到3个页面会随机出现。\n\n![](random.png)\n\n\n\n\n\n<br>\n\n","slug":"Nginx返回随机主页","published":1,"updated":"2020-07-29T07:13:41.881Z","_id":"ckd6suzjl0000uln0etfjgj8a","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>--with-http_random_index_module</code>模块可以返回一个随机主页，yum安装时会默认加入，在源码安装时需要手动加入编译。</p>\n<hr>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>在主目录中随机选择一个文件作为随机主页。</p>\n<br>\n\n\n\n\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><strong>该模块需要配置在server中的location下。</strong></p>\n<p>格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>默认 <code>random_index</code>为<code>off</code>。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">        <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"comment\">#index  index.html index.htm;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跟新配置后，作为测试，需要在根目录下创建几个静态文件作为测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch /usr/share/nginx/html/&#123;1,2,3&#125;.html</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> this is index 1 &gt; /usr/share/nginx/html/1.html</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> this is index 2 &gt; /usr/share/nginx/html/2.html</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> this is index 3 &gt; /usr/share/nginx/html/3.html</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"生效配置\"><a href=\"#生效配置\" class=\"headerlink\" title=\"生效配置\"></a>生效配置</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问首页，并不断刷新，可以看到3个页面会随机出现。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"random.png\" alt=\"\"></p>\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<p><code>--with-http_random_index_module</code>模块可以返回一个随机主页，yum安装时会默认加入，在源码安装时需要手动加入编译。</p>\n<hr>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>在主目录中随机选择一个文件作为随机主页。</p>\n<br>\n\n\n\n\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><strong>该模块需要配置在server中的location下。</strong></p>\n<p>格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">    <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>默认 <code>random_index</code>为<code>off</code>。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">        <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"comment\">#index  index.html index.htm;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跟新配置后，作为测试，需要在根目录下创建几个静态文件作为测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch /usr/share/nginx/html/&#123;1,2,3&#125;.html</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> this is index 1 &gt; /usr/share/nginx/html/1.html</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> this is index 2 &gt; /usr/share/nginx/html/2.html</span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> this is index 3 &gt; /usr/share/nginx/html/3.html</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"生效配置\"><a href=\"#生效配置\" class=\"headerlink\" title=\"生效配置\"></a>生效配置</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问首页，并不断刷新，可以看到3个页面会随机出现。</p>\n<p><img src=\"random.png\" alt=\"\"></p>\n<br>\n\n"},{"title":"Nginx替换响应内容","date":"2020-07-29T06:58:54.000Z","description":"使用--with-http_sub_module模块对响应内容进行替换","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3968007614,1554103190&fm=26&gp=0.jpg","_content":"\n\n\n`--with-http_sub_module`可以在服务端响应时进行html内容的替换，在yum安装时会默认加入，在源码安装时需要手动加入编译。\n\n\n\n------\n\n\n\n# 作用\n\n用于服务端在响应客户端http请求时进行内容替换。\n\n<br>\n\n\n\n\n\n# 配置\n\n**该模块可以配置在http、server或location下，如果配置在http下，则可以完成对多个server的替换。**\n\n\n\n格式：\n\n```nginx\nlocation / {\n\tsub_filter_last_modified on;\n\tsub_filter_once on;\n\tsub_filter <string> <replacement>;\n}\n```\n\n\n\n> `sub_filter_last_modified`用于让客户端判断服务端相应的内容是否发生变化，默认情况下，为`off`；\n>\n> `sub_filter_once`在进行html替换时，如果为`on`，则只匹配到第一个满足条件的字符串，`off`匹配所有，默认为`on`；\n\n\n\n例如：\n\n```nginx\n# 将返回的HTML中的jeson替换为JESON\nlocation / {\n\troot   /usr/share/nginx/html;\n\tsub_filter_last_modified on;\n\tsub_filter_once on;\n\tsub_filter '<a>jeson' '<a>JESON';\n}\n```\n\n\n\n<br>\n\n\n\n# 测试\n\n首先创建一个html测试文件：\n\n```bash\ncat > /usr/share/nginx/html/submodule.html << EOF\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>submodule</title>\n</head>\n<body>\n  <a>jeson</a>\n  <a>at</a>\n  <a>peter</a>\n  <a>jeson</a>\n</body>\n</html>\nEOF\n```\n\n\n\n然后在nginx配置中首先添加一个替换条件：\n\n```nginx\nlocation / {\n\troot   /usr/share/nginx/html;\n\tsub_filter_last_modified on;\n\tsub_filter '<a>jeson' '<a>JESON';\n}\n```\n\n\n\n重新加载配置后请求，发现第一个匹配到的`jeson`被替换了：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n\n# 发起请求\n$ curl localhost/submodule.html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>submodule</title>\n</head>\n<body>\n  <a>JESON</a>\n  <a>at</a>\n  <a>peter</a>\n  <a>jeson</a>\n</body>\n</html>\n```\n\n\n\n如果需要替换所有匹配到的，则需要添加`sub_filter_once`参数：\n\n```nginx\nlocation / {\n\troot   /usr/share/nginx/html;\n\tsub_filter '<a>jeson' '<a>JESON';\n\tsub_filter_once off;\n\tsub_filter_last_modified on;\n}\n```\n\n\n\n重新加载配置后，发现所有匹配到的都被替换了：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n\n# 发起请求\n$ curl localhost/submodule.html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>submodule</title>\n</head>\n<body>\n  <a>JESON</a>\n  <a>at</a>\n  <a>peter</a>\n  <a>JESON</a>\n</body>\n</html>\n```\n\n\n\n<br>","source":"_posts/Nginx替换响应内容.md","raw":"---\ntitle: Nginx替换响应内容\ndate: 2020-07-29 14:58:54\ntags:\n- Nginx\ncategories:\n- Nginx\n- 常用模块\ndescription: 使用--with-http_sub_module模块对响应内容进行替换\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3968007614,1554103190&fm=26&gp=0.jpg\n---\n\n\n\n`--with-http_sub_module`可以在服务端响应时进行html内容的替换，在yum安装时会默认加入，在源码安装时需要手动加入编译。\n\n\n\n------\n\n\n\n# 作用\n\n用于服务端在响应客户端http请求时进行内容替换。\n\n<br>\n\n\n\n\n\n# 配置\n\n**该模块可以配置在http、server或location下，如果配置在http下，则可以完成对多个server的替换。**\n\n\n\n格式：\n\n```nginx\nlocation / {\n\tsub_filter_last_modified on;\n\tsub_filter_once on;\n\tsub_filter <string> <replacement>;\n}\n```\n\n\n\n> `sub_filter_last_modified`用于让客户端判断服务端相应的内容是否发生变化，默认情况下，为`off`；\n>\n> `sub_filter_once`在进行html替换时，如果为`on`，则只匹配到第一个满足条件的字符串，`off`匹配所有，默认为`on`；\n\n\n\n例如：\n\n```nginx\n# 将返回的HTML中的jeson替换为JESON\nlocation / {\n\troot   /usr/share/nginx/html;\n\tsub_filter_last_modified on;\n\tsub_filter_once on;\n\tsub_filter '<a>jeson' '<a>JESON';\n}\n```\n\n\n\n<br>\n\n\n\n# 测试\n\n首先创建一个html测试文件：\n\n```bash\ncat > /usr/share/nginx/html/submodule.html << EOF\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>submodule</title>\n</head>\n<body>\n  <a>jeson</a>\n  <a>at</a>\n  <a>peter</a>\n  <a>jeson</a>\n</body>\n</html>\nEOF\n```\n\n\n\n然后在nginx配置中首先添加一个替换条件：\n\n```nginx\nlocation / {\n\troot   /usr/share/nginx/html;\n\tsub_filter_last_modified on;\n\tsub_filter '<a>jeson' '<a>JESON';\n}\n```\n\n\n\n重新加载配置后请求，发现第一个匹配到的`jeson`被替换了：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n\n# 发起请求\n$ curl localhost/submodule.html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>submodule</title>\n</head>\n<body>\n  <a>JESON</a>\n  <a>at</a>\n  <a>peter</a>\n  <a>jeson</a>\n</body>\n</html>\n```\n\n\n\n如果需要替换所有匹配到的，则需要添加`sub_filter_once`参数：\n\n```nginx\nlocation / {\n\troot   /usr/share/nginx/html;\n\tsub_filter '<a>jeson' '<a>JESON';\n\tsub_filter_once off;\n\tsub_filter_last_modified on;\n}\n```\n\n\n\n重新加载配置后，发现所有匹配到的都被替换了：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n\n# 发起请求\n$ curl localhost/submodule.html\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>submodule</title>\n</head>\n<body>\n  <a>JESON</a>\n  <a>at</a>\n  <a>peter</a>\n  <a>JESON</a>\n</body>\n</html>\n```\n\n\n\n<br>","slug":"Nginx替换响应内容","published":1,"updated":"2020-07-29T07:13:20.227Z","_id":"ckd70w2u30000d9n03sjhc1hf","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>--with-http_sub_module</code>可以在服务端响应时进行html内容的替换，在yum安装时会默认加入，在源码安装时需要手动加入编译。</p>\n<hr>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>用于服务端在响应客户端http请求时进行内容替换。</p>\n<br>\n\n\n\n\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><strong>该模块可以配置在http、server或location下，如果配置在http下，则可以完成对多个server的替换。</strong></p>\n<p>格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> &lt;string&gt; &lt;replacement&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>sub_filter_last_modified</code>用于让客户端判断服务端相应的内容是否发生变化，默认情况下，为<code>off</code>；</p>\n<p><code>sub_filter_once</code>在进行html替换时，如果为<code>on</code>，则只匹配到第一个满足条件的字符串，<code>off</code>匹配所有，默认为<code>on</code>；</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将返回的HTML中的jeson替换为JESON</span></span><br><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> <span class=\"string\">'&lt;a&gt;jeson'</span> <span class=\"string\">'&lt;a&gt;JESON'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>首先创建一个html测试文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/share/nginx/html/submodule.html &lt;&lt; EOF</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;submodule&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;a&gt;jeson&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;at&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;peter&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;jeson&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在nginx配置中首先添加一个替换条件：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> <span class=\"string\">'&lt;a&gt;jeson'</span> <span class=\"string\">'&lt;a&gt;JESON'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新加载配置后请求，发现第一个匹配到的<code>jeson</code>被替换了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">$ curl localhost/submodule.html</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;submodule&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;a&gt;JESON&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;at&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;peter&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;jeson&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果需要替换所有匹配到的，则需要添加<code>sub_filter_once</code>参数：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> <span class=\"string\">'&lt;a&gt;jeson'</span> <span class=\"string\">'&lt;a&gt;JESON'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新加载配置后，发现所有匹配到的都被替换了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">$ curl localhost/submodule.html</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;submodule&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;a&gt;JESON&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;at&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;peter&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;JESON&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>","site":{"data":{}},"excerpt":"","more":"<p><code>--with-http_sub_module</code>可以在服务端响应时进行html内容的替换，在yum安装时会默认加入，在源码安装时需要手动加入编译。</p>\n<hr>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>用于服务端在响应客户端http请求时进行内容替换。</p>\n<br>\n\n\n\n\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p><strong>该模块可以配置在http、server或location下，如果配置在http下，则可以完成对多个server的替换。</strong></p>\n<p>格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> &lt;string&gt; &lt;replacement&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>sub_filter_last_modified</code>用于让客户端判断服务端相应的内容是否发生变化，默认情况下，为<code>off</code>；</p>\n<p><code>sub_filter_once</code>在进行html替换时，如果为<code>on</code>，则只匹配到第一个满足条件的字符串，<code>off</code>匹配所有，默认为<code>on</code>；</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将返回的HTML中的jeson替换为JESON</span></span><br><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> <span class=\"string\">'&lt;a&gt;jeson'</span> <span class=\"string\">'&lt;a&gt;JESON'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>首先创建一个html测试文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /usr/share/nginx/html/submodule.html &lt;&lt; EOF</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;submodule&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;a&gt;jeson&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;at&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;peter&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;jeson&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在nginx配置中首先添加一个替换条件：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> <span class=\"string\">'&lt;a&gt;jeson'</span> <span class=\"string\">'&lt;a&gt;JESON'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新加载配置后请求，发现第一个匹配到的<code>jeson</code>被替换了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">$ curl localhost/submodule.html</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;submodule&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;a&gt;JESON&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;at&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;peter&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;jeson&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果需要替换所有匹配到的，则需要添加<code>sub_filter_once</code>参数：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter</span> <span class=\"string\">'&lt;a&gt;jeson'</span> <span class=\"string\">'&lt;a&gt;JESON'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_once</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">sub_filter_last_modified</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>重新加载配置后，发现所有匹配到的都被替换了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">$ curl localhost/submodule.html</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;submodule&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;a&gt;JESON&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;at&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;peter&lt;/a&gt;</span><br><span class=\"line\">  &lt;a&gt;JESON&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>"},{"title":"Nginx用户名密码认证","date":"2020-07-29T07:05:49.000Z","description":"nginx基于用户名密码的认证","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596016589978&di=3faa7ad2ca5d23c5bf55d775db6b2dc2&imgtype=0&src=http%3A%2F%2Fwww.nd9p.com%2Fuploads%2Fallimg%2F160529%2F2143353111_0.jpg","_content":"\n\n\n`http_auth_basic_module`是用来做用户登录认证的模块。\n\n\n\n------\n\n\n\n# 依赖工具安装\n\n该模块一般配合htpasswd命令使用，htpasswd命令用于生成用户名密码的配置文件，安装方式如下：\n\n```bash\n$ yum install -y httpd-tools\n```\n\n<br>\n\n\n\n# 生成用户名密码文件\n\n使用该命令生成一个包含用户名和密码的配置文件：\n\n![](htpass.png)\n\n> 第一次使用`-c`命令表示创建文件，直接接上用户名即可。\n\n<br>\n\n\n\n\n\n# 设置nginx配置文件\n\n修改nginx的配置文件如下：\n\n```nginx\nlocation ~ ^/admin.html {\n  root /usr/share/nginx/html;\n  index index.html index.htm;\n  auth_basic \"Auth access is need!!!\";\n  auth_basic_user_file /etc/nginx/auth_conf;\n}\n```\n\n- `auth_basic`是在验证的时候的提示信息；\n- `auth_basic_user_file`保存用户信息的文件；\n\n<br>\n\n\n\n# 存在的问题\n\n该方式存在局限性：\n\n- 依赖文件的方式存储用户信息，效率低；\n- 无法和其他系统打通用户密码，维护成本高；\n\n\n\n解决方案：\n\n- nginx+lua解决\n- nginx+ldap，利用nginx-auth-ldap模块实现用户信息打通\n\n","source":"_posts/Nginx用户名密码认证.md","raw":"---\ntitle: Nginx用户名密码认证\ndate: 2020-07-29 15:05:49\ntags: Nginx\ncategories: \n- Nginx\n- 常用模块\ndescription: nginx基于用户名密码的认证\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596016589978&di=3faa7ad2ca5d23c5bf55d775db6b2dc2&imgtype=0&src=http%3A%2F%2Fwww.nd9p.com%2Fuploads%2Fallimg%2F160529%2F2143353111_0.jpg\n---\n\n\n\n`http_auth_basic_module`是用来做用户登录认证的模块。\n\n\n\n------\n\n\n\n# 依赖工具安装\n\n该模块一般配合htpasswd命令使用，htpasswd命令用于生成用户名密码的配置文件，安装方式如下：\n\n```bash\n$ yum install -y httpd-tools\n```\n\n<br>\n\n\n\n# 生成用户名密码文件\n\n使用该命令生成一个包含用户名和密码的配置文件：\n\n![](htpass.png)\n\n> 第一次使用`-c`命令表示创建文件，直接接上用户名即可。\n\n<br>\n\n\n\n\n\n# 设置nginx配置文件\n\n修改nginx的配置文件如下：\n\n```nginx\nlocation ~ ^/admin.html {\n  root /usr/share/nginx/html;\n  index index.html index.htm;\n  auth_basic \"Auth access is need!!!\";\n  auth_basic_user_file /etc/nginx/auth_conf;\n}\n```\n\n- `auth_basic`是在验证的时候的提示信息；\n- `auth_basic_user_file`保存用户信息的文件；\n\n<br>\n\n\n\n# 存在的问题\n\n该方式存在局限性：\n\n- 依赖文件的方式存储用户信息，效率低；\n- 无法和其他系统打通用户密码，维护成本高；\n\n\n\n解决方案：\n\n- nginx+lua解决\n- nginx+ldap，利用nginx-auth-ldap模块实现用户信息打通\n\n","slug":"Nginx用户名密码认证","published":1,"updated":"2020-07-29T07:11:31.753Z","_id":"ckd714vo30000fcn04gs66t3m","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>http_auth_basic_module</code>是用来做用户登录认证的模块。</p>\n<hr>\n<h1 id=\"依赖工具安装\"><a href=\"#依赖工具安装\" class=\"headerlink\" title=\"依赖工具安装\"></a>依赖工具安装</h1><p>该模块一般配合htpasswd命令使用，htpasswd命令用于生成用户名密码的配置文件，安装方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y httpd-tools</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"生成用户名密码文件\"><a href=\"#生成用户名密码文件\" class=\"headerlink\" title=\"生成用户名密码文件\"></a>生成用户名密码文件</h1><p>使用该命令生成一个包含用户名和密码的配置文件：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"htpass.png\" alt=\"\"></p>\n<blockquote>\n<p>第一次使用<code>-c</code>命令表示创建文件，直接接上用户名即可。</p>\n</blockquote>\n<br>\n\n\n\n\n\n<h1 id=\"设置nginx配置文件\"><a href=\"#设置nginx配置文件\" class=\"headerlink\" title=\"设置nginx配置文件\"></a>设置nginx配置文件</h1><p>修改nginx的配置文件如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/admin.html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">  <span class=\"attribute\">auth_basic</span> <span class=\"string\">\"Auth access is need!!!\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">auth_basic_user_file</span> /etc/nginx/auth_conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>auth_basic</code>是在验证的时候的提示信息；</li>\n<li><code>auth_basic_user_file</code>保存用户信息的文件；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h1><p>该方式存在局限性：</p>\n<ul>\n<li>依赖文件的方式存储用户信息，效率低；</li>\n<li>无法和其他系统打通用户密码，维护成本高；</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>nginx+lua解决</li>\n<li>nginx+ldap，利用nginx-auth-ldap模块实现用户信息打通</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>http_auth_basic_module</code>是用来做用户登录认证的模块。</p>\n<hr>\n<h1 id=\"依赖工具安装\"><a href=\"#依赖工具安装\" class=\"headerlink\" title=\"依赖工具安装\"></a>依赖工具安装</h1><p>该模块一般配合htpasswd命令使用，htpasswd命令用于生成用户名密码的配置文件，安装方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y httpd-tools</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"生成用户名密码文件\"><a href=\"#生成用户名密码文件\" class=\"headerlink\" title=\"生成用户名密码文件\"></a>生成用户名密码文件</h1><p>使用该命令生成一个包含用户名和密码的配置文件：</p>\n<p><img src=\"htpass.png\" alt=\"\"></p>\n<blockquote>\n<p>第一次使用<code>-c</code>命令表示创建文件，直接接上用户名即可。</p>\n</blockquote>\n<br>\n\n\n\n\n\n<h1 id=\"设置nginx配置文件\"><a href=\"#设置nginx配置文件\" class=\"headerlink\" title=\"设置nginx配置文件\"></a>设置nginx配置文件</h1><p>修改nginx的配置文件如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/admin.html</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">root</span> /usr/share/nginx/html;</span><br><span class=\"line\">  <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">  <span class=\"attribute\">auth_basic</span> <span class=\"string\">\"Auth access is need!!!\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">auth_basic_user_file</span> /etc/nginx/auth_conf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>auth_basic</code>是在验证的时候的提示信息；</li>\n<li><code>auth_basic_user_file</code>保存用户信息的文件；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h1><p>该方式存在局限性：</p>\n<ul>\n<li>依赖文件的方式存储用户信息，效率低；</li>\n<li>无法和其他系统打通用户密码，维护成本高；</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>nginx+lua解决</li>\n<li>nginx+ldap，利用nginx-auth-ldap模块实现用户信息打通</li>\n</ul>\n"},{"title":"[k8s实践系列]基于动态jenkins-slave的CICD","date":"2020-07-29T07:25:43.000Z","description":"在k8s环境中部署jenkins并实现动态slave功能","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596017743701&di=489a3aed2ef7d89f6f665bdf4e6b9362&imgtype=0&src=http%3A%2F%2Fimg4.mukewang.com%2F5b1e0cfc0001ef7b06000338.jpg","_content":"\n\n\n**在k8s中部署jenkins服务，并实现根据流水线自动创建slave工作节点。**\n\n\n\n------\n\n\n\n# 准备工作\n\n\n\n## 新建namespace\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: kube-ops\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f namespace.yaml\n```\n\n\n\n## 创建storageclass对象\n\n这里使用nfs作为后端存储，可以参考：{% post_link k8s实践系列-使用nfs存储  %}，需要创建一个名为`xjl-storageclass`的storageclass。\n\n\n\n## 创建pvc\n\n```yaml\n# pvc.yaml\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: opspvc\n  namespace: kube-ops\nspec:\n  storageClassName: xjl-storageclass\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 20Gi\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f pvc.yaml\n```\n\n\n\n![](pvc.png)\n\n<br>\n\n\n\n# 服务部署\n\n## 创建serviceaccount并授权\n\n```yaml\n# jenkins-serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\nrules:\n  - apiGroups: [\"extensions\", \"apps\"]\n    resources: [\"deployments\"]\n    verbs: [\"create\", \"delete\", \"get\", \"list\", \"watch\", \"patch\", \"update\"]\n  - apiGroups: [\"\"]\n    resources: [\"services\"]\n    verbs: [\"create\", \"delete\", \"get\", \"list\", \"watch\", \"patch\", \"update\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods\"]\n    verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods/exec\"]\n    verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods/log\"]\n    verbs: [\"get\",\"list\",\"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"secrets\"]\n    verbs: [\"get\"]\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: jenkins2\nsubjects:\n  - kind: ServiceAccount\n    name: jenkins2\n    namespace: kube-ops\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f jenkins-serviceaccount.yaml\n```\n\n\n\n## 新建master deployment\n\n```yaml\n# jenkins-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n  labels:\n    app: jenkins2\nspec:\n  selector:\n    matchLabels:\n      app: jenkins2\n  template:\n    metadata:\n      labels:\n        app: jenkins2\n    spec:\n      terminationGracePeriodSeconds: 10\n      serviceAccount: jenkins2\n      containers:\n      - name: jenkins\n        image: jenkins/jenkins:lts\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 8080\n          name: web\n          protocol: TCP\n        - containerPort: 50000\n          name: agent\n          protocol: TCP\n        resources:\n          limits:\n            cpu: 2000m\n            memory: 2Gi\n          requests:\n            cpu: 500m\n            memory: 512Mi\n        livenessProbe:\n          httpGet:\n            path: /login\n            port: 8080\n          initialDelaySeconds: 60\n          timeoutSeconds: 5\n          failureThreshold: 12\n        readinessProbe:\n          httpGet:\n            path: /login\n            port: 8080\n          initialDelaySeconds: 60\n          timeoutSeconds: 5\n          failureThreshold: 12\n        volumeMounts:\n        - name: jenkinshome\n          subPath: jenkins2\n          mountPath: /var/jenkins_home\n        env:\n        - name: LIMITS_MEMORY\n          valueFrom:\n            resourceFieldRef:\n              resource: limits.memory\n              divisor: 1Mi\n        - name: JAVA_OPTS\n          value: -Xmx$(LIMITS_MEMORY)m -XshowSettings:vm -Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Duser.timezone=Asia/Shanghai\n      securityContext:\n        fsGroup: 1000\n      volumes:\n      - name: jenkinshome\n        persistentVolumeClaim:\n          claimName: opspvc\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f jenkins-deployment.yaml\n```\n\n\n\n## 新建service\n\n```yaml\n# jenkins-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n  labels:\n    app: jenkins2\nspec:\n  selector:\n    app: jenkins2\n  type: ClusterIP\n  ports:\n  - name: web\n    port: 8080\n    targetPort: 8080\n    protocol: TCP\n  - name: agent\n    port: 50000\n    targetPort: 50000\n    protocol: TCP\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f jenkins-service.yaml\n```\n\n\n\n<br>\n\n\n\n# 暴露服务\n\n## 新建Ingress\n\n设定jenkins的域名为：`jenkins-k8s.example.com`\n\n\n\n```yaml\n# jenkins-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: jenkins-k8s.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: jenkins2\n          servicePort: 8080\n        path: /\n```\n\n\n\n执行下面的域名完成创建：\n\n```bash\n$ kubectl create -f jenkins-ingress.yaml\n```\n\n\n\n<br>\n\n\n\n## 查看服务运行情况\n\n```bash\n$ kubectl get pod,svc,ingress,pvc -n kube-ops\n```\n\n![](status.png)\n\n\n\n<br>\n\n\n\n## nginx设置反向代理\n\n这里使用ingress-nginx作为服务入口，外部通过nginx最为ingress的代理，设置jenkins对应的nginx配置如下：\n\n```nginx\n# jenkins-k8s.conf\nupstream jenkins-k8s {\n    server 10.8.138.10:80 max_fails=3 fail_timeout=10s weight=2;\n    server 10.8.138.9:80 max_fails=3 fail_timeout=10s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name jenkins-k8s.example.com;\n    access_log /var/log/nginx/jenkins-k8s.example.com_access.log elk_json;\n    error_log /var/log/nginx/jenkins-k8s.example.com_error.log;\n    expires -1;\n\n    location / {\n        proxy_pass http://jenkins-k8s;\n        proxy_set_header Host jenkins-k8s.example.com;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_buffering          off;\n        proxy_redirect off;\n        proxy_intercept_errors on;\n        proxy_http_version 1.1;\n        proxy_connect_timeout    30;\n        proxy_read_timeout       30;\n        proxy_send_timeout       30;\n        proxy_buffer_size 64k;\n        proxy_buffers 8 64k;\n    }\n\n    location = /favicon.ico {\n        log_not_found off;\n        access_log off;\n\t\t}\n\n    location ~* /\\.(svn|git)/ {\n        return 404;\n    }\n}\n```\n\n\n\n- upstream中的两台机器是我的k8s中的ingress节点；\n- 域名`jenkins-k8s.example.com`需要和nginx节点的IP做hosdt绑定；\n\n\n\n执行下面的命令检查nginx并重载配置：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n<br>\n\n\n\n# 访问测试\n\n通过浏览器，使用域名访问jenkins，可以看到如下的页面：\n\n![](jenkins-init.png)\n\n\n\n使用如下的命令获取到token并解锁jenkins：\n\n![](jenkins-password.png)\n\n\n\n进入后根据实际情况安装插件，然后设置一个用户名和密码，就完成jenkins的部署了。\n\n![](jenkins-home.png)\n\n\n\n<br>\n\n\n\n# jenkins汉化\n\n选择 `Manage Jenkins` --> `Plugin Manager` --> `Available`，搜索插件`locale plugin`并安装。\n\n> 一般安装完成就自动切换为中文了。\n\n\n\n<br>\n\n\n\n# 动态创建slave\n\n## 什么是动态生成slave\n\nJenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。\n\n\n\n这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。\n\n![](jenkins-slave)\n\n\n\n## 优势\n\n- 服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。\n- 动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。\n- 扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。\n\n\n\n## 插件安装和设置\n\n搜索插件`kubernetes`并安装。\n\n![](kubernetes.png)\n\n\n\n选择`Manage Jenkins` —> `Configure System` —> (拖到最下方)`Add a new cloud`，选择`kubernetes`，填写kubernetes和jenkins信息：\n\n![](add-cloud.png)\n\n- `namespace`这里填写的是`kube-ops`；\n- `jenkins地址`按照k8s集群内域名的格式填写；\n- 点击测试，如果出现`success`表名连接集群成功；\n\n\n\n然后点击`pod template`，添加一个pod模板，就是`jenkins-slave`运行的模板：\n\n![](pod-template.png)\n\n> 这里的template名称和标签列表似乎只能是这个值，否则slave启动会失败。\n\n\n\n\n\n需要挂载两个主机目录：\n\n- ` /var/run/docker.sock`：该文件是用于 Pod 中的容器能够共享宿主机的 Docker（docker in docker 的方式）；\n- ` /root/.kube` ：将这个目录挂载到容器的 /home/jenkins/.kube 目录下面这是为了让我们能够在 Pod 的容器中能够使用 kubectl 工具来访问 Kubernetes 集群，方便后面在 Slave Pod 部署 Kubernetes 应用；\n\n![](volume.png)\n\n\n\n这里设置一下超时时间和serviceaccount，防止出现权限问题。\n\n![](timeout.png)\n\n设置完成后保存。\n\n\n\n**因为需要kubeconfig文件，所以从master上将/root/.kube拷贝到node节点上**\n\n\n\n## 测试\n\n新建一个任务：\n\n![](demo.png)\n\n\n\n这里的标签表达式填入上面设置的标签`haimaxy-jnlp`：\n\n![](label.png)\n\n\n\n然后在`构建`这个步骤中，选择`执行shell`，使用下面的脚本测试：\n\n```bash\necho \"测试 Kubernetes 动态生成 jenkins slave\"echo \"==============docker in docker===========\"\ndocker info\n\necho \"=============kubectl=============\"\nkubectl get pods\n```\n\n\n\n点击保存后，执行构建，因为整个构建很简单，所以速度很快，查看构建日志可以看见构建成功了：\n\n![](result.png)\n\n\n\n或者可以在master节点上执行下面的命令动态查看构建过程：\n\n```bash\nwatch kubectl get pod -n kube-ops\n```\n\n> 可以看到会创建一个slave的pod执行成功后自动删除。\n\n\n\n<br>\n\n\n\n# pipline结合动态slave\n\n## 什么是pipeline\n\n在 Jenkins 中的构建工作可以有多种方式，常用的是 Pipeline 这种方式。Pipeline就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。\n\n\n\n## Pipeline 核心概念\n\n- `Node`：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，比如动态运行的Slave；\n- `Stage`：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如：Build、Test、Deploy，Stage 是一个逻辑分组的概念，可以跨多个 Node\n- `Step`：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像，由各类 Jenkins 插件提供，比如命令：sh 'make'，就相当于我们平时 shell 终端中执行 make 命令一样。\n\n\n\n## 如何创建Pipline\n\n- Pipeline 脚本是由 Groovy 语言实现的，但是我们没必要单独去学习 Groovy，当然你会的话最好\n- Pipeline 支持两种语法：Declarative(声明式)和 Scripted Pipeline(脚本式)语法\n- Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中\n- 一般我们都推荐在 Jenkins 中直接从源代码控制(SCMD)中直接载入 Jenkinsfile Pipeline 这种方法\n\n<br>\n\n\n\n## 创建一个简单的pipline\n\n新建任务，选择`流水线`：\n\n![](pipline-demo.png)\n\n\n\n在流水线脚本中，输入下面的脚本，然后点击保存：\n\n![](pipline-script.png)\n\n```groovy\nnode('haimaxy-jnlp') {    stage('Clone') {\n      echo \"1.Clone Stage\"\n    }\n    stage('Test') {\n      echo \"2.Test Stage\"\n    }\n    stage('Build') {\n      echo \"3.Build Stage\"\n    }\n    stage('Deploy') {\n      echo \"4. Deploy Stage\"\n    }\n}\n```\n\n> 这个构建脚本，首先给node添加了上面设置的动态slave标签，然后设置了4个简单的构建流程\n\n\n\n直接点击构建，会看到构建成功：\n\n![](pipline-build.png)\n\n\n\n在k8s集群上执行下面的命令，也看到了动态创建的pod执行该构建，成功后被清除：\n\n<img src=\"onk8s.png\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n\n\n# 通过pipeline部署服务到k8s\n\n## 流程\n\n要部署 Kubernetes大概的流程如下：\n\n- `CI阶段`：编写代码 -- 测试 -- 编写 Dockerfile --构建打包 Docker 镜像 -- 推送 Docker 镜像到仓库；\n- `CD阶段`：编写 Kubernetes YAML 文件 -- 利用 kubectl 工具部署应用\n\n\n\n## jenkins添加凭证\n\n由于我们是拉取私有仓库（harbor中）的镜像，所以需要密码认证。为了避免明文密码泄露，所以使用jenkins的凭证管理密码：\n\n![](jenkins-certs.png)\n\n\n\n>  注意这里的ID，后面要用到。\n\n\n\n## 创建代码\n\n在自己的gitlab中先创建一个空的项目（没有gitlab自行搭建一个就好），这里我的是`pipline-demo`：\n\n![](gitinit.png)\n\n\n\n将项目克隆到服务器上：\n\n```bash\n$ git clone http://10.8.138.11/root/pipeline-demo.git\n```\n\n\n\n添加代码：\n\n```bash\n$ cat > app.py << EOF\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\nEOF\n```\n\n\n\n## 添加dockerfile\n\n```dockerfile\nFROM centos:7\n\nWORKDIR /root\n\nRUN yum install -y epel-release\nRUN yum install -y python-pip && /usr/bin/pip install flask\n\nADD app.py /root\n\nCMD python /root/app.py\n\nEXPOSE 5000\n```\n\n\n\n## 添加部署yaml\n\n创建一个deployment的yaml文件，用于部署服务：\n\n```bash\n$ cat > deployment.yaml << EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jenkins-demo\nspec:\n  selector:\n    matchLabels:\n      app: jenkins-demo\n  template:\n    metadata:\n      labels:\n        app: jenkins-demo\n    spec:\n      containers:\n      - image: 10.8.138.11:8181/python-demo/python-demo:<BUILD_TAG>\n        imagePullPolicy: IfNotPresent\n        name: jenkins-demo\nEOF\n```\n\n**这里的镜像tag会在Jenkinsfile中导入**\n\n\n\n##  添加Jenkinsfile\n\n```bash\n$ cat > Jenkinsfile << EOF\nnode('haimaxy-jnlp') {\n    stage('Clone') {\n      echo \"1.Clone Stage\"\n      checkout scm\n      script {\n        build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()\n      }\n    }\n\n    stage('Test') {\n      echo \"2.Test Stage\"\n    }\n\n    stage('Build') {\n      echo \"3.Build Docker Image Stage\"\n      sh \"docker build -t 10.8.138.11:8181/python-demo/python-demo:${build_tag} .\"\n    }\n\n    stage('Push') {\n      echo \"4.Push Docker Image Stage\"\n      withCredentials([usernamePassword(credentialsId: 'harbor', passwordVariable: 'harborPassword', usernameVariable: 'harborUser')]) {\n        sh \"docker login -u ${harborUser} -p ${harborPassword} 10.8.138.11:8181\"\n        sh \"docker push 10.8.138.11:8181/python-demo/python-demo:${build_tag}\"\n      }\n    }\n\n    stage('Deploy') {\n      echo \"5. Deploy Stage\"\n      def userInput = input(\n        id: 'userInput',\n        message: 'Choose a deploy environment',\n        parameters: [\n          [\n            $class: 'ChoiceParameterDefinition',\n            choices: \"Dev\\nQA\\nProd\",\n            name: 'Env'\n          ]\n        ]\n      )\n      echo \"This is a deploy step to ${userInput}\"\n      sh \"sed -i 's/<BUILD_TAG>/${build_tag}/' deployment.yaml\"\n\n      if (userInput == \"Dev\") {\n        echo \"Deploying to DEV .\"\n      } else if (userInput == \"QA\"){\n        echo \"Deploying to QA .\"\n      } else {\n        echo \"Deploying to Prod .\"\n      }\n\n      sh \"kubectl apply -f deployment.yaml\"\n    }\n}\nEOF\n```\n\n- 这个Jenkinsfile将流水线分为：获取代码、测试、构建、推送、部署这几步，其中测试暂时忽略；\n- 克隆这一步中，使用script将上传代码的commit与镜像tag进行关联，方便后续问题定位；\n- 推送镜像这一步，使用的是之前在jenkins中创建的凭证，`credentialsId`为凭证的ID，`passwordVariable`和`usernameVariable`的前缀为凭证ID；\n- 一般情况下，部署的时候都会选择现部署到测试或者开发环境，再部署到生产，所以这里通过获取用户输入来选择部署到哪个环境（当然这里只是一个示例，并没有那么多环境）；\n- 部署这一步中，通过`sed`命令将镜像tag进行替换；\n\n\n\n## 推动代码到代码库\n\n```bash\n$ git add .\n$ git commit -m 'init project'\n$ git push origin master\n```\n\n![](gitlab-push.png)\n\n\n\n## 修改流水线配置\n\n编辑之前创建的`pipeline-demo`流水线，修改流水线定义为如下：\n\n![](jenkinsfile-pipeline.png)\n\n\n\n> 根据实际情况填写代码库地址、分支以及凭据；\n\n\n\n## 运行流水线\n\n直接点击构建，会经过5个构建步骤，当运行到部署这一步的时候，需要选择一个部署环境：\n\n![](deploy-jenkins.png)\n\n> 当然这里的环境选择是个假的，选任何环境都可以，实际是需要在jenkinsfile中具体设置的\n\n\n\n最后运行成功了：\n\n![](success.png)\n\n\n\n在集群中，容器也已经启动了（默认是和jenkins在一个namespace下）\n\n<img src=\"run-demo.png\" style=\"zoom:67%;\" />\n\n\n\n","source":"_posts/k8s实践系列-部署Jenkins服务.md","raw":"---\ntitle: '[k8s实践系列]基于动态jenkins-slave的CICD'\ndate: 2020-07-29 15:25:43\ntags:\n- k8s\n- Jenkins\ncategories:\n- 实践K8s\n- Jenkins\ndescription: 在k8s环境中部署jenkins并实现动态slave功能\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596017743701&di=489a3aed2ef7d89f6f665bdf4e6b9362&imgtype=0&src=http%3A%2F%2Fimg4.mukewang.com%2F5b1e0cfc0001ef7b06000338.jpg\n---\n\n\n\n**在k8s中部署jenkins服务，并实现根据流水线自动创建slave工作节点。**\n\n\n\n------\n\n\n\n# 准备工作\n\n\n\n## 新建namespace\n\n```yaml\n# namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: kube-ops\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f namespace.yaml\n```\n\n\n\n## 创建storageclass对象\n\n这里使用nfs作为后端存储，可以参考：{% post_link k8s实践系列-使用nfs存储  %}，需要创建一个名为`xjl-storageclass`的storageclass。\n\n\n\n## 创建pvc\n\n```yaml\n# pvc.yaml\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: opspvc\n  namespace: kube-ops\nspec:\n  storageClassName: xjl-storageclass\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 20Gi\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f pvc.yaml\n```\n\n\n\n![](pvc.png)\n\n<br>\n\n\n\n# 服务部署\n\n## 创建serviceaccount并授权\n\n```yaml\n# jenkins-serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\nrules:\n  - apiGroups: [\"extensions\", \"apps\"]\n    resources: [\"deployments\"]\n    verbs: [\"create\", \"delete\", \"get\", \"list\", \"watch\", \"patch\", \"update\"]\n  - apiGroups: [\"\"]\n    resources: [\"services\"]\n    verbs: [\"create\", \"delete\", \"get\", \"list\", \"watch\", \"patch\", \"update\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods\"]\n    verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods/exec\"]\n    verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods/log\"]\n    verbs: [\"get\",\"list\",\"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"secrets\"]\n    verbs: [\"get\"]\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: jenkins2\nsubjects:\n  - kind: ServiceAccount\n    name: jenkins2\n    namespace: kube-ops\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f jenkins-serviceaccount.yaml\n```\n\n\n\n## 新建master deployment\n\n```yaml\n# jenkins-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n  labels:\n    app: jenkins2\nspec:\n  selector:\n    matchLabels:\n      app: jenkins2\n  template:\n    metadata:\n      labels:\n        app: jenkins2\n    spec:\n      terminationGracePeriodSeconds: 10\n      serviceAccount: jenkins2\n      containers:\n      - name: jenkins\n        image: jenkins/jenkins:lts\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 8080\n          name: web\n          protocol: TCP\n        - containerPort: 50000\n          name: agent\n          protocol: TCP\n        resources:\n          limits:\n            cpu: 2000m\n            memory: 2Gi\n          requests:\n            cpu: 500m\n            memory: 512Mi\n        livenessProbe:\n          httpGet:\n            path: /login\n            port: 8080\n          initialDelaySeconds: 60\n          timeoutSeconds: 5\n          failureThreshold: 12\n        readinessProbe:\n          httpGet:\n            path: /login\n            port: 8080\n          initialDelaySeconds: 60\n          timeoutSeconds: 5\n          failureThreshold: 12\n        volumeMounts:\n        - name: jenkinshome\n          subPath: jenkins2\n          mountPath: /var/jenkins_home\n        env:\n        - name: LIMITS_MEMORY\n          valueFrom:\n            resourceFieldRef:\n              resource: limits.memory\n              divisor: 1Mi\n        - name: JAVA_OPTS\n          value: -Xmx$(LIMITS_MEMORY)m -XshowSettings:vm -Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Duser.timezone=Asia/Shanghai\n      securityContext:\n        fsGroup: 1000\n      volumes:\n      - name: jenkinshome\n        persistentVolumeClaim:\n          claimName: opspvc\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f jenkins-deployment.yaml\n```\n\n\n\n## 新建service\n\n```yaml\n# jenkins-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n  labels:\n    app: jenkins2\nspec:\n  selector:\n    app: jenkins2\n  type: ClusterIP\n  ports:\n  - name: web\n    port: 8080\n    targetPort: 8080\n    protocol: TCP\n  - name: agent\n    port: 50000\n    targetPort: 50000\n    protocol: TCP\n```\n\n\n\n执行下面的命令完成创建：\n\n```bash\n$ kubectl create -f jenkins-service.yaml\n```\n\n\n\n<br>\n\n\n\n# 暴露服务\n\n## 新建Ingress\n\n设定jenkins的域名为：`jenkins-k8s.example.com`\n\n\n\n```yaml\n# jenkins-ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: jenkins2\n  namespace: kube-ops\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: jenkins-k8s.example.com\n    http:\n      paths:\n      - backend:\n          serviceName: jenkins2\n          servicePort: 8080\n        path: /\n```\n\n\n\n执行下面的域名完成创建：\n\n```bash\n$ kubectl create -f jenkins-ingress.yaml\n```\n\n\n\n<br>\n\n\n\n## 查看服务运行情况\n\n```bash\n$ kubectl get pod,svc,ingress,pvc -n kube-ops\n```\n\n![](status.png)\n\n\n\n<br>\n\n\n\n## nginx设置反向代理\n\n这里使用ingress-nginx作为服务入口，外部通过nginx最为ingress的代理，设置jenkins对应的nginx配置如下：\n\n```nginx\n# jenkins-k8s.conf\nupstream jenkins-k8s {\n    server 10.8.138.10:80 max_fails=3 fail_timeout=10s weight=2;\n    server 10.8.138.9:80 max_fails=3 fail_timeout=10s weight=2;\n}\n\nserver {\n    listen 80;\n    server_name jenkins-k8s.example.com;\n    access_log /var/log/nginx/jenkins-k8s.example.com_access.log elk_json;\n    error_log /var/log/nginx/jenkins-k8s.example.com_error.log;\n    expires -1;\n\n    location / {\n        proxy_pass http://jenkins-k8s;\n        proxy_set_header Host jenkins-k8s.example.com;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_buffering          off;\n        proxy_redirect off;\n        proxy_intercept_errors on;\n        proxy_http_version 1.1;\n        proxy_connect_timeout    30;\n        proxy_read_timeout       30;\n        proxy_send_timeout       30;\n        proxy_buffer_size 64k;\n        proxy_buffers 8 64k;\n    }\n\n    location = /favicon.ico {\n        log_not_found off;\n        access_log off;\n\t\t}\n\n    location ~* /\\.(svn|git)/ {\n        return 404;\n    }\n}\n```\n\n\n\n- upstream中的两台机器是我的k8s中的ingress节点；\n- 域名`jenkins-k8s.example.com`需要和nginx节点的IP做hosdt绑定；\n\n\n\n执行下面的命令检查nginx并重载配置：\n\n```bash\n$ nginx -t\n$ nginx -s reload \n```\n\n\n\n<br>\n\n\n\n# 访问测试\n\n通过浏览器，使用域名访问jenkins，可以看到如下的页面：\n\n![](jenkins-init.png)\n\n\n\n使用如下的命令获取到token并解锁jenkins：\n\n![](jenkins-password.png)\n\n\n\n进入后根据实际情况安装插件，然后设置一个用户名和密码，就完成jenkins的部署了。\n\n![](jenkins-home.png)\n\n\n\n<br>\n\n\n\n# jenkins汉化\n\n选择 `Manage Jenkins` --> `Plugin Manager` --> `Available`，搜索插件`locale plugin`并安装。\n\n> 一般安装完成就自动切换为中文了。\n\n\n\n<br>\n\n\n\n# 动态创建slave\n\n## 什么是动态生成slave\n\nJenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。\n\n\n\n这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。\n\n![](jenkins-slave)\n\n\n\n## 优势\n\n- 服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。\n- 动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。\n- 扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。\n\n\n\n## 插件安装和设置\n\n搜索插件`kubernetes`并安装。\n\n![](kubernetes.png)\n\n\n\n选择`Manage Jenkins` —> `Configure System` —> (拖到最下方)`Add a new cloud`，选择`kubernetes`，填写kubernetes和jenkins信息：\n\n![](add-cloud.png)\n\n- `namespace`这里填写的是`kube-ops`；\n- `jenkins地址`按照k8s集群内域名的格式填写；\n- 点击测试，如果出现`success`表名连接集群成功；\n\n\n\n然后点击`pod template`，添加一个pod模板，就是`jenkins-slave`运行的模板：\n\n![](pod-template.png)\n\n> 这里的template名称和标签列表似乎只能是这个值，否则slave启动会失败。\n\n\n\n\n\n需要挂载两个主机目录：\n\n- ` /var/run/docker.sock`：该文件是用于 Pod 中的容器能够共享宿主机的 Docker（docker in docker 的方式）；\n- ` /root/.kube` ：将这个目录挂载到容器的 /home/jenkins/.kube 目录下面这是为了让我们能够在 Pod 的容器中能够使用 kubectl 工具来访问 Kubernetes 集群，方便后面在 Slave Pod 部署 Kubernetes 应用；\n\n![](volume.png)\n\n\n\n这里设置一下超时时间和serviceaccount，防止出现权限问题。\n\n![](timeout.png)\n\n设置完成后保存。\n\n\n\n**因为需要kubeconfig文件，所以从master上将/root/.kube拷贝到node节点上**\n\n\n\n## 测试\n\n新建一个任务：\n\n![](demo.png)\n\n\n\n这里的标签表达式填入上面设置的标签`haimaxy-jnlp`：\n\n![](label.png)\n\n\n\n然后在`构建`这个步骤中，选择`执行shell`，使用下面的脚本测试：\n\n```bash\necho \"测试 Kubernetes 动态生成 jenkins slave\"echo \"==============docker in docker===========\"\ndocker info\n\necho \"=============kubectl=============\"\nkubectl get pods\n```\n\n\n\n点击保存后，执行构建，因为整个构建很简单，所以速度很快，查看构建日志可以看见构建成功了：\n\n![](result.png)\n\n\n\n或者可以在master节点上执行下面的命令动态查看构建过程：\n\n```bash\nwatch kubectl get pod -n kube-ops\n```\n\n> 可以看到会创建一个slave的pod执行成功后自动删除。\n\n\n\n<br>\n\n\n\n# pipline结合动态slave\n\n## 什么是pipeline\n\n在 Jenkins 中的构建工作可以有多种方式，常用的是 Pipeline 这种方式。Pipeline就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。\n\n\n\n## Pipeline 核心概念\n\n- `Node`：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，比如动态运行的Slave；\n- `Stage`：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如：Build、Test、Deploy，Stage 是一个逻辑分组的概念，可以跨多个 Node\n- `Step`：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像，由各类 Jenkins 插件提供，比如命令：sh 'make'，就相当于我们平时 shell 终端中执行 make 命令一样。\n\n\n\n## 如何创建Pipline\n\n- Pipeline 脚本是由 Groovy 语言实现的，但是我们没必要单独去学习 Groovy，当然你会的话最好\n- Pipeline 支持两种语法：Declarative(声明式)和 Scripted Pipeline(脚本式)语法\n- Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中\n- 一般我们都推荐在 Jenkins 中直接从源代码控制(SCMD)中直接载入 Jenkinsfile Pipeline 这种方法\n\n<br>\n\n\n\n## 创建一个简单的pipline\n\n新建任务，选择`流水线`：\n\n![](pipline-demo.png)\n\n\n\n在流水线脚本中，输入下面的脚本，然后点击保存：\n\n![](pipline-script.png)\n\n```groovy\nnode('haimaxy-jnlp') {    stage('Clone') {\n      echo \"1.Clone Stage\"\n    }\n    stage('Test') {\n      echo \"2.Test Stage\"\n    }\n    stage('Build') {\n      echo \"3.Build Stage\"\n    }\n    stage('Deploy') {\n      echo \"4. Deploy Stage\"\n    }\n}\n```\n\n> 这个构建脚本，首先给node添加了上面设置的动态slave标签，然后设置了4个简单的构建流程\n\n\n\n直接点击构建，会看到构建成功：\n\n![](pipline-build.png)\n\n\n\n在k8s集群上执行下面的命令，也看到了动态创建的pod执行该构建，成功后被清除：\n\n<img src=\"onk8s.png\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n\n\n# 通过pipeline部署服务到k8s\n\n## 流程\n\n要部署 Kubernetes大概的流程如下：\n\n- `CI阶段`：编写代码 -- 测试 -- 编写 Dockerfile --构建打包 Docker 镜像 -- 推送 Docker 镜像到仓库；\n- `CD阶段`：编写 Kubernetes YAML 文件 -- 利用 kubectl 工具部署应用\n\n\n\n## jenkins添加凭证\n\n由于我们是拉取私有仓库（harbor中）的镜像，所以需要密码认证。为了避免明文密码泄露，所以使用jenkins的凭证管理密码：\n\n![](jenkins-certs.png)\n\n\n\n>  注意这里的ID，后面要用到。\n\n\n\n## 创建代码\n\n在自己的gitlab中先创建一个空的项目（没有gitlab自行搭建一个就好），这里我的是`pipline-demo`：\n\n![](gitinit.png)\n\n\n\n将项目克隆到服务器上：\n\n```bash\n$ git clone http://10.8.138.11/root/pipeline-demo.git\n```\n\n\n\n添加代码：\n\n```bash\n$ cat > app.py << EOF\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\nEOF\n```\n\n\n\n## 添加dockerfile\n\n```dockerfile\nFROM centos:7\n\nWORKDIR /root\n\nRUN yum install -y epel-release\nRUN yum install -y python-pip && /usr/bin/pip install flask\n\nADD app.py /root\n\nCMD python /root/app.py\n\nEXPOSE 5000\n```\n\n\n\n## 添加部署yaml\n\n创建一个deployment的yaml文件，用于部署服务：\n\n```bash\n$ cat > deployment.yaml << EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jenkins-demo\nspec:\n  selector:\n    matchLabels:\n      app: jenkins-demo\n  template:\n    metadata:\n      labels:\n        app: jenkins-demo\n    spec:\n      containers:\n      - image: 10.8.138.11:8181/python-demo/python-demo:<BUILD_TAG>\n        imagePullPolicy: IfNotPresent\n        name: jenkins-demo\nEOF\n```\n\n**这里的镜像tag会在Jenkinsfile中导入**\n\n\n\n##  添加Jenkinsfile\n\n```bash\n$ cat > Jenkinsfile << EOF\nnode('haimaxy-jnlp') {\n    stage('Clone') {\n      echo \"1.Clone Stage\"\n      checkout scm\n      script {\n        build_tag = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()\n      }\n    }\n\n    stage('Test') {\n      echo \"2.Test Stage\"\n    }\n\n    stage('Build') {\n      echo \"3.Build Docker Image Stage\"\n      sh \"docker build -t 10.8.138.11:8181/python-demo/python-demo:${build_tag} .\"\n    }\n\n    stage('Push') {\n      echo \"4.Push Docker Image Stage\"\n      withCredentials([usernamePassword(credentialsId: 'harbor', passwordVariable: 'harborPassword', usernameVariable: 'harborUser')]) {\n        sh \"docker login -u ${harborUser} -p ${harborPassword} 10.8.138.11:8181\"\n        sh \"docker push 10.8.138.11:8181/python-demo/python-demo:${build_tag}\"\n      }\n    }\n\n    stage('Deploy') {\n      echo \"5. Deploy Stage\"\n      def userInput = input(\n        id: 'userInput',\n        message: 'Choose a deploy environment',\n        parameters: [\n          [\n            $class: 'ChoiceParameterDefinition',\n            choices: \"Dev\\nQA\\nProd\",\n            name: 'Env'\n          ]\n        ]\n      )\n      echo \"This is a deploy step to ${userInput}\"\n      sh \"sed -i 's/<BUILD_TAG>/${build_tag}/' deployment.yaml\"\n\n      if (userInput == \"Dev\") {\n        echo \"Deploying to DEV .\"\n      } else if (userInput == \"QA\"){\n        echo \"Deploying to QA .\"\n      } else {\n        echo \"Deploying to Prod .\"\n      }\n\n      sh \"kubectl apply -f deployment.yaml\"\n    }\n}\nEOF\n```\n\n- 这个Jenkinsfile将流水线分为：获取代码、测试、构建、推送、部署这几步，其中测试暂时忽略；\n- 克隆这一步中，使用script将上传代码的commit与镜像tag进行关联，方便后续问题定位；\n- 推送镜像这一步，使用的是之前在jenkins中创建的凭证，`credentialsId`为凭证的ID，`passwordVariable`和`usernameVariable`的前缀为凭证ID；\n- 一般情况下，部署的时候都会选择现部署到测试或者开发环境，再部署到生产，所以这里通过获取用户输入来选择部署到哪个环境（当然这里只是一个示例，并没有那么多环境）；\n- 部署这一步中，通过`sed`命令将镜像tag进行替换；\n\n\n\n## 推动代码到代码库\n\n```bash\n$ git add .\n$ git commit -m 'init project'\n$ git push origin master\n```\n\n![](gitlab-push.png)\n\n\n\n## 修改流水线配置\n\n编辑之前创建的`pipeline-demo`流水线，修改流水线定义为如下：\n\n![](jenkinsfile-pipeline.png)\n\n\n\n> 根据实际情况填写代码库地址、分支以及凭据；\n\n\n\n## 运行流水线\n\n直接点击构建，会经过5个构建步骤，当运行到部署这一步的时候，需要选择一个部署环境：\n\n![](deploy-jenkins.png)\n\n> 当然这里的环境选择是个假的，选任何环境都可以，实际是需要在jenkinsfile中具体设置的\n\n\n\n最后运行成功了：\n\n![](success.png)\n\n\n\n在集群中，容器也已经启动了（默认是和jenkins在一个namespace下）\n\n<img src=\"run-demo.png\" style=\"zoom:67%;\" />\n\n\n\n","slug":"k8s实践系列-部署Jenkins服务","published":1,"updated":"2020-07-29T08:03:31.051Z","_id":"ckd71w2oz0000mnn0d0qxae3l","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>在k8s中部署jenkins服务，并实现根据流水线自动创建slave工作节点。</strong></p>\n<hr>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"新建namespace\"><a href=\"#新建namespace\" class=\"headerlink\" title=\"新建namespace\"></a>新建namespace</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-ops</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f namespace.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建storageclass对象\"><a href=\"#创建storageclass对象\" class=\"headerlink\" title=\"创建storageclass对象\"></a>创建storageclass对象</h2><p>这里使用nfs作为后端存储，可以参考：<a href=\"/2020/07/05/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E4%BD%BF%E7%94%A8nfs%E5%AD%98%E5%82%A8/\" title=\"[k8s实践系列]使用nfs存储\">[k8s实践系列]使用nfs存储</a>，需要创建一个名为<code>xjl-storageclass</code>的storageclass。</p>\n<h2 id=\"创建pvc\"><a href=\"#创建pvc\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pvc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">opspvc</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">xjl-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f pvc.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"pvc.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"服务部署\"><a href=\"#服务部署\" class=\"headerlink\" title=\"服务部署\"></a>服务部署</h1><h2 id=\"创建serviceaccount并授权\"><a href=\"#创建serviceaccount并授权\" class=\"headerlink\" title=\"创建serviceaccount并授权\"></a>创建serviceaccount并授权</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-serviceaccount.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"extensions\",</span> <span class=\"string\">\"apps\"</span><span class=\"string\">]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"deployments\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",</span> <span class=\"string\">\"delete\"</span><span class=\"string\">,</span> <span class=\"string\">\"get\"</span><span class=\"string\">,</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"services\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",</span> <span class=\"string\">\"delete\"</span><span class=\"string\">,</span> <span class=\"string\">\"get\"</span><span class=\"string\">,</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"pods\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"pods/exec\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"pods/log\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",\"list\",\"watch\"]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"secrets\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-serviceaccount.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新建master-deployment\"><a href=\"#新建master-deployment\" class=\"headerlink\" title=\"新建master deployment\"></a>新建master deployment</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">jenkins/jenkins:lts</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">agent</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">2000m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/login</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">12</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/login</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">12</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkinshome</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/jenkins_home</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LIMITS_MEMORY</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">resourceFieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">resource:</span> <span class=\"string\">limits.memory</span></span><br><span class=\"line\">              <span class=\"attr\">divisor:</span> <span class=\"string\">1Mi</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">-Xmx$(LIMITS_MEMORY)m</span> <span class=\"string\">-XshowSettings:vm</span> <span class=\"string\">-Dhudson.slaves.NodeProvisioner.initialDelay=0</span> <span class=\"string\">-Dhudson.slaves.NodeProvisioner.MARGIN=50</span> <span class=\"string\">-Dhudson.slaves.NodeProvisioner.MARGIN0=0.85</span> <span class=\"string\">-Duser.timezone=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkinshome</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">opspvc</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新建service\"><a href=\"#新建service\" class=\"headerlink\" title=\"新建service\"></a>新建service</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">agent</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"暴露服务\"><a href=\"#暴露服务\" class=\"headerlink\" title=\"暴露服务\"></a>暴露服务</h1><h2 id=\"新建Ingress\"><a href=\"#新建Ingress\" class=\"headerlink\" title=\"新建Ingress\"></a>新建Ingress</h2><p>设定jenkins的域名为：<code>jenkins-k8s.example.com</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">\"nginx\"</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">jenkins-k8s.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的域名完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"查看服务运行情况\"><a href=\"#查看服务运行情况\" class=\"headerlink\" title=\"查看服务运行情况\"></a>查看服务运行情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc,ingress,pvc -n kube-ops</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"status.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"nginx设置反向代理\"><a href=\"#nginx设置反向代理\" class=\"headerlink\" title=\"nginx设置反向代理\"></a>nginx设置反向代理</h2><p>这里使用ingress-nginx作为服务入口，外部通过nginx最为ingress的代理，设置jenkins对应的nginx配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-k8s.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> jenkins-k8s &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.10:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">10s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">10s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> jenkins-k8s.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/jenkins-k8s.example.com_access.log elk_json;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/jenkins-k8s.example.com_error.log;</span><br><span class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://jenkins-k8s;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host jenkins-k8s.example.com;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_buffering</span>          <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_intercept_errors</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_connect_timeout</span>    <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_read_timeout</span>       <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_send_timeout</span>       <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_buffer_size</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">8</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">        <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>upstream中的两台机器是我的k8s中的ingress节点；</li>\n<li>域名<code>jenkins-k8s.example.com</code>需要和nginx节点的IP做hosdt绑定；</li>\n</ul>\n<p>执行下面的命令检查nginx并重载配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h1><p>通过浏览器，使用域名访问jenkins，可以看到如下的页面：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"jenkins-init.png\" alt=\"\"></p>\n<p>使用如下的命令获取到token并解锁jenkins：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"jenkins-password.png\" alt=\"\"></p>\n<p>进入后根据实际情况安装插件，然后设置一个用户名和密码，就完成jenkins的部署了。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"jenkins-home.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"jenkins汉化\"><a href=\"#jenkins汉化\" class=\"headerlink\" title=\"jenkins汉化\"></a>jenkins汉化</h1><p>选择 <code>Manage Jenkins</code> –&gt; <code>Plugin Manager</code> –&gt; <code>Available</code>，搜索插件<code>locale plugin</code>并安装。</p>\n<blockquote>\n<p>一般安装完成就自动切换为中文了。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"动态创建slave\"><a href=\"#动态创建slave\" class=\"headerlink\" title=\"动态创建slave\"></a>动态创建slave</h1><h2 id=\"什么是动态生成slave\"><a href=\"#什么是动态生成slave\" class=\"headerlink\" title=\"什么是动态生成slave\"></a>什么是动态生成slave</h2><p>Jenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。</p>\n<p>这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"jenkins-slave\" alt=\"\"></p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</li>\n<li>动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li>\n<li>扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。</li>\n</ul>\n<h2 id=\"插件安装和设置\"><a href=\"#插件安装和设置\" class=\"headerlink\" title=\"插件安装和设置\"></a>插件安装和设置</h2><p>搜索插件<code>kubernetes</code>并安装。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"kubernetes.png\" alt=\"\"></p>\n<p>选择<code>Manage Jenkins</code> —&gt; <code>Configure System</code> —&gt; (拖到最下方)<code>Add a new cloud</code>，选择<code>kubernetes</code>，填写kubernetes和jenkins信息：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"add-cloud.png\" alt=\"\"></p>\n<ul>\n<li><code>namespace</code>这里填写的是<code>kube-ops</code>；</li>\n<li><code>jenkins地址</code>按照k8s集群内域名的格式填写；</li>\n<li>点击测试，如果出现<code>success</code>表名连接集群成功；</li>\n</ul>\n<p>然后点击<code>pod template</code>，添加一个pod模板，就是<code>jenkins-slave</code>运行的模板：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"pod-template.png\" alt=\"\"></p>\n<blockquote>\n<p>这里的template名称和标签列表似乎只能是这个值，否则slave启动会失败。</p>\n</blockquote>\n<p>需要挂载两个主机目录：</p>\n<ul>\n<li><code>/var/run/docker.sock</code>：该文件是用于 Pod 中的容器能够共享宿主机的 Docker（docker in docker 的方式）；</li>\n<li><code>/root/.kube</code> ：将这个目录挂载到容器的 /home/jenkins/.kube 目录下面这是为了让我们能够在 Pod 的容器中能够使用 kubectl 工具来访问 Kubernetes 集群，方便后面在 Slave Pod 部署 Kubernetes 应用；</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-src=\"volume.png\" alt=\"\"></p>\n<p>这里设置一下超时时间和serviceaccount，防止出现权限问题。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"timeout.png\" alt=\"\"></p>\n<p>设置完成后保存。</p>\n<p><strong>因为需要kubeconfig文件，所以从master上将/root/.kube拷贝到node节点上</strong></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>新建一个任务：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"demo.png\" alt=\"\"></p>\n<p>这里的标签表达式填入上面设置的标签<code>haimaxy-jnlp</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"label.png\" alt=\"\"></p>\n<p>然后在<code>构建</code>这个步骤中，选择<code>执行shell</code>，使用下面的脚本测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"测试 Kubernetes 动态生成 jenkins slave\"</span><span class=\"built_in\">echo</span> <span class=\"string\">\"==============docker in docker===========\"</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"=============kubectl=============\"</span></span><br><span class=\"line\">kubectl get pods</span><br></pre></td></tr></table></figure>\n\n\n\n<p>点击保存后，执行构建，因为整个构建很简单，所以速度很快，查看构建日志可以看见构建成功了：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"result.png\" alt=\"\"></p>\n<p>或者可以在master节点上执行下面的命令动态查看构建过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch kubectl get pod -n kube-ops</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到会创建一个slave的pod执行成功后自动删除。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"pipline结合动态slave\"><a href=\"#pipline结合动态slave\" class=\"headerlink\" title=\"pipline结合动态slave\"></a>pipline结合动态slave</h1><h2 id=\"什么是pipeline\"><a href=\"#什么是pipeline\" class=\"headerlink\" title=\"什么是pipeline\"></a>什么是pipeline</h2><p>在 Jenkins 中的构建工作可以有多种方式，常用的是 Pipeline 这种方式。Pipeline就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<h2 id=\"Pipeline-核心概念\"><a href=\"#Pipeline-核心概念\" class=\"headerlink\" title=\"Pipeline 核心概念\"></a>Pipeline 核心概念</h2><ul>\n<li><code>Node</code>：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，比如动态运行的Slave；</li>\n<li><code>Stage</code>：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如：Build、Test、Deploy，Stage 是一个逻辑分组的概念，可以跨多个 Node</li>\n<li><code>Step</code>：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像，由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令一样。</li>\n</ul>\n<h2 id=\"如何创建Pipline\"><a href=\"#如何创建Pipline\" class=\"headerlink\" title=\"如何创建Pipline\"></a>如何创建Pipline</h2><ul>\n<li>Pipeline 脚本是由 Groovy 语言实现的，但是我们没必要单独去学习 Groovy，当然你会的话最好</li>\n<li>Pipeline 支持两种语法：Declarative(声明式)和 Scripted Pipeline(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中</li>\n<li>一般我们都推荐在 Jenkins 中直接从源代码控制(SCMD)中直接载入 Jenkinsfile Pipeline 这种方法</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"创建一个简单的pipline\"><a href=\"#创建一个简单的pipline\" class=\"headerlink\" title=\"创建一个简单的pipline\"></a>创建一个简单的pipline</h2><p>新建任务，选择<code>流水线</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"pipline-demo.png\" alt=\"\"></p>\n<p>在流水线脚本中，输入下面的脚本，然后点击保存：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"pipline-script.png\" alt=\"\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node(<span class=\"string\">'haimaxy-jnlp'</span>) &#123;    stage(<span class=\"string\">'Clone'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"1.Clone Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'Test'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"2.Test Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'Build'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"3.Build Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'Deploy'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"4. Deploy Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个构建脚本，首先给node添加了上面设置的动态slave标签，然后设置了4个简单的构建流程</p>\n</blockquote>\n<p>直接点击构建，会看到构建成功：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"pipline-build.png\" alt=\"\"></p>\n<p>在k8s集群上执行下面的命令，也看到了动态创建的pod执行该构建，成功后被清除：</p>\n<img src= \"/img/loading.gif\" data-src=\"onk8s.png\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"通过pipeline部署服务到k8s\"><a href=\"#通过pipeline部署服务到k8s\" class=\"headerlink\" title=\"通过pipeline部署服务到k8s\"></a>通过pipeline部署服务到k8s</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>要部署 Kubernetes大概的流程如下：</p>\n<ul>\n<li><code>CI阶段</code>：编写代码 – 测试 – 编写 Dockerfile –构建打包 Docker 镜像 – 推送 Docker 镜像到仓库；</li>\n<li><code>CD阶段</code>：编写 Kubernetes YAML 文件 – 利用 kubectl 工具部署应用</li>\n</ul>\n<h2 id=\"jenkins添加凭证\"><a href=\"#jenkins添加凭证\" class=\"headerlink\" title=\"jenkins添加凭证\"></a>jenkins添加凭证</h2><p>由于我们是拉取私有仓库（harbor中）的镜像，所以需要密码认证。为了避免明文密码泄露，所以使用jenkins的凭证管理密码：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"jenkins-certs.png\" alt=\"\"></p>\n<blockquote>\n<p> 注意这里的ID，后面要用到。</p>\n</blockquote>\n<h2 id=\"创建代码\"><a href=\"#创建代码\" class=\"headerlink\" title=\"创建代码\"></a>创建代码</h2><p>在自己的gitlab中先创建一个空的项目（没有gitlab自行搭建一个就好），这里我的是<code>pipline-demo</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"gitinit.png\" alt=\"\"></p>\n<p>将项目克隆到服务器上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> http://10.8.138.11/root/pipeline-demo.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>添加代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; app.py &lt;&lt; EOF</span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">'Hello World!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加dockerfile\"><a href=\"#添加dockerfile\" class=\"headerlink\" title=\"添加dockerfile\"></a>添加dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yum install -y epel-release</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yum install -y python-pip &amp;&amp; /usr/bin/pip install flask</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> app.py /root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> python /root/app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加部署yaml\"><a href=\"#添加部署yaml\" class=\"headerlink\" title=\"添加部署yaml\"></a>添加部署yaml</h2><p>创建一个deployment的yaml文件，用于部署服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; deployment.yaml &lt;&lt; EOF</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins-demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: jenkins-demo</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: jenkins-demo</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - image: 10.8.138.11:8181/python-demo/python-demo:&lt;BUILD_TAG&gt;</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        name: jenkins-demo</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p><strong>这里的镜像tag会在Jenkinsfile中导入</strong></p>\n<h2 id=\"添加Jenkinsfile\"><a href=\"#添加Jenkinsfile\" class=\"headerlink\" title=\"添加Jenkinsfile\"></a>添加Jenkinsfile</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; Jenkinsfile &lt;&lt; EOF</span><br><span class=\"line\">node(<span class=\"string\">'haimaxy-jnlp'</span>) &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">'Clone'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"1.Clone Stage\"</span></span><br><span class=\"line\">      checkout scm</span><br><span class=\"line\">      script &#123;</span><br><span class=\"line\">        build_tag = sh(returnStdout: <span class=\"literal\">true</span>, script: <span class=\"string\">'git rev-parse --short HEAD'</span>).trim()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Test'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"2.Test Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Build'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"3.Build Docker Image Stage\"</span></span><br><span class=\"line\">      sh <span class=\"string\">\"docker build -t 10.8.138.11:8181/python-demo/python-demo:<span class=\"variable\">$&#123;build_tag&#125;</span> .\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Push'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"4.Push Docker Image Stage\"</span></span><br><span class=\"line\">      withCredentials([usernamePassword(credentialsId: <span class=\"string\">'harbor'</span>, passwordVariable: <span class=\"string\">'harborPassword'</span>, usernameVariable: <span class=\"string\">'harborUser'</span>)]) &#123;</span><br><span class=\"line\">        sh <span class=\"string\">\"docker login -u <span class=\"variable\">$&#123;harborUser&#125;</span> -p <span class=\"variable\">$&#123;harborPassword&#125;</span> 10.8.138.11:8181\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"docker push 10.8.138.11:8181/python-demo/python-demo:<span class=\"variable\">$&#123;build_tag&#125;</span>\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Deploy'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"5. Deploy Stage\"</span></span><br><span class=\"line\">      def userInput = input(</span><br><span class=\"line\">        id: <span class=\"string\">'userInput'</span>,</span><br><span class=\"line\">        message: <span class=\"string\">'Choose a deploy environment'</span>,</span><br><span class=\"line\">        parameters: [</span><br><span class=\"line\">          [</span><br><span class=\"line\">            <span class=\"variable\">$class</span>: <span class=\"string\">'ChoiceParameterDefinition'</span>,</span><br><span class=\"line\">            choices: <span class=\"string\">\"Dev\\nQA\\nProd\"</span>,</span><br><span class=\"line\">            name: <span class=\"string\">'Env'</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"This is a deploy step to <span class=\"variable\">$&#123;userInput&#125;</span>\"</span></span><br><span class=\"line\">      sh <span class=\"string\">\"sed -i 's/&lt;BUILD_TAG&gt;/<span class=\"variable\">$&#123;build_tag&#125;</span>/' deployment.yaml\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (userInput == <span class=\"string\">\"Dev\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Deploying to DEV .\"</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (userInput == <span class=\"string\">\"QA\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Deploying to QA .\"</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Deploying to Prod .\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      sh <span class=\"string\">\"kubectl apply -f deployment.yaml\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个Jenkinsfile将流水线分为：获取代码、测试、构建、推送、部署这几步，其中测试暂时忽略；</li>\n<li>克隆这一步中，使用script将上传代码的commit与镜像tag进行关联，方便后续问题定位；</li>\n<li>推送镜像这一步，使用的是之前在jenkins中创建的凭证，<code>credentialsId</code>为凭证的ID，<code>passwordVariable</code>和<code>usernameVariable</code>的前缀为凭证ID；</li>\n<li>一般情况下，部署的时候都会选择现部署到测试或者开发环境，再部署到生产，所以这里通过获取用户输入来选择部署到哪个环境（当然这里只是一个示例，并没有那么多环境）；</li>\n<li>部署这一步中，通过<code>sed</code>命令将镜像tag进行替换；</li>\n</ul>\n<h2 id=\"推动代码到代码库\"><a href=\"#推动代码到代码库\" class=\"headerlink\" title=\"推动代码到代码库\"></a>推动代码到代码库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'init project'</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n\n<p><img src= \"/img/loading.gif\" data-src=\"gitlab-push.png\" alt=\"\"></p>\n<h2 id=\"修改流水线配置\"><a href=\"#修改流水线配置\" class=\"headerlink\" title=\"修改流水线配置\"></a>修改流水线配置</h2><p>编辑之前创建的<code>pipeline-demo</code>流水线，修改流水线定义为如下：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"jenkinsfile-pipeline.png\" alt=\"\"></p>\n<blockquote>\n<p>根据实际情况填写代码库地址、分支以及凭据；</p>\n</blockquote>\n<h2 id=\"运行流水线\"><a href=\"#运行流水线\" class=\"headerlink\" title=\"运行流水线\"></a>运行流水线</h2><p>直接点击构建，会经过5个构建步骤，当运行到部署这一步的时候，需要选择一个部署环境：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"deploy-jenkins.png\" alt=\"\"></p>\n<blockquote>\n<p>当然这里的环境选择是个假的，选任何环境都可以，实际是需要在jenkinsfile中具体设置的</p>\n</blockquote>\n<p>最后运行成功了：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"success.png\" alt=\"\"></p>\n<p>在集群中，容器也已经启动了（默认是和jenkins在一个namespace下）</p>\n<img src= \"/img/loading.gif\" data-src=\"run-demo.png\" style=\"zoom:67%;\" />\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>在k8s中部署jenkins服务，并实现根据流水线自动创建slave工作节点。</strong></p>\n<hr>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"新建namespace\"><a href=\"#新建namespace\" class=\"headerlink\" title=\"新建namespace\"></a>新建namespace</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># namespace.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kube-ops</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f namespace.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建storageclass对象\"><a href=\"#创建storageclass对象\" class=\"headerlink\" title=\"创建storageclass对象\"></a>创建storageclass对象</h2><p>这里使用nfs作为后端存储，可以参考：<a href=\"/2020/07/05/k8s%E5%AE%9E%E8%B7%B5%E7%B3%BB%E5%88%97-%E4%BD%BF%E7%94%A8nfs%E5%AD%98%E5%82%A8/\" title=\"[k8s实践系列]使用nfs存储\">[k8s实践系列]使用nfs存储</a>，需要创建一个名为<code>xjl-storageclass</code>的storageclass。</p>\n<h2 id=\"创建pvc\"><a href=\"#创建pvc\" class=\"headerlink\" title=\"创建pvc\"></a>创建pvc</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pvc.yaml</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">opspvc</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">xjl-storageclass</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">20Gi</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f pvc.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"pvc.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"服务部署\"><a href=\"#服务部署\" class=\"headerlink\" title=\"服务部署\"></a>服务部署</h1><h2 id=\"创建serviceaccount并授权\"><a href=\"#创建serviceaccount并授权\" class=\"headerlink\" title=\"创建serviceaccount并授权\"></a>创建serviceaccount并授权</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-serviceaccount.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"extensions\",</span> <span class=\"string\">\"apps\"</span><span class=\"string\">]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"deployments\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",</span> <span class=\"string\">\"delete\"</span><span class=\"string\">,</span> <span class=\"string\">\"get\"</span><span class=\"string\">,</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"services\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",</span> <span class=\"string\">\"delete\"</span><span class=\"string\">,</span> <span class=\"string\">\"get\"</span><span class=\"string\">,</span> <span class=\"string\">\"list\"</span><span class=\"string\">,</span> <span class=\"string\">\"watch\"</span><span class=\"string\">,</span> <span class=\"string\">\"patch\"</span><span class=\"string\">,</span> <span class=\"string\">\"update\"</span><span class=\"string\">]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"pods\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"pods/exec\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"pods/log\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\",\"list\",\"watch\"]</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> <span class=\"string\">[\"\"]</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span> <span class=\"string\">[\"secrets\"]</span></span><br><span class=\"line\">    <span class=\"attr\">verbs:</span> <span class=\"string\">[\"get\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">RoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">Role</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-serviceaccount.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新建master-deployment\"><a href=\"#新建master-deployment\" class=\"headerlink\" title=\"新建master deployment\"></a>新建master deployment</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-deployment.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"attr\">serviceAccount:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkins</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">jenkins/jenkins:lts</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">agent</span></span><br><span class=\"line\">          <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">2000m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">2Gi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">500m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512Mi</span></span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/login</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">12</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/login</span></span><br><span class=\"line\">            <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">5</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">12</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkinshome</span></span><br><span class=\"line\">          <span class=\"attr\">subPath:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/jenkins_home</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">LIMITS_MEMORY</span></span><br><span class=\"line\">          <span class=\"attr\">valueFrom:</span></span><br><span class=\"line\">            <span class=\"attr\">resourceFieldRef:</span></span><br><span class=\"line\">              <span class=\"attr\">resource:</span> <span class=\"string\">limits.memory</span></span><br><span class=\"line\">              <span class=\"attr\">divisor:</span> <span class=\"string\">1Mi</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTS</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">-Xmx$(LIMITS_MEMORY)m</span> <span class=\"string\">-XshowSettings:vm</span> <span class=\"string\">-Dhudson.slaves.NodeProvisioner.initialDelay=0</span> <span class=\"string\">-Dhudson.slaves.NodeProvisioner.MARGIN=50</span> <span class=\"string\">-Dhudson.slaves.NodeProvisioner.MARGIN0=0.85</span> <span class=\"string\">-Duser.timezone=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">        <span class=\"attr\">fsGroup:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jenkinshome</span></span><br><span class=\"line\">        <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">          <span class=\"attr\">claimName:</span> <span class=\"string\">opspvc</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-deployment.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"新建service\"><a href=\"#新建service\" class=\"headerlink\" title=\"新建service\"></a>新建service</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-service.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">agent</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">50000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的命令完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-service.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"暴露服务\"><a href=\"#暴露服务\" class=\"headerlink\" title=\"暴露服务\"></a>暴露服务</h1><h2 id=\"新建Ingress\"><a href=\"#新建Ingress\" class=\"headerlink\" title=\"新建Ingress\"></a>新建Ingress</h2><p>设定jenkins的域名为：<code>jenkins-k8s.example.com</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-ingress.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Ingress</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-ops</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress.class:</span> <span class=\"string\">\"nginx\"</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">host:</span> <span class=\"string\">jenkins-k8s.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">http:</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">backend:</span></span><br><span class=\"line\">          <span class=\"attr\">serviceName:</span> <span class=\"string\">jenkins2</span></span><br><span class=\"line\">          <span class=\"attr\">servicePort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行下面的域名完成创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create -f jenkins-ingress.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h2 id=\"查看服务运行情况\"><a href=\"#查看服务运行情况\" class=\"headerlink\" title=\"查看服务运行情况\"></a>查看服务运行情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pod,svc,ingress,pvc -n kube-ops</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"status.png\" alt=\"\"></p>\n<br>\n\n\n\n<h2 id=\"nginx设置反向代理\"><a href=\"#nginx设置反向代理\" class=\"headerlink\" title=\"nginx设置反向代理\"></a>nginx设置反向代理</h2><p>这里使用ingress-nginx作为服务入口，外部通过nginx最为ingress的代理，设置jenkins对应的nginx配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># jenkins-k8s.conf</span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> jenkins-k8s &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.10:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">10s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">10.8.138.9:80</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">10s</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> jenkins-k8s.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/jenkins-k8s.example.com_access.log elk_json;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/jenkins-k8s.example.com_error.log;</span><br><span class=\"line\">    <span class=\"attribute\">expires</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://jenkins-k8s;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host jenkins-k8s.example.com;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_buffering</span>          <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_intercept_errors</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_connect_timeout</span>    <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_read_timeout</span>       <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_send_timeout</span>       <span class=\"number\">30</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_buffer_size</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">8</span> <span class=\"number\">64k</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">        <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>upstream中的两台机器是我的k8s中的ingress节点；</li>\n<li>域名<code>jenkins-k8s.example.com</code>需要和nginx节点的IP做hosdt绑定；</li>\n</ul>\n<p>执行下面的命令检查nginx并重载配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nginx -t</span><br><span class=\"line\">$ nginx -s reload</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h1><p>通过浏览器，使用域名访问jenkins，可以看到如下的页面：</p>\n<p><img src=\"jenkins-init.png\" alt=\"\"></p>\n<p>使用如下的命令获取到token并解锁jenkins：</p>\n<p><img src=\"jenkins-password.png\" alt=\"\"></p>\n<p>进入后根据实际情况安装插件，然后设置一个用户名和密码，就完成jenkins的部署了。</p>\n<p><img src=\"jenkins-home.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"jenkins汉化\"><a href=\"#jenkins汉化\" class=\"headerlink\" title=\"jenkins汉化\"></a>jenkins汉化</h1><p>选择 <code>Manage Jenkins</code> –&gt; <code>Plugin Manager</code> –&gt; <code>Available</code>，搜索插件<code>locale plugin</code>并安装。</p>\n<blockquote>\n<p>一般安装完成就自动切换为中文了。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"动态创建slave\"><a href=\"#动态创建slave\" class=\"headerlink\" title=\"动态创建slave\"></a>动态创建slave</h1><h2 id=\"什么是动态生成slave\"><a href=\"#什么是动态生成slave\" class=\"headerlink\" title=\"什么是动态生成slave\"></a>什么是动态生成slave</h2><p>Jenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。</p>\n<p>这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。</p>\n<p><img src=\"jenkins-slave\" alt=\"\"></p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</li>\n<li>动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li>\n<li>扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。</li>\n</ul>\n<h2 id=\"插件安装和设置\"><a href=\"#插件安装和设置\" class=\"headerlink\" title=\"插件安装和设置\"></a>插件安装和设置</h2><p>搜索插件<code>kubernetes</code>并安装。</p>\n<p><img src=\"kubernetes.png\" alt=\"\"></p>\n<p>选择<code>Manage Jenkins</code> —&gt; <code>Configure System</code> —&gt; (拖到最下方)<code>Add a new cloud</code>，选择<code>kubernetes</code>，填写kubernetes和jenkins信息：</p>\n<p><img src=\"add-cloud.png\" alt=\"\"></p>\n<ul>\n<li><code>namespace</code>这里填写的是<code>kube-ops</code>；</li>\n<li><code>jenkins地址</code>按照k8s集群内域名的格式填写；</li>\n<li>点击测试，如果出现<code>success</code>表名连接集群成功；</li>\n</ul>\n<p>然后点击<code>pod template</code>，添加一个pod模板，就是<code>jenkins-slave</code>运行的模板：</p>\n<p><img src=\"pod-template.png\" alt=\"\"></p>\n<blockquote>\n<p>这里的template名称和标签列表似乎只能是这个值，否则slave启动会失败。</p>\n</blockquote>\n<p>需要挂载两个主机目录：</p>\n<ul>\n<li><code>/var/run/docker.sock</code>：该文件是用于 Pod 中的容器能够共享宿主机的 Docker（docker in docker 的方式）；</li>\n<li><code>/root/.kube</code> ：将这个目录挂载到容器的 /home/jenkins/.kube 目录下面这是为了让我们能够在 Pod 的容器中能够使用 kubectl 工具来访问 Kubernetes 集群，方便后面在 Slave Pod 部署 Kubernetes 应用；</li>\n</ul>\n<p><img src=\"volume.png\" alt=\"\"></p>\n<p>这里设置一下超时时间和serviceaccount，防止出现权限问题。</p>\n<p><img src=\"timeout.png\" alt=\"\"></p>\n<p>设置完成后保存。</p>\n<p><strong>因为需要kubeconfig文件，所以从master上将/root/.kube拷贝到node节点上</strong></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>新建一个任务：</p>\n<p><img src=\"demo.png\" alt=\"\"></p>\n<p>这里的标签表达式填入上面设置的标签<code>haimaxy-jnlp</code>：</p>\n<p><img src=\"label.png\" alt=\"\"></p>\n<p>然后在<code>构建</code>这个步骤中，选择<code>执行shell</code>，使用下面的脚本测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"测试 Kubernetes 动态生成 jenkins slave\"</span><span class=\"built_in\">echo</span> <span class=\"string\">\"==============docker in docker===========\"</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"=============kubectl=============\"</span></span><br><span class=\"line\">kubectl get pods</span><br></pre></td></tr></table></figure>\n\n\n\n<p>点击保存后，执行构建，因为整个构建很简单，所以速度很快，查看构建日志可以看见构建成功了：</p>\n<p><img src=\"result.png\" alt=\"\"></p>\n<p>或者可以在master节点上执行下面的命令动态查看构建过程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch kubectl get pod -n kube-ops</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到会创建一个slave的pod执行成功后自动删除。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"pipline结合动态slave\"><a href=\"#pipline结合动态slave\" class=\"headerlink\" title=\"pipline结合动态slave\"></a>pipline结合动态slave</h1><h2 id=\"什么是pipeline\"><a href=\"#什么是pipeline\" class=\"headerlink\" title=\"什么是pipeline\"></a>什么是pipeline</h2><p>在 Jenkins 中的构建工作可以有多种方式，常用的是 Pipeline 这种方式。Pipeline就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p>\n<h2 id=\"Pipeline-核心概念\"><a href=\"#Pipeline-核心概念\" class=\"headerlink\" title=\"Pipeline 核心概念\"></a>Pipeline 核心概念</h2><ul>\n<li><code>Node</code>：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，比如动态运行的Slave；</li>\n<li><code>Stage</code>：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如：Build、Test、Deploy，Stage 是一个逻辑分组的概念，可以跨多个 Node</li>\n<li><code>Step</code>：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像，由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令一样。</li>\n</ul>\n<h2 id=\"如何创建Pipline\"><a href=\"#如何创建Pipline\" class=\"headerlink\" title=\"如何创建Pipline\"></a>如何创建Pipline</h2><ul>\n<li>Pipeline 脚本是由 Groovy 语言实现的，但是我们没必要单独去学习 Groovy，当然你会的话最好</li>\n<li>Pipeline 支持两种语法：Declarative(声明式)和 Scripted Pipeline(脚本式)语法</li>\n<li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中</li>\n<li>一般我们都推荐在 Jenkins 中直接从源代码控制(SCMD)中直接载入 Jenkinsfile Pipeline 这种方法</li>\n</ul>\n<br>\n\n\n\n<h2 id=\"创建一个简单的pipline\"><a href=\"#创建一个简单的pipline\" class=\"headerlink\" title=\"创建一个简单的pipline\"></a>创建一个简单的pipline</h2><p>新建任务，选择<code>流水线</code>：</p>\n<p><img src=\"pipline-demo.png\" alt=\"\"></p>\n<p>在流水线脚本中，输入下面的脚本，然后点击保存：</p>\n<p><img src=\"pipline-script.png\" alt=\"\"></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node(<span class=\"string\">'haimaxy-jnlp'</span>) &#123;    stage(<span class=\"string\">'Clone'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"1.Clone Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'Test'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"2.Test Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'Build'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"3.Build Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">'Deploy'</span>) &#123;</span><br><span class=\"line\">      echo <span class=\"string\">\"4. Deploy Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这个构建脚本，首先给node添加了上面设置的动态slave标签，然后设置了4个简单的构建流程</p>\n</blockquote>\n<p>直接点击构建，会看到构建成功：</p>\n<p><img src=\"pipline-build.png\" alt=\"\"></p>\n<p>在k8s集群上执行下面的命令，也看到了动态创建的pod执行该构建，成功后被清除：</p>\n<img src=\"onk8s.png\" style=\"zoom:67%;\" />\n\n\n\n<br>\n\n\n\n<h1 id=\"通过pipeline部署服务到k8s\"><a href=\"#通过pipeline部署服务到k8s\" class=\"headerlink\" title=\"通过pipeline部署服务到k8s\"></a>通过pipeline部署服务到k8s</h1><h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><p>要部署 Kubernetes大概的流程如下：</p>\n<ul>\n<li><code>CI阶段</code>：编写代码 – 测试 – 编写 Dockerfile –构建打包 Docker 镜像 – 推送 Docker 镜像到仓库；</li>\n<li><code>CD阶段</code>：编写 Kubernetes YAML 文件 – 利用 kubectl 工具部署应用</li>\n</ul>\n<h2 id=\"jenkins添加凭证\"><a href=\"#jenkins添加凭证\" class=\"headerlink\" title=\"jenkins添加凭证\"></a>jenkins添加凭证</h2><p>由于我们是拉取私有仓库（harbor中）的镜像，所以需要密码认证。为了避免明文密码泄露，所以使用jenkins的凭证管理密码：</p>\n<p><img src=\"jenkins-certs.png\" alt=\"\"></p>\n<blockquote>\n<p> 注意这里的ID，后面要用到。</p>\n</blockquote>\n<h2 id=\"创建代码\"><a href=\"#创建代码\" class=\"headerlink\" title=\"创建代码\"></a>创建代码</h2><p>在自己的gitlab中先创建一个空的项目（没有gitlab自行搭建一个就好），这里我的是<code>pipline-demo</code>：</p>\n<p><img src=\"gitinit.png\" alt=\"\"></p>\n<p>将项目克隆到服务器上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> http://10.8.138.11/root/pipeline-demo.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>添加代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; app.py &lt;&lt; EOF</span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">'Hello World!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加dockerfile\"><a href=\"#添加dockerfile\" class=\"headerlink\" title=\"添加dockerfile\"></a>添加dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yum install -y epel-release</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yum install -y python-pip &amp;&amp; /usr/bin/pip install flask</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> app.py /root</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> python /root/app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加部署yaml\"><a href=\"#添加部署yaml\" class=\"headerlink\" title=\"添加部署yaml\"></a>添加部署yaml</h2><p>创建一个deployment的yaml文件，用于部署服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; deployment.yaml &lt;&lt; EOF</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: jenkins-demo</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: jenkins-demo</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: jenkins-demo</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - image: 10.8.138.11:8181/python-demo/python-demo:&lt;BUILD_TAG&gt;</span><br><span class=\"line\">        imagePullPolicy: IfNotPresent</span><br><span class=\"line\">        name: jenkins-demo</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p><strong>这里的镜像tag会在Jenkinsfile中导入</strong></p>\n<h2 id=\"添加Jenkinsfile\"><a href=\"#添加Jenkinsfile\" class=\"headerlink\" title=\"添加Jenkinsfile\"></a>添加Jenkinsfile</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; Jenkinsfile &lt;&lt; EOF</span><br><span class=\"line\">node(<span class=\"string\">'haimaxy-jnlp'</span>) &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">'Clone'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"1.Clone Stage\"</span></span><br><span class=\"line\">      checkout scm</span><br><span class=\"line\">      script &#123;</span><br><span class=\"line\">        build_tag = sh(returnStdout: <span class=\"literal\">true</span>, script: <span class=\"string\">'git rev-parse --short HEAD'</span>).trim()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Test'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"2.Test Stage\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Build'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"3.Build Docker Image Stage\"</span></span><br><span class=\"line\">      sh <span class=\"string\">\"docker build -t 10.8.138.11:8181/python-demo/python-demo:<span class=\"variable\">$&#123;build_tag&#125;</span> .\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Push'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"4.Push Docker Image Stage\"</span></span><br><span class=\"line\">      withCredentials([usernamePassword(credentialsId: <span class=\"string\">'harbor'</span>, passwordVariable: <span class=\"string\">'harborPassword'</span>, usernameVariable: <span class=\"string\">'harborUser'</span>)]) &#123;</span><br><span class=\"line\">        sh <span class=\"string\">\"docker login -u <span class=\"variable\">$&#123;harborUser&#125;</span> -p <span class=\"variable\">$&#123;harborPassword&#125;</span> 10.8.138.11:8181\"</span></span><br><span class=\"line\">        sh <span class=\"string\">\"docker push 10.8.138.11:8181/python-demo/python-demo:<span class=\"variable\">$&#123;build_tag&#125;</span>\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">'Deploy'</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"5. Deploy Stage\"</span></span><br><span class=\"line\">      def userInput = input(</span><br><span class=\"line\">        id: <span class=\"string\">'userInput'</span>,</span><br><span class=\"line\">        message: <span class=\"string\">'Choose a deploy environment'</span>,</span><br><span class=\"line\">        parameters: [</span><br><span class=\"line\">          [</span><br><span class=\"line\">            <span class=\"variable\">$class</span>: <span class=\"string\">'ChoiceParameterDefinition'</span>,</span><br><span class=\"line\">            choices: <span class=\"string\">\"Dev\\nQA\\nProd\"</span>,</span><br><span class=\"line\">            name: <span class=\"string\">'Env'</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"This is a deploy step to <span class=\"variable\">$&#123;userInput&#125;</span>\"</span></span><br><span class=\"line\">      sh <span class=\"string\">\"sed -i 's/&lt;BUILD_TAG&gt;/<span class=\"variable\">$&#123;build_tag&#125;</span>/' deployment.yaml\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (userInput == <span class=\"string\">\"Dev\"</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Deploying to DEV .\"</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (userInput == <span class=\"string\">\"QA\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Deploying to QA .\"</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Deploying to Prod .\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      sh <span class=\"string\">\"kubectl apply -f deployment.yaml\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个Jenkinsfile将流水线分为：获取代码、测试、构建、推送、部署这几步，其中测试暂时忽略；</li>\n<li>克隆这一步中，使用script将上传代码的commit与镜像tag进行关联，方便后续问题定位；</li>\n<li>推送镜像这一步，使用的是之前在jenkins中创建的凭证，<code>credentialsId</code>为凭证的ID，<code>passwordVariable</code>和<code>usernameVariable</code>的前缀为凭证ID；</li>\n<li>一般情况下，部署的时候都会选择现部署到测试或者开发环境，再部署到生产，所以这里通过获取用户输入来选择部署到哪个环境（当然这里只是一个示例，并没有那么多环境）；</li>\n<li>部署这一步中，通过<code>sed</code>命令将镜像tag进行替换；</li>\n</ul>\n<h2 id=\"推动代码到代码库\"><a href=\"#推动代码到代码库\" class=\"headerlink\" title=\"推动代码到代码库\"></a>推动代码到代码库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'init project'</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"gitlab-push.png\" alt=\"\"></p>\n<h2 id=\"修改流水线配置\"><a href=\"#修改流水线配置\" class=\"headerlink\" title=\"修改流水线配置\"></a>修改流水线配置</h2><p>编辑之前创建的<code>pipeline-demo</code>流水线，修改流水线定义为如下：</p>\n<p><img src=\"jenkinsfile-pipeline.png\" alt=\"\"></p>\n<blockquote>\n<p>根据实际情况填写代码库地址、分支以及凭据；</p>\n</blockquote>\n<h2 id=\"运行流水线\"><a href=\"#运行流水线\" class=\"headerlink\" title=\"运行流水线\"></a>运行流水线</h2><p>直接点击构建，会经过5个构建步骤，当运行到部署这一步的时候，需要选择一个部署环境：</p>\n<p><img src=\"deploy-jenkins.png\" alt=\"\"></p>\n<blockquote>\n<p>当然这里的环境选择是个假的，选任何环境都可以，实际是需要在jenkinsfile中具体设置的</p>\n</blockquote>\n<p>最后运行成功了：</p>\n<p><img src=\"success.png\" alt=\"\"></p>\n<p>在集群中，容器也已经启动了（默认是和jenkins在一个namespace下）</p>\n<img src=\"run-demo.png\" style=\"zoom:67%;\" />\n\n\n\n"},{"title":"Prometheus监控指标--kubernetes","date":"2020-07-30T06:48:28.000Z","description":"使用prometheus监控k8s的常用指标","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596101882876&di=b13bad8c07c9545ff79b1a92c694afaf&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F4be335086b589e4c398a207233f8d6a594804a8e3cf6e-n19Jwt_fw658","_content":"\n\n\n# CPU\n\n## CPU Limit合理性\n\n```\nsum(increase(container_cpu_cfs_throttled_periods_total{container_name!=\"\", }[5m])) by (container, pod, namespace)\n          /\nsum(increase(container_cpu_cfs_periods_total{}[5m])) by (container_name, pod, namespace)\n          > ( 25 / 100 )\n```\n\n\n\n用途：查出最近5分钟，超过25%的 CPU 执行周期受到限制的容器。\n\n\n\n相关指标：\n\n- `container_cpu_cfs_periods_total`：容器生命周期中度过的 cpu 周期总数\n\n- `container_cpu_cfs_throttled_periods_total`：容器生命周期中度过的受限的 cpu 周期总数\n\n\n\n## CPU过度使用\n\n```\nsum(namespace:kube_pod_container_resource_requests_cpu_cores:sum{})          /sum(kube_node_status_allocatable_cpu_cores)>(count(kube_node_status_allocatable_cpu_cores)-1) / count(kube_node_status_allocatable_cpu_cores)\n```\n\n\n\n用途：CPU 已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的 CPU 总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配。\n\n\n\n相关指标：\n\n- `kube_pod_container_resource_requests_cpu_cores`：资源 CPU 使用的 cores 数量\n\n- `kube_node_status_allocatable_cpu_cores`：节点 CPU cores 数量\n\n\n\n## CPU超分\n\n```\nsum(kube_pod_container_resource_limits_cpu_cores{job=\"kube-state-metrics\"})\n          /\n        sum(kube_node_status_allocatable_cpu_cores)\n          > 1.1\n```\n\n\n\n用途：查看 CPU 资源分配的额度是否超过进群总额度\n\n\n\n相关指标：\n\n- `kube_pod_container_resource_limits_cpu_cores`：资源分配的 CPU 资源额度\n\n- `kube_node_status_allocatable_cpu_cores`：节点 CPU 总量\n\n\n\n## 命名空间级 CPU 资源使用的比例\n\n```\nsum (kube_pod_container_resource_requests_cpu_cores{job=\"kube-state-metrics\"} ) by (namespace)/ (sum(kube_pod_container_resource_limits_cpu_cores{job=\"kube-state-metrics\"}) by (namespace)) > 0.8\n```\n\n\n\n用途：命名空间级 CPU 资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。\n\n\n\n相关指标:\n\n- `kube_pod_container_resource_requests_cpu_cores`：CPU 使用量\n\n- `kube_pod_container_resource_limits_cpu_cores`：CPU 限额最大值\n\n\n\n\n\n<br>\n\n\n\n# 内存\n\n## 内存过度使用\n\n```\nsum(namespace:kube_pod_container_resource_requests_memory_bytes:sum{})\n          /\n        sum(kube_node_status_allocatable_memory_bytes)\n          >\n        (count(kube_node_status_allocatable_memory_bytes)-1)\n          /\n        count(kube_node_status_allocatable_memory_bytes)\n```\n\n\n\n用途：内存已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的内存总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配\n\n\n\n相关指标：\n\n- `kube_pod_container_resource_requests_memory_bytes`：资源内存使用的量\n\n- `kube_node_status_allocatable_memory_bytes`：节点内存量\n\n\n\n## 内存超分\n\n```\nsum(kube_pod_container_resource_limits_memory_bytes{job=\"kube-state-metrics\"})\n          /\n        sum(kube_node_status_allocatable_memory_bytes{job=\"kube-state-metrics\"})\n          > 1.1\n```\n\n\n\n用途：查看内存资源分配的额度是否超过进群总额度\n\n\n\n相关指标:\n\n- `kube_pod_container_resource_limits_memory_bytes`：资源配额内存量\n\n- `kube_node_status_allocatable_memory_bytes`：节点内存量\n\n\n\n## 命名空间级内存资源使用的比例\n\n```\nsum (kube_pod_container_resource_requests_memory_bytes{job=\"kube-state-metrics\"} ) by (namespace)/ (sum(kube_pod_container_resource_limits_memory_bytes{job=\"kube-state-metrics\"}) by (namespace)) > 0.8\n```\n\n\n\n用途：命名空间级内存资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。\n\n\n\n相关指标:\n\n- `kube_pod_container_resource_requests_memory_bytes`：内存资源使用量\n\n- `kube_pod_container_resource_limits_memory_bytes`：内存资源最大值\n\n\n\n<br>\n\n\n\n# 存储\n\n## PVC容量监控\n\n```\nkubelet_volume_stats_available_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n          /\n        kubelet_volume_stats_capacity_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n          < 0.3\n```\n\n\n\n用途：监控pvc剩余容量是否小于30%\n\n\n\n相关指标：\n\n- `kubelet_volume_stats_available_bytes`：剩余空间\n\n- `kubelet_volume_stats_capacity_bytes`：空间总量\n\n\n\n## PVC磁盘空间耗尽预测\n\n```\n(kubelet_volume_stats_available_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n            /\n          kubelet_volume_stats_capacity_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n        ) < 0.4\n        and\n        predict_linear(kubelet_volume_stats_available_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}[6h], 4 * 24 * 3600) < 0\n```\n\n\n\n用途：通过PVC资源使用6小时变化率预测 接下来4天的磁盘使用率\n\n\n\n相关指标:\n\n- `kubelet_volume_stats_available_bytes`：剩余空间\n\n- `kubelet_volume_stats_capacity_bytes`：空间总量\n\n\n\n## PV使用状态\n\n```\nkube_persistentvolume_status_phase{phase=~\"Failed|Pending\",job=\"kube-state-metrics\"}\n```\n\n\n\n用途：PV 使用状态监控\n\n\n\n相关指标：\n\n- `kube_persistentvolume_status_phase`：PV 使用状态\n\n\n\n<br>\n\n\n\n# APIServer\n\n## APIServer请求错误率\n\n```\nsum(rate(apiserver_request_total{job=\"apiserver\",code=~\"5..\"}[5m])) by (resource,subresource,verb)\n          /\n        sum(rate(apiserver_request_total{job=\"apiserver\"}[5m])) by (resource,subresource,verb) > 0.05\n```\n\n\n\n用途：5分钟内 APIServer 请求错误率。\n\n\n\n相关指标：\n\n- `apiserver_request_total：APIServer` 请求数\n\n\n\n## APIServer状态\n\n```\nabsent(up{job=\"apiserver\"} == 1)\n```\n\n\n\n用途：监控 APIServer 服务状态，失联原因可能是服务 down 或者网络出现状况。\n\n\n\n<br>\n\n\n\n# 证书\n\n## kubelet客户端证书过期\n\n```\napiserver_client_certificate_expiration_seconds_count{job=\"apiserver\"} > 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job=\"apiserver\"}[5m]))) < 2592000\n\napiserver_client_certificate_expiration_seconds_count{job=\"apiserver\"} > 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job=\"apiserver\"}[5m]))) < 604800\n```\n\n\n\n用途：监测证书状态30天告警和7天告警。\n\n\n\n相关指标：\n\n- `apiserver_client_certificate_expiration_seconds_count`：证书有效剩余时间\n\n\n\n<br>\n\n\n\n# 节点\n\n## 节点状态\n\n```\nkube_node_status_condition{job=\"kube-state-metrics\",condition=\"Ready\",status=\"true\"} == 0\n```\n\n\n\n用途：检测节点是否为就绪状态，或者可能是 kubelet 服务down 了。\n\n\n\n相关指标：\n\n- `kube_node_status_condition`：节点状态监测\n\n\n\n## 节点状态为 Unreachable\n\n```\nkube_node_spec_unschedulable{job=\"kube-state-metrics\"} == 1\n```\n\n\n\n用途：监测状态为 Unreachable的节点。\n\n\n\n## 节点运行pod过多\n\n```\nmax(max(kubelet_running_pod_count{job=\"kubelet\", metrics_path=\"/metrics\"}) by(instance) * on(instance) group_left(node) kubelet_node_name{job=\"kubelet\", metrics_path=\"/metrics\"}) by(node) / max(kube_node_status_capacity_pods{job=\"kube-state-metrics\"} != 1) by(node) > 0.95\n```\n\n\n\n用途：监测节点上运行的 Pods 数量是否达到最大限额的95%。\n\n\n\n相关指标：\n\n- `kubelet_running_pod_count`：节点运行的 Pods 数量\n\n- `kubelet_node_name`：节点名称\n\n- `kube_node_status_capacity_pods`：节点可运行的最大 Pod 数量\n\n\n\n<br>\n\n\n\n# pod\n\n## pod重启时间\n\n```\nrate(kube_pod_container_status_restarts_total{job=\"kube-state-metrics\"}[5m]) * 60 * 3 > 0\n```\n\n\n\n用途：Pod 重启时间，重启时间超过3m告警。\n\n\n\n相关指标:\n\n- kube_pod_container_status_restarts_total：重启状态0为正常\n\n\n\n## pod状态\n\n```\nsum by (namespace, pod) (max by(namespace, pod) (kube_pod_status_phase{job=\"kube-state-metrics\", phase=~\"Pending|Unknown\"}) * on(namespace, pod) group_left(owner_kind) max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!=\"Job\"})) >0\n```\n\n\n\n用途：检测 Pod 是否就绪。\n\n\n\n相关指标：\n\n- kube_pod_status_phase：Pod 状态\n\n\n\n<br>\n\n\n\n# Deployment\n\n## Deployment部署失败\n\n```\nkube_deployment_status_observed_generation{job=\"kube-state-metrics\"}\n          !=\n        kube_deployment_metadata_generation{job=\"kube-state-metrics\"}\n```\n\n\n\n用途：Deployment 生成的资源与定义的资源不匹配。\n\n\n\n相关指标：\n\n- kube_deployment_status_observed_generation：Deployment 生成资源数\n\n- kube_deployment_metadata_generation：Deployment 定义资源数\n\n\n\n## deployment副本数\n\n```\n(\n          kube_deployment_spec_replicas{job=\"kube-state-metrics\"}\n            !=\n          kube_deployment_status_replicas_available{job=\"kube-state-metrics\"}\n        ) and (\n          changes(kube_deployment_status_replicas_updated{job=\"kube-state-metrics\"}[3m])\n            ==\n          0\n        )\n```\n\n\n\n用途：查看 Deplyment 副本是否达到预期。\n\n\n\n相关指标：\n\n- kube_deployment_spec_replicas           资源定义副本数\n\n- kube_deployment_status_replicas_available     正在运行副本数\n\n- kube_deployment_status_replicas_updated      更新的副本数\n\n\n\n<br>\n\n\n\n# statefuleset\n\n## statefulset副本数\n\n```\n(\n          kube_statefulset_status_replicas_ready{job=\"kube-state-metrics\"}\n            !=\n          kube_statefulset_status_replicas{job=\"kube-state-metrics\"}\n        ) and (\n          changes(kube_statefulset_status_replicas_updated{job=\"kube-state-metrics\"}[5m])\n            ==\n          0\n        )\n```\n\n\n\n用途：监测 StatefulSet 副本是否达到预期。\n\n\n\n相关指标：\n\n- kube_statefulset_status_replicas_ready：就绪副本数\n\n- kube_statefulset_status_replicas：当前副本数\n\n- kube_statefulset_status_replicas_updated：更新的副本数\n\n\n\n<br>\n\n\n\n# DaemonSet\n\n## daemonset就绪\n\n```\nkube_daemonset_status_number_ready{job=\"kube-state-metrics\"}\n          /\n        kube_daemonset_status_desired_number_scheduled{job=\"kube-state-metrics\"} < 1.00\n```\n\n\n\n用途：监测 DaemonSet 是否处于就绪状态。\n\n\n\n相关指标：\n\n- kube_daemonset_status_number_ready：就绪的 DaemonSet\n\n- kube_daemonset_status_desired_number_scheduled：应该调度的 DaemonSet 数量","source":"_posts/Prometheus监控指标-kubernetes.md","raw":"---\ntitle: Prometheus监控指标--kubernetes\ndate: 2020-07-30 14:48:28\ntags:\n- Prometheus\ncategories:\n- Prometheus\n- 监控指标\ndescription: 使用prometheus监控k8s的常用指标\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596101882876&di=b13bad8c07c9545ff79b1a92c694afaf&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2F4be335086b589e4c398a207233f8d6a594804a8e3cf6e-n19Jwt_fw658\n---\n\n\n\n# CPU\n\n## CPU Limit合理性\n\n```\nsum(increase(container_cpu_cfs_throttled_periods_total{container_name!=\"\", }[5m])) by (container, pod, namespace)\n          /\nsum(increase(container_cpu_cfs_periods_total{}[5m])) by (container_name, pod, namespace)\n          > ( 25 / 100 )\n```\n\n\n\n用途：查出最近5分钟，超过25%的 CPU 执行周期受到限制的容器。\n\n\n\n相关指标：\n\n- `container_cpu_cfs_periods_total`：容器生命周期中度过的 cpu 周期总数\n\n- `container_cpu_cfs_throttled_periods_total`：容器生命周期中度过的受限的 cpu 周期总数\n\n\n\n## CPU过度使用\n\n```\nsum(namespace:kube_pod_container_resource_requests_cpu_cores:sum{})          /sum(kube_node_status_allocatable_cpu_cores)>(count(kube_node_status_allocatable_cpu_cores)-1) / count(kube_node_status_allocatable_cpu_cores)\n```\n\n\n\n用途：CPU 已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的 CPU 总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配。\n\n\n\n相关指标：\n\n- `kube_pod_container_resource_requests_cpu_cores`：资源 CPU 使用的 cores 数量\n\n- `kube_node_status_allocatable_cpu_cores`：节点 CPU cores 数量\n\n\n\n## CPU超分\n\n```\nsum(kube_pod_container_resource_limits_cpu_cores{job=\"kube-state-metrics\"})\n          /\n        sum(kube_node_status_allocatable_cpu_cores)\n          > 1.1\n```\n\n\n\n用途：查看 CPU 资源分配的额度是否超过进群总额度\n\n\n\n相关指标：\n\n- `kube_pod_container_resource_limits_cpu_cores`：资源分配的 CPU 资源额度\n\n- `kube_node_status_allocatable_cpu_cores`：节点 CPU 总量\n\n\n\n## 命名空间级 CPU 资源使用的比例\n\n```\nsum (kube_pod_container_resource_requests_cpu_cores{job=\"kube-state-metrics\"} ) by (namespace)/ (sum(kube_pod_container_resource_limits_cpu_cores{job=\"kube-state-metrics\"}) by (namespace)) > 0.8\n```\n\n\n\n用途：命名空间级 CPU 资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。\n\n\n\n相关指标:\n\n- `kube_pod_container_resource_requests_cpu_cores`：CPU 使用量\n\n- `kube_pod_container_resource_limits_cpu_cores`：CPU 限额最大值\n\n\n\n\n\n<br>\n\n\n\n# 内存\n\n## 内存过度使用\n\n```\nsum(namespace:kube_pod_container_resource_requests_memory_bytes:sum{})\n          /\n        sum(kube_node_status_allocatable_memory_bytes)\n          >\n        (count(kube_node_status_allocatable_memory_bytes)-1)\n          /\n        count(kube_node_status_allocatable_memory_bytes)\n```\n\n\n\n用途：内存已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的内存总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配\n\n\n\n相关指标：\n\n- `kube_pod_container_resource_requests_memory_bytes`：资源内存使用的量\n\n- `kube_node_status_allocatable_memory_bytes`：节点内存量\n\n\n\n## 内存超分\n\n```\nsum(kube_pod_container_resource_limits_memory_bytes{job=\"kube-state-metrics\"})\n          /\n        sum(kube_node_status_allocatable_memory_bytes{job=\"kube-state-metrics\"})\n          > 1.1\n```\n\n\n\n用途：查看内存资源分配的额度是否超过进群总额度\n\n\n\n相关指标:\n\n- `kube_pod_container_resource_limits_memory_bytes`：资源配额内存量\n\n- `kube_node_status_allocatable_memory_bytes`：节点内存量\n\n\n\n## 命名空间级内存资源使用的比例\n\n```\nsum (kube_pod_container_resource_requests_memory_bytes{job=\"kube-state-metrics\"} ) by (namespace)/ (sum(kube_pod_container_resource_limits_memory_bytes{job=\"kube-state-metrics\"}) by (namespace)) > 0.8\n```\n\n\n\n用途：命名空间级内存资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。\n\n\n\n相关指标:\n\n- `kube_pod_container_resource_requests_memory_bytes`：内存资源使用量\n\n- `kube_pod_container_resource_limits_memory_bytes`：内存资源最大值\n\n\n\n<br>\n\n\n\n# 存储\n\n## PVC容量监控\n\n```\nkubelet_volume_stats_available_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n          /\n        kubelet_volume_stats_capacity_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n          < 0.3\n```\n\n\n\n用途：监控pvc剩余容量是否小于30%\n\n\n\n相关指标：\n\n- `kubelet_volume_stats_available_bytes`：剩余空间\n\n- `kubelet_volume_stats_capacity_bytes`：空间总量\n\n\n\n## PVC磁盘空间耗尽预测\n\n```\n(kubelet_volume_stats_available_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n            /\n          kubelet_volume_stats_capacity_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}\n        ) < 0.4\n        and\n        predict_linear(kubelet_volume_stats_available_bytes{job=\"kubelet\", metrics_path=\"/metrics\"}[6h], 4 * 24 * 3600) < 0\n```\n\n\n\n用途：通过PVC资源使用6小时变化率预测 接下来4天的磁盘使用率\n\n\n\n相关指标:\n\n- `kubelet_volume_stats_available_bytes`：剩余空间\n\n- `kubelet_volume_stats_capacity_bytes`：空间总量\n\n\n\n## PV使用状态\n\n```\nkube_persistentvolume_status_phase{phase=~\"Failed|Pending\",job=\"kube-state-metrics\"}\n```\n\n\n\n用途：PV 使用状态监控\n\n\n\n相关指标：\n\n- `kube_persistentvolume_status_phase`：PV 使用状态\n\n\n\n<br>\n\n\n\n# APIServer\n\n## APIServer请求错误率\n\n```\nsum(rate(apiserver_request_total{job=\"apiserver\",code=~\"5..\"}[5m])) by (resource,subresource,verb)\n          /\n        sum(rate(apiserver_request_total{job=\"apiserver\"}[5m])) by (resource,subresource,verb) > 0.05\n```\n\n\n\n用途：5分钟内 APIServer 请求错误率。\n\n\n\n相关指标：\n\n- `apiserver_request_total：APIServer` 请求数\n\n\n\n## APIServer状态\n\n```\nabsent(up{job=\"apiserver\"} == 1)\n```\n\n\n\n用途：监控 APIServer 服务状态，失联原因可能是服务 down 或者网络出现状况。\n\n\n\n<br>\n\n\n\n# 证书\n\n## kubelet客户端证书过期\n\n```\napiserver_client_certificate_expiration_seconds_count{job=\"apiserver\"} > 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job=\"apiserver\"}[5m]))) < 2592000\n\napiserver_client_certificate_expiration_seconds_count{job=\"apiserver\"} > 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket{job=\"apiserver\"}[5m]))) < 604800\n```\n\n\n\n用途：监测证书状态30天告警和7天告警。\n\n\n\n相关指标：\n\n- `apiserver_client_certificate_expiration_seconds_count`：证书有效剩余时间\n\n\n\n<br>\n\n\n\n# 节点\n\n## 节点状态\n\n```\nkube_node_status_condition{job=\"kube-state-metrics\",condition=\"Ready\",status=\"true\"} == 0\n```\n\n\n\n用途：检测节点是否为就绪状态，或者可能是 kubelet 服务down 了。\n\n\n\n相关指标：\n\n- `kube_node_status_condition`：节点状态监测\n\n\n\n## 节点状态为 Unreachable\n\n```\nkube_node_spec_unschedulable{job=\"kube-state-metrics\"} == 1\n```\n\n\n\n用途：监测状态为 Unreachable的节点。\n\n\n\n## 节点运行pod过多\n\n```\nmax(max(kubelet_running_pod_count{job=\"kubelet\", metrics_path=\"/metrics\"}) by(instance) * on(instance) group_left(node) kubelet_node_name{job=\"kubelet\", metrics_path=\"/metrics\"}) by(node) / max(kube_node_status_capacity_pods{job=\"kube-state-metrics\"} != 1) by(node) > 0.95\n```\n\n\n\n用途：监测节点上运行的 Pods 数量是否达到最大限额的95%。\n\n\n\n相关指标：\n\n- `kubelet_running_pod_count`：节点运行的 Pods 数量\n\n- `kubelet_node_name`：节点名称\n\n- `kube_node_status_capacity_pods`：节点可运行的最大 Pod 数量\n\n\n\n<br>\n\n\n\n# pod\n\n## pod重启时间\n\n```\nrate(kube_pod_container_status_restarts_total{job=\"kube-state-metrics\"}[5m]) * 60 * 3 > 0\n```\n\n\n\n用途：Pod 重启时间，重启时间超过3m告警。\n\n\n\n相关指标:\n\n- kube_pod_container_status_restarts_total：重启状态0为正常\n\n\n\n## pod状态\n\n```\nsum by (namespace, pod) (max by(namespace, pod) (kube_pod_status_phase{job=\"kube-state-metrics\", phase=~\"Pending|Unknown\"}) * on(namespace, pod) group_left(owner_kind) max by(namespace, pod, owner_kind) (kube_pod_owner{owner_kind!=\"Job\"})) >0\n```\n\n\n\n用途：检测 Pod 是否就绪。\n\n\n\n相关指标：\n\n- kube_pod_status_phase：Pod 状态\n\n\n\n<br>\n\n\n\n# Deployment\n\n## Deployment部署失败\n\n```\nkube_deployment_status_observed_generation{job=\"kube-state-metrics\"}\n          !=\n        kube_deployment_metadata_generation{job=\"kube-state-metrics\"}\n```\n\n\n\n用途：Deployment 生成的资源与定义的资源不匹配。\n\n\n\n相关指标：\n\n- kube_deployment_status_observed_generation：Deployment 生成资源数\n\n- kube_deployment_metadata_generation：Deployment 定义资源数\n\n\n\n## deployment副本数\n\n```\n(\n          kube_deployment_spec_replicas{job=\"kube-state-metrics\"}\n            !=\n          kube_deployment_status_replicas_available{job=\"kube-state-metrics\"}\n        ) and (\n          changes(kube_deployment_status_replicas_updated{job=\"kube-state-metrics\"}[3m])\n            ==\n          0\n        )\n```\n\n\n\n用途：查看 Deplyment 副本是否达到预期。\n\n\n\n相关指标：\n\n- kube_deployment_spec_replicas           资源定义副本数\n\n- kube_deployment_status_replicas_available     正在运行副本数\n\n- kube_deployment_status_replicas_updated      更新的副本数\n\n\n\n<br>\n\n\n\n# statefuleset\n\n## statefulset副本数\n\n```\n(\n          kube_statefulset_status_replicas_ready{job=\"kube-state-metrics\"}\n            !=\n          kube_statefulset_status_replicas{job=\"kube-state-metrics\"}\n        ) and (\n          changes(kube_statefulset_status_replicas_updated{job=\"kube-state-metrics\"}[5m])\n            ==\n          0\n        )\n```\n\n\n\n用途：监测 StatefulSet 副本是否达到预期。\n\n\n\n相关指标：\n\n- kube_statefulset_status_replicas_ready：就绪副本数\n\n- kube_statefulset_status_replicas：当前副本数\n\n- kube_statefulset_status_replicas_updated：更新的副本数\n\n\n\n<br>\n\n\n\n# DaemonSet\n\n## daemonset就绪\n\n```\nkube_daemonset_status_number_ready{job=\"kube-state-metrics\"}\n          /\n        kube_daemonset_status_desired_number_scheduled{job=\"kube-state-metrics\"} < 1.00\n```\n\n\n\n用途：监测 DaemonSet 是否处于就绪状态。\n\n\n\n相关指标：\n\n- kube_daemonset_status_number_ready：就绪的 DaemonSet\n\n- kube_daemonset_status_desired_number_scheduled：应该调度的 DaemonSet 数量","slug":"Prometheus监控指标-kubernetes","published":1,"updated":"2020-07-30T07:00:11.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8g7yjj000018n024owbh8t","content":"<h1 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h1><h2 id=\"CPU-Limit合理性\"><a href=\"#CPU-Limit合理性\" class=\"headerlink\" title=\"CPU Limit合理性\"></a>CPU Limit合理性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(container_cpu_cfs_throttled_periods_total&#123;container_name!&#x3D;&quot;&quot;, &#125;[5m])) by (container, pod, namespace)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">sum(increase(container_cpu_cfs_periods_total&#123;&#125;[5m])) by (container_name, pod, namespace)</span><br><span class=\"line\">          &gt; ( 25 &#x2F; 100 )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查出最近5分钟，超过25%的 CPU 执行周期受到限制的容器。</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>container_cpu_cfs_periods_total</code>：容器生命周期中度过的 cpu 周期总数</p>\n</li>\n<li><p><code>container_cpu_cfs_throttled_periods_total</code>：容器生命周期中度过的受限的 cpu 周期总数</p>\n</li>\n</ul>\n<h2 id=\"CPU过度使用\"><a href=\"#CPU过度使用\" class=\"headerlink\" title=\"CPU过度使用\"></a>CPU过度使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(namespace:kube_pod_container_resource_requests_cpu_cores:sum&#123;&#125;)          &#x2F;sum(kube_node_status_allocatable_cpu_cores)&gt;(count(kube_node_status_allocatable_cpu_cores)-1) &#x2F; count(kube_node_status_allocatable_cpu_cores)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：CPU 已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的 CPU 总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配。</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_cpu_cores</code>：资源 CPU 使用的 cores 数量</p>\n</li>\n<li><p><code>kube_node_status_allocatable_cpu_cores</code>：节点 CPU cores 数量</p>\n</li>\n</ul>\n<h2 id=\"CPU超分\"><a href=\"#CPU超分\" class=\"headerlink\" title=\"CPU超分\"></a>CPU超分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(kube_pod_container_resource_limits_cpu_cores&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(kube_node_status_allocatable_cpu_cores)</span><br><span class=\"line\">          &gt; 1.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查看 CPU 资源分配的额度是否超过进群总额度</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kube_pod_container_resource_limits_cpu_cores</code>：资源分配的 CPU 资源额度</p>\n</li>\n<li><p><code>kube_node_status_allocatable_cpu_cores</code>：节点 CPU 总量</p>\n</li>\n</ul>\n<h2 id=\"命名空间级-CPU-资源使用的比例\"><a href=\"#命名空间级-CPU-资源使用的比例\" class=\"headerlink\" title=\"命名空间级 CPU 资源使用的比例\"></a>命名空间级 CPU 资源使用的比例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum (kube_pod_container_resource_requests_cpu_cores&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; ) by (namespace)&#x2F; (sum(kube_pod_container_resource_limits_cpu_cores&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;) by (namespace)) &gt; 0.8</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：命名空间级 CPU 资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_cpu_cores</code>：CPU 使用量</p>\n</li>\n<li><p><code>kube_pod_container_resource_limits_cpu_cores</code>：CPU 限额最大值</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h1><h2 id=\"内存过度使用\"><a href=\"#内存过度使用\" class=\"headerlink\" title=\"内存过度使用\"></a>内存过度使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(namespace:kube_pod_container_resource_requests_memory_bytes:sum&#123;&#125;)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(kube_node_status_allocatable_memory_bytes)</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">        (count(kube_node_status_allocatable_memory_bytes)-1)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        count(kube_node_status_allocatable_memory_bytes)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：内存已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的内存总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_memory_bytes</code>：资源内存使用的量</p>\n</li>\n<li><p><code>kube_node_status_allocatable_memory_bytes</code>：节点内存量</p>\n</li>\n</ul>\n<h2 id=\"内存超分\"><a href=\"#内存超分\" class=\"headerlink\" title=\"内存超分\"></a>内存超分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(kube_pod_container_resource_limits_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(kube_node_status_allocatable_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;)</span><br><span class=\"line\">          &gt; 1.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查看内存资源分配的额度是否超过进群总额度</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kube_pod_container_resource_limits_memory_bytes</code>：资源配额内存量</p>\n</li>\n<li><p><code>kube_node_status_allocatable_memory_bytes</code>：节点内存量</p>\n</li>\n</ul>\n<h2 id=\"命名空间级内存资源使用的比例\"><a href=\"#命名空间级内存资源使用的比例\" class=\"headerlink\" title=\"命名空间级内存资源使用的比例\"></a>命名空间级内存资源使用的比例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum (kube_pod_container_resource_requests_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; ) by (namespace)&#x2F; (sum(kube_pod_container_resource_limits_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;) by (namespace)) &gt; 0.8</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：命名空间级内存资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_memory_bytes</code>：内存资源使用量</p>\n</li>\n<li><p><code>kube_pod_container_resource_limits_memory_bytes</code>：内存资源最大值</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><h2 id=\"PVC容量监控\"><a href=\"#PVC容量监控\" class=\"headerlink\" title=\"PVC容量监控\"></a>PVC容量监控</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubelet_volume_stats_available_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        kubelet_volume_stats_capacity_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">          &lt; 0.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监控pvc剩余容量是否小于30%</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kubelet_volume_stats_available_bytes</code>：剩余空间</p>\n</li>\n<li><p><code>kubelet_volume_stats_capacity_bytes</code>：空间总量</p>\n</li>\n</ul>\n<h2 id=\"PVC磁盘空间耗尽预测\"><a href=\"#PVC磁盘空间耗尽预测\" class=\"headerlink\" title=\"PVC磁盘空间耗尽预测\"></a>PVC磁盘空间耗尽预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(kubelet_volume_stats_available_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">            &#x2F;</span><br><span class=\"line\">          kubelet_volume_stats_capacity_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">        ) &lt; 0.4</span><br><span class=\"line\">        and</span><br><span class=\"line\">        predict_linear(kubelet_volume_stats_available_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;[6h], 4 * 24 * 3600) &lt; 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：通过PVC资源使用6小时变化率预测 接下来4天的磁盘使用率</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kubelet_volume_stats_available_bytes</code>：剩余空间</p>\n</li>\n<li><p><code>kubelet_volume_stats_capacity_bytes</code>：空间总量</p>\n</li>\n</ul>\n<h2 id=\"PV使用状态\"><a href=\"#PV使用状态\" class=\"headerlink\" title=\"PV使用状态\"></a>PV使用状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_persistentvolume_status_phase&#123;phase&#x3D;~&quot;Failed|Pending&quot;,job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：PV 使用状态监控</p>\n<p>相关指标：</p>\n<ul>\n<li><code>kube_persistentvolume_status_phase</code>：PV 使用状态</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer\"></a>APIServer</h1><h2 id=\"APIServer请求错误率\"><a href=\"#APIServer请求错误率\" class=\"headerlink\" title=\"APIServer请求错误率\"></a>APIServer请求错误率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(rate(apiserver_request_total&#123;job&#x3D;&quot;apiserver&quot;,code&#x3D;~&quot;5..&quot;&#125;[5m])) by (resource,subresource,verb)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(rate(apiserver_request_total&#123;job&#x3D;&quot;apiserver&quot;&#125;[5m])) by (resource,subresource,verb) &gt; 0.05</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：5分钟内 APIServer 请求错误率。</p>\n<p>相关指标：</p>\n<ul>\n<li><code>apiserver_request_total：APIServer</code> 请求数</li>\n</ul>\n<h2 id=\"APIServer状态\"><a href=\"#APIServer状态\" class=\"headerlink\" title=\"APIServer状态\"></a>APIServer状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">absent(up&#123;job&#x3D;&quot;apiserver&quot;&#125; &#x3D;&#x3D; 1)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监控 APIServer 服务状态，失联原因可能是服务 down 或者网络出现状况。</p>\n<br>\n\n\n\n<h1 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h1><h2 id=\"kubelet客户端证书过期\"><a href=\"#kubelet客户端证书过期\" class=\"headerlink\" title=\"kubelet客户端证书过期\"></a>kubelet客户端证书过期</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiserver_client_certificate_expiration_seconds_count&#123;job&#x3D;&quot;apiserver&quot;&#125; &gt; 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket&#123;job&#x3D;&quot;apiserver&quot;&#125;[5m]))) &lt; 2592000</span><br><span class=\"line\"></span><br><span class=\"line\">apiserver_client_certificate_expiration_seconds_count&#123;job&#x3D;&quot;apiserver&quot;&#125; &gt; 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket&#123;job&#x3D;&quot;apiserver&quot;&#125;[5m]))) &lt; 604800</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测证书状态30天告警和7天告警。</p>\n<p>相关指标：</p>\n<ul>\n<li><code>apiserver_client_certificate_expiration_seconds_count</code>：证书有效剩余时间</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h1><h2 id=\"节点状态\"><a href=\"#节点状态\" class=\"headerlink\" title=\"节点状态\"></a>节点状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_node_status_condition&#123;job&#x3D;&quot;kube-state-metrics&quot;,condition&#x3D;&quot;Ready&quot;,status&#x3D;&quot;true&quot;&#125; &#x3D;&#x3D; 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检测节点是否为就绪状态，或者可能是 kubelet 服务down 了。</p>\n<p>相关指标：</p>\n<ul>\n<li><code>kube_node_status_condition</code>：节点状态监测</li>\n</ul>\n<h2 id=\"节点状态为-Unreachable\"><a href=\"#节点状态为-Unreachable\" class=\"headerlink\" title=\"节点状态为 Unreachable\"></a>节点状态为 Unreachable</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_node_spec_unschedulable&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; &#x3D;&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测状态为 Unreachable的节点。</p>\n<h2 id=\"节点运行pod过多\"><a href=\"#节点运行pod过多\" class=\"headerlink\" title=\"节点运行pod过多\"></a>节点运行pod过多</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(max(kubelet_running_pod_count&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;) by(instance) * on(instance) group_left(node) kubelet_node_name&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;) by(node) &#x2F; max(kube_node_status_capacity_pods&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; !&#x3D; 1) by(node) &gt; 0.95</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测节点上运行的 Pods 数量是否达到最大限额的95%。</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kubelet_running_pod_count</code>：节点运行的 Pods 数量</p>\n</li>\n<li><p><code>kubelet_node_name</code>：节点名称</p>\n</li>\n<li><p><code>kube_node_status_capacity_pods</code>：节点可运行的最大 Pod 数量</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"pod\"><a href=\"#pod\" class=\"headerlink\" title=\"pod\"></a>pod</h1><h2 id=\"pod重启时间\"><a href=\"#pod重启时间\" class=\"headerlink\" title=\"pod重启时间\"></a>pod重启时间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rate(kube_pod_container_status_restarts_total&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;[5m]) * 60 * 3 &gt; 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：Pod 重启时间，重启时间超过3m告警。</p>\n<p>相关指标:</p>\n<ul>\n<li>kube_pod_container_status_restarts_total：重启状态0为正常</li>\n</ul>\n<h2 id=\"pod状态\"><a href=\"#pod状态\" class=\"headerlink\" title=\"pod状态\"></a>pod状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum by (namespace, pod) (max by(namespace, pod) (kube_pod_status_phase&#123;job&#x3D;&quot;kube-state-metrics&quot;, phase&#x3D;~&quot;Pending|Unknown&quot;&#125;) * on(namespace, pod) group_left(owner_kind) max by(namespace, pod, owner_kind) (kube_pod_owner&#123;owner_kind!&#x3D;&quot;Job&quot;&#125;)) &gt;0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检测 Pod 是否就绪。</p>\n<p>相关指标：</p>\n<ul>\n<li>kube_pod_status_phase：Pod 状态</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h1><h2 id=\"Deployment部署失败\"><a href=\"#Deployment部署失败\" class=\"headerlink\" title=\"Deployment部署失败\"></a>Deployment部署失败</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_deployment_status_observed_generation&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">          !&#x3D;</span><br><span class=\"line\">        kube_deployment_metadata_generation&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：Deployment 生成的资源与定义的资源不匹配。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_deployment_status_observed_generation：Deployment 生成资源数</p>\n</li>\n<li><p>kube_deployment_metadata_generation：Deployment 定义资源数</p>\n</li>\n</ul>\n<h2 id=\"deployment副本数\"><a href=\"#deployment副本数\" class=\"headerlink\" title=\"deployment副本数\"></a>deployment副本数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">          kube_deployment_spec_replicas&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">            !&#x3D;</span><br><span class=\"line\">          kube_deployment_status_replicas_available&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">        ) and (</span><br><span class=\"line\">          changes(kube_deployment_status_replicas_updated&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;[3m])</span><br><span class=\"line\">            &#x3D;&#x3D;</span><br><span class=\"line\">          0</span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查看 Deplyment 副本是否达到预期。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_deployment_spec_replicas           资源定义副本数</p>\n</li>\n<li><p>kube_deployment_status_replicas_available     正在运行副本数</p>\n</li>\n<li><p>kube_deployment_status_replicas_updated      更新的副本数</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"statefuleset\"><a href=\"#statefuleset\" class=\"headerlink\" title=\"statefuleset\"></a>statefuleset</h1><h2 id=\"statefulset副本数\"><a href=\"#statefulset副本数\" class=\"headerlink\" title=\"statefulset副本数\"></a>statefulset副本数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">          kube_statefulset_status_replicas_ready&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">            !&#x3D;</span><br><span class=\"line\">          kube_statefulset_status_replicas&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">        ) and (</span><br><span class=\"line\">          changes(kube_statefulset_status_replicas_updated&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;[5m])</span><br><span class=\"line\">            &#x3D;&#x3D;</span><br><span class=\"line\">          0</span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测 StatefulSet 副本是否达到预期。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_statefulset_status_replicas_ready：就绪副本数</p>\n</li>\n<li><p>kube_statefulset_status_replicas：当前副本数</p>\n</li>\n<li><p>kube_statefulset_status_replicas_updated：更新的副本数</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"DaemonSet\"><a href=\"#DaemonSet\" class=\"headerlink\" title=\"DaemonSet\"></a>DaemonSet</h1><h2 id=\"daemonset就绪\"><a href=\"#daemonset就绪\" class=\"headerlink\" title=\"daemonset就绪\"></a>daemonset就绪</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_daemonset_status_number_ready&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        kube_daemonset_status_desired_number_scheduled&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; &lt; 1.00</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测 DaemonSet 是否处于就绪状态。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_daemonset_status_number_ready：就绪的 DaemonSet</p>\n</li>\n<li><p>kube_daemonset_status_desired_number_scheduled：应该调度的 DaemonSet 数量</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h1><h2 id=\"CPU-Limit合理性\"><a href=\"#CPU-Limit合理性\" class=\"headerlink\" title=\"CPU Limit合理性\"></a>CPU Limit合理性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(container_cpu_cfs_throttled_periods_total&#123;container_name!&#x3D;&quot;&quot;, &#125;[5m])) by (container, pod, namespace)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">sum(increase(container_cpu_cfs_periods_total&#123;&#125;[5m])) by (container_name, pod, namespace)</span><br><span class=\"line\">          &gt; ( 25 &#x2F; 100 )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查出最近5分钟，超过25%的 CPU 执行周期受到限制的容器。</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>container_cpu_cfs_periods_total</code>：容器生命周期中度过的 cpu 周期总数</p>\n</li>\n<li><p><code>container_cpu_cfs_throttled_periods_total</code>：容器生命周期中度过的受限的 cpu 周期总数</p>\n</li>\n</ul>\n<h2 id=\"CPU过度使用\"><a href=\"#CPU过度使用\" class=\"headerlink\" title=\"CPU过度使用\"></a>CPU过度使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(namespace:kube_pod_container_resource_requests_cpu_cores:sum&#123;&#125;)          &#x2F;sum(kube_node_status_allocatable_cpu_cores)&gt;(count(kube_node_status_allocatable_cpu_cores)-1) &#x2F; count(kube_node_status_allocatable_cpu_cores)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：CPU 已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的 CPU 总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配。</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_cpu_cores</code>：资源 CPU 使用的 cores 数量</p>\n</li>\n<li><p><code>kube_node_status_allocatable_cpu_cores</code>：节点 CPU cores 数量</p>\n</li>\n</ul>\n<h2 id=\"CPU超分\"><a href=\"#CPU超分\" class=\"headerlink\" title=\"CPU超分\"></a>CPU超分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(kube_pod_container_resource_limits_cpu_cores&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(kube_node_status_allocatable_cpu_cores)</span><br><span class=\"line\">          &gt; 1.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查看 CPU 资源分配的额度是否超过进群总额度</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kube_pod_container_resource_limits_cpu_cores</code>：资源分配的 CPU 资源额度</p>\n</li>\n<li><p><code>kube_node_status_allocatable_cpu_cores</code>：节点 CPU 总量</p>\n</li>\n</ul>\n<h2 id=\"命名空间级-CPU-资源使用的比例\"><a href=\"#命名空间级-CPU-资源使用的比例\" class=\"headerlink\" title=\"命名空间级 CPU 资源使用的比例\"></a>命名空间级 CPU 资源使用的比例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum (kube_pod_container_resource_requests_cpu_cores&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; ) by (namespace)&#x2F; (sum(kube_pod_container_resource_limits_cpu_cores&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;) by (namespace)) &gt; 0.8</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：命名空间级 CPU 资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_cpu_cores</code>：CPU 使用量</p>\n</li>\n<li><p><code>kube_pod_container_resource_limits_cpu_cores</code>：CPU 限额最大值</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h1><h2 id=\"内存过度使用\"><a href=\"#内存过度使用\" class=\"headerlink\" title=\"内存过度使用\"></a>内存过度使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(namespace:kube_pod_container_resource_requests_memory_bytes:sum&#123;&#125;)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(kube_node_status_allocatable_memory_bytes)</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">        (count(kube_node_status_allocatable_memory_bytes)-1)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        count(kube_node_status_allocatable_memory_bytes)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：内存已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的内存总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_memory_bytes</code>：资源内存使用的量</p>\n</li>\n<li><p><code>kube_node_status_allocatable_memory_bytes</code>：节点内存量</p>\n</li>\n</ul>\n<h2 id=\"内存超分\"><a href=\"#内存超分\" class=\"headerlink\" title=\"内存超分\"></a>内存超分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(kube_pod_container_resource_limits_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(kube_node_status_allocatable_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;)</span><br><span class=\"line\">          &gt; 1.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查看内存资源分配的额度是否超过进群总额度</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kube_pod_container_resource_limits_memory_bytes</code>：资源配额内存量</p>\n</li>\n<li><p><code>kube_node_status_allocatable_memory_bytes</code>：节点内存量</p>\n</li>\n</ul>\n<h2 id=\"命名空间级内存资源使用的比例\"><a href=\"#命名空间级内存资源使用的比例\" class=\"headerlink\" title=\"命名空间级内存资源使用的比例\"></a>命名空间级内存资源使用的比例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum (kube_pod_container_resource_requests_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; ) by (namespace)&#x2F; (sum(kube_pod_container_resource_limits_memory_bytes&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;) by (namespace)) &gt; 0.8</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：命名空间级内存资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kube_pod_container_resource_requests_memory_bytes</code>：内存资源使用量</p>\n</li>\n<li><p><code>kube_pod_container_resource_limits_memory_bytes</code>：内存资源最大值</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h1><h2 id=\"PVC容量监控\"><a href=\"#PVC容量监控\" class=\"headerlink\" title=\"PVC容量监控\"></a>PVC容量监控</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubelet_volume_stats_available_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        kubelet_volume_stats_capacity_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">          &lt; 0.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监控pvc剩余容量是否小于30%</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kubelet_volume_stats_available_bytes</code>：剩余空间</p>\n</li>\n<li><p><code>kubelet_volume_stats_capacity_bytes</code>：空间总量</p>\n</li>\n</ul>\n<h2 id=\"PVC磁盘空间耗尽预测\"><a href=\"#PVC磁盘空间耗尽预测\" class=\"headerlink\" title=\"PVC磁盘空间耗尽预测\"></a>PVC磁盘空间耗尽预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(kubelet_volume_stats_available_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">            &#x2F;</span><br><span class=\"line\">          kubelet_volume_stats_capacity_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;</span><br><span class=\"line\">        ) &lt; 0.4</span><br><span class=\"line\">        and</span><br><span class=\"line\">        predict_linear(kubelet_volume_stats_available_bytes&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;[6h], 4 * 24 * 3600) &lt; 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：通过PVC资源使用6小时变化率预测 接下来4天的磁盘使用率</p>\n<p>相关指标:</p>\n<ul>\n<li><p><code>kubelet_volume_stats_available_bytes</code>：剩余空间</p>\n</li>\n<li><p><code>kubelet_volume_stats_capacity_bytes</code>：空间总量</p>\n</li>\n</ul>\n<h2 id=\"PV使用状态\"><a href=\"#PV使用状态\" class=\"headerlink\" title=\"PV使用状态\"></a>PV使用状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_persistentvolume_status_phase&#123;phase&#x3D;~&quot;Failed|Pending&quot;,job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：PV 使用状态监控</p>\n<p>相关指标：</p>\n<ul>\n<li><code>kube_persistentvolume_status_phase</code>：PV 使用状态</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"APIServer\"><a href=\"#APIServer\" class=\"headerlink\" title=\"APIServer\"></a>APIServer</h1><h2 id=\"APIServer请求错误率\"><a href=\"#APIServer请求错误率\" class=\"headerlink\" title=\"APIServer请求错误率\"></a>APIServer请求错误率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(rate(apiserver_request_total&#123;job&#x3D;&quot;apiserver&quot;,code&#x3D;~&quot;5..&quot;&#125;[5m])) by (resource,subresource,verb)</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        sum(rate(apiserver_request_total&#123;job&#x3D;&quot;apiserver&quot;&#125;[5m])) by (resource,subresource,verb) &gt; 0.05</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：5分钟内 APIServer 请求错误率。</p>\n<p>相关指标：</p>\n<ul>\n<li><code>apiserver_request_total：APIServer</code> 请求数</li>\n</ul>\n<h2 id=\"APIServer状态\"><a href=\"#APIServer状态\" class=\"headerlink\" title=\"APIServer状态\"></a>APIServer状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">absent(up&#123;job&#x3D;&quot;apiserver&quot;&#125; &#x3D;&#x3D; 1)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监控 APIServer 服务状态，失联原因可能是服务 down 或者网络出现状况。</p>\n<br>\n\n\n\n<h1 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h1><h2 id=\"kubelet客户端证书过期\"><a href=\"#kubelet客户端证书过期\" class=\"headerlink\" title=\"kubelet客户端证书过期\"></a>kubelet客户端证书过期</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiserver_client_certificate_expiration_seconds_count&#123;job&#x3D;&quot;apiserver&quot;&#125; &gt; 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket&#123;job&#x3D;&quot;apiserver&quot;&#125;[5m]))) &lt; 2592000</span><br><span class=\"line\"></span><br><span class=\"line\">apiserver_client_certificate_expiration_seconds_count&#123;job&#x3D;&quot;apiserver&quot;&#125; &gt; 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket&#123;job&#x3D;&quot;apiserver&quot;&#125;[5m]))) &lt; 604800</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测证书状态30天告警和7天告警。</p>\n<p>相关指标：</p>\n<ul>\n<li><code>apiserver_client_certificate_expiration_seconds_count</code>：证书有效剩余时间</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h1><h2 id=\"节点状态\"><a href=\"#节点状态\" class=\"headerlink\" title=\"节点状态\"></a>节点状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_node_status_condition&#123;job&#x3D;&quot;kube-state-metrics&quot;,condition&#x3D;&quot;Ready&quot;,status&#x3D;&quot;true&quot;&#125; &#x3D;&#x3D; 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检测节点是否为就绪状态，或者可能是 kubelet 服务down 了。</p>\n<p>相关指标：</p>\n<ul>\n<li><code>kube_node_status_condition</code>：节点状态监测</li>\n</ul>\n<h2 id=\"节点状态为-Unreachable\"><a href=\"#节点状态为-Unreachable\" class=\"headerlink\" title=\"节点状态为 Unreachable\"></a>节点状态为 Unreachable</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_node_spec_unschedulable&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; &#x3D;&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测状态为 Unreachable的节点。</p>\n<h2 id=\"节点运行pod过多\"><a href=\"#节点运行pod过多\" class=\"headerlink\" title=\"节点运行pod过多\"></a>节点运行pod过多</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(max(kubelet_running_pod_count&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;) by(instance) * on(instance) group_left(node) kubelet_node_name&#123;job&#x3D;&quot;kubelet&quot;, metrics_path&#x3D;&quot;&#x2F;metrics&quot;&#125;) by(node) &#x2F; max(kube_node_status_capacity_pods&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; !&#x3D; 1) by(node) &gt; 0.95</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测节点上运行的 Pods 数量是否达到最大限额的95%。</p>\n<p>相关指标：</p>\n<ul>\n<li><p><code>kubelet_running_pod_count</code>：节点运行的 Pods 数量</p>\n</li>\n<li><p><code>kubelet_node_name</code>：节点名称</p>\n</li>\n<li><p><code>kube_node_status_capacity_pods</code>：节点可运行的最大 Pod 数量</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"pod\"><a href=\"#pod\" class=\"headerlink\" title=\"pod\"></a>pod</h1><h2 id=\"pod重启时间\"><a href=\"#pod重启时间\" class=\"headerlink\" title=\"pod重启时间\"></a>pod重启时间</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rate(kube_pod_container_status_restarts_total&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;[5m]) * 60 * 3 &gt; 0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：Pod 重启时间，重启时间超过3m告警。</p>\n<p>相关指标:</p>\n<ul>\n<li>kube_pod_container_status_restarts_total：重启状态0为正常</li>\n</ul>\n<h2 id=\"pod状态\"><a href=\"#pod状态\" class=\"headerlink\" title=\"pod状态\"></a>pod状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum by (namespace, pod) (max by(namespace, pod) (kube_pod_status_phase&#123;job&#x3D;&quot;kube-state-metrics&quot;, phase&#x3D;~&quot;Pending|Unknown&quot;&#125;) * on(namespace, pod) group_left(owner_kind) max by(namespace, pod, owner_kind) (kube_pod_owner&#123;owner_kind!&#x3D;&quot;Job&quot;&#125;)) &gt;0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检测 Pod 是否就绪。</p>\n<p>相关指标：</p>\n<ul>\n<li>kube_pod_status_phase：Pod 状态</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h1><h2 id=\"Deployment部署失败\"><a href=\"#Deployment部署失败\" class=\"headerlink\" title=\"Deployment部署失败\"></a>Deployment部署失败</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_deployment_status_observed_generation&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">          !&#x3D;</span><br><span class=\"line\">        kube_deployment_metadata_generation&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：Deployment 生成的资源与定义的资源不匹配。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_deployment_status_observed_generation：Deployment 生成资源数</p>\n</li>\n<li><p>kube_deployment_metadata_generation：Deployment 定义资源数</p>\n</li>\n</ul>\n<h2 id=\"deployment副本数\"><a href=\"#deployment副本数\" class=\"headerlink\" title=\"deployment副本数\"></a>deployment副本数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">          kube_deployment_spec_replicas&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">            !&#x3D;</span><br><span class=\"line\">          kube_deployment_status_replicas_available&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">        ) and (</span><br><span class=\"line\">          changes(kube_deployment_status_replicas_updated&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;[3m])</span><br><span class=\"line\">            &#x3D;&#x3D;</span><br><span class=\"line\">          0</span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：查看 Deplyment 副本是否达到预期。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_deployment_spec_replicas           资源定义副本数</p>\n</li>\n<li><p>kube_deployment_status_replicas_available     正在运行副本数</p>\n</li>\n<li><p>kube_deployment_status_replicas_updated      更新的副本数</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"statefuleset\"><a href=\"#statefuleset\" class=\"headerlink\" title=\"statefuleset\"></a>statefuleset</h1><h2 id=\"statefulset副本数\"><a href=\"#statefulset副本数\" class=\"headerlink\" title=\"statefulset副本数\"></a>statefulset副本数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">          kube_statefulset_status_replicas_ready&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">            !&#x3D;</span><br><span class=\"line\">          kube_statefulset_status_replicas&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">        ) and (</span><br><span class=\"line\">          changes(kube_statefulset_status_replicas_updated&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;[5m])</span><br><span class=\"line\">            &#x3D;&#x3D;</span><br><span class=\"line\">          0</span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测 StatefulSet 副本是否达到预期。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_statefulset_status_replicas_ready：就绪副本数</p>\n</li>\n<li><p>kube_statefulset_status_replicas：当前副本数</p>\n</li>\n<li><p>kube_statefulset_status_replicas_updated：更新的副本数</p>\n</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"DaemonSet\"><a href=\"#DaemonSet\" class=\"headerlink\" title=\"DaemonSet\"></a>DaemonSet</h1><h2 id=\"daemonset就绪\"><a href=\"#daemonset就绪\" class=\"headerlink\" title=\"daemonset就绪\"></a>daemonset就绪</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kube_daemonset_status_number_ready&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125;</span><br><span class=\"line\">          &#x2F;</span><br><span class=\"line\">        kube_daemonset_status_desired_number_scheduled&#123;job&#x3D;&quot;kube-state-metrics&quot;&#125; &lt; 1.00</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测 DaemonSet 是否处于就绪状态。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>kube_daemonset_status_number_ready：就绪的 DaemonSet</p>\n</li>\n<li><p>kube_daemonset_status_desired_number_scheduled：应该调度的 DaemonSet 数量</p>\n</li>\n</ul>\n"},{"title":"Prometheus监控指标--服务器","date":"2020-07-30T07:01:54.000Z","description":"使用prometheus监控服务器常用指标","cover":"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3974948727,3695780061&fm=26&gp=0.jpg","_content":"\n\n\n# 时间\n\n## 本地时间偏移\n\n```\n(node_timex_offset_seconds > 0.05\n        and\n          deriv(node_timex_offset_seconds[5m]) >= 0\n        )\n        or\n        (\n          node_timex_offset_seconds < -0.05\n        and\n          deriv(node_timex_offset_seconds[5m]) <= 0)\n```\n\n\n\n用途：本地时间偏移量。\n\n\n\n相关指标：\n\n- node_timex_offset_seconds：误差\n\n\n\n<br>\n\n\n\n# 网络\n\n## 网卡接收的错误\n\n```\nincrease(node_network_receive_errs_total[2m]) > 10\n```\n\n\n\n用途：网卡接收错误量。\n\n\n\n相关指标：\n\n- node_network_receive_errs_total：接收错误总量\n\n\n\n## 网卡发送的错误\n\n```\nincrease(node_network_transmit_errs_total[2m]) > 10\n```\n\n\n\n用途：网卡传输错误量。\n\n\n\n相关指标：\n\n- node_network_transmit_errs_total：传输错误总量\n\n\n\n## 网卡接收字节数增量\n\n```bash\nrate(node_network_receive_bytes_total[1m])\n```\n\n\n\n## 网络传输IO\n\n```bash\n# 单位是M \nrate(node_network_transmit_bytes_total[1m]) / 1024 /1024\n```\n\n\n\n\n\n<br>\n\n\n\n# 磁盘\n\n## inode空闲率\n\n```\n(          node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 5        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0        )\n```\n\n\n\n用途：监测节点inode空闲是否小于5%。\n\n\n\n相关指标：\n\n- node_filesystem_files_free：空闲的 inode\n\n- node_filesystem_files：inodes 总量\n- node_filesystem_readonly：文件系统是否只读，0表示正常\n\n\n\n## inode耗尽预测\n\n```\n(node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 20        and          predict_linear(node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"}[6h], 4*60*60) < 0        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0)\n```\n\n\n\n用途：inode 耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的 inodes。\n\n\n\n相关指标：\n\n- node_filesystem_files_free：空闲的 inode\n\n- node_filesystem_files：inodes 总量\n\n\n\n## 分区容量使用率\n\n```\n(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 10        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0        )\n```\n\n\n\n用途：监测分区容量使用率是否超过90%。\n\n\n\n相关指标：\n\n- node_filesystem_avail_bytes：空闲容量\n\n- node_filesystem_size_bytes：总容量\n\n\n\n## 分区容量耗尽预测\n\n```\n(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 15        and          predict_linear(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"}[6h], 4*60*60) < 0        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0)\n```\n\n\n\n用途：分区容量耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的容量。\n\n\n\n相关指标：\n\n- node_filesystem_avail_bytes：空闲容量\n\n- node_filesystem_size_bytes：总容量\n\n\n\n## 磁盘剩余百分比\n\n```bash\n(node_filesystem_free_bytes{device=~\"/dev/sd[a-z]1\"}  /  node_filesystem_size_bytes) * 100\n```\n\n\n\n## 磁盘IO\n\n```bash\n(rate(node_disk_read_bytes_total{device=~\"sd[a-z]\"}[1m]) + rate(node_disk_written_bytes_total[1m])) /1024 /1024\n```\n\n\n\n## 文件描述符使用率\n\n```bash\n(node_filefd_allocated / node_filefd_maximum) * 100\n```\n\n\n\n<br>\n\n\n\n# CPU\n\n## CPU使用率\n\n```bash\n(1- (sum(increase(node_cpu_seconds_total{mode=\"idle\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100\n```\n\n\n\n\n\n## 用户态使用率\n\n```bash\nsum(increase(node_cpu_seconds_total{mode=\"user\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))\n```\n\n\n\n\n\n## 内核态使用率\n\n```bash\nsum(increase(node_cpu_seconds_total{mode=\"system\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))\n```\n\n\n\n## IO等待使用率\n\n```bash\nsum(increase(node_cpu_seconds_total{mode=\"iowait\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))\n```\n\n\n\n<br>\n\n\n\n# 内存\n\n## 内存使用率\n\n```bash\n(1- ((node_memory_Buffers_bytes + node_memory_Cached_bytes + node_memory_MemFree_bytes) / node_memory_MemTotal_bytes)) * 100\n```\n\n\n\n","source":"_posts/Prometheus监控指标-服务器.md","raw":"---\ntitle: Prometheus监控指标--服务器\ndate: 2020-07-30 15:01:54\ntags:\n- Prometheus\ncategories:\n- Prometheus\n- 监控指标\ndescription: 使用prometheus监控服务器常用指标\ncover: https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3974948727,3695780061&fm=26&gp=0.jpg\n---\n\n\n\n# 时间\n\n## 本地时间偏移\n\n```\n(node_timex_offset_seconds > 0.05\n        and\n          deriv(node_timex_offset_seconds[5m]) >= 0\n        )\n        or\n        (\n          node_timex_offset_seconds < -0.05\n        and\n          deriv(node_timex_offset_seconds[5m]) <= 0)\n```\n\n\n\n用途：本地时间偏移量。\n\n\n\n相关指标：\n\n- node_timex_offset_seconds：误差\n\n\n\n<br>\n\n\n\n# 网络\n\n## 网卡接收的错误\n\n```\nincrease(node_network_receive_errs_total[2m]) > 10\n```\n\n\n\n用途：网卡接收错误量。\n\n\n\n相关指标：\n\n- node_network_receive_errs_total：接收错误总量\n\n\n\n## 网卡发送的错误\n\n```\nincrease(node_network_transmit_errs_total[2m]) > 10\n```\n\n\n\n用途：网卡传输错误量。\n\n\n\n相关指标：\n\n- node_network_transmit_errs_total：传输错误总量\n\n\n\n## 网卡接收字节数增量\n\n```bash\nrate(node_network_receive_bytes_total[1m])\n```\n\n\n\n## 网络传输IO\n\n```bash\n# 单位是M \nrate(node_network_transmit_bytes_total[1m]) / 1024 /1024\n```\n\n\n\n\n\n<br>\n\n\n\n# 磁盘\n\n## inode空闲率\n\n```\n(          node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 5        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0        )\n```\n\n\n\n用途：监测节点inode空闲是否小于5%。\n\n\n\n相关指标：\n\n- node_filesystem_files_free：空闲的 inode\n\n- node_filesystem_files：inodes 总量\n- node_filesystem_readonly：文件系统是否只读，0表示正常\n\n\n\n## inode耗尽预测\n\n```\n(node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_files{job=\"node-exporter\",fstype!=\"\"} * 100 < 20        and          predict_linear(node_filesystem_files_free{job=\"node-exporter\",fstype!=\"\"}[6h], 4*60*60) < 0        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0)\n```\n\n\n\n用途：inode 耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的 inodes。\n\n\n\n相关指标：\n\n- node_filesystem_files_free：空闲的 inode\n\n- node_filesystem_files：inodes 总量\n\n\n\n## 分区容量使用率\n\n```\n(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 10        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0        )\n```\n\n\n\n用途：监测分区容量使用率是否超过90%。\n\n\n\n相关指标：\n\n- node_filesystem_avail_bytes：空闲容量\n\n- node_filesystem_size_bytes：总容量\n\n\n\n## 分区容量耗尽预测\n\n```\n(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"} / node_filesystem_size_bytes{job=\"node-exporter\",fstype!=\"\"} * 100 < 15        and          predict_linear(node_filesystem_avail_bytes{job=\"node-exporter\",fstype!=\"\"}[6h], 4*60*60) < 0        and          node_filesystem_readonly{job=\"node-exporter\",fstype!=\"\"} == 0)\n```\n\n\n\n用途：分区容量耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的容量。\n\n\n\n相关指标：\n\n- node_filesystem_avail_bytes：空闲容量\n\n- node_filesystem_size_bytes：总容量\n\n\n\n## 磁盘剩余百分比\n\n```bash\n(node_filesystem_free_bytes{device=~\"/dev/sd[a-z]1\"}  /  node_filesystem_size_bytes) * 100\n```\n\n\n\n## 磁盘IO\n\n```bash\n(rate(node_disk_read_bytes_total{device=~\"sd[a-z]\"}[1m]) + rate(node_disk_written_bytes_total[1m])) /1024 /1024\n```\n\n\n\n## 文件描述符使用率\n\n```bash\n(node_filefd_allocated / node_filefd_maximum) * 100\n```\n\n\n\n<br>\n\n\n\n# CPU\n\n## CPU使用率\n\n```bash\n(1- (sum(increase(node_cpu_seconds_total{mode=\"idle\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100\n```\n\n\n\n\n\n## 用户态使用率\n\n```bash\nsum(increase(node_cpu_seconds_total{mode=\"user\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))\n```\n\n\n\n\n\n## 内核态使用率\n\n```bash\nsum(increase(node_cpu_seconds_total{mode=\"system\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))\n```\n\n\n\n## IO等待使用率\n\n```bash\nsum(increase(node_cpu_seconds_total{mode=\"iowait\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))\n```\n\n\n\n<br>\n\n\n\n# 内存\n\n## 内存使用率\n\n```bash\n(1- ((node_memory_Buffers_bytes + node_memory_Cached_bytes + node_memory_MemFree_bytes) / node_memory_MemTotal_bytes)) * 100\n```\n\n\n\n","slug":"Prometheus监控指标-服务器","published":1,"updated":"2020-08-19T02:24:00.730Z","_id":"ckd8gdvuf00002zn08hci0uq0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h1><h2 id=\"本地时间偏移\"><a href=\"#本地时间偏移\" class=\"headerlink\" title=\"本地时间偏移\"></a>本地时间偏移</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_timex_offset_seconds &gt; 0.05</span><br><span class=\"line\">        and</span><br><span class=\"line\">          deriv(node_timex_offset_seconds[5m]) &gt;&#x3D; 0</span><br><span class=\"line\">        )</span><br><span class=\"line\">        or</span><br><span class=\"line\">        (</span><br><span class=\"line\">          node_timex_offset_seconds &lt; -0.05</span><br><span class=\"line\">        and</span><br><span class=\"line\">          deriv(node_timex_offset_seconds[5m]) &lt;&#x3D; 0)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：本地时间偏移量。</p>\n<p>相关指标：</p>\n<ul>\n<li>node_timex_offset_seconds：误差</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><h2 id=\"网卡接收的错误\"><a href=\"#网卡接收的错误\" class=\"headerlink\" title=\"网卡接收的错误\"></a>网卡接收的错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">increase(node_network_receive_errs_total[2m]) &gt; 10</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：网卡接收错误量。</p>\n<p>相关指标：</p>\n<ul>\n<li>node_network_receive_errs_total：接收错误总量</li>\n</ul>\n<h2 id=\"网卡发送的错误\"><a href=\"#网卡发送的错误\" class=\"headerlink\" title=\"网卡发送的错误\"></a>网卡发送的错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">increase(node_network_transmit_errs_total[2m]) &gt; 10</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：网卡传输错误量。</p>\n<p>相关指标：</p>\n<ul>\n<li>node_network_transmit_errs_total：传输错误总量</li>\n</ul>\n<h2 id=\"网卡接收字节数增量\"><a href=\"#网卡接收字节数增量\" class=\"headerlink\" title=\"网卡接收字节数增量\"></a>网卡接收字节数增量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rate(node_network_receive_bytes_total[1m])</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"网络传输IO\"><a href=\"#网络传输IO\" class=\"headerlink\" title=\"网络传输IO\"></a>网络传输IO</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单位是M </span></span><br><span class=\"line\">rate(node_network_transmit_bytes_total[1m]) / 1024 /1024</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h1><h2 id=\"inode空闲率\"><a href=\"#inode空闲率\" class=\"headerlink\" title=\"inode空闲率\"></a>inode空闲率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(          node_filesystem_files_free&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_files&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 5        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测节点inode空闲是否小于5%。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_files_free：空闲的 inode</p>\n</li>\n<li><p>node_filesystem_files：inodes 总量</p>\n</li>\n<li><p>node_filesystem_readonly：文件系统是否只读，0表示正常</p>\n</li>\n</ul>\n<h2 id=\"inode耗尽预测\"><a href=\"#inode耗尽预测\" class=\"headerlink\" title=\"inode耗尽预测\"></a>inode耗尽预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_files_free&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_files&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 20        and          predict_linear(node_filesystem_files_free&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125;[6h], 4*60*60) &lt; 0        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：inode 耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的 inodes。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_files_free：空闲的 inode</p>\n</li>\n<li><p>node_filesystem_files：inodes 总量</p>\n</li>\n</ul>\n<h2 id=\"分区容量使用率\"><a href=\"#分区容量使用率\" class=\"headerlink\" title=\"分区容量使用率\"></a>分区容量使用率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_avail_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_size_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 10        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测分区容量使用率是否超过90%。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_avail_bytes：空闲容量</p>\n</li>\n<li><p>node_filesystem_size_bytes：总容量</p>\n</li>\n</ul>\n<h2 id=\"分区容量耗尽预测\"><a href=\"#分区容量耗尽预测\" class=\"headerlink\" title=\"分区容量耗尽预测\"></a>分区容量耗尽预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_avail_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_size_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 15        and          predict_linear(node_filesystem_avail_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125;[6h], 4*60*60) &lt; 0        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：分区容量耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的容量。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_avail_bytes：空闲容量</p>\n</li>\n<li><p>node_filesystem_size_bytes：总容量</p>\n</li>\n</ul>\n<h2 id=\"磁盘剩余百分比\"><a href=\"#磁盘剩余百分比\" class=\"headerlink\" title=\"磁盘剩余百分比\"></a>磁盘剩余百分比</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_free_bytes&#123;device=~<span class=\"string\">\"/dev/sd[a-z]1\"</span>&#125;  /  node_filesystem_size_bytes) * 100</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘IO\"><a href=\"#磁盘IO\" class=\"headerlink\" title=\"磁盘IO\"></a>磁盘IO</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(rate(node_disk_read_bytes_total&#123;device=~<span class=\"string\">\"sd[a-z]\"</span>&#125;[1m]) + rate(node_disk_written_bytes_total[1m])) /1024 /1024</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件描述符使用率\"><a href=\"#文件描述符使用率\" class=\"headerlink\" title=\"文件描述符使用率\"></a>文件描述符使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filefd_allocated / node_filefd_maximum) * 100</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h1><h2 id=\"CPU使用率\"><a href=\"#CPU使用率\" class=\"headerlink\" title=\"CPU使用率\"></a>CPU使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1- (sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"idle\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"用户态使用率\"><a href=\"#用户态使用率\" class=\"headerlink\" title=\"用户态使用率\"></a>用户态使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"user\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"内核态使用率\"><a href=\"#内核态使用率\" class=\"headerlink\" title=\"内核态使用率\"></a>内核态使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"system\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"IO等待使用率\"><a href=\"#IO等待使用率\" class=\"headerlink\" title=\"IO等待使用率\"></a>IO等待使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"iowait\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h1><h2 id=\"内存使用率\"><a href=\"#内存使用率\" class=\"headerlink\" title=\"内存使用率\"></a>内存使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1- ((node_memory_Buffers_bytes + node_memory_Cached_bytes + node_memory_MemFree_bytes) / node_memory_MemTotal_bytes)) * 100</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h1><h2 id=\"本地时间偏移\"><a href=\"#本地时间偏移\" class=\"headerlink\" title=\"本地时间偏移\"></a>本地时间偏移</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_timex_offset_seconds &gt; 0.05</span><br><span class=\"line\">        and</span><br><span class=\"line\">          deriv(node_timex_offset_seconds[5m]) &gt;&#x3D; 0</span><br><span class=\"line\">        )</span><br><span class=\"line\">        or</span><br><span class=\"line\">        (</span><br><span class=\"line\">          node_timex_offset_seconds &lt; -0.05</span><br><span class=\"line\">        and</span><br><span class=\"line\">          deriv(node_timex_offset_seconds[5m]) &lt;&#x3D; 0)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：本地时间偏移量。</p>\n<p>相关指标：</p>\n<ul>\n<li>node_timex_offset_seconds：误差</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><h2 id=\"网卡接收的错误\"><a href=\"#网卡接收的错误\" class=\"headerlink\" title=\"网卡接收的错误\"></a>网卡接收的错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">increase(node_network_receive_errs_total[2m]) &gt; 10</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：网卡接收错误量。</p>\n<p>相关指标：</p>\n<ul>\n<li>node_network_receive_errs_total：接收错误总量</li>\n</ul>\n<h2 id=\"网卡发送的错误\"><a href=\"#网卡发送的错误\" class=\"headerlink\" title=\"网卡发送的错误\"></a>网卡发送的错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">increase(node_network_transmit_errs_total[2m]) &gt; 10</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：网卡传输错误量。</p>\n<p>相关指标：</p>\n<ul>\n<li>node_network_transmit_errs_total：传输错误总量</li>\n</ul>\n<h2 id=\"网卡接收字节数增量\"><a href=\"#网卡接收字节数增量\" class=\"headerlink\" title=\"网卡接收字节数增量\"></a>网卡接收字节数增量</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rate(node_network_receive_bytes_total[1m])</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"网络传输IO\"><a href=\"#网络传输IO\" class=\"headerlink\" title=\"网络传输IO\"></a>网络传输IO</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单位是M </span></span><br><span class=\"line\">rate(node_network_transmit_bytes_total[1m]) / 1024 /1024</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h1><h2 id=\"inode空闲率\"><a href=\"#inode空闲率\" class=\"headerlink\" title=\"inode空闲率\"></a>inode空闲率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(          node_filesystem_files_free&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_files&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 5        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测节点inode空闲是否小于5%。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_files_free：空闲的 inode</p>\n</li>\n<li><p>node_filesystem_files：inodes 总量</p>\n</li>\n<li><p>node_filesystem_readonly：文件系统是否只读，0表示正常</p>\n</li>\n</ul>\n<h2 id=\"inode耗尽预测\"><a href=\"#inode耗尽预测\" class=\"headerlink\" title=\"inode耗尽预测\"></a>inode耗尽预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_files_free&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_files&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 20        and          predict_linear(node_filesystem_files_free&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125;[6h], 4*60*60) &lt; 0        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：inode 耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的 inodes。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_files_free：空闲的 inode</p>\n</li>\n<li><p>node_filesystem_files：inodes 总量</p>\n</li>\n</ul>\n<h2 id=\"分区容量使用率\"><a href=\"#分区容量使用率\" class=\"headerlink\" title=\"分区容量使用率\"></a>分区容量使用率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_avail_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_size_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 10        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0        )</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：监测分区容量使用率是否超过90%。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_avail_bytes：空闲容量</p>\n</li>\n<li><p>node_filesystem_size_bytes：总容量</p>\n</li>\n</ul>\n<h2 id=\"分区容量耗尽预测\"><a href=\"#分区容量耗尽预测\" class=\"headerlink\" title=\"分区容量耗尽预测\"></a>分区容量耗尽预测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_avail_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x2F; node_filesystem_size_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; * 100 &lt; 15        and          predict_linear(node_filesystem_avail_bytes&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125;[6h], 4*60*60) &lt; 0        and          node_filesystem_readonly&#123;job&#x3D;&quot;node-exporter&quot;,fstype!&#x3D;&quot;&quot;&#125; &#x3D;&#x3D; 0)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：分区容量耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的容量。</p>\n<p>相关指标：</p>\n<ul>\n<li><p>node_filesystem_avail_bytes：空闲容量</p>\n</li>\n<li><p>node_filesystem_size_bytes：总容量</p>\n</li>\n</ul>\n<h2 id=\"磁盘剩余百分比\"><a href=\"#磁盘剩余百分比\" class=\"headerlink\" title=\"磁盘剩余百分比\"></a>磁盘剩余百分比</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filesystem_free_bytes&#123;device=~<span class=\"string\">\"/dev/sd[a-z]1\"</span>&#125;  /  node_filesystem_size_bytes) * 100</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"磁盘IO\"><a href=\"#磁盘IO\" class=\"headerlink\" title=\"磁盘IO\"></a>磁盘IO</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(rate(node_disk_read_bytes_total&#123;device=~<span class=\"string\">\"sd[a-z]\"</span>&#125;[1m]) + rate(node_disk_written_bytes_total[1m])) /1024 /1024</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件描述符使用率\"><a href=\"#文件描述符使用率\" class=\"headerlink\" title=\"文件描述符使用率\"></a>文件描述符使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node_filefd_allocated / node_filefd_maximum) * 100</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h1><h2 id=\"CPU使用率\"><a href=\"#CPU使用率\" class=\"headerlink\" title=\"CPU使用率\"></a>CPU使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1- (sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"idle\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"用户态使用率\"><a href=\"#用户态使用率\" class=\"headerlink\" title=\"用户态使用率\"></a>用户态使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"user\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"内核态使用率\"><a href=\"#内核态使用率\" class=\"headerlink\" title=\"内核态使用率\"></a>内核态使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"system\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"IO等待使用率\"><a href=\"#IO等待使用率\" class=\"headerlink\" title=\"IO等待使用率\"></a>IO等待使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"iowait\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance))</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h1><h2 id=\"内存使用率\"><a href=\"#内存使用率\" class=\"headerlink\" title=\"内存使用率\"></a>内存使用率</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1- ((node_memory_Buffers_bytes + node_memory_Cached_bytes + node_memory_MemFree_bytes) / node_memory_MemTotal_bytes)) * 100</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Prometheus监控指标--ETCD","date":"2020-07-30T07:05:54.000Z","description":"使用prometheus监控etcd常用指标","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596102895688&di=18fdbb30dbb810121221eca19e242917&imgtype=0&src=http%3A%2F%2Fmydlq-club.oss-cn-beijing.aliyuncs.com%2Fimages%2Fprometheus-operator-etcd-1001.jpg%3Fx-oss-process%3Dstyle%2Fshuiyin","_content":"\n\n\n# 集群\n\n## etcd存活监测\n\n```\nup{job=\"etcd\"} < 1\n```\n\n\n\n用途：etcd 存活检测。\n\n\n\n## 集群健康检查\n\n```\ncount(up{job=\"etcd\"} == 0) > ceil(count(up{job=\"etcd\"}) / 2 - 1)\n```\n\n\n\n用途：etcd 集群健康检查，判断down 数量是否大于集群可允许故障数量。\n\n\n\n## leader检查\n\n```\nmax(etcd_server_has_leader) != 1\n```\n\n\n\n用途：检查是否有 leader。\n\n\n\n<br>\n\n\n\n# I/O监测\n\n## io监测--后端提交延时\n\n```\nhistogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[5m])) by (instance, le)) > 100\n```\n\n\n\n用途：etcd io 监测，后端提交延时。\n\n\n\n\n\n## io监测--同步磁盘延时\n\n```\nhistogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) by (instance, le)) > 100\n```\n\n\n\n用途：etcd io 监测，文件同步到磁盘延时。\n\n\n\n<br>\n\n\n\n# 网络\n\n## grpc调用速率\n\n```\nsum(rate(grpc_server_handled_total{grpc_type=\"unary\"}[1m])) > 100\n```\n\n\n\n用途：Grpc 调用速率\n\n\n\n<br>\n\n\n\n# 数据库\n\n## 数据库大小\n\n```\netcd_debugging_mvcc_db_total_size_in_bytes/1024/1024 > 1024\n```\n\n\n\n用途：检测数据库大小。\n\n\n\n","source":"_posts/Prometheus监控指标-ETCD.md","raw":"---\ntitle: Prometheus监控指标--ETCD\ndate: 2020-07-30 15:05:54\ntags:\n- Prometheus\ncategories:\n- Prometheus\n- 监控指标\ndescription: 使用prometheus监控etcd常用指标\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596102895688&di=18fdbb30dbb810121221eca19e242917&imgtype=0&src=http%3A%2F%2Fmydlq-club.oss-cn-beijing.aliyuncs.com%2Fimages%2Fprometheus-operator-etcd-1001.jpg%3Fx-oss-process%3Dstyle%2Fshuiyin\n---\n\n\n\n# 集群\n\n## etcd存活监测\n\n```\nup{job=\"etcd\"} < 1\n```\n\n\n\n用途：etcd 存活检测。\n\n\n\n## 集群健康检查\n\n```\ncount(up{job=\"etcd\"} == 0) > ceil(count(up{job=\"etcd\"}) / 2 - 1)\n```\n\n\n\n用途：etcd 集群健康检查，判断down 数量是否大于集群可允许故障数量。\n\n\n\n## leader检查\n\n```\nmax(etcd_server_has_leader) != 1\n```\n\n\n\n用途：检查是否有 leader。\n\n\n\n<br>\n\n\n\n# I/O监测\n\n## io监测--后端提交延时\n\n```\nhistogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[5m])) by (instance, le)) > 100\n```\n\n\n\n用途：etcd io 监测，后端提交延时。\n\n\n\n\n\n## io监测--同步磁盘延时\n\n```\nhistogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) by (instance, le)) > 100\n```\n\n\n\n用途：etcd io 监测，文件同步到磁盘延时。\n\n\n\n<br>\n\n\n\n# 网络\n\n## grpc调用速率\n\n```\nsum(rate(grpc_server_handled_total{grpc_type=\"unary\"}[1m])) > 100\n```\n\n\n\n用途：Grpc 调用速率\n\n\n\n<br>\n\n\n\n# 数据库\n\n## 数据库大小\n\n```\netcd_debugging_mvcc_db_total_size_in_bytes/1024/1024 > 1024\n```\n\n\n\n用途：检测数据库大小。\n\n\n\n","slug":"Prometheus监控指标-ETCD","published":1,"updated":"2020-07-30T07:09:00.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd8gjcgc00004nn02xji80yf","content":"<h1 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h1><h2 id=\"etcd存活监测\"><a href=\"#etcd存活监测\" class=\"headerlink\" title=\"etcd存活监测\"></a>etcd存活监测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">up&#123;job&#x3D;&quot;etcd&quot;&#125; &lt; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd 存活检测。</p>\n<h2 id=\"集群健康检查\"><a href=\"#集群健康检查\" class=\"headerlink\" title=\"集群健康检查\"></a>集群健康检查</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(up&#123;job&#x3D;&quot;etcd&quot;&#125; &#x3D;&#x3D; 0) &gt; ceil(count(up&#123;job&#x3D;&quot;etcd&quot;&#125;) &#x2F; 2 - 1)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd 集群健康检查，判断down 数量是否大于集群可允许故障数量。</p>\n<h2 id=\"leader检查\"><a href=\"#leader检查\" class=\"headerlink\" title=\"leader检查\"></a>leader检查</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(etcd_server_has_leader) !&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检查是否有 leader。</p>\n<br>\n\n\n\n<h1 id=\"I-O监测\"><a href=\"#I-O监测\" class=\"headerlink\" title=\"I/O监测\"></a>I/O监测</h1><h2 id=\"io监测–后端提交延时\"><a href=\"#io监测–后端提交延时\" class=\"headerlink\" title=\"io监测–后端提交延时\"></a>io监测–后端提交延时</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">histogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[5m])) by (instance, le)) &gt; 100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd io 监测，后端提交延时。</p>\n<h2 id=\"io监测–同步磁盘延时\"><a href=\"#io监测–同步磁盘延时\" class=\"headerlink\" title=\"io监测–同步磁盘延时\"></a>io监测–同步磁盘延时</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">histogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) by (instance, le)) &gt; 100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd io 监测，文件同步到磁盘延时。</p>\n<br>\n\n\n\n<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><h2 id=\"grpc调用速率\"><a href=\"#grpc调用速率\" class=\"headerlink\" title=\"grpc调用速率\"></a>grpc调用速率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(rate(grpc_server_handled_total&#123;grpc_type&#x3D;&quot;unary&quot;&#125;[1m])) &gt; 100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：Grpc 调用速率</p>\n<br>\n\n\n\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"数据库大小\"><a href=\"#数据库大小\" class=\"headerlink\" title=\"数据库大小\"></a>数据库大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcd_debugging_mvcc_db_total_size_in_bytes&#x2F;1024&#x2F;1024 &gt; 1024</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检测数据库大小。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h1><h2 id=\"etcd存活监测\"><a href=\"#etcd存活监测\" class=\"headerlink\" title=\"etcd存活监测\"></a>etcd存活监测</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">up&#123;job&#x3D;&quot;etcd&quot;&#125; &lt; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd 存活检测。</p>\n<h2 id=\"集群健康检查\"><a href=\"#集群健康检查\" class=\"headerlink\" title=\"集群健康检查\"></a>集群健康检查</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(up&#123;job&#x3D;&quot;etcd&quot;&#125; &#x3D;&#x3D; 0) &gt; ceil(count(up&#123;job&#x3D;&quot;etcd&quot;&#125;) &#x2F; 2 - 1)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd 集群健康检查，判断down 数量是否大于集群可允许故障数量。</p>\n<h2 id=\"leader检查\"><a href=\"#leader检查\" class=\"headerlink\" title=\"leader检查\"></a>leader检查</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(etcd_server_has_leader) !&#x3D; 1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检查是否有 leader。</p>\n<br>\n\n\n\n<h1 id=\"I-O监测\"><a href=\"#I-O监测\" class=\"headerlink\" title=\"I/O监测\"></a>I/O监测</h1><h2 id=\"io监测–后端提交延时\"><a href=\"#io监测–后端提交延时\" class=\"headerlink\" title=\"io监测–后端提交延时\"></a>io监测–后端提交延时</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">histogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[5m])) by (instance, le)) &gt; 100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd io 监测，后端提交延时。</p>\n<h2 id=\"io监测–同步磁盘延时\"><a href=\"#io监测–同步磁盘延时\" class=\"headerlink\" title=\"io监测–同步磁盘延时\"></a>io监测–同步磁盘延时</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">histogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) by (instance, le)) &gt; 100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：etcd io 监测，文件同步到磁盘延时。</p>\n<br>\n\n\n\n<h1 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h1><h2 id=\"grpc调用速率\"><a href=\"#grpc调用速率\" class=\"headerlink\" title=\"grpc调用速率\"></a>grpc调用速率</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(rate(grpc_server_handled_total&#123;grpc_type&#x3D;&quot;unary&quot;&#125;[1m])) &gt; 100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：Grpc 调用速率</p>\n<br>\n\n\n\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"数据库大小\"><a href=\"#数据库大小\" class=\"headerlink\" title=\"数据库大小\"></a>数据库大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcd_debugging_mvcc_db_total_size_in_bytes&#x2F;1024&#x2F;1024 &gt; 1024</span><br></pre></td></tr></table></figure>\n\n\n\n<p>用途：检测数据库大小。</p>\n"},{"title":"Prometheus基于consul自动发现节点","date":"2020-07-31T01:21:49.000Z","description":"prometheus使用consul自动发现监控节点","cover":"https://pic.rmb.bdstatic.com/f42c77f750b95df7b34509c03f1f1ed6.png@wm_2,t_55m+5a625Y+3L+S4gOWPquacqOacqOmxvA==,fc_ffffff,ff_U2ltSGVp,sz_9,x_6,y_6","_content":"\n\n\n# 为什么使用consul\n\n当新增了一个监控节点（例如新部署了一个node_exporter），往往需要修改prometheus的配置文件来增加节点信息。prometheus支持使用多种服务发现类型来自动加入监控节点，其中就包含consul。\n\n\n\n所以只需要将新增的节点注册到consul中，prometheus会自动加入到监控。\n\n\n\n<br>\n\n\n\n# 部署consul\n\n## 二进制部署\n\n```bash\n$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip\n$ unzip consul_1.7.2_linux_amd64.zip\n$ mkdir /data1/consul\n$ nohup ./consul agent -server -client=10.25.85.104 -bind=10.25.85.104 -data-dir=/data1/consul -bootstrap -ui &\n```\n\n\n\n相关参数：\n\n- `-server`：启动server模式；\n- `-client`：设置客户端地址；\n- `-bind`：设置集群通信绑定的地址；\n- `-data-dir`：数据目录；\n- `-bootstrap`：设定自己为leader而不进行选举；\n- `-ui`：启动内置管理界面；\n\n\n\n## 容器化部署\n\n直接下载并运行最新版consul镜像。\n\n```bash\n$ docker run --name consul -d -p 8500:8500 consul\n```\n\n\n\n## 访问测试\n\n直接通过浏览器访问consul节点的8500端口即可进入consul的默认界面：\n\n![](consul-index.png)\n\n\n\n<br>\n\n\n\n# 注册node_exporter到consul\n\n准备一个用于注册的json数据文件`consul.json`：\n\n```json\n{\n    \"ID\": \"node-exporter-30.23.18.141\",\n    \"Name\": \"node-exporter\",\n    \"Tags\": [\n        \"node-exporter\"\n    ],\n    \"Address\": \"30.23.18.141\",\n    \"Port\": 9100,\n    \"Meta\": {\n        \"env\": \"test\",\n        \"project\": \"eex\"\n    },\n    \"EnableTagOverride\": false,\n    \"Checl\": {\n        \"HTTP\": \"http://30.23.18.141:9100/metrics\",\n        \"Interval\": \"10s\"\n    },\n    \"Weights\": {\n        \"Passing\": 10,\n        \"Warning\": 1\n    }\n}\n```\n\n\n\n> Tag字段用于prometheus进行分类，meta中的信息可以随便写。\n\n\n\n在安装好node_exporter的服务器上，执行下面的命令注册到consul：\n\n```bash\n$ curl --request PUT --data @consul.json http://10.25.85.104:8500/v1/agent/service/register?replace-existing-checks=1\n```\n\n\n\n执行完毕后，刷新页面发现node_exporter已经注册进来了。\n\n![](zhuce.png)\n\n\n\n<br>\n\n\n\n# prometheus配置服务发现\n\n编辑prometheus配置文件`prometheus.yml` 实现服务发现：\n\n```yaml\n- job_name: 'consul_node-exporter'\n  consul_sd_configs:\n    - server: '10.25.85.104:8500'\n      services: []\n  relabel_configs:\n    - source_labels: [__meta_consul_tags]\n      regex: .*node-exporter.*\n      action: keep\n    - regex: __meta_consul_service_metadata_(.+)\n      action: labelmap\n```\n\n- `consul_sd_configs`表明使用consul服务发现机制；\n\n- `relable_configs`中的第一段表示只保留`__meta_consul_tags`中包含`node-exporter`的对象；\n\n- `relable_configs`中的第二段表示匹配`__meta_consul_service_metadata`开头的标签并将捕获到的内容作为新的标签名称；\n\n  \n\n执行下面的命令让prometheus检查配置并重新加载：\n\n```bash\n# 检查配置是否正确\npromtool check config ./prometheus.yml\n\n# 动态加载配置\ncurl -XPOST http://10.25.85.104:9090/-/reload\n```\n\n\n\n在prometheus界面上可以看到注册到consul的node_exporter已经被prometheus发现：\n\n![](find.png)\n\n\n\n‌<br>\n\n\n\n# 通过consul集群自动发现\n\n\n\n## consul集群规划\n\n| 角色     | IP           | 端口 |\n| -------- | ------------ | ---- |\n| leader   | 30.23.105.83 | 8500 |\n| follower | 30.23.107.10 | 8500 |\n| follower | 30.23.8.76   | 8500 |\n\n\n\n## 下载安装consul\n\n在3台节点上都下载consul安装包：\n\n```bash\n$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip\n$ unzip consul_1.7.2_linux_amd64.zip\n$ mv consul /usr/local/bin\n$ mkdir /data/consul\n$ mkdir /usr/local/consul\n```\n\n\n\n## 设置配置文件\n\n在每一个节点上设置consul的配置文件：\n\n```bash\n$ cat > /usr/local/consul/consul.json << EOF\n{\n  \"datacenter\": \"dc1\",\n  \"data_dir\": \"/data/consul\",\n  \"log_level\": \"INFO\",\n  \"server\": true,\n  \"node_name\": \"node1-30.23.105.83\",\n  \"ui\": true,\n  \"bind_addr\": \"30.23.105.83\",\n  \"client_addr\": \"0.0.0.0\",\n  \"advertise_addr\": \"30.23.105.83\",\n  \"bootstrap_expect\": 3,\n  \"ports\":{\n    \"http\": 8500,\n    \"dns\": 8600,\n    \"server\": 8300,\n    \"serf_lan\": 8301,\n    \"serf_wan\": 8302\n    }\n}\nEOF\n```\n\n\n\n**注意修改每个节点配置文件中的节点名称和ip地址**\n\n\n\n相关参数：\n\n- `datacenter`：数据中心名称；\n- `data_dir`*：*数据存放本地目录；\n- `log_level`*：输出的日志级别；*\n- `server`*：*以 server 身份启动实例，不指定默认为 `client` ；\n- `node_name`：节点名称，集群中每个 node 名称不能重复，默认情况使用节点hostname\n- `ui`：指定是否可以访问 UI 界面； \n- `bind_addr`：Consul 监听的地址，必须能够被集群中所有节点访问，默认为`0.0.0.0 `；\n- `client_addr`：客户端监听地址，`0.0.0.0 `表示所有网段都可以访问；\n-  `advertise_addr`：集群广播地址 ；\n- `bootstrap_expect`：集群要求的最少成员数量 ；\n- `ports`：该参数详细配置各个服务端口，如果想指定其他端口，可以修改这里；\n\n‌\n\n## 启动主节点\n\n首先在leader服务器上启动服务：\n\n```bash\n$ nohup consul agent -config-dir=/usr/local/consul/consul.json > /usr/local/consul/consul.log 2>&1 &\n```\n\n\n\n启动后会发现有`failed to sync remote state: No cluster leader` 的报错，是因为在配置文件中指定了`bootstrap_expect`为3，故需要有三个节点集群才能正常启动，继续启动其他节点。\n\n\n\n## 启动从节点\n\n使用下面的命令启动其他节点并加入leader：\n\n```bash\n$ nohup consul agent -config-dir=/usr/local/consul/consul.json -join 30.23.105.83:8301 > /usr/local/consul/consul.log 2>&1 &\n```\n\n\n\n## 检查\n\n启动完成后通过访问任意节点8500端口，打卡consul页面，可以看到三个节点都注册进来了：\n\n![](cluster.png)\n\n\n\n也可以通过下面的命令查看集群节点的情况：\n\n```bash\n# 查看集群状态\n$ consul operator raft list-peers\n\n# 查看节点状态\n$ consul members\n```\n\n\n\n## 配置nginx代理consul集群\n\n使用nginx作为consul集群的统一入口，nginx相关配置如下：\n\n```nginx\nupstream service_consul {\n    server 30.23.105.83:8500;\n    server 30.23.107.10:8500;\n    server 30.23.8.76:8500;\n    ip_hash;\n}\n\nserver {\n    listen       80;\n    server_name  30.23.105.83;\n    index  index.html index.htm;    \n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        add_header Access-Control-Allow-Origin *;\n        proxy_next_upstream http_502 http_504 error timeout invalid_header;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://service_consul;    \n    }\n\n    access_log /var/log/consul.access.log;\n    error_log /var/log/consul.error.log;    \n\n    error_page  404              /404.html;\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n>  这样通过nginx的80端口就可以访问consul集群了，在prometheus也只需要配置nginx的80端口即可。\n\n\n\n\n\n\n\n‌\n\n","source":"_posts/Prometheus基于consul自动发现节点.md","raw":"---\ntitle: Prometheus基于consul自动发现节点\ndate: 2020-07-31 09:21:49\ntags:\n- Prometheus\ncategories:\n- Prometheus\n- 基于Consul自动发现\ndescription: prometheus使用consul自动发现监控节点\ncover: https://pic.rmb.bdstatic.com/f42c77f750b95df7b34509c03f1f1ed6.png@wm_2,t_55m+5a625Y+3L+S4gOWPquacqOacqOmxvA==,fc_ffffff,ff_U2ltSGVp,sz_9,x_6,y_6\n---\n\n\n\n# 为什么使用consul\n\n当新增了一个监控节点（例如新部署了一个node_exporter），往往需要修改prometheus的配置文件来增加节点信息。prometheus支持使用多种服务发现类型来自动加入监控节点，其中就包含consul。\n\n\n\n所以只需要将新增的节点注册到consul中，prometheus会自动加入到监控。\n\n\n\n<br>\n\n\n\n# 部署consul\n\n## 二进制部署\n\n```bash\n$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip\n$ unzip consul_1.7.2_linux_amd64.zip\n$ mkdir /data1/consul\n$ nohup ./consul agent -server -client=10.25.85.104 -bind=10.25.85.104 -data-dir=/data1/consul -bootstrap -ui &\n```\n\n\n\n相关参数：\n\n- `-server`：启动server模式；\n- `-client`：设置客户端地址；\n- `-bind`：设置集群通信绑定的地址；\n- `-data-dir`：数据目录；\n- `-bootstrap`：设定自己为leader而不进行选举；\n- `-ui`：启动内置管理界面；\n\n\n\n## 容器化部署\n\n直接下载并运行最新版consul镜像。\n\n```bash\n$ docker run --name consul -d -p 8500:8500 consul\n```\n\n\n\n## 访问测试\n\n直接通过浏览器访问consul节点的8500端口即可进入consul的默认界面：\n\n![](consul-index.png)\n\n\n\n<br>\n\n\n\n# 注册node_exporter到consul\n\n准备一个用于注册的json数据文件`consul.json`：\n\n```json\n{\n    \"ID\": \"node-exporter-30.23.18.141\",\n    \"Name\": \"node-exporter\",\n    \"Tags\": [\n        \"node-exporter\"\n    ],\n    \"Address\": \"30.23.18.141\",\n    \"Port\": 9100,\n    \"Meta\": {\n        \"env\": \"test\",\n        \"project\": \"eex\"\n    },\n    \"EnableTagOverride\": false,\n    \"Checl\": {\n        \"HTTP\": \"http://30.23.18.141:9100/metrics\",\n        \"Interval\": \"10s\"\n    },\n    \"Weights\": {\n        \"Passing\": 10,\n        \"Warning\": 1\n    }\n}\n```\n\n\n\n> Tag字段用于prometheus进行分类，meta中的信息可以随便写。\n\n\n\n在安装好node_exporter的服务器上，执行下面的命令注册到consul：\n\n```bash\n$ curl --request PUT --data @consul.json http://10.25.85.104:8500/v1/agent/service/register?replace-existing-checks=1\n```\n\n\n\n执行完毕后，刷新页面发现node_exporter已经注册进来了。\n\n![](zhuce.png)\n\n\n\n<br>\n\n\n\n# prometheus配置服务发现\n\n编辑prometheus配置文件`prometheus.yml` 实现服务发现：\n\n```yaml\n- job_name: 'consul_node-exporter'\n  consul_sd_configs:\n    - server: '10.25.85.104:8500'\n      services: []\n  relabel_configs:\n    - source_labels: [__meta_consul_tags]\n      regex: .*node-exporter.*\n      action: keep\n    - regex: __meta_consul_service_metadata_(.+)\n      action: labelmap\n```\n\n- `consul_sd_configs`表明使用consul服务发现机制；\n\n- `relable_configs`中的第一段表示只保留`__meta_consul_tags`中包含`node-exporter`的对象；\n\n- `relable_configs`中的第二段表示匹配`__meta_consul_service_metadata`开头的标签并将捕获到的内容作为新的标签名称；\n\n  \n\n执行下面的命令让prometheus检查配置并重新加载：\n\n```bash\n# 检查配置是否正确\npromtool check config ./prometheus.yml\n\n# 动态加载配置\ncurl -XPOST http://10.25.85.104:9090/-/reload\n```\n\n\n\n在prometheus界面上可以看到注册到consul的node_exporter已经被prometheus发现：\n\n![](find.png)\n\n\n\n‌<br>\n\n\n\n# 通过consul集群自动发现\n\n\n\n## consul集群规划\n\n| 角色     | IP           | 端口 |\n| -------- | ------------ | ---- |\n| leader   | 30.23.105.83 | 8500 |\n| follower | 30.23.107.10 | 8500 |\n| follower | 30.23.8.76   | 8500 |\n\n\n\n## 下载安装consul\n\n在3台节点上都下载consul安装包：\n\n```bash\n$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip\n$ unzip consul_1.7.2_linux_amd64.zip\n$ mv consul /usr/local/bin\n$ mkdir /data/consul\n$ mkdir /usr/local/consul\n```\n\n\n\n## 设置配置文件\n\n在每一个节点上设置consul的配置文件：\n\n```bash\n$ cat > /usr/local/consul/consul.json << EOF\n{\n  \"datacenter\": \"dc1\",\n  \"data_dir\": \"/data/consul\",\n  \"log_level\": \"INFO\",\n  \"server\": true,\n  \"node_name\": \"node1-30.23.105.83\",\n  \"ui\": true,\n  \"bind_addr\": \"30.23.105.83\",\n  \"client_addr\": \"0.0.0.0\",\n  \"advertise_addr\": \"30.23.105.83\",\n  \"bootstrap_expect\": 3,\n  \"ports\":{\n    \"http\": 8500,\n    \"dns\": 8600,\n    \"server\": 8300,\n    \"serf_lan\": 8301,\n    \"serf_wan\": 8302\n    }\n}\nEOF\n```\n\n\n\n**注意修改每个节点配置文件中的节点名称和ip地址**\n\n\n\n相关参数：\n\n- `datacenter`：数据中心名称；\n- `data_dir`*：*数据存放本地目录；\n- `log_level`*：输出的日志级别；*\n- `server`*：*以 server 身份启动实例，不指定默认为 `client` ；\n- `node_name`：节点名称，集群中每个 node 名称不能重复，默认情况使用节点hostname\n- `ui`：指定是否可以访问 UI 界面； \n- `bind_addr`：Consul 监听的地址，必须能够被集群中所有节点访问，默认为`0.0.0.0 `；\n- `client_addr`：客户端监听地址，`0.0.0.0 `表示所有网段都可以访问；\n-  `advertise_addr`：集群广播地址 ；\n- `bootstrap_expect`：集群要求的最少成员数量 ；\n- `ports`：该参数详细配置各个服务端口，如果想指定其他端口，可以修改这里；\n\n‌\n\n## 启动主节点\n\n首先在leader服务器上启动服务：\n\n```bash\n$ nohup consul agent -config-dir=/usr/local/consul/consul.json > /usr/local/consul/consul.log 2>&1 &\n```\n\n\n\n启动后会发现有`failed to sync remote state: No cluster leader` 的报错，是因为在配置文件中指定了`bootstrap_expect`为3，故需要有三个节点集群才能正常启动，继续启动其他节点。\n\n\n\n## 启动从节点\n\n使用下面的命令启动其他节点并加入leader：\n\n```bash\n$ nohup consul agent -config-dir=/usr/local/consul/consul.json -join 30.23.105.83:8301 > /usr/local/consul/consul.log 2>&1 &\n```\n\n\n\n## 检查\n\n启动完成后通过访问任意节点8500端口，打卡consul页面，可以看到三个节点都注册进来了：\n\n![](cluster.png)\n\n\n\n也可以通过下面的命令查看集群节点的情况：\n\n```bash\n# 查看集群状态\n$ consul operator raft list-peers\n\n# 查看节点状态\n$ consul members\n```\n\n\n\n## 配置nginx代理consul集群\n\n使用nginx作为consul集群的统一入口，nginx相关配置如下：\n\n```nginx\nupstream service_consul {\n    server 30.23.105.83:8500;\n    server 30.23.107.10:8500;\n    server 30.23.8.76:8500;\n    ip_hash;\n}\n\nserver {\n    listen       80;\n    server_name  30.23.105.83;\n    index  index.html index.htm;    \n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        add_header Access-Control-Allow-Origin *;\n        proxy_next_upstream http_502 http_504 error timeout invalid_header;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://service_consul;    \n    }\n\n    access_log /var/log/consul.access.log;\n    error_log /var/log/consul.error.log;    \n\n    error_page  404              /404.html;\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n```\n\n>  这样通过nginx的80端口就可以访问consul集群了，在prometheus也只需要配置nginx的80端口即可。\n\n\n\n\n\n\n\n‌\n\n","slug":"Prometheus基于consul自动发现节点","published":1,"updated":"2020-07-31T02:09:49.446Z","_id":"ckd9ka1jz0000yan0duvpf880","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"为什么使用consul\"><a href=\"#为什么使用consul\" class=\"headerlink\" title=\"为什么使用consul\"></a>为什么使用consul</h1><p>当新增了一个监控节点（例如新部署了一个node_exporter），往往需要修改prometheus的配置文件来增加节点信息。prometheus支持使用多种服务发现类型来自动加入监控节点，其中就包含consul。</p>\n<p>所以只需要将新增的节点注册到consul中，prometheus会自动加入到监控。</p>\n<br>\n\n\n\n<h1 id=\"部署consul\"><a href=\"#部署consul\" class=\"headerlink\" title=\"部署consul\"></a>部署consul</h1><h2 id=\"二进制部署\"><a href=\"#二进制部署\" class=\"headerlink\" title=\"二进制部署\"></a>二进制部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ unzip consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ mkdir /data1/consul</span><br><span class=\"line\">$ nohup ./consul agent -server -client=10.25.85.104 -<span class=\"built_in\">bind</span>=10.25.85.104 -data-dir=/data1/consul -bootstrap -ui &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>相关参数：</p>\n<ul>\n<li><code>-server</code>：启动server模式；</li>\n<li><code>-client</code>：设置客户端地址；</li>\n<li><code>-bind</code>：设置集群通信绑定的地址；</li>\n<li><code>-data-dir</code>：数据目录；</li>\n<li><code>-bootstrap</code>：设定自己为leader而不进行选举；</li>\n<li><code>-ui</code>：启动内置管理界面；</li>\n</ul>\n<h2 id=\"容器化部署\"><a href=\"#容器化部署\" class=\"headerlink\" title=\"容器化部署\"></a>容器化部署</h2><p>直接下载并运行最新版consul镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name consul -d -p 8500:8500 consul</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h2><p>直接通过浏览器访问consul节点的8500端口即可进入consul的默认界面：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"consul-index.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"注册node-exporter到consul\"><a href=\"#注册node-exporter到consul\" class=\"headerlink\" title=\"注册node_exporter到consul\"></a>注册node_exporter到consul</h1><p>准备一个用于注册的json数据文件<code>consul.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ID\"</span>: <span class=\"string\">\"node-exporter-30.23.18.141\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Name\"</span>: <span class=\"string\">\"node-exporter\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Tags\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node-exporter\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"Address\"</span>: <span class=\"string\">\"30.23.18.141\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Port\"</span>: <span class=\"number\">9100</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Meta\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"env\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"project\"</span>: <span class=\"string\">\"eex\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"EnableTagOverride\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Checl\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"HTTP\"</span>: <span class=\"string\">\"http://30.23.18.141:9100/metrics\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"Interval\"</span>: <span class=\"string\">\"10s\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"Weights\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"Passing\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"Warning\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>Tag字段用于prometheus进行分类，meta中的信息可以随便写。</p>\n</blockquote>\n<p>在安装好node_exporter的服务器上，执行下面的命令注册到consul：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --request PUT --data @consul.json http://10.25.85.104:8500/v1/agent/service/register?replace-existing-checks=1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行完毕后，刷新页面发现node_exporter已经注册进来了。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"zhuce.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"prometheus配置服务发现\"><a href=\"#prometheus配置服务发现\" class=\"headerlink\" title=\"prometheus配置服务发现\"></a>prometheus配置服务发现</h1><p>编辑prometheus配置文件<code>prometheus.yml</code> 实现服务发现：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'consul_node-exporter'</span></span><br><span class=\"line\">  <span class=\"attr\">consul_sd_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">server:</span> <span class=\"string\">'10.25.85.104:8500'</span></span><br><span class=\"line\">      <span class=\"attr\">services:</span> <span class=\"string\">[]</span></span><br><span class=\"line\">  <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_consul_tags]</span></span><br><span class=\"line\">      <span class=\"attr\">regex:</span> <span class=\"string\">.*node-exporter.*</span></span><br><span class=\"line\">      <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">regex:</span> <span class=\"string\">__meta_consul_service_metadata_(.+)</span></span><br><span class=\"line\">      <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>consul_sd_configs</code>表明使用consul服务发现机制；</p>\n</li>\n<li><p><code>relable_configs</code>中的第一段表示只保留<code>__meta_consul_tags</code>中包含<code>node-exporter</code>的对象；</p>\n</li>\n<li><p><code>relable_configs</code>中的第二段表示匹配<code>__meta_consul_service_metadata</code>开头的标签并将捕获到的内容作为新的标签名称；</p>\n</li>\n</ul>\n<p>执行下面的命令让prometheus检查配置并重新加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查配置是否正确</span></span><br><span class=\"line\">promtool check config ./prometheus.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 动态加载配置</span></span><br><span class=\"line\">curl -XPOST http://10.25.85.104:9090/-/reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在prometheus界面上可以看到注册到consul的node_exporter已经被prometheus发现：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"find.png\" alt=\"\"></p>\n<p>‌<br></p>\n<h1 id=\"通过consul集群自动发现\"><a href=\"#通过consul集群自动发现\" class=\"headerlink\" title=\"通过consul集群自动发现\"></a>通过consul集群自动发现</h1><h2 id=\"consul集群规划\"><a href=\"#consul集群规划\" class=\"headerlink\" title=\"consul集群规划\"></a>consul集群规划</h2><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n<th>端口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>leader</td>\n<td>30.23.105.83</td>\n<td>8500</td>\n</tr>\n<tr>\n<td>follower</td>\n<td>30.23.107.10</td>\n<td>8500</td>\n</tr>\n<tr>\n<td>follower</td>\n<td>30.23.8.76</td>\n<td>8500</td>\n</tr>\n</tbody></table>\n<h2 id=\"下载安装consul\"><a href=\"#下载安装consul\" class=\"headerlink\" title=\"下载安装consul\"></a>下载安装consul</h2><p>在3台节点上都下载consul安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ unzip consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ mv consul /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\">$ mkdir /data/consul</span><br><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/consul</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>在每一个节点上设置consul的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /usr/<span class=\"built_in\">local</span>/consul/consul.json &lt;&lt; EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"datacenter\"</span>: <span class=\"string\">\"dc1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"data_dir\"</span>: <span class=\"string\">\"/data/consul\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"log_level\"</span>: <span class=\"string\">\"INFO\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"server\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"node_name\"</span>: <span class=\"string\">\"node1-30.23.105.83\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ui\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"bind_addr\"</span>: <span class=\"string\">\"30.23.105.83\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"client_addr\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"advertise_addr\"</span>: <span class=\"string\">\"30.23.105.83\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"bootstrap_expect\"</span>: 3,</span><br><span class=\"line\">  <span class=\"string\">\"ports\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: 8500,</span><br><span class=\"line\">    <span class=\"string\">\"dns\"</span>: 8600,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: 8300,</span><br><span class=\"line\">    <span class=\"string\">\"serf_lan\"</span>: 8301,</span><br><span class=\"line\">    <span class=\"string\">\"serf_wan\"</span>: 8302</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意修改每个节点配置文件中的节点名称和ip地址</strong></p>\n<p>相关参数：</p>\n<ul>\n<li><code>datacenter</code>：数据中心名称；</li>\n<li><code>data_dir</code><em>：</em>数据存放本地目录；</li>\n<li><code>log_level</code><em>：输出的日志级别；</em></li>\n<li><code>server</code><em>：</em>以 server 身份启动实例，不指定默认为 <code>client</code> ；</li>\n<li><code>node_name</code>：节点名称，集群中每个 node 名称不能重复，默认情况使用节点hostname</li>\n<li><code>ui</code>：指定是否可以访问 UI 界面； </li>\n<li><code>bind_addr</code>：Consul 监听的地址，必须能够被集群中所有节点访问，默认为<code>0.0.0.0</code>；</li>\n<li><code>client_addr</code>：客户端监听地址，<code>0.0.0.0</code>表示所有网段都可以访问；</li>\n<li><code>advertise_addr</code>：集群广播地址 ；</li>\n<li><code>bootstrap_expect</code>：集群要求的最少成员数量 ；</li>\n<li><code>ports</code>：该参数详细配置各个服务端口，如果想指定其他端口，可以修改这里；</li>\n</ul>\n<p>‌</p>\n<h2 id=\"启动主节点\"><a href=\"#启动主节点\" class=\"headerlink\" title=\"启动主节点\"></a>启动主节点</h2><p>首先在leader服务器上启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup consul agent -config-dir=/usr/<span class=\"built_in\">local</span>/consul/consul.json &gt; /usr/<span class=\"built_in\">local</span>/consul/consul.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动后会发现有<code>failed to sync remote state: No cluster leader</code> 的报错，是因为在配置文件中指定了<code>bootstrap_expect</code>为3，故需要有三个节点集群才能正常启动，继续启动其他节点。</p>\n<h2 id=\"启动从节点\"><a href=\"#启动从节点\" class=\"headerlink\" title=\"启动从节点\"></a>启动从节点</h2><p>使用下面的命令启动其他节点并加入leader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup consul agent -config-dir=/usr/<span class=\"built_in\">local</span>/consul/consul.json -join 30.23.105.83:8301 &gt; /usr/<span class=\"built_in\">local</span>/consul/consul.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>启动完成后通过访问任意节点8500端口，打卡consul页面，可以看到三个节点都注册进来了：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"cluster.png\" alt=\"\"></p>\n<p>也可以通过下面的命令查看集群节点的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群状态</span></span><br><span class=\"line\">$ consul operator raft list-peers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点状态</span></span><br><span class=\"line\">$ consul members</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置nginx代理consul集群\"><a href=\"#配置nginx代理consul集群\" class=\"headerlink\" title=\"配置nginx代理consul集群\"></a>配置nginx代理consul集群</h2><p>使用nginx作为consul集群的统一入口，nginx相关配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> service_consul &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">30.23.105.83:8500</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">30.23.107.10:8500</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">30.23.8.76:8500</span>;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  <span class=\"number\">30.23.105.83</span>;</span><br><span class=\"line\">    <span class=\"attribute\">index</span>  index.html index.htm;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_next_upstream</span> http_502 http_504 <span class=\"literal\">error</span> timeout invalid_header;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://service_consul;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/consul.access.log;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/consul.<span class=\"literal\">error</span>.log;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>  <span class=\"number\">404</span>              /<span class=\"number\">404</span>.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 这样通过nginx的80端口就可以访问consul集群了，在prometheus也只需要配置nginx的80端口即可。</p>\n</blockquote>\n<p>‌</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么使用consul\"><a href=\"#为什么使用consul\" class=\"headerlink\" title=\"为什么使用consul\"></a>为什么使用consul</h1><p>当新增了一个监控节点（例如新部署了一个node_exporter），往往需要修改prometheus的配置文件来增加节点信息。prometheus支持使用多种服务发现类型来自动加入监控节点，其中就包含consul。</p>\n<p>所以只需要将新增的节点注册到consul中，prometheus会自动加入到监控。</p>\n<br>\n\n\n\n<h1 id=\"部署consul\"><a href=\"#部署consul\" class=\"headerlink\" title=\"部署consul\"></a>部署consul</h1><h2 id=\"二进制部署\"><a href=\"#二进制部署\" class=\"headerlink\" title=\"二进制部署\"></a>二进制部署</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ unzip consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ mkdir /data1/consul</span><br><span class=\"line\">$ nohup ./consul agent -server -client=10.25.85.104 -<span class=\"built_in\">bind</span>=10.25.85.104 -data-dir=/data1/consul -bootstrap -ui &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>相关参数：</p>\n<ul>\n<li><code>-server</code>：启动server模式；</li>\n<li><code>-client</code>：设置客户端地址；</li>\n<li><code>-bind</code>：设置集群通信绑定的地址；</li>\n<li><code>-data-dir</code>：数据目录；</li>\n<li><code>-bootstrap</code>：设定自己为leader而不进行选举；</li>\n<li><code>-ui</code>：启动内置管理界面；</li>\n</ul>\n<h2 id=\"容器化部署\"><a href=\"#容器化部署\" class=\"headerlink\" title=\"容器化部署\"></a>容器化部署</h2><p>直接下载并运行最新版consul镜像。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name consul -d -p 8500:8500 consul</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h2><p>直接通过浏览器访问consul节点的8500端口即可进入consul的默认界面：</p>\n<p><img src=\"consul-index.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"注册node-exporter到consul\"><a href=\"#注册node-exporter到consul\" class=\"headerlink\" title=\"注册node_exporter到consul\"></a>注册node_exporter到consul</h1><p>准备一个用于注册的json数据文件<code>consul.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ID\"</span>: <span class=\"string\">\"node-exporter-30.23.18.141\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Name\"</span>: <span class=\"string\">\"node-exporter\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Tags\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"node-exporter\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"Address\"</span>: <span class=\"string\">\"30.23.18.141\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Port\"</span>: <span class=\"number\">9100</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Meta\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"env\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"project\"</span>: <span class=\"string\">\"eex\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"EnableTagOverride\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Checl\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"HTTP\"</span>: <span class=\"string\">\"http://30.23.18.141:9100/metrics\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"Interval\"</span>: <span class=\"string\">\"10s\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"Weights\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"Passing\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"Warning\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>Tag字段用于prometheus进行分类，meta中的信息可以随便写。</p>\n</blockquote>\n<p>在安装好node_exporter的服务器上，执行下面的命令注册到consul：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --request PUT --data @consul.json http://10.25.85.104:8500/v1/agent/service/register?replace-existing-checks=1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行完毕后，刷新页面发现node_exporter已经注册进来了。</p>\n<p><img src=\"zhuce.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"prometheus配置服务发现\"><a href=\"#prometheus配置服务发现\" class=\"headerlink\" title=\"prometheus配置服务发现\"></a>prometheus配置服务发现</h1><p>编辑prometheus配置文件<code>prometheus.yml</code> 实现服务发现：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'consul_node-exporter'</span></span><br><span class=\"line\">  <span class=\"attr\">consul_sd_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">server:</span> <span class=\"string\">'10.25.85.104:8500'</span></span><br><span class=\"line\">      <span class=\"attr\">services:</span> <span class=\"string\">[]</span></span><br><span class=\"line\">  <span class=\"attr\">relabel_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">source_labels:</span> <span class=\"string\">[__meta_consul_tags]</span></span><br><span class=\"line\">      <span class=\"attr\">regex:</span> <span class=\"string\">.*node-exporter.*</span></span><br><span class=\"line\">      <span class=\"attr\">action:</span> <span class=\"string\">keep</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">regex:</span> <span class=\"string\">__meta_consul_service_metadata_(.+)</span></span><br><span class=\"line\">      <span class=\"attr\">action:</span> <span class=\"string\">labelmap</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>consul_sd_configs</code>表明使用consul服务发现机制；</p>\n</li>\n<li><p><code>relable_configs</code>中的第一段表示只保留<code>__meta_consul_tags</code>中包含<code>node-exporter</code>的对象；</p>\n</li>\n<li><p><code>relable_configs</code>中的第二段表示匹配<code>__meta_consul_service_metadata</code>开头的标签并将捕获到的内容作为新的标签名称；</p>\n</li>\n</ul>\n<p>执行下面的命令让prometheus检查配置并重新加载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查配置是否正确</span></span><br><span class=\"line\">promtool check config ./prometheus.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 动态加载配置</span></span><br><span class=\"line\">curl -XPOST http://10.25.85.104:9090/-/reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在prometheus界面上可以看到注册到consul的node_exporter已经被prometheus发现：</p>\n<p><img src=\"find.png\" alt=\"\"></p>\n<p>‌<br></p>\n<h1 id=\"通过consul集群自动发现\"><a href=\"#通过consul集群自动发现\" class=\"headerlink\" title=\"通过consul集群自动发现\"></a>通过consul集群自动发现</h1><h2 id=\"consul集群规划\"><a href=\"#consul集群规划\" class=\"headerlink\" title=\"consul集群规划\"></a>consul集群规划</h2><table>\n<thead>\n<tr>\n<th>角色</th>\n<th>IP</th>\n<th>端口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>leader</td>\n<td>30.23.105.83</td>\n<td>8500</td>\n</tr>\n<tr>\n<td>follower</td>\n<td>30.23.107.10</td>\n<td>8500</td>\n</tr>\n<tr>\n<td>follower</td>\n<td>30.23.8.76</td>\n<td>8500</td>\n</tr>\n</tbody></table>\n<h2 id=\"下载安装consul\"><a href=\"#下载安装consul\" class=\"headerlink\" title=\"下载安装consul\"></a>下载安装consul</h2><p>在3台节点上都下载consul安装包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://releases.hashicorp.com/consul/1.7.2/consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ unzip consul_1.7.2_linux_amd64.zip</span><br><span class=\"line\">$ mv consul /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\">$ mkdir /data/consul</span><br><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/consul</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>在每一个节点上设置consul的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &gt; /usr/<span class=\"built_in\">local</span>/consul/consul.json &lt;&lt; EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"datacenter\"</span>: <span class=\"string\">\"dc1\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"data_dir\"</span>: <span class=\"string\">\"/data/consul\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"log_level\"</span>: <span class=\"string\">\"INFO\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"server\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"node_name\"</span>: <span class=\"string\">\"node1-30.23.105.83\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ui\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"bind_addr\"</span>: <span class=\"string\">\"30.23.105.83\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"client_addr\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"advertise_addr\"</span>: <span class=\"string\">\"30.23.105.83\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"bootstrap_expect\"</span>: 3,</span><br><span class=\"line\">  <span class=\"string\">\"ports\"</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: 8500,</span><br><span class=\"line\">    <span class=\"string\">\"dns\"</span>: 8600,</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>: 8300,</span><br><span class=\"line\">    <span class=\"string\">\"serf_lan\"</span>: 8301,</span><br><span class=\"line\">    <span class=\"string\">\"serf_wan\"</span>: 8302</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意修改每个节点配置文件中的节点名称和ip地址</strong></p>\n<p>相关参数：</p>\n<ul>\n<li><code>datacenter</code>：数据中心名称；</li>\n<li><code>data_dir</code><em>：</em>数据存放本地目录；</li>\n<li><code>log_level</code><em>：输出的日志级别；</em></li>\n<li><code>server</code><em>：</em>以 server 身份启动实例，不指定默认为 <code>client</code> ；</li>\n<li><code>node_name</code>：节点名称，集群中每个 node 名称不能重复，默认情况使用节点hostname</li>\n<li><code>ui</code>：指定是否可以访问 UI 界面； </li>\n<li><code>bind_addr</code>：Consul 监听的地址，必须能够被集群中所有节点访问，默认为<code>0.0.0.0</code>；</li>\n<li><code>client_addr</code>：客户端监听地址，<code>0.0.0.0</code>表示所有网段都可以访问；</li>\n<li><code>advertise_addr</code>：集群广播地址 ；</li>\n<li><code>bootstrap_expect</code>：集群要求的最少成员数量 ；</li>\n<li><code>ports</code>：该参数详细配置各个服务端口，如果想指定其他端口，可以修改这里；</li>\n</ul>\n<p>‌</p>\n<h2 id=\"启动主节点\"><a href=\"#启动主节点\" class=\"headerlink\" title=\"启动主节点\"></a>启动主节点</h2><p>首先在leader服务器上启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup consul agent -config-dir=/usr/<span class=\"built_in\">local</span>/consul/consul.json &gt; /usr/<span class=\"built_in\">local</span>/consul/consul.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动后会发现有<code>failed to sync remote state: No cluster leader</code> 的报错，是因为在配置文件中指定了<code>bootstrap_expect</code>为3，故需要有三个节点集群才能正常启动，继续启动其他节点。</p>\n<h2 id=\"启动从节点\"><a href=\"#启动从节点\" class=\"headerlink\" title=\"启动从节点\"></a>启动从节点</h2><p>使用下面的命令启动其他节点并加入leader：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup consul agent -config-dir=/usr/<span class=\"built_in\">local</span>/consul/consul.json -join 30.23.105.83:8301 &gt; /usr/<span class=\"built_in\">local</span>/consul/consul.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>启动完成后通过访问任意节点8500端口，打卡consul页面，可以看到三个节点都注册进来了：</p>\n<p><img src=\"cluster.png\" alt=\"\"></p>\n<p>也可以通过下面的命令查看集群节点的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看集群状态</span></span><br><span class=\"line\">$ consul operator raft list-peers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点状态</span></span><br><span class=\"line\">$ consul members</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置nginx代理consul集群\"><a href=\"#配置nginx代理consul集群\" class=\"headerlink\" title=\"配置nginx代理consul集群\"></a>配置nginx代理consul集群</h2><p>使用nginx作为consul集群的统一入口，nginx相关配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> service_consul &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">30.23.105.83:8500</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">30.23.107.10:8500</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">30.23.8.76:8500</span>;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  <span class=\"number\">30.23.105.83</span>;</span><br><span class=\"line\">    <span class=\"attribute\">index</span>  index.html index.htm;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_next_upstream</span> http_502 http_504 <span class=\"literal\">error</span> timeout invalid_header;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://service_consul;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/consul.access.log;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/consul.<span class=\"literal\">error</span>.log;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>  <span class=\"number\">404</span>              /<span class=\"number\">404</span>.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span>   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 这样通过nginx的80端口就可以访问consul集群了，在prometheus也只需要配置nginx的80端口即可。</p>\n</blockquote>\n<p>‌</p>\n"},{"title":"Django分页查询","date":"2020-07-31T05:44:44.000Z","description":"Django分页查询","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596184483878&di=c347e6459c1c3d225c06840cd19f59b9&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171204%2F9d4fde3a60ee4b0c9d3b3a5ea336df18.jpeg","_content":"\n\n\n在django做查询接口的时候往往需要做分页查询，根据前端传过来的页码和每页行数来进行查询。\n\n\n\n在后端使用django 自带的分页器进行分页：\n\n```python\nimport json\nfrom django.http import JsonResponse\nfrom django.core.paginator import Paginator\n\nfrom infrastructer import models\nfrom ipaas.utils import DeviceTypeSerializer\n\n\ndef v1_query_devicetype(request):\n    if request.method != 'POST':\n        err_msg = \"Error http method {}\".format(request.method)\n        return JsonResponse({\"status\": 1, \"msg\": err_msg})\n\n    page = int(json.loads(request.body)['page'])\n    page_size = int(json.loads(request.body)['limit'])\n\n    try:\n        all_data = models.DeviceType.objects.filter(is_delete=0)\n        paginator = Paginator(all_data, page_size)\n        query_data = paginator.get_page(page)\n        devicetype_data = [DeviceTypeSerializer(i).data for i in query_data]\n        ok_msg = \"query devicetype success.\"\n        return JsonResponse({\"status\": 0, \"msg\": ok_msg, \"total\": len(all_data), \"data\": devicetype_data})\n    except Exception as e:\n        err_msg = \"query devicetype failed, {}\".format(e)\n        return JsonResponse({\"status\": 1, \"msg\": err_msg, \"data\": []})\n```\n\n\n\n1. 首先判断请求是否为`POST`请求；\n2. 要求前端传入`page`：页码，`limit`：每页的行数；\n3. 获取到全部的数据，通过分页器根据每页行数进行划分；\n4. 使用`get_page`方法根据页码获取该页的数据；\n5. 使用序列化工具进行数据序列化，返回给前端；\n\n","source":"_posts/Django分页查询.md","raw":"---\ntitle: Django分页查询\ndate: 2020-07-31 13:44:44\ntags:\n- Django\ncategories:\n- python web开发\n- Django\ndescription: Django分页查询\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596184483878&di=c347e6459c1c3d225c06840cd19f59b9&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171204%2F9d4fde3a60ee4b0c9d3b3a5ea336df18.jpeg\n---\n\n\n\n在django做查询接口的时候往往需要做分页查询，根据前端传过来的页码和每页行数来进行查询。\n\n\n\n在后端使用django 自带的分页器进行分页：\n\n```python\nimport json\nfrom django.http import JsonResponse\nfrom django.core.paginator import Paginator\n\nfrom infrastructer import models\nfrom ipaas.utils import DeviceTypeSerializer\n\n\ndef v1_query_devicetype(request):\n    if request.method != 'POST':\n        err_msg = \"Error http method {}\".format(request.method)\n        return JsonResponse({\"status\": 1, \"msg\": err_msg})\n\n    page = int(json.loads(request.body)['page'])\n    page_size = int(json.loads(request.body)['limit'])\n\n    try:\n        all_data = models.DeviceType.objects.filter(is_delete=0)\n        paginator = Paginator(all_data, page_size)\n        query_data = paginator.get_page(page)\n        devicetype_data = [DeviceTypeSerializer(i).data for i in query_data]\n        ok_msg = \"query devicetype success.\"\n        return JsonResponse({\"status\": 0, \"msg\": ok_msg, \"total\": len(all_data), \"data\": devicetype_data})\n    except Exception as e:\n        err_msg = \"query devicetype failed, {}\".format(e)\n        return JsonResponse({\"status\": 1, \"msg\": err_msg, \"data\": []})\n```\n\n\n\n1. 首先判断请求是否为`POST`请求；\n2. 要求前端传入`page`：页码，`limit`：每页的行数；\n3. 获取到全部的数据，通过分页器根据每页行数进行划分；\n4. 使用`get_page`方法根据页码获取该页的数据；\n5. 使用序列化工具进行数据序列化，返回给前端；\n\n","slug":"Django分页查询","published":1,"updated":"2020-08-03T07:31:27.387Z","_id":"ckd9tk9sk000095n0gn3bermo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在django做查询接口的时候往往需要做分页查询，根据前端传过来的页码和每页行数来进行查询。</p>\n<p>在后端使用django 自带的分页器进行分页：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> JsonResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.paginator <span class=\"keyword\">import</span> Paginator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> infrastructer <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"keyword\">from</span> ipaas.utils <span class=\"keyword\">import</span> DeviceTypeSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">v1_query_devicetype</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method != <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        err_msg = <span class=\"string\">\"Error http method &#123;&#125;\"</span>.format(request.method)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"msg\"</span>: err_msg&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    page = int(json.loads(request.body)[<span class=\"string\">'page'</span>])</span><br><span class=\"line\">    page_size = int(json.loads(request.body)[<span class=\"string\">'limit'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        all_data = models.DeviceType.objects.filter(is_delete=<span class=\"number\">0</span>)</span><br><span class=\"line\">        paginator = Paginator(all_data, page_size)</span><br><span class=\"line\">        query_data = paginator.get_page(page)</span><br><span class=\"line\">        devicetype_data = [DeviceTypeSerializer(i).data <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> query_data]</span><br><span class=\"line\">        ok_msg = <span class=\"string\">\"query devicetype success.\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"status\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"msg\"</span>: ok_msg, <span class=\"string\">\"total\"</span>: len(all_data), <span class=\"string\">\"data\"</span>: devicetype_data&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        err_msg = <span class=\"string\">\"query devicetype failed, &#123;&#125;\"</span>.format(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"msg\"</span>: err_msg, <span class=\"string\">\"data\"</span>: []&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>首先判断请求是否为<code>POST</code>请求；</li>\n<li>要求前端传入<code>page</code>：页码，<code>limit</code>：每页的行数；</li>\n<li>获取到全部的数据，通过分页器根据每页行数进行划分；</li>\n<li>使用<code>get_page</code>方法根据页码获取该页的数据；</li>\n<li>使用序列化工具进行数据序列化，返回给前端；</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在django做查询接口的时候往往需要做分页查询，根据前端传过来的页码和每页行数来进行查询。</p>\n<p>在后端使用django 自带的分页器进行分页：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> JsonResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.paginator <span class=\"keyword\">import</span> Paginator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> infrastructer <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"keyword\">from</span> ipaas.utils <span class=\"keyword\">import</span> DeviceTypeSerializer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">v1_query_devicetype</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method != <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        err_msg = <span class=\"string\">\"Error http method &#123;&#125;\"</span>.format(request.method)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"msg\"</span>: err_msg&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    page = int(json.loads(request.body)[<span class=\"string\">'page'</span>])</span><br><span class=\"line\">    page_size = int(json.loads(request.body)[<span class=\"string\">'limit'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        all_data = models.DeviceType.objects.filter(is_delete=<span class=\"number\">0</span>)</span><br><span class=\"line\">        paginator = Paginator(all_data, page_size)</span><br><span class=\"line\">        query_data = paginator.get_page(page)</span><br><span class=\"line\">        devicetype_data = [DeviceTypeSerializer(i).data <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> query_data]</span><br><span class=\"line\">        ok_msg = <span class=\"string\">\"query devicetype success.\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"status\"</span>: <span class=\"number\">0</span>, <span class=\"string\">\"msg\"</span>: ok_msg, <span class=\"string\">\"total\"</span>: len(all_data), <span class=\"string\">\"data\"</span>: devicetype_data&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        err_msg = <span class=\"string\">\"query devicetype failed, &#123;&#125;\"</span>.format(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"status\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"msg\"</span>: err_msg, <span class=\"string\">\"data\"</span>: []&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>首先判断请求是否为<code>POST</code>请求；</li>\n<li>要求前端传入<code>page</code>：页码，<code>limit</code>：每页的行数；</li>\n<li>获取到全部的数据，通过分页器根据每页行数进行划分；</li>\n<li>使用<code>get_page</code>方法根据页码获取该页的数据；</li>\n<li>使用序列化工具进行数据序列化，返回给前端；</li>\n</ol>\n"},{"title":"LVS工作模式","date":"2020-07-31T09:05:12.000Z","description":"LVS的基本原理和工作模式","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596197516039&di=09370d927f3ac65e9b6ff0ba27464d89&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F01%2F49%2F56%2F20574472b06fb5e.jpg","_content":"\n\n\n# LVS介绍\n\n## 什么是lvs\n\nlvs（Linux Virtual Server），是一种4层的负载均衡调度器并集成在Linux内核，由阿里章文嵩博士开发，并在各大互联网公司广泛应用。\n\n \n\n在LVS架构中，VS表示调度服务器，负责请求的调度，RS表示后端实际提供服务的服务器。\n\n \n\n## 工作原理\n\nVS根据请求报文的目标IP、目标协议及端口，并根据相应的调度算法将其调度到后端的某台RS上。\n\n \n\nlvs使用的是内核中ipvs工具实现调度功能。ipvs工作于内核空间netfilter的INPUT上，用户可以使用ipvsadm实现对ipvs的管理。\n\n \n\n## lvs的类型\n\nlvs分为如下的几种类型：\n\n-  nat：修改请求报文的目标ip，是多ip的DNAT；\n-  tun：在原请求报文之外新加一个ip首部；\n-  DR：操作封装新的mac地址；\n-  fullnat：修改请求报文的源和目标ip；\n\n\n\n<br>\n\n\n\n# NAT工作模式\n\n## 模型原理\n\nlvs的NAT模型解决了DNAT一对一转发的缺陷，实现了一对多的DNAT转发。\n\n其通过修改目标地址的IP来实现将请求转发到后端RS服务器上，RS服务器处理完成请求后请求报文还要经过调度器，调度器将响应报文的源IP修改为调度器的VIP后发给客户端。\n\n\n\n<img src=\"nat.png\" style=\"zoom:75%;\" />\n\n\n\n***\\*支持端口映射，可修改请求报文的目标端口\\****\n\n\n\n## 模型拓扑图\n\n<img src=\"nat-tuopu.png\" style=\"zoom:80%;\" />\n\n\n\n## 优势、缺陷及注意事项\n\n优点是：\n\n1. RS服务器可以运行任何支持TCP/IP的操作系统；\n2. 它只需要一个IP地址配置在调度器上，服务器组可以用私有的 IP 地址；\n\n\n\n缺点是：\n\n1. 它的伸缩能力有限，当服务器结点数目升到20时，调度器本身性能有可能成为系统的新瓶颈，因为在NAT模型中请求和响应报文都需要通过负载调度器。\n\n\n\n需要注意的是：\n\n1. RS的IP（RIP）和调度器内网IP（DIP）应在同一网络中（不是必须）且使用私网地址，RS网关指向DIP；\n2. 调度器必须是Linux系统，RS可以是任何系统；\n\n<br>\n\n\n\n# DR模型\n\n## 工作原理\n\nDR模型叫做直接路由，是LVS的默认模式，其实现是通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是选择的RS的RIP所在接口的MAC，其余IP和端口不变。\n\n\n\nVIP地址为调度器和RS服务器组共享，调度器配置的VIP地址是对外可见的，用于接收虚拟服务的请求报文；所有的服务器把VIP地址配置在各自的Non-ARP网络设备上，它对外面是不可见的，只是用于处理目标地址为VIP的网络请求。RS将响应报文直接回送给客户端。\n\n\n\n![img](dr.png?lastModify=1596187584)\n\n\n\n## 模式拓扑图\n\n![img](dr-tuopu.png?lastModify=1596187584)\n\n\n\n## 优势、缺陷及注意事项\n\n优势是：\n\n1. DR模式下负载调度器中只负责调度请求，而RS直接将响应返回给客户，可以极大地提高整个集群系统的吞吐量。\n\n\n\n缺陷是：\n\n1. DR模式不支持端口映射；\n\n\n\n需要注意的是：\n\n1. 调度器和RS都必须在物理上有一个网卡通过不分断的局域网相连，如通过交换机或者高速的 HUB 相连；\n2. 调度器和RS都要配置有VIP，且在RS上需要抑制arp；\n3. RIP网关不用指向DIP，RIP可以使用公网IP，但一般是私网IP；\n4. 调度器的vip的掩码没必要设置为32，也不要设置`route add -host $VIP dev eth0:0`，因为vip本来就是要像正常的IP地址一样对外通信；\n5. DR模式调度器跟RS是同一个网段，无需开启ip_forward转发；\n\n\n\n<br>\n\n\n\n# TUN模式\n\n## 模式原理\n\n不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而在请求报文之外再封装一个IP首部（源IP为DIP，目标IP为RIP），将报文发到选择的RS，RS响应后直接返回给客户端（源IP为VIP，目标IP为CIP）。\n\n\n\n在TUN的集群系统中，调度器只将请求调度到不同的RS，RS将应答的数据直接返回给用户。这样，调度器就可以处理大量的请求，它甚至可以调度百台以上的RS（同等规模的服务器），而它不会成为系统的瓶颈。即使调度器只有100Mbps的全双工网卡，整个系统的最大吞吐量可超过 1Gbps。\n\n\n\n## 拓扑图\n\n<img src=\"tun-tuopu.png\" style=\"zoom:76%;\" />\n\n\n\n## 优势、缺陷及注意事项\n\n优势是：\n\n1. TUN模式下效率更高，可以支持更多的后端服务器；\n\n\n\n缺陷是：\n\n1. TUN技术对服务器有要求，即所有的服务器必须支持IP Tunneling或者IP Encapsulation协议，且不支持端口映射；\n\n\n\n需要注意的是：\n\n1. DIP、VIP、RIP都应该是公网IP；\n2. RS网关一般不能指向DIP；\n\n<br>\n\n\n\n# FULLNAT模式\n\n## FULLNAT模式原理\n\n通过同时修改请求报文的源IP和目标IP进行转发，将CIP修改为DIP，将VIP修改为RIP。支持端口映射\n\n\n\n## 优势、缺陷\n\n优势是：\n\n1. 可以实现RS服务器和调度器异地部署；\n\n\n\n缺陷是：\n\n1. FULLNAT模式默认内核不支持；后端RS日志无法直接获取到实际客户端请求的IP地址；\n\n<br>\n\n\n\n# 各种模式的对比\n\n<img src=\"duibi.png\" style=\"zoom:75%;\" />\n\n\n\n<br>\n\n","source":"_posts/LVS工作模式.md","raw":"---\ntitle: LVS工作模式\ndate: 2020-07-31 17:05:12\ntags:\n- LVS\ncategories:\n- 负载均衡和高可用方案\n- LVS\ndescription: LVS的基本原理和工作模式\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596197516039&di=09370d927f3ac65e9b6ff0ba27464d89&imgtype=0&src=http%3A%2F%2Fbpic.588ku.com%2Felement_origin_min_pic%2F01%2F49%2F56%2F20574472b06fb5e.jpg\n---\n\n\n\n# LVS介绍\n\n## 什么是lvs\n\nlvs（Linux Virtual Server），是一种4层的负载均衡调度器并集成在Linux内核，由阿里章文嵩博士开发，并在各大互联网公司广泛应用。\n\n \n\n在LVS架构中，VS表示调度服务器，负责请求的调度，RS表示后端实际提供服务的服务器。\n\n \n\n## 工作原理\n\nVS根据请求报文的目标IP、目标协议及端口，并根据相应的调度算法将其调度到后端的某台RS上。\n\n \n\nlvs使用的是内核中ipvs工具实现调度功能。ipvs工作于内核空间netfilter的INPUT上，用户可以使用ipvsadm实现对ipvs的管理。\n\n \n\n## lvs的类型\n\nlvs分为如下的几种类型：\n\n-  nat：修改请求报文的目标ip，是多ip的DNAT；\n-  tun：在原请求报文之外新加一个ip首部；\n-  DR：操作封装新的mac地址；\n-  fullnat：修改请求报文的源和目标ip；\n\n\n\n<br>\n\n\n\n# NAT工作模式\n\n## 模型原理\n\nlvs的NAT模型解决了DNAT一对一转发的缺陷，实现了一对多的DNAT转发。\n\n其通过修改目标地址的IP来实现将请求转发到后端RS服务器上，RS服务器处理完成请求后请求报文还要经过调度器，调度器将响应报文的源IP修改为调度器的VIP后发给客户端。\n\n\n\n<img src=\"nat.png\" style=\"zoom:75%;\" />\n\n\n\n***\\*支持端口映射，可修改请求报文的目标端口\\****\n\n\n\n## 模型拓扑图\n\n<img src=\"nat-tuopu.png\" style=\"zoom:80%;\" />\n\n\n\n## 优势、缺陷及注意事项\n\n优点是：\n\n1. RS服务器可以运行任何支持TCP/IP的操作系统；\n2. 它只需要一个IP地址配置在调度器上，服务器组可以用私有的 IP 地址；\n\n\n\n缺点是：\n\n1. 它的伸缩能力有限，当服务器结点数目升到20时，调度器本身性能有可能成为系统的新瓶颈，因为在NAT模型中请求和响应报文都需要通过负载调度器。\n\n\n\n需要注意的是：\n\n1. RS的IP（RIP）和调度器内网IP（DIP）应在同一网络中（不是必须）且使用私网地址，RS网关指向DIP；\n2. 调度器必须是Linux系统，RS可以是任何系统；\n\n<br>\n\n\n\n# DR模型\n\n## 工作原理\n\nDR模型叫做直接路由，是LVS的默认模式，其实现是通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是选择的RS的RIP所在接口的MAC，其余IP和端口不变。\n\n\n\nVIP地址为调度器和RS服务器组共享，调度器配置的VIP地址是对外可见的，用于接收虚拟服务的请求报文；所有的服务器把VIP地址配置在各自的Non-ARP网络设备上，它对外面是不可见的，只是用于处理目标地址为VIP的网络请求。RS将响应报文直接回送给客户端。\n\n\n\n![img](dr.png?lastModify=1596187584)\n\n\n\n## 模式拓扑图\n\n![img](dr-tuopu.png?lastModify=1596187584)\n\n\n\n## 优势、缺陷及注意事项\n\n优势是：\n\n1. DR模式下负载调度器中只负责调度请求，而RS直接将响应返回给客户，可以极大地提高整个集群系统的吞吐量。\n\n\n\n缺陷是：\n\n1. DR模式不支持端口映射；\n\n\n\n需要注意的是：\n\n1. 调度器和RS都必须在物理上有一个网卡通过不分断的局域网相连，如通过交换机或者高速的 HUB 相连；\n2. 调度器和RS都要配置有VIP，且在RS上需要抑制arp；\n3. RIP网关不用指向DIP，RIP可以使用公网IP，但一般是私网IP；\n4. 调度器的vip的掩码没必要设置为32，也不要设置`route add -host $VIP dev eth0:0`，因为vip本来就是要像正常的IP地址一样对外通信；\n5. DR模式调度器跟RS是同一个网段，无需开启ip_forward转发；\n\n\n\n<br>\n\n\n\n# TUN模式\n\n## 模式原理\n\n不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而在请求报文之外再封装一个IP首部（源IP为DIP，目标IP为RIP），将报文发到选择的RS，RS响应后直接返回给客户端（源IP为VIP，目标IP为CIP）。\n\n\n\n在TUN的集群系统中，调度器只将请求调度到不同的RS，RS将应答的数据直接返回给用户。这样，调度器就可以处理大量的请求，它甚至可以调度百台以上的RS（同等规模的服务器），而它不会成为系统的瓶颈。即使调度器只有100Mbps的全双工网卡，整个系统的最大吞吐量可超过 1Gbps。\n\n\n\n## 拓扑图\n\n<img src=\"tun-tuopu.png\" style=\"zoom:76%;\" />\n\n\n\n## 优势、缺陷及注意事项\n\n优势是：\n\n1. TUN模式下效率更高，可以支持更多的后端服务器；\n\n\n\n缺陷是：\n\n1. TUN技术对服务器有要求，即所有的服务器必须支持IP Tunneling或者IP Encapsulation协议，且不支持端口映射；\n\n\n\n需要注意的是：\n\n1. DIP、VIP、RIP都应该是公网IP；\n2. RS网关一般不能指向DIP；\n\n<br>\n\n\n\n# FULLNAT模式\n\n## FULLNAT模式原理\n\n通过同时修改请求报文的源IP和目标IP进行转发，将CIP修改为DIP，将VIP修改为RIP。支持端口映射\n\n\n\n## 优势、缺陷\n\n优势是：\n\n1. 可以实现RS服务器和调度器异地部署；\n\n\n\n缺陷是：\n\n1. FULLNAT模式默认内核不支持；后端RS日志无法直接获取到实际客户端请求的IP地址；\n\n<br>\n\n\n\n# 各种模式的对比\n\n<img src=\"duibi.png\" style=\"zoom:75%;\" />\n\n\n\n<br>\n\n","slug":"LVS工作模式","published":1,"updated":"2020-08-07T05:57:13.978Z","_id":"ckda0xe8m0000pon0g4sbd2jk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"LVS介绍\"><a href=\"#LVS介绍\" class=\"headerlink\" title=\"LVS介绍\"></a>LVS介绍</h1><h2 id=\"什么是lvs\"><a href=\"#什么是lvs\" class=\"headerlink\" title=\"什么是lvs\"></a>什么是lvs</h2><p>lvs（Linux Virtual Server），是一种4层的负载均衡调度器并集成在Linux内核，由阿里章文嵩博士开发，并在各大互联网公司广泛应用。</p>\n<p>在LVS架构中，VS表示调度服务器，负责请求的调度，RS表示后端实际提供服务的服务器。</p>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>VS根据请求报文的目标IP、目标协议及端口，并根据相应的调度算法将其调度到后端的某台RS上。</p>\n<p>lvs使用的是内核中ipvs工具实现调度功能。ipvs工作于内核空间netfilter的INPUT上，用户可以使用ipvsadm实现对ipvs的管理。</p>\n<h2 id=\"lvs的类型\"><a href=\"#lvs的类型\" class=\"headerlink\" title=\"lvs的类型\"></a>lvs的类型</h2><p>lvs分为如下的几种类型：</p>\n<ul>\n<li>nat：修改请求报文的目标ip，是多ip的DNAT；</li>\n<li>tun：在原请求报文之外新加一个ip首部；</li>\n<li>DR：操作封装新的mac地址；</li>\n<li>fullnat：修改请求报文的源和目标ip；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"NAT工作模式\"><a href=\"#NAT工作模式\" class=\"headerlink\" title=\"NAT工作模式\"></a>NAT工作模式</h1><h2 id=\"模型原理\"><a href=\"#模型原理\" class=\"headerlink\" title=\"模型原理\"></a>模型原理</h2><p>lvs的NAT模型解决了DNAT一对一转发的缺陷，实现了一对多的DNAT转发。</p>\n<p>其通过修改目标地址的IP来实现将请求转发到后端RS服务器上，RS服务器处理完成请求后请求报文还要经过调度器，调度器将响应报文的源IP修改为调度器的VIP后发给客户端。</p>\n<img src= \"/img/loading.gif\" data-src=\"nat.png\" style=\"zoom:75%;\" />\n\n\n\n<p><strong><em>\\</em>支持端口映射，可修改请求报文的目标端口**</strong></p>\n<h2 id=\"模型拓扑图\"><a href=\"#模型拓扑图\" class=\"headerlink\" title=\"模型拓扑图\"></a>模型拓扑图</h2><img src= \"/img/loading.gif\" data-src=\"nat-tuopu.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"优势、缺陷及注意事项\"><a href=\"#优势、缺陷及注意事项\" class=\"headerlink\" title=\"优势、缺陷及注意事项\"></a>优势、缺陷及注意事项</h2><p>优点是：</p>\n<ol>\n<li>RS服务器可以运行任何支持TCP/IP的操作系统；</li>\n<li>它只需要一个IP地址配置在调度器上，服务器组可以用私有的 IP 地址；</li>\n</ol>\n<p>缺点是：</p>\n<ol>\n<li>它的伸缩能力有限，当服务器结点数目升到20时，调度器本身性能有可能成为系统的新瓶颈，因为在NAT模型中请求和响应报文都需要通过负载调度器。</li>\n</ol>\n<p>需要注意的是：</p>\n<ol>\n<li>RS的IP（RIP）和调度器内网IP（DIP）应在同一网络中（不是必须）且使用私网地址，RS网关指向DIP；</li>\n<li>调度器必须是Linux系统，RS可以是任何系统；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"DR模型\"><a href=\"#DR模型\" class=\"headerlink\" title=\"DR模型\"></a>DR模型</h1><h2 id=\"工作原理-1\"><a href=\"#工作原理-1\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>DR模型叫做直接路由，是LVS的默认模式，其实现是通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是选择的RS的RIP所在接口的MAC，其余IP和端口不变。</p>\n<p>VIP地址为调度器和RS服务器组共享，调度器配置的VIP地址是对外可见的，用于接收虚拟服务的请求报文；所有的服务器把VIP地址配置在各自的Non-ARP网络设备上，它对外面是不可见的，只是用于处理目标地址为VIP的网络请求。RS将响应报文直接回送给客户端。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"dr.png?lastModify=1596187584\" alt=\"img\"></p>\n<h2 id=\"模式拓扑图\"><a href=\"#模式拓扑图\" class=\"headerlink\" title=\"模式拓扑图\"></a>模式拓扑图</h2><p><img src= \"/img/loading.gif\" data-src=\"dr-tuopu.png?lastModify=1596187584\" alt=\"img\"></p>\n<h2 id=\"优势、缺陷及注意事项-1\"><a href=\"#优势、缺陷及注意事项-1\" class=\"headerlink\" title=\"优势、缺陷及注意事项\"></a>优势、缺陷及注意事项</h2><p>优势是：</p>\n<ol>\n<li>DR模式下负载调度器中只负责调度请求，而RS直接将响应返回给客户，可以极大地提高整个集群系统的吞吐量。</li>\n</ol>\n<p>缺陷是：</p>\n<ol>\n<li>DR模式不支持端口映射；</li>\n</ol>\n<p>需要注意的是：</p>\n<ol>\n<li>调度器和RS都必须在物理上有一个网卡通过不分断的局域网相连，如通过交换机或者高速的 HUB 相连；</li>\n<li>调度器和RS都要配置有VIP，且在RS上需要抑制arp；</li>\n<li>RIP网关不用指向DIP，RIP可以使用公网IP，但一般是私网IP；</li>\n<li>调度器的vip的掩码没必要设置为32，也不要设置<code>route add -host $VIP dev eth0:0</code>，因为vip本来就是要像正常的IP地址一样对外通信；</li>\n<li>DR模式调度器跟RS是同一个网段，无需开启ip_forward转发；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"TUN模式\"><a href=\"#TUN模式\" class=\"headerlink\" title=\"TUN模式\"></a>TUN模式</h1><h2 id=\"模式原理\"><a href=\"#模式原理\" class=\"headerlink\" title=\"模式原理\"></a>模式原理</h2><p>不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而在请求报文之外再封装一个IP首部（源IP为DIP，目标IP为RIP），将报文发到选择的RS，RS响应后直接返回给客户端（源IP为VIP，目标IP为CIP）。</p>\n<p>在TUN的集群系统中，调度器只将请求调度到不同的RS，RS将应答的数据直接返回给用户。这样，调度器就可以处理大量的请求，它甚至可以调度百台以上的RS（同等规模的服务器），而它不会成为系统的瓶颈。即使调度器只有100Mbps的全双工网卡，整个系统的最大吞吐量可超过 1Gbps。</p>\n<h2 id=\"拓扑图\"><a href=\"#拓扑图\" class=\"headerlink\" title=\"拓扑图\"></a>拓扑图</h2><img src= \"/img/loading.gif\" data-src=\"tun-tuopu.png\" style=\"zoom:76%;\" />\n\n\n\n<h2 id=\"优势、缺陷及注意事项-2\"><a href=\"#优势、缺陷及注意事项-2\" class=\"headerlink\" title=\"优势、缺陷及注意事项\"></a>优势、缺陷及注意事项</h2><p>优势是：</p>\n<ol>\n<li>TUN模式下效率更高，可以支持更多的后端服务器；</li>\n</ol>\n<p>缺陷是：</p>\n<ol>\n<li>TUN技术对服务器有要求，即所有的服务器必须支持IP Tunneling或者IP Encapsulation协议，且不支持端口映射；</li>\n</ol>\n<p>需要注意的是：</p>\n<ol>\n<li>DIP、VIP、RIP都应该是公网IP；</li>\n<li>RS网关一般不能指向DIP；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"FULLNAT模式\"><a href=\"#FULLNAT模式\" class=\"headerlink\" title=\"FULLNAT模式\"></a>FULLNAT模式</h1><h2 id=\"FULLNAT模式原理\"><a href=\"#FULLNAT模式原理\" class=\"headerlink\" title=\"FULLNAT模式原理\"></a>FULLNAT模式原理</h2><p>通过同时修改请求报文的源IP和目标IP进行转发，将CIP修改为DIP，将VIP修改为RIP。支持端口映射</p>\n<h2 id=\"优势、缺陷\"><a href=\"#优势、缺陷\" class=\"headerlink\" title=\"优势、缺陷\"></a>优势、缺陷</h2><p>优势是：</p>\n<ol>\n<li>可以实现RS服务器和调度器异地部署；</li>\n</ol>\n<p>缺陷是：</p>\n<ol>\n<li>FULLNAT模式默认内核不支持；后端RS日志无法直接获取到实际客户端请求的IP地址；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"各种模式的对比\"><a href=\"#各种模式的对比\" class=\"headerlink\" title=\"各种模式的对比\"></a>各种模式的对比</h1><img src= \"/img/loading.gif\" data-src=\"duibi.png\" style=\"zoom:75%;\" />\n\n\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"LVS介绍\"><a href=\"#LVS介绍\" class=\"headerlink\" title=\"LVS介绍\"></a>LVS介绍</h1><h2 id=\"什么是lvs\"><a href=\"#什么是lvs\" class=\"headerlink\" title=\"什么是lvs\"></a>什么是lvs</h2><p>lvs（Linux Virtual Server），是一种4层的负载均衡调度器并集成在Linux内核，由阿里章文嵩博士开发，并在各大互联网公司广泛应用。</p>\n<p>在LVS架构中，VS表示调度服务器，负责请求的调度，RS表示后端实际提供服务的服务器。</p>\n<h2 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>VS根据请求报文的目标IP、目标协议及端口，并根据相应的调度算法将其调度到后端的某台RS上。</p>\n<p>lvs使用的是内核中ipvs工具实现调度功能。ipvs工作于内核空间netfilter的INPUT上，用户可以使用ipvsadm实现对ipvs的管理。</p>\n<h2 id=\"lvs的类型\"><a href=\"#lvs的类型\" class=\"headerlink\" title=\"lvs的类型\"></a>lvs的类型</h2><p>lvs分为如下的几种类型：</p>\n<ul>\n<li>nat：修改请求报文的目标ip，是多ip的DNAT；</li>\n<li>tun：在原请求报文之外新加一个ip首部；</li>\n<li>DR：操作封装新的mac地址；</li>\n<li>fullnat：修改请求报文的源和目标ip；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"NAT工作模式\"><a href=\"#NAT工作模式\" class=\"headerlink\" title=\"NAT工作模式\"></a>NAT工作模式</h1><h2 id=\"模型原理\"><a href=\"#模型原理\" class=\"headerlink\" title=\"模型原理\"></a>模型原理</h2><p>lvs的NAT模型解决了DNAT一对一转发的缺陷，实现了一对多的DNAT转发。</p>\n<p>其通过修改目标地址的IP来实现将请求转发到后端RS服务器上，RS服务器处理完成请求后请求报文还要经过调度器，调度器将响应报文的源IP修改为调度器的VIP后发给客户端。</p>\n<img src=\"nat.png\" style=\"zoom:75%;\" />\n\n\n\n<p><strong><em>\\</em>支持端口映射，可修改请求报文的目标端口**</strong></p>\n<h2 id=\"模型拓扑图\"><a href=\"#模型拓扑图\" class=\"headerlink\" title=\"模型拓扑图\"></a>模型拓扑图</h2><img src=\"nat-tuopu.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"优势、缺陷及注意事项\"><a href=\"#优势、缺陷及注意事项\" class=\"headerlink\" title=\"优势、缺陷及注意事项\"></a>优势、缺陷及注意事项</h2><p>优点是：</p>\n<ol>\n<li>RS服务器可以运行任何支持TCP/IP的操作系统；</li>\n<li>它只需要一个IP地址配置在调度器上，服务器组可以用私有的 IP 地址；</li>\n</ol>\n<p>缺点是：</p>\n<ol>\n<li>它的伸缩能力有限，当服务器结点数目升到20时，调度器本身性能有可能成为系统的新瓶颈，因为在NAT模型中请求和响应报文都需要通过负载调度器。</li>\n</ol>\n<p>需要注意的是：</p>\n<ol>\n<li>RS的IP（RIP）和调度器内网IP（DIP）应在同一网络中（不是必须）且使用私网地址，RS网关指向DIP；</li>\n<li>调度器必须是Linux系统，RS可以是任何系统；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"DR模型\"><a href=\"#DR模型\" class=\"headerlink\" title=\"DR模型\"></a>DR模型</h1><h2 id=\"工作原理-1\"><a href=\"#工作原理-1\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h2><p>DR模型叫做直接路由，是LVS的默认模式，其实现是通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是选择的RS的RIP所在接口的MAC，其余IP和端口不变。</p>\n<p>VIP地址为调度器和RS服务器组共享，调度器配置的VIP地址是对外可见的，用于接收虚拟服务的请求报文；所有的服务器把VIP地址配置在各自的Non-ARP网络设备上，它对外面是不可见的，只是用于处理目标地址为VIP的网络请求。RS将响应报文直接回送给客户端。</p>\n<p><img src=\"dr.png?lastModify=1596187584\" alt=\"img\"></p>\n<h2 id=\"模式拓扑图\"><a href=\"#模式拓扑图\" class=\"headerlink\" title=\"模式拓扑图\"></a>模式拓扑图</h2><p><img src=\"dr-tuopu.png?lastModify=1596187584\" alt=\"img\"></p>\n<h2 id=\"优势、缺陷及注意事项-1\"><a href=\"#优势、缺陷及注意事项-1\" class=\"headerlink\" title=\"优势、缺陷及注意事项\"></a>优势、缺陷及注意事项</h2><p>优势是：</p>\n<ol>\n<li>DR模式下负载调度器中只负责调度请求，而RS直接将响应返回给客户，可以极大地提高整个集群系统的吞吐量。</li>\n</ol>\n<p>缺陷是：</p>\n<ol>\n<li>DR模式不支持端口映射；</li>\n</ol>\n<p>需要注意的是：</p>\n<ol>\n<li>调度器和RS都必须在物理上有一个网卡通过不分断的局域网相连，如通过交换机或者高速的 HUB 相连；</li>\n<li>调度器和RS都要配置有VIP，且在RS上需要抑制arp；</li>\n<li>RIP网关不用指向DIP，RIP可以使用公网IP，但一般是私网IP；</li>\n<li>调度器的vip的掩码没必要设置为32，也不要设置<code>route add -host $VIP dev eth0:0</code>，因为vip本来就是要像正常的IP地址一样对外通信；</li>\n<li>DR模式调度器跟RS是同一个网段，无需开启ip_forward转发；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"TUN模式\"><a href=\"#TUN模式\" class=\"headerlink\" title=\"TUN模式\"></a>TUN模式</h1><h2 id=\"模式原理\"><a href=\"#模式原理\" class=\"headerlink\" title=\"模式原理\"></a>模式原理</h2><p>不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而在请求报文之外再封装一个IP首部（源IP为DIP，目标IP为RIP），将报文发到选择的RS，RS响应后直接返回给客户端（源IP为VIP，目标IP为CIP）。</p>\n<p>在TUN的集群系统中，调度器只将请求调度到不同的RS，RS将应答的数据直接返回给用户。这样，调度器就可以处理大量的请求，它甚至可以调度百台以上的RS（同等规模的服务器），而它不会成为系统的瓶颈。即使调度器只有100Mbps的全双工网卡，整个系统的最大吞吐量可超过 1Gbps。</p>\n<h2 id=\"拓扑图\"><a href=\"#拓扑图\" class=\"headerlink\" title=\"拓扑图\"></a>拓扑图</h2><img src=\"tun-tuopu.png\" style=\"zoom:76%;\" />\n\n\n\n<h2 id=\"优势、缺陷及注意事项-2\"><a href=\"#优势、缺陷及注意事项-2\" class=\"headerlink\" title=\"优势、缺陷及注意事项\"></a>优势、缺陷及注意事项</h2><p>优势是：</p>\n<ol>\n<li>TUN模式下效率更高，可以支持更多的后端服务器；</li>\n</ol>\n<p>缺陷是：</p>\n<ol>\n<li>TUN技术对服务器有要求，即所有的服务器必须支持IP Tunneling或者IP Encapsulation协议，且不支持端口映射；</li>\n</ol>\n<p>需要注意的是：</p>\n<ol>\n<li>DIP、VIP、RIP都应该是公网IP；</li>\n<li>RS网关一般不能指向DIP；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"FULLNAT模式\"><a href=\"#FULLNAT模式\" class=\"headerlink\" title=\"FULLNAT模式\"></a>FULLNAT模式</h1><h2 id=\"FULLNAT模式原理\"><a href=\"#FULLNAT模式原理\" class=\"headerlink\" title=\"FULLNAT模式原理\"></a>FULLNAT模式原理</h2><p>通过同时修改请求报文的源IP和目标IP进行转发，将CIP修改为DIP，将VIP修改为RIP。支持端口映射</p>\n<h2 id=\"优势、缺陷\"><a href=\"#优势、缺陷\" class=\"headerlink\" title=\"优势、缺陷\"></a>优势、缺陷</h2><p>优势是：</p>\n<ol>\n<li>可以实现RS服务器和调度器异地部署；</li>\n</ol>\n<p>缺陷是：</p>\n<ol>\n<li>FULLNAT模式默认内核不支持；后端RS日志无法直接获取到实际客户端请求的IP地址；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"各种模式的对比\"><a href=\"#各种模式的对比\" class=\"headerlink\" title=\"各种模式的对比\"></a>各种模式的对比</h1><img src=\"duibi.png\" style=\"zoom:75%;\" />\n\n\n\n<br>\n\n"},{"title":"LVS调度算法","date":"2020-07-31T09:31:35.000Z","description":"LVS常用的调度算法","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","_content":"\n\n\n## 静态算法\n\n静态算法表示仅根据算法本身进行调度，而不关注后端RS的压力情况，常见静态算法有如下。\n\n<br>\n\n\n\n### RR轮询\n\nRR（RoundRobin），表示将请求依次调度到后端的RS上。\n\n\n\n### WRR加权轮询\n\nWRR（Weighted RR），根据设定的不通RS的权重，将请求尽量多的调度到权重大的RS上。\n\n\n\n### SH源地址hash\n\nSH（Source Hashing），对源地址进行hash，将来自同一个IP地址的请求始终调度到一个RS上，实现了session绑定。\n\n\n\n### DH目标地址hash\n\n对目标地址进行hash，将发往同一目标地址的请求始终调度到同一个RS上，常用在使用正向代理缓存的负载均衡场景中。\n\n<br>\n\n\n\n## 动态算法\n\n动态算法要考虑后端RS的实际负载情况，然后根据算法进行调度，常见动态调度算法如下。\n\n<br>\n\n\n\n### LC最小连接\n\nLC适合于使用长连接的应用，请求将会被调度到连接数较少的RS上。其负载计算公式如下：\n\n```\n负载 = 活动连接数 * 256 + 非活动连接数\n```\n\n\n\n\n\n\n### WLC加权最小连接\n\n根据服务器的连接数和权重进行请求的调度，是默认的调度算法。其负载计算公式如下：\n\n```\n负载 = （活动连接数 * 256 + 非活动连接数）/ 权重\n```\n\n\n\n\n\n\n### SED初始连接权重高优先连接\n\n第一次连接的时候调度到服务器权重高的RS。其负载计算公式如下：\n\n```\n负载 = （活动连接数 * 256 + 1）/ 权重\n```\n\n\n\n\n\n\n### NQ\n\nNQ（No Queue）在第一轮均匀分配，后续使用SED算法调度请求。\n\n\n\n### LBLC基于局部性的最少链接\n\nLBLC调度算法先根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于其一半的工作负载，则用最少链接的原则选出一个可用的服务器，将请求发送到该服务器。\n\n\n\n### LBLCR带复制的基于局部性最少链接\n\nLBLCR算法先根据请求的目标IP地址找出该目标IP地址对应的服务器组；按最小连接原则从该服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按最小连接原则从整个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。\n\n","source":"_posts/LVS调度算法.md","raw":"---\ntitle: LVS调度算法\ndate: 2020-07-31 17:31:35\ntags:\n- LVS\ncategories:\n- 负载均衡和高可用方案\n- LVS\ndescription: LVS常用的调度算法\ncover: \n---\n\n\n\n## 静态算法\n\n静态算法表示仅根据算法本身进行调度，而不关注后端RS的压力情况，常见静态算法有如下。\n\n<br>\n\n\n\n### RR轮询\n\nRR（RoundRobin），表示将请求依次调度到后端的RS上。\n\n\n\n### WRR加权轮询\n\nWRR（Weighted RR），根据设定的不通RS的权重，将请求尽量多的调度到权重大的RS上。\n\n\n\n### SH源地址hash\n\nSH（Source Hashing），对源地址进行hash，将来自同一个IP地址的请求始终调度到一个RS上，实现了session绑定。\n\n\n\n### DH目标地址hash\n\n对目标地址进行hash，将发往同一目标地址的请求始终调度到同一个RS上，常用在使用正向代理缓存的负载均衡场景中。\n\n<br>\n\n\n\n## 动态算法\n\n动态算法要考虑后端RS的实际负载情况，然后根据算法进行调度，常见动态调度算法如下。\n\n<br>\n\n\n\n### LC最小连接\n\nLC适合于使用长连接的应用，请求将会被调度到连接数较少的RS上。其负载计算公式如下：\n\n```\n负载 = 活动连接数 * 256 + 非活动连接数\n```\n\n\n\n\n\n\n### WLC加权最小连接\n\n根据服务器的连接数和权重进行请求的调度，是默认的调度算法。其负载计算公式如下：\n\n```\n负载 = （活动连接数 * 256 + 非活动连接数）/ 权重\n```\n\n\n\n\n\n\n### SED初始连接权重高优先连接\n\n第一次连接的时候调度到服务器权重高的RS。其负载计算公式如下：\n\n```\n负载 = （活动连接数 * 256 + 1）/ 权重\n```\n\n\n\n\n\n\n### NQ\n\nNQ（No Queue）在第一轮均匀分配，后续使用SED算法调度请求。\n\n\n\n### LBLC基于局部性的最少链接\n\nLBLC调度算法先根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于其一半的工作负载，则用最少链接的原则选出一个可用的服务器，将请求发送到该服务器。\n\n\n\n### LBLCR带复制的基于局部性最少链接\n\nLBLCR算法先根据请求的目标IP地址找出该目标IP地址对应的服务器组；按最小连接原则从该服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按最小连接原则从整个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。\n\n","slug":"LVS调度算法","published":1,"updated":"2020-08-07T05:57:01.312Z","_id":"ckda149rj0000rrn00h1a5r0y","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"静态算法\"><a href=\"#静态算法\" class=\"headerlink\" title=\"静态算法\"></a>静态算法</h2><p>静态算法表示仅根据算法本身进行调度，而不关注后端RS的压力情况，常见静态算法有如下。</p>\n<br>\n\n\n\n<h3 id=\"RR轮询\"><a href=\"#RR轮询\" class=\"headerlink\" title=\"RR轮询\"></a>RR轮询</h3><p>RR（RoundRobin），表示将请求依次调度到后端的RS上。</p>\n<h3 id=\"WRR加权轮询\"><a href=\"#WRR加权轮询\" class=\"headerlink\" title=\"WRR加权轮询\"></a>WRR加权轮询</h3><p>WRR（Weighted RR），根据设定的不通RS的权重，将请求尽量多的调度到权重大的RS上。</p>\n<h3 id=\"SH源地址hash\"><a href=\"#SH源地址hash\" class=\"headerlink\" title=\"SH源地址hash\"></a>SH源地址hash</h3><p>SH（Source Hashing），对源地址进行hash，将来自同一个IP地址的请求始终调度到一个RS上，实现了session绑定。</p>\n<h3 id=\"DH目标地址hash\"><a href=\"#DH目标地址hash\" class=\"headerlink\" title=\"DH目标地址hash\"></a>DH目标地址hash</h3><p>对目标地址进行hash，将发往同一目标地址的请求始终调度到同一个RS上，常用在使用正向代理缓存的负载均衡场景中。</p>\n<br>\n\n\n\n<h2 id=\"动态算法\"><a href=\"#动态算法\" class=\"headerlink\" title=\"动态算法\"></a>动态算法</h2><p>动态算法要考虑后端RS的实际负载情况，然后根据算法进行调度，常见动态调度算法如下。</p>\n<br>\n\n\n\n<h3 id=\"LC最小连接\"><a href=\"#LC最小连接\" class=\"headerlink\" title=\"LC最小连接\"></a>LC最小连接</h3><p>LC适合于使用长连接的应用，请求将会被调度到连接数较少的RS上。其负载计算公式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载 &#x3D; 活动连接数 * 256 + 非活动连接数</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"WLC加权最小连接\"><a href=\"#WLC加权最小连接\" class=\"headerlink\" title=\"WLC加权最小连接\"></a>WLC加权最小连接</h3><p>根据服务器的连接数和权重进行请求的调度，是默认的调度算法。其负载计算公式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载 &#x3D; （活动连接数 * 256 + 非活动连接数）&#x2F; 权重</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"SED初始连接权重高优先连接\"><a href=\"#SED初始连接权重高优先连接\" class=\"headerlink\" title=\"SED初始连接权重高优先连接\"></a>SED初始连接权重高优先连接</h3><p>第一次连接的时候调度到服务器权重高的RS。其负载计算公式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载 &#x3D; （活动连接数 * 256 + 1）&#x2F; 权重</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"NQ\"><a href=\"#NQ\" class=\"headerlink\" title=\"NQ\"></a>NQ</h3><p>NQ（No Queue）在第一轮均匀分配，后续使用SED算法调度请求。</p>\n<h3 id=\"LBLC基于局部性的最少链接\"><a href=\"#LBLC基于局部性的最少链接\" class=\"headerlink\" title=\"LBLC基于局部性的最少链接\"></a>LBLC基于局部性的最少链接</h3><p>LBLC调度算法先根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于其一半的工作负载，则用最少链接的原则选出一个可用的服务器，将请求发送到该服务器。</p>\n<h3 id=\"LBLCR带复制的基于局部性最少链接\"><a href=\"#LBLCR带复制的基于局部性最少链接\" class=\"headerlink\" title=\"LBLCR带复制的基于局部性最少链接\"></a>LBLCR带复制的基于局部性最少链接</h3><p>LBLCR算法先根据请求的目标IP地址找出该目标IP地址对应的服务器组；按最小连接原则从该服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按最小连接原则从整个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"静态算法\"><a href=\"#静态算法\" class=\"headerlink\" title=\"静态算法\"></a>静态算法</h2><p>静态算法表示仅根据算法本身进行调度，而不关注后端RS的压力情况，常见静态算法有如下。</p>\n<br>\n\n\n\n<h3 id=\"RR轮询\"><a href=\"#RR轮询\" class=\"headerlink\" title=\"RR轮询\"></a>RR轮询</h3><p>RR（RoundRobin），表示将请求依次调度到后端的RS上。</p>\n<h3 id=\"WRR加权轮询\"><a href=\"#WRR加权轮询\" class=\"headerlink\" title=\"WRR加权轮询\"></a>WRR加权轮询</h3><p>WRR（Weighted RR），根据设定的不通RS的权重，将请求尽量多的调度到权重大的RS上。</p>\n<h3 id=\"SH源地址hash\"><a href=\"#SH源地址hash\" class=\"headerlink\" title=\"SH源地址hash\"></a>SH源地址hash</h3><p>SH（Source Hashing），对源地址进行hash，将来自同一个IP地址的请求始终调度到一个RS上，实现了session绑定。</p>\n<h3 id=\"DH目标地址hash\"><a href=\"#DH目标地址hash\" class=\"headerlink\" title=\"DH目标地址hash\"></a>DH目标地址hash</h3><p>对目标地址进行hash，将发往同一目标地址的请求始终调度到同一个RS上，常用在使用正向代理缓存的负载均衡场景中。</p>\n<br>\n\n\n\n<h2 id=\"动态算法\"><a href=\"#动态算法\" class=\"headerlink\" title=\"动态算法\"></a>动态算法</h2><p>动态算法要考虑后端RS的实际负载情况，然后根据算法进行调度，常见动态调度算法如下。</p>\n<br>\n\n\n\n<h3 id=\"LC最小连接\"><a href=\"#LC最小连接\" class=\"headerlink\" title=\"LC最小连接\"></a>LC最小连接</h3><p>LC适合于使用长连接的应用，请求将会被调度到连接数较少的RS上。其负载计算公式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载 &#x3D; 活动连接数 * 256 + 非活动连接数</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"WLC加权最小连接\"><a href=\"#WLC加权最小连接\" class=\"headerlink\" title=\"WLC加权最小连接\"></a>WLC加权最小连接</h3><p>根据服务器的连接数和权重进行请求的调度，是默认的调度算法。其负载计算公式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载 &#x3D; （活动连接数 * 256 + 非活动连接数）&#x2F; 权重</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"SED初始连接权重高优先连接\"><a href=\"#SED初始连接权重高优先连接\" class=\"headerlink\" title=\"SED初始连接权重高优先连接\"></a>SED初始连接权重高优先连接</h3><p>第一次连接的时候调度到服务器权重高的RS。其负载计算公式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载 &#x3D; （活动连接数 * 256 + 1）&#x2F; 权重</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<h3 id=\"NQ\"><a href=\"#NQ\" class=\"headerlink\" title=\"NQ\"></a>NQ</h3><p>NQ（No Queue）在第一轮均匀分配，后续使用SED算法调度请求。</p>\n<h3 id=\"LBLC基于局部性的最少链接\"><a href=\"#LBLC基于局部性的最少链接\" class=\"headerlink\" title=\"LBLC基于局部性的最少链接\"></a>LBLC基于局部性的最少链接</h3><p>LBLC调度算法先根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于其一半的工作负载，则用最少链接的原则选出一个可用的服务器，将请求发送到该服务器。</p>\n<h3 id=\"LBLCR带复制的基于局部性最少链接\"><a href=\"#LBLCR带复制的基于局部性最少链接\" class=\"headerlink\" title=\"LBLCR带复制的基于局部性最少链接\"></a>LBLCR带复制的基于局部性最少链接</h3><p>LBLCR算法先根据请求的目标IP地址找出该目标IP地址对应的服务器组；按最小连接原则从该服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按最小连接原则从整个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。</p>\n"},{"title":"MacOS安装mysqlclient失败","date":"2020-07-31T09:52:30.000Z","description":"在macos系统上安装mysqlclient报错的解决方案","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596199327501&di=791911d536ed749b8a8e94e3f871c198&imgtype=0&src=http%3A%2F%2Fwww.west.cn%2Finfo%2Fupload%2F20180713%2Fddb20ffkvi2.jpg","_content":"\n\n\n在mac上的django项目中安装mysqlclient时出现如下的报错：\n\n`ld: library not found for -lssl`\n\n\n\n这个问题可能是两个原因导致的：\n\n1、没有安装openssl，可以使用如下的方式安装：\n\n```shell\n$ brew install openssl\n$ pip install mysqlclient\n```\n\n\n\n2、pip寻找依赖机制问题，需要指定openssl库：\n\n```shell\n$ LDFLAGS=-L/usr/local/opt/openssl/lib pip install mysqlclient\n```\n\n\n\n\n\n","source":"_posts/MacOS安装mysqlclient失败.md","raw":"---\ntitle: MacOS安装mysqlclient失败\ndate: 2020-07-31 17:52:30\ntags:\n- Django\ncategories:\n- python web开发\n- Django\n- 常见问题\ndescription: 在macos系统上安装mysqlclient报错的解决方案\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596199327501&di=791911d536ed749b8a8e94e3f871c198&imgtype=0&src=http%3A%2F%2Fwww.west.cn%2Finfo%2Fupload%2F20180713%2Fddb20ffkvi2.jpg\n---\n\n\n\n在mac上的django项目中安装mysqlclient时出现如下的报错：\n\n`ld: library not found for -lssl`\n\n\n\n这个问题可能是两个原因导致的：\n\n1、没有安装openssl，可以使用如下的方式安装：\n\n```shell\n$ brew install openssl\n$ pip install mysqlclient\n```\n\n\n\n2、pip寻找依赖机制问题，需要指定openssl库：\n\n```shell\n$ LDFLAGS=-L/usr/local/opt/openssl/lib pip install mysqlclient\n```\n\n\n\n\n\n","slug":"MacOS安装mysqlclient失败","published":1,"updated":"2020-08-03T07:31:04.180Z","_id":"ckda1xp160000z0n05h42hh6j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在mac上的django项目中安装mysqlclient时出现如下的报错：</p>\n<p><code>ld: library not found for -lssl</code></p>\n<p>这个问题可能是两个原因导致的：</p>\n<p>1、没有安装openssl，可以使用如下的方式安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install openssl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、pip寻找依赖机制问题，需要指定openssl库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> LDFLAGS=-L/usr/<span class=\"built_in\">local</span>/opt/openssl/lib pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>在mac上的django项目中安装mysqlclient时出现如下的报错：</p>\n<p><code>ld: library not found for -lssl</code></p>\n<p>这个问题可能是两个原因导致的：</p>\n<p>1、没有安装openssl，可以使用如下的方式安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> brew install openssl</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、pip寻找依赖机制问题，需要指定openssl库：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> LDFLAGS=-L/usr/<span class=\"built_in\">local</span>/opt/openssl/lib pip install mysqlclient</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"Flask蓝图","date":"2020-08-03T07:33:28.000Z","description":"Flask蓝图功能的介绍和使用。","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596450146150&di=93ca29c3c5343511eb59e24e03763483&imgtype=0&src=http%3A%2F%2Fwww.45fan.com%2Fupload%2F2018-12-10%2F19101690242527503074058584.png","_content":"\n\n\n# 什么是蓝图\n\n蓝图类似于Django中的路由`include`（个人认为），它是一系列相同类型操作的集合，它是一个路由注册的入口。\n\n\n\n一般的flask项目就是一个`app.py`文件，其中定义了路由和路由对应的处理逻辑，例如：\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n  pass\n\n@app.route('/admin')\ndef admin():\n  pass\n\n@app.route('/admin/edit')\ndef adminEdit():\n  pass\n\n@app.route('/home')\ndef home():\n  pass\n\n@app.route('/home/list')\ndef homeList():\n  pass\n\nif __name__ == '__main__':\n  app.run()\n```\n\n\n\n随着项目扩张，`app.py`文件中的路由会越来越多，随即就有如下的痛点：\n\n1. 对于前台界面和后台管理界面如何进行区分；\n2. 如何对将`app.py`文件拆分的简洁；\n3. 相同的uri前缀如`/admin`如何只定义一次；\n4. 多人如何高效协同开发；\n5. ......\n\n\n\n<br>\n\n\n\n# 使用蓝图\n\n对于以上问题，可以用蓝图的方式解决，例如下面的项目：\n\n![](tree.png)\n\n- `app`目录下表示不同的服务：\n  - `admin`表示后台管理服务；\n  - `home`表示前台服务；\n- `app.py`程序启动文件；\n\n\n\n我们的目标是将前台的代码都放到`home`目录下管理，后台管理的代码都放到`admin`下管理。于是在`admin`下的`__init__.py`文件中使用蓝图：\n\n```python\nfrom flask import Blueprint\n\n\nadmin = Blueprint(\"admin\", __name__)\n\nimport app.admin.views\n```\n\n\n\n此时，`admin`下的`views.py`就可以写成如下的形式：\n\n```python\nfrom . import admin\n\n\n@admin.route(\"/\")\ndef index():\n    return \"<h1>this is admin </h1>\"\n\n@admin.route(\"/edit\")\ndef edit():\n    return \"this is edit\"\n```\n\n\n\n同理，`home`下的`__init__.py`文件需要改写成如下的内容：\n\n```python\nfrom flask import Blueprint\n\n\nhome = Blueprint(\"home\", __name__)\n\nimport app.home.views\n```\n\n\n\n`home`下的`views.py`改写成如下内容：\n\n```python\nfrom . import home\nfrom flask import render_template, redirect, url_for\n\n\n@home.route(\"/\")\ndef index():\n    return render_template(\"home/index.html\")\n\n@home.route(\"/login/\")\ndef login():\n    return render_template(\"home/login.html\")\n\n@home.route(\"/logout/\")\ndef logout():\n    return redirect(url_for(\"home.login\"))\n```\n\n\n\n蓝图定义好后，还需要注册，在`app`下的`__init__.py`文件中注册：\n\n```python\nfrom flask import Flask\nfrom app.home import home as home_blueprint\nfrom app.admin import admin as admin_blueprint\n\n\napp = Flask(__name__)\napp.debug = True\n\napp.register_blueprint(home_blueprint)\napp.register_blueprint(admin_blueprint, url_prefix=\"/admin\")\n```\n\n\n\n这里使用了`url_prefix`，这样所有后台管理的url都会加上`admin`前缀。\n\n\n\n此时的`app.py`文件，就是一个很简单的启动入口：\n\n```python\nfrom app import app\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n\n\n<br>\n\n\n\n# 总结\n\n使用蓝图后可以看到，项目会根据app进行拆分（类似于Django中app的概念），通过蓝图将app注册到项目中，并且可以通过url的前缀区分app。`app.py`入口文件会变得极为简单。\n\n\n\n对于后续协同开发，开发前台的人只需要修改`home`下的文件，后台的人只需要修改`admin`下的文件即可，不会有影响。新的app只需要将app的蓝图注册到`__inint__.py`中，并指定`url_prefix`进行区分即可。\n\n\n\n\n\n","source":"_posts/Flask蓝图.md","raw":"---\ntitle: Flask蓝图\ndate: 2020-08-03 15:33:28\ntags:\n- Flask\ncategories:\n- python web开发\n- Flask\ndescription: Flask蓝图功能的介绍和使用。\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596450146150&di=93ca29c3c5343511eb59e24e03763483&imgtype=0&src=http%3A%2F%2Fwww.45fan.com%2Fupload%2F2018-12-10%2F19101690242527503074058584.png\n---\n\n\n\n# 什么是蓝图\n\n蓝图类似于Django中的路由`include`（个人认为），它是一系列相同类型操作的集合，它是一个路由注册的入口。\n\n\n\n一般的flask项目就是一个`app.py`文件，其中定义了路由和路由对应的处理逻辑，例如：\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n  pass\n\n@app.route('/admin')\ndef admin():\n  pass\n\n@app.route('/admin/edit')\ndef adminEdit():\n  pass\n\n@app.route('/home')\ndef home():\n  pass\n\n@app.route('/home/list')\ndef homeList():\n  pass\n\nif __name__ == '__main__':\n  app.run()\n```\n\n\n\n随着项目扩张，`app.py`文件中的路由会越来越多，随即就有如下的痛点：\n\n1. 对于前台界面和后台管理界面如何进行区分；\n2. 如何对将`app.py`文件拆分的简洁；\n3. 相同的uri前缀如`/admin`如何只定义一次；\n4. 多人如何高效协同开发；\n5. ......\n\n\n\n<br>\n\n\n\n# 使用蓝图\n\n对于以上问题，可以用蓝图的方式解决，例如下面的项目：\n\n![](tree.png)\n\n- `app`目录下表示不同的服务：\n  - `admin`表示后台管理服务；\n  - `home`表示前台服务；\n- `app.py`程序启动文件；\n\n\n\n我们的目标是将前台的代码都放到`home`目录下管理，后台管理的代码都放到`admin`下管理。于是在`admin`下的`__init__.py`文件中使用蓝图：\n\n```python\nfrom flask import Blueprint\n\n\nadmin = Blueprint(\"admin\", __name__)\n\nimport app.admin.views\n```\n\n\n\n此时，`admin`下的`views.py`就可以写成如下的形式：\n\n```python\nfrom . import admin\n\n\n@admin.route(\"/\")\ndef index():\n    return \"<h1>this is admin </h1>\"\n\n@admin.route(\"/edit\")\ndef edit():\n    return \"this is edit\"\n```\n\n\n\n同理，`home`下的`__init__.py`文件需要改写成如下的内容：\n\n```python\nfrom flask import Blueprint\n\n\nhome = Blueprint(\"home\", __name__)\n\nimport app.home.views\n```\n\n\n\n`home`下的`views.py`改写成如下内容：\n\n```python\nfrom . import home\nfrom flask import render_template, redirect, url_for\n\n\n@home.route(\"/\")\ndef index():\n    return render_template(\"home/index.html\")\n\n@home.route(\"/login/\")\ndef login():\n    return render_template(\"home/login.html\")\n\n@home.route(\"/logout/\")\ndef logout():\n    return redirect(url_for(\"home.login\"))\n```\n\n\n\n蓝图定义好后，还需要注册，在`app`下的`__init__.py`文件中注册：\n\n```python\nfrom flask import Flask\nfrom app.home import home as home_blueprint\nfrom app.admin import admin as admin_blueprint\n\n\napp = Flask(__name__)\napp.debug = True\n\napp.register_blueprint(home_blueprint)\napp.register_blueprint(admin_blueprint, url_prefix=\"/admin\")\n```\n\n\n\n这里使用了`url_prefix`，这样所有后台管理的url都会加上`admin`前缀。\n\n\n\n此时的`app.py`文件，就是一个很简单的启动入口：\n\n```python\nfrom app import app\n\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n\n\n<br>\n\n\n\n# 总结\n\n使用蓝图后可以看到，项目会根据app进行拆分（类似于Django中app的概念），通过蓝图将app注册到项目中，并且可以通过url的前缀区分app。`app.py`入口文件会变得极为简单。\n\n\n\n对于后续协同开发，开发前台的人只需要修改`home`下的文件，后台的人只需要修改`admin`下的文件即可，不会有影响。新的app只需要将app的蓝图注册到`__inint__.py`中，并指定`url_prefix`进行区分即可。\n\n\n\n\n\n","slug":"Flask蓝图","published":1,"updated":"2020-08-03T08:02:09.768Z","_id":"ckde84xvl00009gn04a303jtm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是蓝图\"><a href=\"#什么是蓝图\" class=\"headerlink\" title=\"什么是蓝图\"></a>什么是蓝图</h1><p>蓝图类似于Django中的路由<code>include</code>（个人认为），它是一系列相同类型操作的集合，它是一个路由注册的入口。</p>\n<p>一般的flask项目就是一个<code>app.py</code>文件，其中定义了路由和路由对应的处理逻辑，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/admin')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">admin</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/admin/edit')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adminEdit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/home')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/home/list')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">homeList</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  app.run()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>随着项目扩张，<code>app.py</code>文件中的路由会越来越多，随即就有如下的痛点：</p>\n<ol>\n<li>对于前台界面和后台管理界面如何进行区分；</li>\n<li>如何对将<code>app.py</code>文件拆分的简洁；</li>\n<li>相同的uri前缀如<code>/admin</code>如何只定义一次；</li>\n<li>多人如何高效协同开发；</li>\n<li>……</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"使用蓝图\"><a href=\"#使用蓝图\" class=\"headerlink\" title=\"使用蓝图\"></a>使用蓝图</h1><p>对于以上问题，可以用蓝图的方式解决，例如下面的项目：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"tree.png\" alt=\"\"></p>\n<ul>\n<li><code>app</code>目录下表示不同的服务：<ul>\n<li><code>admin</code>表示后台管理服务；</li>\n<li><code>home</code>表示前台服务；</li>\n</ul>\n</li>\n<li><code>app.py</code>程序启动文件；</li>\n</ul>\n<p>我们的目标是将前台的代码都放到<code>home</code>目录下管理，后台管理的代码都放到<code>admin</code>下管理。于是在<code>admin</code>下的<code>__init__.py</code>文件中使用蓝图：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">admin = Blueprint(<span class=\"string\">\"admin\"</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> app.admin.views</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时，<code>admin</code>下的<code>views.py</code>就可以写成如下的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;h1&gt;this is admin &lt;/h1&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.route(\"/edit\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"this is edit\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理，<code>home</code>下的<code>__init__.py</code>文件需要改写成如下的内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">home = Blueprint(<span class=\"string\">\"home\"</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> app.home.views</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>home</code>下的<code>views.py</code>改写成如下内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> home</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template, redirect, url_for</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@home.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"home/index.html\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@home.route(\"/login/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"home/login.html\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@home.route(\"/logout/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"home.login\"</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>蓝图定义好后，还需要注册，在<code>app</code>下的<code>__init__.py</code>文件中注册：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.home <span class=\"keyword\">import</span> home <span class=\"keyword\">as</span> home_blueprint</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.admin <span class=\"keyword\">import</span> admin <span class=\"keyword\">as</span> admin_blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.register_blueprint(home_blueprint)</span><br><span class=\"line\">app.register_blueprint(admin_blueprint, url_prefix=<span class=\"string\">\"/admin\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里使用了<code>url_prefix</code>，这样所有后台管理的url都会加上<code>admin</code>前缀。</p>\n<p>此时的<code>app.py</code>文件，就是一个很简单的启动入口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用蓝图后可以看到，项目会根据app进行拆分（类似于Django中app的概念），通过蓝图将app注册到项目中，并且可以通过url的前缀区分app。<code>app.py</code>入口文件会变得极为简单。</p>\n<p>对于后续协同开发，开发前台的人只需要修改<code>home</code>下的文件，后台的人只需要修改<code>admin</code>下的文件即可，不会有影响。新的app只需要将app的蓝图注册到<code>__inint__.py</code>中，并指定<code>url_prefix</code>进行区分即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是蓝图\"><a href=\"#什么是蓝图\" class=\"headerlink\" title=\"什么是蓝图\"></a>什么是蓝图</h1><p>蓝图类似于Django中的路由<code>include</code>（个人认为），它是一系列相同类型操作的集合，它是一个路由注册的入口。</p>\n<p>一般的flask项目就是一个<code>app.py</code>文件，其中定义了路由和路由对应的处理逻辑，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/admin')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">admin</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/admin/edit')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">adminEdit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/home')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/home/list')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">homeList</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  app.run()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>随着项目扩张，<code>app.py</code>文件中的路由会越来越多，随即就有如下的痛点：</p>\n<ol>\n<li>对于前台界面和后台管理界面如何进行区分；</li>\n<li>如何对将<code>app.py</code>文件拆分的简洁；</li>\n<li>相同的uri前缀如<code>/admin</code>如何只定义一次；</li>\n<li>多人如何高效协同开发；</li>\n<li>……</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"使用蓝图\"><a href=\"#使用蓝图\" class=\"headerlink\" title=\"使用蓝图\"></a>使用蓝图</h1><p>对于以上问题，可以用蓝图的方式解决，例如下面的项目：</p>\n<p><img src=\"tree.png\" alt=\"\"></p>\n<ul>\n<li><code>app</code>目录下表示不同的服务：<ul>\n<li><code>admin</code>表示后台管理服务；</li>\n<li><code>home</code>表示前台服务；</li>\n</ul>\n</li>\n<li><code>app.py</code>程序启动文件；</li>\n</ul>\n<p>我们的目标是将前台的代码都放到<code>home</code>目录下管理，后台管理的代码都放到<code>admin</code>下管理。于是在<code>admin</code>下的<code>__init__.py</code>文件中使用蓝图：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">admin = Blueprint(<span class=\"string\">\"admin\"</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> app.admin.views</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时，<code>admin</code>下的<code>views.py</code>就可以写成如下的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;h1&gt;this is admin &lt;/h1&gt;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.route(\"/edit\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"this is edit\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>同理，<code>home</code>下的<code>__init__.py</code>文件需要改写成如下的内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">home = Blueprint(<span class=\"string\">\"home\"</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> app.home.views</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>home</code>下的<code>views.py</code>改写成如下内容：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> home</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> render_template, redirect, url_for</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@home.route(\"/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"home/index.html\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@home.route(\"/login/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">\"home/login.html\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@home.route(\"/logout/\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">\"home.login\"</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>蓝图定义好后，还需要注册，在<code>app</code>下的<code>__init__.py</code>文件中注册：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.home <span class=\"keyword\">import</span> home <span class=\"keyword\">as</span> home_blueprint</span><br><span class=\"line\"><span class=\"keyword\">from</span> app.admin <span class=\"keyword\">import</span> admin <span class=\"keyword\">as</span> admin_blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.register_blueprint(home_blueprint)</span><br><span class=\"line\">app.register_blueprint(admin_blueprint, url_prefix=<span class=\"string\">\"/admin\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里使用了<code>url_prefix</code>，这样所有后台管理的url都会加上<code>admin</code>前缀。</p>\n<p>此时的<code>app.py</code>文件，就是一个很简单的启动入口：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>使用蓝图后可以看到，项目会根据app进行拆分（类似于Django中app的概念），通过蓝图将app注册到项目中，并且可以通过url的前缀区分app。<code>app.py</code>入口文件会变得极为简单。</p>\n<p>对于后续协同开发，开发前台的人只需要修改<code>home</code>下的文件，后台的人只需要修改<code>admin</code>下的文件即可，不会有影响。新的app只需要将app的蓝图注册到<code>__inint__.py</code>中，并指定<code>url_prefix</code>进行区分即可。</p>\n"},{"title":"Linux上安装python","date":"2020-08-03T08:32:04.000Z","description":"在Linux环境中安装python。","cover":"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=185678737,1186265065&fm=26&gp=0.jpg","_content":"\n\n\n这里以安装`python3.7.3`版本为例。\n\n\n\n安装依赖：\n\n```bash\n$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel\n```\n\n\n\n下载并解压python包：\n\n```bash\n$ wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz \n$ tar zxf Python-3.7.3.tgz\n$ cd Python-3.7.3\n```\n\n\n\n编译安装：\n\n```bash\n$ ./configure --prefix=/usr/local/python3.7\n$ make && make install\n```\n\n\n\n备份原来的python：\n\n```bash\n$ mv /usr/bin/python /usr/bin/python.bak\n```\n\n\n\n创建软连接：\n\n```bash\n$ ln -s /usr/local/python3.7/bin/python3.7 /usr/bin/python\n$ ln -s /usr/local/python3.7/bin/pip3 /usr/local/bin/\n```\n\n\n\n验证，使用如下命令，如果输出版本为3.7.3则安装成功：\n\n```bash\n$ python -V\n```\n\n\n\n\n\n修改yum文件：\n\n编辑`/usr/bin/yum`和`/usr/libexec/urlgrabber-ext-down`，将文件头的`#!/usr/bin/python`改为`#!/usr/bin/python2`即可。\n\n\n\n\n\n","source":"_posts/Linux上安装python.md","raw":"---\ntitle: Linux上安装python\ndate: 2020-08-03 16:32:04\ntags:\n- Python\ncategories:\n- Python\ndescription: 在Linux环境中安装python。\ncover: https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=185678737,1186265065&fm=26&gp=0.jpg\n---\n\n\n\n这里以安装`python3.7.3`版本为例。\n\n\n\n安装依赖：\n\n```bash\n$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel\n```\n\n\n\n下载并解压python包：\n\n```bash\n$ wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz \n$ tar zxf Python-3.7.3.tgz\n$ cd Python-3.7.3\n```\n\n\n\n编译安装：\n\n```bash\n$ ./configure --prefix=/usr/local/python3.7\n$ make && make install\n```\n\n\n\n备份原来的python：\n\n```bash\n$ mv /usr/bin/python /usr/bin/python.bak\n```\n\n\n\n创建软连接：\n\n```bash\n$ ln -s /usr/local/python3.7/bin/python3.7 /usr/bin/python\n$ ln -s /usr/local/python3.7/bin/pip3 /usr/local/bin/\n```\n\n\n\n验证，使用如下命令，如果输出版本为3.7.3则安装成功：\n\n```bash\n$ python -V\n```\n\n\n\n\n\n修改yum文件：\n\n编辑`/usr/bin/yum`和`/usr/libexec/urlgrabber-ext-down`，将文件头的`#!/usr/bin/python`改为`#!/usr/bin/python2`即可。\n\n\n\n\n\n","slug":"Linux上安装python","published":1,"updated":"2020-08-03T08:36:49.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckde9fjnw0000jqn0ceuy1mwn","content":"<p>这里以安装<code>python3.7.3</code>版本为例。</p>\n<p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下载并解压python包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz </span><br><span class=\"line\">$ tar zxf Python-3.7.3.tgz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Python-3.7.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>编译安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>备份原来的python：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv /usr/bin/python /usr/bin/python.bak</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建软连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/python3.7 /usr/bin/python</span><br><span class=\"line\">$ ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/pip3 /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>验证，使用如下命令，如果输出版本为3.7.3则安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -V</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改yum文件：</p>\n<p>编辑<code>/usr/bin/yum</code>和<code>/usr/libexec/urlgrabber-ext-down</code>，将文件头的<code>#!/usr/bin/python</code>改为<code>#!/usr/bin/python2</code>即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里以安装<code>python3.7.3</code>版本为例。</p>\n<p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel</span><br></pre></td></tr></table></figure>\n\n\n\n<p>下载并解压python包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz </span><br><span class=\"line\">$ tar zxf Python-3.7.3.tgz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Python-3.7.3</span><br></pre></td></tr></table></figure>\n\n\n\n<p>编译安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/python3.7</span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n\n<p>备份原来的python：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv /usr/bin/python /usr/bin/python.bak</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建软连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/python3.7 /usr/bin/python</span><br><span class=\"line\">$ ln -s /usr/<span class=\"built_in\">local</span>/python3.7/bin/pip3 /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>验证，使用如下命令，如果输出版本为3.7.3则安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -V</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改yum文件：</p>\n<p>编辑<code>/usr/bin/yum</code>和<code>/usr/libexec/urlgrabber-ext-down</code>，将文件头的<code>#!/usr/bin/python</code>改为<code>#!/usr/bin/python2</code>即可。</p>\n"},{"title":"部署gitlab","date":"2020-08-03T08:52:52.000Z","description":"使用yum方式部署gitlab服务","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596454899236&di=aeee9673f0130bb9c52b8e52d8d34249&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170202%2Feef084cd602c42a2b78673eecf095c01_th.png","_content":"\n\n\ngitlab是基于Ruby On Redis开发的代码管理平台，类似于github，支持在自己的服务器上搭建和配置。gitlab目前有CE和EE两个版本：\n\n- `CE`：开源版本，免费；\n- `EE`：商业版本，收费，有第三方功能集成、代码审核扫描等；\n\n\n\n------\n\n\n\n# gitlab架构\n\ngitlab组件架构图如下：\n\n![](gitlab.png)\n\n\n\n其中的组件如下：\n\n1. gitlab workhorse：存储gitlab处理的内容，可以放在外置硬盘或者其他文件系统(如NFS)上；\n2. nginx：用户访问的前端代理；\n3. PostgreSQL：存储元数据、问题、合并请求、用户和权限等数据；\n4. Redis：消息中心，包含任务列表；\n5. Sidekiq：负责发送邮件(邮件任务从Redis中获取)；\n6. Unicorn：通过Redis中存储的用户信息进行用户验证、对代码进行修改操作；\n7. gitlab shell：从ssh前台接受用户命令；\n8. gitaly：提供高层次的gitrpc服务以访问git仓库；\n\n\n\n<br>\n\n\n\n# 安装依赖\n\n## 安装postfix\n\n后续使用其发送邮件会用到：\n\n```bash\n$ yum install -y postfix\n$ systemctl start postfix\n$ systemctl enable postfix\n```\n\n\n\n## 安装openssh服务端和客户端\n\n```bash\n$ yum install -y openssh-server openssh-clients\n$ systemctl start sshd\n$ systemctl enable sshd\n```\n\n\n\n## 其他依赖\n\n```bash\n$ yum install -y curl policycoreutils-python\n```\n\n<br>\n\n\n\n# 安装gitlab\n\n这里从gitlab官方下载rpm包，使用的是官方提供的快速安装命令，也可以下载对应的rpm包安装：\n\n```bash\n# 添加官方yum源\n$ curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash\n\n# 或者使用下面的命令添加\ncat > /etc/yum.repos.d/gitlab-ce.repo << EOF\n[gitlab-ce]\nname=gitlab-ce\nbaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7\nrepo_gpgcheck=0\ngpgcheck=0\nenabled=1\ngpgkey=https://packages.gitlab.com/gpg.key\nEOF\n\n# yum安装，这里安装的是12.6.3的版本\n$ yum install -y  gitlab-ce-12.6.3-ce.0.el7.x86_64\n```\n\n<br>\n\n\n\n# 配置gitlab\n\n安装完成后会在 `/etc/gitlab/` 下生成一个 `gitlab.rb` 的文件，需要对这个文件进行一定的修改：\n\n```bash\n# external_url为gitlab对外访问地址，包括邮件展示地址、拉去代码地址等；这里使用本机内网ip，也可以使用域名\nexternal_url 'http://10.10.62.17/'\n\n# 修改gitlab服务端口(因为后续的jenkins计划和gitlab安装在一台上所以要改，如果不在一台可以跳过)\nunicorn['port'] = 8081\n```\n\n<br>\n\n\n\n\n\n# 加载配置\n\n运行下面的命令加载配置，第一次加载时间较长：\n\n```bash\n$ gitlab-ctl reconfigure\n```\n\n\n\n> 这个命令是gitlab用来将修改过的配置立即生效的，后续修改配置后也可以使用这个命令重新加载。\n\n\n\n当最后出现下面提示时表示加载完成：\n\n```bash\n$ gitlab Reconfigured!\n```\n\n<br>\n\n\n\n# 查看gitlab状态\n\n通过下面的命令查看gitlab各组件的状态：\n\n```bash\n$ gitlab-ctl status\n```\n\n我的输出如下：\n\n```bash\nrun: alertmanager: (pid 30606) 83s; run: log: (pid 30264) 131s\nrun: gitaly: (pid 30438) 86s; run: log: (pid 29657) 229s\nrun: gitlab-monitor: (pid 30493) 85s; run: log: (pid 30156) 149s\nrun: gitlab-workhorse: (pid 30466) 86s; run: log: (pid 29970) 174s\nrun: grafana: (pid 30632) 82s; run: log: (pid 30405) 99s\nrun: logrotate: (pid 30015) 164s; run: log: (pid 30069) 161s\nrun: nginx: (pid 29981) 170s; run: log: (pid 30001) 167s\nrun: node-exporter: (pid 30482) 86s; run: log: (pid 30128) 155s\nrun: postgres-exporter: (pid 30621) 83s; run: log: (pid 30307) 125s\nrun: postgresql: (pid 29741) 224s; run: log: (pid 29790) 222s\nrun: prometheus: (pid 30508) 84s; run: log: (pid 30220) 137s\nrun: redis: (pid 29584) 236s; run: log: (pid 29594) 235s\nrun: redis-exporter: (pid 30500) 85s; run: log: (pid 30184) 143s\nrun: sidekiq: (pid 29925) 182s; run: log: (pid 29940) 179s\nrun: unicorn: (pid 29893) 188s; run: log: (pid 29920) 185s\n```\n\n<br>\n\n\n\n# 停止、重启gitlab\n\n停止、启动和重启gitlab的命令如下：\n\n```bash\n$ gitlab-ctl stop \n$ gitlab-ctl start\n$ gitlab-ctl restart\n```\n\n<br>\n\n\n\n# 查看日志\n\n通过下面的命令可以看到每一个组件的日志文件及其内容：\n\n```bash\n$ gitlab-ctl tail\n```\n\n\n\n想看某个组件的日志可以在上面命令的基础上指定组件名称，例如：\n\n```bash\n$ gitlabctl tail nginx\n```\n\n\n\n还可以在上面命令的基础上指定某一个日志文件，例如：\n\n```bash\n$ gitlab-ctl tail gitlab-rails/production_json.log\n```\n\n<br>\n\n\n\n# 访问gitlab\n\n前面我绑定的是内网ip，我的PC和服务器在一个内网下，所以可以直接打开浏览器输入服务器IP地址，便可以访问到gitlab了\n\n![](gitlab-login.png)\n\n\n\n<br>\n\n\n\n# 修改默认存储位置\n\n默认仓库存储位于 `/var/opt/gitlab/git-data` 下的 `repositories`目录，可以编辑 `gitlab.rb` 文件来修改这个路径。\n\n```bash\n# 如果没有配置，则增加下面的配置；如果有，则修改\ngit_data_dirs({\n   \"default\" => {\n     \"path\" => \"/data1/git-data\"\n    }\n })\n\n# 也可以添加多个仓库，default是默认仓库，切换可以在界面管理员设置中修改\ngit_data_dirs({\n   \"default\" => {\n     \"path\" => \"/data1/git-data\"\n    },\n   \"alternative\" => {\n     \"path\" => \"/data2/git-data\"\n   }\n })\n```\n\n\n\n> 需要保证系统git用户有权访问这些目录及上层目录，否则会报错\n\n\n\n重新加载配置：\n\n```bash\n$ gitlab-ctl reconfigure\n```\n\n\n\n<br>\n\n\n\n# 数据仓库迁移\n\n修改仓库后，需要通过以下命令将旧仓库的数据迁移到新的目录下。例如这里将默认路径下的代码迁移到新的仓库/data1下：\n\n```bash\n# 先停止gitlab服务，防止生成新数据\n$ gitlab-ctl stop\n\n# 目录同步，注意repositories后面没有斜杠，而git-data后面有斜杠，如果写错会导致只同步子目录\n$ rsync -av /var/opt/gitlab/git-data/repositories /data1/git-data/\n\n# 版本更新(可选)\n$ gitlab-ctl upgrade\n\n# 检查目录结构\n$ ls /data1/git-data\n\n# 重启gitlab\n$ gitlab-ctl start\n\n# 重新载入配置\n$ gitlab-ctl reconfigure\n```\n\n\n\n<br>\n\n\n\n# 邮件设置\n\ngitlab往往需要内部的SMTP服务来发送邮件，需要修改 `gitlab.rb`文件的如下内容：\n\n```bash\n# 将如下内容修改为实际的地址即可\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.server\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"smtp user\"\ngitlab_rails['smtp_password'] = \"smtp password\"\ngitlab_rails['smtp_domain'] = \"example.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\ngitlab_rails['smtp_openssl_verify_mode'] = 'peer'\n\n# 邮件默认发送于gitlab@localhost，不满足要求可以修改下面的参数\ngitlab_rails['gitlab_email_from'] = 'gitlab-test@example.com'\ngitlab_rails['gitlab_email_reply_to'] = 'gitlab@example.com'\n\n# 重载配置\ngitlab-ctl reconfigure\n```\n\n","source":"_posts/部署gitlab.md","raw":"---\ntitle: 部署gitlab\ndate: 2020-08-03 16:52:52\ntags:\n- gitlab\ncategories:\n- CICD\n- gitlab\ndescription: 使用yum方式部署gitlab服务\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596454899236&di=aeee9673f0130bb9c52b8e52d8d34249&imgtype=0&src=http%3A%2F%2Fimg.mp.itc.cn%2Fupload%2F20170202%2Feef084cd602c42a2b78673eecf095c01_th.png\n---\n\n\n\ngitlab是基于Ruby On Redis开发的代码管理平台，类似于github，支持在自己的服务器上搭建和配置。gitlab目前有CE和EE两个版本：\n\n- `CE`：开源版本，免费；\n- `EE`：商业版本，收费，有第三方功能集成、代码审核扫描等；\n\n\n\n------\n\n\n\n# gitlab架构\n\ngitlab组件架构图如下：\n\n![](gitlab.png)\n\n\n\n其中的组件如下：\n\n1. gitlab workhorse：存储gitlab处理的内容，可以放在外置硬盘或者其他文件系统(如NFS)上；\n2. nginx：用户访问的前端代理；\n3. PostgreSQL：存储元数据、问题、合并请求、用户和权限等数据；\n4. Redis：消息中心，包含任务列表；\n5. Sidekiq：负责发送邮件(邮件任务从Redis中获取)；\n6. Unicorn：通过Redis中存储的用户信息进行用户验证、对代码进行修改操作；\n7. gitlab shell：从ssh前台接受用户命令；\n8. gitaly：提供高层次的gitrpc服务以访问git仓库；\n\n\n\n<br>\n\n\n\n# 安装依赖\n\n## 安装postfix\n\n后续使用其发送邮件会用到：\n\n```bash\n$ yum install -y postfix\n$ systemctl start postfix\n$ systemctl enable postfix\n```\n\n\n\n## 安装openssh服务端和客户端\n\n```bash\n$ yum install -y openssh-server openssh-clients\n$ systemctl start sshd\n$ systemctl enable sshd\n```\n\n\n\n## 其他依赖\n\n```bash\n$ yum install -y curl policycoreutils-python\n```\n\n<br>\n\n\n\n# 安装gitlab\n\n这里从gitlab官方下载rpm包，使用的是官方提供的快速安装命令，也可以下载对应的rpm包安装：\n\n```bash\n# 添加官方yum源\n$ curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash\n\n# 或者使用下面的命令添加\ncat > /etc/yum.repos.d/gitlab-ce.repo << EOF\n[gitlab-ce]\nname=gitlab-ce\nbaseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7\nrepo_gpgcheck=0\ngpgcheck=0\nenabled=1\ngpgkey=https://packages.gitlab.com/gpg.key\nEOF\n\n# yum安装，这里安装的是12.6.3的版本\n$ yum install -y  gitlab-ce-12.6.3-ce.0.el7.x86_64\n```\n\n<br>\n\n\n\n# 配置gitlab\n\n安装完成后会在 `/etc/gitlab/` 下生成一个 `gitlab.rb` 的文件，需要对这个文件进行一定的修改：\n\n```bash\n# external_url为gitlab对外访问地址，包括邮件展示地址、拉去代码地址等；这里使用本机内网ip，也可以使用域名\nexternal_url 'http://10.10.62.17/'\n\n# 修改gitlab服务端口(因为后续的jenkins计划和gitlab安装在一台上所以要改，如果不在一台可以跳过)\nunicorn['port'] = 8081\n```\n\n<br>\n\n\n\n\n\n# 加载配置\n\n运行下面的命令加载配置，第一次加载时间较长：\n\n```bash\n$ gitlab-ctl reconfigure\n```\n\n\n\n> 这个命令是gitlab用来将修改过的配置立即生效的，后续修改配置后也可以使用这个命令重新加载。\n\n\n\n当最后出现下面提示时表示加载完成：\n\n```bash\n$ gitlab Reconfigured!\n```\n\n<br>\n\n\n\n# 查看gitlab状态\n\n通过下面的命令查看gitlab各组件的状态：\n\n```bash\n$ gitlab-ctl status\n```\n\n我的输出如下：\n\n```bash\nrun: alertmanager: (pid 30606) 83s; run: log: (pid 30264) 131s\nrun: gitaly: (pid 30438) 86s; run: log: (pid 29657) 229s\nrun: gitlab-monitor: (pid 30493) 85s; run: log: (pid 30156) 149s\nrun: gitlab-workhorse: (pid 30466) 86s; run: log: (pid 29970) 174s\nrun: grafana: (pid 30632) 82s; run: log: (pid 30405) 99s\nrun: logrotate: (pid 30015) 164s; run: log: (pid 30069) 161s\nrun: nginx: (pid 29981) 170s; run: log: (pid 30001) 167s\nrun: node-exporter: (pid 30482) 86s; run: log: (pid 30128) 155s\nrun: postgres-exporter: (pid 30621) 83s; run: log: (pid 30307) 125s\nrun: postgresql: (pid 29741) 224s; run: log: (pid 29790) 222s\nrun: prometheus: (pid 30508) 84s; run: log: (pid 30220) 137s\nrun: redis: (pid 29584) 236s; run: log: (pid 29594) 235s\nrun: redis-exporter: (pid 30500) 85s; run: log: (pid 30184) 143s\nrun: sidekiq: (pid 29925) 182s; run: log: (pid 29940) 179s\nrun: unicorn: (pid 29893) 188s; run: log: (pid 29920) 185s\n```\n\n<br>\n\n\n\n# 停止、重启gitlab\n\n停止、启动和重启gitlab的命令如下：\n\n```bash\n$ gitlab-ctl stop \n$ gitlab-ctl start\n$ gitlab-ctl restart\n```\n\n<br>\n\n\n\n# 查看日志\n\n通过下面的命令可以看到每一个组件的日志文件及其内容：\n\n```bash\n$ gitlab-ctl tail\n```\n\n\n\n想看某个组件的日志可以在上面命令的基础上指定组件名称，例如：\n\n```bash\n$ gitlabctl tail nginx\n```\n\n\n\n还可以在上面命令的基础上指定某一个日志文件，例如：\n\n```bash\n$ gitlab-ctl tail gitlab-rails/production_json.log\n```\n\n<br>\n\n\n\n# 访问gitlab\n\n前面我绑定的是内网ip，我的PC和服务器在一个内网下，所以可以直接打开浏览器输入服务器IP地址，便可以访问到gitlab了\n\n![](gitlab-login.png)\n\n\n\n<br>\n\n\n\n# 修改默认存储位置\n\n默认仓库存储位于 `/var/opt/gitlab/git-data` 下的 `repositories`目录，可以编辑 `gitlab.rb` 文件来修改这个路径。\n\n```bash\n# 如果没有配置，则增加下面的配置；如果有，则修改\ngit_data_dirs({\n   \"default\" => {\n     \"path\" => \"/data1/git-data\"\n    }\n })\n\n# 也可以添加多个仓库，default是默认仓库，切换可以在界面管理员设置中修改\ngit_data_dirs({\n   \"default\" => {\n     \"path\" => \"/data1/git-data\"\n    },\n   \"alternative\" => {\n     \"path\" => \"/data2/git-data\"\n   }\n })\n```\n\n\n\n> 需要保证系统git用户有权访问这些目录及上层目录，否则会报错\n\n\n\n重新加载配置：\n\n```bash\n$ gitlab-ctl reconfigure\n```\n\n\n\n<br>\n\n\n\n# 数据仓库迁移\n\n修改仓库后，需要通过以下命令将旧仓库的数据迁移到新的目录下。例如这里将默认路径下的代码迁移到新的仓库/data1下：\n\n```bash\n# 先停止gitlab服务，防止生成新数据\n$ gitlab-ctl stop\n\n# 目录同步，注意repositories后面没有斜杠，而git-data后面有斜杠，如果写错会导致只同步子目录\n$ rsync -av /var/opt/gitlab/git-data/repositories /data1/git-data/\n\n# 版本更新(可选)\n$ gitlab-ctl upgrade\n\n# 检查目录结构\n$ ls /data1/git-data\n\n# 重启gitlab\n$ gitlab-ctl start\n\n# 重新载入配置\n$ gitlab-ctl reconfigure\n```\n\n\n\n<br>\n\n\n\n# 邮件设置\n\ngitlab往往需要内部的SMTP服务来发送邮件，需要修改 `gitlab.rb`文件的如下内容：\n\n```bash\n# 将如下内容修改为实际的地址即可\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.server\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"smtp user\"\ngitlab_rails['smtp_password'] = \"smtp password\"\ngitlab_rails['smtp_domain'] = \"example.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\ngitlab_rails['smtp_openssl_verify_mode'] = 'peer'\n\n# 邮件默认发送于gitlab@localhost，不满足要求可以修改下面的参数\ngitlab_rails['gitlab_email_from'] = 'gitlab-test@example.com'\ngitlab_rails['gitlab_email_reply_to'] = 'gitlab@example.com'\n\n# 重载配置\ngitlab-ctl reconfigure\n```\n\n","slug":"部署gitlab","published":1,"updated":"2020-08-18T06:43:59.490Z","_id":"ckdea4v3w0000tin03e9b3lh3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>gitlab是基于Ruby On Redis开发的代码管理平台，类似于github，支持在自己的服务器上搭建和配置。gitlab目前有CE和EE两个版本：</p>\n<ul>\n<li><code>CE</code>：开源版本，免费；</li>\n<li><code>EE</code>：商业版本，收费，有第三方功能集成、代码审核扫描等；</li>\n</ul>\n<hr>\n<h1 id=\"gitlab架构\"><a href=\"#gitlab架构\" class=\"headerlink\" title=\"gitlab架构\"></a>gitlab架构</h1><p>gitlab组件架构图如下：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"gitlab.png\" alt=\"\"></p>\n<p>其中的组件如下：</p>\n<ol>\n<li>gitlab workhorse：存储gitlab处理的内容，可以放在外置硬盘或者其他文件系统(如NFS)上；</li>\n<li>nginx：用户访问的前端代理；</li>\n<li>PostgreSQL：存储元数据、问题、合并请求、用户和权限等数据；</li>\n<li>Redis：消息中心，包含任务列表；</li>\n<li>Sidekiq：负责发送邮件(邮件任务从Redis中获取)；</li>\n<li>Unicorn：通过Redis中存储的用户信息进行用户验证、对代码进行修改操作；</li>\n<li>gitlab shell：从ssh前台接受用户命令；</li>\n<li>gitaly：提供高层次的gitrpc服务以访问git仓库；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><h2 id=\"安装postfix\"><a href=\"#安装postfix\" class=\"headerlink\" title=\"安装postfix\"></a>安装postfix</h2><p>后续使用其发送邮件会用到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y postfix</span><br><span class=\"line\">$ systemctl start postfix</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> postfix</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装openssh服务端和客户端\"><a href=\"#安装openssh服务端和客户端\" class=\"headerlink\" title=\"安装openssh服务端和客户端\"></a>安装openssh服务端和客户端</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y openssh-server openssh-clients</span><br><span class=\"line\">$ systemctl start sshd</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> sshd</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"其他依赖\"><a href=\"#其他依赖\" class=\"headerlink\" title=\"其他依赖\"></a>其他依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y curl policycoreutils-python</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"安装gitlab\"><a href=\"#安装gitlab\" class=\"headerlink\" title=\"安装gitlab\"></a>安装gitlab</h1><p>这里从gitlab官方下载rpm包，使用的是官方提供的快速安装命令，也可以下载对应的rpm包安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加官方yum源</span></span><br><span class=\"line\">$ curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者使用下面的命令添加</span></span><br><span class=\"line\">cat &gt; /etc/yum.repos.d/gitlab-ce.repo &lt;&lt; EOF</span><br><span class=\"line\">[gitlab-ce]</span><br><span class=\"line\">name=gitlab-ce</span><br><span class=\"line\">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://packages.gitlab.com/gpg.key</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yum安装，这里安装的是12.6.3的版本</span></span><br><span class=\"line\">$ yum install -y  gitlab-ce-12.6.3-ce.0.el7.x86_64</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"配置gitlab\"><a href=\"#配置gitlab\" class=\"headerlink\" title=\"配置gitlab\"></a>配置gitlab</h1><p>安装完成后会在 <code>/etc/gitlab/</code> 下生成一个 <code>gitlab.rb</code> 的文件，需要对这个文件进行一定的修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># external_url为gitlab对外访问地址，包括邮件展示地址、拉去代码地址等；这里使用本机内网ip，也可以使用域名</span></span><br><span class=\"line\">external_url <span class=\"string\">'http://10.10.62.17/'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改gitlab服务端口(因为后续的jenkins计划和gitlab安装在一台上所以要改，如果不在一台可以跳过)</span></span><br><span class=\"line\">unicorn[<span class=\"string\">'port'</span>] = 8081</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"加载配置\"><a href=\"#加载配置\" class=\"headerlink\" title=\"加载配置\"></a>加载配置</h1><p>运行下面的命令加载配置，第一次加载时间较长：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这个命令是gitlab用来将修改过的配置立即生效的，后续修改配置后也可以使用这个命令重新加载。</p>\n</blockquote>\n<p>当最后出现下面提示时表示加载完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab Reconfigured!</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"查看gitlab状态\"><a href=\"#查看gitlab状态\" class=\"headerlink\" title=\"查看gitlab状态\"></a>查看gitlab状态</h1><p>通过下面的命令查看gitlab各组件的状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl status</span><br></pre></td></tr></table></figure>\n\n<p>我的输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run: alertmanager: (pid 30606) 83s; run: <span class=\"built_in\">log</span>: (pid 30264) 131s</span><br><span class=\"line\">run: gitaly: (pid 30438) 86s; run: <span class=\"built_in\">log</span>: (pid 29657) 229s</span><br><span class=\"line\">run: gitlab-monitor: (pid 30493) 85s; run: <span class=\"built_in\">log</span>: (pid 30156) 149s</span><br><span class=\"line\">run: gitlab-workhorse: (pid 30466) 86s; run: <span class=\"built_in\">log</span>: (pid 29970) 174s</span><br><span class=\"line\">run: grafana: (pid 30632) 82s; run: <span class=\"built_in\">log</span>: (pid 30405) 99s</span><br><span class=\"line\">run: logrotate: (pid 30015) 164s; run: <span class=\"built_in\">log</span>: (pid 30069) 161s</span><br><span class=\"line\">run: nginx: (pid 29981) 170s; run: <span class=\"built_in\">log</span>: (pid 30001) 167s</span><br><span class=\"line\">run: node-exporter: (pid 30482) 86s; run: <span class=\"built_in\">log</span>: (pid 30128) 155s</span><br><span class=\"line\">run: postgres-exporter: (pid 30621) 83s; run: <span class=\"built_in\">log</span>: (pid 30307) 125s</span><br><span class=\"line\">run: postgresql: (pid 29741) 224s; run: <span class=\"built_in\">log</span>: (pid 29790) 222s</span><br><span class=\"line\">run: prometheus: (pid 30508) 84s; run: <span class=\"built_in\">log</span>: (pid 30220) 137s</span><br><span class=\"line\">run: redis: (pid 29584) 236s; run: <span class=\"built_in\">log</span>: (pid 29594) 235s</span><br><span class=\"line\">run: redis-exporter: (pid 30500) 85s; run: <span class=\"built_in\">log</span>: (pid 30184) 143s</span><br><span class=\"line\">run: sidekiq: (pid 29925) 182s; run: <span class=\"built_in\">log</span>: (pid 29940) 179s</span><br><span class=\"line\">run: unicorn: (pid 29893) 188s; run: <span class=\"built_in\">log</span>: (pid 29920) 185s</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"停止、重启gitlab\"><a href=\"#停止、重启gitlab\" class=\"headerlink\" title=\"停止、重启gitlab\"></a>停止、重启gitlab</h1><p>停止、启动和重启gitlab的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl stop </span><br><span class=\"line\">$ gitlab-ctl start</span><br><span class=\"line\">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h1><p>通过下面的命令可以看到每一个组件的日志文件及其内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl tail</span><br></pre></td></tr></table></figure>\n\n\n\n<p>想看某个组件的日志可以在上面命令的基础上指定组件名称，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlabctl tail nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>还可以在上面命令的基础上指定某一个日志文件，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl tail gitlab-rails/production_json.log</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"访问gitlab\"><a href=\"#访问gitlab\" class=\"headerlink\" title=\"访问gitlab\"></a>访问gitlab</h1><p>前面我绑定的是内网ip，我的PC和服务器在一个内网下，所以可以直接打开浏览器输入服务器IP地址，便可以访问到gitlab了</p>\n<p><img src= \"/img/loading.gif\" data-src=\"gitlab-login.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"修改默认存储位置\"><a href=\"#修改默认存储位置\" class=\"headerlink\" title=\"修改默认存储位置\"></a>修改默认存储位置</h1><p>默认仓库存储位于 <code>/var/opt/gitlab/git-data</code> 下的 <code>repositories</code>目录，可以编辑 <code>gitlab.rb</code> 文件来修改这个路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果没有配置，则增加下面的配置；如果有，则修改</span></span><br><span class=\"line\">git_data_dirs(&#123;</span><br><span class=\"line\">   <span class=\"string\">\"default\"</span> =&gt; &#123;</span><br><span class=\"line\">     <span class=\"string\">\"path\"</span> =&gt; <span class=\"string\">\"/data1/git-data\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以添加多个仓库，default是默认仓库，切换可以在界面管理员设置中修改</span></span><br><span class=\"line\">git_data_dirs(&#123;</span><br><span class=\"line\">   <span class=\"string\">\"default\"</span> =&gt; &#123;</span><br><span class=\"line\">     <span class=\"string\">\"path\"</span> =&gt; <span class=\"string\">\"/data1/git-data\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"string\">\"alternative\"</span> =&gt; &#123;</span><br><span class=\"line\">     <span class=\"string\">\"path\"</span> =&gt; <span class=\"string\">\"/data2/git-data\"</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>需要保证系统git用户有权访问这些目录及上层目录，否则会报错</p>\n</blockquote>\n<p>重新加载配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"数据仓库迁移\"><a href=\"#数据仓库迁移\" class=\"headerlink\" title=\"数据仓库迁移\"></a>数据仓库迁移</h1><p>修改仓库后，需要通过以下命令将旧仓库的数据迁移到新的目录下。例如这里将默认路径下的代码迁移到新的仓库/data1下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先停止gitlab服务，防止生成新数据</span></span><br><span class=\"line\">$ gitlab-ctl stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录同步，注意repositories后面没有斜杠，而git-data后面有斜杠，如果写错会导致只同步子目录</span></span><br><span class=\"line\">$ rsync -av /var/opt/gitlab/git-data/repositories /data1/git-data/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 版本更新(可选)</span></span><br><span class=\"line\">$ gitlab-ctl upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查目录结构</span></span><br><span class=\"line\">$ ls /data1/git-data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启gitlab</span></span><br><span class=\"line\">$ gitlab-ctl start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新载入配置</span></span><br><span class=\"line\">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"邮件设置\"><a href=\"#邮件设置\" class=\"headerlink\" title=\"邮件设置\"></a>邮件设置</h1><p>gitlab往往需要内部的SMTP服务来发送邮件，需要修改 <code>gitlab.rb</code>文件的如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将如下内容修改为实际的地址即可</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_enable'</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_address'</span>] = <span class=\"string\">\"smtp.server\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_port'</span>] = 465</span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_user_name'</span>] = <span class=\"string\">\"smtp user\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_password'</span>] = <span class=\"string\">\"smtp password\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_domain'</span>] = <span class=\"string\">\"example.com\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_authentication'</span>] = <span class=\"string\">\"login\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_enable_starttls_auto'</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_tls'</span>] = <span class=\"literal\">false</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_openssl_verify_mode'</span>] = <span class=\"string\">'peer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 邮件默认发送于gitlab@localhost，不满足要求可以修改下面的参数</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'gitlab_email_from'</span>] = <span class=\"string\">'gitlab-test@example.com'</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'gitlab_email_reply_to'</span>] = <span class=\"string\">'gitlab@example.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重载配置</span></span><br><span class=\"line\">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>gitlab是基于Ruby On Redis开发的代码管理平台，类似于github，支持在自己的服务器上搭建和配置。gitlab目前有CE和EE两个版本：</p>\n<ul>\n<li><code>CE</code>：开源版本，免费；</li>\n<li><code>EE</code>：商业版本，收费，有第三方功能集成、代码审核扫描等；</li>\n</ul>\n<hr>\n<h1 id=\"gitlab架构\"><a href=\"#gitlab架构\" class=\"headerlink\" title=\"gitlab架构\"></a>gitlab架构</h1><p>gitlab组件架构图如下：</p>\n<p><img src=\"gitlab.png\" alt=\"\"></p>\n<p>其中的组件如下：</p>\n<ol>\n<li>gitlab workhorse：存储gitlab处理的内容，可以放在外置硬盘或者其他文件系统(如NFS)上；</li>\n<li>nginx：用户访问的前端代理；</li>\n<li>PostgreSQL：存储元数据、问题、合并请求、用户和权限等数据；</li>\n<li>Redis：消息中心，包含任务列表；</li>\n<li>Sidekiq：负责发送邮件(邮件任务从Redis中获取)；</li>\n<li>Unicorn：通过Redis中存储的用户信息进行用户验证、对代码进行修改操作；</li>\n<li>gitlab shell：从ssh前台接受用户命令；</li>\n<li>gitaly：提供高层次的gitrpc服务以访问git仓库；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><h2 id=\"安装postfix\"><a href=\"#安装postfix\" class=\"headerlink\" title=\"安装postfix\"></a>安装postfix</h2><p>后续使用其发送邮件会用到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y postfix</span><br><span class=\"line\">$ systemctl start postfix</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> postfix</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装openssh服务端和客户端\"><a href=\"#安装openssh服务端和客户端\" class=\"headerlink\" title=\"安装openssh服务端和客户端\"></a>安装openssh服务端和客户端</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y openssh-server openssh-clients</span><br><span class=\"line\">$ systemctl start sshd</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> sshd</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"其他依赖\"><a href=\"#其他依赖\" class=\"headerlink\" title=\"其他依赖\"></a>其他依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y curl policycoreutils-python</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"安装gitlab\"><a href=\"#安装gitlab\" class=\"headerlink\" title=\"安装gitlab\"></a>安装gitlab</h1><p>这里从gitlab官方下载rpm包，使用的是官方提供的快速安装命令，也可以下载对应的rpm包安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加官方yum源</span></span><br><span class=\"line\">$ curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者使用下面的命令添加</span></span><br><span class=\"line\">cat &gt; /etc/yum.repos.d/gitlab-ce.repo &lt;&lt; EOF</span><br><span class=\"line\">[gitlab-ce]</span><br><span class=\"line\">name=gitlab-ce</span><br><span class=\"line\">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://packages.gitlab.com/gpg.key</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yum安装，这里安装的是12.6.3的版本</span></span><br><span class=\"line\">$ yum install -y  gitlab-ce-12.6.3-ce.0.el7.x86_64</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"配置gitlab\"><a href=\"#配置gitlab\" class=\"headerlink\" title=\"配置gitlab\"></a>配置gitlab</h1><p>安装完成后会在 <code>/etc/gitlab/</code> 下生成一个 <code>gitlab.rb</code> 的文件，需要对这个文件进行一定的修改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># external_url为gitlab对外访问地址，包括邮件展示地址、拉去代码地址等；这里使用本机内网ip，也可以使用域名</span></span><br><span class=\"line\">external_url <span class=\"string\">'http://10.10.62.17/'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改gitlab服务端口(因为后续的jenkins计划和gitlab安装在一台上所以要改，如果不在一台可以跳过)</span></span><br><span class=\"line\">unicorn[<span class=\"string\">'port'</span>] = 8081</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"加载配置\"><a href=\"#加载配置\" class=\"headerlink\" title=\"加载配置\"></a>加载配置</h1><p>运行下面的命令加载配置，第一次加载时间较长：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>这个命令是gitlab用来将修改过的配置立即生效的，后续修改配置后也可以使用这个命令重新加载。</p>\n</blockquote>\n<p>当最后出现下面提示时表示加载完成：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab Reconfigured!</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"查看gitlab状态\"><a href=\"#查看gitlab状态\" class=\"headerlink\" title=\"查看gitlab状态\"></a>查看gitlab状态</h1><p>通过下面的命令查看gitlab各组件的状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl status</span><br></pre></td></tr></table></figure>\n\n<p>我的输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run: alertmanager: (pid 30606) 83s; run: <span class=\"built_in\">log</span>: (pid 30264) 131s</span><br><span class=\"line\">run: gitaly: (pid 30438) 86s; run: <span class=\"built_in\">log</span>: (pid 29657) 229s</span><br><span class=\"line\">run: gitlab-monitor: (pid 30493) 85s; run: <span class=\"built_in\">log</span>: (pid 30156) 149s</span><br><span class=\"line\">run: gitlab-workhorse: (pid 30466) 86s; run: <span class=\"built_in\">log</span>: (pid 29970) 174s</span><br><span class=\"line\">run: grafana: (pid 30632) 82s; run: <span class=\"built_in\">log</span>: (pid 30405) 99s</span><br><span class=\"line\">run: logrotate: (pid 30015) 164s; run: <span class=\"built_in\">log</span>: (pid 30069) 161s</span><br><span class=\"line\">run: nginx: (pid 29981) 170s; run: <span class=\"built_in\">log</span>: (pid 30001) 167s</span><br><span class=\"line\">run: node-exporter: (pid 30482) 86s; run: <span class=\"built_in\">log</span>: (pid 30128) 155s</span><br><span class=\"line\">run: postgres-exporter: (pid 30621) 83s; run: <span class=\"built_in\">log</span>: (pid 30307) 125s</span><br><span class=\"line\">run: postgresql: (pid 29741) 224s; run: <span class=\"built_in\">log</span>: (pid 29790) 222s</span><br><span class=\"line\">run: prometheus: (pid 30508) 84s; run: <span class=\"built_in\">log</span>: (pid 30220) 137s</span><br><span class=\"line\">run: redis: (pid 29584) 236s; run: <span class=\"built_in\">log</span>: (pid 29594) 235s</span><br><span class=\"line\">run: redis-exporter: (pid 30500) 85s; run: <span class=\"built_in\">log</span>: (pid 30184) 143s</span><br><span class=\"line\">run: sidekiq: (pid 29925) 182s; run: <span class=\"built_in\">log</span>: (pid 29940) 179s</span><br><span class=\"line\">run: unicorn: (pid 29893) 188s; run: <span class=\"built_in\">log</span>: (pid 29920) 185s</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"停止、重启gitlab\"><a href=\"#停止、重启gitlab\" class=\"headerlink\" title=\"停止、重启gitlab\"></a>停止、重启gitlab</h1><p>停止、启动和重启gitlab的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl stop </span><br><span class=\"line\">$ gitlab-ctl start</span><br><span class=\"line\">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h1><p>通过下面的命令可以看到每一个组件的日志文件及其内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl tail</span><br></pre></td></tr></table></figure>\n\n\n\n<p>想看某个组件的日志可以在上面命令的基础上指定组件名称，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlabctl tail nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>还可以在上面命令的基础上指定某一个日志文件，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl tail gitlab-rails/production_json.log</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"访问gitlab\"><a href=\"#访问gitlab\" class=\"headerlink\" title=\"访问gitlab\"></a>访问gitlab</h1><p>前面我绑定的是内网ip，我的PC和服务器在一个内网下，所以可以直接打开浏览器输入服务器IP地址，便可以访问到gitlab了</p>\n<p><img src=\"gitlab-login.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"修改默认存储位置\"><a href=\"#修改默认存储位置\" class=\"headerlink\" title=\"修改默认存储位置\"></a>修改默认存储位置</h1><p>默认仓库存储位于 <code>/var/opt/gitlab/git-data</code> 下的 <code>repositories</code>目录，可以编辑 <code>gitlab.rb</code> 文件来修改这个路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果没有配置，则增加下面的配置；如果有，则修改</span></span><br><span class=\"line\">git_data_dirs(&#123;</span><br><span class=\"line\">   <span class=\"string\">\"default\"</span> =&gt; &#123;</span><br><span class=\"line\">     <span class=\"string\">\"path\"</span> =&gt; <span class=\"string\">\"/data1/git-data\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以添加多个仓库，default是默认仓库，切换可以在界面管理员设置中修改</span></span><br><span class=\"line\">git_data_dirs(&#123;</span><br><span class=\"line\">   <span class=\"string\">\"default\"</span> =&gt; &#123;</span><br><span class=\"line\">     <span class=\"string\">\"path\"</span> =&gt; <span class=\"string\">\"/data1/git-data\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"string\">\"alternative\"</span> =&gt; &#123;</span><br><span class=\"line\">     <span class=\"string\">\"path\"</span> =&gt; <span class=\"string\">\"/data2/git-data\"</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>需要保证系统git用户有权访问这些目录及上层目录，否则会报错</p>\n</blockquote>\n<p>重新加载配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"数据仓库迁移\"><a href=\"#数据仓库迁移\" class=\"headerlink\" title=\"数据仓库迁移\"></a>数据仓库迁移</h1><p>修改仓库后，需要通过以下命令将旧仓库的数据迁移到新的目录下。例如这里将默认路径下的代码迁移到新的仓库/data1下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先停止gitlab服务，防止生成新数据</span></span><br><span class=\"line\">$ gitlab-ctl stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录同步，注意repositories后面没有斜杠，而git-data后面有斜杠，如果写错会导致只同步子目录</span></span><br><span class=\"line\">$ rsync -av /var/opt/gitlab/git-data/repositories /data1/git-data/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 版本更新(可选)</span></span><br><span class=\"line\">$ gitlab-ctl upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查目录结构</span></span><br><span class=\"line\">$ ls /data1/git-data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启gitlab</span></span><br><span class=\"line\">$ gitlab-ctl start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新载入配置</span></span><br><span class=\"line\">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"邮件设置\"><a href=\"#邮件设置\" class=\"headerlink\" title=\"邮件设置\"></a>邮件设置</h1><p>gitlab往往需要内部的SMTP服务来发送邮件，需要修改 <code>gitlab.rb</code>文件的如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将如下内容修改为实际的地址即可</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_enable'</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_address'</span>] = <span class=\"string\">\"smtp.server\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_port'</span>] = 465</span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_user_name'</span>] = <span class=\"string\">\"smtp user\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_password'</span>] = <span class=\"string\">\"smtp password\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_domain'</span>] = <span class=\"string\">\"example.com\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_authentication'</span>] = <span class=\"string\">\"login\"</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_enable_starttls_auto'</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_tls'</span>] = <span class=\"literal\">false</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'smtp_openssl_verify_mode'</span>] = <span class=\"string\">'peer'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 邮件默认发送于gitlab@localhost，不满足要求可以修改下面的参数</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'gitlab_email_from'</span>] = <span class=\"string\">'gitlab-test@example.com'</span></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">'gitlab_email_reply_to'</span>] = <span class=\"string\">'gitlab@example.com'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重载配置</span></span><br><span class=\"line\">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Jenkins忘记密码如何处理","date":"2020-08-03T09:25:13.000Z","description":"jenkins忘记管理员密码后无法登陆的处理方式","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596456872097&di=9fcad7633bbe4b55c2542f5ca482dd04&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180604%2F6fe777ff8ac84205b320d59eada0f954.jpeg","_content":"\n\n\n编辑jenkins目录下的`config.xml`文件，注释下面的代码：\n\n```xml\n<useSecurity>true</useSecurity>  \n<authorizationStrategy class=\"hudson.security.FullControlOnceLoggedInAuthorizationStrategy\">  \n  <denyAnonymousReadAccess>true</denyAnonymousReadAccess>  \n</authorizationStrategy>  \n<securityRealm class=\"hudson.security.HudsonPrivateSecurityRealm\">  \n  <disableSignup>true</disableSignup>  \n  <enableCaptcha>false</enableCaptcha>  \n</securityRealm>\n```\n\n\n\n然后重启jenkins。\n\n\n\n进入首页>“系统管理”>“Configure Global Security”；勾选如下的选项\n\n<img src=\"jenkins-forgetpass.png\" style=\"zoom:50%;\" />\n\n\n\n保存后重新点击首页>“系统管理”,发现此时出现“管理用户”，之后修改用户密码就可以登陆了。\n\n\n\n\n\n\n\n","source":"_posts/Jenkins忘记密码如何处理.md","raw":"---\ntitle: Jenkins忘记密码如何处理\ndate: 2020-08-03 17:25:13\ntags:\n- Jenkins\ncategories:\n- CICD\n- Jenkins\ndescription: jenkins忘记管理员密码后无法登陆的处理方式\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596456872097&di=9fcad7633bbe4b55c2542f5ca482dd04&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180604%2F6fe777ff8ac84205b320d59eada0f954.jpeg\n---\n\n\n\n编辑jenkins目录下的`config.xml`文件，注释下面的代码：\n\n```xml\n<useSecurity>true</useSecurity>  \n<authorizationStrategy class=\"hudson.security.FullControlOnceLoggedInAuthorizationStrategy\">  \n  <denyAnonymousReadAccess>true</denyAnonymousReadAccess>  \n</authorizationStrategy>  \n<securityRealm class=\"hudson.security.HudsonPrivateSecurityRealm\">  \n  <disableSignup>true</disableSignup>  \n  <enableCaptcha>false</enableCaptcha>  \n</securityRealm>\n```\n\n\n\n然后重启jenkins。\n\n\n\n进入首页>“系统管理”>“Configure Global Security”；勾选如下的选项\n\n<img src=\"jenkins-forgetpass.png\" style=\"zoom:50%;\" />\n\n\n\n保存后重新点击首页>“系统管理”,发现此时出现“管理用户”，之后修改用户密码就可以登陆了。\n\n\n\n\n\n\n\n","slug":"Jenkins忘记密码如何处理","published":1,"updated":"2020-08-03T09:28:20.057Z","_id":"ckdeb8ejl00005fn09f499ulb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>编辑jenkins目录下的<code>config.xml</code>文件，注释下面的代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">useSecurity</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">useSecurity</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">authorizationStrategy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hudson.security.FullControlOnceLoggedInAuthorizationStrategy\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">denyAnonymousReadAccess</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">denyAnonymousReadAccess</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">authorizationStrategy</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">securityRealm</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hudson.security.HudsonPrivateSecurityRealm\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">disableSignup</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">disableSignup</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">enableCaptcha</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enableCaptcha</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">securityRealm</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后重启jenkins。</p>\n<p>进入首页&gt;“系统管理”&gt;“Configure Global Security”；勾选如下的选项</p>\n<img src= \"/img/loading.gif\" data-src=\"jenkins-forgetpass.png\" style=\"zoom:50%;\" />\n\n\n\n<p>保存后重新点击首页&gt;“系统管理”,发现此时出现“管理用户”，之后修改用户密码就可以登陆了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>编辑jenkins目录下的<code>config.xml</code>文件，注释下面的代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">useSecurity</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">useSecurity</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">authorizationStrategy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hudson.security.FullControlOnceLoggedInAuthorizationStrategy\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">denyAnonymousReadAccess</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">denyAnonymousReadAccess</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">authorizationStrategy</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">securityRealm</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hudson.security.HudsonPrivateSecurityRealm\"</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">disableSignup</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">disableSignup</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">enableCaptcha</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enableCaptcha</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">securityRealm</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后重启jenkins。</p>\n<p>进入首页&gt;“系统管理”&gt;“Configure Global Security”；勾选如下的选项</p>\n<img src=\"jenkins-forgetpass.png\" style=\"zoom:50%;\" />\n\n\n\n<p>保存后重新点击首页&gt;“系统管理”,发现此时出现“管理用户”，之后修改用户密码就可以登陆了。</p>\n"},{"title":"Nginx基础概念","date":"2020-07-03T08:33:07.000Z","description":"介绍nginx基本概念和工作原理","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596540192624&di=bbd964cce4cea1709707e02e51dc38ce&imgtype=0&src=http%3A%2F%2Fwww.otcms.cn%2Fupfiles%2Finfoimg%2Fcoll%2Fot20190122232426541.jpg","_content":"\n\n\n\n\n# 介绍\n\nnginx是目前最火热的web服务器和负载均衡服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，同时也可以作为一个缓存服务器。\n\n\n\n<br>\n\n\n\n# 与apache相比\n\nNginx：\n\n- IO 多路复用，Epoll（freebsd 上是 kqueue）\n- 高性能\n- 高并发\n- 占用系统资源少\n\n\nApache：\n\n- 阻塞+多进程/多线程\n- 更稳定，Bug 少\n- 模块更丰富\n\n\n\n<br>\n\n\n\n# nginx工作模型\n\n\n\n![](nginx-process.png)\n\n\n\nNginx 服务器，正常运行过程中：\n\n- 多进程：一个 Master 进程、多个 Worker 进程。\n- Master 进程：管理 Worker 进程。接收外部的操作（信号）；根据外部的操作的不同，通过信号管理 Worker；监控 Worker 进程的运行状态，Worker 进程异常终止后，自动重启 Worker 进程。\n- Worker 进程：所有 Worker 进程都是平等的。网络请求由 Worker 进程处理。Worker 进程数量在 nginx.conf 中配置，一般设置为核心数，充分利用 CPU 资源，同时，避免进程数量过多，避免进程竞争 CPU 资源，增加上下文切换的损耗。\n\n<br>\n\n\n\n# 工作细节\n\nmaster工作细节：\n\n1. master建立listen的socket；\n2. master fork出worker进程；\n3. 新请求到来时，worker间相互竞争，获胜的获得listenfd可读时间；\n4. 获胜的worker accept当前连接，处理请求；\n\n\n\nworker工作细节：\n\n1. 新请求到来时，所有worker的listenfd都变为可读的；\n2. worker间相互竞争，获胜的获得listenfd可读时间；\n3. worker处理并响应请求；\n\n\n\n","source":"_posts/Nginx基础概念.md","raw":"---\ntitle: Nginx基础概念\ndate: 2020-07-03 16:33:07\ntags:\n- Nginx\ncategories:\n- Nginx\ndescription: 介绍nginx基本概念和工作原理\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596540192624&di=bbd964cce4cea1709707e02e51dc38ce&imgtype=0&src=http%3A%2F%2Fwww.otcms.cn%2Fupfiles%2Finfoimg%2Fcoll%2Fot20190122232426541.jpg\n---\n\n\n\n\n\n# 介绍\n\nnginx是目前最火热的web服务器和负载均衡服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，同时也可以作为一个缓存服务器。\n\n\n\n<br>\n\n\n\n# 与apache相比\n\nNginx：\n\n- IO 多路复用，Epoll（freebsd 上是 kqueue）\n- 高性能\n- 高并发\n- 占用系统资源少\n\n\nApache：\n\n- 阻塞+多进程/多线程\n- 更稳定，Bug 少\n- 模块更丰富\n\n\n\n<br>\n\n\n\n# nginx工作模型\n\n\n\n![](nginx-process.png)\n\n\n\nNginx 服务器，正常运行过程中：\n\n- 多进程：一个 Master 进程、多个 Worker 进程。\n- Master 进程：管理 Worker 进程。接收外部的操作（信号）；根据外部的操作的不同，通过信号管理 Worker；监控 Worker 进程的运行状态，Worker 进程异常终止后，自动重启 Worker 进程。\n- Worker 进程：所有 Worker 进程都是平等的。网络请求由 Worker 进程处理。Worker 进程数量在 nginx.conf 中配置，一般设置为核心数，充分利用 CPU 资源，同时，避免进程数量过多，避免进程竞争 CPU 资源，增加上下文切换的损耗。\n\n<br>\n\n\n\n# 工作细节\n\nmaster工作细节：\n\n1. master建立listen的socket；\n2. master fork出worker进程；\n3. 新请求到来时，worker间相互竞争，获胜的获得listenfd可读时间；\n4. 获胜的worker accept当前连接，处理请求；\n\n\n\nworker工作细节：\n\n1. 新请求到来时，所有worker的listenfd都变为可读的；\n2. worker间相互竞争，获胜的获得listenfd可读时间；\n3. worker处理并响应请求；\n\n\n\n","slug":"Nginx基础概念","published":1,"updated":"2020-08-04T09:14:52.696Z","_id":"ckdfp07170000byn03y0v5dd6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>nginx是目前最火热的web服务器和负载均衡服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，同时也可以作为一个缓存服务器。</p>\n<br>\n\n\n\n<h1 id=\"与apache相比\"><a href=\"#与apache相比\" class=\"headerlink\" title=\"与apache相比\"></a>与apache相比</h1><p>Nginx：</p>\n<ul>\n<li>IO 多路复用，Epoll（freebsd 上是 kqueue）</li>\n<li>高性能</li>\n<li>高并发</li>\n<li>占用系统资源少</li>\n</ul>\n<p>Apache：</p>\n<ul>\n<li>阻塞+多进程/多线程</li>\n<li>更稳定，Bug 少</li>\n<li>模块更丰富</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"nginx工作模型\"><a href=\"#nginx工作模型\" class=\"headerlink\" title=\"nginx工作模型\"></a>nginx工作模型</h1><p><img src= \"/img/loading.gif\" data-src=\"nginx-process.png\" alt=\"\"></p>\n<p>Nginx 服务器，正常运行过程中：</p>\n<ul>\n<li>多进程：一个 Master 进程、多个 Worker 进程。</li>\n<li>Master 进程：管理 Worker 进程。接收外部的操作（信号）；根据外部的操作的不同，通过信号管理 Worker；监控 Worker 进程的运行状态，Worker 进程异常终止后，自动重启 Worker 进程。</li>\n<li>Worker 进程：所有 Worker 进程都是平等的。网络请求由 Worker 进程处理。Worker 进程数量在 nginx.conf 中配置，一般设置为核心数，充分利用 CPU 资源，同时，避免进程数量过多，避免进程竞争 CPU 资源，增加上下文切换的损耗。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"工作细节\"><a href=\"#工作细节\" class=\"headerlink\" title=\"工作细节\"></a>工作细节</h1><p>master工作细节：</p>\n<ol>\n<li>master建立listen的socket；</li>\n<li>master fork出worker进程；</li>\n<li>新请求到来时，worker间相互竞争，获胜的获得listenfd可读时间；</li>\n<li>获胜的worker accept当前连接，处理请求；</li>\n</ol>\n<p>worker工作细节：</p>\n<ol>\n<li>新请求到来时，所有worker的listenfd都变为可读的；</li>\n<li>worker间相互竞争，获胜的获得listenfd可读时间；</li>\n<li>worker处理并响应请求；</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>nginx是目前最火热的web服务器和负载均衡服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，同时也可以作为一个缓存服务器。</p>\n<br>\n\n\n\n<h1 id=\"与apache相比\"><a href=\"#与apache相比\" class=\"headerlink\" title=\"与apache相比\"></a>与apache相比</h1><p>Nginx：</p>\n<ul>\n<li>IO 多路复用，Epoll（freebsd 上是 kqueue）</li>\n<li>高性能</li>\n<li>高并发</li>\n<li>占用系统资源少</li>\n</ul>\n<p>Apache：</p>\n<ul>\n<li>阻塞+多进程/多线程</li>\n<li>更稳定，Bug 少</li>\n<li>模块更丰富</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"nginx工作模型\"><a href=\"#nginx工作模型\" class=\"headerlink\" title=\"nginx工作模型\"></a>nginx工作模型</h1><p><img src=\"nginx-process.png\" alt=\"\"></p>\n<p>Nginx 服务器，正常运行过程中：</p>\n<ul>\n<li>多进程：一个 Master 进程、多个 Worker 进程。</li>\n<li>Master 进程：管理 Worker 进程。接收外部的操作（信号）；根据外部的操作的不同，通过信号管理 Worker；监控 Worker 进程的运行状态，Worker 进程异常终止后，自动重启 Worker 进程。</li>\n<li>Worker 进程：所有 Worker 进程都是平等的。网络请求由 Worker 进程处理。Worker 进程数量在 nginx.conf 中配置，一般设置为核心数，充分利用 CPU 资源，同时，避免进程数量过多，避免进程竞争 CPU 资源，增加上下文切换的损耗。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"工作细节\"><a href=\"#工作细节\" class=\"headerlink\" title=\"工作细节\"></a>工作细节</h1><p>master工作细节：</p>\n<ol>\n<li>master建立listen的socket；</li>\n<li>master fork出worker进程；</li>\n<li>新请求到来时，worker间相互竞争，获胜的获得listenfd可读时间；</li>\n<li>获胜的worker accept当前连接，处理请求；</li>\n</ol>\n<p>worker工作细节：</p>\n<ol>\n<li>新请求到来时，所有worker的listenfd都变为可读的；</li>\n<li>worker间相互竞争，获胜的获得listenfd可读时间；</li>\n<li>worker处理并响应请求；</li>\n</ol>\n"},{"title":"Django使用Middleware记录日志","date":"2020-08-05T07:39:23.000Z","description":"Django中通过自己编写middleware来实现请求日志记录","cover":"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=316528160,103010658&fm=26&gp=0.jpg","_content":"\n\n\n# 默认日志\n\ndjango在运行后默认会打印请求日志到标准输出，格式如下：\n\n```bash\n[05/Aug/2020 15:48:44] \"POST /api/infrastructer/v1/devicetype/query HTTP/1.1\" 200 480\n```\n\n\n\n但是这样的日志存在如下的问题：\n\n1. 内容太少；\n2. 不知道是哪个客户端请求；\n3. 不能显示详细的报错内容；\n4. 不能快速定位到报错的代码位置；\n5. 不知道请求参数；\n6. ......\n\n\n\n针对这些问题，可以基于`logging`模块来定制日志内容。\n\n\n\n<br>\n\n\n\n# 基于middleware的日志输出\n\ndjango的`middleware`是一个强大的功能，所有的请求都要通过中间件才能进行试图函数的处理，同理响应也会通过中间件。因此，可以手动编写一个日志的中间件来捕获请求和响应中的所需参数实现自定义日志输出。\n\n\n\n## 日志中间件\n\n首先新建一个`middleware`的目录，其中保存中间件代码。并在其中新建一个`middleware_logging.py`的中间件：\n\n```python\nimport json\nimport socket\nimport threading\nimport logging\n\nfrom django.utils.deprecation import MiddlewareMixin\n\n\nlocal = threading.local()\n\n\nclass RequestLogFilter(logging.Filter):\n    '''将当前请求的request信息保存到日志record上下文'''\n    def filter(self, record):\n        record.sip = getattr(local, 'sip', 'none')\n        record.dip = getattr(local, 'dip', 'none')\n        record.body = getattr(local, 'body', 'none')\n        record.api = getattr(local, 'api', 'none')\n        record.method = getattr(local, 'method', 'none')\n        record.status_code = getattr(local, 'status_code', 'none')\n        record.reason_phrase = getattr(local, 'reason_phrase', 'none')\n\n        return True\n\n\nclass RequestLogMiddleware(MiddlewareMixin):\n    '''将请求日志记录到当前请求线程上'''\n    def __init__(self, get_response=None):\n        self.get_response = get_response\n        self.apiLogger = logging.getLogger('api')\n\n    def __call__(self, request):\n        try:\n            body = json.loads(request.body)\n        except Exception as e:\n            body = dict()\n\n        if request.method == 'GET':\n            body.update(dict(request.GET))\n        else:\n            body.update(dict(request.POST))\n\n        # 日志变量\n        local.body = body\n        local.method = request.method\n        local.api = request.path\n        local.sip = request.META.get('REMOTE_ADDR', '')\n        local.dip = socket.gethostbyname(socket.gethostname())\n        response = self.get_response(request)\n        local.status_code = response.status_code\n        local.reason_phrase = response.reason_phrase\n\n        return response\n```\n\n\n\n在这段代码中有两个类：\n\n- `RequestLogFilter`：用于日志过滤器（在logging配置时使用）；\n- `RequestLogMiddleware`：日志中间件；\n\n\n\n## 设置logging配置\n\n在`setting.py`中新增如下的logging配置代码：\n\n```python\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    \"formatters\": { \n        \"stdout\": { \n            \"format\": '{'\n                '\"level\": \"%(levelname)s\", '\n                '\"date\": \"%(asctime)s\", '\n                '\"method\": \"%(method)s\", '\n                '\"api\": \"%(api)s\", '\n                '\"body\": \"%(body)s\", '\n                '\"filename\": \"%(pathname)s:%(lineno)d\", '\n                '\"func\": \"%(funcName)s\", '\n                '\"source\": \"%(sip)s\", '\n                '\"dest\": \"%(dip)s\", '\n                '\"message\": \"%(message)s\"'\n            '}',\n            \"datefmt\": \"%Y-%m-%d %H:%M:%S\",\n        }\n    },\n    \"filters\": {\n        \"request_info\": {\"()\": \"middleware.middleware_logging.RequestLogFilter\"}\n\n    },\n    \"handlers\": { \n        \"console\": { \n            \"level\": \"INFO\",\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"stdout\",\n            \"filters\": ['request_info']\n        },\n    },\n    \"root\": {\"level\": \"INFO\", \"handlers\": [\"console\"]},\n    \"loggers\": {\n        \"django.request\": { \n          \t\"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n            \"propagate\": True, \n        },\n    },\n}\n```\n\n- `disable_existing_loggers`：是否禁用现有的日志记录器（设置为True的话只会记录当前设置的日志格式）；\n- `formaters`：定义日志的样式，在这个示例中定义了一个名为`stdout`的日志格式；\n  - `format`：日志格式的具体内容，我这里写成了json格式，也可以是任何格式；\n  - `datefmt`：对日期进行格式化；\n- `filters`：定义日志过滤器，这里定义了上边定义的日志过滤器，但是如果想使用，需要在下面进行指定；\n- `handlers`：定义日志处理方式，支持输出到文件、输出到标准输出等多种方式；\n  - `console`：指定将日志输出到标准输出；\n  - `formatter`：指定用哪种日志格式输出日志；\n  - `filters`：指定日志过滤器；\n- `loggers`：定义哪些类型的日志会被记录；\n  - `django.request`：表示所有request请求；\n  - `handlers`：绑定使用的日志处理方式；\n\n\n\n如果是想要输出日志到文件，可以在`handlers`中增加下面的配置：\n\n```python\n'file': { # Info级别以上保存到日志文件\n\t\t'level': 'INFO',\n\t\t'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切\n\t\t'filename': os.path.join(LOG_DIR,\"info.log\"),  # 日志文件\n\t\t'maxBytes': 1024 * 1024 * 10,  # 日志大小 10M\n\t\t'backupCount': 2,  # 备份数为 2\n\t\t'formatter': 'stdout', # 简单格式\n\t\t'encoding': 'utf-8',\n},\n```\n\n\n\n> 注意设置`TIME_ZONE`为`Asia/Shanghai`\n\n\n\n`formatters`支持多种内置的变量，可以在 [日志变量](https://docs.python.org/3/library/logging.html#logrecord-attributes)中查看到。\n\n\n\n## 日志打印\n\n需要在视图函数中的合适位置新增如下的代码：\n\n```python\nimport logging as log\n\n# info日志\nlog.info('ifno log')\n\n# warning日志\nlog.warning('warning log')\n\n# error日志\nlog.error('error log')\n```\n\n\n\n这样在程序出现问题时就可以打印日志了，格式如下：\n\n```bash\n{\"level\": \"INFO\", \"date\": \"2020-08-05 16:34:32\", \"method\": \"POST\", \"api\": \"/api/infrastructer/v1/devicetype/query\", \"body\": \"{'page': 1, 'limit': 2}\", \"filename\": \"/Users/lee/Desktop/ipaas/infrastructer/api/devicetpye/query_devicetype.py:28\", \"func\": \"v1_query_devicetype\", \"source\": \"127.0.0.1\", \"dest\": \"127.0.0.1\", \"message\": \"query devicetype success.\"}\n```\n\n\n\n<br>\n\n\n\n# 日志输出的流程\n\n1. 首先会加载`setting.py`中的日志配置，并加载`RequestLogFilter`日志过滤器；\n2. 之后请求来到`RequestLogMiddleware`中间件中，它会获取请求中的一些参数并保存到日志对象中；\n3. 当程序执行到`log.info`这样的打印日志语句时，会根据日志配置打印出日志内容。\n\n\n\n<br>","source":"_posts/Django使用Middleware记录日志.md","raw":"---\ntitle: Django使用Middleware记录日志\ndate: 2020-08-05 15:39:23\ntags:\n- Django\ncategories:\n- python web开发\n- Django\ndescription: Django中通过自己编写middleware来实现请求日志记录\ncover: https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=316528160,103010658&fm=26&gp=0.jpg\n---\n\n\n\n# 默认日志\n\ndjango在运行后默认会打印请求日志到标准输出，格式如下：\n\n```bash\n[05/Aug/2020 15:48:44] \"POST /api/infrastructer/v1/devicetype/query HTTP/1.1\" 200 480\n```\n\n\n\n但是这样的日志存在如下的问题：\n\n1. 内容太少；\n2. 不知道是哪个客户端请求；\n3. 不能显示详细的报错内容；\n4. 不能快速定位到报错的代码位置；\n5. 不知道请求参数；\n6. ......\n\n\n\n针对这些问题，可以基于`logging`模块来定制日志内容。\n\n\n\n<br>\n\n\n\n# 基于middleware的日志输出\n\ndjango的`middleware`是一个强大的功能，所有的请求都要通过中间件才能进行试图函数的处理，同理响应也会通过中间件。因此，可以手动编写一个日志的中间件来捕获请求和响应中的所需参数实现自定义日志输出。\n\n\n\n## 日志中间件\n\n首先新建一个`middleware`的目录，其中保存中间件代码。并在其中新建一个`middleware_logging.py`的中间件：\n\n```python\nimport json\nimport socket\nimport threading\nimport logging\n\nfrom django.utils.deprecation import MiddlewareMixin\n\n\nlocal = threading.local()\n\n\nclass RequestLogFilter(logging.Filter):\n    '''将当前请求的request信息保存到日志record上下文'''\n    def filter(self, record):\n        record.sip = getattr(local, 'sip', 'none')\n        record.dip = getattr(local, 'dip', 'none')\n        record.body = getattr(local, 'body', 'none')\n        record.api = getattr(local, 'api', 'none')\n        record.method = getattr(local, 'method', 'none')\n        record.status_code = getattr(local, 'status_code', 'none')\n        record.reason_phrase = getattr(local, 'reason_phrase', 'none')\n\n        return True\n\n\nclass RequestLogMiddleware(MiddlewareMixin):\n    '''将请求日志记录到当前请求线程上'''\n    def __init__(self, get_response=None):\n        self.get_response = get_response\n        self.apiLogger = logging.getLogger('api')\n\n    def __call__(self, request):\n        try:\n            body = json.loads(request.body)\n        except Exception as e:\n            body = dict()\n\n        if request.method == 'GET':\n            body.update(dict(request.GET))\n        else:\n            body.update(dict(request.POST))\n\n        # 日志变量\n        local.body = body\n        local.method = request.method\n        local.api = request.path\n        local.sip = request.META.get('REMOTE_ADDR', '')\n        local.dip = socket.gethostbyname(socket.gethostname())\n        response = self.get_response(request)\n        local.status_code = response.status_code\n        local.reason_phrase = response.reason_phrase\n\n        return response\n```\n\n\n\n在这段代码中有两个类：\n\n- `RequestLogFilter`：用于日志过滤器（在logging配置时使用）；\n- `RequestLogMiddleware`：日志中间件；\n\n\n\n## 设置logging配置\n\n在`setting.py`中新增如下的logging配置代码：\n\n```python\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    \"formatters\": { \n        \"stdout\": { \n            \"format\": '{'\n                '\"level\": \"%(levelname)s\", '\n                '\"date\": \"%(asctime)s\", '\n                '\"method\": \"%(method)s\", '\n                '\"api\": \"%(api)s\", '\n                '\"body\": \"%(body)s\", '\n                '\"filename\": \"%(pathname)s:%(lineno)d\", '\n                '\"func\": \"%(funcName)s\", '\n                '\"source\": \"%(sip)s\", '\n                '\"dest\": \"%(dip)s\", '\n                '\"message\": \"%(message)s\"'\n            '}',\n            \"datefmt\": \"%Y-%m-%d %H:%M:%S\",\n        }\n    },\n    \"filters\": {\n        \"request_info\": {\"()\": \"middleware.middleware_logging.RequestLogFilter\"}\n\n    },\n    \"handlers\": { \n        \"console\": { \n            \"level\": \"INFO\",\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"stdout\",\n            \"filters\": ['request_info']\n        },\n    },\n    \"root\": {\"level\": \"INFO\", \"handlers\": [\"console\"]},\n    \"loggers\": {\n        \"django.request\": { \n          \t\"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n            \"propagate\": True, \n        },\n    },\n}\n```\n\n- `disable_existing_loggers`：是否禁用现有的日志记录器（设置为True的话只会记录当前设置的日志格式）；\n- `formaters`：定义日志的样式，在这个示例中定义了一个名为`stdout`的日志格式；\n  - `format`：日志格式的具体内容，我这里写成了json格式，也可以是任何格式；\n  - `datefmt`：对日期进行格式化；\n- `filters`：定义日志过滤器，这里定义了上边定义的日志过滤器，但是如果想使用，需要在下面进行指定；\n- `handlers`：定义日志处理方式，支持输出到文件、输出到标准输出等多种方式；\n  - `console`：指定将日志输出到标准输出；\n  - `formatter`：指定用哪种日志格式输出日志；\n  - `filters`：指定日志过滤器；\n- `loggers`：定义哪些类型的日志会被记录；\n  - `django.request`：表示所有request请求；\n  - `handlers`：绑定使用的日志处理方式；\n\n\n\n如果是想要输出日志到文件，可以在`handlers`中增加下面的配置：\n\n```python\n'file': { # Info级别以上保存到日志文件\n\t\t'level': 'INFO',\n\t\t'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切\n\t\t'filename': os.path.join(LOG_DIR,\"info.log\"),  # 日志文件\n\t\t'maxBytes': 1024 * 1024 * 10,  # 日志大小 10M\n\t\t'backupCount': 2,  # 备份数为 2\n\t\t'formatter': 'stdout', # 简单格式\n\t\t'encoding': 'utf-8',\n},\n```\n\n\n\n> 注意设置`TIME_ZONE`为`Asia/Shanghai`\n\n\n\n`formatters`支持多种内置的变量，可以在 [日志变量](https://docs.python.org/3/library/logging.html#logrecord-attributes)中查看到。\n\n\n\n## 日志打印\n\n需要在视图函数中的合适位置新增如下的代码：\n\n```python\nimport logging as log\n\n# info日志\nlog.info('ifno log')\n\n# warning日志\nlog.warning('warning log')\n\n# error日志\nlog.error('error log')\n```\n\n\n\n这样在程序出现问题时就可以打印日志了，格式如下：\n\n```bash\n{\"level\": \"INFO\", \"date\": \"2020-08-05 16:34:32\", \"method\": \"POST\", \"api\": \"/api/infrastructer/v1/devicetype/query\", \"body\": \"{'page': 1, 'limit': 2}\", \"filename\": \"/Users/lee/Desktop/ipaas/infrastructer/api/devicetpye/query_devicetype.py:28\", \"func\": \"v1_query_devicetype\", \"source\": \"127.0.0.1\", \"dest\": \"127.0.0.1\", \"message\": \"query devicetype success.\"}\n```\n\n\n\n<br>\n\n\n\n# 日志输出的流程\n\n1. 首先会加载`setting.py`中的日志配置，并加载`RequestLogFilter`日志过滤器；\n2. 之后请求来到`RequestLogMiddleware`中间件中，它会获取请求中的一些参数并保存到日志对象中；\n3. 当程序执行到`log.info`这样的打印日志语句时，会根据日志配置打印出日志内容。\n\n\n\n<br>","slug":"Django使用Middleware记录日志","published":1,"updated":"2020-08-05T08:44:39.821Z","_id":"ckdh2dooc0000wkn0acdratrw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"默认日志\"><a href=\"#默认日志\" class=\"headerlink\" title=\"默认日志\"></a>默认日志</h1><p>django在运行后默认会打印请求日志到标准输出，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[05/Aug/2020 15:48:44] <span class=\"string\">\"POST /api/infrastructer/v1/devicetype/query HTTP/1.1\"</span> 200 480</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但是这样的日志存在如下的问题：</p>\n<ol>\n<li>内容太少；</li>\n<li>不知道是哪个客户端请求；</li>\n<li>不能显示详细的报错内容；</li>\n<li>不能快速定位到报错的代码位置；</li>\n<li>不知道请求参数；</li>\n<li>……</li>\n</ol>\n<p>针对这些问题，可以基于<code>logging</code>模块来定制日志内容。</p>\n<br>\n\n\n\n<h1 id=\"基于middleware的日志输出\"><a href=\"#基于middleware的日志输出\" class=\"headerlink\" title=\"基于middleware的日志输出\"></a>基于middleware的日志输出</h1><p>django的<code>middleware</code>是一个强大的功能，所有的请求都要通过中间件才能进行试图函数的处理，同理响应也会通过中间件。因此，可以手动编写一个日志的中间件来捕获请求和响应中的所需参数实现自定义日志输出。</p>\n<h2 id=\"日志中间件\"><a href=\"#日志中间件\" class=\"headerlink\" title=\"日志中间件\"></a>日志中间件</h2><p>首先新建一个<code>middleware</code>的目录，其中保存中间件代码。并在其中新建一个<code>middleware_logging.py</code>的中间件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">local = threading.local()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestLogFilter</span><span class=\"params\">(logging.Filter)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''将当前请求的request信息保存到日志record上下文'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        record.sip = getattr(local, <span class=\"string\">'sip'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.dip = getattr(local, <span class=\"string\">'dip'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.body = getattr(local, <span class=\"string\">'body'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.api = getattr(local, <span class=\"string\">'api'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.method = getattr(local, <span class=\"string\">'method'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.status_code = getattr(local, <span class=\"string\">'status_code'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.reason_phrase = getattr(local, <span class=\"string\">'reason_phrase'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestLogMiddleware</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''将请求日志记录到当前请求线程上'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, get_response=None)</span>:</span></span><br><span class=\"line\">        self.get_response = get_response</span><br><span class=\"line\">        self.apiLogger = logging.getLogger(<span class=\"string\">'api'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            body = json.loads(request.body)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            body = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">            body.update(dict(request.GET))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            body.update(dict(request.POST))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 日志变量</span></span><br><span class=\"line\">        local.body = body</span><br><span class=\"line\">        local.method = request.method</span><br><span class=\"line\">        local.api = request.path</span><br><span class=\"line\">        local.sip = request.META.get(<span class=\"string\">'REMOTE_ADDR'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">        local.dip = socket.gethostbyname(socket.gethostname())</span><br><span class=\"line\">        response = self.get_response(request)</span><br><span class=\"line\">        local.status_code = response.status_code</span><br><span class=\"line\">        local.reason_phrase = response.reason_phrase</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这段代码中有两个类：</p>\n<ul>\n<li><code>RequestLogFilter</code>：用于日志过滤器（在logging配置时使用）；</li>\n<li><code>RequestLogMiddleware</code>：日志中间件；</li>\n</ul>\n<h2 id=\"设置logging配置\"><a href=\"#设置logging配置\" class=\"headerlink\" title=\"设置logging配置\"></a>设置logging配置</h2><p>在<code>setting.py</code>中新增如下的logging配置代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOGGING = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">\"disable_existing_loggers\"</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">    <span class=\"string\">\"formatters\"</span>: &#123; </span><br><span class=\"line\">        <span class=\"string\">\"stdout\"</span>: &#123; </span><br><span class=\"line\">            <span class=\"string\">\"format\"</span>: <span class=\"string\">'&#123;'</span></span><br><span class=\"line\">                <span class=\"string\">'\"level\": \"%(levelname)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"date\": \"%(asctime)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"method\": \"%(method)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"api\": \"%(api)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"body\": \"%(body)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"filename\": \"%(pathname)s:%(lineno)d\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"func\": \"%(funcName)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"source\": \"%(sip)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"dest\": \"%(dip)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"message\": \"%(message)s\"'</span></span><br><span class=\"line\">            <span class=\"string\">'&#125;'</span>,</span><br><span class=\"line\">            <span class=\"string\">\"datefmt\"</span>: <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"filters\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"request_info\"</span>: &#123;<span class=\"string\">\"()\"</span>: <span class=\"string\">\"middleware.middleware_logging.RequestLogFilter\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"handlers\"</span>: &#123; </span><br><span class=\"line\">        <span class=\"string\">\"console\"</span>: &#123; </span><br><span class=\"line\">            <span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"class\"</span>: <span class=\"string\">\"logging.StreamHandler\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"formatter\"</span>: <span class=\"string\">\"stdout\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"filters\"</span>: [<span class=\"string\">'request_info'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"root\"</span>: &#123;<span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>, <span class=\"string\">\"handlers\"</span>: [<span class=\"string\">\"console\"</span>]&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"loggers\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"django.request\"</span>: &#123; </span><br><span class=\"line\">          \t<span class=\"string\">\"handlers\"</span>: [<span class=\"string\">\"console\"</span>],</span><br><span class=\"line\">            <span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"propagate\"</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>disable_existing_loggers</code>：是否禁用现有的日志记录器（设置为True的话只会记录当前设置的日志格式）；</li>\n<li><code>formaters</code>：定义日志的样式，在这个示例中定义了一个名为<code>stdout</code>的日志格式；<ul>\n<li><code>format</code>：日志格式的具体内容，我这里写成了json格式，也可以是任何格式；</li>\n<li><code>datefmt</code>：对日期进行格式化；</li>\n</ul>\n</li>\n<li><code>filters</code>：定义日志过滤器，这里定义了上边定义的日志过滤器，但是如果想使用，需要在下面进行指定；</li>\n<li><code>handlers</code>：定义日志处理方式，支持输出到文件、输出到标准输出等多种方式；<ul>\n<li><code>console</code>：指定将日志输出到标准输出；</li>\n<li><code>formatter</code>：指定用哪种日志格式输出日志；</li>\n<li><code>filters</code>：指定日志过滤器；</li>\n</ul>\n</li>\n<li><code>loggers</code>：定义哪些类型的日志会被记录；<ul>\n<li><code>django.request</code>：表示所有request请求；</li>\n<li><code>handlers</code>：绑定使用的日志处理方式；</li>\n</ul>\n</li>\n</ul>\n<p>如果是想要输出日志到文件，可以在<code>handlers</code>中增加下面的配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'file'</span>: &#123; <span class=\"comment\"># Info级别以上保存到日志文件</span></span><br><span class=\"line\">\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'INFO'</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">'class'</span>: <span class=\"string\">'logging.handlers.RotatingFileHandler'</span>,  <span class=\"comment\"># 保存到文件，根据文件大小自动切</span></span><br><span class=\"line\">\t\t<span class=\"string\">'filename'</span>: os.path.join(LOG_DIR,<span class=\"string\">\"info.log\"</span>),  <span class=\"comment\"># 日志文件</span></span><br><span class=\"line\">\t\t<span class=\"string\">'maxBytes'</span>: <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span>,  <span class=\"comment\"># 日志大小 10M</span></span><br><span class=\"line\">\t\t<span class=\"string\">'backupCount'</span>: <span class=\"number\">2</span>,  <span class=\"comment\"># 备份数为 2</span></span><br><span class=\"line\">\t\t<span class=\"string\">'formatter'</span>: <span class=\"string\">'stdout'</span>, <span class=\"comment\"># 简单格式</span></span><br><span class=\"line\">\t\t<span class=\"string\">'encoding'</span>: <span class=\"string\">'utf-8'</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意设置<code>TIME_ZONE</code>为<code>Asia/Shanghai</code></p>\n</blockquote>\n<p><code>formatters</code>支持多种内置的变量，可以在 <a href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\" target=\"_blank\" rel=\"noopener\">日志变量</a>中查看到。</p>\n<h2 id=\"日志打印\"><a href=\"#日志打印\" class=\"headerlink\" title=\"日志打印\"></a>日志打印</h2><p>需要在视图函数中的合适位置新增如下的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging <span class=\"keyword\">as</span> log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># info日志</span></span><br><span class=\"line\">log.info(<span class=\"string\">'ifno log'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># warning日志</span></span><br><span class=\"line\">log.warning(<span class=\"string\">'warning log'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># error日志</span></span><br><span class=\"line\">log.error(<span class=\"string\">'error log'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样在程序出现问题时就可以打印日志了，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>, <span class=\"string\">\"date\"</span>: <span class=\"string\">\"2020-08-05 16:34:32\"</span>, <span class=\"string\">\"method\"</span>: <span class=\"string\">\"POST\"</span>, <span class=\"string\">\"api\"</span>: <span class=\"string\">\"/api/infrastructer/v1/devicetype/query\"</span>, <span class=\"string\">\"body\"</span>: <span class=\"string\">\"&#123;'page': 1, 'limit': 2&#125;\"</span>, <span class=\"string\">\"filename\"</span>: <span class=\"string\">\"/Users/lee/Desktop/ipaas/infrastructer/api/devicetpye/query_devicetype.py:28\"</span>, <span class=\"string\">\"func\"</span>: <span class=\"string\">\"v1_query_devicetype\"</span>, <span class=\"string\">\"source\"</span>: <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"string\">\"dest\"</span>: <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"string\">\"message\"</span>: <span class=\"string\">\"query devicetype success.\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"日志输出的流程\"><a href=\"#日志输出的流程\" class=\"headerlink\" title=\"日志输出的流程\"></a>日志输出的流程</h1><ol>\n<li>首先会加载<code>setting.py</code>中的日志配置，并加载<code>RequestLogFilter</code>日志过滤器；</li>\n<li>之后请求来到<code>RequestLogMiddleware</code>中间件中，它会获取请求中的一些参数并保存到日志对象中；</li>\n<li>当程序执行到<code>log.info</code>这样的打印日志语句时，会根据日志配置打印出日志内容。</li>\n</ol>\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"默认日志\"><a href=\"#默认日志\" class=\"headerlink\" title=\"默认日志\"></a>默认日志</h1><p>django在运行后默认会打印请求日志到标准输出，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[05/Aug/2020 15:48:44] <span class=\"string\">\"POST /api/infrastructer/v1/devicetype/query HTTP/1.1\"</span> 200 480</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但是这样的日志存在如下的问题：</p>\n<ol>\n<li>内容太少；</li>\n<li>不知道是哪个客户端请求；</li>\n<li>不能显示详细的报错内容；</li>\n<li>不能快速定位到报错的代码位置；</li>\n<li>不知道请求参数；</li>\n<li>……</li>\n</ol>\n<p>针对这些问题，可以基于<code>logging</code>模块来定制日志内容。</p>\n<br>\n\n\n\n<h1 id=\"基于middleware的日志输出\"><a href=\"#基于middleware的日志输出\" class=\"headerlink\" title=\"基于middleware的日志输出\"></a>基于middleware的日志输出</h1><p>django的<code>middleware</code>是一个强大的功能，所有的请求都要通过中间件才能进行试图函数的处理，同理响应也会通过中间件。因此，可以手动编写一个日志的中间件来捕获请求和响应中的所需参数实现自定义日志输出。</p>\n<h2 id=\"日志中间件\"><a href=\"#日志中间件\" class=\"headerlink\" title=\"日志中间件\"></a>日志中间件</h2><p>首先新建一个<code>middleware</code>的目录，其中保存中间件代码。并在其中新建一个<code>middleware_logging.py</code>的中间件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.deprecation <span class=\"keyword\">import</span> MiddlewareMixin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">local = threading.local()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestLogFilter</span><span class=\"params\">(logging.Filter)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''将当前请求的request信息保存到日志record上下文'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter</span><span class=\"params\">(self, record)</span>:</span></span><br><span class=\"line\">        record.sip = getattr(local, <span class=\"string\">'sip'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.dip = getattr(local, <span class=\"string\">'dip'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.body = getattr(local, <span class=\"string\">'body'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.api = getattr(local, <span class=\"string\">'api'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.method = getattr(local, <span class=\"string\">'method'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.status_code = getattr(local, <span class=\"string\">'status_code'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\">        record.reason_phrase = getattr(local, <span class=\"string\">'reason_phrase'</span>, <span class=\"string\">'none'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestLogMiddleware</span><span class=\"params\">(MiddlewareMixin)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''将请求日志记录到当前请求线程上'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, get_response=None)</span>:</span></span><br><span class=\"line\">        self.get_response = get_response</span><br><span class=\"line\">        self.apiLogger = logging.getLogger(<span class=\"string\">'api'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, request)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            body = json.loads(request.body)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            body = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</span><br><span class=\"line\">            body.update(dict(request.GET))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            body.update(dict(request.POST))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 日志变量</span></span><br><span class=\"line\">        local.body = body</span><br><span class=\"line\">        local.method = request.method</span><br><span class=\"line\">        local.api = request.path</span><br><span class=\"line\">        local.sip = request.META.get(<span class=\"string\">'REMOTE_ADDR'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">        local.dip = socket.gethostbyname(socket.gethostname())</span><br><span class=\"line\">        response = self.get_response(request)</span><br><span class=\"line\">        local.status_code = response.status_code</span><br><span class=\"line\">        local.reason_phrase = response.reason_phrase</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这段代码中有两个类：</p>\n<ul>\n<li><code>RequestLogFilter</code>：用于日志过滤器（在logging配置时使用）；</li>\n<li><code>RequestLogMiddleware</code>：日志中间件；</li>\n</ul>\n<h2 id=\"设置logging配置\"><a href=\"#设置logging配置\" class=\"headerlink\" title=\"设置logging配置\"></a>设置logging配置</h2><p>在<code>setting.py</code>中新增如下的logging配置代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOGGING = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">\"disable_existing_loggers\"</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">    <span class=\"string\">\"formatters\"</span>: &#123; </span><br><span class=\"line\">        <span class=\"string\">\"stdout\"</span>: &#123; </span><br><span class=\"line\">            <span class=\"string\">\"format\"</span>: <span class=\"string\">'&#123;'</span></span><br><span class=\"line\">                <span class=\"string\">'\"level\": \"%(levelname)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"date\": \"%(asctime)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"method\": \"%(method)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"api\": \"%(api)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"body\": \"%(body)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"filename\": \"%(pathname)s:%(lineno)d\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"func\": \"%(funcName)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"source\": \"%(sip)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"dest\": \"%(dip)s\", '</span></span><br><span class=\"line\">                <span class=\"string\">'\"message\": \"%(message)s\"'</span></span><br><span class=\"line\">            <span class=\"string\">'&#125;'</span>,</span><br><span class=\"line\">            <span class=\"string\">\"datefmt\"</span>: <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"filters\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"request_info\"</span>: &#123;<span class=\"string\">\"()\"</span>: <span class=\"string\">\"middleware.middleware_logging.RequestLogFilter\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"handlers\"</span>: &#123; </span><br><span class=\"line\">        <span class=\"string\">\"console\"</span>: &#123; </span><br><span class=\"line\">            <span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"class\"</span>: <span class=\"string\">\"logging.StreamHandler\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"formatter\"</span>: <span class=\"string\">\"stdout\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"filters\"</span>: [<span class=\"string\">'request_info'</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"root\"</span>: &#123;<span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>, <span class=\"string\">\"handlers\"</span>: [<span class=\"string\">\"console\"</span>]&#125;,</span><br><span class=\"line\">    <span class=\"string\">\"loggers\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"django.request\"</span>: &#123; </span><br><span class=\"line\">          \t<span class=\"string\">\"handlers\"</span>: [<span class=\"string\">\"console\"</span>],</span><br><span class=\"line\">            <span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"propagate\"</span>: <span class=\"literal\">True</span>, </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>disable_existing_loggers</code>：是否禁用现有的日志记录器（设置为True的话只会记录当前设置的日志格式）；</li>\n<li><code>formaters</code>：定义日志的样式，在这个示例中定义了一个名为<code>stdout</code>的日志格式；<ul>\n<li><code>format</code>：日志格式的具体内容，我这里写成了json格式，也可以是任何格式；</li>\n<li><code>datefmt</code>：对日期进行格式化；</li>\n</ul>\n</li>\n<li><code>filters</code>：定义日志过滤器，这里定义了上边定义的日志过滤器，但是如果想使用，需要在下面进行指定；</li>\n<li><code>handlers</code>：定义日志处理方式，支持输出到文件、输出到标准输出等多种方式；<ul>\n<li><code>console</code>：指定将日志输出到标准输出；</li>\n<li><code>formatter</code>：指定用哪种日志格式输出日志；</li>\n<li><code>filters</code>：指定日志过滤器；</li>\n</ul>\n</li>\n<li><code>loggers</code>：定义哪些类型的日志会被记录；<ul>\n<li><code>django.request</code>：表示所有request请求；</li>\n<li><code>handlers</code>：绑定使用的日志处理方式；</li>\n</ul>\n</li>\n</ul>\n<p>如果是想要输出日志到文件，可以在<code>handlers</code>中增加下面的配置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'file'</span>: &#123; <span class=\"comment\"># Info级别以上保存到日志文件</span></span><br><span class=\"line\">\t\t<span class=\"string\">'level'</span>: <span class=\"string\">'INFO'</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">'class'</span>: <span class=\"string\">'logging.handlers.RotatingFileHandler'</span>,  <span class=\"comment\"># 保存到文件，根据文件大小自动切</span></span><br><span class=\"line\">\t\t<span class=\"string\">'filename'</span>: os.path.join(LOG_DIR,<span class=\"string\">\"info.log\"</span>),  <span class=\"comment\"># 日志文件</span></span><br><span class=\"line\">\t\t<span class=\"string\">'maxBytes'</span>: <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span>,  <span class=\"comment\"># 日志大小 10M</span></span><br><span class=\"line\">\t\t<span class=\"string\">'backupCount'</span>: <span class=\"number\">2</span>,  <span class=\"comment\"># 备份数为 2</span></span><br><span class=\"line\">\t\t<span class=\"string\">'formatter'</span>: <span class=\"string\">'stdout'</span>, <span class=\"comment\"># 简单格式</span></span><br><span class=\"line\">\t\t<span class=\"string\">'encoding'</span>: <span class=\"string\">'utf-8'</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意设置<code>TIME_ZONE</code>为<code>Asia/Shanghai</code></p>\n</blockquote>\n<p><code>formatters</code>支持多种内置的变量，可以在 <a href=\"https://docs.python.org/3/library/logging.html#logrecord-attributes\" target=\"_blank\" rel=\"noopener\">日志变量</a>中查看到。</p>\n<h2 id=\"日志打印\"><a href=\"#日志打印\" class=\"headerlink\" title=\"日志打印\"></a>日志打印</h2><p>需要在视图函数中的合适位置新增如下的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging <span class=\"keyword\">as</span> log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># info日志</span></span><br><span class=\"line\">log.info(<span class=\"string\">'ifno log'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># warning日志</span></span><br><span class=\"line\">log.warning(<span class=\"string\">'warning log'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># error日志</span></span><br><span class=\"line\">log.error(<span class=\"string\">'error log'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样在程序出现问题时就可以打印日志了，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"level\"</span>: <span class=\"string\">\"INFO\"</span>, <span class=\"string\">\"date\"</span>: <span class=\"string\">\"2020-08-05 16:34:32\"</span>, <span class=\"string\">\"method\"</span>: <span class=\"string\">\"POST\"</span>, <span class=\"string\">\"api\"</span>: <span class=\"string\">\"/api/infrastructer/v1/devicetype/query\"</span>, <span class=\"string\">\"body\"</span>: <span class=\"string\">\"&#123;'page': 1, 'limit': 2&#125;\"</span>, <span class=\"string\">\"filename\"</span>: <span class=\"string\">\"/Users/lee/Desktop/ipaas/infrastructer/api/devicetpye/query_devicetype.py:28\"</span>, <span class=\"string\">\"func\"</span>: <span class=\"string\">\"v1_query_devicetype\"</span>, <span class=\"string\">\"source\"</span>: <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"string\">\"dest\"</span>: <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"string\">\"message\"</span>: <span class=\"string\">\"query devicetype success.\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"日志输出的流程\"><a href=\"#日志输出的流程\" class=\"headerlink\" title=\"日志输出的流程\"></a>日志输出的流程</h1><ol>\n<li>首先会加载<code>setting.py</code>中的日志配置，并加载<code>RequestLogFilter</code>日志过滤器；</li>\n<li>之后请求来到<code>RequestLogMiddleware</code>中间件中，它会获取请求中的一些参数并保存到日志对象中；</li>\n<li>当程序执行到<code>log.info</code>这样的打印日志语句时，会根据日志配置打印出日志内容。</li>\n</ol>\n<br>"},{"title":"NFS存储","date":"2020-08-06T05:44:14.000Z","description":"NFS基本介绍和部署使用。","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596703021713&di=86a538e9b53353dfe606ee794f3d1eba&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2Fff29f1f6e095a3fdb45106bfe2e1f823ce49ce692fe28-AC654u_fw658","_content":"\n\n\n# NFS介绍\n\nNFS是Network File System的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。\n\n\n\nNFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。\n\n\n\n>  可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。\n\n\n\n<br>\n\n\n\n# 部署NFS\n\nNFS依赖于`nfs-utils`和`rpcbind`，所以先安装这两个软件包：\n\n```bash\n$ yum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs数据目录：\n\n```bash\n$ mkdir /nfs-data\n```\n\n> 一般这个目录会挂载一个数据盘\n\n\n\nNFS共享存储需要将存储的地址配置在`/etc/exporters`下，例如这里配置为：\n\n```bash\n/nfs-data *(rw,no_root_squash)\n```\n\n> 星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制\n\n\n\n其中支持的参数为：\n\n- `ro`：只读；\n- `rw`：读写；\n- `root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；\n- `no_root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；\n- `all_squash`：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；\n- `sync`：同时将数据写入到内存与硬盘中，保证不丢失数据；\n- `async`：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；\n\n\n\n启动服务：\n\n```bash\n$ systemctl start rpcbind\n$ systemctl enable rpcbind\n$ systemctl start nfs-server\n$ systemctl enable nfs-server\n```\n\n\n\n其他客户端想要使用nfs存储，则首先需要安装`nfs-utils`，然后可以使用下面的命令将nfs的目录挂载到本地：\n\n```bash\nmount -t nfs <nfs服务器地址>:/nfs-data /nfsdata\n```\n\n\n\n\n\n\n\n","source":"_posts/NFS存储.md","raw":"---\ntitle: NFS存储\ndate: 2020-08-06 13:44:14\ntags:\n- NFS\ncategories:\n- 存储系统\n- NFS\ndescription: NFS基本介绍和部署使用。\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596703021713&di=86a538e9b53353dfe606ee794f3d1eba&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2Fff29f1f6e095a3fdb45106bfe2e1f823ce49ce692fe28-AC654u_fw658\n---\n\n\n\n# NFS介绍\n\nNFS是Network File System的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。\n\n\n\nNFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。\n\n\n\n>  可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。\n\n\n\n<br>\n\n\n\n# 部署NFS\n\nNFS依赖于`nfs-utils`和`rpcbind`，所以先安装这两个软件包：\n\n```bash\n$ yum install -y nfs-utils rpcbind\n```\n\n\n\n创建nfs数据目录：\n\n```bash\n$ mkdir /nfs-data\n```\n\n> 一般这个目录会挂载一个数据盘\n\n\n\nNFS共享存储需要将存储的地址配置在`/etc/exporters`下，例如这里配置为：\n\n```bash\n/nfs-data *(rw,no_root_squash)\n```\n\n> 星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制\n\n\n\n其中支持的参数为：\n\n- `ro`：只读；\n- `rw`：读写；\n- `root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；\n- `no_root_squash`：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；\n- `all_squash`：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；\n- `sync`：同时将数据写入到内存与硬盘中，保证不丢失数据；\n- `async`：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；\n\n\n\n启动服务：\n\n```bash\n$ systemctl start rpcbind\n$ systemctl enable rpcbind\n$ systemctl start nfs-server\n$ systemctl enable nfs-server\n```\n\n\n\n其他客户端想要使用nfs存储，则首先需要安装`nfs-utils`，然后可以使用下面的命令将nfs的目录挂载到本地：\n\n```bash\nmount -t nfs <nfs服务器地址>:/nfs-data /nfsdata\n```\n\n\n\n\n\n\n\n","slug":"NFS存储","published":1,"updated":"2020-08-06T07:23:17.083Z","_id":"ckdidrkcw00003hn0e76v005t","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"NFS介绍\"><a href=\"#NFS介绍\" class=\"headerlink\" title=\"NFS介绍\"></a>NFS介绍</h1><p>NFS是Network File System的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。</p>\n<p>NFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。</p>\n<blockquote>\n<p> 可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署NFS\"><a href=\"#部署NFS\" class=\"headerlink\" title=\"部署NFS\"></a>部署NFS</h1><p>NFS依赖于<code>nfs-utils</code>和<code>rpcbind</code>，所以先安装这两个软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /nfs-data</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一般这个目录会挂载一个数据盘</p>\n</blockquote>\n<p>NFS共享存储需要将存储的地址配置在<code>/etc/exporters</code>下，例如这里配置为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/nfs-data *(rw,no_root_squash)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制</p>\n</blockquote>\n<p>其中支持的参数为：</p>\n<ul>\n<li><code>ro</code>：只读；</li>\n<li><code>rw</code>：读写；</li>\n<li><code>root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；</li>\n<li><code>no_root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；</li>\n<li><code>all_squash</code>：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；</li>\n<li><code>sync</code>：同时将数据写入到内存与硬盘中，保证不丢失数据；</li>\n<li><code>async</code>：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；</li>\n</ul>\n<p>启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start rpcbind</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">$ systemctl start nfs-server</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nfs-server</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他客户端想要使用nfs存储，则首先需要安装<code>nfs-utils</code>，然后可以使用下面的命令将nfs的目录挂载到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -t nfs &lt;nfs服务器地址&gt;:/nfs-data /nfsdata</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"NFS介绍\"><a href=\"#NFS介绍\" class=\"headerlink\" title=\"NFS介绍\"></a>NFS介绍</h1><p>NFS是Network File System的缩写，即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够彼此分享文件，让应用程序在客户端通过网络访问位于服务器磁盘中的数据，是在类Unix系统间实现磁盘文件共享的一种方法。</p>\n<p>NFS使用RPC协议进行通信，NFS可以看作是一个RPC Server，主要功能是管理需要分享的目录和文件，它不负责通信和信息传输，而是把这部分工作交给RPC协议来完成。即NFS在文件传送或信息传送过程中依赖于RPC协议。所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。</p>\n<blockquote>\n<p> 可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署NFS\"><a href=\"#部署NFS\" class=\"headerlink\" title=\"部署NFS\"></a>部署NFS</h1><p>NFS依赖于<code>nfs-utils</code>和<code>rpcbind</code>，所以先安装这两个软件包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建nfs数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /nfs-data</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一般这个目录会挂载一个数据盘</p>\n</blockquote>\n<p>NFS共享存储需要将存储的地址配置在<code>/etc/exporters</code>下，例如这里配置为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/nfs-data *(rw,no_root_squash)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>星号表示允许所有客户端访问，支持对客户端IP地址和网段进行限制</p>\n</blockquote>\n<p>其中支持的参数为：</p>\n<ul>\n<li><code>ro</code>：只读；</li>\n<li><code>rw</code>：读写；</li>\n<li><code>root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户；</li>\n<li><code>no_root_squash</code>：当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员；</li>\n<li><code>all_squash</code>：无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户；</li>\n<li><code>sync</code>：同时将数据写入到内存与硬盘中，保证不丢失数据；</li>\n<li><code>async</code>：优先将数据写入到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据；</li>\n</ul>\n<p>启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start rpcbind</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> rpcbind</span><br><span class=\"line\">$ systemctl start nfs-server</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> nfs-server</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其他客户端想要使用nfs存储，则首先需要安装<code>nfs-utils</code>，然后可以使用下面的命令将nfs的目录挂载到本地：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount -t nfs &lt;nfs服务器地址&gt;:/nfs-data /nfsdata</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"解决if语句中不能设置proxy_set_header的问题","date":"2020-08-06T09:02:10.000Z","description":"实现在if语句中设置proxy_set_header的问题","cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","_content":"\n\n\nnginx支持使用`if`语句进行判断，例如：\n\n```nginx\nlocation / {\n  if ($http_referer ~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\") {\n    # 执行语句\n    proxy_set_header Host \"test.pass\";\n  }\n  proxy_pass http://proxy-server;\n}\n```\n\n\n\n在上边的例子中，判断域名中匹配到example，就增加一个header头`test.pass`，但是这样会报错：\n\n```bash\n\"proxy_set_header\" directive is not allowed here in /etc/nginx/server.conf:10\n```\n\n\n\n**nginx不支持在if中设置proxy_set_header**\n\n\n\n对于这种问题，可以使用一种变通的方法，通过设置中间变量来解决：\n\n```nginx\nlocation / {\n  set $tmphost $host;\n  if ($http_referer ~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\") {\n    # 执行语句\n    set $tmphost \"test.pass\";\n  }\n  \n  proxy_set_header Host $tmphost;\n  proxy_pass http://proxy-server;\n}\n```\n\n\n\n这里通过设置了一个变量`tmphost`，使用`set`语句在`if`语句中对其重新赋值，并将`tmphost`设置到`proxy_set_header`中即可。\n\n\n\n\n\n","source":"_posts/解决if语句中不能设置proxy-set-header的问题.md","raw":"---\ntitle: 解决if语句中不能设置proxy_set_header的问题\ndate: 2020-08-06 17:02:10\ntags:\n- Nginx\ncategories:\n- Nginx\n- 常见问题\ndescription: 实现在if语句中设置proxy_set_header的问题\ncover: \n---\n\n\n\nnginx支持使用`if`语句进行判断，例如：\n\n```nginx\nlocation / {\n  if ($http_referer ~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\") {\n    # 执行语句\n    proxy_set_header Host \"test.pass\";\n  }\n  proxy_pass http://proxy-server;\n}\n```\n\n\n\n在上边的例子中，判断域名中匹配到example，就增加一个header头`test.pass`，但是这样会报错：\n\n```bash\n\"proxy_set_header\" directive is not allowed here in /etc/nginx/server.conf:10\n```\n\n\n\n**nginx不支持在if中设置proxy_set_header**\n\n\n\n对于这种问题，可以使用一种变通的方法，通过设置中间变量来解决：\n\n```nginx\nlocation / {\n  set $tmphost $host;\n  if ($http_referer ~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\") {\n    # 执行语句\n    set $tmphost \"test.pass\";\n  }\n  \n  proxy_set_header Host $tmphost;\n  proxy_pass http://proxy-server;\n}\n```\n\n\n\n这里通过设置了一个变量`tmphost`，使用`set`语句在`if`语句中对其重新赋值，并将`tmphost`设置到`proxy_set_header`中即可。\n\n\n\n\n\n","slug":"解决if语句中不能设置proxy-set-header的问题","published":1,"updated":"2020-08-06T09:12:06.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdil0i8z00006dn08oj5gspb","content":"<p>nginx支持使用<code>if</code>语句进行判断，例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">  <span class=\"attribute\">if</span> (<span class=\"variable\">$http_referer</span> <span class=\"regexp\">~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\")</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 执行语句</span></span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> Host <span class=\"string\">\"test.pass\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://proxy-server;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上边的例子中，判断域名中匹配到example，就增加一个header头<code>test.pass</code>，但是这样会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"proxy_set_header\"</span> directive is not allowed here <span class=\"keyword\">in</span> /etc/nginx/server.conf:10</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>nginx不支持在if中设置proxy_set_header</strong></p>\n<p>对于这种问题，可以使用一种变通的方法，通过设置中间变量来解决：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$tmphost</span> <span class=\"variable\">$host</span>;</span><br><span class=\"line\">  <span class=\"attribute\">if</span> (<span class=\"variable\">$http_referer</span> <span class=\"regexp\">~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\")</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 执行语句</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$tmphost</span> <span class=\"string\">\"test.pass\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$tmphost</span>;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://proxy-server;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里通过设置了一个变量<code>tmphost</code>，使用<code>set</code>语句在<code>if</code>语句中对其重新赋值，并将<code>tmphost</code>设置到<code>proxy_set_header</code>中即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>nginx支持使用<code>if</code>语句进行判断，例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">  <span class=\"attribute\">if</span> (<span class=\"variable\">$http_referer</span> <span class=\"regexp\">~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\")</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 执行语句</span></span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> Host <span class=\"string\">\"test.pass\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://proxy-server;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在上边的例子中，判断域名中匹配到example，就增加一个header头<code>test.pass</code>，但是这样会报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"proxy_set_header\"</span> directive is not allowed here <span class=\"keyword\">in</span> /etc/nginx/server.conf:10</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>nginx不支持在if中设置proxy_set_header</strong></p>\n<p>对于这种问题，可以使用一种变通的方法，通过设置中间变量来解决：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$tmphost</span> <span class=\"variable\">$host</span>;</span><br><span class=\"line\">  <span class=\"attribute\">if</span> (<span class=\"variable\">$http_referer</span> <span class=\"regexp\">~ \"http[s]?\\:\\/\\/\\w*\\.?example.*\")</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 执行语句</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$tmphost</span> <span class=\"string\">\"test.pass\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$tmphost</span>;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://proxy-server;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里通过设置了一个变量<code>tmphost</code>，使用<code>set</code>语句在<code>if</code>语句中对其重新赋值，并将<code>tmphost</code>设置到<code>proxy_set_header</code>中即可。</p>\n"},{"title":"Docker部署kafka","date":"2020-08-07T02:49:59.000Z","description":"使用docker部署一个三节点kafka集群","cover":"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2822442550,174028885&fm=26&gp=0.jpg","_content":"\n\n\nkafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。\n\n\n\n创建数据目录：\n\n```bash\n# zookeeper数据目录\n$ mkdir -p /data/zookeeper/{data,datalog,logs}\n\n# kafka数据目录\n$ mkdir -p /data/kafka/node_{0..2}\n```\n\n\n\n\n\n使用下面的Docker-compose文件进行部署：\n\n```yaml\n# docker-compose.yaml\nversion: \"3\"\nservices:\n  zookeeper:\n    image: zookeeper\n    container_name: zookeeper\n    ports:\n      - 2181:2181\n    volumes:\n      - ./data/zookeeper/data:/data\n      - ./data/zookeeper/datalog:/datalog\n      - ./data/zookeeper/logs:/logs\n    restart: always\n  kafka_node_0:\n    depends_on:\n      - zookeeper\n    container_name: kafka-node-0\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 0\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9092\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9092:9092\n    volumes:\n      - ./data/kafka/node_0:/kafka\n    restart: unless-stopped\n  kafka_node_1:\n    depends_on:\n      - kafka_node_0\n    container_name: kafka-node-1\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9093\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9093:9093\n    volumes:\n      - ./data/kafka/node_1:/kafka\n    restart: unless-stopped\n  kafka_node_2:\n    depends_on:\n      - kafka_node_1\n    container_name: kafka-node-2\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 2\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9094\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9094:9094\n    volumes:\n      - ./data/kafka/node_2:/kafka\n    restart: unless-stopped\n```\n\n\n\n> 注意将文件中`192.168.1.100`替换为实际的地址\n\n\n\n运行：\n\n```bash\n$ docker-compose up -d \n$ docker ps \n```\n\n\n\n![](status.png)\n\n\n\n> 确保所有容器都正常启动\n\n\n\n\n\n","source":"_posts/Docker部署kafka.md","raw":"---\ntitle: Docker部署kafka\ndate: 2020-08-07 10:49:59\ntags:\n- kafka\ncategories:\n- 消息中间件\n- kafka\ndescription: 使用docker部署一个三节点kafka集群\ncover: https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2822442550,174028885&fm=26&gp=0.jpg\n---\n\n\n\nkafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。\n\n\n\n创建数据目录：\n\n```bash\n# zookeeper数据目录\n$ mkdir -p /data/zookeeper/{data,datalog,logs}\n\n# kafka数据目录\n$ mkdir -p /data/kafka/node_{0..2}\n```\n\n\n\n\n\n使用下面的Docker-compose文件进行部署：\n\n```yaml\n# docker-compose.yaml\nversion: \"3\"\nservices:\n  zookeeper:\n    image: zookeeper\n    container_name: zookeeper\n    ports:\n      - 2181:2181\n    volumes:\n      - ./data/zookeeper/data:/data\n      - ./data/zookeeper/datalog:/datalog\n      - ./data/zookeeper/logs:/logs\n    restart: always\n  kafka_node_0:\n    depends_on:\n      - zookeeper\n    container_name: kafka-node-0\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 0\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9092\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9092:9092\n    volumes:\n      - ./data/kafka/node_0:/kafka\n    restart: unless-stopped\n  kafka_node_1:\n    depends_on:\n      - kafka_node_0\n    container_name: kafka-node-1\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9093\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9093:9093\n    volumes:\n      - ./data/kafka/node_1:/kafka\n    restart: unless-stopped\n  kafka_node_2:\n    depends_on:\n      - kafka_node_1\n    container_name: kafka-node-2\n    image: wurstmeister/kafka\n    environment:\n      KAFKA_BROKER_ID: 2\n      KAFKA_ZOOKEEPER_CONNECT: 192.168.1.100:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.100:9094\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094\n      KAFKA_NUM_PARTITIONS: 3\n      KAFKA_DEFAULT_REPLICATION_FACTOR: 2\n    ports:\n      - 9094:9094\n    volumes:\n      - ./data/kafka/node_2:/kafka\n    restart: unless-stopped\n```\n\n\n\n> 注意将文件中`192.168.1.100`替换为实际的地址\n\n\n\n运行：\n\n```bash\n$ docker-compose up -d \n$ docker ps \n```\n\n\n\n![](status.png)\n\n\n\n> 确保所有容器都正常启动\n\n\n\n\n\n","slug":"Docker部署kafka","published":1,"updated":"2020-08-07T05:41:17.313Z","_id":"ckdjmstj3000048n070jsecc0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>kafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。</p>\n<p>创建数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper数据目录</span></span><br><span class=\"line\">$ mkdir -p /data/zookeeper/&#123;data,datalog,logs&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kafka数据目录</span></span><br><span class=\"line\">$ mkdir -p /data/kafka/node_&#123;0..2&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>使用下面的Docker-compose文件进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2181</span><span class=\"string\">:2181</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/datalog:/datalog</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/logs:/logs</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_0:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-0</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9092</span><span class=\"string\">:9092</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_0:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_1:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-1</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9093</span><span class=\"string\">:9093</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_1:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_2:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9094</span><span class=\"string\">:9094</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_2:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意将文件中<code>192.168.1.100</code>替换为实际的地址</p>\n</blockquote>\n<p>运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose up -d </span><br><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src= \"/img/loading.gif\" data-src=\"status.png\" alt=\"\"></p>\n<blockquote>\n<p>确保所有容器都正常启动</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>kafka依赖于zookeeper，所以在部署kafka的时候也需要部署一个zookeeper。</p>\n<p>创建数据目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zookeeper数据目录</span></span><br><span class=\"line\">$ mkdir -p /data/zookeeper/&#123;data,datalog,logs&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># kafka数据目录</span></span><br><span class=\"line\">$ mkdir -p /data/kafka/node_&#123;0..2&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>使用下面的Docker-compose文件进行部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yaml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2181</span><span class=\"string\">:2181</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/datalog:/datalog</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/zookeeper/logs:/logs</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_0:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-0</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9092</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9092</span><span class=\"string\">:9092</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_0:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_1:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-1</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9093</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9093</span><span class=\"string\">:9093</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_1:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">kafka_node_2:</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">kafka_node_1</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">kafka-node-2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wurstmeister/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_BROKER_ID:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ZOOKEEPER_CONNECT:</span> <span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.100</span><span class=\"string\">:2181</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_ADVERTISED_LISTENERS:</span> <span class=\"string\">PLAINTEXT://192.168.1.100:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_LISTENERS:</span> <span class=\"string\">PLAINTEXT://0.0.0.0:9094</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_NUM_PARTITIONS:</span> <span class=\"number\">3</span></span><br><span class=\"line\">      <span class=\"attr\">KAFKA_DEFAULT_REPLICATION_FACTOR:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9094</span><span class=\"string\">:9094</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data/kafka/node_2:/kafka</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意将文件中<code>192.168.1.100</code>替换为实际的地址</p>\n</blockquote>\n<p>运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose up -d </span><br><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"status.png\" alt=\"\"></p>\n<blockquote>\n<p>确保所有容器都正常启动</p>\n</blockquote>\n"},{"title":"keepalived原理","date":"2020-08-07T06:00:28.000Z","description":"keepalived原理介绍","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596790211578&di=01034f6ca9b5eb4111356a34474f61f7&imgtype=0&src=http%3A%2F%2Fpic3.zhimg.com%2F0678908243ab87603205d64e9f886222_b.png","_content":"\n\n\n# keepalived介绍\n\nkeepalived软件起初是专门为LVS负载均衡软件而设计，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能，因此，keepalived除了能够管理LVS软件ipvsadm外，还可以作为其它服务（例如：Nginx、HAProxy、MySQL等）的高可用解决方案软件。\n\nkeepalived软件主要使用过VRRP协议实心高可用功能；VRRP是Virtual Route Redundancy Protocol（虚拟路由冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。\n\n\n\n>  Keepalived一方面具有配置管理LVS的功能，同时还具有LVS下面节点进行健康检查的功能，另一方面也可以实现系统网络服务的高可用功能。\n\n\n\n<br>\n\n\n\n# 工作原理\n\n![](keepalived.png)\n\n\n\n## 处理请求\n\nKeepalived高可用对之间是通过 VRRP进行通信的， VRRP是通过竞选机制来确定主备的，主的优先级高于备。因此，工作时主会优先获得所有的资源，备节点处于等待状态，当主挂了的时候，备节点就会接管主节点的资源，然后顶替主节点对外提供服务。　　\n\n在 Keepalived服务对之间，只有作为主的服务器会一直发送 VRRP广播包，告诉备它还活着，此时备不会枪占主，当主不可用时，即备监听不到主发送的广播包时，就会启动相关服务接管资源，保证业务的连续性。接管速度最快可以小于1秒。\n\n\n\n> 通过竞争一个VIP来实现\n\n\n\n## 主备切换\n\nKeepalived高可用服务之间的故障切换转移，还是通过VRRP（Vritual Route Redundancy Protocol，虚拟路由冗余协议）来实现的。在Keepalived服务正常工作时，主Master节点会不断向备节点发送心跳消息（多播的方式），用来告诉备用节点自己还活着，当主Master节点发送故障时，就无法发送心跳消息，备节点也就因此无法继续检测到来自主Master的心跳消息了，于是调用自身的接管程序，接管主Master节点的IP资源及服务。而当主Master恢复时，备Backup节点默认又会主动释放主节点故障时自身接管的IP资源及服务，恢复到原来的备用角色。\n\n\n\n<br>\n\n\n\n# 不抢占机制nopreempt\n\n当Master出现问题后，Backup会竞选为新的Master，那么之前的Master如果故障恢复后，是继续成为Master还是变成Backup呢？默认情况下，如果没设置不抢占，那么之前的Master起来后还是会继续抢占成为Master，也就是说，整个过程需要发生两次切换：\n\n- 主节点故障：Master —> Backup；\n\n- 主节点恢复：Backup —>Master；\n\n  \n\n这样对业务频繁的切换是不能容忍的，因此我们希望Master起来后成为Backup，所以要设置不抢占，Keepalived里面提供了 nopreempt， 这个配置只能用在状态为Backup的机器上，但是我们明明希望的是Master不进行抢占，那没办法，Master的状态也得设置为Backup，也就是说两台负载均衡器都要讲state状态设置为Backup；那么谁是Master？就要通过优先级priority的高低来决定了，优先级搞得成为Master，反之为backup。\n\n\n\n<br>\n\n\n\n# 脑裂\n\n## 什么是脑裂\n\n在高可用HA系统中，当联系2个节点的“心跳线”断开时，本来为一整体，一个VRRP协议组，动作协调的HA系统，就分裂为两个独立的个体。由于相互失去了联系，都以为对方出了故障；两个节点的HA软件像“连体人”一样，有共同的身体却拥有两个脑袋，争抢“共享资源”身体，争抢服务器里的应用服务，就会发送严重后果，或者共享资源被瓜分，两边服务都起不来或者都起来都为Master，假如两端服务器发生了脑裂现象就会成为各自的Master，会同时读写“共享存储”，导致数据损坏。（常见的如数据库轮询着的联机日志出错）\n\n\n\n\n\n## 脑裂原因\n\n一般脑裂产生是因为如下的几个原因：\n\n- 高可用服务器对之间心跳线链路发生故障，导致无法正常通信；\n- 因心跳线坏了；\n- 因网卡及相关驱动坏了，ip配置及冲突问题（网卡直连）；\n- 因心跳线间连接的设备故障（网卡及交换机）；\n- 因仲裁的机器出问题（采用仲裁的方案） ；\n- 高可用服务器上开启了 iptables防火墙阻挡了心跳消息传输 ；\n- 高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败 ；\n- 其他服务配置不当等原因，如心跳方式不同，心跳广插冲突、软件Bug等 \n\n\n\n> Keepalived配置里同一 VRRP实例如果 virtual_router_id两端参数配置不一致也会导致裂脑问题发生\n\n\n\n## 解决脑裂的办法\n\n-  添加冗余的心跳线，例如：双线条线（心跳线也HA），尽量减少“裂脑”发生几率，例如同时使用串行电缆和以太网电缆连接；\n- 启用磁盘锁。正在服务一方锁住共享磁盘，“裂脑”发生时，让对方完全“抢不走”共享磁盘资源；\n- 设置仲裁机制。例如设置参考IP（如网关IP），当心跳线完全断开时，2个节点都各自ping一下参考IP，不通则表明断点就出在本端。不仅“心跳”、还兼对外“服务”的本端网络链路断了，即使启动（或继续）应用服务也没有用了，那就主动放弃竞争，让能够ping通参考IP的一端去起服务。更保险一些，ping不通参考IP的一方干脆就自我重启，以彻底释放有可能还占用着的那些共享资源；\n- 当检测到裂脑时强行关闭一个心跳节点（这个功能需特殊设备支持，如Stonith、feyce）。相当于备节点接收不到心跳消患，通过单独的线路发送关机命令关闭主节点的电源；\n\n\n\n\n\n> 但使用锁磁盘也会有一个不小的问题，如果占用共享盘的一方不主动“解锁”，另一方就永远得不到共享磁盘。现实中假如服务节点突然死机或崩溃，就不可能执行解锁命令。后备节点也就接管不了共享资源和应用服务。于是有人在HA中设计了“智能”锁。即：正在服务的一方只在发现心跳线全部断开（察觉不到对端）时才启用磁盘锁。平时就不上锁了。\n\n　","source":"_posts/keepalived原理.md","raw":"---\ntitle: keepalived原理\ndate: 2020-08-07 14:00:28\ntags:\n- keepalived\ncategories:\n- 负载均衡和高可用方案\n- keepalived\ndescription: keepalived原理介绍\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596790211578&di=01034f6ca9b5eb4111356a34474f61f7&imgtype=0&src=http%3A%2F%2Fpic3.zhimg.com%2F0678908243ab87603205d64e9f886222_b.png\n---\n\n\n\n# keepalived介绍\n\nkeepalived软件起初是专门为LVS负载均衡软件而设计，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能，因此，keepalived除了能够管理LVS软件ipvsadm外，还可以作为其它服务（例如：Nginx、HAProxy、MySQL等）的高可用解决方案软件。\n\nkeepalived软件主要使用过VRRP协议实心高可用功能；VRRP是Virtual Route Redundancy Protocol（虚拟路由冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。\n\n\n\n>  Keepalived一方面具有配置管理LVS的功能，同时还具有LVS下面节点进行健康检查的功能，另一方面也可以实现系统网络服务的高可用功能。\n\n\n\n<br>\n\n\n\n# 工作原理\n\n![](keepalived.png)\n\n\n\n## 处理请求\n\nKeepalived高可用对之间是通过 VRRP进行通信的， VRRP是通过竞选机制来确定主备的，主的优先级高于备。因此，工作时主会优先获得所有的资源，备节点处于等待状态，当主挂了的时候，备节点就会接管主节点的资源，然后顶替主节点对外提供服务。　　\n\n在 Keepalived服务对之间，只有作为主的服务器会一直发送 VRRP广播包，告诉备它还活着，此时备不会枪占主，当主不可用时，即备监听不到主发送的广播包时，就会启动相关服务接管资源，保证业务的连续性。接管速度最快可以小于1秒。\n\n\n\n> 通过竞争一个VIP来实现\n\n\n\n## 主备切换\n\nKeepalived高可用服务之间的故障切换转移，还是通过VRRP（Vritual Route Redundancy Protocol，虚拟路由冗余协议）来实现的。在Keepalived服务正常工作时，主Master节点会不断向备节点发送心跳消息（多播的方式），用来告诉备用节点自己还活着，当主Master节点发送故障时，就无法发送心跳消息，备节点也就因此无法继续检测到来自主Master的心跳消息了，于是调用自身的接管程序，接管主Master节点的IP资源及服务。而当主Master恢复时，备Backup节点默认又会主动释放主节点故障时自身接管的IP资源及服务，恢复到原来的备用角色。\n\n\n\n<br>\n\n\n\n# 不抢占机制nopreempt\n\n当Master出现问题后，Backup会竞选为新的Master，那么之前的Master如果故障恢复后，是继续成为Master还是变成Backup呢？默认情况下，如果没设置不抢占，那么之前的Master起来后还是会继续抢占成为Master，也就是说，整个过程需要发生两次切换：\n\n- 主节点故障：Master —> Backup；\n\n- 主节点恢复：Backup —>Master；\n\n  \n\n这样对业务频繁的切换是不能容忍的，因此我们希望Master起来后成为Backup，所以要设置不抢占，Keepalived里面提供了 nopreempt， 这个配置只能用在状态为Backup的机器上，但是我们明明希望的是Master不进行抢占，那没办法，Master的状态也得设置为Backup，也就是说两台负载均衡器都要讲state状态设置为Backup；那么谁是Master？就要通过优先级priority的高低来决定了，优先级搞得成为Master，反之为backup。\n\n\n\n<br>\n\n\n\n# 脑裂\n\n## 什么是脑裂\n\n在高可用HA系统中，当联系2个节点的“心跳线”断开时，本来为一整体，一个VRRP协议组，动作协调的HA系统，就分裂为两个独立的个体。由于相互失去了联系，都以为对方出了故障；两个节点的HA软件像“连体人”一样，有共同的身体却拥有两个脑袋，争抢“共享资源”身体，争抢服务器里的应用服务，就会发送严重后果，或者共享资源被瓜分，两边服务都起不来或者都起来都为Master，假如两端服务器发生了脑裂现象就会成为各自的Master，会同时读写“共享存储”，导致数据损坏。（常见的如数据库轮询着的联机日志出错）\n\n\n\n\n\n## 脑裂原因\n\n一般脑裂产生是因为如下的几个原因：\n\n- 高可用服务器对之间心跳线链路发生故障，导致无法正常通信；\n- 因心跳线坏了；\n- 因网卡及相关驱动坏了，ip配置及冲突问题（网卡直连）；\n- 因心跳线间连接的设备故障（网卡及交换机）；\n- 因仲裁的机器出问题（采用仲裁的方案） ；\n- 高可用服务器上开启了 iptables防火墙阻挡了心跳消息传输 ；\n- 高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败 ；\n- 其他服务配置不当等原因，如心跳方式不同，心跳广插冲突、软件Bug等 \n\n\n\n> Keepalived配置里同一 VRRP实例如果 virtual_router_id两端参数配置不一致也会导致裂脑问题发生\n\n\n\n## 解决脑裂的办法\n\n-  添加冗余的心跳线，例如：双线条线（心跳线也HA），尽量减少“裂脑”发生几率，例如同时使用串行电缆和以太网电缆连接；\n- 启用磁盘锁。正在服务一方锁住共享磁盘，“裂脑”发生时，让对方完全“抢不走”共享磁盘资源；\n- 设置仲裁机制。例如设置参考IP（如网关IP），当心跳线完全断开时，2个节点都各自ping一下参考IP，不通则表明断点就出在本端。不仅“心跳”、还兼对外“服务”的本端网络链路断了，即使启动（或继续）应用服务也没有用了，那就主动放弃竞争，让能够ping通参考IP的一端去起服务。更保险一些，ping不通参考IP的一方干脆就自我重启，以彻底释放有可能还占用着的那些共享资源；\n- 当检测到裂脑时强行关闭一个心跳节点（这个功能需特殊设备支持，如Stonith、feyce）。相当于备节点接收不到心跳消患，通过单独的线路发送关机命令关闭主节点的电源；\n\n\n\n\n\n> 但使用锁磁盘也会有一个不小的问题，如果占用共享盘的一方不主动“解锁”，另一方就永远得不到共享磁盘。现实中假如服务节点突然死机或崩溃，就不可能执行解锁命令。后备节点也就接管不了共享资源和应用服务。于是有人在HA中设计了“智能”锁。即：正在服务的一方只在发现心跳线全部断开（察觉不到对端）时才启用磁盘锁。平时就不上锁了。\n\n　","slug":"keepalived原理","published":1,"updated":"2020-08-07T06:50:04.649Z","_id":"ckdjtoc0m0000txn0bko4hahd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"keepalived介绍\"><a href=\"#keepalived介绍\" class=\"headerlink\" title=\"keepalived介绍\"></a>keepalived介绍</h1><p>keepalived软件起初是专门为LVS负载均衡软件而设计，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能，因此，keepalived除了能够管理LVS软件ipvsadm外，还可以作为其它服务（例如：Nginx、HAProxy、MySQL等）的高可用解决方案软件。</p>\n<p>keepalived软件主要使用过VRRP协议实心高可用功能；VRRP是Virtual Route Redundancy Protocol（虚拟路由冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。</p>\n<blockquote>\n<p> Keepalived一方面具有配置管理LVS的功能，同时还具有LVS下面节点进行健康检查的功能，另一方面也可以实现系统网络服务的高可用功能。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h1><p><img src= \"/img/loading.gif\" data-src=\"keepalived.png\" alt=\"\"></p>\n<h2 id=\"处理请求\"><a href=\"#处理请求\" class=\"headerlink\" title=\"处理请求\"></a>处理请求</h2><p>Keepalived高可用对之间是通过 VRRP进行通信的， VRRP是通过竞选机制来确定主备的，主的优先级高于备。因此，工作时主会优先获得所有的资源，备节点处于等待状态，当主挂了的时候，备节点就会接管主节点的资源，然后顶替主节点对外提供服务。　　</p>\n<p>在 Keepalived服务对之间，只有作为主的服务器会一直发送 VRRP广播包，告诉备它还活着，此时备不会枪占主，当主不可用时，即备监听不到主发送的广播包时，就会启动相关服务接管资源，保证业务的连续性。接管速度最快可以小于1秒。</p>\n<blockquote>\n<p>通过竞争一个VIP来实现</p>\n</blockquote>\n<h2 id=\"主备切换\"><a href=\"#主备切换\" class=\"headerlink\" title=\"主备切换\"></a>主备切换</h2><p>Keepalived高可用服务之间的故障切换转移，还是通过VRRP（Vritual Route Redundancy Protocol，虚拟路由冗余协议）来实现的。在Keepalived服务正常工作时，主Master节点会不断向备节点发送心跳消息（多播的方式），用来告诉备用节点自己还活着，当主Master节点发送故障时，就无法发送心跳消息，备节点也就因此无法继续检测到来自主Master的心跳消息了，于是调用自身的接管程序，接管主Master节点的IP资源及服务。而当主Master恢复时，备Backup节点默认又会主动释放主节点故障时自身接管的IP资源及服务，恢复到原来的备用角色。</p>\n<br>\n\n\n\n<h1 id=\"不抢占机制nopreempt\"><a href=\"#不抢占机制nopreempt\" class=\"headerlink\" title=\"不抢占机制nopreempt\"></a>不抢占机制nopreempt</h1><p>当Master出现问题后，Backup会竞选为新的Master，那么之前的Master如果故障恢复后，是继续成为Master还是变成Backup呢？默认情况下，如果没设置不抢占，那么之前的Master起来后还是会继续抢占成为Master，也就是说，整个过程需要发生两次切换：</p>\n<ul>\n<li><p>主节点故障：Master —&gt; Backup；</p>\n</li>\n<li><p>主节点恢复：Backup —&gt;Master；</p>\n</li>\n</ul>\n<p>这样对业务频繁的切换是不能容忍的，因此我们希望Master起来后成为Backup，所以要设置不抢占，Keepalived里面提供了 nopreempt， 这个配置只能用在状态为Backup的机器上，但是我们明明希望的是Master不进行抢占，那没办法，Master的状态也得设置为Backup，也就是说两台负载均衡器都要讲state状态设置为Backup；那么谁是Master？就要通过优先级priority的高低来决定了，优先级搞得成为Master，反之为backup。</p>\n<br>\n\n\n\n<h1 id=\"脑裂\"><a href=\"#脑裂\" class=\"headerlink\" title=\"脑裂\"></a>脑裂</h1><h2 id=\"什么是脑裂\"><a href=\"#什么是脑裂\" class=\"headerlink\" title=\"什么是脑裂\"></a>什么是脑裂</h2><p>在高可用HA系统中，当联系2个节点的“心跳线”断开时，本来为一整体，一个VRRP协议组，动作协调的HA系统，就分裂为两个独立的个体。由于相互失去了联系，都以为对方出了故障；两个节点的HA软件像“连体人”一样，有共同的身体却拥有两个脑袋，争抢“共享资源”身体，争抢服务器里的应用服务，就会发送严重后果，或者共享资源被瓜分，两边服务都起不来或者都起来都为Master，假如两端服务器发生了脑裂现象就会成为各自的Master，会同时读写“共享存储”，导致数据损坏。（常见的如数据库轮询着的联机日志出错）</p>\n<h2 id=\"脑裂原因\"><a href=\"#脑裂原因\" class=\"headerlink\" title=\"脑裂原因\"></a>脑裂原因</h2><p>一般脑裂产生是因为如下的几个原因：</p>\n<ul>\n<li>高可用服务器对之间心跳线链路发生故障，导致无法正常通信；</li>\n<li>因心跳线坏了；</li>\n<li>因网卡及相关驱动坏了，ip配置及冲突问题（网卡直连）；</li>\n<li>因心跳线间连接的设备故障（网卡及交换机）；</li>\n<li>因仲裁的机器出问题（采用仲裁的方案） ；</li>\n<li>高可用服务器上开启了 iptables防火墙阻挡了心跳消息传输 ；</li>\n<li>高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败 ；</li>\n<li>其他服务配置不当等原因，如心跳方式不同，心跳广插冲突、软件Bug等 </li>\n</ul>\n<blockquote>\n<p>Keepalived配置里同一 VRRP实例如果 virtual_router_id两端参数配置不一致也会导致裂脑问题发生</p>\n</blockquote>\n<h2 id=\"解决脑裂的办法\"><a href=\"#解决脑裂的办法\" class=\"headerlink\" title=\"解决脑裂的办法\"></a>解决脑裂的办法</h2><ul>\n<li>添加冗余的心跳线，例如：双线条线（心跳线也HA），尽量减少“裂脑”发生几率，例如同时使用串行电缆和以太网电缆连接；</li>\n<li>启用磁盘锁。正在服务一方锁住共享磁盘，“裂脑”发生时，让对方完全“抢不走”共享磁盘资源；</li>\n<li>设置仲裁机制。例如设置参考IP（如网关IP），当心跳线完全断开时，2个节点都各自ping一下参考IP，不通则表明断点就出在本端。不仅“心跳”、还兼对外“服务”的本端网络链路断了，即使启动（或继续）应用服务也没有用了，那就主动放弃竞争，让能够ping通参考IP的一端去起服务。更保险一些，ping不通参考IP的一方干脆就自我重启，以彻底释放有可能还占用着的那些共享资源；</li>\n<li>当检测到裂脑时强行关闭一个心跳节点（这个功能需特殊设备支持，如Stonith、feyce）。相当于备节点接收不到心跳消患，通过单独的线路发送关机命令关闭主节点的电源；</li>\n</ul>\n<blockquote>\n<p>但使用锁磁盘也会有一个不小的问题，如果占用共享盘的一方不主动“解锁”，另一方就永远得不到共享磁盘。现实中假如服务节点突然死机或崩溃，就不可能执行解锁命令。后备节点也就接管不了共享资源和应用服务。于是有人在HA中设计了“智能”锁。即：正在服务的一方只在发现心跳线全部断开（察觉不到对端）时才启用磁盘锁。平时就不上锁了。</p>\n</blockquote>\n<p>　</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"keepalived介绍\"><a href=\"#keepalived介绍\" class=\"headerlink\" title=\"keepalived介绍\"></a>keepalived介绍</h1><p>keepalived软件起初是专门为LVS负载均衡软件而设计，用来管理并监控LVS集群系统中各个服务节点的状态，后来又加入了可以实现高可用的VRRP功能，因此，keepalived除了能够管理LVS软件ipvsadm外，还可以作为其它服务（例如：Nginx、HAProxy、MySQL等）的高可用解决方案软件。</p>\n<p>keepalived软件主要使用过VRRP协议实心高可用功能；VRRP是Virtual Route Redundancy Protocol（虚拟路由冗余协议）的缩写，VRRP出现的目的就是为了解决静态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断地运行。</p>\n<blockquote>\n<p> Keepalived一方面具有配置管理LVS的功能，同时还具有LVS下面节点进行健康检查的功能，另一方面也可以实现系统网络服务的高可用功能。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h1><p><img src=\"keepalived.png\" alt=\"\"></p>\n<h2 id=\"处理请求\"><a href=\"#处理请求\" class=\"headerlink\" title=\"处理请求\"></a>处理请求</h2><p>Keepalived高可用对之间是通过 VRRP进行通信的， VRRP是通过竞选机制来确定主备的，主的优先级高于备。因此，工作时主会优先获得所有的资源，备节点处于等待状态，当主挂了的时候，备节点就会接管主节点的资源，然后顶替主节点对外提供服务。　　</p>\n<p>在 Keepalived服务对之间，只有作为主的服务器会一直发送 VRRP广播包，告诉备它还活着，此时备不会枪占主，当主不可用时，即备监听不到主发送的广播包时，就会启动相关服务接管资源，保证业务的连续性。接管速度最快可以小于1秒。</p>\n<blockquote>\n<p>通过竞争一个VIP来实现</p>\n</blockquote>\n<h2 id=\"主备切换\"><a href=\"#主备切换\" class=\"headerlink\" title=\"主备切换\"></a>主备切换</h2><p>Keepalived高可用服务之间的故障切换转移，还是通过VRRP（Vritual Route Redundancy Protocol，虚拟路由冗余协议）来实现的。在Keepalived服务正常工作时，主Master节点会不断向备节点发送心跳消息（多播的方式），用来告诉备用节点自己还活着，当主Master节点发送故障时，就无法发送心跳消息，备节点也就因此无法继续检测到来自主Master的心跳消息了，于是调用自身的接管程序，接管主Master节点的IP资源及服务。而当主Master恢复时，备Backup节点默认又会主动释放主节点故障时自身接管的IP资源及服务，恢复到原来的备用角色。</p>\n<br>\n\n\n\n<h1 id=\"不抢占机制nopreempt\"><a href=\"#不抢占机制nopreempt\" class=\"headerlink\" title=\"不抢占机制nopreempt\"></a>不抢占机制nopreempt</h1><p>当Master出现问题后，Backup会竞选为新的Master，那么之前的Master如果故障恢复后，是继续成为Master还是变成Backup呢？默认情况下，如果没设置不抢占，那么之前的Master起来后还是会继续抢占成为Master，也就是说，整个过程需要发生两次切换：</p>\n<ul>\n<li><p>主节点故障：Master —&gt; Backup；</p>\n</li>\n<li><p>主节点恢复：Backup —&gt;Master；</p>\n</li>\n</ul>\n<p>这样对业务频繁的切换是不能容忍的，因此我们希望Master起来后成为Backup，所以要设置不抢占，Keepalived里面提供了 nopreempt， 这个配置只能用在状态为Backup的机器上，但是我们明明希望的是Master不进行抢占，那没办法，Master的状态也得设置为Backup，也就是说两台负载均衡器都要讲state状态设置为Backup；那么谁是Master？就要通过优先级priority的高低来决定了，优先级搞得成为Master，反之为backup。</p>\n<br>\n\n\n\n<h1 id=\"脑裂\"><a href=\"#脑裂\" class=\"headerlink\" title=\"脑裂\"></a>脑裂</h1><h2 id=\"什么是脑裂\"><a href=\"#什么是脑裂\" class=\"headerlink\" title=\"什么是脑裂\"></a>什么是脑裂</h2><p>在高可用HA系统中，当联系2个节点的“心跳线”断开时，本来为一整体，一个VRRP协议组，动作协调的HA系统，就分裂为两个独立的个体。由于相互失去了联系，都以为对方出了故障；两个节点的HA软件像“连体人”一样，有共同的身体却拥有两个脑袋，争抢“共享资源”身体，争抢服务器里的应用服务，就会发送严重后果，或者共享资源被瓜分，两边服务都起不来或者都起来都为Master，假如两端服务器发生了脑裂现象就会成为各自的Master，会同时读写“共享存储”，导致数据损坏。（常见的如数据库轮询着的联机日志出错）</p>\n<h2 id=\"脑裂原因\"><a href=\"#脑裂原因\" class=\"headerlink\" title=\"脑裂原因\"></a>脑裂原因</h2><p>一般脑裂产生是因为如下的几个原因：</p>\n<ul>\n<li>高可用服务器对之间心跳线链路发生故障，导致无法正常通信；</li>\n<li>因心跳线坏了；</li>\n<li>因网卡及相关驱动坏了，ip配置及冲突问题（网卡直连）；</li>\n<li>因心跳线间连接的设备故障（网卡及交换机）；</li>\n<li>因仲裁的机器出问题（采用仲裁的方案） ；</li>\n<li>高可用服务器上开启了 iptables防火墙阻挡了心跳消息传输 ；</li>\n<li>高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败 ；</li>\n<li>其他服务配置不当等原因，如心跳方式不同，心跳广插冲突、软件Bug等 </li>\n</ul>\n<blockquote>\n<p>Keepalived配置里同一 VRRP实例如果 virtual_router_id两端参数配置不一致也会导致裂脑问题发生</p>\n</blockquote>\n<h2 id=\"解决脑裂的办法\"><a href=\"#解决脑裂的办法\" class=\"headerlink\" title=\"解决脑裂的办法\"></a>解决脑裂的办法</h2><ul>\n<li>添加冗余的心跳线，例如：双线条线（心跳线也HA），尽量减少“裂脑”发生几率，例如同时使用串行电缆和以太网电缆连接；</li>\n<li>启用磁盘锁。正在服务一方锁住共享磁盘，“裂脑”发生时，让对方完全“抢不走”共享磁盘资源；</li>\n<li>设置仲裁机制。例如设置参考IP（如网关IP），当心跳线完全断开时，2个节点都各自ping一下参考IP，不通则表明断点就出在本端。不仅“心跳”、还兼对外“服务”的本端网络链路断了，即使启动（或继续）应用服务也没有用了，那就主动放弃竞争，让能够ping通参考IP的一端去起服务。更保险一些，ping不通参考IP的一方干脆就自我重启，以彻底释放有可能还占用着的那些共享资源；</li>\n<li>当检测到裂脑时强行关闭一个心跳节点（这个功能需特殊设备支持，如Stonith、feyce）。相当于备节点接收不到心跳消患，通过单独的线路发送关机命令关闭主节点的电源；</li>\n</ul>\n<blockquote>\n<p>但使用锁磁盘也会有一个不小的问题，如果占用共享盘的一方不主动“解锁”，另一方就永远得不到共享磁盘。现实中假如服务节点突然死机或崩溃，就不可能执行解锁命令。后备节点也就接管不了共享资源和应用服务。于是有人在HA中设计了“智能”锁。即：正在服务的一方只在发现心跳线全部断开（察觉不到对端）时才启用磁盘锁。平时就不上锁了。</p>\n</blockquote>\n<p>　</p>\n"},{"title":"安装RabbitMQ","date":"2020-08-09T02:21:53.000Z","description":"在Linux上部署RabbitMQ服务","cover":"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2897651972,890317148&fm=26&gp=0.jpg","_content":"\n\n\n# 下载\n\n在官网 [rabbitmq官网](https://www.rabbit.com) 找到合适的版本下载，这里使用的是`3.6.5`：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n RabbitMQ依赖于Erlang，可以在 [Erlang版本对照](https://www.rabbitmq.com/which-erlang.html) 找到对应的Erlang版本，这里我应该下载`18.3`版本：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm\n```\n\n\n\n<br>\n\n\n\n# 安装\n\n安装依赖：\n\n```bash\n$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat\n```\n\n\n\n安装rabbitmq：\n\n```bash\n# 先安装erlang\n$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm\n\n# 再安装rabbitmq\n$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n<br>\n\n\n\n# 编辑配置文件\n\n安装完成后默认配置文件在：`/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app`，修改这个文件来设置密码，修改配置等：\n\n```bash\n# 主要关注env模块的配置\n\n# 监听端口，默认5672\n{tcp_listeners, [5672]}\n\n# 只允许本地访问的用户\nloopback_users, [guest]}\n```\n\n\n\n<br>\n\n\n\n# 启动服务\n\n```bash\n# 启动服务\n$ rabbitmq-server start &\n\n# 后台启动\n$ rabbitmq-server -detached\n\n# 停止服务\n$ rabbitmqctl app_stop\n```\n\n\n\n会启动如下的几个端口：\n\n- 5672：java程序进行连接的端口；\n- 15672：控制台的端口（后面会安装）；\n- 25672：集群通信端口；\n\n\n\n<br>\n\n\n\n# 启动管理控制台\n\n```bash\n$ rabbitmq-plugins enable rabbitmq_management\n```\n\n\n\n插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用`guest/guest`登录：\n\n![](index.png)\n\n\n\n<br>\n\n\n\n# 常用命令\n\n```bash\n# 查看队列\n$ rabbitmqctl list_queues\n\n# 查看虚拟主机\n$ rabbitmqctl list_vhosts\n\n# 查看节点状态\n$ rabbitmqctl status\n\n# 新建用户\n$ rabbitmqctl add_user <用户名> <密码>\n\n# 设置用户为管理员\n$ rabbitmqctl set_user_tags <用户名> administrator\n\n# 赋予用户所有权限\n$ rabbitmqctl set_permissions -p / <用户名> ‘。*’ ‘。*’ ‘。*’\n```\n\n","source":"_posts/安装RabbitMQ.md","raw":"---\ntitle: 安装RabbitMQ\ndate: 2020-08-09 10:21:53\ntags:\n- RabbitMQ\ncategories:\n- 消息中间件\n- RabbitMQ\ndescription: 在Linux上部署RabbitMQ服务\ncover: https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2897651972,890317148&fm=26&gp=0.jpg\n---\n\n\n\n# 下载\n\n在官网 [rabbitmq官网](https://www.rabbit.com) 找到合适的版本下载，这里使用的是`3.6.5`：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n RabbitMQ依赖于Erlang，可以在 [Erlang版本对照](https://www.rabbitmq.com/which-erlang.html) 找到对应的Erlang版本，这里我应该下载`18.3`版本：\n\n```bash\n$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm\n```\n\n\n\n<br>\n\n\n\n# 安装\n\n安装依赖：\n\n```bash\n$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat\n```\n\n\n\n安装rabbitmq：\n\n```bash\n# 先安装erlang\n$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm\n\n# 再安装rabbitmq\n$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm\n```\n\n\n\n<br>\n\n\n\n# 编辑配置文件\n\n安装完成后默认配置文件在：`/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app`，修改这个文件来设置密码，修改配置等：\n\n```bash\n# 主要关注env模块的配置\n\n# 监听端口，默认5672\n{tcp_listeners, [5672]}\n\n# 只允许本地访问的用户\nloopback_users, [guest]}\n```\n\n\n\n<br>\n\n\n\n# 启动服务\n\n```bash\n# 启动服务\n$ rabbitmq-server start &\n\n# 后台启动\n$ rabbitmq-server -detached\n\n# 停止服务\n$ rabbitmqctl app_stop\n```\n\n\n\n会启动如下的几个端口：\n\n- 5672：java程序进行连接的端口；\n- 15672：控制台的端口（后面会安装）；\n- 25672：集群通信端口；\n\n\n\n<br>\n\n\n\n# 启动管理控制台\n\n```bash\n$ rabbitmq-plugins enable rabbitmq_management\n```\n\n\n\n插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用`guest/guest`登录：\n\n![](index.png)\n\n\n\n<br>\n\n\n\n# 常用命令\n\n```bash\n# 查看队列\n$ rabbitmqctl list_queues\n\n# 查看虚拟主机\n$ rabbitmqctl list_vhosts\n\n# 查看节点状态\n$ rabbitmqctl status\n\n# 新建用户\n$ rabbitmqctl add_user <用户名> <密码>\n\n# 设置用户为管理员\n$ rabbitmqctl set_user_tags <用户名> administrator\n\n# 赋予用户所有权限\n$ rabbitmqctl set_permissions -p / <用户名> ‘。*’ ‘。*’ ‘。*’\n```\n\n","slug":"安装RabbitMQ","published":1,"updated":"2020-08-10T09:13:29.292Z","_id":"ckdo3f7rx0001n5n041tddt6y","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>在官网 <a href=\"https://www.rabbit.com\" target=\"_blank\" rel=\"noopener\">rabbitmq官网</a> 找到合适的版本下载，这里使用的是<code>3.6.5</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<p> RabbitMQ依赖于Erlang，可以在 <a href=\"https://www.rabbitmq.com/which-erlang.html\" target=\"_blank\" rel=\"noopener\">Erlang版本对照</a> 找到对应的Erlang版本，这里我应该下载<code>18.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装rabbitmq：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先安装erlang</span></span><br><span class=\"line\">$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再安装rabbitmq</span></span><br><span class=\"line\">$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h1><p>安装完成后默认配置文件在：<code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app</code>，修改这个文件来设置密码，修改配置等：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要关注env模块的配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听端口，默认5672</span></span><br><span class=\"line\">&#123;tcp_listeners, [5672]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只允许本地访问的用户</span></span><br><span class=\"line\">loopback_users, [guest]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">$ rabbitmq-server start &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动</span></span><br><span class=\"line\">$ rabbitmq-server -detached</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">$ rabbitmqctl app_stop</span><br></pre></td></tr></table></figure>\n\n\n\n<p>会启动如下的几个端口：</p>\n<ul>\n<li>5672：java程序进行连接的端口；</li>\n<li>15672：控制台的端口（后面会安装）；</li>\n<li>25672：集群通信端口；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"启动管理控制台\"><a href=\"#启动管理控制台\" class=\"headerlink\" title=\"启动管理控制台\"></a>启动管理控制台</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n\n\n<p>插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用<code>guest/guest</code>登录：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"index.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看队列</span></span><br><span class=\"line\">$ rabbitmqctl list_queues</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看虚拟主机</span></span><br><span class=\"line\">$ rabbitmqctl list_vhosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点状态</span></span><br><span class=\"line\">$ rabbitmqctl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建用户</span></span><br><span class=\"line\">$ rabbitmqctl add_user &lt;用户名&gt; &lt;密码&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置用户为管理员</span></span><br><span class=\"line\">$ rabbitmqctl set_user_tags &lt;用户名&gt; administrator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋予用户所有权限</span></span><br><span class=\"line\">$ rabbitmqctl set_permissions -p / &lt;用户名&gt; ‘。*’ ‘。*’ ‘。*’</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>在官网 <a href=\"https://www.rabbit.com\" target=\"_blank\" rel=\"noopener\">rabbitmq官网</a> 找到合适的版本下载，这里使用的是<code>3.6.5</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<p> RabbitMQ依赖于Erlang，可以在 <a href=\"https://www.rabbitmq.com/which-erlang.html\" target=\"_blank\" rel=\"noopener\">Erlang版本对照</a> 找到对应的Erlang版本，这里我应该下载<code>18.3</code>版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y openssl openssl-devel make gcc gcc-c++ kernel-devel socat</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装rabbitmq：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先安装erlang</span></span><br><span class=\"line\">$ rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 再安装rabbitmq</span></span><br><span class=\"line\">$ rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h1><p>安装完成后默认配置文件在：<code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app</code>，修改这个文件来设置密码，修改配置等：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主要关注env模块的配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听端口，默认5672</span></span><br><span class=\"line\">&#123;tcp_listeners, [5672]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只允许本地访问的用户</span></span><br><span class=\"line\">loopback_users, [guest]&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">$ rabbitmq-server start &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台启动</span></span><br><span class=\"line\">$ rabbitmq-server -detached</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">$ rabbitmqctl app_stop</span><br></pre></td></tr></table></figure>\n\n\n\n<p>会启动如下的几个端口：</p>\n<ul>\n<li>5672：java程序进行连接的端口；</li>\n<li>15672：控制台的端口（后面会安装）；</li>\n<li>25672：集群通信端口；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"启动管理控制台\"><a href=\"#启动管理控制台\" class=\"headerlink\" title=\"启动管理控制台\"></a>启动管理控制台</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n\n\n<p>插件启动成功后，默认监听15672，通过浏览器访问该端口即可看到默认的登录界面，可以使用<code>guest/guest</code>登录：</p>\n<p><img src=\"index.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看队列</span></span><br><span class=\"line\">$ rabbitmqctl list_queues</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看虚拟主机</span></span><br><span class=\"line\">$ rabbitmqctl list_vhosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看节点状态</span></span><br><span class=\"line\">$ rabbitmqctl status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建用户</span></span><br><span class=\"line\">$ rabbitmqctl add_user &lt;用户名&gt; &lt;密码&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置用户为管理员</span></span><br><span class=\"line\">$ rabbitmqctl set_user_tags &lt;用户名&gt; administrator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 赋予用户所有权限</span></span><br><span class=\"line\">$ rabbitmqctl set_permissions -p / &lt;用户名&gt; ‘。*’ ‘。*’ ‘。*’</span><br></pre></td></tr></table></figure>\n\n"},{"title":"二进制方式部署kafka+zookeeper集群","date":"2020-08-10T09:29:30.000Z","description":"使用二进制方式部署kafka和zookeeper集群","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597061962571&di=1bcb9ffe8797bbd4f755680a30555a9a&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171102%2F0565177860a5478d81dbaf8bf12d3866.jpeg","_content":"\n\n\n# 服务器规划\n\n| IP地址     | 主机名      | Kafka版本            | ZooKeeper版本           | JDK版本                    |\n| ---------- | ----------- | -------------------- | ----------------------- | -------------------------- |\n| 172.17.0.2 | kafka_node1 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.3 | kafka_node2 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.4 | kafka_node3 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n\n\n\n<br>\n\n\n\n# 部署JDK\n\n```bash\n$ tar xf jdk-8u161-linux-x64.tar.gz  -C /usr/local/\n\n$ cat << EOF >> /etc/profile\n#################JAVA#################\nexport JAVA_HOME=/usr/local/jdk1.8.0_161\nexport JRE_HOME=\\$JAVA_HOME/jre\nexport CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar:\\$JRE_HOME/lib\nexport PATH=\\$JAVA_HOME/bin:\\$JRE_HOME/bin:\\$PATH\nEOF\n\n$ source /etc/profile\n$ java -version\n```\n\n\n\n<br>\n\n\n\n# 部署zookeeper\n\n## 下载\n\n```bash\n# 下载\n$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\n```\n\n\n\n## 安装\n\n```bash\n# 安装\n$ tar xf zookeeper-3.4.14.tar.gz  -C /usr/local/\n$ cp -rf /usr/local/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/local/zookeeper-3.4.14/conf/zoo.cfg\n```\n\n\n\n## 设置配置文件\n\n三个节点的配置需要保持一致。\n\n\n\n```bash\n$ cat << EOF > /usr/local/zookeeper-3.4.14/conf/zoo.cfg\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/data/zk_data\ndataLogDir=/usr/local/zookeeper-3.4.14/logs\nclientPort=2181\nmaxClientCnxns=60\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=1\nserver.1=172.17.0.2:2888:3888\nserver.2=172.17.0.3:2888:3888\nserver.3=172.17.0.4:2888:3888\nEOF\n```\n\n\n\n## 创建目录\n\n```bash\n$ mkdir -p /data/zk_data\n$ mkdir /usr/local/zookeeper-3.4.14/logs\n```\n\n\n\n## 创建ServerID标识\n\n在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件\n\n```bash\n# 在node-1节点\n$ echo '1' > /data/zk_data/myid\n\n# 在node-2节点 \n$ echo '2' > /data/zk_data/myid\n\n# 在node-3节点\n$ echo '3' > /data/zk_data/myid\n```\n\n\n\n## 启动\n\n三个节点全部启动：\n\n\n\n```bash\n$ /usr/local/zookeeper-3.4.14/bin/zkServer.sh start\n\nZooKeeper JMX enabled by default\nUsing config: /usr/local/zookeeper-3.4.14/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n```\n\n\n\n使用`lsof -i:`命令来查看端口信息：\n\n- 如果是`leader`节点：查看到的连接会是与集群内所有的follower的连接；\n- 如果是`follower`节点：查看到的连接将只会与ZK集群中的leader连接；\n\n\n\n```bash\n$ lsof -i:2888\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点\n\n\n\n```bash\n$ lsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)\njava     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby->172.17.0.2:42424 (ESTABLISHED)\njava     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby->172.17.0.4:49420 (ESTABLISHED)\n\n```\n\n\n\n> node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点\n\n\n\n```bash\n$ lsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node3与node1一样为follower节点\n\n\n\n<br>\n\n\n\n# 部署kafka\n\n## 下载安装\n\n```bash\n$ wget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz\n$ tar xf kafka_2.12-2.2.1.tgz -C /usr/local/\n```\n\n\n\n## 修改配置文件\n\n先备份原配置文件：\n\n```bash\n$ cp -rf /usr/local/kafka_2.12-2.2.1/config/server.properties /usr/local/kafka_2.12-2.2.1/config/server.properties.default\n```\n\n\n\n设置新的配置文件：\n\n```bash\n$ cat << EOF > /usr/local/kafka_2.12-2.2.1/config/server.properties\nbroker.id=1                                                     #Kafka_node2节点修改为2，3修改为3\nlisteners=PLAINTEXT://172.17.0.2:9092                           #修改Kafka_node的IP地址为各自node本地地址\nnum.network.threads=3\nnum.io.threads=8\nsocket.send.buffer.bytes=102400\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nlog.dirs=/data/kafka-logs/\nnum.partitions=1\nnum.recovery.threads.per.data.dir=1\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\nlog.retention.hours=72\nlog.segment.bytes=1073741824\nlog.retention.check.interval.ms=300000\nzookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181\ndelete.topic.enable=true\nzookeeper.connection.timeout.ms=6000\ngroup.initial.rebalance.delay.ms=3000\nEOF\n```\n\n\n\n## 启动\n\n启动三个节点的服务\n\n```bash\n$ /usr/local/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/local/kafka_2.12-2.2.1/config/server.properties\n```\n\n\n\n## 检查\n\nZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918\nKafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568\n\n```bash\n$ netstat -anplt | egrep \"(2181|9092)\"\ntcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          \ntcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          \ntcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          \ntcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java   \n```\n\n\n\n## 查看kafka连接情况\n\n查看node1的情况：\n\n```bash\n$ lsof -i:9092\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)\njava    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568->kafka_node1:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc->kafka_node1:55568 (ESTABLISHED)\njava    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094->172.17.0.3:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674->172.17.0.4:XmlIpcRegSvc (ESTABLISHED)\n```\n\n> node1节点同时与node2及node3建立了连接，即node1节点为主节点\n\n\n\n查看node2的情况：\n\n```bash\n$ lsof -i:9092\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)\njava    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc->172.17.0.2:43094 (ESTABLISHED)\n```\n\n> node2只与node1建立了连接，即它是follower节点\n\n\n\n查看node3的情况：\n\n```bash\n$ lsof -i:9092\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)\njava    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc->172.17.0.2:45674 (ESTABLISHED)\n```\n\n> node3与node1建立了连接，即它是follower节点\n\n\n\n","source":"_posts/二进制方式部署kafka-zookeeper集群.md","raw":"---\ntitle: 二进制方式部署kafka+zookeeper集群\ndate: 2020-08-10 17:29:30\ntags:\n- kafka\ncategories:\n- 消息中间件\n- kafka\ndescription: 使用二进制方式部署kafka和zookeeper集群\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597061962571&di=1bcb9ffe8797bbd4f755680a30555a9a&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171102%2F0565177860a5478d81dbaf8bf12d3866.jpeg\n---\n\n\n\n# 服务器规划\n\n| IP地址     | 主机名      | Kafka版本            | ZooKeeper版本           | JDK版本                    |\n| ---------- | ----------- | -------------------- | ----------------------- | -------------------------- |\n| 172.17.0.2 | kafka_node1 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.3 | kafka_node2 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n| 172.17.0.4 | kafka_node3 | kafka_2.12-2.2.1.tgz | zookeeper-3.4.14.tar.gz | jdk-8u161-linux-x64.tar.gz |\n\n\n\n<br>\n\n\n\n# 部署JDK\n\n```bash\n$ tar xf jdk-8u161-linux-x64.tar.gz  -C /usr/local/\n\n$ cat << EOF >> /etc/profile\n#################JAVA#################\nexport JAVA_HOME=/usr/local/jdk1.8.0_161\nexport JRE_HOME=\\$JAVA_HOME/jre\nexport CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:\\$JAVA_HOME/lib/tools.jar:\\$JRE_HOME/lib\nexport PATH=\\$JAVA_HOME/bin:\\$JRE_HOME/bin:\\$PATH\nEOF\n\n$ source /etc/profile\n$ java -version\n```\n\n\n\n<br>\n\n\n\n# 部署zookeeper\n\n## 下载\n\n```bash\n# 下载\n$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\n```\n\n\n\n## 安装\n\n```bash\n# 安装\n$ tar xf zookeeper-3.4.14.tar.gz  -C /usr/local/\n$ cp -rf /usr/local/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/local/zookeeper-3.4.14/conf/zoo.cfg\n```\n\n\n\n## 设置配置文件\n\n三个节点的配置需要保持一致。\n\n\n\n```bash\n$ cat << EOF > /usr/local/zookeeper-3.4.14/conf/zoo.cfg\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/data/zk_data\ndataLogDir=/usr/local/zookeeper-3.4.14/logs\nclientPort=2181\nmaxClientCnxns=60\nautopurge.snapRetainCount=3\nautopurge.purgeInterval=1\nserver.1=172.17.0.2:2888:3888\nserver.2=172.17.0.3:2888:3888\nserver.3=172.17.0.4:2888:3888\nEOF\n```\n\n\n\n## 创建目录\n\n```bash\n$ mkdir -p /data/zk_data\n$ mkdir /usr/local/zookeeper-3.4.14/logs\n```\n\n\n\n## 创建ServerID标识\n\n在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件\n\n```bash\n# 在node-1节点\n$ echo '1' > /data/zk_data/myid\n\n# 在node-2节点 \n$ echo '2' > /data/zk_data/myid\n\n# 在node-3节点\n$ echo '3' > /data/zk_data/myid\n```\n\n\n\n## 启动\n\n三个节点全部启动：\n\n\n\n```bash\n$ /usr/local/zookeeper-3.4.14/bin/zkServer.sh start\n\nZooKeeper JMX enabled by default\nUsing config: /usr/local/zookeeper-3.4.14/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n```\n\n\n\n使用`lsof -i:`命令来查看端口信息：\n\n- 如果是`leader`节点：查看到的连接会是与集群内所有的follower的连接；\n- 如果是`follower`节点：查看到的连接将只会与ZK集群中的leader连接；\n\n\n\n```bash\n$ lsof -i:2888\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点\n\n\n\n```bash\n$ lsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)\njava     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby->172.17.0.2:42424 (ESTABLISHED)\njava     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby->172.17.0.4:49420 (ESTABLISHED)\n\n```\n\n\n\n> node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点\n\n\n\n```bash\n$ lsof -i:2888\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420->172.17.0.3:spcsdlobby (ESTABLISHED)\n```\n\n\n\n> node3与node1一样为follower节点\n\n\n\n<br>\n\n\n\n# 部署kafka\n\n## 下载安装\n\n```bash\n$ wget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz\n$ tar xf kafka_2.12-2.2.1.tgz -C /usr/local/\n```\n\n\n\n## 修改配置文件\n\n先备份原配置文件：\n\n```bash\n$ cp -rf /usr/local/kafka_2.12-2.2.1/config/server.properties /usr/local/kafka_2.12-2.2.1/config/server.properties.default\n```\n\n\n\n设置新的配置文件：\n\n```bash\n$ cat << EOF > /usr/local/kafka_2.12-2.2.1/config/server.properties\nbroker.id=1                                                     #Kafka_node2节点修改为2，3修改为3\nlisteners=PLAINTEXT://172.17.0.2:9092                           #修改Kafka_node的IP地址为各自node本地地址\nnum.network.threads=3\nnum.io.threads=8\nsocket.send.buffer.bytes=102400\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nlog.dirs=/data/kafka-logs/\nnum.partitions=1\nnum.recovery.threads.per.data.dir=1\noffsets.topic.replication.factor=1\ntransaction.state.log.replication.factor=1\ntransaction.state.log.min.isr=1\nlog.retention.hours=72\nlog.segment.bytes=1073741824\nlog.retention.check.interval.ms=300000\nzookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181\ndelete.topic.enable=true\nzookeeper.connection.timeout.ms=6000\ngroup.initial.rebalance.delay.ms=3000\nEOF\n```\n\n\n\n## 启动\n\n启动三个节点的服务\n\n```bash\n$ /usr/local/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/local/kafka_2.12-2.2.1/config/server.properties\n```\n\n\n\n## 检查\n\nZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918\nKafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568\n\n```bash\n$ netstat -anplt | egrep \"(2181|9092)\"\ntcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          \ntcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          \ntcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          \ntcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          \ntcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java   \n```\n\n\n\n## 查看kafka连接情况\n\n查看node1的情况：\n\n```bash\n$ lsof -i:9092\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)\njava    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568->kafka_node1:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc->kafka_node1:55568 (ESTABLISHED)\njava    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094->172.17.0.3:XmlIpcRegSvc (ESTABLISHED)\njava    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674->172.17.0.4:XmlIpcRegSvc (ESTABLISHED)\n```\n\n> node1节点同时与node2及node3建立了连接，即node1节点为主节点\n\n\n\n查看node2的情况：\n\n```bash\n$ lsof -i:9092\nCOMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)\njava    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc->172.17.0.2:43094 (ESTABLISHED)\n```\n\n> node2只与node1建立了连接，即它是follower节点\n\n\n\n查看node3的情况：\n\n```bash\n$ lsof -i:9092\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)\njava    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc->172.17.0.2:45674 (ESTABLISHED)\n```\n\n> node3与node1建立了连接，即它是follower节点\n\n\n\n","slug":"二进制方式部署kafka-zookeeper集群","published":1,"updated":"2020-08-10T09:54:38.112Z","_id":"ckdobh0000000f2n0hg2474tw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"服务器规划\"><a href=\"#服务器规划\" class=\"headerlink\" title=\"服务器规划\"></a>服务器规划</h1><table>\n<thead>\n<tr>\n<th>IP地址</th>\n<th>主机名</th>\n<th>Kafka版本</th>\n<th>ZooKeeper版本</th>\n<th>JDK版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>172.17.0.2</td>\n<td>kafka_node1</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.3</td>\n<td>kafka_node2</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.4</td>\n<td>kafka_node3</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n</tbody></table>\n<br>\n\n\n\n<h1 id=\"部署JDK\"><a href=\"#部署JDK\" class=\"headerlink\" title=\"部署JDK\"></a>部署JDK</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar xf jdk-8u161-linux-x64.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#################JAVA#################</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.8.0_161</span><br><span class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=\\<span class=\"variable\">$JAVA_HOME</span>/jre</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:\\<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:\\<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:\\<span class=\"variable\">$JRE_HOME</span>/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$JAVA_HOME</span>/bin:\\<span class=\"variable\">$JRE_HOME</span>/bin:\\<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">$ java -version</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署zookeeper\"><a href=\"#部署zookeeper\" class=\"headerlink\" title=\"部署zookeeper\"></a>部署zookeeper</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">$ tar xf zookeeper-3.4.14.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">$ cp -rf /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>三个节点的配置需要保持一致。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo.cfg</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=/data/zk_data</span><br><span class=\"line\">dataLogDir=/usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/logs</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">maxClientCnxns=60</span><br><span class=\"line\">autopurge.snapRetainCount=3</span><br><span class=\"line\">autopurge.purgeInterval=1</span><br><span class=\"line\">server.1=172.17.0.2:2888:3888</span><br><span class=\"line\">server.2=172.17.0.3:2888:3888</span><br><span class=\"line\">server.3=172.17.0.4:2888:3888</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /data/zk_data</span><br><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/logs</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建ServerID标识\"><a href=\"#创建ServerID标识\" class=\"headerlink\" title=\"创建ServerID标识\"></a>创建ServerID标识</h2><p>在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在node-1节点</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'1'</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-2节点 </span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'2'</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-3节点</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'3'</span> &gt; /data/zk_data/myid</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>三个节点全部启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/zkServer.sh start</span><br><span class=\"line\"></span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用<code>lsof -i:</code>命令来查看端口信息：</p>\n<ul>\n<li>如果是<code>leader</code>节点：查看到的连接会是与集群内所有的follower的连接；</li>\n<li>如果是<code>follower</code>节点：查看到的连接将只会与ZK集群中的leader连接；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:2888</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)</span><br><span class=\"line\">java     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.2:42424 (ESTABLISHED)</span><br><span class=\"line\">java     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.4:49420 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node3与node1一样为follower节点</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署kafka\"><a href=\"#部署kafka\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h1><h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz</span><br><span class=\"line\">$ tar xf kafka_2.12-2.2.1.tgz -C /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>先备份原配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp -rf /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties.default</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置新的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties</span><br><span class=\"line\">broker.id=1                                                     <span class=\"comment\">#Kafka_node2节点修改为2，3修改为3</span></span><br><span class=\"line\">listeners=PLAINTEXT://172.17.0.2:9092                           <span class=\"comment\">#修改Kafka_node的IP地址为各自node本地地址</span></span><br><span class=\"line\">num.network.threads=3</span><br><span class=\"line\">num.io.threads=8</span><br><span class=\"line\">socket.send.buffer.bytes=102400</span><br><span class=\"line\">socket.receive.buffer.bytes=102400</span><br><span class=\"line\">socket.request.max.bytes=104857600</span><br><span class=\"line\">log.dirs=/data/kafka-logs/</span><br><span class=\"line\">num.partitions=1</span><br><span class=\"line\">num.recovery.threads.per.data.dir=1</span><br><span class=\"line\">offsets.topic.replication.factor=1</span><br><span class=\"line\">transaction.state.log.replication.factor=1</span><br><span class=\"line\">transaction.state.log.min.isr=1</span><br><span class=\"line\">log.retention.hours=72</span><br><span class=\"line\">log.segment.bytes=1073741824</span><br><span class=\"line\">log.retention.check.interval.ms=300000</span><br><span class=\"line\">zookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181</span><br><span class=\"line\">delete.topic.enable=<span class=\"literal\">true</span></span><br><span class=\"line\">zookeeper.connection.timeout.ms=6000</span><br><span class=\"line\">group.initial.rebalance.delay.ms=3000</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>启动三个节点的服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>ZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918<br>Kafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -anplt | egrep <span class=\"string\">\"(2181|9092)\"</span></span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          </span><br><span class=\"line\">tcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看kafka连接情况\"><a href=\"#查看kafka连接情况\" class=\"headerlink\" title=\"查看kafka连接情况\"></a>查看kafka连接情况</h2><p>查看node1的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:9092</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568-&gt;kafka_node1:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc-&gt;kafka_node1:55568 (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094-&gt;172.17.0.3:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674-&gt;172.17.0.4:XmlIpcRegSvc (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node1节点同时与node2及node3建立了连接，即node1节点为主节点</p>\n</blockquote>\n<p>查看node2的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:9092</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc-&gt;172.17.0.2:43094 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node2只与node1建立了连接，即它是follower节点</p>\n</blockquote>\n<p>查看node3的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:9092</span><br><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc-&gt;172.17.0.2:45674 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node3与node1建立了连接，即它是follower节点</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"服务器规划\"><a href=\"#服务器规划\" class=\"headerlink\" title=\"服务器规划\"></a>服务器规划</h1><table>\n<thead>\n<tr>\n<th>IP地址</th>\n<th>主机名</th>\n<th>Kafka版本</th>\n<th>ZooKeeper版本</th>\n<th>JDK版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>172.17.0.2</td>\n<td>kafka_node1</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.3</td>\n<td>kafka_node2</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n<tr>\n<td>172.17.0.4</td>\n<td>kafka_node3</td>\n<td>kafka_2.12-2.2.1.tgz</td>\n<td>zookeeper-3.4.14.tar.gz</td>\n<td>jdk-8u161-linux-x64.tar.gz</td>\n</tr>\n</tbody></table>\n<br>\n\n\n\n<h1 id=\"部署JDK\"><a href=\"#部署JDK\" class=\"headerlink\" title=\"部署JDK\"></a>部署JDK</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar xf jdk-8u161-linux-x64.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat &lt;&lt; EOF &gt;&gt; /etc/profile</span><br><span class=\"line\"><span class=\"comment\">#################JAVA#################</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.8.0_161</span><br><span class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=\\<span class=\"variable\">$JAVA_HOME</span>/jre</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:\\<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:\\<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar:\\<span class=\"variable\">$JRE_HOME</span>/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=\\<span class=\"variable\">$JAVA_HOME</span>/bin:\\<span class=\"variable\">$JRE_HOME</span>/bin:\\<span class=\"variable\">$PATH</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">$ java -version</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"部署zookeeper\"><a href=\"#部署zookeeper\" class=\"headerlink\" title=\"部署zookeeper\"></a>部署zookeeper</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">$ tar xf zookeeper-3.4.14.tar.gz  -C /usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">$ cp -rf /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo_sample.cfg /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo.cfg</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>三个节点的配置需要保持一致。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/conf/zoo.cfg</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=/data/zk_data</span><br><span class=\"line\">dataLogDir=/usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/logs</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">maxClientCnxns=60</span><br><span class=\"line\">autopurge.snapRetainCount=3</span><br><span class=\"line\">autopurge.purgeInterval=1</span><br><span class=\"line\">server.1=172.17.0.2:2888:3888</span><br><span class=\"line\">server.2=172.17.0.3:2888:3888</span><br><span class=\"line\">server.3=172.17.0.4:2888:3888</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建目录\"><a href=\"#创建目录\" class=\"headerlink\" title=\"创建目录\"></a>创建目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /data/zk_data</span><br><span class=\"line\">$ mkdir /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/logs</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建ServerID标识\"><a href=\"#创建ServerID标识\" class=\"headerlink\" title=\"创建ServerID标识\"></a>创建ServerID标识</h2><p>在ZooKeeper集群中除配置文件外，还需要配置一个myid文件，这个文件需要存放在配置文件中dataDir配置项所指定的数据位置，要根据集群中的节点创建不同的文件。我们要根据ServerID标示来创建相应的文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在node-1节点</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'1'</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-2节点 </span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'2'</span> &gt; /data/zk_data/myid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在node-3节点</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'3'</span> &gt; /data/zk_data/myid</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>三个节点全部启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/zkServer.sh start</span><br><span class=\"line\"></span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /usr/<span class=\"built_in\">local</span>/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用<code>lsof -i:</code>命令来查看端口信息：</p>\n<ul>\n<li>如果是<code>leader</code>节点：查看到的连接会是与集群内所有的follower的连接；</li>\n<li>如果是<code>follower</code>节点：查看到的连接将只会与ZK集群中的leader连接；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:2888</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15620 root   30u  IPv4  71449      0t0  TCP kafka_node1:42424-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node1只有一个连接是和172.17.0.3建立的，可以表明此节点为follower节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   30u  IPv4  65243      0t0  TCP kafka_node2:spcsdlobby (LISTEN)</span><br><span class=\"line\">java     91 root   31u  IPv4  69183      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.2:42424 (ESTABLISHED)</span><br><span class=\"line\">java     91 root   33u  IPv4  69192      0t0  TCP kafka_node2:spcsdlobby-&gt;172.17.0.4:49420 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node2是与集群内的其它两台机器所连接，可以表明此节点为leader节点</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:2888</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java     91 root   31u  IPv4  64087      0t0  TCP kafka_node3:49420-&gt;172.17.0.3:spcsdlobby (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>node3与node1一样为follower节点</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署kafka\"><a href=\"#部署kafka\" class=\"headerlink\" title=\"部署kafka\"></a>部署kafka</h1><h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://mirror.bit.edu.cn/apache/kafka/2.2.1/kafka_2.12-2.2.1.tgz</span><br><span class=\"line\">$ tar xf kafka_2.12-2.2.1.tgz -C /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>先备份原配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp -rf /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties.default</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置新的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat &lt;&lt; EOF &gt; /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties</span><br><span class=\"line\">broker.id=1                                                     <span class=\"comment\">#Kafka_node2节点修改为2，3修改为3</span></span><br><span class=\"line\">listeners=PLAINTEXT://172.17.0.2:9092                           <span class=\"comment\">#修改Kafka_node的IP地址为各自node本地地址</span></span><br><span class=\"line\">num.network.threads=3</span><br><span class=\"line\">num.io.threads=8</span><br><span class=\"line\">socket.send.buffer.bytes=102400</span><br><span class=\"line\">socket.receive.buffer.bytes=102400</span><br><span class=\"line\">socket.request.max.bytes=104857600</span><br><span class=\"line\">log.dirs=/data/kafka-logs/</span><br><span class=\"line\">num.partitions=1</span><br><span class=\"line\">num.recovery.threads.per.data.dir=1</span><br><span class=\"line\">offsets.topic.replication.factor=1</span><br><span class=\"line\">transaction.state.log.replication.factor=1</span><br><span class=\"line\">transaction.state.log.min.isr=1</span><br><span class=\"line\">log.retention.hours=72</span><br><span class=\"line\">log.segment.bytes=1073741824</span><br><span class=\"line\">log.retention.check.interval.ms=300000</span><br><span class=\"line\">zookeeper.connect=172.17.0.2:2181,172.17.0.3:2181,172.17.0.4:2181</span><br><span class=\"line\">delete.topic.enable=<span class=\"literal\">true</span></span><br><span class=\"line\">zookeeper.connection.timeout.ms=6000</span><br><span class=\"line\">group.initial.rebalance.delay.ms=3000</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>启动三个节点的服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/bin/kafka-server-start.sh -daemon /usr/<span class=\"built_in\">local</span>/kafka_2.12-2.2.1/config/server.properties</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检查\"><a href=\"#检查\" class=\"headerlink\" title=\"检查\"></a>检查</h2><p>ZooKeeper监控本地地址TCP端口2181，可以ZooKeeper看到2181后面对应的还有一个端口号为43918<br>Kafka监控本地地址TCP端口9092，可以看到Kafka9092后面也有对应的一个端口号55568</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -anplt | egrep <span class=\"string\">\"(2181|9092)\"</span></span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         0.0.0.0:*               LISTEN      15945/java          </span><br><span class=\"line\">tcp        0      0 0.0.0.0:2181            0.0.0.0:*               LISTEN      15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:45674        172.17.0.4:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:55568        172.17.0.2:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:9092         172.17.0.2:55568        ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43094        172.17.0.3:9092         ESTABLISHED 15945/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:2181         172.17.0.2:43918        ESTABLISHED 15620/java          </span><br><span class=\"line\">tcp        0      0 172.17.0.2:43918        172.17.0.2:2181         ESTABLISHED 15945/java</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查看kafka连接情况\"><a href=\"#查看kafka连接情况\" class=\"headerlink\" title=\"查看kafka连接情况\"></a>查看kafka连接情况</h2><p>查看node1的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:9092</span><br><span class=\"line\">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    15945 root  106u  IPv4  64487      0t0  TCP kafka_node1:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    15945 root  122u  IPv4  72859      0t0  TCP kafka_node1:55568-&gt;kafka_node1:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  123u  IPv4  71815      0t0  TCP kafka_node1:XmlIpcRegSvc-&gt;kafka_node1:55568 (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  127u  IPv4  72997      0t0  TCP kafka_node1:43094-&gt;172.17.0.3:XmlIpcRegSvc (ESTABLISHED)</span><br><span class=\"line\">java    15945 root  131u  IPv4  75769      0t0  TCP kafka_node1:45674-&gt;172.17.0.4:XmlIpcRegSvc (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node1节点同时与node2及node3建立了连接，即node1节点为主节点</p>\n</blockquote>\n<p>查看node2的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:9092</span><br><span class=\"line\">COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    415 root  106u  IPv4  75016      0t0  TCP kafka_node2:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    415 root  116u  IPv4  72998      0t0  TCP kafka_node2:XmlIpcRegSvc-&gt;172.17.0.2:43094 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node2只与node1建立了连接，即它是follower节点</p>\n</blockquote>\n<p>查看node3的情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsof -i:9092</span><br><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    1125 root  106u  IPv4  73394      0t0  TCP kafka_node3:XmlIpcRegSvc (LISTEN)</span><br><span class=\"line\">java    1125 root  116u  IPv4  72253      0t0  TCP kafka_node3:XmlIpcRegSvc-&gt;172.17.0.2:45674 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>node3与node1建立了连接，即它是follower节点</p>\n</blockquote>\n"},{"title":"kafka的常用命令行操作","date":"2020-08-10T09:55:00.000Z","description":"kafka的命令行常用操作","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1860660051,254729202&fm=26&gp=0.jpg","_content":"\n\n\n# topic相关命令\n\n\n\n## 创建topic\n\n```bash\n$ kafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data\n```\n\n\n\n- `--bootstrap-server`：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；\n- `--replication-factor`：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；\n- `--partitions`：创建该Topic中的分区(partition)数量；\n- `--topic`：指定Topic名称；\n\n\n\n> 如果创建的topic包含\"_.\"之类的符号会收到警告，但是不会影响创建。\n\n\n\n## 查看topic\n\n```bash\n$ kafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092\n```\n\n- `--bootstrap-server`：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；\n\n\n\n## 查看topic详情\n\n```bash\n$ kafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n\nTopic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824\n    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3\n    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1\n    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2\n```\n\n- `Topic:kafka_data`：topic名称\n- `PartitionCount:3`：分片数量\n- `ReplicationFactor:3`：Topic副本数量\n\n\n\n## 删除topic\n\n```bash\n$ kafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n```\n\n\n\n> 在node1节点删除了Topic，三台节点会同步更新，所以我们的`kafka_data`在三台node上全部删除\n\n\n\n注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：\n\n```bash\n# 在zookeeper上执行下面的命令登录\n$ bin/zkCli.sh -server <zookeeper-host:port>\n\n# 登录后执行下面的操作\n$ rmr /brokers/topics/<topicname>\n```\n\n\n\n<br>\n\n\n\n# 消息相关命令\n\n\n\n## 发送消息\n\n```bash\n$ kafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data\n>Hello Kafka_data\n>I'm the 172.17.0.2 Kafka create\n>test\n```\n\n- `--broker-list`：指定使用哪台broker来生产消息\n- `--topic`：指定要往哪个Topic中生产消息\n\n\n\n## 消费消息\n\n```bash\n$ kafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning \n\nI'm the 172.17.0.2 Kafka create\ntest\nHello Kafka_data\n```\n\n","source":"_posts/kafka的常用操作.md","raw":"---\ntitle: kafka的常用命令行操作\ndate: 2020-08-10 17:55:00\ntags:\n- kafka\ncategories:\n- 消息中间件\n- kafka\ndescription: kafka的命令行常用操作\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1860660051,254729202&fm=26&gp=0.jpg\n---\n\n\n\n# topic相关命令\n\n\n\n## 创建topic\n\n```bash\n$ kafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data\n```\n\n\n\n- `--bootstrap-server`：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；\n- `--replication-factor`：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；\n- `--partitions`：创建该Topic中的分区(partition)数量；\n- `--topic`：指定Topic名称；\n\n\n\n> 如果创建的topic包含\"_.\"之类的符号会收到警告，但是不会影响创建。\n\n\n\n## 查看topic\n\n```bash\n$ kafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092\n```\n\n- `--bootstrap-server`：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；\n\n\n\n## 查看topic详情\n\n```bash\n$ kafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n\nTopic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824\n    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3\n    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1\n    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2\n```\n\n- `Topic:kafka_data`：topic名称\n- `PartitionCount:3`：分片数量\n- `ReplicationFactor:3`：Topic副本数量\n\n\n\n## 删除topic\n\n```bash\n$ kafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data\n```\n\n\n\n> 在node1节点删除了Topic，三台节点会同步更新，所以我们的`kafka_data`在三台node上全部删除\n\n\n\n注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：\n\n```bash\n# 在zookeeper上执行下面的命令登录\n$ bin/zkCli.sh -server <zookeeper-host:port>\n\n# 登录后执行下面的操作\n$ rmr /brokers/topics/<topicname>\n```\n\n\n\n<br>\n\n\n\n# 消息相关命令\n\n\n\n## 发送消息\n\n```bash\n$ kafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data\n>Hello Kafka_data\n>I'm the 172.17.0.2 Kafka create\n>test\n```\n\n- `--broker-list`：指定使用哪台broker来生产消息\n- `--topic`：指定要往哪个Topic中生产消息\n\n\n\n## 消费消息\n\n```bash\n$ kafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning \n\nI'm the 172.17.0.2 Kafka create\ntest\nHello Kafka_data\n```\n\n","slug":"kafka的常用操作","published":1,"updated":"2020-08-14T07:55:38.958Z","_id":"ckdocdxcg0000iun0972n26ja","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"topic相关命令\"><a href=\"#topic相关命令\" class=\"headerlink\" title=\"topic相关命令\"></a>topic相关命令</h1><h2 id=\"创建topic\"><a href=\"#创建topic\" class=\"headerlink\" title=\"创建topic\"></a>创建topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>--bootstrap-server</code>：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；</li>\n<li><code>--replication-factor</code>：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；</li>\n<li><code>--partitions</code>：创建该Topic中的分区(partition)数量；</li>\n<li><code>--topic</code>：指定Topic名称；</li>\n</ul>\n<blockquote>\n<p>如果创建的topic包含”_.”之类的符号会收到警告，但是不会影响创建。</p>\n</blockquote>\n<h2 id=\"查看topic\"><a href=\"#查看topic\" class=\"headerlink\" title=\"查看topic\"></a>查看topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--bootstrap-server</code>：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；</li>\n</ul>\n<h2 id=\"查看topic详情\"><a href=\"#查看topic详情\" class=\"headerlink\" title=\"查看topic详情\"></a>查看topic详情</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\"></span><br><span class=\"line\">Topic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824</span><br><span class=\"line\">    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3</span><br><span class=\"line\">    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1</span><br><span class=\"line\">    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Topic:kafka_data</code>：topic名称</li>\n<li><code>PartitionCount:3</code>：分片数量</li>\n<li><code>ReplicationFactor:3</code>：Topic副本数量</li>\n</ul>\n<h2 id=\"删除topic\"><a href=\"#删除topic\" class=\"headerlink\" title=\"删除topic\"></a>删除topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在node1节点删除了Topic，三台节点会同步更新，所以我们的<code>kafka_data</code>在三台node上全部删除</p>\n</blockquote>\n<p>注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在zookeeper上执行下面的命令登录</span></span><br><span class=\"line\">$ bin/zkCli.sh -server &lt;zookeeper-host:port&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录后执行下面的操作</span></span><br><span class=\"line\">$ rmr /brokers/topics/&lt;topicname&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"消息相关命令\"><a href=\"#消息相关命令\" class=\"headerlink\" title=\"消息相关命令\"></a>消息相关命令</h1><h2 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\">&gt;Hello Kafka_data</span><br><span class=\"line\">&gt;I<span class=\"string\">'m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">&gt;test</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--broker-list</code>：指定使用哪台broker来生产消息</li>\n<li><code>--topic</code>：指定要往哪个Topic中生产消息</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning </span><br><span class=\"line\"></span><br><span class=\"line\">I<span class=\"string\">'m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">Hello Kafka_data</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"topic相关命令\"><a href=\"#topic相关命令\" class=\"headerlink\" title=\"topic相关命令\"></a>topic相关命令</h1><h2 id=\"创建topic\"><a href=\"#创建topic\" class=\"headerlink\" title=\"创建topic\"></a>创建topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --create --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092 --replication-factor 3 --partitions 3 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>--bootstrap-server</code>：指定要哪台Kafka服务器上创建Topic，主机加端口，指定的主机地址一定要和配置文件中的listeners一致；</li>\n<li><code>--replication-factor</code>：创建Topic中的每个分区(partition)中的复制因子数量，即为Topic的副本数量，建议和Broker节点数量一致，如果复制因子超出Broker节点将无法创建；</li>\n<li><code>--partitions</code>：创建该Topic中的分区(partition)数量；</li>\n<li><code>--topic</code>：指定Topic名称；</li>\n</ul>\n<blockquote>\n<p>如果创建的topic包含”_.”之类的符号会收到警告，但是不会影响创建。</p>\n</blockquote>\n<h2 id=\"查看topic\"><a href=\"#查看topic\" class=\"headerlink\" title=\"查看topic\"></a>查看topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --list --bootstrap-server 172.17.0.2:9092,172.17.0.3:9092,172.17.0.4:9092</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--bootstrap-server</code>：指定查看哪一台kafka上的topic，这里查看所有节点的（也可以查看某一个节点）；</li>\n</ul>\n<h2 id=\"查看topic详情\"><a href=\"#查看topic详情\" class=\"headerlink\" title=\"查看topic详情\"></a>查看topic详情</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --describe --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\"></span><br><span class=\"line\">Topic:kafka_data    PartitionCount:3    ReplicationFactor:3    Configs:segment.bytes=1073741824</span><br><span class=\"line\">    Topic: kafka_data    Partition: 0    Leader: 1    Replicas: 1,2,3    Isr: 1,2,3</span><br><span class=\"line\">    Topic: kafka_data    Partition: 1    Leader: 2    Replicas: 2,3,1    Isr: 2,3,1</span><br><span class=\"line\">    Topic: kafka_data    Partition: 2    Leader: 3    Replicas: 3,1,2    Isr: 3,1,2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Topic:kafka_data</code>：topic名称</li>\n<li><code>PartitionCount:3</code>：分片数量</li>\n<li><code>ReplicationFactor:3</code>：Topic副本数量</li>\n</ul>\n<h2 id=\"删除topic\"><a href=\"#删除topic\" class=\"headerlink\" title=\"删除topic\"></a>删除topic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-topics.sh --delete --bootstrap-server 172.17.0.2:9092 --topic kafka_data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>在node1节点删除了Topic，三台节点会同步更新，所以我们的<code>kafka_data</code>在三台node上全部删除</p>\n</blockquote>\n<p>注意，这个操作只会标记topic为删除状态，想要永久删除，需要登录zookeeper进行删除topic数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在zookeeper上执行下面的命令登录</span></span><br><span class=\"line\">$ bin/zkCli.sh -server &lt;zookeeper-host:port&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录后执行下面的操作</span></span><br><span class=\"line\">$ rmr /brokers/topics/&lt;topicname&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"消息相关命令\"><a href=\"#消息相关命令\" class=\"headerlink\" title=\"消息相关命令\"></a>消息相关命令</h1><h2 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-console-producer.sh --broker-list 172.17.0.2:9092 --topic kafka_data</span><br><span class=\"line\">&gt;Hello Kafka_data</span><br><span class=\"line\">&gt;I<span class=\"string\">'m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">&gt;test</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>--broker-list</code>：指定使用哪台broker来生产消息</li>\n<li><code>--topic</code>：指定要往哪个Topic中生产消息</li>\n</ul>\n<h2 id=\"消费消息\"><a href=\"#消费消息\" class=\"headerlink\" title=\"消费消息\"></a>消费消息</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kafka-console-consumer.sh --bootstrap-server 172.17.0.4:9092 --topic kafka_data --from-beginning </span><br><span class=\"line\"></span><br><span class=\"line\">I<span class=\"string\">'m the 172.17.0.2 Kafka create</span></span><br><span class=\"line\"><span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">Hello Kafka_data</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"迭代器和生成器","date":"2020-08-11T03:02:30.000Z","description":"python中的迭代器和生成器","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597125120623&di=dfb59bbfb4e4acd0b5807f10b40a9a42&imgtype=0&src=http%3A%2F%2Fimage.uczzd.cn%2F1327657598994857882.jpeg%3Fid%3D0%26from%3Dexport","_content":"\n\n\n# 迭代器\n\n迭代器是一个可以记住遍历的位置的对象，是访问集合元素的一种方式。\n\n\n\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退，有两个基本的方法：`iter()`和 `next()`。\n\n> 字符串，列表或元组对象都可用于创建迭代器：\n\n\n\n例如，将一个列表生成为迭代器并访问其中的元素：\n\n```python\n>>> list=[1,2,3,4]\n>>> it = iter(list)    # 创建迭代器对象\n>>> print (next(it))   # 输出迭代器的下一个元素\n1\n>>> print (next(it))\n2\n>>>\n```\n\n\n\n或者使用`for`循环遍历：\n\n```python\nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\nfor x in it:\n    print(x, end=\" \")\n```\n\n\n\n当迭代器遍历结束会抛出`StopIteration`异常：\n\n```python\nimport sys         # 引入 sys 模块\nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\nwhile True:\n    try:\n        print (next(it))\n    except StopIteration:        \n        sys.exit()\n```\n\n\n\n<br>\n\n\n\n# 创建迭代器\n\n把一个类作为一个迭代器使用需要在类中实现两个方法`__iter__()`与`__next__()`。\n\n- `__iter__()`方法返回一个特殊的迭代器对象， 这个迭代器对象实现了`__next__()`方法并通过 `StopIteration` 异常标识迭代的完成；\n- `__next__()`方法会返回下一个迭代器对象；\n\n\n\n例如创建一个返回数字的迭代器，初始值为 1，逐步递增 1，迭代5次停止：\n\n```python\nclass MyNumbers:  \n  def __iter__(self):    \n    self.a = 1\n    return self\n  def __next__(self):    \n    if self.a <= 5:      \n      x = self.a\n      self.a += 1\n      return x\n    else:      \n      raiseStopIteration\nmyclass = MyNumbers()\nmyiter = iter(myclass)\nfor x in myiter:  \n  print(x)\n\n# 输出结果为 1 2 3 4 5\n```\n\n\n\n<br>\n\n\n\n\n\n# 生成器\n\npython中生成器是Generator，它是可以生成值的函数。当一个函数中存在了 **yield** 关键字的时候它就成为了一个生成器函数。生成器函数可以挂起执行并保持当前的执行状态。\n\n\n\n例如下面的函数：\n\n```python\ndef simple_gen():\n  yield 'hello'\n  yield 'world'\n```\n\n\n\n这个函数就是一个生成器函数，这个函数第一次产出 `hello`，第二次产出```world```，函数的使用如下：\n\n```python\n# 创建生成器对象，输出为：<class 'generator'>\ngen = simple_gen()\nprint(type(gen))\n\n# 获取第一个值，输出hello\nprint(next(gen))\n\n# 获取第二个值，输出world\nprint(next(gen))\n```\n\n\n\n生成器是一个返回迭代器的函数，只能用于迭代操作。例如下面生成斐波那锲数列的生成器返回一个斐波那锲数列的迭代器进行迭代：\n\n```python\nimport sys\ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成，输出10位\nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        sys.exit()\n        \n# 输出结果：0 1 1 2 3 5 8 13 21 34 55\n```\n\n\n\n<br>\n\n\n\n\n\n# 基于生成器的协程\n\n生成器可以通过`yield`暂停执行和产出数据，在pep32中，同时支持使用```send()```向生成器发送数据和使用```throw()```向生成器抛出异常。\n\n\n\n例如，首先定义了一个生成器函数：\n\n```python\ndef coro():\n  hello = yield 'hello'   # yield关键字在等号右边作为表达式，可以被send值\n  yield hello\n```\n\n\n\n然后获取生成器的值并send新的值：\n\n```python\n# 创建生成器对象，并获取生成器的值，输出为hello，输出后函数暂停\nc = coro()\nprint(next(c))\n\n# 使用send()向生成器传值，输出为world\nprint(c.send('world'))\n\n# 之后协程结束，再send就会抛出StopIteration异常\n```\n\n\n\n使用协程需要注意的地方：\n\n- 协程需要使用`send(None)`或`next(continue)`来预激(prime)才能启动；\n- 在yield处会暂停；\n- 单独的yield会产出值给调用方；\n\n","source":"_posts/迭代器和生成器.md","raw":"---\ntitle: 迭代器和生成器\ndate: 2020-08-11 11:02:30\ntags: \n- Python\ncategories:\n- Python\ndescription: python中的迭代器和生成器\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597125120623&di=dfb59bbfb4e4acd0b5807f10b40a9a42&imgtype=0&src=http%3A%2F%2Fimage.uczzd.cn%2F1327657598994857882.jpeg%3Fid%3D0%26from%3Dexport\n---\n\n\n\n# 迭代器\n\n迭代器是一个可以记住遍历的位置的对象，是访问集合元素的一种方式。\n\n\n\n迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退，有两个基本的方法：`iter()`和 `next()`。\n\n> 字符串，列表或元组对象都可用于创建迭代器：\n\n\n\n例如，将一个列表生成为迭代器并访问其中的元素：\n\n```python\n>>> list=[1,2,3,4]\n>>> it = iter(list)    # 创建迭代器对象\n>>> print (next(it))   # 输出迭代器的下一个元素\n1\n>>> print (next(it))\n2\n>>>\n```\n\n\n\n或者使用`for`循环遍历：\n\n```python\nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\nfor x in it:\n    print(x, end=\" \")\n```\n\n\n\n当迭代器遍历结束会抛出`StopIteration`异常：\n\n```python\nimport sys         # 引入 sys 模块\nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\nwhile True:\n    try:\n        print (next(it))\n    except StopIteration:        \n        sys.exit()\n```\n\n\n\n<br>\n\n\n\n# 创建迭代器\n\n把一个类作为一个迭代器使用需要在类中实现两个方法`__iter__()`与`__next__()`。\n\n- `__iter__()`方法返回一个特殊的迭代器对象， 这个迭代器对象实现了`__next__()`方法并通过 `StopIteration` 异常标识迭代的完成；\n- `__next__()`方法会返回下一个迭代器对象；\n\n\n\n例如创建一个返回数字的迭代器，初始值为 1，逐步递增 1，迭代5次停止：\n\n```python\nclass MyNumbers:  \n  def __iter__(self):    \n    self.a = 1\n    return self\n  def __next__(self):    \n    if self.a <= 5:      \n      x = self.a\n      self.a += 1\n      return x\n    else:      \n      raiseStopIteration\nmyclass = MyNumbers()\nmyiter = iter(myclass)\nfor x in myiter:  \n  print(x)\n\n# 输出结果为 1 2 3 4 5\n```\n\n\n\n<br>\n\n\n\n\n\n# 生成器\n\npython中生成器是Generator，它是可以生成值的函数。当一个函数中存在了 **yield** 关键字的时候它就成为了一个生成器函数。生成器函数可以挂起执行并保持当前的执行状态。\n\n\n\n例如下面的函数：\n\n```python\ndef simple_gen():\n  yield 'hello'\n  yield 'world'\n```\n\n\n\n这个函数就是一个生成器函数，这个函数第一次产出 `hello`，第二次产出```world```，函数的使用如下：\n\n```python\n# 创建生成器对象，输出为：<class 'generator'>\ngen = simple_gen()\nprint(type(gen))\n\n# 获取第一个值，输出hello\nprint(next(gen))\n\n# 获取第二个值，输出world\nprint(next(gen))\n```\n\n\n\n生成器是一个返回迭代器的函数，只能用于迭代操作。例如下面生成斐波那锲数列的生成器返回一个斐波那锲数列的迭代器进行迭代：\n\n```python\nimport sys\ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成，输出10位\nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        sys.exit()\n        \n# 输出结果：0 1 1 2 3 5 8 13 21 34 55\n```\n\n\n\n<br>\n\n\n\n\n\n# 基于生成器的协程\n\n生成器可以通过`yield`暂停执行和产出数据，在pep32中，同时支持使用```send()```向生成器发送数据和使用```throw()```向生成器抛出异常。\n\n\n\n例如，首先定义了一个生成器函数：\n\n```python\ndef coro():\n  hello = yield 'hello'   # yield关键字在等号右边作为表达式，可以被send值\n  yield hello\n```\n\n\n\n然后获取生成器的值并send新的值：\n\n```python\n# 创建生成器对象，并获取生成器的值，输出为hello，输出后函数暂停\nc = coro()\nprint(next(c))\n\n# 使用send()向生成器传值，输出为world\nprint(c.send('world'))\n\n# 之后协程结束，再send就会抛出StopIteration异常\n```\n\n\n\n使用协程需要注意的地方：\n\n- 协程需要使用`send(None)`或`next(continue)`来预激(prime)才能启动；\n- 在yield处会暂停；\n- 单独的yield会产出值给调用方；\n\n","slug":"迭代器和生成器","published":1,"updated":"2020-08-11T03:18:29.806Z","_id":"ckdpd2lvf0000ann008100d9k","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>迭代器是一个可以记住遍历的位置的对象，是访问集合元素的一种方式。</p>\n<p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退，有两个基本的方法：<code>iter()</code>和 <code>next()</code>。</p>\n<blockquote>\n<p>字符串，列表或元组对象都可用于创建迭代器：</p>\n</blockquote>\n<p>例如，将一个列表生成为迭代器并访问其中的元素：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>it = iter(list)    <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> (next(it))   <span class=\"comment\"># 输出迭代器的下一个元素</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> (next(it))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者使用<code>for</code>循环遍历：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">it = iter(list)    <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> it:</span><br><span class=\"line\">    print(x, end=<span class=\"string\">\" \"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当迭代器遍历结束会抛出<code>StopIteration</code>异常：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys         <span class=\"comment\"># 引入 sys 模块</span></span><br><span class=\"line\">list=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">it = iter(list)    <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (next(it))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:        </span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"创建迭代器\"><a href=\"#创建迭代器\" class=\"headerlink\" title=\"创建迭代器\"></a>创建迭代器</h1><p>把一个类作为一个迭代器使用需要在类中实现两个方法<code>__iter__()</code>与<code>__next__()</code>。</p>\n<ul>\n<li><code>__iter__()</code>方法返回一个特殊的迭代器对象， 这个迭代器对象实现了<code>__next__()</code>方法并通过 <code>StopIteration</code> 异常标识迭代的完成；</li>\n<li><code>__next__()</code>方法会返回下一个迭代器对象；</li>\n</ul>\n<p>例如创建一个返回数字的迭代器，初始值为 1，逐步递增 1，迭代5次停止：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span>  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span>    </span><br><span class=\"line\">    self.a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span>    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">5</span>:      </span><br><span class=\"line\">      x = self.a</span><br><span class=\"line\">      self.a += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:      </span><br><span class=\"line\">      raiseStopIteration</span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = iter(myclass)</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> myiter:  </span><br><span class=\"line\">  print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果为 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n\n\n<h1 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h1><p>python中生成器是Generator，它是可以生成值的函数。当一个函数中存在了 <strong>yield</strong> 关键字的时候它就成为了一个生成器函数。生成器函数可以挂起执行并保持当前的执行状态。</p>\n<p>例如下面的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_gen</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个函数就是一个生成器函数，这个函数第一次产出 <code>hello</code>，第二次产出<code>world</code>，函数的使用如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建生成器对象，输出为：&lt;class 'generator'&gt;</span></span><br><span class=\"line\">gen = simple_gen()</span><br><span class=\"line\">print(type(gen))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第一个值，输出hello</span></span><br><span class=\"line\">print(next(gen))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第二个值，输出world</span></span><br><span class=\"line\">print(next(gen))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>生成器是一个返回迭代器的函数，只能用于迭代操作。例如下面生成斐波那锲数列的生成器返回一个斐波那锲数列的迭代器进行迭代：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span> <span class=\"comment\"># 生成器函数 - 斐波那契</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f 是一个迭代器，由生成器返回生成，输出10位</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (next(f), end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 输出结果：0 1 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n\n\n<h1 id=\"基于生成器的协程\"><a href=\"#基于生成器的协程\" class=\"headerlink\" title=\"基于生成器的协程\"></a>基于生成器的协程</h1><p>生成器可以通过<code>yield</code>暂停执行和产出数据，在pep32中，同时支持使用<code>send()</code>向生成器发送数据和使用<code>throw()</code>向生成器抛出异常。</p>\n<p>例如，首先定义了一个生成器函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coro</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  hello = <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>   <span class=\"comment\"># yield关键字在等号右边作为表达式，可以被send值</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> hello</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后获取生成器的值并send新的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建生成器对象，并获取生成器的值，输出为hello，输出后函数暂停</span></span><br><span class=\"line\">c = coro()</span><br><span class=\"line\">print(next(c))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用send()向生成器传值，输出为world</span></span><br><span class=\"line\">print(c.send(<span class=\"string\">'world'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 之后协程结束，再send就会抛出StopIteration异常</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用协程需要注意的地方：</p>\n<ul>\n<li>协程需要使用<code>send(None)</code>或<code>next(continue)</code>来预激(prime)才能启动；</li>\n<li>在yield处会暂停；</li>\n<li>单独的yield会产出值给调用方；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h1><p>迭代器是一个可以记住遍历的位置的对象，是访问集合元素的一种方式。</p>\n<p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退，有两个基本的方法：<code>iter()</code>和 <code>next()</code>。</p>\n<blockquote>\n<p>字符串，列表或元组对象都可用于创建迭代器：</p>\n</blockquote>\n<p>例如，将一个列表生成为迭代器并访问其中的元素：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>it = iter(list)    <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> (next(it))   <span class=\"comment\"># 输出迭代器的下一个元素</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> (next(it))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>或者使用<code>for</code>循环遍历：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">it = iter(list)    <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> it:</span><br><span class=\"line\">    print(x, end=<span class=\"string\">\" \"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当迭代器遍历结束会抛出<code>StopIteration</code>异常：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys         <span class=\"comment\"># 引入 sys 模块</span></span><br><span class=\"line\">list=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">it = iter(list)    <span class=\"comment\"># 创建迭代器对象</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (next(it))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:        </span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"创建迭代器\"><a href=\"#创建迭代器\" class=\"headerlink\" title=\"创建迭代器\"></a>创建迭代器</h1><p>把一个类作为一个迭代器使用需要在类中实现两个方法<code>__iter__()</code>与<code>__next__()</code>。</p>\n<ul>\n<li><code>__iter__()</code>方法返回一个特殊的迭代器对象， 这个迭代器对象实现了<code>__next__()</code>方法并通过 <code>StopIteration</code> 异常标识迭代的完成；</li>\n<li><code>__next__()</code>方法会返回下一个迭代器对象；</li>\n</ul>\n<p>例如创建一个返回数字的迭代器，初始值为 1，逐步递增 1，迭代5次停止：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyNumbers</span>:</span>  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span>    </span><br><span class=\"line\">    self.a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span>    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.a &lt;= <span class=\"number\">5</span>:      </span><br><span class=\"line\">      x = self.a</span><br><span class=\"line\">      self.a += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:      </span><br><span class=\"line\">      raiseStopIteration</span><br><span class=\"line\">myclass = MyNumbers()</span><br><span class=\"line\">myiter = iter(myclass)</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> myiter:  </span><br><span class=\"line\">  print(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果为 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n\n\n<h1 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h1><p>python中生成器是Generator，它是可以生成值的函数。当一个函数中存在了 <strong>yield</strong> 关键字的时候它就成为了一个生成器函数。生成器函数可以挂起执行并保持当前的执行状态。</p>\n<p>例如下面的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_gen</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个函数就是一个生成器函数，这个函数第一次产出 <code>hello</code>，第二次产出<code>world</code>，函数的使用如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建生成器对象，输出为：&lt;class 'generator'&gt;</span></span><br><span class=\"line\">gen = simple_gen()</span><br><span class=\"line\">print(type(gen))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第一个值，输出hello</span></span><br><span class=\"line\">print(next(gen))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取第二个值，输出world</span></span><br><span class=\"line\">print(next(gen))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>生成器是一个返回迭代器的函数，只能用于迭代操作。例如下面生成斐波那锲数列的生成器返回一个斐波那锲数列的迭代器进行迭代：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n)</span>:</span> <span class=\"comment\"># 生成器函数 - 斐波那契</span></span><br><span class=\"line\">    a, b, counter = <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &gt; n): </span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> a</span><br><span class=\"line\">        a, b = b, a + b</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">f = fibonacci(<span class=\"number\">10</span>) <span class=\"comment\"># f 是一个迭代器，由生成器返回生成，输出10位</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (next(f), end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 输出结果：0 1 1 2 3 5 8 13 21 34 55</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n\n\n<h1 id=\"基于生成器的协程\"><a href=\"#基于生成器的协程\" class=\"headerlink\" title=\"基于生成器的协程\"></a>基于生成器的协程</h1><p>生成器可以通过<code>yield</code>暂停执行和产出数据，在pep32中，同时支持使用<code>send()</code>向生成器发送数据和使用<code>throw()</code>向生成器抛出异常。</p>\n<p>例如，首先定义了一个生成器函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coro</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  hello = <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>   <span class=\"comment\"># yield关键字在等号右边作为表达式，可以被send值</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> hello</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后获取生成器的值并send新的值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建生成器对象，并获取生成器的值，输出为hello，输出后函数暂停</span></span><br><span class=\"line\">c = coro()</span><br><span class=\"line\">print(next(c))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用send()向生成器传值，输出为world</span></span><br><span class=\"line\">print(c.send(<span class=\"string\">'world'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 之后协程结束，再send就会抛出StopIteration异常</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用协程需要注意的地方：</p>\n<ul>\n<li>协程需要使用<code>send(None)</code>或<code>next(continue)</code>来预激(prime)才能启动；</li>\n<li>在yield处会暂停；</li>\n<li>单独的yield会产出值给调用方；</li>\n</ul>\n"},{"title":"Request库的使用","date":"2020-08-18T06:07:24.000Z","description":"pythn request库的使用","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2100224046,747583905&fm=26&gp=0.jpg","_content":"\n\n\npython中的`request`库非常强大，可以很方便的发送http请求给服务端，并且具有非常友好的API。\n\n\n\n------\n\n\n\n# 安装\n\n使用下面的命令安装request：\n\n```bash\n$ pip install request\n```\n\n\n\n\n\n<br>\n\n\n\n# 发送GET请求\n\n```python\nimport request\n\nresponse = requests.get(\"http://www.baidu.com/\")\n```\n\n\n\n同时支持添加header参数：\n\n```python\nimport request\n\nkw = {'wd':'中国'}\n\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"}\n\n# params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()\nresponse = requests.get(\"http://www.baidu.com/s\", params=kw, headers=headers)\n```\n\n\n\n获取响应信息可以使用下面的命令：\n\n```python\n# 查看响应内容，response.text 返回的是Unicode格式的数据\nresponse.text\n\n# 查看响应内容，response.content返回的字节流数据\nresponse.content\n\n# 查看完整url地址\nresponse.url\n\n# 查看响应头部字符编码\nresponse.encoding\n\n# 查看响应码\nresponse.status_code\n```\n\n\n\n<br>\n\n\n\n# 发送POST请求\n\n```python\nimport request\n\nresponse = requests.post(\"http://www.baidu.com/\",data=data)\n```\n\n\n\n传入post数据可以使用如下的格式：\n\n```python\nimport requests\n\nurl = \"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&needAddtionalResult=false&isSchoolJob=0\"\n\nheaders = {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n  'Referer': 'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='\n }\n\n data = {\n     'first': 'true',\n     'pn': 1,\n     'kd': 'python'\n }\n\n resp = requests.post(url,headers=headers,data=data)\n # 如果是json数据，直接可以调用json方法\n print(resp.json())\n```\n\n\n\n<br>\n\n\n\n# 通过代理\n\n使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：\n\n```python\nimport requests\n\nurl = \"http://httpbin.org/get\"\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n}\n\nproxy = {\n    'http': '171.14.209.180:27829'\n}\n\nresp = requests.get(url, headers=headers, proxies=proxy)\nwith open('xx.html','w',encoding='utf-8') as fp:\n    fp.write(resp.text)\n```\n\n\n\n<br>\n\n\n\n# cookie和session\n\n如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"970138074@qq.com\",'password':\"pythonspider\"}\nresp = requests.get('http://www.baidu.com/')\nprint(resp.cookies)\nprint(resp.cookies.get_dict())\n```\n\n\n\n使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"111111111@qq.com\",'password':\"pythonspider\"}\nheaders = {\n    'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\"\n}\n# 登录\nsession = requests.session()\nsession.post(url,data=data,headers=headers)\n\n# 访问个人中心\nresp = session.get('http://www.renren.com/880151247/profile')\n\nprint(resp.text)\n```\n\n\n\n<br>\n\n\n\n# 不受信的证书\n\n对于不受信任的https站点，可以使用如下的方式进行访问：\n\n```python\nimport request\n\nresp = requests.get('http://www.12306.cn/mormhweb/',verify=False)\nprint(resp.content.decode('utf-8'))\n```\n\n\n\n\n\n","source":"_posts/Request库的使用.md","raw":"---\ntitle: Request库的使用\ndate: 2020-08-18 14:07:24\ntags:\n- Python\ncategories:\n- Python\ndescription: pythn request库的使用\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2100224046,747583905&fm=26&gp=0.jpg\n---\n\n\n\npython中的`request`库非常强大，可以很方便的发送http请求给服务端，并且具有非常友好的API。\n\n\n\n------\n\n\n\n# 安装\n\n使用下面的命令安装request：\n\n```bash\n$ pip install request\n```\n\n\n\n\n\n<br>\n\n\n\n# 发送GET请求\n\n```python\nimport request\n\nresponse = requests.get(\"http://www.baidu.com/\")\n```\n\n\n\n同时支持添加header参数：\n\n```python\nimport request\n\nkw = {'wd':'中国'}\n\nheaders = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"}\n\n# params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()\nresponse = requests.get(\"http://www.baidu.com/s\", params=kw, headers=headers)\n```\n\n\n\n获取响应信息可以使用下面的命令：\n\n```python\n# 查看响应内容，response.text 返回的是Unicode格式的数据\nresponse.text\n\n# 查看响应内容，response.content返回的字节流数据\nresponse.content\n\n# 查看完整url地址\nresponse.url\n\n# 查看响应头部字符编码\nresponse.encoding\n\n# 查看响应码\nresponse.status_code\n```\n\n\n\n<br>\n\n\n\n# 发送POST请求\n\n```python\nimport request\n\nresponse = requests.post(\"http://www.baidu.com/\",data=data)\n```\n\n\n\n传入post数据可以使用如下的格式：\n\n```python\nimport requests\n\nurl = \"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&needAddtionalResult=false&isSchoolJob=0\"\n\nheaders = {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n  'Referer': 'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='\n }\n\n data = {\n     'first': 'true',\n     'pn': 1,\n     'kd': 'python'\n }\n\n resp = requests.post(url,headers=headers,data=data)\n # 如果是json数据，直接可以调用json方法\n print(resp.json())\n```\n\n\n\n<br>\n\n\n\n# 通过代理\n\n使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：\n\n```python\nimport requests\n\nurl = \"http://httpbin.org/get\"\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n}\n\nproxy = {\n    'http': '171.14.209.180:27829'\n}\n\nresp = requests.get(url, headers=headers, proxies=proxy)\nwith open('xx.html','w',encoding='utf-8') as fp:\n    fp.write(resp.text)\n```\n\n\n\n<br>\n\n\n\n# cookie和session\n\n如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"970138074@qq.com\",'password':\"pythonspider\"}\nresp = requests.get('http://www.baidu.com/')\nprint(resp.cookies)\nprint(resp.cookies.get_dict())\n```\n\n\n\n使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：\n\n```python\nimport requests\n\nurl = \"http://www.renren.com/PLogin.do\"\ndata = {\"email\":\"111111111@qq.com\",'password':\"pythonspider\"}\nheaders = {\n    'User-Agent': \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\"\n}\n# 登录\nsession = requests.session()\nsession.post(url,data=data,headers=headers)\n\n# 访问个人中心\nresp = session.get('http://www.renren.com/880151247/profile')\n\nprint(resp.text)\n```\n\n\n\n<br>\n\n\n\n# 不受信的证书\n\n对于不受信任的https站点，可以使用如下的方式进行访问：\n\n```python\nimport request\n\nresp = requests.get('http://www.12306.cn/mormhweb/',verify=False)\nprint(resp.content.decode('utf-8'))\n```\n\n\n\n\n\n","slug":"Request库的使用","published":1,"updated":"2020-08-18T06:23:20.082Z","_id":"ckdzjrgyx0000ysn0810v556c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>python中的<code>request</code>库非常强大，可以很方便的发送http请求给服务端，并且具有非常友好的API。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>使用下面的命令安装request：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install request</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"发送GET请求\"><a href=\"#发送GET请求\" class=\"headerlink\" title=\"发送GET请求\"></a>发送GET请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">\"http://www.baidu.com/\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同时支持添加header参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">kw = &#123;<span class=\"string\">'wd'</span>:<span class=\"string\">'中国'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class=\"line\">response = requests.get(<span class=\"string\">\"http://www.baidu.com/s\"</span>, params=kw, headers=headers)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取响应信息可以使用下面的命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class=\"line\">response.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class=\"line\">response.content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看完整url地址</span></span><br><span class=\"line\">response.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应头部字符编码</span></span><br><span class=\"line\">response.encoding</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应码</span></span><br><span class=\"line\">response.status_code</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送POST请求\"><a href=\"#发送POST请求\" class=\"headerlink\" title=\"发送POST请求\"></a>发送POST请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.post(<span class=\"string\">\"http://www.baidu.com/\"</span>,data=data)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>传入post数据可以使用如下的格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Referer'</span>: <span class=\"string\">'https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput='</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> data = &#123;</span><br><span class=\"line\">     <span class=\"string\">'first'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">     <span class=\"string\">'pn'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">     <span class=\"string\">'kd'</span>: <span class=\"string\">'python'</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> resp = requests.post(url,headers=headers,data=data)</span><br><span class=\"line\"> <span class=\"comment\"># 如果是json数据，直接可以调用json方法</span></span><br><span class=\"line\"> print(resp.json())</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"通过代理\"><a href=\"#通过代理\" class=\"headerlink\" title=\"通过代理\"></a>通过代理</h1><p>使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://httpbin.org/get\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = &#123;</span><br><span class=\"line\">    <span class=\"string\">'http'</span>: <span class=\"string\">'171.14.209.180:27829'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(url, headers=headers, proxies=proxy)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'xx.html'</span>,<span class=\"string\">'w'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h1><p>如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://www.renren.com/PLogin.do\"</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">\"email\"</span>:<span class=\"string\">\"970138074@qq.com\"</span>,<span class=\"string\">'password'</span>:<span class=\"string\">\"pythonspider\"</span>&#125;</span><br><span class=\"line\">resp = requests.get(<span class=\"string\">'http://www.baidu.com/'</span>)</span><br><span class=\"line\">print(resp.cookies)</span><br><span class=\"line\">print(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://www.renren.com/PLogin.do\"</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">\"email\"</span>:<span class=\"string\">\"111111111@qq.com\"</span>,<span class=\"string\">'password'</span>:<span class=\"string\">\"pythonspider\"</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.post(url,data=data,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问个人中心</span></span><br><span class=\"line\">resp = session.get(<span class=\"string\">'http://www.renren.com/880151247/profile'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"不受信的证书\"><a href=\"#不受信的证书\" class=\"headerlink\" title=\"不受信的证书\"></a>不受信的证书</h1><p>对于不受信任的https站点，可以使用如下的方式进行访问：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(<span class=\"string\">'http://www.12306.cn/mormhweb/'</span>,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(resp.content.decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>python中的<code>request</code>库非常强大，可以很方便的发送http请求给服务端，并且具有非常友好的API。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>使用下面的命令安装request：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install request</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<br>\n\n\n\n<h1 id=\"发送GET请求\"><a href=\"#发送GET请求\" class=\"headerlink\" title=\"发送GET请求\"></a>发送GET请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(<span class=\"string\">\"http://www.baidu.com/\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>同时支持添加header参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">kw = &#123;<span class=\"string\">'wd'</span>:<span class=\"string\">'中国'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;<span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class=\"line\">response = requests.get(<span class=\"string\">\"http://www.baidu.com/s\"</span>, params=kw, headers=headers)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>获取响应信息可以使用下面的命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class=\"line\">response.text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class=\"line\">response.content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看完整url地址</span></span><br><span class=\"line\">response.url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应头部字符编码</span></span><br><span class=\"line\">response.encoding</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看响应码</span></span><br><span class=\"line\">response.status_code</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送POST请求\"><a href=\"#发送POST请求\" class=\"headerlink\" title=\"发送POST请求\"></a>发送POST请求</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.post(<span class=\"string\">\"http://www.baidu.com/\"</span>,data=data)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>传入post数据可以使用如下的格式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Referer'</span>: <span class=\"string\">'https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput='</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> data = &#123;</span><br><span class=\"line\">     <span class=\"string\">'first'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">     <span class=\"string\">'pn'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">     <span class=\"string\">'kd'</span>: <span class=\"string\">'python'</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> resp = requests.post(url,headers=headers,data=data)</span><br><span class=\"line\"> <span class=\"comment\"># 如果是json数据，直接可以调用json方法</span></span><br><span class=\"line\"> print(resp.json())</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"通过代理\"><a href=\"#通过代理\" class=\"headerlink\" title=\"通过代理\"></a>通过代理</h1><p>使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://httpbin.org/get\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = &#123;</span><br><span class=\"line\">    <span class=\"string\">'http'</span>: <span class=\"string\">'171.14.209.180:27829'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(url, headers=headers, proxies=proxy)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'xx.html'</span>,<span class=\"string\">'w'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h1><p>如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://www.renren.com/PLogin.do\"</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">\"email\"</span>:<span class=\"string\">\"970138074@qq.com\"</span>,<span class=\"string\">'password'</span>:<span class=\"string\">\"pythonspider\"</span>&#125;</span><br><span class=\"line\">resp = requests.get(<span class=\"string\">'http://www.baidu.com/'</span>)</span><br><span class=\"line\">print(resp.cookies)</span><br><span class=\"line\">print(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用requests库给我们提供的session对象可以达到共享cookie的目的。这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://www.renren.com/PLogin.do\"</span></span><br><span class=\"line\">data = &#123;<span class=\"string\">\"email\"</span>:<span class=\"string\">\"111111111@qq.com\"</span>,<span class=\"string\">'password'</span>:<span class=\"string\">\"pythonspider\"</span>&#125;</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\">session.post(url,data=data,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问个人中心</span></span><br><span class=\"line\">resp = session.get(<span class=\"string\">'http://www.renren.com/880151247/profile'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(resp.text)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"不受信的证书\"><a href=\"#不受信的证书\" class=\"headerlink\" title=\"不受信的证书\"></a>不受信的证书</h1><p>对于不受信任的https站点，可以使用如下的方式进行访问：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(<span class=\"string\">'http://www.12306.cn/mormhweb/'</span>,verify=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(resp.content.decode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"部署Jenkins","date":"2020-08-18T06:44:58.000Z","description":"使用docker和rpm两种方式部署jenkins服务","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597743430763&di=05bfdf736602b44a207e43f98c5130d2&imgtype=0&src=http%3A%2F%2Fwww.steptoinstall.com%2Fwp-content%2Fuploads%2F2014%2F10%2FHow-to-uninstall-remove-Jenkins-Application.png","_content":"\n\n\n# Docker方式部署\n\n\n\n## 创建数据目录\n\n```bash\n$ mkdir -p /data/jenkins-data\n```\n\n\n\n> 数据目录最好单独挂载一个磁盘或使用分布式存储\n\n\n\n## 启动jenkins容器\n\n使用下面的命令直接启动jenkins容器：\n\n```bash\n$ docker run -d --rm \\\n    --name jenkins \\\n    -u root \\\n    -p 8080:8080 \\\n    -p 50000:50000 \\\n    -v /data/jenkins-data:/var/jenkins_home \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    jenkinsci/blueocean\n```\n\n\n\n- `-v /data/jenkins-data:/var/jenkins_home`：指定jenkins的数据目录持久化到宿主机的/data/jenkins-data下，这样可以持久化；\n\n- `-v /var/run/docker.sock:/var/run/docker.sock`：允许jenkins和docker进程通信，这样jenkins可以启动docker容器（DinD方式）；\n\n\n\n## 检查运行情况\n\n```bash\n$ docker ps | grep jenkins\n```\n\n\n\n然后检查` /data/jenkis-data/secrets/initialAdminPassword `这个文件，复制其中的内容，这是初始管理员用户的密码：\n\n\n\n```bash\n$ cat /data/jenkins-data/secrets/initialAdminPassword\n```\n\n\n\n## 访问jenkins\n\n直接访问本机的8080端口即可进入jenkins的初始界面，输入上面复制的管理员密码。接着是一些常用插件的安装，这里可以根据需要自行安装。\n\n\n\n<br>\n\n\n\n# RPM方式部署\n\n\n\n## 安装java8\n\njenkins要求java 8以上版本：\n\n```bash\n$ yum install java-1.8.0-openjdk* -y\n$ java -version\n```\n\n\n\n## 关闭防火墙\n\n生产中应该开启防火墙，开启需要的端口即可：\n\n```bash\n$ systemctl stop firewalld\n$ systemctl disable firewalld\n$ systemctl stop iptables\n$ systemctl disbale iptables\n```\n\n\n\n## 安装jenkins\n\n可以在 https://pkg.jenkins.io/redhat-stable/ 找到对应的jenkins rpm包进行下载：\n\n```bash\n$ wget https://pkg.jenkins.io/redhat-stable/jenkins-2.204.1-1.1.noarch.rpm \n$ chmod +x jenkins-2.204.1-1.1.noarch.rpm \n$ rpm -ivh jenkins-2.204.1-1.1.noarch.rpm \n$ systemctl start jenkins \n$ systemctl enable jenkins\n```\n\n\n\n安装jenkins会生成无密码的系统用户jenkins，使用下面命令设置密码：\n\n```bash\n$ passwd jenkins\n```\n\n\n\n安装后默认一些文件和目录如下：\n\n- `/usr/lib/jenkins/jenkins.war`：jenkins执行文件；\n- `/var/log/jenkins/jenkins.log`：日志文件；\n- `/etc/sysconfig/jenkins`：配置文件；\n- `/var/lib/jenkins`：数据目录；\n\n\n\n## 设置配置文件\n\n安装后，jenkins默认配置文件在` /etc/sysconfig/jenkins`，修改这个文件重新设置相关目录：\n\n```bash\nJENKINS_HOME=\"/data/jenkins-data\" JENKINS_PORT=\"8080\"\n```\n\n\n\n这样就将jenkins数据放在新指定的目录下\n\n```bash\n$ mkdir /data/jenkins-data -p \n$ chown -R jenkins:jenkins /data/jenkins-data \n$ systemctl restart jenkins\n```\n\n\n\n## 访问jenkins\n\n启动后，查看 `/data/jenkins-data/secrets/initialAdminPassword `文件的内容，这个是初始密码，使用这个密码登录。\n\n```bash\n$ cat /data/jenkins-data/secrets/initialAdminPassword\n```\n\n\n\n浏览器访问本机的8080端口，输入上边的初始密码，然后安装一些插件，即可进入jenkins。\n\n\n\n\n\n","source":"_posts/部署Jenkins.md","raw":"---\ntitle: 部署Jenkins\ndate: 2020-08-18 14:44:58\ntags:\n- Jenkins\ncategories:\n- CICD\n- Jenkins\ndescription: 使用docker和rpm两种方式部署jenkins服务\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597743430763&di=05bfdf736602b44a207e43f98c5130d2&imgtype=0&src=http%3A%2F%2Fwww.steptoinstall.com%2Fwp-content%2Fuploads%2F2014%2F10%2FHow-to-uninstall-remove-Jenkins-Application.png\n---\n\n\n\n# Docker方式部署\n\n\n\n## 创建数据目录\n\n```bash\n$ mkdir -p /data/jenkins-data\n```\n\n\n\n> 数据目录最好单独挂载一个磁盘或使用分布式存储\n\n\n\n## 启动jenkins容器\n\n使用下面的命令直接启动jenkins容器：\n\n```bash\n$ docker run -d --rm \\\n    --name jenkins \\\n    -u root \\\n    -p 8080:8080 \\\n    -p 50000:50000 \\\n    -v /data/jenkins-data:/var/jenkins_home \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    jenkinsci/blueocean\n```\n\n\n\n- `-v /data/jenkins-data:/var/jenkins_home`：指定jenkins的数据目录持久化到宿主机的/data/jenkins-data下，这样可以持久化；\n\n- `-v /var/run/docker.sock:/var/run/docker.sock`：允许jenkins和docker进程通信，这样jenkins可以启动docker容器（DinD方式）；\n\n\n\n## 检查运行情况\n\n```bash\n$ docker ps | grep jenkins\n```\n\n\n\n然后检查` /data/jenkis-data/secrets/initialAdminPassword `这个文件，复制其中的内容，这是初始管理员用户的密码：\n\n\n\n```bash\n$ cat /data/jenkins-data/secrets/initialAdminPassword\n```\n\n\n\n## 访问jenkins\n\n直接访问本机的8080端口即可进入jenkins的初始界面，输入上面复制的管理员密码。接着是一些常用插件的安装，这里可以根据需要自行安装。\n\n\n\n<br>\n\n\n\n# RPM方式部署\n\n\n\n## 安装java8\n\njenkins要求java 8以上版本：\n\n```bash\n$ yum install java-1.8.0-openjdk* -y\n$ java -version\n```\n\n\n\n## 关闭防火墙\n\n生产中应该开启防火墙，开启需要的端口即可：\n\n```bash\n$ systemctl stop firewalld\n$ systemctl disable firewalld\n$ systemctl stop iptables\n$ systemctl disbale iptables\n```\n\n\n\n## 安装jenkins\n\n可以在 https://pkg.jenkins.io/redhat-stable/ 找到对应的jenkins rpm包进行下载：\n\n```bash\n$ wget https://pkg.jenkins.io/redhat-stable/jenkins-2.204.1-1.1.noarch.rpm \n$ chmod +x jenkins-2.204.1-1.1.noarch.rpm \n$ rpm -ivh jenkins-2.204.1-1.1.noarch.rpm \n$ systemctl start jenkins \n$ systemctl enable jenkins\n```\n\n\n\n安装jenkins会生成无密码的系统用户jenkins，使用下面命令设置密码：\n\n```bash\n$ passwd jenkins\n```\n\n\n\n安装后默认一些文件和目录如下：\n\n- `/usr/lib/jenkins/jenkins.war`：jenkins执行文件；\n- `/var/log/jenkins/jenkins.log`：日志文件；\n- `/etc/sysconfig/jenkins`：配置文件；\n- `/var/lib/jenkins`：数据目录；\n\n\n\n## 设置配置文件\n\n安装后，jenkins默认配置文件在` /etc/sysconfig/jenkins`，修改这个文件重新设置相关目录：\n\n```bash\nJENKINS_HOME=\"/data/jenkins-data\" JENKINS_PORT=\"8080\"\n```\n\n\n\n这样就将jenkins数据放在新指定的目录下\n\n```bash\n$ mkdir /data/jenkins-data -p \n$ chown -R jenkins:jenkins /data/jenkins-data \n$ systemctl restart jenkins\n```\n\n\n\n## 访问jenkins\n\n启动后，查看 `/data/jenkins-data/secrets/initialAdminPassword `文件的内容，这个是初始密码，使用这个密码登录。\n\n```bash\n$ cat /data/jenkins-data/secrets/initialAdminPassword\n```\n\n\n\n浏览器访问本机的8080端口，输入上边的初始密码，然后安装一些插件，即可进入jenkins。\n\n\n\n\n\n","slug":"部署Jenkins","published":1,"updated":"2020-08-18T07:00:37.256Z","_id":"ckdzlj4jm000099n02fce69o1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Docker方式部署\"><a href=\"#Docker方式部署\" class=\"headerlink\" title=\"Docker方式部署\"></a>Docker方式部署</h1><h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /data/jenkins-data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>数据目录最好单独挂载一个磁盘或使用分布式存储</p>\n</blockquote>\n<h2 id=\"启动jenkins容器\"><a href=\"#启动jenkins容器\" class=\"headerlink\" title=\"启动jenkins容器\"></a>启动jenkins容器</h2><p>使用下面的命令直接启动jenkins容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --rm \\</span><br><span class=\"line\">    --name jenkins \\</span><br><span class=\"line\">    -u root \\</span><br><span class=\"line\">    -p 8080:8080 \\</span><br><span class=\"line\">    -p 50000:50000 \\</span><br><span class=\"line\">    -v /data/jenkins-data:/var/jenkins_home \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    jenkinsci/blueocean</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p><code>-v /data/jenkins-data:/var/jenkins_home</code>：指定jenkins的数据目录持久化到宿主机的/data/jenkins-data下，这样可以持久化；</p>\n</li>\n<li><p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>：允许jenkins和docker进程通信，这样jenkins可以启动docker容器（DinD方式）；</p>\n</li>\n</ul>\n<h2 id=\"检查运行情况\"><a href=\"#检查运行情况\" class=\"headerlink\" title=\"检查运行情况\"></a>检查运行情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps | grep jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后检查<code>/data/jenkis-data/secrets/initialAdminPassword</code>这个文件，复制其中的内容，这是初始管理员用户的密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /data/jenkins-data/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问jenkins\"><a href=\"#访问jenkins\" class=\"headerlink\" title=\"访问jenkins\"></a>访问jenkins</h2><p>直接访问本机的8080端口即可进入jenkins的初始界面，输入上面复制的管理员密码。接着是一些常用插件的安装，这里可以根据需要自行安装。</p>\n<br>\n\n\n\n<h1 id=\"RPM方式部署\"><a href=\"#RPM方式部署\" class=\"headerlink\" title=\"RPM方式部署\"></a>RPM方式部署</h1><h2 id=\"安装java8\"><a href=\"#安装java8\" class=\"headerlink\" title=\"安装java8\"></a>安装java8</h2><p>jenkins要求java 8以上版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install java-1.8.0-openjdk* -y</span><br><span class=\"line\">$ java -version</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h2><p>生产中应该开启防火墙，开启需要的端口即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">$ systemctl stop iptables</span><br><span class=\"line\">$ systemctl disbale iptables</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装jenkins\"><a href=\"#安装jenkins\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h2><p>可以在 <a href=\"https://pkg.jenkins.io/redhat-stable/\" target=\"_blank\" rel=\"noopener\">https://pkg.jenkins.io/redhat-stable/</a> 找到对应的jenkins rpm包进行下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://pkg.jenkins.io/redhat-stable/jenkins-2.204.1-1.1.noarch.rpm </span><br><span class=\"line\">$ chmod +x jenkins-2.204.1-1.1.noarch.rpm </span><br><span class=\"line\">$ rpm -ivh jenkins-2.204.1-1.1.noarch.rpm </span><br><span class=\"line\">$ systemctl start jenkins </span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装jenkins会生成无密码的系统用户jenkins，使用下面命令设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ passwd jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装后默认一些文件和目录如下：</p>\n<ul>\n<li><code>/usr/lib/jenkins/jenkins.war</code>：jenkins执行文件；</li>\n<li><code>/var/log/jenkins/jenkins.log</code>：日志文件；</li>\n<li><code>/etc/sysconfig/jenkins</code>：配置文件；</li>\n<li><code>/var/lib/jenkins</code>：数据目录；</li>\n</ul>\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>安装后，jenkins默认配置文件在<code>/etc/sysconfig/jenkins</code>，修改这个文件重新设置相关目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JENKINS_HOME=<span class=\"string\">\"/data/jenkins-data\"</span> JENKINS_PORT=<span class=\"string\">\"8080\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样就将jenkins数据放在新指定的目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/jenkins-data -p </span><br><span class=\"line\">$ chown -R jenkins:jenkins /data/jenkins-data </span><br><span class=\"line\">$ systemctl restart jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问jenkins-1\"><a href=\"#访问jenkins-1\" class=\"headerlink\" title=\"访问jenkins\"></a>访问jenkins</h2><p>启动后，查看 <code>/data/jenkins-data/secrets/initialAdminPassword</code>文件的内容，这个是初始密码，使用这个密码登录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /data/jenkins-data/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n\n\n\n<p>浏览器访问本机的8080端口，输入上边的初始密码，然后安装一些插件，即可进入jenkins。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker方式部署\"><a href=\"#Docker方式部署\" class=\"headerlink\" title=\"Docker方式部署\"></a>Docker方式部署</h1><h2 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p /data/jenkins-data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>数据目录最好单独挂载一个磁盘或使用分布式存储</p>\n</blockquote>\n<h2 id=\"启动jenkins容器\"><a href=\"#启动jenkins容器\" class=\"headerlink\" title=\"启动jenkins容器\"></a>启动jenkins容器</h2><p>使用下面的命令直接启动jenkins容器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d --rm \\</span><br><span class=\"line\">    --name jenkins \\</span><br><span class=\"line\">    -u root \\</span><br><span class=\"line\">    -p 8080:8080 \\</span><br><span class=\"line\">    -p 50000:50000 \\</span><br><span class=\"line\">    -v /data/jenkins-data:/var/jenkins_home \\</span><br><span class=\"line\">    -v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">    jenkinsci/blueocean</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p><code>-v /data/jenkins-data:/var/jenkins_home</code>：指定jenkins的数据目录持久化到宿主机的/data/jenkins-data下，这样可以持久化；</p>\n</li>\n<li><p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>：允许jenkins和docker进程通信，这样jenkins可以启动docker容器（DinD方式）；</p>\n</li>\n</ul>\n<h2 id=\"检查运行情况\"><a href=\"#检查运行情况\" class=\"headerlink\" title=\"检查运行情况\"></a>检查运行情况</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps | grep jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后检查<code>/data/jenkis-data/secrets/initialAdminPassword</code>这个文件，复制其中的内容，这是初始管理员用户的密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /data/jenkins-data/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问jenkins\"><a href=\"#访问jenkins\" class=\"headerlink\" title=\"访问jenkins\"></a>访问jenkins</h2><p>直接访问本机的8080端口即可进入jenkins的初始界面，输入上面复制的管理员密码。接着是一些常用插件的安装，这里可以根据需要自行安装。</p>\n<br>\n\n\n\n<h1 id=\"RPM方式部署\"><a href=\"#RPM方式部署\" class=\"headerlink\" title=\"RPM方式部署\"></a>RPM方式部署</h1><h2 id=\"安装java8\"><a href=\"#安装java8\" class=\"headerlink\" title=\"安装java8\"></a>安装java8</h2><p>jenkins要求java 8以上版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install java-1.8.0-openjdk* -y</span><br><span class=\"line\">$ java -version</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h2><p>生产中应该开启防火墙，开启需要的端口即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld</span><br><span class=\"line\">$ systemctl <span class=\"built_in\">disable</span> firewalld</span><br><span class=\"line\">$ systemctl stop iptables</span><br><span class=\"line\">$ systemctl disbale iptables</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装jenkins\"><a href=\"#安装jenkins\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h2><p>可以在 <a href=\"https://pkg.jenkins.io/redhat-stable/\" target=\"_blank\" rel=\"noopener\">https://pkg.jenkins.io/redhat-stable/</a> 找到对应的jenkins rpm包进行下载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://pkg.jenkins.io/redhat-stable/jenkins-2.204.1-1.1.noarch.rpm </span><br><span class=\"line\">$ chmod +x jenkins-2.204.1-1.1.noarch.rpm </span><br><span class=\"line\">$ rpm -ivh jenkins-2.204.1-1.1.noarch.rpm </span><br><span class=\"line\">$ systemctl start jenkins </span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装jenkins会生成无密码的系统用户jenkins，使用下面命令设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ passwd jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装后默认一些文件和目录如下：</p>\n<ul>\n<li><code>/usr/lib/jenkins/jenkins.war</code>：jenkins执行文件；</li>\n<li><code>/var/log/jenkins/jenkins.log</code>：日志文件；</li>\n<li><code>/etc/sysconfig/jenkins</code>：配置文件；</li>\n<li><code>/var/lib/jenkins</code>：数据目录；</li>\n</ul>\n<h2 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h2><p>安装后，jenkins默认配置文件在<code>/etc/sysconfig/jenkins</code>，修改这个文件重新设置相关目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JENKINS_HOME=<span class=\"string\">\"/data/jenkins-data\"</span> JENKINS_PORT=<span class=\"string\">\"8080\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样就将jenkins数据放在新指定的目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/jenkins-data -p </span><br><span class=\"line\">$ chown -R jenkins:jenkins /data/jenkins-data </span><br><span class=\"line\">$ systemctl restart jenkins</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"访问jenkins-1\"><a href=\"#访问jenkins-1\" class=\"headerlink\" title=\"访问jenkins\"></a>访问jenkins</h2><p>启动后，查看 <code>/data/jenkins-data/secrets/initialAdminPassword</code>文件的内容，这个是初始密码，使用这个密码登录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat /data/jenkins-data/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n\n\n\n<p>浏览器访问本机的8080端口，输入上边的初始密码，然后安装一些插件，即可进入jenkins。</p>\n"},{"title":"ceph介绍","date":"2020-08-18T07:10:01.000Z","description":"介绍分布式存储系统ceph的相关概念","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597744813525&di=afe651fe53e66a2a81099eb90615437f&imgtype=0&src=http%3A%2F%2Fimg.mukewang.com%2F5b82d983000167ce05000376.jpg","_content":"\n\n\n# ceph概述\n\nCeph 提供了对象、块、和文件存储功能，它可靠性高、管理简便、并且是自由软件，足以改变IT 基础架构、和管理海量数据。\n\n\n\nCeph 可提供极大的伸缩性——供成千用户访问 PB 乃至 EB 级的数据。 Ceph 节点以普通硬件和智能守护进程作为支撑点， Ceph 存储集群组织起了大量节点，它们之间靠相互通讯来复制数据、并动态地重分布数据。\n\n\n\nCeph集群至少包含一个Ceph Monitor和两个OSD进程。当使用CephFS的时候必须要有元数据服务器MDS。\n\n\n\nCeph提供了RADOS、OSD、MON、Librados、RBD、RGW和CephFS等组件功能，但底层仍使用RADOS。\n\n\n\n<br>\n\n\n\n# 功能特性\n\nCeph能同时提供对象存储RADOSGW、块存储RBD、文件系统存储CephFS三种功能。\n\n- RADOSGW功能特性基于LIBRADOS之上，提供当前流行的RESTful协议网关，支持s3和swift接口，可对接网盘类似应用及流媒体应用。\n- RBD功能特性基于LIBRADOS之上，通过LIBRBD创建一个块设备，作为传统块设备使用。\n- CephFS功能特性基于RADOS实现分布式文件系统，引入MDS提供元数据存储。一般当做文件系统挂载。\n\n<br>\n\n\n\n# CRUSH算法\n\nCRUSH算法是Ceph的核心。Ceph将客户端数据保存为存储池中的对象。通过使用CRUSH算法计算出哪个PG（归置组）持有指定对象，然后计算出哪个OSD持有该PG。CRUSH算法使得Ceph集群可以动态伸缩、再均衡和修复。\n\n\n\nCRUSH算法是一种基于伪随机控制数据分布、复制的算法。CRUSH只需要一个简洁而层次清楚的设备描述，就可以将数据对象映射到存储设备上。\n\n\n\n<br>\n\n\n\n# 系统架构\n\nceph中大体分为下面三个大的概念：\n\n1. `OSD`：Ceph OSD的作用是存储数据，处理数据的复制、恢复、均衡等。OSD间会发送心跳信息并向Ceph Monitor提供监控信息。集群中至少要有2个OSD来实现active+clean健康状态和有效的保存数据的双副本。每一个分区、Disk都可以成为OSD。\n2. `Monitor`：Ceph Monitor负责监控整个集群的健康状况。维护着集群OSD map、PG map、CRUSH map和MDS map。\n3. `MDS`：Ceph MDS为CephFS存储元数据，只有CephFS需要。基于POSIX文件系统为用户提供基础命令如ls等。\n\n\n\nceph的架构图如下所示：\n\n![](ceph_arch.png)\n\n\n\n- `RADOS`是ceph的底层核心，提供可靠、自动、智能的分布式存储，具有自我修复特性；\n- `LIBRADOS` 是对RADOS的抽象和封装，并向上层提供API，便于基于RADOS进行开发。LIBRADOS实现的API是针对对象存储功能的。支持多种语言；\n- `RADOSGW`基于RESTful的协议网关，兼容s3和Swift；\n- `RBD`通过kernel客户端和QEMU/KVM驱动，提供一个完全分布式的块设备；\n- `CephFS`通过kernel客户端结合FUSE，提供兼容POSIX的文件系统；\n\n\n\n<br>\n\n\n\n# 软件/硬件配置\n\nCeph可以使用普通的硬件设备支持PB级别的数据。规划需要考虑区域失效和潜在的性能问题。推荐在一台机器上运行一种类型的守护进程，并且将使用数据集群的进程（如OpenStack）和Ceph分离。\n\n\n\n## CPU\n\nMDS对CPU有要求，应该使用4核及以上的CPU。OSD至少需要双核的CPU。Monitor对CPU不敏感。\n\n\n\n## 内存\n\nMDS和Monitor至少每个进程需要提供1G内存以保证收到请求时响应速度。OSD在只有在数据恢复的时候需要占据比较多的内存，官方建议每进程每1TB占据1G内存。\n\n\n\n## 磁盘\n\nOSD应该有足够的空间存储对象，建议使用大于1TB的硬盘。\n\n- 不能不顾分区而在单个硬盘上运行多个OSD；\n- 不能不顾分区而在运行了OSD的硬盘上运行Monitor或者MDS；\n- Ceph允许在每个硬盘驱动器上运行多个OSD，但是导致资源竞争并降低总体吞吐量；\n- Ceph允许将日志和对象存储在同一个驱动器上但是会增加记录写日志并返回客户端的延迟。（btrfs在这里有优势）\n\n\n\n考虑成本的话可以使用SSD存储OSD日志，把对象存储在独立硬盘，这样不但可以降低成本还可以提高性能。osd journal 选项的默认值是 `/var/lib/ceph/osd/$cluster-$id/journal` ，你可以把它挂载到一个 SSD 或 SSD 分区，这样它就不再是和对象数据一样存储在同一个硬盘上的文件了。\n\n\n\n可以在一个主机上运行多个OSD，OSD数量较多时会派生大量线程（恢复数据和均衡期间更甚）。可以将内核默认最大线程数调大一点（默认32k）：\n\n```bash\n# 在 /etc/sysctl.conf 中写入 \nkernel.pid_max = 4194303\n```\n\n\n\n## 网络\n\n每个机器最少两个千兆网卡，分别用于公网和集群网络。集群网络用于集群内部通信，处理数据复制产生的网络流量，可以防止DDOS攻击。\n\n\n\n## 内核\n\n内核版本至少在3.10以上，如果使用btrfs文件系统，则推荐使用3.14以上。\n\n\n\n<br>\n\n\n\n# ceph组件及定义\n\n## 对象\n\n对象是Ceph中基本的存储单元。对象由一个数据和一个元数据组成。元数据存储具体数据的关键属性描述信息。\n\n每一个对象在Ceph内拥有一个唯一的对象标识符，以保证对象在集群内的唯一性。对象会随着其元数据的增大而变得非常巨大。\n\n\n\n## CRUSH\n\nCRUSH（Controlled Replication Under Scalable Hashing）被Ceph用来精确计算数据应该被写入哪里及从哪里读取。\n\n\n\nCRUSH按需计算元数据而不是存储元数据，从而解决了传统文件存储系统的瓶颈。元数据的计算过程称之为CRUSH查找，是由客户端使用自己的资源来完成的，消除了中心查找带来的性能问题和单点故障。\n\n\n\n查找时首先从Monitor获取集群map副本，然后从map副本中获取集群配置信息，通过对象、池ID等生成对象，接着通过对象和PG数散列后得到Ceph池中最终存放对象的PG，再由CRUSH算法确定该PG对应的OSD位置，客户端直接和OSD通信完成数据写入和读取。\n\n\n\n## 故障区\n\nCRUSH支持各种基础设施和用户自定义，CRUSH设备列表中与定义了一系列设备，包括：磁盘、节点、机柜、开关、房间、数据中心等。这些组件称为故障区。用户可以通过自己的配置将不同的OSD分配到不同的区域，Ceph在存数据时会根据故障区的结构保证将每份数据在所定义的物理组件间完全隔离。\n\n\n\n\n\n## 恢复和再平衡\n\n故障区的任何组件出现故障，Ceph会将该OSD标记为down和out状态，在等待300秒后（默认情况）进行数据恢复和再平衡，这个值可通过配置文件 `mon osd down out interval` 参数调整。\n\n\n\n## PG\n\n任何数据都以对象的形式保存在PG（归置组）中，每个PG数据都会复制到多个OSD上以保证高可用。PG总数的计算公式为：\n\n```\nPG数 = (OSD数 * 100) / 最大副本数。\n```\n\n\n\n\n\n## PG与OSD关系\n\nCRUSH将确定由PG到OSD的数据映射。将PG ID 作为算法的输入，得到包含多个OSD的集合，将第一个OSD作为主OSD，其他OSD依次作为从OSD。OSD集合的个数由副本个数决定，生产环境一般为3。OSD集合中的所有OSD将共同存储和维护此PG下的Object。\n\n\n\n## Ceph池\n\nCeph池是存储对象的逻辑分区，每个池中包含若干个PG，进而实现将一定的对象映射到集群内不同的OSD中。不能同时以复制方式和纠错码方式创建。默认创建新的pool的时候在pool内存储的数据只会有2个副本。\n\n\n\n## PG与Pool关系\n\nCeph存储支持池的概念，是存储对象的逻辑分区。Ceph Client端从Monitor检索到Cluster Map，写入对象到Pool。Pool的副本数目，Crush规则和PG数目决定了Ceph将数据存储的位置。\n\nPool至少要设置如下的参数：对象的所有权/访问权、PG数目、该Pool使用的CRUSH规则、对象副本数目。\n\n\n\n## Cluster Map\n\nCluster Map记录了所有可用的存储资源及互相之间的空间层次结构。在Ceph中，数据的索引都是通过不同的Map来实现的。Map使得Ceph集群存储设备在物理层上做了一层防护，通过合理设置map可以保证在某一服务器死机的状况下，有其他副本保留在正常节点上。\n\n\n\n<br>\n\n\n\n# RADOS\n\n分步式对象存储系统RADOS是Ceph的技术核心，它支持海量的存储对象。在Ceph中用户数据最终都由这一层的存储实现。Ceph的高可靠性、高性能、高扩展性等特性也由这一层提供。\n\n\n\n## ceph功能模块和RADOS的关系\n\n![](rados.png)\n\n\n\nCeph的逻辑结构大致分为：\n\n- 基础分布式对象存储系统RADOS；\n- 基于RADOS实现的CephFS；\n- 于RADOS的LIBRADOS应用层接口；\n- 基于LIBRADOS实现的RBD、RADOSGW；\n\n\n\n## RADOS架构\n\nRADOS主要由两个部分组成：\n\n- OSD：有数目可变的大规模OSD组成集群，负责将数据以对象的形式存储在磁盘上。一般client会先从Monitor获取cluster map，然后直接与OSD进行I/O操作而不需要Monitor干预；\n- Monitor：少量Monitor主城小规模集群，负责管理RADOS中的关键数据、成员关系、数据分发等；通过选举产生leader。建议Monitor个数为奇数。\n\n\n\n![](rados-arch.png)\n\n\n\n对于Ceph OSD来说，基于配置的副本数，Ceph提供通过分布在对各节点上的副本数来实现数据可靠、自动恢复和平衡。\n\n在OSD中每个对象都有一个主副本和多个从副本。这些副本默认分布在不同节点上。每个OSD都可以作为某些对象的主OSD，也可以作为某些对象的从OSD。从OSD受到主OSD控制。在磁盘故障时，OSD进程将协同其他OSD进程进行数据恢复，这时候从OSD将升级为主OSD，与此同时生成新的副本。\n\n\n\n![](fstype.png)\n\n\n\n如果OSD使用的文件系统为btrfs或者xfs，那么在提交数据到存储器前，Ceph先将数据写入到单独的journal存储区。默认情况下journal常用大小为10G。使用SSD作为journal盘将提高很多的性能。\n\n\n\n![](journal.png)\n\n\n\n\n\n","source":"_posts/ceph介绍.md","raw":"---\ntitle: ceph介绍\ndate: 2020-08-18 15:10:01\ntags:\n- Ceph\ncategories:\n- 存储系统\n- Ceph\ndescription: 介绍分布式存储系统ceph的相关概念\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597744813525&di=afe651fe53e66a2a81099eb90615437f&imgtype=0&src=http%3A%2F%2Fimg.mukewang.com%2F5b82d983000167ce05000376.jpg\n---\n\n\n\n# ceph概述\n\nCeph 提供了对象、块、和文件存储功能，它可靠性高、管理简便、并且是自由软件，足以改变IT 基础架构、和管理海量数据。\n\n\n\nCeph 可提供极大的伸缩性——供成千用户访问 PB 乃至 EB 级的数据。 Ceph 节点以普通硬件和智能守护进程作为支撑点， Ceph 存储集群组织起了大量节点，它们之间靠相互通讯来复制数据、并动态地重分布数据。\n\n\n\nCeph集群至少包含一个Ceph Monitor和两个OSD进程。当使用CephFS的时候必须要有元数据服务器MDS。\n\n\n\nCeph提供了RADOS、OSD、MON、Librados、RBD、RGW和CephFS等组件功能，但底层仍使用RADOS。\n\n\n\n<br>\n\n\n\n# 功能特性\n\nCeph能同时提供对象存储RADOSGW、块存储RBD、文件系统存储CephFS三种功能。\n\n- RADOSGW功能特性基于LIBRADOS之上，提供当前流行的RESTful协议网关，支持s3和swift接口，可对接网盘类似应用及流媒体应用。\n- RBD功能特性基于LIBRADOS之上，通过LIBRBD创建一个块设备，作为传统块设备使用。\n- CephFS功能特性基于RADOS实现分布式文件系统，引入MDS提供元数据存储。一般当做文件系统挂载。\n\n<br>\n\n\n\n# CRUSH算法\n\nCRUSH算法是Ceph的核心。Ceph将客户端数据保存为存储池中的对象。通过使用CRUSH算法计算出哪个PG（归置组）持有指定对象，然后计算出哪个OSD持有该PG。CRUSH算法使得Ceph集群可以动态伸缩、再均衡和修复。\n\n\n\nCRUSH算法是一种基于伪随机控制数据分布、复制的算法。CRUSH只需要一个简洁而层次清楚的设备描述，就可以将数据对象映射到存储设备上。\n\n\n\n<br>\n\n\n\n# 系统架构\n\nceph中大体分为下面三个大的概念：\n\n1. `OSD`：Ceph OSD的作用是存储数据，处理数据的复制、恢复、均衡等。OSD间会发送心跳信息并向Ceph Monitor提供监控信息。集群中至少要有2个OSD来实现active+clean健康状态和有效的保存数据的双副本。每一个分区、Disk都可以成为OSD。\n2. `Monitor`：Ceph Monitor负责监控整个集群的健康状况。维护着集群OSD map、PG map、CRUSH map和MDS map。\n3. `MDS`：Ceph MDS为CephFS存储元数据，只有CephFS需要。基于POSIX文件系统为用户提供基础命令如ls等。\n\n\n\nceph的架构图如下所示：\n\n![](ceph_arch.png)\n\n\n\n- `RADOS`是ceph的底层核心，提供可靠、自动、智能的分布式存储，具有自我修复特性；\n- `LIBRADOS` 是对RADOS的抽象和封装，并向上层提供API，便于基于RADOS进行开发。LIBRADOS实现的API是针对对象存储功能的。支持多种语言；\n- `RADOSGW`基于RESTful的协议网关，兼容s3和Swift；\n- `RBD`通过kernel客户端和QEMU/KVM驱动，提供一个完全分布式的块设备；\n- `CephFS`通过kernel客户端结合FUSE，提供兼容POSIX的文件系统；\n\n\n\n<br>\n\n\n\n# 软件/硬件配置\n\nCeph可以使用普通的硬件设备支持PB级别的数据。规划需要考虑区域失效和潜在的性能问题。推荐在一台机器上运行一种类型的守护进程，并且将使用数据集群的进程（如OpenStack）和Ceph分离。\n\n\n\n## CPU\n\nMDS对CPU有要求，应该使用4核及以上的CPU。OSD至少需要双核的CPU。Monitor对CPU不敏感。\n\n\n\n## 内存\n\nMDS和Monitor至少每个进程需要提供1G内存以保证收到请求时响应速度。OSD在只有在数据恢复的时候需要占据比较多的内存，官方建议每进程每1TB占据1G内存。\n\n\n\n## 磁盘\n\nOSD应该有足够的空间存储对象，建议使用大于1TB的硬盘。\n\n- 不能不顾分区而在单个硬盘上运行多个OSD；\n- 不能不顾分区而在运行了OSD的硬盘上运行Monitor或者MDS；\n- Ceph允许在每个硬盘驱动器上运行多个OSD，但是导致资源竞争并降低总体吞吐量；\n- Ceph允许将日志和对象存储在同一个驱动器上但是会增加记录写日志并返回客户端的延迟。（btrfs在这里有优势）\n\n\n\n考虑成本的话可以使用SSD存储OSD日志，把对象存储在独立硬盘，这样不但可以降低成本还可以提高性能。osd journal 选项的默认值是 `/var/lib/ceph/osd/$cluster-$id/journal` ，你可以把它挂载到一个 SSD 或 SSD 分区，这样它就不再是和对象数据一样存储在同一个硬盘上的文件了。\n\n\n\n可以在一个主机上运行多个OSD，OSD数量较多时会派生大量线程（恢复数据和均衡期间更甚）。可以将内核默认最大线程数调大一点（默认32k）：\n\n```bash\n# 在 /etc/sysctl.conf 中写入 \nkernel.pid_max = 4194303\n```\n\n\n\n## 网络\n\n每个机器最少两个千兆网卡，分别用于公网和集群网络。集群网络用于集群内部通信，处理数据复制产生的网络流量，可以防止DDOS攻击。\n\n\n\n## 内核\n\n内核版本至少在3.10以上，如果使用btrfs文件系统，则推荐使用3.14以上。\n\n\n\n<br>\n\n\n\n# ceph组件及定义\n\n## 对象\n\n对象是Ceph中基本的存储单元。对象由一个数据和一个元数据组成。元数据存储具体数据的关键属性描述信息。\n\n每一个对象在Ceph内拥有一个唯一的对象标识符，以保证对象在集群内的唯一性。对象会随着其元数据的增大而变得非常巨大。\n\n\n\n## CRUSH\n\nCRUSH（Controlled Replication Under Scalable Hashing）被Ceph用来精确计算数据应该被写入哪里及从哪里读取。\n\n\n\nCRUSH按需计算元数据而不是存储元数据，从而解决了传统文件存储系统的瓶颈。元数据的计算过程称之为CRUSH查找，是由客户端使用自己的资源来完成的，消除了中心查找带来的性能问题和单点故障。\n\n\n\n查找时首先从Monitor获取集群map副本，然后从map副本中获取集群配置信息，通过对象、池ID等生成对象，接着通过对象和PG数散列后得到Ceph池中最终存放对象的PG，再由CRUSH算法确定该PG对应的OSD位置，客户端直接和OSD通信完成数据写入和读取。\n\n\n\n## 故障区\n\nCRUSH支持各种基础设施和用户自定义，CRUSH设备列表中与定义了一系列设备，包括：磁盘、节点、机柜、开关、房间、数据中心等。这些组件称为故障区。用户可以通过自己的配置将不同的OSD分配到不同的区域，Ceph在存数据时会根据故障区的结构保证将每份数据在所定义的物理组件间完全隔离。\n\n\n\n\n\n## 恢复和再平衡\n\n故障区的任何组件出现故障，Ceph会将该OSD标记为down和out状态，在等待300秒后（默认情况）进行数据恢复和再平衡，这个值可通过配置文件 `mon osd down out interval` 参数调整。\n\n\n\n## PG\n\n任何数据都以对象的形式保存在PG（归置组）中，每个PG数据都会复制到多个OSD上以保证高可用。PG总数的计算公式为：\n\n```\nPG数 = (OSD数 * 100) / 最大副本数。\n```\n\n\n\n\n\n## PG与OSD关系\n\nCRUSH将确定由PG到OSD的数据映射。将PG ID 作为算法的输入，得到包含多个OSD的集合，将第一个OSD作为主OSD，其他OSD依次作为从OSD。OSD集合的个数由副本个数决定，生产环境一般为3。OSD集合中的所有OSD将共同存储和维护此PG下的Object。\n\n\n\n## Ceph池\n\nCeph池是存储对象的逻辑分区，每个池中包含若干个PG，进而实现将一定的对象映射到集群内不同的OSD中。不能同时以复制方式和纠错码方式创建。默认创建新的pool的时候在pool内存储的数据只会有2个副本。\n\n\n\n## PG与Pool关系\n\nCeph存储支持池的概念，是存储对象的逻辑分区。Ceph Client端从Monitor检索到Cluster Map，写入对象到Pool。Pool的副本数目，Crush规则和PG数目决定了Ceph将数据存储的位置。\n\nPool至少要设置如下的参数：对象的所有权/访问权、PG数目、该Pool使用的CRUSH规则、对象副本数目。\n\n\n\n## Cluster Map\n\nCluster Map记录了所有可用的存储资源及互相之间的空间层次结构。在Ceph中，数据的索引都是通过不同的Map来实现的。Map使得Ceph集群存储设备在物理层上做了一层防护，通过合理设置map可以保证在某一服务器死机的状况下，有其他副本保留在正常节点上。\n\n\n\n<br>\n\n\n\n# RADOS\n\n分步式对象存储系统RADOS是Ceph的技术核心，它支持海量的存储对象。在Ceph中用户数据最终都由这一层的存储实现。Ceph的高可靠性、高性能、高扩展性等特性也由这一层提供。\n\n\n\n## ceph功能模块和RADOS的关系\n\n![](rados.png)\n\n\n\nCeph的逻辑结构大致分为：\n\n- 基础分布式对象存储系统RADOS；\n- 基于RADOS实现的CephFS；\n- 于RADOS的LIBRADOS应用层接口；\n- 基于LIBRADOS实现的RBD、RADOSGW；\n\n\n\n## RADOS架构\n\nRADOS主要由两个部分组成：\n\n- OSD：有数目可变的大规模OSD组成集群，负责将数据以对象的形式存储在磁盘上。一般client会先从Monitor获取cluster map，然后直接与OSD进行I/O操作而不需要Monitor干预；\n- Monitor：少量Monitor主城小规模集群，负责管理RADOS中的关键数据、成员关系、数据分发等；通过选举产生leader。建议Monitor个数为奇数。\n\n\n\n![](rados-arch.png)\n\n\n\n对于Ceph OSD来说，基于配置的副本数，Ceph提供通过分布在对各节点上的副本数来实现数据可靠、自动恢复和平衡。\n\n在OSD中每个对象都有一个主副本和多个从副本。这些副本默认分布在不同节点上。每个OSD都可以作为某些对象的主OSD，也可以作为某些对象的从OSD。从OSD受到主OSD控制。在磁盘故障时，OSD进程将协同其他OSD进程进行数据恢复，这时候从OSD将升级为主OSD，与此同时生成新的副本。\n\n\n\n![](fstype.png)\n\n\n\n如果OSD使用的文件系统为btrfs或者xfs，那么在提交数据到存储器前，Ceph先将数据写入到单独的journal存储区。默认情况下journal常用大小为10G。使用SSD作为journal盘将提高很多的性能。\n\n\n\n![](journal.png)\n\n\n\n\n\n","slug":"ceph介绍","published":1,"updated":"2020-08-18T07:28:12.601Z","_id":"ckdzm5cej0000ejn0cj3zh2s2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"ceph概述\"><a href=\"#ceph概述\" class=\"headerlink\" title=\"ceph概述\"></a>ceph概述</h1><p>Ceph 提供了对象、块、和文件存储功能，它可靠性高、管理简便、并且是自由软件，足以改变IT 基础架构、和管理海量数据。</p>\n<p>Ceph 可提供极大的伸缩性——供成千用户访问 PB 乃至 EB 级的数据。 Ceph 节点以普通硬件和智能守护进程作为支撑点， Ceph 存储集群组织起了大量节点，它们之间靠相互通讯来复制数据、并动态地重分布数据。</p>\n<p>Ceph集群至少包含一个Ceph Monitor和两个OSD进程。当使用CephFS的时候必须要有元数据服务器MDS。</p>\n<p>Ceph提供了RADOS、OSD、MON、Librados、RBD、RGW和CephFS等组件功能，但底层仍使用RADOS。</p>\n<br>\n\n\n\n<h1 id=\"功能特性\"><a href=\"#功能特性\" class=\"headerlink\" title=\"功能特性\"></a>功能特性</h1><p>Ceph能同时提供对象存储RADOSGW、块存储RBD、文件系统存储CephFS三种功能。</p>\n<ul>\n<li>RADOSGW功能特性基于LIBRADOS之上，提供当前流行的RESTful协议网关，支持s3和swift接口，可对接网盘类似应用及流媒体应用。</li>\n<li>RBD功能特性基于LIBRADOS之上，通过LIBRBD创建一个块设备，作为传统块设备使用。</li>\n<li>CephFS功能特性基于RADOS实现分布式文件系统，引入MDS提供元数据存储。一般当做文件系统挂载。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"CRUSH算法\"><a href=\"#CRUSH算法\" class=\"headerlink\" title=\"CRUSH算法\"></a>CRUSH算法</h1><p>CRUSH算法是Ceph的核心。Ceph将客户端数据保存为存储池中的对象。通过使用CRUSH算法计算出哪个PG（归置组）持有指定对象，然后计算出哪个OSD持有该PG。CRUSH算法使得Ceph集群可以动态伸缩、再均衡和修复。</p>\n<p>CRUSH算法是一种基于伪随机控制数据分布、复制的算法。CRUSH只需要一个简洁而层次清楚的设备描述，就可以将数据对象映射到存储设备上。</p>\n<br>\n\n\n\n<h1 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h1><p>ceph中大体分为下面三个大的概念：</p>\n<ol>\n<li><code>OSD</code>：Ceph OSD的作用是存储数据，处理数据的复制、恢复、均衡等。OSD间会发送心跳信息并向Ceph Monitor提供监控信息。集群中至少要有2个OSD来实现active+clean健康状态和有效的保存数据的双副本。每一个分区、Disk都可以成为OSD。</li>\n<li><code>Monitor</code>：Ceph Monitor负责监控整个集群的健康状况。维护着集群OSD map、PG map、CRUSH map和MDS map。</li>\n<li><code>MDS</code>：Ceph MDS为CephFS存储元数据，只有CephFS需要。基于POSIX文件系统为用户提供基础命令如ls等。</li>\n</ol>\n<p>ceph的架构图如下所示：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"ceph_arch.png\" alt=\"\"></p>\n<ul>\n<li><code>RADOS</code>是ceph的底层核心，提供可靠、自动、智能的分布式存储，具有自我修复特性；</li>\n<li><code>LIBRADOS</code> 是对RADOS的抽象和封装，并向上层提供API，便于基于RADOS进行开发。LIBRADOS实现的API是针对对象存储功能的。支持多种语言；</li>\n<li><code>RADOSGW</code>基于RESTful的协议网关，兼容s3和Swift；</li>\n<li><code>RBD</code>通过kernel客户端和QEMU/KVM驱动，提供一个完全分布式的块设备；</li>\n<li><code>CephFS</code>通过kernel客户端结合FUSE，提供兼容POSIX的文件系统；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"软件-硬件配置\"><a href=\"#软件-硬件配置\" class=\"headerlink\" title=\"软件/硬件配置\"></a>软件/硬件配置</h1><p>Ceph可以使用普通的硬件设备支持PB级别的数据。规划需要考虑区域失效和潜在的性能问题。推荐在一台机器上运行一种类型的守护进程，并且将使用数据集群的进程（如OpenStack）和Ceph分离。</p>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><p>MDS对CPU有要求，应该使用4核及以上的CPU。OSD至少需要双核的CPU。Monitor对CPU不敏感。</p>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>MDS和Monitor至少每个进程需要提供1G内存以保证收到请求时响应速度。OSD在只有在数据恢复的时候需要占据比较多的内存，官方建议每进程每1TB占据1G内存。</p>\n<h2 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h2><p>OSD应该有足够的空间存储对象，建议使用大于1TB的硬盘。</p>\n<ul>\n<li>不能不顾分区而在单个硬盘上运行多个OSD；</li>\n<li>不能不顾分区而在运行了OSD的硬盘上运行Monitor或者MDS；</li>\n<li>Ceph允许在每个硬盘驱动器上运行多个OSD，但是导致资源竞争并降低总体吞吐量；</li>\n<li>Ceph允许将日志和对象存储在同一个驱动器上但是会增加记录写日志并返回客户端的延迟。（btrfs在这里有优势）</li>\n</ul>\n<p>考虑成本的话可以使用SSD存储OSD日志，把对象存储在独立硬盘，这样不但可以降低成本还可以提高性能。osd journal 选项的默认值是 <code>/var/lib/ceph/osd/$cluster-$id/journal</code> ，你可以把它挂载到一个 SSD 或 SSD 分区，这样它就不再是和对象数据一样存储在同一个硬盘上的文件了。</p>\n<p>可以在一个主机上运行多个OSD，OSD数量较多时会派生大量线程（恢复数据和均衡期间更甚）。可以将内核默认最大线程数调大一点（默认32k）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 /etc/sysctl.conf 中写入 </span></span><br><span class=\"line\">kernel.pid_max = 4194303</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><p>每个机器最少两个千兆网卡，分别用于公网和集群网络。集群网络用于集群内部通信，处理数据复制产生的网络流量，可以防止DDOS攻击。</p>\n<h2 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h2><p>内核版本至少在3.10以上，如果使用btrfs文件系统，则推荐使用3.14以上。</p>\n<br>\n\n\n\n<h1 id=\"ceph组件及定义\"><a href=\"#ceph组件及定义\" class=\"headerlink\" title=\"ceph组件及定义\"></a>ceph组件及定义</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>对象是Ceph中基本的存储单元。对象由一个数据和一个元数据组成。元数据存储具体数据的关键属性描述信息。</p>\n<p>每一个对象在Ceph内拥有一个唯一的对象标识符，以保证对象在集群内的唯一性。对象会随着其元数据的增大而变得非常巨大。</p>\n<h2 id=\"CRUSH\"><a href=\"#CRUSH\" class=\"headerlink\" title=\"CRUSH\"></a>CRUSH</h2><p>CRUSH（Controlled Replication Under Scalable Hashing）被Ceph用来精确计算数据应该被写入哪里及从哪里读取。</p>\n<p>CRUSH按需计算元数据而不是存储元数据，从而解决了传统文件存储系统的瓶颈。元数据的计算过程称之为CRUSH查找，是由客户端使用自己的资源来完成的，消除了中心查找带来的性能问题和单点故障。</p>\n<p>查找时首先从Monitor获取集群map副本，然后从map副本中获取集群配置信息，通过对象、池ID等生成对象，接着通过对象和PG数散列后得到Ceph池中最终存放对象的PG，再由CRUSH算法确定该PG对应的OSD位置，客户端直接和OSD通信完成数据写入和读取。</p>\n<h2 id=\"故障区\"><a href=\"#故障区\" class=\"headerlink\" title=\"故障区\"></a>故障区</h2><p>CRUSH支持各种基础设施和用户自定义，CRUSH设备列表中与定义了一系列设备，包括：磁盘、节点、机柜、开关、房间、数据中心等。这些组件称为故障区。用户可以通过自己的配置将不同的OSD分配到不同的区域，Ceph在存数据时会根据故障区的结构保证将每份数据在所定义的物理组件间完全隔离。</p>\n<h2 id=\"恢复和再平衡\"><a href=\"#恢复和再平衡\" class=\"headerlink\" title=\"恢复和再平衡\"></a>恢复和再平衡</h2><p>故障区的任何组件出现故障，Ceph会将该OSD标记为down和out状态，在等待300秒后（默认情况）进行数据恢复和再平衡，这个值可通过配置文件 <code>mon osd down out interval</code> 参数调整。</p>\n<h2 id=\"PG\"><a href=\"#PG\" class=\"headerlink\" title=\"PG\"></a>PG</h2><p>任何数据都以对象的形式保存在PG（归置组）中，每个PG数据都会复制到多个OSD上以保证高可用。PG总数的计算公式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PG数 &#x3D; (OSD数 * 100) &#x2F; 最大副本数。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"PG与OSD关系\"><a href=\"#PG与OSD关系\" class=\"headerlink\" title=\"PG与OSD关系\"></a>PG与OSD关系</h2><p>CRUSH将确定由PG到OSD的数据映射。将PG ID 作为算法的输入，得到包含多个OSD的集合，将第一个OSD作为主OSD，其他OSD依次作为从OSD。OSD集合的个数由副本个数决定，生产环境一般为3。OSD集合中的所有OSD将共同存储和维护此PG下的Object。</p>\n<h2 id=\"Ceph池\"><a href=\"#Ceph池\" class=\"headerlink\" title=\"Ceph池\"></a>Ceph池</h2><p>Ceph池是存储对象的逻辑分区，每个池中包含若干个PG，进而实现将一定的对象映射到集群内不同的OSD中。不能同时以复制方式和纠错码方式创建。默认创建新的pool的时候在pool内存储的数据只会有2个副本。</p>\n<h2 id=\"PG与Pool关系\"><a href=\"#PG与Pool关系\" class=\"headerlink\" title=\"PG与Pool关系\"></a>PG与Pool关系</h2><p>Ceph存储支持池的概念，是存储对象的逻辑分区。Ceph Client端从Monitor检索到Cluster Map，写入对象到Pool。Pool的副本数目，Crush规则和PG数目决定了Ceph将数据存储的位置。</p>\n<p>Pool至少要设置如下的参数：对象的所有权/访问权、PG数目、该Pool使用的CRUSH规则、对象副本数目。</p>\n<h2 id=\"Cluster-Map\"><a href=\"#Cluster-Map\" class=\"headerlink\" title=\"Cluster Map\"></a>Cluster Map</h2><p>Cluster Map记录了所有可用的存储资源及互相之间的空间层次结构。在Ceph中，数据的索引都是通过不同的Map来实现的。Map使得Ceph集群存储设备在物理层上做了一层防护，通过合理设置map可以保证在某一服务器死机的状况下，有其他副本保留在正常节点上。</p>\n<br>\n\n\n\n<h1 id=\"RADOS\"><a href=\"#RADOS\" class=\"headerlink\" title=\"RADOS\"></a>RADOS</h1><p>分步式对象存储系统RADOS是Ceph的技术核心，它支持海量的存储对象。在Ceph中用户数据最终都由这一层的存储实现。Ceph的高可靠性、高性能、高扩展性等特性也由这一层提供。</p>\n<h2 id=\"ceph功能模块和RADOS的关系\"><a href=\"#ceph功能模块和RADOS的关系\" class=\"headerlink\" title=\"ceph功能模块和RADOS的关系\"></a>ceph功能模块和RADOS的关系</h2><p><img src= \"/img/loading.gif\" data-src=\"rados.png\" alt=\"\"></p>\n<p>Ceph的逻辑结构大致分为：</p>\n<ul>\n<li>基础分布式对象存储系统RADOS；</li>\n<li>基于RADOS实现的CephFS；</li>\n<li>于RADOS的LIBRADOS应用层接口；</li>\n<li>基于LIBRADOS实现的RBD、RADOSGW；</li>\n</ul>\n<h2 id=\"RADOS架构\"><a href=\"#RADOS架构\" class=\"headerlink\" title=\"RADOS架构\"></a>RADOS架构</h2><p>RADOS主要由两个部分组成：</p>\n<ul>\n<li>OSD：有数目可变的大规模OSD组成集群，负责将数据以对象的形式存储在磁盘上。一般client会先从Monitor获取cluster map，然后直接与OSD进行I/O操作而不需要Monitor干预；</li>\n<li>Monitor：少量Monitor主城小规模集群，负责管理RADOS中的关键数据、成员关系、数据分发等；通过选举产生leader。建议Monitor个数为奇数。</li>\n</ul>\n<p><img src= \"/img/loading.gif\" data-src=\"rados-arch.png\" alt=\"\"></p>\n<p>对于Ceph OSD来说，基于配置的副本数，Ceph提供通过分布在对各节点上的副本数来实现数据可靠、自动恢复和平衡。</p>\n<p>在OSD中每个对象都有一个主副本和多个从副本。这些副本默认分布在不同节点上。每个OSD都可以作为某些对象的主OSD，也可以作为某些对象的从OSD。从OSD受到主OSD控制。在磁盘故障时，OSD进程将协同其他OSD进程进行数据恢复，这时候从OSD将升级为主OSD，与此同时生成新的副本。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"fstype.png\" alt=\"\"></p>\n<p>如果OSD使用的文件系统为btrfs或者xfs，那么在提交数据到存储器前，Ceph先将数据写入到单独的journal存储区。默认情况下journal常用大小为10G。使用SSD作为journal盘将提高很多的性能。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"journal.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ceph概述\"><a href=\"#ceph概述\" class=\"headerlink\" title=\"ceph概述\"></a>ceph概述</h1><p>Ceph 提供了对象、块、和文件存储功能，它可靠性高、管理简便、并且是自由软件，足以改变IT 基础架构、和管理海量数据。</p>\n<p>Ceph 可提供极大的伸缩性——供成千用户访问 PB 乃至 EB 级的数据。 Ceph 节点以普通硬件和智能守护进程作为支撑点， Ceph 存储集群组织起了大量节点，它们之间靠相互通讯来复制数据、并动态地重分布数据。</p>\n<p>Ceph集群至少包含一个Ceph Monitor和两个OSD进程。当使用CephFS的时候必须要有元数据服务器MDS。</p>\n<p>Ceph提供了RADOS、OSD、MON、Librados、RBD、RGW和CephFS等组件功能，但底层仍使用RADOS。</p>\n<br>\n\n\n\n<h1 id=\"功能特性\"><a href=\"#功能特性\" class=\"headerlink\" title=\"功能特性\"></a>功能特性</h1><p>Ceph能同时提供对象存储RADOSGW、块存储RBD、文件系统存储CephFS三种功能。</p>\n<ul>\n<li>RADOSGW功能特性基于LIBRADOS之上，提供当前流行的RESTful协议网关，支持s3和swift接口，可对接网盘类似应用及流媒体应用。</li>\n<li>RBD功能特性基于LIBRADOS之上，通过LIBRBD创建一个块设备，作为传统块设备使用。</li>\n<li>CephFS功能特性基于RADOS实现分布式文件系统，引入MDS提供元数据存储。一般当做文件系统挂载。</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"CRUSH算法\"><a href=\"#CRUSH算法\" class=\"headerlink\" title=\"CRUSH算法\"></a>CRUSH算法</h1><p>CRUSH算法是Ceph的核心。Ceph将客户端数据保存为存储池中的对象。通过使用CRUSH算法计算出哪个PG（归置组）持有指定对象，然后计算出哪个OSD持有该PG。CRUSH算法使得Ceph集群可以动态伸缩、再均衡和修复。</p>\n<p>CRUSH算法是一种基于伪随机控制数据分布、复制的算法。CRUSH只需要一个简洁而层次清楚的设备描述，就可以将数据对象映射到存储设备上。</p>\n<br>\n\n\n\n<h1 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h1><p>ceph中大体分为下面三个大的概念：</p>\n<ol>\n<li><code>OSD</code>：Ceph OSD的作用是存储数据，处理数据的复制、恢复、均衡等。OSD间会发送心跳信息并向Ceph Monitor提供监控信息。集群中至少要有2个OSD来实现active+clean健康状态和有效的保存数据的双副本。每一个分区、Disk都可以成为OSD。</li>\n<li><code>Monitor</code>：Ceph Monitor负责监控整个集群的健康状况。维护着集群OSD map、PG map、CRUSH map和MDS map。</li>\n<li><code>MDS</code>：Ceph MDS为CephFS存储元数据，只有CephFS需要。基于POSIX文件系统为用户提供基础命令如ls等。</li>\n</ol>\n<p>ceph的架构图如下所示：</p>\n<p><img src=\"ceph_arch.png\" alt=\"\"></p>\n<ul>\n<li><code>RADOS</code>是ceph的底层核心，提供可靠、自动、智能的分布式存储，具有自我修复特性；</li>\n<li><code>LIBRADOS</code> 是对RADOS的抽象和封装，并向上层提供API，便于基于RADOS进行开发。LIBRADOS实现的API是针对对象存储功能的。支持多种语言；</li>\n<li><code>RADOSGW</code>基于RESTful的协议网关，兼容s3和Swift；</li>\n<li><code>RBD</code>通过kernel客户端和QEMU/KVM驱动，提供一个完全分布式的块设备；</li>\n<li><code>CephFS</code>通过kernel客户端结合FUSE，提供兼容POSIX的文件系统；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"软件-硬件配置\"><a href=\"#软件-硬件配置\" class=\"headerlink\" title=\"软件/硬件配置\"></a>软件/硬件配置</h1><p>Ceph可以使用普通的硬件设备支持PB级别的数据。规划需要考虑区域失效和潜在的性能问题。推荐在一台机器上运行一种类型的守护进程，并且将使用数据集群的进程（如OpenStack）和Ceph分离。</p>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><p>MDS对CPU有要求，应该使用4核及以上的CPU。OSD至少需要双核的CPU。Monitor对CPU不敏感。</p>\n<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>MDS和Monitor至少每个进程需要提供1G内存以保证收到请求时响应速度。OSD在只有在数据恢复的时候需要占据比较多的内存，官方建议每进程每1TB占据1G内存。</p>\n<h2 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h2><p>OSD应该有足够的空间存储对象，建议使用大于1TB的硬盘。</p>\n<ul>\n<li>不能不顾分区而在单个硬盘上运行多个OSD；</li>\n<li>不能不顾分区而在运行了OSD的硬盘上运行Monitor或者MDS；</li>\n<li>Ceph允许在每个硬盘驱动器上运行多个OSD，但是导致资源竞争并降低总体吞吐量；</li>\n<li>Ceph允许将日志和对象存储在同一个驱动器上但是会增加记录写日志并返回客户端的延迟。（btrfs在这里有优势）</li>\n</ul>\n<p>考虑成本的话可以使用SSD存储OSD日志，把对象存储在独立硬盘，这样不但可以降低成本还可以提高性能。osd journal 选项的默认值是 <code>/var/lib/ceph/osd/$cluster-$id/journal</code> ，你可以把它挂载到一个 SSD 或 SSD 分区，这样它就不再是和对象数据一样存储在同一个硬盘上的文件了。</p>\n<p>可以在一个主机上运行多个OSD，OSD数量较多时会派生大量线程（恢复数据和均衡期间更甚）。可以将内核默认最大线程数调大一点（默认32k）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 /etc/sysctl.conf 中写入 </span></span><br><span class=\"line\">kernel.pid_max = 4194303</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><p>每个机器最少两个千兆网卡，分别用于公网和集群网络。集群网络用于集群内部通信，处理数据复制产生的网络流量，可以防止DDOS攻击。</p>\n<h2 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h2><p>内核版本至少在3.10以上，如果使用btrfs文件系统，则推荐使用3.14以上。</p>\n<br>\n\n\n\n<h1 id=\"ceph组件及定义\"><a href=\"#ceph组件及定义\" class=\"headerlink\" title=\"ceph组件及定义\"></a>ceph组件及定义</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>对象是Ceph中基本的存储单元。对象由一个数据和一个元数据组成。元数据存储具体数据的关键属性描述信息。</p>\n<p>每一个对象在Ceph内拥有一个唯一的对象标识符，以保证对象在集群内的唯一性。对象会随着其元数据的增大而变得非常巨大。</p>\n<h2 id=\"CRUSH\"><a href=\"#CRUSH\" class=\"headerlink\" title=\"CRUSH\"></a>CRUSH</h2><p>CRUSH（Controlled Replication Under Scalable Hashing）被Ceph用来精确计算数据应该被写入哪里及从哪里读取。</p>\n<p>CRUSH按需计算元数据而不是存储元数据，从而解决了传统文件存储系统的瓶颈。元数据的计算过程称之为CRUSH查找，是由客户端使用自己的资源来完成的，消除了中心查找带来的性能问题和单点故障。</p>\n<p>查找时首先从Monitor获取集群map副本，然后从map副本中获取集群配置信息，通过对象、池ID等生成对象，接着通过对象和PG数散列后得到Ceph池中最终存放对象的PG，再由CRUSH算法确定该PG对应的OSD位置，客户端直接和OSD通信完成数据写入和读取。</p>\n<h2 id=\"故障区\"><a href=\"#故障区\" class=\"headerlink\" title=\"故障区\"></a>故障区</h2><p>CRUSH支持各种基础设施和用户自定义，CRUSH设备列表中与定义了一系列设备，包括：磁盘、节点、机柜、开关、房间、数据中心等。这些组件称为故障区。用户可以通过自己的配置将不同的OSD分配到不同的区域，Ceph在存数据时会根据故障区的结构保证将每份数据在所定义的物理组件间完全隔离。</p>\n<h2 id=\"恢复和再平衡\"><a href=\"#恢复和再平衡\" class=\"headerlink\" title=\"恢复和再平衡\"></a>恢复和再平衡</h2><p>故障区的任何组件出现故障，Ceph会将该OSD标记为down和out状态，在等待300秒后（默认情况）进行数据恢复和再平衡，这个值可通过配置文件 <code>mon osd down out interval</code> 参数调整。</p>\n<h2 id=\"PG\"><a href=\"#PG\" class=\"headerlink\" title=\"PG\"></a>PG</h2><p>任何数据都以对象的形式保存在PG（归置组）中，每个PG数据都会复制到多个OSD上以保证高可用。PG总数的计算公式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PG数 &#x3D; (OSD数 * 100) &#x2F; 最大副本数。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"PG与OSD关系\"><a href=\"#PG与OSD关系\" class=\"headerlink\" title=\"PG与OSD关系\"></a>PG与OSD关系</h2><p>CRUSH将确定由PG到OSD的数据映射。将PG ID 作为算法的输入，得到包含多个OSD的集合，将第一个OSD作为主OSD，其他OSD依次作为从OSD。OSD集合的个数由副本个数决定，生产环境一般为3。OSD集合中的所有OSD将共同存储和维护此PG下的Object。</p>\n<h2 id=\"Ceph池\"><a href=\"#Ceph池\" class=\"headerlink\" title=\"Ceph池\"></a>Ceph池</h2><p>Ceph池是存储对象的逻辑分区，每个池中包含若干个PG，进而实现将一定的对象映射到集群内不同的OSD中。不能同时以复制方式和纠错码方式创建。默认创建新的pool的时候在pool内存储的数据只会有2个副本。</p>\n<h2 id=\"PG与Pool关系\"><a href=\"#PG与Pool关系\" class=\"headerlink\" title=\"PG与Pool关系\"></a>PG与Pool关系</h2><p>Ceph存储支持池的概念，是存储对象的逻辑分区。Ceph Client端从Monitor检索到Cluster Map，写入对象到Pool。Pool的副本数目，Crush规则和PG数目决定了Ceph将数据存储的位置。</p>\n<p>Pool至少要设置如下的参数：对象的所有权/访问权、PG数目、该Pool使用的CRUSH规则、对象副本数目。</p>\n<h2 id=\"Cluster-Map\"><a href=\"#Cluster-Map\" class=\"headerlink\" title=\"Cluster Map\"></a>Cluster Map</h2><p>Cluster Map记录了所有可用的存储资源及互相之间的空间层次结构。在Ceph中，数据的索引都是通过不同的Map来实现的。Map使得Ceph集群存储设备在物理层上做了一层防护，通过合理设置map可以保证在某一服务器死机的状况下，有其他副本保留在正常节点上。</p>\n<br>\n\n\n\n<h1 id=\"RADOS\"><a href=\"#RADOS\" class=\"headerlink\" title=\"RADOS\"></a>RADOS</h1><p>分步式对象存储系统RADOS是Ceph的技术核心，它支持海量的存储对象。在Ceph中用户数据最终都由这一层的存储实现。Ceph的高可靠性、高性能、高扩展性等特性也由这一层提供。</p>\n<h2 id=\"ceph功能模块和RADOS的关系\"><a href=\"#ceph功能模块和RADOS的关系\" class=\"headerlink\" title=\"ceph功能模块和RADOS的关系\"></a>ceph功能模块和RADOS的关系</h2><p><img src=\"rados.png\" alt=\"\"></p>\n<p>Ceph的逻辑结构大致分为：</p>\n<ul>\n<li>基础分布式对象存储系统RADOS；</li>\n<li>基于RADOS实现的CephFS；</li>\n<li>于RADOS的LIBRADOS应用层接口；</li>\n<li>基于LIBRADOS实现的RBD、RADOSGW；</li>\n</ul>\n<h2 id=\"RADOS架构\"><a href=\"#RADOS架构\" class=\"headerlink\" title=\"RADOS架构\"></a>RADOS架构</h2><p>RADOS主要由两个部分组成：</p>\n<ul>\n<li>OSD：有数目可变的大规模OSD组成集群，负责将数据以对象的形式存储在磁盘上。一般client会先从Monitor获取cluster map，然后直接与OSD进行I/O操作而不需要Monitor干预；</li>\n<li>Monitor：少量Monitor主城小规模集群，负责管理RADOS中的关键数据、成员关系、数据分发等；通过选举产生leader。建议Monitor个数为奇数。</li>\n</ul>\n<p><img src=\"rados-arch.png\" alt=\"\"></p>\n<p>对于Ceph OSD来说，基于配置的副本数，Ceph提供通过分布在对各节点上的副本数来实现数据可靠、自动恢复和平衡。</p>\n<p>在OSD中每个对象都有一个主副本和多个从副本。这些副本默认分布在不同节点上。每个OSD都可以作为某些对象的主OSD，也可以作为某些对象的从OSD。从OSD受到主OSD控制。在磁盘故障时，OSD进程将协同其他OSD进程进行数据恢复，这时候从OSD将升级为主OSD，与此同时生成新的副本。</p>\n<p><img src=\"fstype.png\" alt=\"\"></p>\n<p>如果OSD使用的文件系统为btrfs或者xfs，那么在提交数据到存储器前，Ceph先将数据写入到单独的journal存储区。默认情况下journal常用大小为10G。使用SSD作为journal盘将提高很多的性能。</p>\n<p><img src=\"journal.png\" alt=\"\"></p>\n"},{"title":"MySQL数据备份和恢复","date":"2020-08-18T07:48:37.000Z","description":"mysql数据备份和恢复的一般方式","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597747062450&di=c7d22dc4a7843068ac49675b4ff3f9f2&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F95%2F28%2F6456f2dd94e9c06.jpg","_content":"\n\n\n\n\n# 数据备份\n\n## mysqldump备份命令\n\n`mysqldump`是mysql提供的数据备份工具，它可以将mysql数据备份为一个文本文件，文件中实际包含了多个`CREATE`和`INSERT`语句，可以重新创建表结构和插入数据。\n\n\n\n`mysqldump`的命令格式为：\n\n```bash\n$ mysqldump -u <user> -h <host> -p<password> dbname [table-name, [table-name, table-name,...]] > filename.sql\n```\n\n- user：用户名；\n- host：mysql服务器名；\n- dbname：要备份的数据库名；\n- table-name：dbname中的某个或多个表；\n- filename.sql：备份内容保存的文件；\n\n\n\n## 备份单个库中所有表\n\n假设备份 booksdb 库中的所有表结构和数据，则可以使用如下的命令：\n\n```bash\n$ mysqldump -uroot -p booksdb > booksdb_bak.sql\n```\n\n\n\n如果只想备份表结构而不备份数据，可以使用 `--opt` 参数：\n\n```bash\n$ mysqldump --opt -uroot -p booksdb > booksdb_bak.sql\n```\n\n\n\n如果只想备份数据而不被分表结构，可以使用 `-t` 参数：\n\n```bash\n$ mysqldump -t -uroot -p booksdb > booksdb_bak.sql\n```\n\n\n\n## 备份数据库中某个表\n\n例如备份 booksdb 中的 books 表，就可以使用如下的命令：\n\n```bash\n$ mysqldump -uroot -p booksdb books > books.sql\n```\n\n\n\n如果只想备份表结构而不备份数据，可以使用 `--opt` 参数：\n\n```bash\n$ mysqldump --opt -uroot -p booksdb books > books.sql\n```\n\n\n\n如果只想备份数据而不被分表结构，可以使用 `-t` 参数：\n\n```bash\n$ mysqldump -t -uroot -p booksdb books > books.sql\n```\n\n\n\n## 备份多个数据库\n\n备份多个数据库的表结构和数据的时候，需要指定 `--databases` 参数，例如备份 booksdb和test两个库：\n\n```bash\n$ mysqldump -uroot -p --databases booksdb test > books_test_bak.sql\n```\n\n\n\n如果使用 `--all-databases`，则可以备份所有的数据库，如：\n\n```bash\n$ mysqldump -uroot -p --all-databases > all_db.sql\n```\n\n\n\n\n\n## 复制数据目录备份\n\nmysql以文件的形式保存数据，所以可以以复制文件的方式备份数据。\n\n\n\n在linux下，mysql的数据目录一般为：`/var/lib/mysql`，注意，在备份前，需要对相关的表执行` LOCK TABLES` 操作，然后执行` FLUSH TABLES` 操作，以保证备份的一致性以及允许备份期间继续读操作。当然也可以停止mysql服务然后再备份。\n\n\n\n>  这种方式在恢复数据时最好恢复到相同版本的mysql中，以防止版本不兼容的问题。对Innodb表不可用。\n\n<br>\n\n\n\n# 数据恢复\n\n## 使用mysql命令恢复\n\nmysql命令可以直接将备份的sql文件执行，格式如下：\n\n```bash\n$ mysql -uroot -p <dbname> < filename.sql\n```\n\n- dbname：如果是恢复mysqldump创建的包含建库语句的sql文件，则不需要指定dbname；\n- filename.sql：待执行的sql备份文件；\n\n\n\n例如：恢复 booksdb 数据库：\n\n```bash\n$ mysql -uroot -p booksdb < booksdb_bak.sql\n```\n\n> 执行前，确保数据库中已经存在 booksdb库。\n\n\n\n如果是登录了数据库，也可以使用source命令来恢复数据：\n\n```sql\nmysql> use booksdb; \nmysql> source /root/booksdb_bak.sql\n```\n\n\n\n\n\n## 直接复制到数据库目录\n\n如果通过复制文件方式备份的数据库，可以复制到mysql数据目录下进行恢复。通过这种方式恢复，请务必确保两者版本一致，**且对于Innodb表不可用。**\n\n> 复制前关闭mysql服务，复制后注意修改文件和目录的权限，通常用户和组都是mysql。\n\n<br>\n\n\n\n\n\n# 数据迁移\n\n## 相同版本mysql数据库迁移\n\n在主版本号相同的mysql间迁移数据，推荐使用`mysqldump`进行迁移，而不可以使用拷贝文件的方式迁移数据。\n\n\n\n例如，将 www.abc.com 上的数据库迁移到 www.def.com 上，可以使用如下命令：\n\n```bash\n# 在 www.abc.com 上执行 \n$ mysqldump -h www.abc.com -uroot -p <password> dbname | mysql -h www.def.com -uroot -p <password>\n```\n\n>  命令使用管道将mysqldump命令直接传递给mysql。如果是迁移所有的库，则可以使用 `--all-databases `参数。\n\n\n\n## 不同版本mysql数据库迁移\n\n不同版本的迁移，需要注意版本使用的字符集是否相同，例如mysql4.x默认使用的是 latin1，而mysql5.x 使用的是 utf8，如果数据库中有中文的话，需要进行字符集修改。\n\n一般新版本会对旧版本有一定兼容性，最好使用`mysqldump`命令进行数据导入和导出。\n\n\n\n","source":"_posts/MySQL数据备份和恢复.md","raw":"---\ntitle: MySQL数据备份和恢复\ndate: 2020-08-18 15:48:37\ntags:\n- MySQL\ncategories:\n- 数据库\n- MySQL\ndescription: mysql数据备份和恢复的一般方式\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597747062450&di=c7d22dc4a7843068ac49675b4ff3f9f2&imgtype=0&src=http%3A%2F%2Fku.90sjimg.com%2Felement_origin_min_pic%2F00%2F95%2F28%2F6456f2dd94e9c06.jpg\n---\n\n\n\n\n\n# 数据备份\n\n## mysqldump备份命令\n\n`mysqldump`是mysql提供的数据备份工具，它可以将mysql数据备份为一个文本文件，文件中实际包含了多个`CREATE`和`INSERT`语句，可以重新创建表结构和插入数据。\n\n\n\n`mysqldump`的命令格式为：\n\n```bash\n$ mysqldump -u <user> -h <host> -p<password> dbname [table-name, [table-name, table-name,...]] > filename.sql\n```\n\n- user：用户名；\n- host：mysql服务器名；\n- dbname：要备份的数据库名；\n- table-name：dbname中的某个或多个表；\n- filename.sql：备份内容保存的文件；\n\n\n\n## 备份单个库中所有表\n\n假设备份 booksdb 库中的所有表结构和数据，则可以使用如下的命令：\n\n```bash\n$ mysqldump -uroot -p booksdb > booksdb_bak.sql\n```\n\n\n\n如果只想备份表结构而不备份数据，可以使用 `--opt` 参数：\n\n```bash\n$ mysqldump --opt -uroot -p booksdb > booksdb_bak.sql\n```\n\n\n\n如果只想备份数据而不被分表结构，可以使用 `-t` 参数：\n\n```bash\n$ mysqldump -t -uroot -p booksdb > booksdb_bak.sql\n```\n\n\n\n## 备份数据库中某个表\n\n例如备份 booksdb 中的 books 表，就可以使用如下的命令：\n\n```bash\n$ mysqldump -uroot -p booksdb books > books.sql\n```\n\n\n\n如果只想备份表结构而不备份数据，可以使用 `--opt` 参数：\n\n```bash\n$ mysqldump --opt -uroot -p booksdb books > books.sql\n```\n\n\n\n如果只想备份数据而不被分表结构，可以使用 `-t` 参数：\n\n```bash\n$ mysqldump -t -uroot -p booksdb books > books.sql\n```\n\n\n\n## 备份多个数据库\n\n备份多个数据库的表结构和数据的时候，需要指定 `--databases` 参数，例如备份 booksdb和test两个库：\n\n```bash\n$ mysqldump -uroot -p --databases booksdb test > books_test_bak.sql\n```\n\n\n\n如果使用 `--all-databases`，则可以备份所有的数据库，如：\n\n```bash\n$ mysqldump -uroot -p --all-databases > all_db.sql\n```\n\n\n\n\n\n## 复制数据目录备份\n\nmysql以文件的形式保存数据，所以可以以复制文件的方式备份数据。\n\n\n\n在linux下，mysql的数据目录一般为：`/var/lib/mysql`，注意，在备份前，需要对相关的表执行` LOCK TABLES` 操作，然后执行` FLUSH TABLES` 操作，以保证备份的一致性以及允许备份期间继续读操作。当然也可以停止mysql服务然后再备份。\n\n\n\n>  这种方式在恢复数据时最好恢复到相同版本的mysql中，以防止版本不兼容的问题。对Innodb表不可用。\n\n<br>\n\n\n\n# 数据恢复\n\n## 使用mysql命令恢复\n\nmysql命令可以直接将备份的sql文件执行，格式如下：\n\n```bash\n$ mysql -uroot -p <dbname> < filename.sql\n```\n\n- dbname：如果是恢复mysqldump创建的包含建库语句的sql文件，则不需要指定dbname；\n- filename.sql：待执行的sql备份文件；\n\n\n\n例如：恢复 booksdb 数据库：\n\n```bash\n$ mysql -uroot -p booksdb < booksdb_bak.sql\n```\n\n> 执行前，确保数据库中已经存在 booksdb库。\n\n\n\n如果是登录了数据库，也可以使用source命令来恢复数据：\n\n```sql\nmysql> use booksdb; \nmysql> source /root/booksdb_bak.sql\n```\n\n\n\n\n\n## 直接复制到数据库目录\n\n如果通过复制文件方式备份的数据库，可以复制到mysql数据目录下进行恢复。通过这种方式恢复，请务必确保两者版本一致，**且对于Innodb表不可用。**\n\n> 复制前关闭mysql服务，复制后注意修改文件和目录的权限，通常用户和组都是mysql。\n\n<br>\n\n\n\n\n\n# 数据迁移\n\n## 相同版本mysql数据库迁移\n\n在主版本号相同的mysql间迁移数据，推荐使用`mysqldump`进行迁移，而不可以使用拷贝文件的方式迁移数据。\n\n\n\n例如，将 www.abc.com 上的数据库迁移到 www.def.com 上，可以使用如下命令：\n\n```bash\n# 在 www.abc.com 上执行 \n$ mysqldump -h www.abc.com -uroot -p <password> dbname | mysql -h www.def.com -uroot -p <password>\n```\n\n>  命令使用管道将mysqldump命令直接传递给mysql。如果是迁移所有的库，则可以使用 `--all-databases `参数。\n\n\n\n## 不同版本mysql数据库迁移\n\n不同版本的迁移，需要注意版本使用的字符集是否相同，例如mysql4.x默认使用的是 latin1，而mysql5.x 使用的是 utf8，如果数据库中有中文的话，需要进行字符集修改。\n\n一般新版本会对旧版本有一定兼容性，最好使用`mysqldump`命令进行数据导入和导出。\n\n\n\n","slug":"MySQL数据备份和恢复","published":1,"updated":"2020-08-18T08:03:56.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdznv31x0000lpn06i1x8pie","content":"<h1 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h1><h2 id=\"mysqldump备份命令\"><a href=\"#mysqldump备份命令\" class=\"headerlink\" title=\"mysqldump备份命令\"></a>mysqldump备份命令</h2><p><code>mysqldump</code>是mysql提供的数据备份工具，它可以将mysql数据备份为一个文本文件，文件中实际包含了多个<code>CREATE</code>和<code>INSERT</code>语句，可以重新创建表结构和插入数据。</p>\n<p><code>mysqldump</code>的命令格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -u &lt;user&gt; -h &lt;host&gt; -p&lt;password&gt; dbname [table-name, [table-name, table-name,...]] &gt; filename.sql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>user：用户名；</li>\n<li>host：mysql服务器名；</li>\n<li>dbname：要备份的数据库名；</li>\n<li>table-name：dbname中的某个或多个表；</li>\n<li>filename.sql：备份内容保存的文件；</li>\n</ul>\n<h2 id=\"备份单个库中所有表\"><a href=\"#备份单个库中所有表\" class=\"headerlink\" title=\"备份单个库中所有表\"></a>备份单个库中所有表</h2><p>假设备份 booksdb 库中的所有表结构和数据，则可以使用如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p booksdb &gt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份表结构而不备份数据，可以使用 <code>--opt</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump --opt -uroot -p booksdb &gt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份数据而不被分表结构，可以使用 <code>-t</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -t -uroot -p booksdb &gt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"备份数据库中某个表\"><a href=\"#备份数据库中某个表\" class=\"headerlink\" title=\"备份数据库中某个表\"></a>备份数据库中某个表</h2><p>例如备份 booksdb 中的 books 表，就可以使用如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p booksdb books &gt; books.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份表结构而不备份数据，可以使用 <code>--opt</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump --opt -uroot -p booksdb books &gt; books.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份数据而不被分表结构，可以使用 <code>-t</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -t -uroot -p booksdb books &gt; books.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"备份多个数据库\"><a href=\"#备份多个数据库\" class=\"headerlink\" title=\"备份多个数据库\"></a>备份多个数据库</h2><p>备份多个数据库的表结构和数据的时候，需要指定 <code>--databases</code> 参数，例如备份 booksdb和test两个库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p --databases booksdb <span class=\"built_in\">test</span> &gt; books_test_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用 <code>--all-databases</code>，则可以备份所有的数据库，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p --all-databases &gt; all_db.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"复制数据目录备份\"><a href=\"#复制数据目录备份\" class=\"headerlink\" title=\"复制数据目录备份\"></a>复制数据目录备份</h2><p>mysql以文件的形式保存数据，所以可以以复制文件的方式备份数据。</p>\n<p>在linux下，mysql的数据目录一般为：<code>/var/lib/mysql</code>，注意，在备份前，需要对相关的表执行<code>LOCK TABLES</code> 操作，然后执行<code>FLUSH TABLES</code> 操作，以保证备份的一致性以及允许备份期间继续读操作。当然也可以停止mysql服务然后再备份。</p>\n<blockquote>\n<p> 这种方式在恢复数据时最好恢复到相同版本的mysql中，以防止版本不兼容的问题。对Innodb表不可用。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"数据恢复\"><a href=\"#数据恢复\" class=\"headerlink\" title=\"数据恢复\"></a>数据恢复</h1><h2 id=\"使用mysql命令恢复\"><a href=\"#使用mysql命令恢复\" class=\"headerlink\" title=\"使用mysql命令恢复\"></a>使用mysql命令恢复</h2><p>mysql命令可以直接将备份的sql文件执行，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -p &lt;dbname&gt; &lt; filename.sql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>dbname：如果是恢复mysqldump创建的包含建库语句的sql文件，则不需要指定dbname；</li>\n<li>filename.sql：待执行的sql备份文件；</li>\n</ul>\n<p>例如：恢复 booksdb 数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -p booksdb &lt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行前，确保数据库中已经存在 booksdb库。</p>\n</blockquote>\n<p>如果是登录了数据库，也可以使用source命令来恢复数据：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use booksdb; </span><br><span class=\"line\">mysql&gt; source /root/booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"直接复制到数据库目录\"><a href=\"#直接复制到数据库目录\" class=\"headerlink\" title=\"直接复制到数据库目录\"></a>直接复制到数据库目录</h2><p>如果通过复制文件方式备份的数据库，可以复制到mysql数据目录下进行恢复。通过这种方式恢复，请务必确保两者版本一致，<strong>且对于Innodb表不可用。</strong></p>\n<blockquote>\n<p>复制前关闭mysql服务，复制后注意修改文件和目录的权限，通常用户和组都是mysql。</p>\n</blockquote>\n<br>\n\n\n\n\n\n<h1 id=\"数据迁移\"><a href=\"#数据迁移\" class=\"headerlink\" title=\"数据迁移\"></a>数据迁移</h1><h2 id=\"相同版本mysql数据库迁移\"><a href=\"#相同版本mysql数据库迁移\" class=\"headerlink\" title=\"相同版本mysql数据库迁移\"></a>相同版本mysql数据库迁移</h2><p>在主版本号相同的mysql间迁移数据，推荐使用<code>mysqldump</code>进行迁移，而不可以使用拷贝文件的方式迁移数据。</p>\n<p>例如，将 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">www.abc.com</a> 上的数据库迁移到 <a href=\"http://www.def.com\" target=\"_blank\" rel=\"noopener\">www.def.com</a> 上，可以使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 www.abc.com 上执行 </span></span><br><span class=\"line\">$ mysqldump -h www.abc.com -uroot -p &lt;password&gt; dbname | mysql -h www.def.com -uroot -p &lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 命令使用管道将mysqldump命令直接传递给mysql。如果是迁移所有的库，则可以使用 <code>--all-databases</code>参数。</p>\n</blockquote>\n<h2 id=\"不同版本mysql数据库迁移\"><a href=\"#不同版本mysql数据库迁移\" class=\"headerlink\" title=\"不同版本mysql数据库迁移\"></a>不同版本mysql数据库迁移</h2><p>不同版本的迁移，需要注意版本使用的字符集是否相同，例如mysql4.x默认使用的是 latin1，而mysql5.x 使用的是 utf8，如果数据库中有中文的话，需要进行字符集修改。</p>\n<p>一般新版本会对旧版本有一定兼容性，最好使用<code>mysqldump</code>命令进行数据导入和导出。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据备份\"><a href=\"#数据备份\" class=\"headerlink\" title=\"数据备份\"></a>数据备份</h1><h2 id=\"mysqldump备份命令\"><a href=\"#mysqldump备份命令\" class=\"headerlink\" title=\"mysqldump备份命令\"></a>mysqldump备份命令</h2><p><code>mysqldump</code>是mysql提供的数据备份工具，它可以将mysql数据备份为一个文本文件，文件中实际包含了多个<code>CREATE</code>和<code>INSERT</code>语句，可以重新创建表结构和插入数据。</p>\n<p><code>mysqldump</code>的命令格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -u &lt;user&gt; -h &lt;host&gt; -p&lt;password&gt; dbname [table-name, [table-name, table-name,...]] &gt; filename.sql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>user：用户名；</li>\n<li>host：mysql服务器名；</li>\n<li>dbname：要备份的数据库名；</li>\n<li>table-name：dbname中的某个或多个表；</li>\n<li>filename.sql：备份内容保存的文件；</li>\n</ul>\n<h2 id=\"备份单个库中所有表\"><a href=\"#备份单个库中所有表\" class=\"headerlink\" title=\"备份单个库中所有表\"></a>备份单个库中所有表</h2><p>假设备份 booksdb 库中的所有表结构和数据，则可以使用如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p booksdb &gt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份表结构而不备份数据，可以使用 <code>--opt</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump --opt -uroot -p booksdb &gt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份数据而不被分表结构，可以使用 <code>-t</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -t -uroot -p booksdb &gt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"备份数据库中某个表\"><a href=\"#备份数据库中某个表\" class=\"headerlink\" title=\"备份数据库中某个表\"></a>备份数据库中某个表</h2><p>例如备份 booksdb 中的 books 表，就可以使用如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p booksdb books &gt; books.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份表结构而不备份数据，可以使用 <code>--opt</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump --opt -uroot -p booksdb books &gt; books.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果只想备份数据而不被分表结构，可以使用 <code>-t</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -t -uroot -p booksdb books &gt; books.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"备份多个数据库\"><a href=\"#备份多个数据库\" class=\"headerlink\" title=\"备份多个数据库\"></a>备份多个数据库</h2><p>备份多个数据库的表结构和数据的时候，需要指定 <code>--databases</code> 参数，例如备份 booksdb和test两个库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p --databases booksdb <span class=\"built_in\">test</span> &gt; books_test_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果使用 <code>--all-databases</code>，则可以备份所有的数据库，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqldump -uroot -p --all-databases &gt; all_db.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"复制数据目录备份\"><a href=\"#复制数据目录备份\" class=\"headerlink\" title=\"复制数据目录备份\"></a>复制数据目录备份</h2><p>mysql以文件的形式保存数据，所以可以以复制文件的方式备份数据。</p>\n<p>在linux下，mysql的数据目录一般为：<code>/var/lib/mysql</code>，注意，在备份前，需要对相关的表执行<code>LOCK TABLES</code> 操作，然后执行<code>FLUSH TABLES</code> 操作，以保证备份的一致性以及允许备份期间继续读操作。当然也可以停止mysql服务然后再备份。</p>\n<blockquote>\n<p> 这种方式在恢复数据时最好恢复到相同版本的mysql中，以防止版本不兼容的问题。对Innodb表不可用。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"数据恢复\"><a href=\"#数据恢复\" class=\"headerlink\" title=\"数据恢复\"></a>数据恢复</h1><h2 id=\"使用mysql命令恢复\"><a href=\"#使用mysql命令恢复\" class=\"headerlink\" title=\"使用mysql命令恢复\"></a>使用mysql命令恢复</h2><p>mysql命令可以直接将备份的sql文件执行，格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -p &lt;dbname&gt; &lt; filename.sql</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>dbname：如果是恢复mysqldump创建的包含建库语句的sql文件，则不需要指定dbname；</li>\n<li>filename.sql：待执行的sql备份文件；</li>\n</ul>\n<p>例如：恢复 booksdb 数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -p booksdb &lt; booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>执行前，确保数据库中已经存在 booksdb库。</p>\n</blockquote>\n<p>如果是登录了数据库，也可以使用source命令来恢复数据：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use booksdb; </span><br><span class=\"line\">mysql&gt; source /root/booksdb_bak.sql</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"直接复制到数据库目录\"><a href=\"#直接复制到数据库目录\" class=\"headerlink\" title=\"直接复制到数据库目录\"></a>直接复制到数据库目录</h2><p>如果通过复制文件方式备份的数据库，可以复制到mysql数据目录下进行恢复。通过这种方式恢复，请务必确保两者版本一致，<strong>且对于Innodb表不可用。</strong></p>\n<blockquote>\n<p>复制前关闭mysql服务，复制后注意修改文件和目录的权限，通常用户和组都是mysql。</p>\n</blockquote>\n<br>\n\n\n\n\n\n<h1 id=\"数据迁移\"><a href=\"#数据迁移\" class=\"headerlink\" title=\"数据迁移\"></a>数据迁移</h1><h2 id=\"相同版本mysql数据库迁移\"><a href=\"#相同版本mysql数据库迁移\" class=\"headerlink\" title=\"相同版本mysql数据库迁移\"></a>相同版本mysql数据库迁移</h2><p>在主版本号相同的mysql间迁移数据，推荐使用<code>mysqldump</code>进行迁移，而不可以使用拷贝文件的方式迁移数据。</p>\n<p>例如，将 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">www.abc.com</a> 上的数据库迁移到 <a href=\"http://www.def.com\" target=\"_blank\" rel=\"noopener\">www.def.com</a> 上，可以使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在 www.abc.com 上执行 </span></span><br><span class=\"line\">$ mysqldump -h www.abc.com -uroot -p &lt;password&gt; dbname | mysql -h www.def.com -uroot -p &lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 命令使用管道将mysqldump命令直接传递给mysql。如果是迁移所有的库，则可以使用 <code>--all-databases</code>参数。</p>\n</blockquote>\n<h2 id=\"不同版本mysql数据库迁移\"><a href=\"#不同版本mysql数据库迁移\" class=\"headerlink\" title=\"不同版本mysql数据库迁移\"></a>不同版本mysql数据库迁移</h2><p>不同版本的迁移，需要注意版本使用的字符集是否相同，例如mysql4.x默认使用的是 latin1，而mysql5.x 使用的是 utf8，如果数据库中有中文的话，需要进行字符集修改。</p>\n<p>一般新版本会对旧版本有一定兼容性，最好使用<code>mysqldump</code>命令进行数据导入和导出。</p>\n"},{"title":"MySQL日志","date":"2020-08-18T08:17:20.000Z","description":"MySQL中的一些常见日志","cover":"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2049101755,2221976873&fm=26&gp=0.jpg","_content":"\n\n\nmysql日志记录了用户日常操作和错误信息，从日志中可以查询到mysql的运行情况。mysql日志主要分为4类：\n\n- 错误日志：记录mysql启动、运行、停止中出现的问题；\n- 查询日志：记录客户端建立的连接和执行的语句；\n- 二进制日志：记录所有更改数据的语句，可用于数据复制；\n- 慢查询日志：记录所有执行时间超过 long_query _time 的查询或不使用索引的查询；\n\n\n\n------\n\n\n\n\n\n# 二进制日志\n\n## 什么是二进制日志\n\n二进制日志主要记录mysql中数据库的变化，其中包含所有更新了数据以及潜在更新了数据（例如未匹配到任何行的 DELETE）的语句。\n\n>  使用二进制日志的最大目的是恢复数据库。\n\n\n\n## 启动和设置二进制日志\n\n默认情况下，二进制日志是关闭的，可以通过修改mysql配置文件 `my.cnf` 来启动和设置二进制日志，例如\n\n```bash\nlog-bin \nexpire_logs_days = 10 \nmax_binlog_size = 100M \nserver_id=1\n```\n\n- `log-bin`：表示开启二进制日志，后面也可以指定日志文件名称，例如：`log-bin=/data/binlog/binlog.log` 表示将二进制日志放在 `/data/binlog`下取名为 `binlog.log`；\n- `expire_logs_days`：清理过期日志的时间，默认为0，表示不删除；\n- `max_binlog_size`：binlog文件最大大小，默认1G，如果超过当前指定的大小，日志会滚动；\n- `server_id`：为mysql提供一个独立的ID，用于使用binlog做主从备份；\n\n\n\n设置好上边的参数，重启即可。重启后登录mysql，使用如下命令检查是否成功开启：\n\n```mysql\nmysql> show variables like 'log_bin'; \n+---------------+-------+ \n| Variable_name | Value | \n+---------------+-------+ \n| log_bin       | ON    | \n+---------------+-------+\n```\n\n>  看到log_bin 已经开启。\n\n\n\n## 查看二进制日志\n\n二进制日志中，有两种日志：\n\n- `xxx.index`：保存所有的日志文件名清单；\n- `xxx.数字`：实际日志数据文件；\n\nmysql服务器每重新启动一次，`xxx.数字` 格式的日志文件就会增加一个。在mysql中，通过下面命令就可以查看当前所有的binlog以及大小：\n\n```mysql\nmysql> show binary logs; \n+---------------+-----------+ \n| Log_name      | File_size | \n+---------------+-----------+ \n| binlog.000001 |       177 | \n| binlog.000002 |       177 | \n| binlog.000003 |       154 | \n+---------------+-----------+\n```\n\n\n\n二进制日志不能直接查看，需要使用专门的指令查看：\n\n```bash\n$ mysqlbinlog /data/binlog/binlog.000001\n```\n\n\n\n\n\n## 删除二进制日志\n\n### 删除所有二进制日志\n\n使用 RESET MASTER 指令可以删除所有的二进制日志并重新创建，编号从000001开始\n\n```mysql\nmysql> reset master; \nQuery OK, 0 rows affected (0.02 sec) \nmysql> show binary logs; \n+---------------+-----------+ \n| Log_name      | File_size | \n+---------------+-----------+ \n| binlog.000001 |       154 | \n+---------------+-----------+\n```\n\n\n\n\n\n### 删除指定的日志\n\n使用 `PURGE MASTER LOG` 指令可以删除指定的日志，其格式如下：\n\n```bash\n# 方式1：指定文件名，删除文件名编号比指定文件名编号小的所有日志 \nPURGE {MASTER | BINARY}  LOGS TO 'log_name' \n\n# 方式2：指定日期，删除指定日期前的日志 \nPURGE {MASTER | BINARY} LOGS BEFORE 'date'\n```\n\n\n\n例如：\n\n```mysql\n# 删除 binlog.00003之前的日志 \nmysql> purge master logs to 'binlog.00003'; \n\n# 删除2018年1月30号之前的日志 \nmysql> purge master logs before '20180130';\n```\n\n\n\n\n\n## 使用二进制日志恢复数据库\n\n当数据库丢失数据时，可以使用 `mysqlbinlog` 命令恢复数据，其格式如下：\n\n```bash\n$ mysqlbinlog [options] filename | mysql -u<user> -p<password>\n```\n\n- options：一系列可选参数；\n\n- - --start-data：开始时间；\n  - --stop-data：结束时间；\n  - --start-position：开始位置；\n  - --stop-position：结束位置；\n\n- filename：日志名；\n\n\n\n例如：\n\n```bash\n# 恢复到 2018年1月30日 15：27：38 \n$ mysqlbinlog --stop-date=\"2018-01-30 15:27:38\" binlog.00008 | mysql -uroot -proot123\n```\n\n\n\n\n\n## 停止binlog\n\n如果想永久停止binlog，需要修改配置文件关闭binlog功能，并重启mysql。\n\n如果是想暂停binlog，可以通过 `SET  sql_log_bin` 来设置mysql变量的方式暂停：\n\n```mysql\n# 暂停binlog功能 \nmysql> set sql_log_bin 0; \n\n# 恢复binlog功能 \nmysql> set sql_log_bin 1;\n```\n\n\n\n<br>\n\n\n\n# 错误日志\n\n## 启动和设置错误日志\n\n可以在mysql配置文件 `my.cnf `中配置错误日志的位置：\n\n```bash\nlog-error=/var/log/mysqld.log\n```\n\n\n\n这样的话错误日志就会记录到 `/var/log/mysql.log` 下了。\n\n\n\n也可以在mysql中查看设置的错误日志信息：\n\n```mysql\nmysql> show variables like 'log_error'; \n+---------------+---------------------+ \n| Variable_name | Value               | \n+---------------+---------------------+ \n| log_error     | /var/log/mysqld.log | \n+---------------+---------------------+\n```\n\n\n\n\n\n## 删除错误日志\n\n错误日志可以直接删除，不会影响运行。在运行状态下删除错误日志后，mysql并不会重新创建日志。所以如果在删除错误日志后，如果需要重新创建，可以执行下面的命令：\n\n```bash\n$ mysqladmin -uroot -p flush-logs\n```\n\n<br>\n\n\n\n\n\n# 通用查询日志\n\n## 设置和启动通用查询日志\n\n默认情况下，没有开启查询日志，通过修改 `my.cnf `文件来开启查询日志：\n\n```bash\ngeneral_log=1 \ngeneral_log_file=/data/querylog/mysql-query.log\n```\n\n\n\n第一个参数表示将通用查询日志开启，第二个参数指定通用查询日志的位置。修改后重启mysql生效。\n\n\n\n## 查看通用查询日志\n\n这是一个文本文件，直接打开查看即可，里边记录了所有的执行指令和请求。\n\n> 一般不打开这个日志，因为会导致文件太大；在调试排查问题的时候可以打开。\n\n\n\n## 删除通用查询日志\n\n该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：\n\n```bash\n$ mysqladmin -uroot -p flush-logs\n```\n\n<br>\n\n\n\n# 慢查询日志\n\n## 启动和设置慢查询日志\n\n通过修改配置文件，增加如下配置来开启慢查询日志：\n\n```bash\nslow_query_log=1 \nslow_query_log_file=/data/slowlog/mysql-slow.log \nlog_queries_not_using_indexes=on \nlong_query_time=1\n```\n\n- `slow_query_log`：开启慢查询日志；\n- `slow_query_log_file`：慢查询日志位置；\n- `log_queries_not_using_indexes` ：是否记录没有使用索引的查询；\n- `long_query_time`：超过这个时间的查询都定义为慢查询，单位秒，默认10秒；\n\n\n\n## 查看慢查询日志\n\n慢查询日志也是文本文件，直接打开查询即可。借助慢查询日志，可以对查询语句进行优化。\n\n\n\n## 删除慢查询日志\n\n该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：\n\n```bash\n$ mysqladmin -uroot -p flush-logs\n```\n\n\n\n","source":"_posts/MySQL日志.md","raw":"---\ntitle: MySQL日志\ndate: 2020-08-18 16:17:20\ntags:\n- MySQL\ncategories:\n- 数据库\n- MySQL\ndescription: MySQL中的一些常见日志\ncover: https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2049101755,2221976873&fm=26&gp=0.jpg\n---\n\n\n\nmysql日志记录了用户日常操作和错误信息，从日志中可以查询到mysql的运行情况。mysql日志主要分为4类：\n\n- 错误日志：记录mysql启动、运行、停止中出现的问题；\n- 查询日志：记录客户端建立的连接和执行的语句；\n- 二进制日志：记录所有更改数据的语句，可用于数据复制；\n- 慢查询日志：记录所有执行时间超过 long_query _time 的查询或不使用索引的查询；\n\n\n\n------\n\n\n\n\n\n# 二进制日志\n\n## 什么是二进制日志\n\n二进制日志主要记录mysql中数据库的变化，其中包含所有更新了数据以及潜在更新了数据（例如未匹配到任何行的 DELETE）的语句。\n\n>  使用二进制日志的最大目的是恢复数据库。\n\n\n\n## 启动和设置二进制日志\n\n默认情况下，二进制日志是关闭的，可以通过修改mysql配置文件 `my.cnf` 来启动和设置二进制日志，例如\n\n```bash\nlog-bin \nexpire_logs_days = 10 \nmax_binlog_size = 100M \nserver_id=1\n```\n\n- `log-bin`：表示开启二进制日志，后面也可以指定日志文件名称，例如：`log-bin=/data/binlog/binlog.log` 表示将二进制日志放在 `/data/binlog`下取名为 `binlog.log`；\n- `expire_logs_days`：清理过期日志的时间，默认为0，表示不删除；\n- `max_binlog_size`：binlog文件最大大小，默认1G，如果超过当前指定的大小，日志会滚动；\n- `server_id`：为mysql提供一个独立的ID，用于使用binlog做主从备份；\n\n\n\n设置好上边的参数，重启即可。重启后登录mysql，使用如下命令检查是否成功开启：\n\n```mysql\nmysql> show variables like 'log_bin'; \n+---------------+-------+ \n| Variable_name | Value | \n+---------------+-------+ \n| log_bin       | ON    | \n+---------------+-------+\n```\n\n>  看到log_bin 已经开启。\n\n\n\n## 查看二进制日志\n\n二进制日志中，有两种日志：\n\n- `xxx.index`：保存所有的日志文件名清单；\n- `xxx.数字`：实际日志数据文件；\n\nmysql服务器每重新启动一次，`xxx.数字` 格式的日志文件就会增加一个。在mysql中，通过下面命令就可以查看当前所有的binlog以及大小：\n\n```mysql\nmysql> show binary logs; \n+---------------+-----------+ \n| Log_name      | File_size | \n+---------------+-----------+ \n| binlog.000001 |       177 | \n| binlog.000002 |       177 | \n| binlog.000003 |       154 | \n+---------------+-----------+\n```\n\n\n\n二进制日志不能直接查看，需要使用专门的指令查看：\n\n```bash\n$ mysqlbinlog /data/binlog/binlog.000001\n```\n\n\n\n\n\n## 删除二进制日志\n\n### 删除所有二进制日志\n\n使用 RESET MASTER 指令可以删除所有的二进制日志并重新创建，编号从000001开始\n\n```mysql\nmysql> reset master; \nQuery OK, 0 rows affected (0.02 sec) \nmysql> show binary logs; \n+---------------+-----------+ \n| Log_name      | File_size | \n+---------------+-----------+ \n| binlog.000001 |       154 | \n+---------------+-----------+\n```\n\n\n\n\n\n### 删除指定的日志\n\n使用 `PURGE MASTER LOG` 指令可以删除指定的日志，其格式如下：\n\n```bash\n# 方式1：指定文件名，删除文件名编号比指定文件名编号小的所有日志 \nPURGE {MASTER | BINARY}  LOGS TO 'log_name' \n\n# 方式2：指定日期，删除指定日期前的日志 \nPURGE {MASTER | BINARY} LOGS BEFORE 'date'\n```\n\n\n\n例如：\n\n```mysql\n# 删除 binlog.00003之前的日志 \nmysql> purge master logs to 'binlog.00003'; \n\n# 删除2018年1月30号之前的日志 \nmysql> purge master logs before '20180130';\n```\n\n\n\n\n\n## 使用二进制日志恢复数据库\n\n当数据库丢失数据时，可以使用 `mysqlbinlog` 命令恢复数据，其格式如下：\n\n```bash\n$ mysqlbinlog [options] filename | mysql -u<user> -p<password>\n```\n\n- options：一系列可选参数；\n\n- - --start-data：开始时间；\n  - --stop-data：结束时间；\n  - --start-position：开始位置；\n  - --stop-position：结束位置；\n\n- filename：日志名；\n\n\n\n例如：\n\n```bash\n# 恢复到 2018年1月30日 15：27：38 \n$ mysqlbinlog --stop-date=\"2018-01-30 15:27:38\" binlog.00008 | mysql -uroot -proot123\n```\n\n\n\n\n\n## 停止binlog\n\n如果想永久停止binlog，需要修改配置文件关闭binlog功能，并重启mysql。\n\n如果是想暂停binlog，可以通过 `SET  sql_log_bin` 来设置mysql变量的方式暂停：\n\n```mysql\n# 暂停binlog功能 \nmysql> set sql_log_bin 0; \n\n# 恢复binlog功能 \nmysql> set sql_log_bin 1;\n```\n\n\n\n<br>\n\n\n\n# 错误日志\n\n## 启动和设置错误日志\n\n可以在mysql配置文件 `my.cnf `中配置错误日志的位置：\n\n```bash\nlog-error=/var/log/mysqld.log\n```\n\n\n\n这样的话错误日志就会记录到 `/var/log/mysql.log` 下了。\n\n\n\n也可以在mysql中查看设置的错误日志信息：\n\n```mysql\nmysql> show variables like 'log_error'; \n+---------------+---------------------+ \n| Variable_name | Value               | \n+---------------+---------------------+ \n| log_error     | /var/log/mysqld.log | \n+---------------+---------------------+\n```\n\n\n\n\n\n## 删除错误日志\n\n错误日志可以直接删除，不会影响运行。在运行状态下删除错误日志后，mysql并不会重新创建日志。所以如果在删除错误日志后，如果需要重新创建，可以执行下面的命令：\n\n```bash\n$ mysqladmin -uroot -p flush-logs\n```\n\n<br>\n\n\n\n\n\n# 通用查询日志\n\n## 设置和启动通用查询日志\n\n默认情况下，没有开启查询日志，通过修改 `my.cnf `文件来开启查询日志：\n\n```bash\ngeneral_log=1 \ngeneral_log_file=/data/querylog/mysql-query.log\n```\n\n\n\n第一个参数表示将通用查询日志开启，第二个参数指定通用查询日志的位置。修改后重启mysql生效。\n\n\n\n## 查看通用查询日志\n\n这是一个文本文件，直接打开查看即可，里边记录了所有的执行指令和请求。\n\n> 一般不打开这个日志，因为会导致文件太大；在调试排查问题的时候可以打开。\n\n\n\n## 删除通用查询日志\n\n该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：\n\n```bash\n$ mysqladmin -uroot -p flush-logs\n```\n\n<br>\n\n\n\n# 慢查询日志\n\n## 启动和设置慢查询日志\n\n通过修改配置文件，增加如下配置来开启慢查询日志：\n\n```bash\nslow_query_log=1 \nslow_query_log_file=/data/slowlog/mysql-slow.log \nlog_queries_not_using_indexes=on \nlong_query_time=1\n```\n\n- `slow_query_log`：开启慢查询日志；\n- `slow_query_log_file`：慢查询日志位置；\n- `log_queries_not_using_indexes` ：是否记录没有使用索引的查询；\n- `long_query_time`：超过这个时间的查询都定义为慢查询，单位秒，默认10秒；\n\n\n\n## 查看慢查询日志\n\n慢查询日志也是文本文件，直接打开查询即可。借助慢查询日志，可以对查询语句进行优化。\n\n\n\n## 删除慢查询日志\n\n该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：\n\n```bash\n$ mysqladmin -uroot -p flush-logs\n```\n\n\n\n","slug":"MySQL日志","published":1,"updated":"2020-08-18T08:33:37.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdzoxb9z0000r1n0979cb3q7","content":"<p>mysql日志记录了用户日常操作和错误信息，从日志中可以查询到mysql的运行情况。mysql日志主要分为4类：</p>\n<ul>\n<li>错误日志：记录mysql启动、运行、停止中出现的问题；</li>\n<li>查询日志：记录客户端建立的连接和执行的语句；</li>\n<li>二进制日志：记录所有更改数据的语句，可用于数据复制；</li>\n<li>慢查询日志：记录所有执行时间超过 long_query _time 的查询或不使用索引的查询；</li>\n</ul>\n<hr>\n<h1 id=\"二进制日志\"><a href=\"#二进制日志\" class=\"headerlink\" title=\"二进制日志\"></a>二进制日志</h1><h2 id=\"什么是二进制日志\"><a href=\"#什么是二进制日志\" class=\"headerlink\" title=\"什么是二进制日志\"></a>什么是二进制日志</h2><p>二进制日志主要记录mysql中数据库的变化，其中包含所有更新了数据以及潜在更新了数据（例如未匹配到任何行的 DELETE）的语句。</p>\n<blockquote>\n<p> 使用二进制日志的最大目的是恢复数据库。</p>\n</blockquote>\n<h2 id=\"启动和设置二进制日志\"><a href=\"#启动和设置二进制日志\" class=\"headerlink\" title=\"启动和设置二进制日志\"></a>启动和设置二进制日志</h2><p>默认情况下，二进制日志是关闭的，可以通过修改mysql配置文件 <code>my.cnf</code> 来启动和设置二进制日志，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">log</span>-bin </span><br><span class=\"line\">expire_logs_days = 10 </span><br><span class=\"line\">max_binlog_size = 100M </span><br><span class=\"line\">server_id=1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>log-bin</code>：表示开启二进制日志，后面也可以指定日志文件名称，例如：<code>log-bin=/data/binlog/binlog.log</code> 表示将二进制日志放在 <code>/data/binlog</code>下取名为 <code>binlog.log</code>；</li>\n<li><code>expire_logs_days</code>：清理过期日志的时间，默认为0，表示不删除；</li>\n<li><code>max_binlog_size</code>：binlog文件最大大小，默认1G，如果超过当前指定的大小，日志会滚动；</li>\n<li><code>server_id</code>：为mysql提供一个独立的ID，用于使用binlog做主从备份；</li>\n</ul>\n<p>设置好上边的参数，重启即可。重启后登录mysql，使用如下命令检查是否成功开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#39;log_bin&#39;; </span><br><span class=\"line\">+---------------+-------+ </span><br><span class=\"line\">| Variable_name | Value | </span><br><span class=\"line\">+---------------+-------+ </span><br><span class=\"line\">| log_bin       | ON    | </span><br><span class=\"line\">+---------------+-------+</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 看到log_bin 已经开启。</p>\n</blockquote>\n<h2 id=\"查看二进制日志\"><a href=\"#查看二进制日志\" class=\"headerlink\" title=\"查看二进制日志\"></a>查看二进制日志</h2><p>二进制日志中，有两种日志：</p>\n<ul>\n<li><code>xxx.index</code>：保存所有的日志文件名清单；</li>\n<li><code>xxx.数字</code>：实际日志数据文件；</li>\n</ul>\n<p>mysql服务器每重新启动一次，<code>xxx.数字</code> 格式的日志文件就会增加一个。在mysql中，通过下面命令就可以查看当前所有的binlog以及大小：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show binary logs; </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| Log_name      | File_size | </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| binlog.000001 |       177 | </span><br><span class=\"line\">| binlog.000002 |       177 | </span><br><span class=\"line\">| binlog.000003 |       154 | </span><br><span class=\"line\">+---------------+-----------+</span><br></pre></td></tr></table></figure>\n\n\n\n<p>二进制日志不能直接查看，需要使用专门的指令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqlbinlog /data/binlog/binlog.000001</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"删除二进制日志\"><a href=\"#删除二进制日志\" class=\"headerlink\" title=\"删除二进制日志\"></a>删除二进制日志</h2><h3 id=\"删除所有二进制日志\"><a href=\"#删除所有二进制日志\" class=\"headerlink\" title=\"删除所有二进制日志\"></a>删除所有二进制日志</h3><p>使用 RESET MASTER 指令可以删除所有的二进制日志并重新创建，编号从000001开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; reset master; </span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec) </span><br><span class=\"line\">mysql&gt; show binary logs; </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| Log_name      | File_size | </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| binlog.000001 |       154 | </span><br><span class=\"line\">+---------------+-----------+</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"删除指定的日志\"><a href=\"#删除指定的日志\" class=\"headerlink\" title=\"删除指定的日志\"></a>删除指定的日志</h3><p>使用 <code>PURGE MASTER LOG</code> 指令可以删除指定的日志，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1：指定文件名，删除文件名编号比指定文件名编号小的所有日志 </span></span><br><span class=\"line\">PURGE &#123;MASTER | BINARY&#125;  LOGS TO <span class=\"string\">'log_name'</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2：指定日期，删除指定日期前的日志 </span></span><br><span class=\"line\">PURGE &#123;MASTER | BINARY&#125; LOGS BEFORE <span class=\"string\">'date'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除 binlog.00003之前的日志 </span><br><span class=\"line\">mysql&gt; purge master logs to &#39;binlog.00003&#39;; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除2018年1月30号之前的日志 </span><br><span class=\"line\">mysql&gt; purge master logs before &#39;20180130&#39;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"使用二进制日志恢复数据库\"><a href=\"#使用二进制日志恢复数据库\" class=\"headerlink\" title=\"使用二进制日志恢复数据库\"></a>使用二进制日志恢复数据库</h2><p>当数据库丢失数据时，可以使用 <code>mysqlbinlog</code> 命令恢复数据，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqlbinlog [options] filename | mysql -u&lt;user&gt; -p&lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>options：一系列可选参数；</p>\n</li>\n<li><ul>\n<li>–start-data：开始时间；</li>\n<li>–stop-data：结束时间；</li>\n<li>–start-position：开始位置；</li>\n<li>–stop-position：结束位置；</li>\n</ul>\n</li>\n<li><p>filename：日志名；</p>\n</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复到 2018年1月30日 15：27：38 </span></span><br><span class=\"line\">$ mysqlbinlog --stop-date=<span class=\"string\">\"2018-01-30 15:27:38\"</span> binlog.00008 | mysql -uroot -proot123</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"停止binlog\"><a href=\"#停止binlog\" class=\"headerlink\" title=\"停止binlog\"></a>停止binlog</h2><p>如果想永久停止binlog，需要修改配置文件关闭binlog功能，并重启mysql。</p>\n<p>如果是想暂停binlog，可以通过 <code>SET  sql_log_bin</code> 来设置mysql变量的方式暂停：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 暂停binlog功能 </span><br><span class=\"line\">mysql&gt; set sql_log_bin 0; </span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复binlog功能 </span><br><span class=\"line\">mysql&gt; set sql_log_bin 1;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h1><h2 id=\"启动和设置错误日志\"><a href=\"#启动和设置错误日志\" class=\"headerlink\" title=\"启动和设置错误日志\"></a>启动和设置错误日志</h2><p>可以在mysql配置文件 <code>my.cnf</code>中配置错误日志的位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">log</span>-error=/var/<span class=\"built_in\">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样的话错误日志就会记录到 <code>/var/log/mysql.log</code> 下了。</p>\n<p>也可以在mysql中查看设置的错误日志信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#39;log_error&#39;; </span><br><span class=\"line\">+---------------+---------------------+ </span><br><span class=\"line\">| Variable_name | Value               | </span><br><span class=\"line\">+---------------+---------------------+ </span><br><span class=\"line\">| log_error     | &#x2F;var&#x2F;log&#x2F;mysqld.log | </span><br><span class=\"line\">+---------------+---------------------+</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"删除错误日志\"><a href=\"#删除错误日志\" class=\"headerlink\" title=\"删除错误日志\"></a>删除错误日志</h2><p>错误日志可以直接删除，不会影响运行。在运行状态下删除错误日志后，mysql并不会重新创建日志。所以如果在删除错误日志后，如果需要重新创建，可以执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"通用查询日志\"><a href=\"#通用查询日志\" class=\"headerlink\" title=\"通用查询日志\"></a>通用查询日志</h1><h2 id=\"设置和启动通用查询日志\"><a href=\"#设置和启动通用查询日志\" class=\"headerlink\" title=\"设置和启动通用查询日志\"></a>设置和启动通用查询日志</h2><p>默认情况下，没有开启查询日志，通过修改 <code>my.cnf</code>文件来开启查询日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">general_log=1 </span><br><span class=\"line\">general_log_file=/data/querylog/mysql-query.log</span><br></pre></td></tr></table></figure>\n\n\n\n<p>第一个参数表示将通用查询日志开启，第二个参数指定通用查询日志的位置。修改后重启mysql生效。</p>\n<h2 id=\"查看通用查询日志\"><a href=\"#查看通用查询日志\" class=\"headerlink\" title=\"查看通用查询日志\"></a>查看通用查询日志</h2><p>这是一个文本文件，直接打开查看即可，里边记录了所有的执行指令和请求。</p>\n<blockquote>\n<p>一般不打开这个日志，因为会导致文件太大；在调试排查问题的时候可以打开。</p>\n</blockquote>\n<h2 id=\"删除通用查询日志\"><a href=\"#删除通用查询日志\" class=\"headerlink\" title=\"删除通用查询日志\"></a>删除通用查询日志</h2><p>该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h1><h2 id=\"启动和设置慢查询日志\"><a href=\"#启动和设置慢查询日志\" class=\"headerlink\" title=\"启动和设置慢查询日志\"></a>启动和设置慢查询日志</h2><p>通过修改配置文件，增加如下配置来开启慢查询日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log=1 </span><br><span class=\"line\">slow_query_log_file=/data/slowlog/mysql-slow.log </span><br><span class=\"line\">log_queries_not_using_indexes=on </span><br><span class=\"line\">long_query_time=1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>slow_query_log</code>：开启慢查询日志；</li>\n<li><code>slow_query_log_file</code>：慢查询日志位置；</li>\n<li><code>log_queries_not_using_indexes</code> ：是否记录没有使用索引的查询；</li>\n<li><code>long_query_time</code>：超过这个时间的查询都定义为慢查询，单位秒，默认10秒；</li>\n</ul>\n<h2 id=\"查看慢查询日志\"><a href=\"#查看慢查询日志\" class=\"headerlink\" title=\"查看慢查询日志\"></a>查看慢查询日志</h2><p>慢查询日志也是文本文件，直接打开查询即可。借助慢查询日志，可以对查询语句进行优化。</p>\n<h2 id=\"删除慢查询日志\"><a href=\"#删除慢查询日志\" class=\"headerlink\" title=\"删除慢查询日志\"></a>删除慢查询日志</h2><p>该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>mysql日志记录了用户日常操作和错误信息，从日志中可以查询到mysql的运行情况。mysql日志主要分为4类：</p>\n<ul>\n<li>错误日志：记录mysql启动、运行、停止中出现的问题；</li>\n<li>查询日志：记录客户端建立的连接和执行的语句；</li>\n<li>二进制日志：记录所有更改数据的语句，可用于数据复制；</li>\n<li>慢查询日志：记录所有执行时间超过 long_query _time 的查询或不使用索引的查询；</li>\n</ul>\n<hr>\n<h1 id=\"二进制日志\"><a href=\"#二进制日志\" class=\"headerlink\" title=\"二进制日志\"></a>二进制日志</h1><h2 id=\"什么是二进制日志\"><a href=\"#什么是二进制日志\" class=\"headerlink\" title=\"什么是二进制日志\"></a>什么是二进制日志</h2><p>二进制日志主要记录mysql中数据库的变化，其中包含所有更新了数据以及潜在更新了数据（例如未匹配到任何行的 DELETE）的语句。</p>\n<blockquote>\n<p> 使用二进制日志的最大目的是恢复数据库。</p>\n</blockquote>\n<h2 id=\"启动和设置二进制日志\"><a href=\"#启动和设置二进制日志\" class=\"headerlink\" title=\"启动和设置二进制日志\"></a>启动和设置二进制日志</h2><p>默认情况下，二进制日志是关闭的，可以通过修改mysql配置文件 <code>my.cnf</code> 来启动和设置二进制日志，例如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">log</span>-bin </span><br><span class=\"line\">expire_logs_days = 10 </span><br><span class=\"line\">max_binlog_size = 100M </span><br><span class=\"line\">server_id=1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>log-bin</code>：表示开启二进制日志，后面也可以指定日志文件名称，例如：<code>log-bin=/data/binlog/binlog.log</code> 表示将二进制日志放在 <code>/data/binlog</code>下取名为 <code>binlog.log</code>；</li>\n<li><code>expire_logs_days</code>：清理过期日志的时间，默认为0，表示不删除；</li>\n<li><code>max_binlog_size</code>：binlog文件最大大小，默认1G，如果超过当前指定的大小，日志会滚动；</li>\n<li><code>server_id</code>：为mysql提供一个独立的ID，用于使用binlog做主从备份；</li>\n</ul>\n<p>设置好上边的参数，重启即可。重启后登录mysql，使用如下命令检查是否成功开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#39;log_bin&#39;; </span><br><span class=\"line\">+---------------+-------+ </span><br><span class=\"line\">| Variable_name | Value | </span><br><span class=\"line\">+---------------+-------+ </span><br><span class=\"line\">| log_bin       | ON    | </span><br><span class=\"line\">+---------------+-------+</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 看到log_bin 已经开启。</p>\n</blockquote>\n<h2 id=\"查看二进制日志\"><a href=\"#查看二进制日志\" class=\"headerlink\" title=\"查看二进制日志\"></a>查看二进制日志</h2><p>二进制日志中，有两种日志：</p>\n<ul>\n<li><code>xxx.index</code>：保存所有的日志文件名清单；</li>\n<li><code>xxx.数字</code>：实际日志数据文件；</li>\n</ul>\n<p>mysql服务器每重新启动一次，<code>xxx.数字</code> 格式的日志文件就会增加一个。在mysql中，通过下面命令就可以查看当前所有的binlog以及大小：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show binary logs; </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| Log_name      | File_size | </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| binlog.000001 |       177 | </span><br><span class=\"line\">| binlog.000002 |       177 | </span><br><span class=\"line\">| binlog.000003 |       154 | </span><br><span class=\"line\">+---------------+-----------+</span><br></pre></td></tr></table></figure>\n\n\n\n<p>二进制日志不能直接查看，需要使用专门的指令查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqlbinlog /data/binlog/binlog.000001</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"删除二进制日志\"><a href=\"#删除二进制日志\" class=\"headerlink\" title=\"删除二进制日志\"></a>删除二进制日志</h2><h3 id=\"删除所有二进制日志\"><a href=\"#删除所有二进制日志\" class=\"headerlink\" title=\"删除所有二进制日志\"></a>删除所有二进制日志</h3><p>使用 RESET MASTER 指令可以删除所有的二进制日志并重新创建，编号从000001开始</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; reset master; </span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec) </span><br><span class=\"line\">mysql&gt; show binary logs; </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| Log_name      | File_size | </span><br><span class=\"line\">+---------------+-----------+ </span><br><span class=\"line\">| binlog.000001 |       154 | </span><br><span class=\"line\">+---------------+-----------+</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"删除指定的日志\"><a href=\"#删除指定的日志\" class=\"headerlink\" title=\"删除指定的日志\"></a>删除指定的日志</h3><p>使用 <code>PURGE MASTER LOG</code> 指令可以删除指定的日志，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1：指定文件名，删除文件名编号比指定文件名编号小的所有日志 </span></span><br><span class=\"line\">PURGE &#123;MASTER | BINARY&#125;  LOGS TO <span class=\"string\">'log_name'</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2：指定日期，删除指定日期前的日志 </span></span><br><span class=\"line\">PURGE &#123;MASTER | BINARY&#125; LOGS BEFORE <span class=\"string\">'date'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除 binlog.00003之前的日志 </span><br><span class=\"line\">mysql&gt; purge master logs to &#39;binlog.00003&#39;; </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除2018年1月30号之前的日志 </span><br><span class=\"line\">mysql&gt; purge master logs before &#39;20180130&#39;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"使用二进制日志恢复数据库\"><a href=\"#使用二进制日志恢复数据库\" class=\"headerlink\" title=\"使用二进制日志恢复数据库\"></a>使用二进制日志恢复数据库</h2><p>当数据库丢失数据时，可以使用 <code>mysqlbinlog</code> 命令恢复数据，其格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqlbinlog [options] filename | mysql -u&lt;user&gt; -p&lt;password&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>options：一系列可选参数；</p>\n</li>\n<li><ul>\n<li>–start-data：开始时间；</li>\n<li>–stop-data：结束时间；</li>\n<li>–start-position：开始位置；</li>\n<li>–stop-position：结束位置；</li>\n</ul>\n</li>\n<li><p>filename：日志名；</p>\n</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复到 2018年1月30日 15：27：38 </span></span><br><span class=\"line\">$ mysqlbinlog --stop-date=<span class=\"string\">\"2018-01-30 15:27:38\"</span> binlog.00008 | mysql -uroot -proot123</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"停止binlog\"><a href=\"#停止binlog\" class=\"headerlink\" title=\"停止binlog\"></a>停止binlog</h2><p>如果想永久停止binlog，需要修改配置文件关闭binlog功能，并重启mysql。</p>\n<p>如果是想暂停binlog，可以通过 <code>SET  sql_log_bin</code> 来设置mysql变量的方式暂停：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 暂停binlog功能 </span><br><span class=\"line\">mysql&gt; set sql_log_bin 0; </span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复binlog功能 </span><br><span class=\"line\">mysql&gt; set sql_log_bin 1;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h1><h2 id=\"启动和设置错误日志\"><a href=\"#启动和设置错误日志\" class=\"headerlink\" title=\"启动和设置错误日志\"></a>启动和设置错误日志</h2><p>可以在mysql配置文件 <code>my.cnf</code>中配置错误日志的位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">log</span>-error=/var/<span class=\"built_in\">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样的话错误日志就会记录到 <code>/var/log/mysql.log</code> 下了。</p>\n<p>也可以在mysql中查看设置的错误日志信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#39;log_error&#39;; </span><br><span class=\"line\">+---------------+---------------------+ </span><br><span class=\"line\">| Variable_name | Value               | </span><br><span class=\"line\">+---------------+---------------------+ </span><br><span class=\"line\">| log_error     | &#x2F;var&#x2F;log&#x2F;mysqld.log | </span><br><span class=\"line\">+---------------+---------------------+</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"删除错误日志\"><a href=\"#删除错误日志\" class=\"headerlink\" title=\"删除错误日志\"></a>删除错误日志</h2><p>错误日志可以直接删除，不会影响运行。在运行状态下删除错误日志后，mysql并不会重新创建日志。所以如果在删除错误日志后，如果需要重新创建，可以执行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n\n\n<h1 id=\"通用查询日志\"><a href=\"#通用查询日志\" class=\"headerlink\" title=\"通用查询日志\"></a>通用查询日志</h1><h2 id=\"设置和启动通用查询日志\"><a href=\"#设置和启动通用查询日志\" class=\"headerlink\" title=\"设置和启动通用查询日志\"></a>设置和启动通用查询日志</h2><p>默认情况下，没有开启查询日志，通过修改 <code>my.cnf</code>文件来开启查询日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">general_log=1 </span><br><span class=\"line\">general_log_file=/data/querylog/mysql-query.log</span><br></pre></td></tr></table></figure>\n\n\n\n<p>第一个参数表示将通用查询日志开启，第二个参数指定通用查询日志的位置。修改后重启mysql生效。</p>\n<h2 id=\"查看通用查询日志\"><a href=\"#查看通用查询日志\" class=\"headerlink\" title=\"查看通用查询日志\"></a>查看通用查询日志</h2><p>这是一个文本文件，直接打开查看即可，里边记录了所有的执行指令和请求。</p>\n<blockquote>\n<p>一般不打开这个日志，因为会导致文件太大；在调试排查问题的时候可以打开。</p>\n</blockquote>\n<h2 id=\"删除通用查询日志\"><a href=\"#删除通用查询日志\" class=\"headerlink\" title=\"删除通用查询日志\"></a>删除通用查询日志</h2><p>该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h1><h2 id=\"启动和设置慢查询日志\"><a href=\"#启动和设置慢查询日志\" class=\"headerlink\" title=\"启动和设置慢查询日志\"></a>启动和设置慢查询日志</h2><p>通过修改配置文件，增加如下配置来开启慢查询日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slow_query_log=1 </span><br><span class=\"line\">slow_query_log_file=/data/slowlog/mysql-slow.log </span><br><span class=\"line\">log_queries_not_using_indexes=on </span><br><span class=\"line\">long_query_time=1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>slow_query_log</code>：开启慢查询日志；</li>\n<li><code>slow_query_log_file</code>：慢查询日志位置；</li>\n<li><code>log_queries_not_using_indexes</code> ：是否记录没有使用索引的查询；</li>\n<li><code>long_query_time</code>：超过这个时间的查询都定义为慢查询，单位秒，默认10秒；</li>\n</ul>\n<h2 id=\"查看慢查询日志\"><a href=\"#查看慢查询日志\" class=\"headerlink\" title=\"查看慢查询日志\"></a>查看慢查询日志</h2><p>慢查询日志也是文本文件，直接打开查询即可。借助慢查询日志，可以对查询语句进行优化。</p>\n<h2 id=\"删除慢查询日志\"><a href=\"#删除慢查询日志\" class=\"headerlink\" title=\"删除慢查询日志\"></a>删除慢查询日志</h2><p>该日志文件可以直接删除，或者使用下面的命令重新打开日志文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"部署Prometheus、node-exporter和grafana","date":"2020-08-19T01:39:25.000Z","description":"部署prometheus、node-exporter和grafana服务","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597811354534&di=4f9cf0a3bc115ebb13e67a946849bd8a&imgtype=0&src=http%3A%2F%2Ftm-image.tianyancha.com%2Ftm%2F1b2f7a725a0ef7361835201e25876cec.jpg","_content":"\n\n\n# 准备\n\n## 时间同步\n\n```bash\n$ yum install -y ntpdate \n$ timedatectl set-timezone Asia/Shanghai \n$ ntpdate -u cn.pool.ntp.org \n$ echo \"* * * * * /usr/sbin/ntpdate -u cn.pool.ntp.org >dev/null &\" >> /var/spool/cron/root\n```\n\n\n\n<br>\n\n\n\n# 安装Prometheus\n\n## 下载\n\n到prometheus的官网：https://prometheus.io/download/， 下载最新的版本，这里使用的是2.14.0：\n\n```bash\n$ wget https://github.com/prometheus/prometheus/releases/download/v2.14.0/prometheus-2.14.0.linux-amd64.tar.gz\n```\n\n\n\n## 安装\n\n```bash\n$ tar zxf prometheus-2.14.0.linux-amd64.tar.gz -C /usr/local/prometheus \n$ cd /usr/local/ \n$ mv prometheus-2.14.0.linux-amd64/ prometheus\n```\n\n\n\n## 运行\n\n进入到prometheus目录下直接执行名为 prometheus 的二进制文件即可：\n\n```bash\n$ cd /usr/local/prometheus \n$ ./prometheus\n```\n\n\n\n>  当出现`Server is ready to receive web requests`的时候，说明prometheus已经启动成功。\n\n\n\n这种方式是前台启动方式，如果要放在后台运行可以执行如下的命令：\n\n```bash\n$ nuhup ./prometheus &\n```\n\n\n\n使用prometheus命令启动的时候还支持以下的参数：\n\n- `--config.file=\"/usr/local/prometheus/prometheus.yml\"`：指定配置文件位置；\n- `--web.read-timeout=5m`：获取数据时请求链接的最大等待时间，防止过多空闲链接浪费资源；\n- `--web.max-connections=512`：获取数据时最多的连接数；\n- `--storage.tsdb.retention=15d`：数据保留期限；\n- `--storage.tsdb.path=\"/data\"`：数据存储目录；\n- `--query.timeout=2m`：查询数据超时时间；\n- `--query.max-concurrency=20`：最大并发查询量； \n- `--web.enable-lifecycle`：热加载配置，支持通过命令 `curl -X POST http://localhost:9090/-/reload `的方式动态加载配置，而不用重启服务；\n\n \n\n## 验证\n\n启动后，prometheus默认监听 9090 端口：\n\n```bash\n$ netstat -ntlp | grep prome \ntcp6       0      0 :::9090                 :::*                    LISTEN      7898/./prometheus\n```\n\n\n\n然后可以打来浏览器访问本机的9090端口，就可以进入如下页面：\n\n![](prome-web.png)\n\n\n\n> prometheus本身是没有账号密码验证的，可以使用nginx的httppass等方式间接进行验证\n\n\n\n<br>\n\n\n\n# 安装node_exporter\n\n## 下载\n\n到prometheus的官网：https://prometheus.io/download/， 下载最新的版本，这里使用的是0.18.1：\n\n```bash\n$ wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz\n```\n\n\n\n\n\n## 安装\n\n```bash\n$ tar zxf node_exporter-0.18.1.linux-amd64.tar.gz -C /usr/local \n$ cd /usr/local/ \n$ mv node_exporter-0.18.1.linux-amd64 node_exporter\n```\n\n\n\n\n\n## 启动\n\n```bash\n$ cd /usr/local/node_exporter \n$ ./node_exporter\n```\n\n\n\n> 当出现 `Listening on :9100`  的时候表明启动成功了。\n\n\n\n这样是前台启动的方式，想要放到后台启动，可以使用如下命令：\n\n```bash\n$ nobup ./node_exporter &\n```\n\n\n\n## 验证\n\nnode_exporter默认工作在9100端口：\n\n```bash\n$ netstat -ntlp | grep node_exp \ntcp6       0      0 :::9100                 :::*                    LISTEN      8647/./node_exporte\n```\n\n\n\n可以通过curl访问本机9100端口查看node_exporter的监控项：\n\n```bash\n$ curl localhost:9100/metrics\n```\n\n\n\n<br>\n\n\n\n# 配置prometheus\n\n配置文件位于解压后的目录，和启动程序同级。prometheus启动后会加载配置文件` prometheus.yml `。下面介绍下配置文件中的内容：\n\n## global全局配置\n\n- `scrape_interval`：数据采集时间间隔，默认是15秒；\n- `evaluation_interval`：监控规则执行频率，默认15秒；\n\n\n\n## alerting\n\n报警相关配置，prometheus支持使用alertmanager进行报警，就在这里配置。当然也可以在grafana中配置报警。\n\n\n\n## scrape_configs\n\n这里定义的是数据抓取相关配置。\n\n- `job_name`：任务名称；\n- `static_config`：任务配置；\n  - `targets`：任务目标位置（一般是ip+端口），可以并行写多个，逗号分隔；\n\n\n\n\n\n## 添加node_exporter任务\n\n在上边已经部署了node_exporter，那么这里我可以新增一个任务，然后指定目标为node_exporter，于是在  prometheus.yml 文件中添加如下的内容：\n\n```yaml\n- job_name: 'node_exporter'    \n  static_configs:    \n  - targets: ['192.168.1.106:9100']\n```\n\n\n\n这里新增了一个叫 `node_exporter` 的任务，目标为部署有node_exporter服务的服务器的9100端口；\n\n重启prometheus：\n\n```bash\n$ kill -9 $(ps x | grep prome | grep -v grep | awk '{print $1}') \n$ nohup ./prometheus &\n\n# 或者通过下面的命令动态加载配置\n$ curl -X POST http://localhost:9090/-/reload\n```\n\n\n\n然后进入prometheus的页面，点击 `status --> targets`，看到定义的任务 node_exporter 如果是 UP 状态，就说明成功了。\n\n![](prome-node.png)\n\n\n\n<br>\n\n\n\n# 使用daemonize方式将服务放入后台运行\n\ndaemonize是Unix系统后台守护进程管理软件，他更加正规，后台运行更加稳定。它是通过用户的启动脚本来启动后台进程。\n\n\n\n## 安装daemonize\n\n```bash\n$ yum install -y gcc \n$ git clone git://github.com/bmc/daemonize.git \n$ cd daemonize \n$ sh configure \n$ make && make install\n```\n\n\n\n\n\n## 设置启动脚本\n\n```bash\n#!/bin/bash \n\n/usr/local/prometheus/prometheus --config.file=\"/usr/local/prometheus/prometheus.yml\" --web.listen-address=\"0.0.0.0:9090\" --web.read-timeout=5m --web.max-connections=10 --storage.tsdb.re tention=15d --storage.tsdb.path=\"/data/\" --query.max-concurrency=20 --query.timeout=2m --web.enable-lifecycle\n```\n\n\n\n>  将上边的脚本保存到一个文件，例如我的是 `/root/prometheus-up.sh`  ，需要给这个脚本添加可执行权限。\n\n\n\n\n\n## 运行后台服务\n\n```bash\n$ daemonize -c /root/ /root/prometheus-up.sh \n$ ps -ef | grep -v grep | grep peometheus\n```\n\n\n\n>  node_exporter同理，按照上边的配置即可。node_exporter有一些默认不开启的监控项可以在其github主页找到，并在启动的时候开启。\n\n\n\n<br>\n\n\n\n# 部署grafana\n\n## 下载rpm包\n\n可以从 grafana 官网获 https://grafana.com/grafana/download  取在最新的rpm包进行安装，这里我使用的是 6.5.2 版本：\n\n```bash\n$ wget https://dl.grafana.com/oss/release/grafana-6.5.2-1.x86_64.rpm\n```\n\n\n\n\n\n## 安装grafana\n\n```bash\n$ yum localinstall -y grafana-6.5.2-1.x86_64.rpm\n```\n\n\n\n\n\n## 启动grafana\n\n```bash\n$ systemctl start grafana-server \n$ systemctl enable grafana-server\n```\n\n\n\n\n\n## 验证\n\ngrafana默认监听在 3000端口：\n\n```bash\n$ netstat -ntlp | grep grafana \ntcp6       0      0 :::3000                 :::*                    LISTEN      15939/grafana-serve\n```\n\n\n\n然后通过浏览器访问本机的3000端口，输入默认密码：admin/admin，并且更改一下密码就可以进入grafana的主界面：\n\n![](grafana.png)\n\n\n\n## 添加数据源\n\n第一次进入grafana，会要求添加一个数据源，在之前我已经部署好了 prometheus，地址为`192.168.1.106:9090`，所以这里我添加这个数据源。\n\n\n\n点击` Add data source` ，在数据源类型中选择prometheus进入编辑表单，单后填入如下的内容：\n\n![](datasource.png)\n\n\n\n> 没有特殊要求的话，填入名称和url即可。\n\n\n\n然后点击下边的 `save and test `进行连通性测试，当出现 `Data source is working` 的时候表示添成功。\n\n\n\n可以在左侧侧边栏的 `Configconfiguration` 按钮下管理已经添加的数据源：\n\n![](config.png)\n\n\n\n## 添加图表\n\n点击 `New dashboard `，然后选择 `Add Query ` ，此时我们创建了一张空的图表：\n\n![](empdash.png)\n\n\n\n下方是关于图表的一些配置信息，包括名称、数据源、计算公式等，这里以之前计算cpu使用率为例，来绘制图表，cpu使用率计算公式如下：\n\n```bash\n(1- (sum(increase(node_cpu_seconds_total{mode=\"idle\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100\n```\n\n\n\n首先我们需要填入数据源和公式：\n\n![](1.png)\n\n\n\n然后进入下一步，设置图表类型以及X和Y轴：\n\n![](2.png)\n\n![](3.png)\n\n\n\n最后，设置一下图表标题：\n\n![](4.png)\n\n\n\n这样，一张图表就添加完成了：\n\n![](5.png)\n\n\n\n\n\n","source":"_posts/部署Prometheus和node-exporter.md","raw":"---\ntitle: 部署Prometheus、node-exporter和grafana\ndate: 2020-08-19 09:39:25\ntags:\n- Prometheus\ncategories:\n- Prometheus\n- 服务部署\ndescription: 部署prometheus、node-exporter和grafana服务\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597811354534&di=4f9cf0a3bc115ebb13e67a946849bd8a&imgtype=0&src=http%3A%2F%2Ftm-image.tianyancha.com%2Ftm%2F1b2f7a725a0ef7361835201e25876cec.jpg\n---\n\n\n\n# 准备\n\n## 时间同步\n\n```bash\n$ yum install -y ntpdate \n$ timedatectl set-timezone Asia/Shanghai \n$ ntpdate -u cn.pool.ntp.org \n$ echo \"* * * * * /usr/sbin/ntpdate -u cn.pool.ntp.org >dev/null &\" >> /var/spool/cron/root\n```\n\n\n\n<br>\n\n\n\n# 安装Prometheus\n\n## 下载\n\n到prometheus的官网：https://prometheus.io/download/， 下载最新的版本，这里使用的是2.14.0：\n\n```bash\n$ wget https://github.com/prometheus/prometheus/releases/download/v2.14.0/prometheus-2.14.0.linux-amd64.tar.gz\n```\n\n\n\n## 安装\n\n```bash\n$ tar zxf prometheus-2.14.0.linux-amd64.tar.gz -C /usr/local/prometheus \n$ cd /usr/local/ \n$ mv prometheus-2.14.0.linux-amd64/ prometheus\n```\n\n\n\n## 运行\n\n进入到prometheus目录下直接执行名为 prometheus 的二进制文件即可：\n\n```bash\n$ cd /usr/local/prometheus \n$ ./prometheus\n```\n\n\n\n>  当出现`Server is ready to receive web requests`的时候，说明prometheus已经启动成功。\n\n\n\n这种方式是前台启动方式，如果要放在后台运行可以执行如下的命令：\n\n```bash\n$ nuhup ./prometheus &\n```\n\n\n\n使用prometheus命令启动的时候还支持以下的参数：\n\n- `--config.file=\"/usr/local/prometheus/prometheus.yml\"`：指定配置文件位置；\n- `--web.read-timeout=5m`：获取数据时请求链接的最大等待时间，防止过多空闲链接浪费资源；\n- `--web.max-connections=512`：获取数据时最多的连接数；\n- `--storage.tsdb.retention=15d`：数据保留期限；\n- `--storage.tsdb.path=\"/data\"`：数据存储目录；\n- `--query.timeout=2m`：查询数据超时时间；\n- `--query.max-concurrency=20`：最大并发查询量； \n- `--web.enable-lifecycle`：热加载配置，支持通过命令 `curl -X POST http://localhost:9090/-/reload `的方式动态加载配置，而不用重启服务；\n\n \n\n## 验证\n\n启动后，prometheus默认监听 9090 端口：\n\n```bash\n$ netstat -ntlp | grep prome \ntcp6       0      0 :::9090                 :::*                    LISTEN      7898/./prometheus\n```\n\n\n\n然后可以打来浏览器访问本机的9090端口，就可以进入如下页面：\n\n![](prome-web.png)\n\n\n\n> prometheus本身是没有账号密码验证的，可以使用nginx的httppass等方式间接进行验证\n\n\n\n<br>\n\n\n\n# 安装node_exporter\n\n## 下载\n\n到prometheus的官网：https://prometheus.io/download/， 下载最新的版本，这里使用的是0.18.1：\n\n```bash\n$ wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz\n```\n\n\n\n\n\n## 安装\n\n```bash\n$ tar zxf node_exporter-0.18.1.linux-amd64.tar.gz -C /usr/local \n$ cd /usr/local/ \n$ mv node_exporter-0.18.1.linux-amd64 node_exporter\n```\n\n\n\n\n\n## 启动\n\n```bash\n$ cd /usr/local/node_exporter \n$ ./node_exporter\n```\n\n\n\n> 当出现 `Listening on :9100`  的时候表明启动成功了。\n\n\n\n这样是前台启动的方式，想要放到后台启动，可以使用如下命令：\n\n```bash\n$ nobup ./node_exporter &\n```\n\n\n\n## 验证\n\nnode_exporter默认工作在9100端口：\n\n```bash\n$ netstat -ntlp | grep node_exp \ntcp6       0      0 :::9100                 :::*                    LISTEN      8647/./node_exporte\n```\n\n\n\n可以通过curl访问本机9100端口查看node_exporter的监控项：\n\n```bash\n$ curl localhost:9100/metrics\n```\n\n\n\n<br>\n\n\n\n# 配置prometheus\n\n配置文件位于解压后的目录，和启动程序同级。prometheus启动后会加载配置文件` prometheus.yml `。下面介绍下配置文件中的内容：\n\n## global全局配置\n\n- `scrape_interval`：数据采集时间间隔，默认是15秒；\n- `evaluation_interval`：监控规则执行频率，默认15秒；\n\n\n\n## alerting\n\n报警相关配置，prometheus支持使用alertmanager进行报警，就在这里配置。当然也可以在grafana中配置报警。\n\n\n\n## scrape_configs\n\n这里定义的是数据抓取相关配置。\n\n- `job_name`：任务名称；\n- `static_config`：任务配置；\n  - `targets`：任务目标位置（一般是ip+端口），可以并行写多个，逗号分隔；\n\n\n\n\n\n## 添加node_exporter任务\n\n在上边已经部署了node_exporter，那么这里我可以新增一个任务，然后指定目标为node_exporter，于是在  prometheus.yml 文件中添加如下的内容：\n\n```yaml\n- job_name: 'node_exporter'    \n  static_configs:    \n  - targets: ['192.168.1.106:9100']\n```\n\n\n\n这里新增了一个叫 `node_exporter` 的任务，目标为部署有node_exporter服务的服务器的9100端口；\n\n重启prometheus：\n\n```bash\n$ kill -9 $(ps x | grep prome | grep -v grep | awk '{print $1}') \n$ nohup ./prometheus &\n\n# 或者通过下面的命令动态加载配置\n$ curl -X POST http://localhost:9090/-/reload\n```\n\n\n\n然后进入prometheus的页面，点击 `status --> targets`，看到定义的任务 node_exporter 如果是 UP 状态，就说明成功了。\n\n![](prome-node.png)\n\n\n\n<br>\n\n\n\n# 使用daemonize方式将服务放入后台运行\n\ndaemonize是Unix系统后台守护进程管理软件，他更加正规，后台运行更加稳定。它是通过用户的启动脚本来启动后台进程。\n\n\n\n## 安装daemonize\n\n```bash\n$ yum install -y gcc \n$ git clone git://github.com/bmc/daemonize.git \n$ cd daemonize \n$ sh configure \n$ make && make install\n```\n\n\n\n\n\n## 设置启动脚本\n\n```bash\n#!/bin/bash \n\n/usr/local/prometheus/prometheus --config.file=\"/usr/local/prometheus/prometheus.yml\" --web.listen-address=\"0.0.0.0:9090\" --web.read-timeout=5m --web.max-connections=10 --storage.tsdb.re tention=15d --storage.tsdb.path=\"/data/\" --query.max-concurrency=20 --query.timeout=2m --web.enable-lifecycle\n```\n\n\n\n>  将上边的脚本保存到一个文件，例如我的是 `/root/prometheus-up.sh`  ，需要给这个脚本添加可执行权限。\n\n\n\n\n\n## 运行后台服务\n\n```bash\n$ daemonize -c /root/ /root/prometheus-up.sh \n$ ps -ef | grep -v grep | grep peometheus\n```\n\n\n\n>  node_exporter同理，按照上边的配置即可。node_exporter有一些默认不开启的监控项可以在其github主页找到，并在启动的时候开启。\n\n\n\n<br>\n\n\n\n# 部署grafana\n\n## 下载rpm包\n\n可以从 grafana 官网获 https://grafana.com/grafana/download  取在最新的rpm包进行安装，这里我使用的是 6.5.2 版本：\n\n```bash\n$ wget https://dl.grafana.com/oss/release/grafana-6.5.2-1.x86_64.rpm\n```\n\n\n\n\n\n## 安装grafana\n\n```bash\n$ yum localinstall -y grafana-6.5.2-1.x86_64.rpm\n```\n\n\n\n\n\n## 启动grafana\n\n```bash\n$ systemctl start grafana-server \n$ systemctl enable grafana-server\n```\n\n\n\n\n\n## 验证\n\ngrafana默认监听在 3000端口：\n\n```bash\n$ netstat -ntlp | grep grafana \ntcp6       0      0 :::3000                 :::*                    LISTEN      15939/grafana-serve\n```\n\n\n\n然后通过浏览器访问本机的3000端口，输入默认密码：admin/admin，并且更改一下密码就可以进入grafana的主界面：\n\n![](grafana.png)\n\n\n\n## 添加数据源\n\n第一次进入grafana，会要求添加一个数据源，在之前我已经部署好了 prometheus，地址为`192.168.1.106:9090`，所以这里我添加这个数据源。\n\n\n\n点击` Add data source` ，在数据源类型中选择prometheus进入编辑表单，单后填入如下的内容：\n\n![](datasource.png)\n\n\n\n> 没有特殊要求的话，填入名称和url即可。\n\n\n\n然后点击下边的 `save and test `进行连通性测试，当出现 `Data source is working` 的时候表示添成功。\n\n\n\n可以在左侧侧边栏的 `Configconfiguration` 按钮下管理已经添加的数据源：\n\n![](config.png)\n\n\n\n## 添加图表\n\n点击 `New dashboard `，然后选择 `Add Query ` ，此时我们创建了一张空的图表：\n\n![](empdash.png)\n\n\n\n下方是关于图表的一些配置信息，包括名称、数据源、计算公式等，这里以之前计算cpu使用率为例，来绘制图表，cpu使用率计算公式如下：\n\n```bash\n(1- (sum(increase(node_cpu_seconds_total{mode=\"idle\"}[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100\n```\n\n\n\n首先我们需要填入数据源和公式：\n\n![](1.png)\n\n\n\n然后进入下一步，设置图表类型以及X和Y轴：\n\n![](2.png)\n\n![](3.png)\n\n\n\n最后，设置一下图表标题：\n\n![](4.png)\n\n\n\n这样，一张图表就添加完成了：\n\n![](5.png)\n\n\n\n\n\n","slug":"部署Prometheus和node-exporter","published":1,"updated":"2020-09-05T10:42:48.705Z","_id":"cke0pl0zi00008fn00h0w74gp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"时间同步\"><a href=\"#时间同步\" class=\"headerlink\" title=\"时间同步\"></a>时间同步</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y ntpdate </span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-timezone Asia/Shanghai </span><br><span class=\"line\">$ ntpdate -u cn.pool.ntp.org </span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"* * * * * /usr/sbin/ntpdate -u cn.pool.ntp.org &gt;dev/null &amp;\"</span> &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装Prometheus\"><a href=\"#安装Prometheus\" class=\"headerlink\" title=\"安装Prometheus\"></a>安装Prometheus</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>到prometheus的官网：<a href=\"https://prometheus.io/download/，\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/download/，</a> 下载最新的版本，这里使用的是2.14.0：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/prometheus/releases/download/v2.14.0/prometheus-2.14.0.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxf prometheus-2.14.0.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/prometheus </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ mv prometheus-2.14.0.linux-amd64/ prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>进入到prometheus目录下直接执行名为 prometheus 的二进制文件即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/prometheus </span><br><span class=\"line\">$ ./prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 当出现<code>Server is ready to receive web requests</code>的时候，说明prometheus已经启动成功。</p>\n</blockquote>\n<p>这种方式是前台启动方式，如果要放在后台运行可以执行如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nuhup ./prometheus &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用prometheus命令启动的时候还支持以下的参数：</p>\n<ul>\n<li><code>--config.file=&quot;/usr/local/prometheus/prometheus.yml&quot;</code>：指定配置文件位置；</li>\n<li><code>--web.read-timeout=5m</code>：获取数据时请求链接的最大等待时间，防止过多空闲链接浪费资源；</li>\n<li><code>--web.max-connections=512</code>：获取数据时最多的连接数；</li>\n<li><code>--storage.tsdb.retention=15d</code>：数据保留期限；</li>\n<li><code>--storage.tsdb.path=&quot;/data&quot;</code>：数据存储目录；</li>\n<li><code>--query.timeout=2m</code>：查询数据超时时间；</li>\n<li><code>--query.max-concurrency=20</code>：最大并发查询量； </li>\n<li><code>--web.enable-lifecycle</code>：热加载配置，支持通过命令 <code>curl -X POST http://localhost:9090/-/reload</code>的方式动态加载配置，而不用重启服务；</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>启动后，prometheus默认监听 9090 端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep prome </span><br><span class=\"line\">tcp6       0      0 :::9090                 :::*                    LISTEN      7898/./prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后可以打来浏览器访问本机的9090端口，就可以进入如下页面：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"prome-web.png\" alt=\"\"></p>\n<blockquote>\n<p>prometheus本身是没有账号密码验证的，可以使用nginx的httppass等方式间接进行验证</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"安装node-exporter\"><a href=\"#安装node-exporter\" class=\"headerlink\" title=\"安装node_exporter\"></a>安装node_exporter</h1><h2 id=\"下载-1\"><a href=\"#下载-1\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>到prometheus的官网：<a href=\"https://prometheus.io/download/，\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/download/，</a> 下载最新的版本，这里使用的是0.18.1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxf node_exporter-0.18.1.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span> </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ mv node_exporter-0.18.1.linux-amd64 node_exporter</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/node_exporter </span><br><span class=\"line\">$ ./node_exporter</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>当出现 <code>Listening on :9100</code>  的时候表明启动成功了。</p>\n</blockquote>\n<p>这样是前台启动的方式，想要放到后台启动，可以使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nobup ./node_exporter &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"验证-1\"><a href=\"#验证-1\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>node_exporter默认工作在9100端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep node_exp </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      8647/./node_exporte</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以通过curl访问本机9100端口查看node_exporter的监控项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl localhost:9100/metrics</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"配置prometheus\"><a href=\"#配置prometheus\" class=\"headerlink\" title=\"配置prometheus\"></a>配置prometheus</h1><p>配置文件位于解压后的目录，和启动程序同级。prometheus启动后会加载配置文件<code>prometheus.yml</code>。下面介绍下配置文件中的内容：</p>\n<h2 id=\"global全局配置\"><a href=\"#global全局配置\" class=\"headerlink\" title=\"global全局配置\"></a>global全局配置</h2><ul>\n<li><code>scrape_interval</code>：数据采集时间间隔，默认是15秒；</li>\n<li><code>evaluation_interval</code>：监控规则执行频率，默认15秒；</li>\n</ul>\n<h2 id=\"alerting\"><a href=\"#alerting\" class=\"headerlink\" title=\"alerting\"></a>alerting</h2><p>报警相关配置，prometheus支持使用alertmanager进行报警，就在这里配置。当然也可以在grafana中配置报警。</p>\n<h2 id=\"scrape-configs\"><a href=\"#scrape-configs\" class=\"headerlink\" title=\"scrape_configs\"></a>scrape_configs</h2><p>这里定义的是数据抓取相关配置。</p>\n<ul>\n<li><code>job_name</code>：任务名称；</li>\n<li><code>static_config</code>：任务配置；<ul>\n<li><code>targets</code>：任务目标位置（一般是ip+端口），可以并行写多个，逗号分隔；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加node-exporter任务\"><a href=\"#添加node-exporter任务\" class=\"headerlink\" title=\"添加node_exporter任务\"></a>添加node_exporter任务</h2><p>在上边已经部署了node_exporter，那么这里我可以新增一个任务，然后指定目标为node_exporter，于是在  prometheus.yml 文件中添加如下的内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'node_exporter'</span>    </span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span>    </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">['192.168.1.106:9100']</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里新增了一个叫 <code>node_exporter</code> 的任务，目标为部署有node_exporter服务的服务器的9100端口；</p>\n<p>重启prometheus：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -9 $(ps x | grep prome | grep -v grep | awk <span class=\"string\">'&#123;print $1&#125;'</span>) </span><br><span class=\"line\">$ nohup ./prometheus &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者通过下面的命令动态加载配置</span></span><br><span class=\"line\">$ curl -X POST http://localhost:9090/-/reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后进入prometheus的页面，点击 <code>status --&gt; targets</code>，看到定义的任务 node_exporter 如果是 UP 状态，就说明成功了。</p>\n<p><img src= \"/img/loading.gif\" data-src=\"prome-node.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"使用daemonize方式将服务放入后台运行\"><a href=\"#使用daemonize方式将服务放入后台运行\" class=\"headerlink\" title=\"使用daemonize方式将服务放入后台运行\"></a>使用daemonize方式将服务放入后台运行</h1><p>daemonize是Unix系统后台守护进程管理软件，他更加正规，后台运行更加稳定。它是通过用户的启动脚本来启动后台进程。</p>\n<h2 id=\"安装daemonize\"><a href=\"#安装daemonize\" class=\"headerlink\" title=\"安装daemonize\"></a>安装daemonize</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc </span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/bmc/daemonize.git </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> daemonize </span><br><span class=\"line\">$ sh configure </span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"设置启动脚本\"><a href=\"#设置启动脚本\" class=\"headerlink\" title=\"设置启动脚本\"></a>设置启动脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/prometheus/prometheus --config.file=<span class=\"string\">\"/usr/local/prometheus/prometheus.yml\"</span> --web.listen-address=<span class=\"string\">\"0.0.0.0:9090\"</span> --web.read-timeout=5m --web.max-connections=10 --storage.tsdb.re tention=15d --storage.tsdb.path=<span class=\"string\">\"/data/\"</span> --query.max-concurrency=20 --query.timeout=2m --web.enable-lifecycle</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 将上边的脚本保存到一个文件，例如我的是 <code>/root/prometheus-up.sh</code>  ，需要给这个脚本添加可执行权限。</p>\n</blockquote>\n<h2 id=\"运行后台服务\"><a href=\"#运行后台服务\" class=\"headerlink\" title=\"运行后台服务\"></a>运行后台服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ daemonize -c /root/ /root/prometheus-up.sh </span><br><span class=\"line\">$ ps -ef | grep -v grep | grep peometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> node_exporter同理，按照上边的配置即可。node_exporter有一些默认不开启的监控项可以在其github主页找到，并在启动的时候开启。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署grafana\"><a href=\"#部署grafana\" class=\"headerlink\" title=\"部署grafana\"></a>部署grafana</h1><h2 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h2><p>可以从 grafana 官网获 <a href=\"https://grafana.com/grafana/download\" target=\"_blank\" rel=\"noopener\">https://grafana.com/grafana/download</a>  取在最新的rpm包进行安装，这里我使用的是 6.5.2 版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://dl.grafana.com/oss/release/grafana-6.5.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"安装grafana\"><a href=\"#安装grafana\" class=\"headerlink\" title=\"安装grafana\"></a>安装grafana</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum localinstall -y grafana-6.5.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"启动grafana\"><a href=\"#启动grafana\" class=\"headerlink\" title=\"启动grafana\"></a>启动grafana</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start grafana-server </span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> grafana-server</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"验证-2\"><a href=\"#验证-2\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>grafana默认监听在 3000端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep grafana </span><br><span class=\"line\">tcp6       0      0 :::3000                 :::*                    LISTEN      15939/grafana-serve</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后通过浏览器访问本机的3000端口，输入默认密码：admin/admin，并且更改一下密码就可以进入grafana的主界面：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"grafana.png\" alt=\"\"></p>\n<h2 id=\"添加数据源\"><a href=\"#添加数据源\" class=\"headerlink\" title=\"添加数据源\"></a>添加数据源</h2><p>第一次进入grafana，会要求添加一个数据源，在之前我已经部署好了 prometheus，地址为<code>192.168.1.106:9090</code>，所以这里我添加这个数据源。</p>\n<p>点击<code>Add data source</code> ，在数据源类型中选择prometheus进入编辑表单，单后填入如下的内容：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"datasource.png\" alt=\"\"></p>\n<blockquote>\n<p>没有特殊要求的话，填入名称和url即可。</p>\n</blockquote>\n<p>然后点击下边的 <code>save and test</code>进行连通性测试，当出现 <code>Data source is working</code> 的时候表示添成功。</p>\n<p>可以在左侧侧边栏的 <code>Configconfiguration</code> 按钮下管理已经添加的数据源：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"config.png\" alt=\"\"></p>\n<h2 id=\"添加图表\"><a href=\"#添加图表\" class=\"headerlink\" title=\"添加图表\"></a>添加图表</h2><p>点击 <code>New dashboard</code>，然后选择 <code>Add Query</code> ，此时我们创建了一张空的图表：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"empdash.png\" alt=\"\"></p>\n<p>下方是关于图表的一些配置信息，包括名称、数据源、计算公式等，这里以之前计算cpu使用率为例，来绘制图表，cpu使用率计算公式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1- (sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"idle\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先我们需要填入数据源和公式：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"1.png\" alt=\"\"></p>\n<p>然后进入下一步，设置图表类型以及X和Y轴：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"2.png\" alt=\"\"></p>\n<p><img src= \"/img/loading.gif\" data-src=\"3.png\" alt=\"\"></p>\n<p>最后，设置一下图表标题：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"4.png\" alt=\"\"></p>\n<p>这样，一张图表就添加完成了：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"5.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"时间同步\"><a href=\"#时间同步\" class=\"headerlink\" title=\"时间同步\"></a>时间同步</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y ntpdate </span><br><span class=\"line\">$ timedatectl <span class=\"built_in\">set</span>-timezone Asia/Shanghai </span><br><span class=\"line\">$ ntpdate -u cn.pool.ntp.org </span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"* * * * * /usr/sbin/ntpdate -u cn.pool.ntp.org &gt;dev/null &amp;\"</span> &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"安装Prometheus\"><a href=\"#安装Prometheus\" class=\"headerlink\" title=\"安装Prometheus\"></a>安装Prometheus</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>到prometheus的官网：<a href=\"https://prometheus.io/download/，\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/download/，</a> 下载最新的版本，这里使用的是2.14.0：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/prometheus/releases/download/v2.14.0/prometheus-2.14.0.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxf prometheus-2.14.0.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/prometheus </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ mv prometheus-2.14.0.linux-amd64/ prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>进入到prometheus目录下直接执行名为 prometheus 的二进制文件即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/prometheus </span><br><span class=\"line\">$ ./prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 当出现<code>Server is ready to receive web requests</code>的时候，说明prometheus已经启动成功。</p>\n</blockquote>\n<p>这种方式是前台启动方式，如果要放在后台运行可以执行如下的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nuhup ./prometheus &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用prometheus命令启动的时候还支持以下的参数：</p>\n<ul>\n<li><code>--config.file=&quot;/usr/local/prometheus/prometheus.yml&quot;</code>：指定配置文件位置；</li>\n<li><code>--web.read-timeout=5m</code>：获取数据时请求链接的最大等待时间，防止过多空闲链接浪费资源；</li>\n<li><code>--web.max-connections=512</code>：获取数据时最多的连接数；</li>\n<li><code>--storage.tsdb.retention=15d</code>：数据保留期限；</li>\n<li><code>--storage.tsdb.path=&quot;/data&quot;</code>：数据存储目录；</li>\n<li><code>--query.timeout=2m</code>：查询数据超时时间；</li>\n<li><code>--query.max-concurrency=20</code>：最大并发查询量； </li>\n<li><code>--web.enable-lifecycle</code>：热加载配置，支持通过命令 <code>curl -X POST http://localhost:9090/-/reload</code>的方式动态加载配置，而不用重启服务；</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>启动后，prometheus默认监听 9090 端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep prome </span><br><span class=\"line\">tcp6       0      0 :::9090                 :::*                    LISTEN      7898/./prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后可以打来浏览器访问本机的9090端口，就可以进入如下页面：</p>\n<p><img src=\"prome-web.png\" alt=\"\"></p>\n<blockquote>\n<p>prometheus本身是没有账号密码验证的，可以使用nginx的httppass等方式间接进行验证</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"安装node-exporter\"><a href=\"#安装node-exporter\" class=\"headerlink\" title=\"安装node_exporter\"></a>安装node_exporter</h1><h2 id=\"下载-1\"><a href=\"#下载-1\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>到prometheus的官网：<a href=\"https://prometheus.io/download/，\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/download/，</a> 下载最新的版本，这里使用的是0.18.1：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxf node_exporter-0.18.1.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span> </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ mv node_exporter-0.18.1.linux-amd64 node_exporter</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/node_exporter </span><br><span class=\"line\">$ ./node_exporter</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>当出现 <code>Listening on :9100</code>  的时候表明启动成功了。</p>\n</blockquote>\n<p>这样是前台启动的方式，想要放到后台启动，可以使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nobup ./node_exporter &amp;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"验证-1\"><a href=\"#验证-1\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>node_exporter默认工作在9100端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep node_exp </span><br><span class=\"line\">tcp6       0      0 :::9100                 :::*                    LISTEN      8647/./node_exporte</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以通过curl访问本机9100端口查看node_exporter的监控项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl localhost:9100/metrics</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"配置prometheus\"><a href=\"#配置prometheus\" class=\"headerlink\" title=\"配置prometheus\"></a>配置prometheus</h1><p>配置文件位于解压后的目录，和启动程序同级。prometheus启动后会加载配置文件<code>prometheus.yml</code>。下面介绍下配置文件中的内容：</p>\n<h2 id=\"global全局配置\"><a href=\"#global全局配置\" class=\"headerlink\" title=\"global全局配置\"></a>global全局配置</h2><ul>\n<li><code>scrape_interval</code>：数据采集时间间隔，默认是15秒；</li>\n<li><code>evaluation_interval</code>：监控规则执行频率，默认15秒；</li>\n</ul>\n<h2 id=\"alerting\"><a href=\"#alerting\" class=\"headerlink\" title=\"alerting\"></a>alerting</h2><p>报警相关配置，prometheus支持使用alertmanager进行报警，就在这里配置。当然也可以在grafana中配置报警。</p>\n<h2 id=\"scrape-configs\"><a href=\"#scrape-configs\" class=\"headerlink\" title=\"scrape_configs\"></a>scrape_configs</h2><p>这里定义的是数据抓取相关配置。</p>\n<ul>\n<li><code>job_name</code>：任务名称；</li>\n<li><code>static_config</code>：任务配置；<ul>\n<li><code>targets</code>：任务目标位置（一般是ip+端口），可以并行写多个，逗号分隔；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"添加node-exporter任务\"><a href=\"#添加node-exporter任务\" class=\"headerlink\" title=\"添加node_exporter任务\"></a>添加node_exporter任务</h2><p>在上边已经部署了node_exporter，那么这里我可以新增一个任务，然后指定目标为node_exporter，于是在  prometheus.yml 文件中添加如下的内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'node_exporter'</span>    </span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span>    </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">['192.168.1.106:9100']</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里新增了一个叫 <code>node_exporter</code> 的任务，目标为部署有node_exporter服务的服务器的9100端口；</p>\n<p>重启prometheus：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">kill</span> -9 $(ps x | grep prome | grep -v grep | awk <span class=\"string\">'&#123;print $1&#125;'</span>) </span><br><span class=\"line\">$ nohup ./prometheus &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者通过下面的命令动态加载配置</span></span><br><span class=\"line\">$ curl -X POST http://localhost:9090/-/reload</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后进入prometheus的页面，点击 <code>status --&gt; targets</code>，看到定义的任务 node_exporter 如果是 UP 状态，就说明成功了。</p>\n<p><img src=\"prome-node.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"使用daemonize方式将服务放入后台运行\"><a href=\"#使用daemonize方式将服务放入后台运行\" class=\"headerlink\" title=\"使用daemonize方式将服务放入后台运行\"></a>使用daemonize方式将服务放入后台运行</h1><p>daemonize是Unix系统后台守护进程管理软件，他更加正规，后台运行更加稳定。它是通过用户的启动脚本来启动后台进程。</p>\n<h2 id=\"安装daemonize\"><a href=\"#安装daemonize\" class=\"headerlink\" title=\"安装daemonize\"></a>安装daemonize</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y gcc </span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/bmc/daemonize.git </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> daemonize </span><br><span class=\"line\">$ sh configure </span><br><span class=\"line\">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"设置启动脚本\"><a href=\"#设置启动脚本\" class=\"headerlink\" title=\"设置启动脚本\"></a>设置启动脚本</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash </span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/prometheus/prometheus --config.file=<span class=\"string\">\"/usr/local/prometheus/prometheus.yml\"</span> --web.listen-address=<span class=\"string\">\"0.0.0.0:9090\"</span> --web.read-timeout=5m --web.max-connections=10 --storage.tsdb.re tention=15d --storage.tsdb.path=<span class=\"string\">\"/data/\"</span> --query.max-concurrency=20 --query.timeout=2m --web.enable-lifecycle</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 将上边的脚本保存到一个文件，例如我的是 <code>/root/prometheus-up.sh</code>  ，需要给这个脚本添加可执行权限。</p>\n</blockquote>\n<h2 id=\"运行后台服务\"><a href=\"#运行后台服务\" class=\"headerlink\" title=\"运行后台服务\"></a>运行后台服务</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ daemonize -c /root/ /root/prometheus-up.sh </span><br><span class=\"line\">$ ps -ef | grep -v grep | grep peometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> node_exporter同理，按照上边的配置即可。node_exporter有一些默认不开启的监控项可以在其github主页找到，并在启动的时候开启。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"部署grafana\"><a href=\"#部署grafana\" class=\"headerlink\" title=\"部署grafana\"></a>部署grafana</h1><h2 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h2><p>可以从 grafana 官网获 <a href=\"https://grafana.com/grafana/download\" target=\"_blank\" rel=\"noopener\">https://grafana.com/grafana/download</a>  取在最新的rpm包进行安装，这里我使用的是 6.5.2 版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://dl.grafana.com/oss/release/grafana-6.5.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"安装grafana\"><a href=\"#安装grafana\" class=\"headerlink\" title=\"安装grafana\"></a>安装grafana</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum localinstall -y grafana-6.5.2-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"启动grafana\"><a href=\"#启动grafana\" class=\"headerlink\" title=\"启动grafana\"></a>启动grafana</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start grafana-server </span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> grafana-server</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"验证-2\"><a href=\"#验证-2\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>grafana默认监听在 3000端口：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ netstat -ntlp | grep grafana </span><br><span class=\"line\">tcp6       0      0 :::3000                 :::*                    LISTEN      15939/grafana-serve</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后通过浏览器访问本机的3000端口，输入默认密码：admin/admin，并且更改一下密码就可以进入grafana的主界面：</p>\n<p><img src=\"grafana.png\" alt=\"\"></p>\n<h2 id=\"添加数据源\"><a href=\"#添加数据源\" class=\"headerlink\" title=\"添加数据源\"></a>添加数据源</h2><p>第一次进入grafana，会要求添加一个数据源，在之前我已经部署好了 prometheus，地址为<code>192.168.1.106:9090</code>，所以这里我添加这个数据源。</p>\n<p>点击<code>Add data source</code> ，在数据源类型中选择prometheus进入编辑表单，单后填入如下的内容：</p>\n<p><img src=\"datasource.png\" alt=\"\"></p>\n<blockquote>\n<p>没有特殊要求的话，填入名称和url即可。</p>\n</blockquote>\n<p>然后点击下边的 <code>save and test</code>进行连通性测试，当出现 <code>Data source is working</code> 的时候表示添成功。</p>\n<p>可以在左侧侧边栏的 <code>Configconfiguration</code> 按钮下管理已经添加的数据源：</p>\n<p><img src=\"config.png\" alt=\"\"></p>\n<h2 id=\"添加图表\"><a href=\"#添加图表\" class=\"headerlink\" title=\"添加图表\"></a>添加图表</h2><p>点击 <code>New dashboard</code>，然后选择 <code>Add Query</code> ，此时我们创建了一张空的图表：</p>\n<p><img src=\"empdash.png\" alt=\"\"></p>\n<p>下方是关于图表的一些配置信息，包括名称、数据源、计算公式等，这里以之前计算cpu使用率为例，来绘制图表，cpu使用率计算公式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1- (sum(increase(node_cpu_seconds_total&#123;mode=<span class=\"string\">\"idle\"</span>&#125;[1m])) by (instance) / (sum(increase(node_cpu_seconds_total[1m])) by (instance)))) *  100</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先我们需要填入数据源和公式：</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>然后进入下一步，设置图表类型以及X和Y轴：</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<p><img src=\"3.png\" alt=\"\"></p>\n<p>最后，设置一下图表标题：</p>\n<p><img src=\"4.png\" alt=\"\"></p>\n<p>这样，一张图表就添加完成了：</p>\n<p><img src=\"5.png\" alt=\"\"></p>\n"},{"title":"Pushgateway推送监控数据","date":"2020-08-19T02:26:50.000Z","description":"安装pushgateway并推送监控数据到prometheus","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597814166939&di=040c0d65c32b1f502c394b6075c7b571&imgtype=0&src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-b18dd8a0cc614843760160720400d281_1200x500.jpg","_content":"\n\n\n# pushgateway介绍\n\npushgateway是一种采用push方式向prometheus推送监控数据的插件，它可以单独运行在任何节点上。\n\n\n\n用户通过自定义脚本，把需要监控的数据发送到pushgateway，pushgateway再把数据推送到prometheus。\n\n- pushgteway会形成一个单点瓶颈，如果有多个采集脚本向一个pushgateway发送数据，一旦pushgateway挂了，监控数据就没了；   \n- pushgateway本身还是很稳定的，需要保证服务器不宕机基本没问题，只不过单点的话速度会慢；\n- pushgateway不能对采集脚本发送的数据进行智能判断； 对监控数据采集脚本质量要求高；\n\n\n\n<br>\n\n\n\n\n\n# 安装pushgateway\n\n## 下载\n\n可以在prometheus官网 https://prometheus.io/download/  找到pushgateway最新的安装包，这里我使用的是1.0.0版本：\n\n```bash\n$ wget https://github.com/prometheus/pushgateway/releases/download/v1.0.0/pushgateway-1.0.0.linux-amd64.tar.gz \n$ tar zxf pushgateway-1.0.0.linux-amd64.tar.gz -C /usr/local/ \n$ cd /usr/local/ \n$ mv pushgateway-1.0.0 pushgateway\n```\n\n\n\n## prometheus配置pushgateway\n\n编辑prometheus配置文件，增加如下内容，添加job：\n\n```yaml\n- job_name: 'pushgateway'  \n  static_configs:    \n  - targets: ['192.168.1.106:9091']\n```\n\n\n\n>  更新完配置后重启prometheus。\n\n\n\n\n\n## 运行pushgateway\n\n这里使用daemonize将其放入后台运行，首先编写脚本 `pushgateway-up.sh`：\n\n```shell\n#!/bin/bash \n\n/usr/local/pushgateway/pushgateway --web.listen-address=\"0.0.0.0:9091\"\n```\n\n\n\n后台运行：\n\n```bash\n$ chmod +x pushgateway-up.sh \n$ daemonize -c /root/ /root/pushgateway-up.sh\n```\n\n\n\n## 验证\n\n```bash\n$ ps -ef | grep -v grep | grep pushgateway \n$ netstat -ntlp | grep pushgateway\n```\n\n\n\n<br>\n\n\n\n\n\n# 推送数据到pushgateawy\n\n## 编写脚本\n\n首先编写一个脚本，这里是以获取`wati_connection`为例：\n\n```shell\n#!/bin/bash \n\ninstance_name=`hostname` \nlabel=\"count_netstat_wait_connections\" \n\nif [ $instance_name == 'localhost' ];then    \n    echo \"Must FQDN | HOSTNAME\"    \n    exit 1 \nfi \n\ncount_netstat_wait_connections=`netstat -an | grep -i wait | wc -l` \necho \"$label:$count_netstat_wait_connections\" \n\necho \"$label count_netstat_wait_connections\" | curl --data-binary @- http://192.168.1.106:9091/metrics/job/pushgateway/instance/$instance_name\n```\n\n\n\n在curl发送数据的url中比较重要的几个点：\n\n- `job/pushgateway`：是prometheus中定义的job名称，我之前定义的是`pushgateway`，如果是其他名称请改动；\n- `$instance_name`：不能为localhost，否则无法区分；\n\n\n\n\n\n## 运行脚本\n\n需要结合crontab定期运行脚本：\n\n```bash\n$ echo \"* * * * * sh wait_connection.sh > /dev/null &\" >> /var/spool/cron/root\n```\n\n\n\n>  crontab最小默认是1分钟一次，可以结合sleep实现每秒运行。\n\n\n\n\n\n","source":"_posts/Pushgateway推送监控数据.md","raw":"---\ntitle: Pushgateway推送监控数据\ndate: 2020-08-19 10:26:50\ntags:\n- Prometheus\ncategories:\n- Prometheus\ndescription: 安装pushgateway并推送监控数据到prometheus\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1597814166939&di=040c0d65c32b1f502c394b6075c7b571&imgtype=0&src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-b18dd8a0cc614843760160720400d281_1200x500.jpg\n---\n\n\n\n# pushgateway介绍\n\npushgateway是一种采用push方式向prometheus推送监控数据的插件，它可以单独运行在任何节点上。\n\n\n\n用户通过自定义脚本，把需要监控的数据发送到pushgateway，pushgateway再把数据推送到prometheus。\n\n- pushgteway会形成一个单点瓶颈，如果有多个采集脚本向一个pushgateway发送数据，一旦pushgateway挂了，监控数据就没了；   \n- pushgateway本身还是很稳定的，需要保证服务器不宕机基本没问题，只不过单点的话速度会慢；\n- pushgateway不能对采集脚本发送的数据进行智能判断； 对监控数据采集脚本质量要求高；\n\n\n\n<br>\n\n\n\n\n\n# 安装pushgateway\n\n## 下载\n\n可以在prometheus官网 https://prometheus.io/download/  找到pushgateway最新的安装包，这里我使用的是1.0.0版本：\n\n```bash\n$ wget https://github.com/prometheus/pushgateway/releases/download/v1.0.0/pushgateway-1.0.0.linux-amd64.tar.gz \n$ tar zxf pushgateway-1.0.0.linux-amd64.tar.gz -C /usr/local/ \n$ cd /usr/local/ \n$ mv pushgateway-1.0.0 pushgateway\n```\n\n\n\n## prometheus配置pushgateway\n\n编辑prometheus配置文件，增加如下内容，添加job：\n\n```yaml\n- job_name: 'pushgateway'  \n  static_configs:    \n  - targets: ['192.168.1.106:9091']\n```\n\n\n\n>  更新完配置后重启prometheus。\n\n\n\n\n\n## 运行pushgateway\n\n这里使用daemonize将其放入后台运行，首先编写脚本 `pushgateway-up.sh`：\n\n```shell\n#!/bin/bash \n\n/usr/local/pushgateway/pushgateway --web.listen-address=\"0.0.0.0:9091\"\n```\n\n\n\n后台运行：\n\n```bash\n$ chmod +x pushgateway-up.sh \n$ daemonize -c /root/ /root/pushgateway-up.sh\n```\n\n\n\n## 验证\n\n```bash\n$ ps -ef | grep -v grep | grep pushgateway \n$ netstat -ntlp | grep pushgateway\n```\n\n\n\n<br>\n\n\n\n\n\n# 推送数据到pushgateawy\n\n## 编写脚本\n\n首先编写一个脚本，这里是以获取`wati_connection`为例：\n\n```shell\n#!/bin/bash \n\ninstance_name=`hostname` \nlabel=\"count_netstat_wait_connections\" \n\nif [ $instance_name == 'localhost' ];then    \n    echo \"Must FQDN | HOSTNAME\"    \n    exit 1 \nfi \n\ncount_netstat_wait_connections=`netstat -an | grep -i wait | wc -l` \necho \"$label:$count_netstat_wait_connections\" \n\necho \"$label count_netstat_wait_connections\" | curl --data-binary @- http://192.168.1.106:9091/metrics/job/pushgateway/instance/$instance_name\n```\n\n\n\n在curl发送数据的url中比较重要的几个点：\n\n- `job/pushgateway`：是prometheus中定义的job名称，我之前定义的是`pushgateway`，如果是其他名称请改动；\n- `$instance_name`：不能为localhost，否则无法区分；\n\n\n\n\n\n## 运行脚本\n\n需要结合crontab定期运行脚本：\n\n```bash\n$ echo \"* * * * * sh wait_connection.sh > /dev/null &\" >> /var/spool/cron/root\n```\n\n\n\n>  crontab最小默认是1分钟一次，可以结合sleep实现每秒运行。\n\n\n\n\n\n","slug":"Pushgateway推送监控数据","published":1,"updated":"2020-08-19T02:37:29.115Z","_id":"cke0rb7az0000k6n01j9g2a32","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"pushgateway介绍\"><a href=\"#pushgateway介绍\" class=\"headerlink\" title=\"pushgateway介绍\"></a>pushgateway介绍</h1><p>pushgateway是一种采用push方式向prometheus推送监控数据的插件，它可以单独运行在任何节点上。</p>\n<p>用户通过自定义脚本，把需要监控的数据发送到pushgateway，pushgateway再把数据推送到prometheus。</p>\n<ul>\n<li>pushgteway会形成一个单点瓶颈，如果有多个采集脚本向一个pushgateway发送数据，一旦pushgateway挂了，监控数据就没了；   </li>\n<li>pushgateway本身还是很稳定的，需要保证服务器不宕机基本没问题，只不过单点的话速度会慢；</li>\n<li>pushgateway不能对采集脚本发送的数据进行智能判断； 对监控数据采集脚本质量要求高；</li>\n</ul>\n<br>\n\n\n\n\n\n<h1 id=\"安装pushgateway\"><a href=\"#安装pushgateway\" class=\"headerlink\" title=\"安装pushgateway\"></a>安装pushgateway</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>可以在prometheus官网 <a href=\"https://prometheus.io/download/\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/download/</a>  找到pushgateway最新的安装包，这里我使用的是1.0.0版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/pushgateway/releases/download/v1.0.0/pushgateway-1.0.0.linux-amd64.tar.gz </span><br><span class=\"line\">$ tar zxf pushgateway-1.0.0.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ mv pushgateway-1.0.0 pushgateway</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"prometheus配置pushgateway\"><a href=\"#prometheus配置pushgateway\" class=\"headerlink\" title=\"prometheus配置pushgateway\"></a>prometheus配置pushgateway</h2><p>编辑prometheus配置文件，增加如下内容，添加job：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'pushgateway'</span>  </span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span>    </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">['192.168.1.106:9091']</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 更新完配置后重启prometheus。</p>\n</blockquote>\n<h2 id=\"运行pushgateway\"><a href=\"#运行pushgateway\" class=\"headerlink\" title=\"运行pushgateway\"></a>运行pushgateway</h2><p>这里使用daemonize将其放入后台运行，首先编写脚本 <code>pushgateway-up.sh</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash </span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/pushgateway/pushgateway --web.listen-address=\"0.0.0.0:9091\"</span><br></pre></td></tr></table></figure>\n\n\n\n<p>后台运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x pushgateway-up.sh </span><br><span class=\"line\">$ daemonize -c /root/ /root/pushgateway-up.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ef | grep -v grep | grep pushgateway </span><br><span class=\"line\">$ netstat -ntlp | grep pushgateway</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n\n\n<h1 id=\"推送数据到pushgateawy\"><a href=\"#推送数据到pushgateawy\" class=\"headerlink\" title=\"推送数据到pushgateawy\"></a>推送数据到pushgateawy</h1><h2 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h2><p>首先编写一个脚本，这里是以获取<code>wati_connection</code>为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash </span></span><br><span class=\"line\"></span><br><span class=\"line\">instance_name=`hostname` </span><br><span class=\"line\">label=\"count_netstat_wait_connections\" </span><br><span class=\"line\"></span><br><span class=\"line\">if [ $instance_name == 'localhost' ];then    </span><br><span class=\"line\">    echo \"Must FQDN | HOSTNAME\"    </span><br><span class=\"line\">    exit 1 </span><br><span class=\"line\">fi </span><br><span class=\"line\"></span><br><span class=\"line\">count_netstat_wait_connections=`netstat -an | grep -i wait | wc -l` </span><br><span class=\"line\">echo \"$label:$count_netstat_wait_connections\" </span><br><span class=\"line\"></span><br><span class=\"line\">echo \"$label count_netstat_wait_connections\" | curl --data-binary @- http://192.168.1.106:9091/metrics/job/pushgateway/instance/$instance_name</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在curl发送数据的url中比较重要的几个点：</p>\n<ul>\n<li><code>job/pushgateway</code>：是prometheus中定义的job名称，我之前定义的是<code>pushgateway</code>，如果是其他名称请改动；</li>\n<li><code>$instance_name</code>：不能为localhost，否则无法区分；</li>\n</ul>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>需要结合crontab定期运行脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"* * * * * sh wait_connection.sh &gt; /dev/null &amp;\"</span> &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> crontab最小默认是1分钟一次，可以结合sleep实现每秒运行。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pushgateway介绍\"><a href=\"#pushgateway介绍\" class=\"headerlink\" title=\"pushgateway介绍\"></a>pushgateway介绍</h1><p>pushgateway是一种采用push方式向prometheus推送监控数据的插件，它可以单独运行在任何节点上。</p>\n<p>用户通过自定义脚本，把需要监控的数据发送到pushgateway，pushgateway再把数据推送到prometheus。</p>\n<ul>\n<li>pushgteway会形成一个单点瓶颈，如果有多个采集脚本向一个pushgateway发送数据，一旦pushgateway挂了，监控数据就没了；   </li>\n<li>pushgateway本身还是很稳定的，需要保证服务器不宕机基本没问题，只不过单点的话速度会慢；</li>\n<li>pushgateway不能对采集脚本发送的数据进行智能判断； 对监控数据采集脚本质量要求高；</li>\n</ul>\n<br>\n\n\n\n\n\n<h1 id=\"安装pushgateway\"><a href=\"#安装pushgateway\" class=\"headerlink\" title=\"安装pushgateway\"></a>安装pushgateway</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>可以在prometheus官网 <a href=\"https://prometheus.io/download/\" target=\"_blank\" rel=\"noopener\">https://prometheus.io/download/</a>  找到pushgateway最新的安装包，这里我使用的是1.0.0版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/pushgateway/releases/download/v1.0.0/pushgateway-1.0.0.linux-amd64.tar.gz </span><br><span class=\"line\">$ tar zxf pushgateway-1.0.0.linux-amd64.tar.gz -C /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/ </span><br><span class=\"line\">$ mv pushgateway-1.0.0 pushgateway</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"prometheus配置pushgateway\"><a href=\"#prometheus配置pushgateway\" class=\"headerlink\" title=\"prometheus配置pushgateway\"></a>prometheus配置pushgateway</h2><p>编辑prometheus配置文件，增加如下内容，添加job：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'pushgateway'</span>  </span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span>    </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">['192.168.1.106:9091']</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> 更新完配置后重启prometheus。</p>\n</blockquote>\n<h2 id=\"运行pushgateway\"><a href=\"#运行pushgateway\" class=\"headerlink\" title=\"运行pushgateway\"></a>运行pushgateway</h2><p>这里使用daemonize将其放入后台运行，首先编写脚本 <code>pushgateway-up.sh</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash </span></span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/pushgateway/pushgateway --web.listen-address=\"0.0.0.0:9091\"</span><br></pre></td></tr></table></figure>\n\n\n\n<p>后台运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x pushgateway-up.sh </span><br><span class=\"line\">$ daemonize -c /root/ /root/pushgateway-up.sh</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -ef | grep -v grep | grep pushgateway </span><br><span class=\"line\">$ netstat -ntlp | grep pushgateway</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n\n\n<h1 id=\"推送数据到pushgateawy\"><a href=\"#推送数据到pushgateawy\" class=\"headerlink\" title=\"推送数据到pushgateawy\"></a>推送数据到pushgateawy</h1><h2 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h2><p>首先编写一个脚本，这里是以获取<code>wati_connection</code>为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash </span></span><br><span class=\"line\"></span><br><span class=\"line\">instance_name=`hostname` </span><br><span class=\"line\">label=\"count_netstat_wait_connections\" </span><br><span class=\"line\"></span><br><span class=\"line\">if [ $instance_name == 'localhost' ];then    </span><br><span class=\"line\">    echo \"Must FQDN | HOSTNAME\"    </span><br><span class=\"line\">    exit 1 </span><br><span class=\"line\">fi </span><br><span class=\"line\"></span><br><span class=\"line\">count_netstat_wait_connections=`netstat -an | grep -i wait | wc -l` </span><br><span class=\"line\">echo \"$label:$count_netstat_wait_connections\" </span><br><span class=\"line\"></span><br><span class=\"line\">echo \"$label count_netstat_wait_connections\" | curl --data-binary @- http://192.168.1.106:9091/metrics/job/pushgateway/instance/$instance_name</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在curl发送数据的url中比较重要的几个点：</p>\n<ul>\n<li><code>job/pushgateway</code>：是prometheus中定义的job名称，我之前定义的是<code>pushgateway</code>，如果是其他名称请改动；</li>\n<li><code>$instance_name</code>：不能为localhost，否则无法区分；</li>\n</ul>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>需要结合crontab定期运行脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"* * * * * sh wait_connection.sh &gt; /dev/null &amp;\"</span> &gt;&gt; /var/spool/cron/root</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p> crontab最小默认是1分钟一次，可以结合sleep实现每秒运行。</p>\n</blockquote>\n"},{"title":"[k8s实践系列]Python调用kubernetes API管理Job资源","date":"2020-09-05T08:40:38.000Z","description":"通过python调用kubernetes api管理Job资源。","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599305444011&di=96b260e2ed93814697457e34e01387d5&imgtype=0&src=http%3A%2F%2Fimg2.ctoutiao.com%2Fuploads%2F2016%2F10%2F24%2F1477271707687844.jpg","_content":"\n\n\n**环境基于python3**\n\n---\n\n\n\n\n\n# 安装kubernetes sdk\n\n直接使用pip安装kubernetes sdk即可：\n\n```bash\n$ pip install kubernetes\n```\n\n\n\n<br>\n\n\n\n# 初始化\n\n```python\nfrom kubernetes.client import BatchV1Api\nfrom kubernetes.config import load_kube_config\n\nload_kube_config()\nbatch = BatchV1Api()\n```\n\n\n\n- `load_kube_config`是从`~/.kube/config`加载配置。若使用其他位置的文件，则通过第一个参数传入其路径。\n- `BatchV1Api()`可以当做Job的客户端来用。命名上，Batch和Job是类似的概念，前者强调批量。\n\n\n\n<br>\n\n\n\n\n\n# 通过对象创建job\n\n实例代码：\n\n```python\ndef create_job_object():\n    container = client.V1Container(\n        name=\"pi\",\n        image=\"perl\",\n        command=[\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"])\n    \n    template = client.V1PodTemplateSpec(\n        metadata=client.V1ObjectMeta(labels={\"app\": \"pi\"}),\n        spec=client.V1PodSpec(restart_policy=\"Never\", containers=[container]))\n    \n    spec = client.V1JobSpec(\n        template=template,\n        backoff_limit=4)\n    \n    job = client.V1Job(\n        api_version=\"batch/v1\",\n        kind=\"Job\",\n        metadata=client.V1ObjectMeta(name=JOB_NAME),\n        spec=spec)\n\n    return job\n\n\ndef create_job(api_instance, job):\n    api_response = api_instance.create_namespaced_job(\n        body=job,\n        namespace=\"default\")\n    print(\"Job created. status='%s'\" % str(api_response.status))\n```\n\n<br>\n\n\n\n# 通过yaml创建job\n\n示例yaml：\n\n```yaml\n# job.yaml\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: hello\nspec:\n  template:\n    spec:\n      containers:\n        - name: echo\n          image: alpine:3.11\n          args:\n            - 'echo'\n            - 'Hello world!'\n```\n\n\n\npython读取上边的yaml文件进行创建：\n\n```python\nfrom kubernetes.client import V1Job\nimport yaml\n\nwith open('job.yaml') as file:\n    cfg = yaml.safe_load(file)\njob = batch.create_namespaced_job(namespace='default', body=cfg)\nassert isinstance(job, V1Job)\n```\n\n- 这里返回的`V1Job`只是创建时的状态，但是会包含更多集群中的信息。\n\n\n\n`create_namespaced_job`同样接受字典作为body输入，例如：\n\n```python\ncfg = {\n    'apiVersion': 'batch/v1',\n    'kind': 'Job',\n    'metadata': {\n        'name': 'hello'\n    },\n    'spec': {\n        'template': {\n            'spec': {\n                'restartPolicy':\n                'Never',\n                'containers': [{\n                    'name': 'upload',\n                    'image': 'alpine:3.11',\n                    'args': ['echo', 'Hello world!']\n                }]\n            }\n        }\n    }\n}\nbatch.create_namespaced_job(namespace='default', body=cfg)\n```\n\n\n\n`dict`结构与YAML相同，而又没有类的束缚，所以也很灵活方便。\n\n此外，从YAML读出为`dict`后，也可以通过修改部分字段，达到动态变化的效果。这种结合YAML和dict的使用方式，是对官方用法的最佳替代。\n\n<br>\n\n\n\n# 监控job运行\n\n在创建Job后，通常需要监控Job的运行，做一些外围处理。Kubernetes提供了一个`Watch`机制，通过接收Event，实现对状态变化的掌控。Event只有在状态变化时才会有，所以是非常理想的回调。\n\n```python\nfrom kubernetes.client import V1Job\nfrom kubernetes.watch import Watch\n\njob_name = 'hello'\nwatcher = Watch()\nfor event in watcher.stream(\n        batch.list_namespaced_job,\n        namespace='default',\n        label_selector=f'job-name={job_name}',\n):  \n    assert isinstance(event, dict)\n    job = event['object']\n    assert isinstance(job, V1Job)\n```\n\n\n\n`Watch().stream`就是前面说的理想回调，它第一个参数是列出类的函数，这里选择`list_namespaced_job`。后面的参数，都是`list_namespaced_job`的参数。除了必备的namespace以外，`label_selector也`是一个常用参数，可以避免关注无关的Job。\n\n\n\n每个Job在创建后，都会自动带一个`f'job-name={job_name}'`的Label，可以借此筛选。`job_name`就是`metadata`里设置的`name`，如这里`job-name=hello`。\n\n\n\nevent是一个dict，只有三个值。其中`event['raw_object']`只是`event['object']`的`dict`形式，没有太大意义。`event['type']`常见三个值，对应增删改。\n\n- `ADDED`，创建时的信息，和`create_namespaced_job`的返回值通常没有区别。\n- `MODIFIED`，Job状态变化时的信息。\n- `DELETED`，Job删除时的信息。\n\n以上三个状态值，对其它类型的资源也是通用的，比如Pod、Deployment等。\n\n\n\n<br>\n\n\n\n# 列出Job\n\n列出所有Job的`list_job_for_all_namespaces`不常用，一般只列出指定Namespace的Job。\n\n```python\nfrom kubernetes.client import V1JobList, V1Job\n\njob_list = batch.list_namespaced_job(namespace='default')\nassert isinstance(job_list, V1JobList)\n\nassert isinstance(job_list.items, list)\nfor job in job_list.items:\n    assert isinstance(job, V1Job)\n```\n\n与监控的示例相比，这里去掉了`label_selector`，可以获取Namespace中所有的Job。如果有需要，可以通过自定义Label把所有Job分类，并使用l`abel_selector`获取指定类型的Job。\n\n<br>\n\n\n\n\n\n# 读取Job\n\n如果知道Job的`name`，可以直接通过`read_*`系列接口，获得指定的`V1Job`。\n\n```python\nfrom kubernetes.client import V1Job\n\njob = batch.read_namespaced_job(name='hello', namespace='default')\nassert isinstance(job, V1Job)\n```\n\n如果更看重状态，可以改用`read_namespaced_job_status`。虽然访问的API不同，但在Python的`V1Job`这个结果层面，没有本质差异。\n\n<br>\n\n\n\n\n\n# 列出一个Job的Pod\n\nPod是Kubernetes调度的最小单元，也是最常用的一种资源。\n\n```python\nfrom typing import List\n\nfrom kubernetes.client import CoreV1Api, V1Pod\n\n\ndef get_pods_by(job_name: str) -> List[V1Pod]:\n    core = CoreV1Api()\n    pods = core.list_namespaced_pod(\n        namespace='default',\n        label_selector=f'job-name={job_name}',\n        limit=1,\n    )\n    return pods.items\n```\n\n这里的`get_pods_by`，可以用`job_name`获取对应的Pod。`limit=1`是在已知Pod只有一个的情况下做出的优化，可按需调整或去掉。\n\n<br>\n\n\n\n# 删除Job\n\n删除一个Job：\n\n```python\nfrom kubernetes.client import V1Status\n\nstatus = batch.delete_namespaced_job(\n    namespace='default',\n    name=job_name,\n    propagation_policy='Background',\n)\nassert isinstance(status, V1Status)\n```\n\n其中，`propagation_policy='Background'`是不可省略的关键，否则默认是`Orphan`，其Pod不会被删除。这属于API设计的一个失误，与`kubectl`的默认行为不符合。而且，应该没有人在删除了Job之后，还要保留Pod的吧。这里也可以选择`'Foreground'`，阻塞等待相关资源的删除完毕。\n\n\n\n删除多个、或所有Job：\n\n```python\nstatus = batch.delete_collection_namespaced_job(\n    namespace='default',\n    propagation_policy='Background',\n    label_selector='some-label=your-value',\n)\nassert isinstance(status, V1Status)\n```\n\n如果没有`label_selector`，那就是删除一个`Namespace`中的所有Job。\n\n<br>\n\n\n\n# 更新Job\n\n这个比较少用，因为一般都是建新的。用法其实和`create_namespaced_job`差不多：\n\n```python\ndef update_job(api_instance, job):\n    job.spec.template.spec.containers[0].image = \"perl\"\n    api_response = api_instance.patch_namespaced_job(\n        name=JOB_NAME,\n        namespace=\"default\",\n        body=job)\n    print(\"Job updated. status='%s'\" % str(api_response.status))\n```\n\n","source":"_posts/k8s实践系列-Python调用kubernetes-API管理资源.md","raw":"---\ntitle: '[k8s实践系列]Python调用kubernetes API管理Job资源'\ndate: 2020-09-05 16:40:38\ntags:\n- kubernetes api\ncategories:\n- 实践K8s\n- kubernetes api\ndescription: 通过python调用kubernetes api管理Job资源。\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599305444011&di=96b260e2ed93814697457e34e01387d5&imgtype=0&src=http%3A%2F%2Fimg2.ctoutiao.com%2Fuploads%2F2016%2F10%2F24%2F1477271707687844.jpg\n---\n\n\n\n**环境基于python3**\n\n---\n\n\n\n\n\n# 安装kubernetes sdk\n\n直接使用pip安装kubernetes sdk即可：\n\n```bash\n$ pip install kubernetes\n```\n\n\n\n<br>\n\n\n\n# 初始化\n\n```python\nfrom kubernetes.client import BatchV1Api\nfrom kubernetes.config import load_kube_config\n\nload_kube_config()\nbatch = BatchV1Api()\n```\n\n\n\n- `load_kube_config`是从`~/.kube/config`加载配置。若使用其他位置的文件，则通过第一个参数传入其路径。\n- `BatchV1Api()`可以当做Job的客户端来用。命名上，Batch和Job是类似的概念，前者强调批量。\n\n\n\n<br>\n\n\n\n\n\n# 通过对象创建job\n\n实例代码：\n\n```python\ndef create_job_object():\n    container = client.V1Container(\n        name=\"pi\",\n        image=\"perl\",\n        command=[\"perl\", \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"])\n    \n    template = client.V1PodTemplateSpec(\n        metadata=client.V1ObjectMeta(labels={\"app\": \"pi\"}),\n        spec=client.V1PodSpec(restart_policy=\"Never\", containers=[container]))\n    \n    spec = client.V1JobSpec(\n        template=template,\n        backoff_limit=4)\n    \n    job = client.V1Job(\n        api_version=\"batch/v1\",\n        kind=\"Job\",\n        metadata=client.V1ObjectMeta(name=JOB_NAME),\n        spec=spec)\n\n    return job\n\n\ndef create_job(api_instance, job):\n    api_response = api_instance.create_namespaced_job(\n        body=job,\n        namespace=\"default\")\n    print(\"Job created. status='%s'\" % str(api_response.status))\n```\n\n<br>\n\n\n\n# 通过yaml创建job\n\n示例yaml：\n\n```yaml\n# job.yaml\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: hello\nspec:\n  template:\n    spec:\n      containers:\n        - name: echo\n          image: alpine:3.11\n          args:\n            - 'echo'\n            - 'Hello world!'\n```\n\n\n\npython读取上边的yaml文件进行创建：\n\n```python\nfrom kubernetes.client import V1Job\nimport yaml\n\nwith open('job.yaml') as file:\n    cfg = yaml.safe_load(file)\njob = batch.create_namespaced_job(namespace='default', body=cfg)\nassert isinstance(job, V1Job)\n```\n\n- 这里返回的`V1Job`只是创建时的状态，但是会包含更多集群中的信息。\n\n\n\n`create_namespaced_job`同样接受字典作为body输入，例如：\n\n```python\ncfg = {\n    'apiVersion': 'batch/v1',\n    'kind': 'Job',\n    'metadata': {\n        'name': 'hello'\n    },\n    'spec': {\n        'template': {\n            'spec': {\n                'restartPolicy':\n                'Never',\n                'containers': [{\n                    'name': 'upload',\n                    'image': 'alpine:3.11',\n                    'args': ['echo', 'Hello world!']\n                }]\n            }\n        }\n    }\n}\nbatch.create_namespaced_job(namespace='default', body=cfg)\n```\n\n\n\n`dict`结构与YAML相同，而又没有类的束缚，所以也很灵活方便。\n\n此外，从YAML读出为`dict`后，也可以通过修改部分字段，达到动态变化的效果。这种结合YAML和dict的使用方式，是对官方用法的最佳替代。\n\n<br>\n\n\n\n# 监控job运行\n\n在创建Job后，通常需要监控Job的运行，做一些外围处理。Kubernetes提供了一个`Watch`机制，通过接收Event，实现对状态变化的掌控。Event只有在状态变化时才会有，所以是非常理想的回调。\n\n```python\nfrom kubernetes.client import V1Job\nfrom kubernetes.watch import Watch\n\njob_name = 'hello'\nwatcher = Watch()\nfor event in watcher.stream(\n        batch.list_namespaced_job,\n        namespace='default',\n        label_selector=f'job-name={job_name}',\n):  \n    assert isinstance(event, dict)\n    job = event['object']\n    assert isinstance(job, V1Job)\n```\n\n\n\n`Watch().stream`就是前面说的理想回调，它第一个参数是列出类的函数，这里选择`list_namespaced_job`。后面的参数，都是`list_namespaced_job`的参数。除了必备的namespace以外，`label_selector也`是一个常用参数，可以避免关注无关的Job。\n\n\n\n每个Job在创建后，都会自动带一个`f'job-name={job_name}'`的Label，可以借此筛选。`job_name`就是`metadata`里设置的`name`，如这里`job-name=hello`。\n\n\n\nevent是一个dict，只有三个值。其中`event['raw_object']`只是`event['object']`的`dict`形式，没有太大意义。`event['type']`常见三个值，对应增删改。\n\n- `ADDED`，创建时的信息，和`create_namespaced_job`的返回值通常没有区别。\n- `MODIFIED`，Job状态变化时的信息。\n- `DELETED`，Job删除时的信息。\n\n以上三个状态值，对其它类型的资源也是通用的，比如Pod、Deployment等。\n\n\n\n<br>\n\n\n\n# 列出Job\n\n列出所有Job的`list_job_for_all_namespaces`不常用，一般只列出指定Namespace的Job。\n\n```python\nfrom kubernetes.client import V1JobList, V1Job\n\njob_list = batch.list_namespaced_job(namespace='default')\nassert isinstance(job_list, V1JobList)\n\nassert isinstance(job_list.items, list)\nfor job in job_list.items:\n    assert isinstance(job, V1Job)\n```\n\n与监控的示例相比，这里去掉了`label_selector`，可以获取Namespace中所有的Job。如果有需要，可以通过自定义Label把所有Job分类，并使用l`abel_selector`获取指定类型的Job。\n\n<br>\n\n\n\n\n\n# 读取Job\n\n如果知道Job的`name`，可以直接通过`read_*`系列接口，获得指定的`V1Job`。\n\n```python\nfrom kubernetes.client import V1Job\n\njob = batch.read_namespaced_job(name='hello', namespace='default')\nassert isinstance(job, V1Job)\n```\n\n如果更看重状态，可以改用`read_namespaced_job_status`。虽然访问的API不同，但在Python的`V1Job`这个结果层面，没有本质差异。\n\n<br>\n\n\n\n\n\n# 列出一个Job的Pod\n\nPod是Kubernetes调度的最小单元，也是最常用的一种资源。\n\n```python\nfrom typing import List\n\nfrom kubernetes.client import CoreV1Api, V1Pod\n\n\ndef get_pods_by(job_name: str) -> List[V1Pod]:\n    core = CoreV1Api()\n    pods = core.list_namespaced_pod(\n        namespace='default',\n        label_selector=f'job-name={job_name}',\n        limit=1,\n    )\n    return pods.items\n```\n\n这里的`get_pods_by`，可以用`job_name`获取对应的Pod。`limit=1`是在已知Pod只有一个的情况下做出的优化，可按需调整或去掉。\n\n<br>\n\n\n\n# 删除Job\n\n删除一个Job：\n\n```python\nfrom kubernetes.client import V1Status\n\nstatus = batch.delete_namespaced_job(\n    namespace='default',\n    name=job_name,\n    propagation_policy='Background',\n)\nassert isinstance(status, V1Status)\n```\n\n其中，`propagation_policy='Background'`是不可省略的关键，否则默认是`Orphan`，其Pod不会被删除。这属于API设计的一个失误，与`kubectl`的默认行为不符合。而且，应该没有人在删除了Job之后，还要保留Pod的吧。这里也可以选择`'Foreground'`，阻塞等待相关资源的删除完毕。\n\n\n\n删除多个、或所有Job：\n\n```python\nstatus = batch.delete_collection_namespaced_job(\n    namespace='default',\n    propagation_policy='Background',\n    label_selector='some-label=your-value',\n)\nassert isinstance(status, V1Status)\n```\n\n如果没有`label_selector`，那就是删除一个`Namespace`中的所有Job。\n\n<br>\n\n\n\n# 更新Job\n\n这个比较少用，因为一般都是建新的。用法其实和`create_namespaced_job`差不多：\n\n```python\ndef update_job(api_instance, job):\n    job.spec.template.spec.containers[0].image = \"perl\"\n    api_response = api_instance.patch_namespaced_job(\n        name=JOB_NAME,\n        namespace=\"default\",\n        body=job)\n    print(\"Job updated. status='%s'\" % str(api_response.status))\n```\n\n","slug":"k8s实践系列-Python调用kubernetes-API管理资源","published":1,"updated":"2020-09-05T09:04:54.570Z","_id":"ckepf6es00000glklb9auead7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>环境基于python3</strong></p>\n<hr>\n<h1 id=\"安装kubernetes-sdk\"><a href=\"#安装kubernetes-sdk\" class=\"headerlink\" title=\"安装kubernetes sdk\"></a>安装kubernetes sdk</h1><p>直接使用pip安装kubernetes sdk即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install kubernetes</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> BatchV1Api</span><br><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.config <span class=\"keyword\">import</span> load_kube_config</span><br><span class=\"line\"></span><br><span class=\"line\">load_kube_config()</span><br><span class=\"line\">batch = BatchV1Api()</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>load_kube_config</code>是从<code>~/.kube/config</code>加载配置。若使用其他位置的文件，则通过第一个参数传入其路径。</li>\n<li><code>BatchV1Api()</code>可以当做Job的客户端来用。命名上，Batch和Job是类似的概念，前者强调批量。</li>\n</ul>\n<br>\n\n\n\n\n\n<h1 id=\"通过对象创建job\"><a href=\"#通过对象创建job\" class=\"headerlink\" title=\"通过对象创建job\"></a>通过对象创建job</h1><p>实例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_job_object</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    container = client.V1Container(</span><br><span class=\"line\">        name=<span class=\"string\">\"pi\"</span>,</span><br><span class=\"line\">        image=<span class=\"string\">\"perl\"</span>,</span><br><span class=\"line\">        command=[<span class=\"string\">\"perl\"</span>, <span class=\"string\">\"-Mbignum=bpi\"</span>, <span class=\"string\">\"-wle\"</span>, <span class=\"string\">\"print bpi(2000)\"</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    template = client.V1PodTemplateSpec(</span><br><span class=\"line\">        metadata=client.V1ObjectMeta(labels=&#123;<span class=\"string\">\"app\"</span>: <span class=\"string\">\"pi\"</span>&#125;),</span><br><span class=\"line\">        spec=client.V1PodSpec(restart_policy=<span class=\"string\">\"Never\"</span>, containers=[container]))</span><br><span class=\"line\">    </span><br><span class=\"line\">    spec = client.V1JobSpec(</span><br><span class=\"line\">        template=template,</span><br><span class=\"line\">        backoff_limit=<span class=\"number\">4</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    job = client.V1Job(</span><br><span class=\"line\">        api_version=<span class=\"string\">\"batch/v1\"</span>,</span><br><span class=\"line\">        kind=<span class=\"string\">\"Job\"</span>,</span><br><span class=\"line\">        metadata=client.V1ObjectMeta(name=JOB_NAME),</span><br><span class=\"line\">        spec=spec)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> job</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_job</span><span class=\"params\">(api_instance, job)</span>:</span></span><br><span class=\"line\">    api_response = api_instance.create_namespaced_job(</span><br><span class=\"line\">        body=job,</span><br><span class=\"line\">        namespace=<span class=\"string\">\"default\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Job created. status='%s'\"</span> % str(api_response.status))</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"通过yaml创建job\"><a href=\"#通过yaml创建job\" class=\"headerlink\" title=\"通过yaml创建job\"></a>通过yaml创建job</h1><p>示例yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># job.yaml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">echo</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">alpine:3.11</span></span><br><span class=\"line\">          <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'echo'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'Hello world!'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>python读取上边的yaml文件进行创建：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Job</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'job.yaml'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    cfg = yaml.safe_load(file)</span><br><span class=\"line\">job = batch.create_namespaced_job(namespace=<span class=\"string\">'default'</span>, body=cfg)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里返回的<code>V1Job</code>只是创建时的状态，但是会包含更多集群中的信息。</li>\n</ul>\n<p><code>create_namespaced_job</code>同样接受字典作为body输入，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg = &#123;</span><br><span class=\"line\">    <span class=\"string\">'apiVersion'</span>: <span class=\"string\">'batch/v1'</span>,</span><br><span class=\"line\">    <span class=\"string\">'kind'</span>: <span class=\"string\">'Job'</span>,</span><br><span class=\"line\">    <span class=\"string\">'metadata'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'hello'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'spec'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'template'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'spec'</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">'restartPolicy'</span>:</span><br><span class=\"line\">                <span class=\"string\">'Never'</span>,</span><br><span class=\"line\">                <span class=\"string\">'containers'</span>: [&#123;</span><br><span class=\"line\">                    <span class=\"string\">'name'</span>: <span class=\"string\">'upload'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'image'</span>: <span class=\"string\">'alpine:3.11'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'args'</span>: [<span class=\"string\">'echo'</span>, <span class=\"string\">'Hello world!'</span>]</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">batch.create_namespaced_job(namespace=<span class=\"string\">'default'</span>, body=cfg)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>dict</code>结构与YAML相同，而又没有类的束缚，所以也很灵活方便。</p>\n<p>此外，从YAML读出为<code>dict</code>后，也可以通过修改部分字段，达到动态变化的效果。这种结合YAML和dict的使用方式，是对官方用法的最佳替代。</p>\n<br>\n\n\n\n<h1 id=\"监控job运行\"><a href=\"#监控job运行\" class=\"headerlink\" title=\"监控job运行\"></a>监控job运行</h1><p>在创建Job后，通常需要监控Job的运行，做一些外围处理。Kubernetes提供了一个<code>Watch</code>机制，通过接收Event，实现对状态变化的掌控。Event只有在状态变化时才会有，所以是非常理想的回调。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Job</span><br><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.watch <span class=\"keyword\">import</span> Watch</span><br><span class=\"line\"></span><br><span class=\"line\">job_name = <span class=\"string\">'hello'</span></span><br><span class=\"line\">watcher = Watch()</span><br><span class=\"line\"><span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> watcher.stream(</span><br><span class=\"line\">        batch.list_namespaced_job,</span><br><span class=\"line\">        namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">        label_selector=<span class=\"string\">f'job-name=<span class=\"subst\">&#123;job_name&#125;</span>'</span>,</span><br><span class=\"line\">):  </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(event, dict)</span><br><span class=\"line\">    job = event[<span class=\"string\">'object'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>Watch().stream</code>就是前面说的理想回调，它第一个参数是列出类的函数，这里选择<code>list_namespaced_job</code>。后面的参数，都是<code>list_namespaced_job</code>的参数。除了必备的namespace以外，<code>label_selector也</code>是一个常用参数，可以避免关注无关的Job。</p>\n<p>每个Job在创建后，都会自动带一个<code>f&#39;job-name={job_name}&#39;</code>的Label，可以借此筛选。<code>job_name</code>就是<code>metadata</code>里设置的<code>name</code>，如这里<code>job-name=hello</code>。</p>\n<p>event是一个dict，只有三个值。其中<code>event[&#39;raw_object&#39;]</code>只是<code>event[&#39;object&#39;]</code>的<code>dict</code>形式，没有太大意义。<code>event[&#39;type&#39;]</code>常见三个值，对应增删改。</p>\n<ul>\n<li><code>ADDED</code>，创建时的信息，和<code>create_namespaced_job</code>的返回值通常没有区别。</li>\n<li><code>MODIFIED</code>，Job状态变化时的信息。</li>\n<li><code>DELETED</code>，Job删除时的信息。</li>\n</ul>\n<p>以上三个状态值，对其它类型的资源也是通用的，比如Pod、Deployment等。</p>\n<br>\n\n\n\n<h1 id=\"列出Job\"><a href=\"#列出Job\" class=\"headerlink\" title=\"列出Job\"></a>列出Job</h1><p>列出所有Job的<code>list_job_for_all_namespaces</code>不常用，一般只列出指定Namespace的Job。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1JobList, V1Job</span><br><span class=\"line\"></span><br><span class=\"line\">job_list = batch.list_namespaced_job(namespace=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job_list, V1JobList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job_list.items, list)</span><br><span class=\"line\"><span class=\"keyword\">for</span> job <span class=\"keyword\">in</span> job_list.items:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n<p>与监控的示例相比，这里去掉了<code>label_selector</code>，可以获取Namespace中所有的Job。如果有需要，可以通过自定义Label把所有Job分类，并使用l<code>abel_selector</code>获取指定类型的Job。</p>\n<br>\n\n\n\n\n\n<h1 id=\"读取Job\"><a href=\"#读取Job\" class=\"headerlink\" title=\"读取Job\"></a>读取Job</h1><p>如果知道Job的<code>name</code>，可以直接通过<code>read_*</code>系列接口，获得指定的<code>V1Job</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Job</span><br><span class=\"line\"></span><br><span class=\"line\">job = batch.read_namespaced_job(name=<span class=\"string\">'hello'</span>, namespace=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n<p>如果更看重状态，可以改用<code>read_namespaced_job_status</code>。虽然访问的API不同，但在Python的<code>V1Job</code>这个结果层面，没有本质差异。</p>\n<br>\n\n\n\n\n\n<h1 id=\"列出一个Job的Pod\"><a href=\"#列出一个Job的Pod\" class=\"headerlink\" title=\"列出一个Job的Pod\"></a>列出一个Job的Pod</h1><p>Pod是Kubernetes调度的最小单元，也是最常用的一种资源。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> CoreV1Api, V1Pod</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_pods_by</span><span class=\"params\">(job_name: str)</span> -&gt; List[V1Pod]:</span></span><br><span class=\"line\">    core = CoreV1Api()</span><br><span class=\"line\">    pods = core.list_namespaced_pod(</span><br><span class=\"line\">        namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">        label_selector=<span class=\"string\">f'job-name=<span class=\"subst\">&#123;job_name&#125;</span>'</span>,</span><br><span class=\"line\">        limit=<span class=\"number\">1</span>,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pods.items</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>get_pods_by</code>，可以用<code>job_name</code>获取对应的Pod。<code>limit=1</code>是在已知Pod只有一个的情况下做出的优化，可按需调整或去掉。</p>\n<br>\n\n\n\n<h1 id=\"删除Job\"><a href=\"#删除Job\" class=\"headerlink\" title=\"删除Job\"></a>删除Job</h1><p>删除一个Job：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Status</span><br><span class=\"line\"></span><br><span class=\"line\">status = batch.delete_namespaced_job(</span><br><span class=\"line\">    namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">    name=job_name,</span><br><span class=\"line\">    propagation_policy=<span class=\"string\">'Background'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(status, V1Status)</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>propagation_policy=&#39;Background&#39;</code>是不可省略的关键，否则默认是<code>Orphan</code>，其Pod不会被删除。这属于API设计的一个失误，与<code>kubectl</code>的默认行为不符合。而且，应该没有人在删除了Job之后，还要保留Pod的吧。这里也可以选择<code>&#39;Foreground&#39;</code>，阻塞等待相关资源的删除完毕。</p>\n<p>删除多个、或所有Job：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = batch.delete_collection_namespaced_job(</span><br><span class=\"line\">    namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">    propagation_policy=<span class=\"string\">'Background'</span>,</span><br><span class=\"line\">    label_selector=<span class=\"string\">'some-label=your-value'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(status, V1Status)</span><br></pre></td></tr></table></figure>\n\n<p>如果没有<code>label_selector</code>，那就是删除一个<code>Namespace</code>中的所有Job。</p>\n<br>\n\n\n\n<h1 id=\"更新Job\"><a href=\"#更新Job\" class=\"headerlink\" title=\"更新Job\"></a>更新Job</h1><p>这个比较少用，因为一般都是建新的。用法其实和<code>create_namespaced_job</code>差不多：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_job</span><span class=\"params\">(api_instance, job)</span>:</span></span><br><span class=\"line\">    job.spec.template.spec.containers[<span class=\"number\">0</span>].image = <span class=\"string\">\"perl\"</span></span><br><span class=\"line\">    api_response = api_instance.patch_namespaced_job(</span><br><span class=\"line\">        name=JOB_NAME,</span><br><span class=\"line\">        namespace=<span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">        body=job)</span><br><span class=\"line\">    print(<span class=\"string\">\"Job updated. status='%s'\"</span> % str(api_response.status))</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>环境基于python3</strong></p>\n<hr>\n<h1 id=\"安装kubernetes-sdk\"><a href=\"#安装kubernetes-sdk\" class=\"headerlink\" title=\"安装kubernetes sdk\"></a>安装kubernetes sdk</h1><p>直接使用pip安装kubernetes sdk即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install kubernetes</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> BatchV1Api</span><br><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.config <span class=\"keyword\">import</span> load_kube_config</span><br><span class=\"line\"></span><br><span class=\"line\">load_kube_config()</span><br><span class=\"line\">batch = BatchV1Api()</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>load_kube_config</code>是从<code>~/.kube/config</code>加载配置。若使用其他位置的文件，则通过第一个参数传入其路径。</li>\n<li><code>BatchV1Api()</code>可以当做Job的客户端来用。命名上，Batch和Job是类似的概念，前者强调批量。</li>\n</ul>\n<br>\n\n\n\n\n\n<h1 id=\"通过对象创建job\"><a href=\"#通过对象创建job\" class=\"headerlink\" title=\"通过对象创建job\"></a>通过对象创建job</h1><p>实例代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_job_object</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    container = client.V1Container(</span><br><span class=\"line\">        name=<span class=\"string\">\"pi\"</span>,</span><br><span class=\"line\">        image=<span class=\"string\">\"perl\"</span>,</span><br><span class=\"line\">        command=[<span class=\"string\">\"perl\"</span>, <span class=\"string\">\"-Mbignum=bpi\"</span>, <span class=\"string\">\"-wle\"</span>, <span class=\"string\">\"print bpi(2000)\"</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    template = client.V1PodTemplateSpec(</span><br><span class=\"line\">        metadata=client.V1ObjectMeta(labels=&#123;<span class=\"string\">\"app\"</span>: <span class=\"string\">\"pi\"</span>&#125;),</span><br><span class=\"line\">        spec=client.V1PodSpec(restart_policy=<span class=\"string\">\"Never\"</span>, containers=[container]))</span><br><span class=\"line\">    </span><br><span class=\"line\">    spec = client.V1JobSpec(</span><br><span class=\"line\">        template=template,</span><br><span class=\"line\">        backoff_limit=<span class=\"number\">4</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    job = client.V1Job(</span><br><span class=\"line\">        api_version=<span class=\"string\">\"batch/v1\"</span>,</span><br><span class=\"line\">        kind=<span class=\"string\">\"Job\"</span>,</span><br><span class=\"line\">        metadata=client.V1ObjectMeta(name=JOB_NAME),</span><br><span class=\"line\">        spec=spec)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> job</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_job</span><span class=\"params\">(api_instance, job)</span>:</span></span><br><span class=\"line\">    api_response = api_instance.create_namespaced_job(</span><br><span class=\"line\">        body=job,</span><br><span class=\"line\">        namespace=<span class=\"string\">\"default\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Job created. status='%s'\"</span> % str(api_response.status))</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"通过yaml创建job\"><a href=\"#通过yaml创建job\" class=\"headerlink\" title=\"通过yaml创建job\"></a>通过yaml创建job</h1><p>示例yaml：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># job.yaml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">batch/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Job</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">echo</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">alpine:3.11</span></span><br><span class=\"line\">          <span class=\"attr\">args:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'echo'</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">'Hello world!'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>python读取上边的yaml文件进行创建：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Job</span><br><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'job.yaml'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">    cfg = yaml.safe_load(file)</span><br><span class=\"line\">job = batch.create_namespaced_job(namespace=<span class=\"string\">'default'</span>, body=cfg)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里返回的<code>V1Job</code>只是创建时的状态，但是会包含更多集群中的信息。</li>\n</ul>\n<p><code>create_namespaced_job</code>同样接受字典作为body输入，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfg = &#123;</span><br><span class=\"line\">    <span class=\"string\">'apiVersion'</span>: <span class=\"string\">'batch/v1'</span>,</span><br><span class=\"line\">    <span class=\"string\">'kind'</span>: <span class=\"string\">'Job'</span>,</span><br><span class=\"line\">    <span class=\"string\">'metadata'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'hello'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'spec'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'template'</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">'spec'</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">'restartPolicy'</span>:</span><br><span class=\"line\">                <span class=\"string\">'Never'</span>,</span><br><span class=\"line\">                <span class=\"string\">'containers'</span>: [&#123;</span><br><span class=\"line\">                    <span class=\"string\">'name'</span>: <span class=\"string\">'upload'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'image'</span>: <span class=\"string\">'alpine:3.11'</span>,</span><br><span class=\"line\">                    <span class=\"string\">'args'</span>: [<span class=\"string\">'echo'</span>, <span class=\"string\">'Hello world!'</span>]</span><br><span class=\"line\">                &#125;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">batch.create_namespaced_job(namespace=<span class=\"string\">'default'</span>, body=cfg)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>dict</code>结构与YAML相同，而又没有类的束缚，所以也很灵活方便。</p>\n<p>此外，从YAML读出为<code>dict</code>后，也可以通过修改部分字段，达到动态变化的效果。这种结合YAML和dict的使用方式，是对官方用法的最佳替代。</p>\n<br>\n\n\n\n<h1 id=\"监控job运行\"><a href=\"#监控job运行\" class=\"headerlink\" title=\"监控job运行\"></a>监控job运行</h1><p>在创建Job后，通常需要监控Job的运行，做一些外围处理。Kubernetes提供了一个<code>Watch</code>机制，通过接收Event，实现对状态变化的掌控。Event只有在状态变化时才会有，所以是非常理想的回调。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Job</span><br><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.watch <span class=\"keyword\">import</span> Watch</span><br><span class=\"line\"></span><br><span class=\"line\">job_name = <span class=\"string\">'hello'</span></span><br><span class=\"line\">watcher = Watch()</span><br><span class=\"line\"><span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> watcher.stream(</span><br><span class=\"line\">        batch.list_namespaced_job,</span><br><span class=\"line\">        namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">        label_selector=<span class=\"string\">f'job-name=<span class=\"subst\">&#123;job_name&#125;</span>'</span>,</span><br><span class=\"line\">):  </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(event, dict)</span><br><span class=\"line\">    job = event[<span class=\"string\">'object'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>Watch().stream</code>就是前面说的理想回调，它第一个参数是列出类的函数，这里选择<code>list_namespaced_job</code>。后面的参数，都是<code>list_namespaced_job</code>的参数。除了必备的namespace以外，<code>label_selector也</code>是一个常用参数，可以避免关注无关的Job。</p>\n<p>每个Job在创建后，都会自动带一个<code>f&#39;job-name={job_name}&#39;</code>的Label，可以借此筛选。<code>job_name</code>就是<code>metadata</code>里设置的<code>name</code>，如这里<code>job-name=hello</code>。</p>\n<p>event是一个dict，只有三个值。其中<code>event[&#39;raw_object&#39;]</code>只是<code>event[&#39;object&#39;]</code>的<code>dict</code>形式，没有太大意义。<code>event[&#39;type&#39;]</code>常见三个值，对应增删改。</p>\n<ul>\n<li><code>ADDED</code>，创建时的信息，和<code>create_namespaced_job</code>的返回值通常没有区别。</li>\n<li><code>MODIFIED</code>，Job状态变化时的信息。</li>\n<li><code>DELETED</code>，Job删除时的信息。</li>\n</ul>\n<p>以上三个状态值，对其它类型的资源也是通用的，比如Pod、Deployment等。</p>\n<br>\n\n\n\n<h1 id=\"列出Job\"><a href=\"#列出Job\" class=\"headerlink\" title=\"列出Job\"></a>列出Job</h1><p>列出所有Job的<code>list_job_for_all_namespaces</code>不常用，一般只列出指定Namespace的Job。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1JobList, V1Job</span><br><span class=\"line\"></span><br><span class=\"line\">job_list = batch.list_namespaced_job(namespace=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job_list, V1JobList)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job_list.items, list)</span><br><span class=\"line\"><span class=\"keyword\">for</span> job <span class=\"keyword\">in</span> job_list.items:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n<p>与监控的示例相比，这里去掉了<code>label_selector</code>，可以获取Namespace中所有的Job。如果有需要，可以通过自定义Label把所有Job分类，并使用l<code>abel_selector</code>获取指定类型的Job。</p>\n<br>\n\n\n\n\n\n<h1 id=\"读取Job\"><a href=\"#读取Job\" class=\"headerlink\" title=\"读取Job\"></a>读取Job</h1><p>如果知道Job的<code>name</code>，可以直接通过<code>read_*</code>系列接口，获得指定的<code>V1Job</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Job</span><br><span class=\"line\"></span><br><span class=\"line\">job = batch.read_namespaced_job(name=<span class=\"string\">'hello'</span>, namespace=<span class=\"string\">'default'</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(job, V1Job)</span><br></pre></td></tr></table></figure>\n\n<p>如果更看重状态，可以改用<code>read_namespaced_job_status</code>。虽然访问的API不同，但在Python的<code>V1Job</code>这个结果层面，没有本质差异。</p>\n<br>\n\n\n\n\n\n<h1 id=\"列出一个Job的Pod\"><a href=\"#列出一个Job的Pod\" class=\"headerlink\" title=\"列出一个Job的Pod\"></a>列出一个Job的Pod</h1><p>Pod是Kubernetes调度的最小单元，也是最常用的一种资源。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> CoreV1Api, V1Pod</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_pods_by</span><span class=\"params\">(job_name: str)</span> -&gt; List[V1Pod]:</span></span><br><span class=\"line\">    core = CoreV1Api()</span><br><span class=\"line\">    pods = core.list_namespaced_pod(</span><br><span class=\"line\">        namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">        label_selector=<span class=\"string\">f'job-name=<span class=\"subst\">&#123;job_name&#125;</span>'</span>,</span><br><span class=\"line\">        limit=<span class=\"number\">1</span>,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pods.items</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>get_pods_by</code>，可以用<code>job_name</code>获取对应的Pod。<code>limit=1</code>是在已知Pod只有一个的情况下做出的优化，可按需调整或去掉。</p>\n<br>\n\n\n\n<h1 id=\"删除Job\"><a href=\"#删除Job\" class=\"headerlink\" title=\"删除Job\"></a>删除Job</h1><p>删除一个Job：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> kubernetes.client <span class=\"keyword\">import</span> V1Status</span><br><span class=\"line\"></span><br><span class=\"line\">status = batch.delete_namespaced_job(</span><br><span class=\"line\">    namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">    name=job_name,</span><br><span class=\"line\">    propagation_policy=<span class=\"string\">'Background'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(status, V1Status)</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>propagation_policy=&#39;Background&#39;</code>是不可省略的关键，否则默认是<code>Orphan</code>，其Pod不会被删除。这属于API设计的一个失误，与<code>kubectl</code>的默认行为不符合。而且，应该没有人在删除了Job之后，还要保留Pod的吧。这里也可以选择<code>&#39;Foreground&#39;</code>，阻塞等待相关资源的删除完毕。</p>\n<p>删除多个、或所有Job：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status = batch.delete_collection_namespaced_job(</span><br><span class=\"line\">    namespace=<span class=\"string\">'default'</span>,</span><br><span class=\"line\">    propagation_policy=<span class=\"string\">'Background'</span>,</span><br><span class=\"line\">    label_selector=<span class=\"string\">'some-label=your-value'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> isinstance(status, V1Status)</span><br></pre></td></tr></table></figure>\n\n<p>如果没有<code>label_selector</code>，那就是删除一个<code>Namespace</code>中的所有Job。</p>\n<br>\n\n\n\n<h1 id=\"更新Job\"><a href=\"#更新Job\" class=\"headerlink\" title=\"更新Job\"></a>更新Job</h1><p>这个比较少用，因为一般都是建新的。用法其实和<code>create_namespaced_job</code>差不多：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update_job</span><span class=\"params\">(api_instance, job)</span>:</span></span><br><span class=\"line\">    job.spec.template.spec.containers[<span class=\"number\">0</span>].image = <span class=\"string\">\"perl\"</span></span><br><span class=\"line\">    api_response = api_instance.patch_namespaced_job(</span><br><span class=\"line\">        name=JOB_NAME,</span><br><span class=\"line\">        namespace=<span class=\"string\">\"default\"</span>,</span><br><span class=\"line\">        body=job)</span><br><span class=\"line\">    print(<span class=\"string\">\"Job updated. status='%s'\"</span> % str(api_response.status))</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Docker方式部署prometheus","date":"2020-09-05T10:44:49.000Z","description":"使用docker方式部署prometheus","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599312925466&di=b8408065486cd81238ab004bcba11897&imgtype=0&src=http%3A%2F%2Fimg.voycn.com%2Fimages%2F2019%2F09%2F88251df5ae97599e53312153dae3294e.jpg","_content":"\n\n\n# 使用官方镜像运行\n\n直接执行下面的命令来运行官方镜像的prometheus：\n\n```bash\n$ docker run -d -p 9090:9090 --name=prometheus \\\n -v  /root/prometheus/conf/:/etc/prometheus/  \\\nprom/prometheus \n```\n\n\n\n在运行之前提前创建Prometheus配置文件`prometheus.yml`和Prometheus规则文件`rules.yml`放在`/root/prometheus/conf`下，挂在到容器中。\n\n\n\n> Prometheus官方镜像没有开启热加载功能，而且时区相差八小时。\n\n\n\n<br>\n\n\n\n# 自制镜像运行\n\n这里以`2.19.0`版本为例。\n\n\n\n## 创建相关目录\n\n首先创建一个根目录：\n\n```bash\n$ mkdir prometheus-2.9.0/\n```\n\n\n\n在这个目录下，有几个功能目录：\n\n```bash\n# 配置文件目录\n$ mkdir prometheus-2.9.0/conf\n\n# 监控规则目录\n$ mkdir prometheus-2.9.0/conf/rules\n\n# prometheus程序目录\n$ mkdir prometheus-2.9.0/package\n```\n\n\n\n## 下载prometheus\n\n在prometheus的github页面下载对应的版本：\n\n```bash\n$ wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.freebsd-amd64.tar.gz\n```\n\n\n\n将下载好的文件放到`package`目录下并解压：\n\n```bash\n$ mv prometheus-2.19.0.freebsd-amd64.tar.gz prometheus-2.9.0/package\n$ cd prometheus-2.9.0/package\n$ tar zxf prometheus-2.19.0.freebsd-amd64.tar.gz\n```\n\n\n\n此时的文件目录结构应该是这样的：\n\n```bash\n$ tree prometheus-2.9.0/\nprometheus-2.9.0/\n├── conf\n    ├── rules\n└── package\n    ├── console_libraries\n    ├── consoles\n    ├── LICENSE\n    ├── NOTICE\n    ├── prometheus\n    ├── prometheus.yml\n    ├── tsdb\n    └── promtool\n```\n\n\n\n## 创建启动脚本\n\n在`conf`目录下创建`prometheus-start.sh`脚本作为服务的启动脚本：\n\n```bash\n#!/bin/bash\n/bin/prometheus \\\n --config.file=/data/prometheus/prometheus.yml \\\n --storage.tsdb.path=/data/prometheus/data \\\n --web.console.libraries=/data/prometheus/console_libraries \\\n --web.enable-lifecycle \\\n --web.console.templates=/data/prometheus/consoles\n```\n\n\n\n## 创建supervisord配置文件\n\n这里通过`supervisord`服务来管理prometheus服务，在`conf`目录下创建名为`prometheus-start.conf`\n\n的配置文件：\n\n```ini\n[program:prometheus]\ncommand=sh /etc/supervisord.d/prometheus-start.sh   ; 程序启动命令\nautostart=false     ; 在supervisord启动的时候不自动启动\nstartsecs=10        ; 启动10秒后没有异常退出，就表示进程正常启动了，默认1秒\nautorestart=false   ; 关闭程序退出后自动重启，可选值：[unexpected,true,false]，默认为unexpected,表示进程意外杀死才重启\nstartretries=0      ; 启动失败自动重试次数，默认是3\nuser=root            ; 用哪个用户启动进程，默认是root\nredirect_stderr=true            ; 把stderr重定向到stdout，默认false\nstdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认是50MB\nstdout_logfile_backups=30        ; stdout 日志文件备份数，默认是10; \n# stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录(supervisord 会自动创建日志文件)\nstdout_logfile=/data/prometheus/prometheus.log\nstopasgroup=true\nkillasgroup=true\n```\n\n\n\n然后在`conf`目录下创建`supervisord`服务本身的配置文件`supervisord.conf`：\n\n```ini\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\nuser=root\nminfds=10240\nminprocs=200\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n\n[program:sshd]\ncommand=/usr/sbin/sshd -D\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/supervisor/ssh_out.log\nstderr_logfile=/var/log/supervisor/ssh_err.log\n\n[include]\nfiles = /etc/supervisord.d/*.conf\n```\n\n\n\n## 创建容器启动脚本\n\n在`conf`目录下创建名为`container-entrypoint`的文件，用于在容器启动后调用执行：\n\n```bash\n#!/bin/sh\nset -x\nif [ ! -d \"/data/prometheus\" ];then\n    mkdir -p /data/prometheus/data\nfi\nmv /usr/local/src/* /data/prometheus/\nexec /usr/bin/supervisord -n\nexit\n```\n\n\n\n## 创建prometheus配置文件\n\n在`conf`目录下创建`prometheus.yml`文件作为prometheus的配置文件：\n\n```yaml\nglobal:\n  scrape_interval:   60s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 60s # Evaluate rules every 15 seconds. The default is every 1 minute.\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets: [ '192.168.133.110:9093']\n\nrule_files:\n  - \"rules/host_sys.yml\"\n\nscrape_configs:\n  - job_name: 'Host'\n    static_configs:\n      - targets: ['10.1.250.36:9100']\n        labels:\n          appname: 'DEV01_250.36'\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: [ '10.1.133.210:9090']\n        labels:\n          appname: 'Prometheus'\n```\n\n​\t\n\n> 这里示例写死了监控目标，实际上可以通过服务发现的方式来配置，例如consul\n\n\n\n## 创建监控规则配置文件\n\n在`conf/rules`下创建`service_down.yml`文件，用来配置监控报警规则：\n\n```yaml\ngroups:\n- name: servicedown\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      name: instance\n      severity: Critical\n    annotations:\n      summary: \" {{ $labels.appname }}\"\n      description: \" 服务停止运行 \"\n      value: \"{{ $value }}\"\n```\n\n\n\n## 创建Dockerfile\n\n在顶层目录`prometheus-2.9.0/`下创建`Dockerfile`文件，用于构建镜像：\n\n```dockerfile\nFROM docker.io/centos:7\nMAINTAINER from xxx@example.com\n\n# install repo\nRUN  rm -rf  /etc/yum.repos.d/*.repo\nADD  conf/CentOS7-Base-163.repo /etc/yum.repos.d/\nADD  conf/epel-7.repo           /etc/yum.repos.d/\n\n# yum install\nRUN yum install -q -y  openssh-server openssh-clients  net-tools \\\n  vim  supervisor && yum clean all\n\n# install sshd\nRUN  ssh-keygen -q -N \"\" -t rsa -f /etc/ssh/ssh_host_rsa_key \\\n  &&  ssh-keygen -q -N \"\" -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key \\\n  &&  ssh-keygen -q -N \"\" -t ed25519 -f /etc/ssh/ssh_host_ed25519_key \\\n  &&  sed -i 's/#UseDNS yes/UseDNS no/g' /etc/ssh/sshd_config\n\n# set UTF-8 and CST +0800\nENV  LANG=zh_CN.UTF-8 \nRUN  echo \"export LANG=zh_CN.UTF-8\" >> /etc/profile.d/lang.sh \\\n    &&  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\n    && localedef -c -f UTF-8 -i zh_CN zh_CN.utf8\n\n# install Prometheus\nCOPY  package/prometheus            /bin/prometheus\nCOPY  package/promtool              /bin/promtool\nCOPY  package/console_libraries/    /usr/local/src/console_libraries/\nCOPY  package/consoles/             /usr/local/src/consoles/\nCOPY  conf/prometheus.yml           /usr/local/src/prometheus.yml   \nCOPY  conf/rules/                   /usr/local/src/rules/\n\n# create user\nRUN  echo \"root:root123456\" | chpasswd \n\n# supervisord\nADD  conf/supervisord.conf            /etc/supervisord.conf\nADD  conf/prometheus-start.conf       /etc/supervisord.d/prometheus-start.conf\nADD  conf/container-entrypoint        /container-entrypoint\nADD  conf/prometheus-start.sh         /etc/supervisord.d/prometheus-start.sh\nRUN  chmod +x /container-entrypoint\n\n# cmd\nCMD  [\"/container-entrypoint\"]\n```\n\n\n\n## 下载repo文件\n\n在`conf`目录下下载一些基础的repo文件：\n\n```bash\n$ cd prometheus-2.9.0/conf\n$ wget https://mirrors.163.com/.help/CentOS7-Base-163.repo\n$ wget http://mirrors.aliyun.com/repo/epel-7.repo\n```\n\n\n\n此时的目录结构应该是这样的：\n\n```bash\n$ tree prometheus-2.9.0/\nprometheus-2.9.0/\n├── conf\n│   ├── CentOS7-Base-163.repo\n│   ├── container-entrypoint\n│   ├── epel-7.repo\n│   ├── prometheus-start.conf\n│   ├── prometheus-start.sh\n│   ├── prometheus.yml\n│   ├── rules\n│   │   └── service_down.yml\n│   └── supervisord.conf\n├── Dockerfile\n└── package\n    ├── console_libraries\n    ├── consoles\n    ├── LICENSE\n    ├── NOTICE\n    ├── prometheus\n    ├── prometheus.yml\n    ├── tsdb\n    └── promtool\n```\n\n\n\n## 构建镜像并运行\n\n```bash\n# 构建镜像\n$ docker build -t mybuild/prometheus:v2.9.0 .\n\n# 运行容器\n$ docker run -itd  -h prometheus139-210 -m 8g  --cpuset-cpus=28-31  --name=prometheus139-210 --network trust139  --ip=10.1.133.28  -v /data/works/prometheus139-210:/data  -p 9090:9090 mybuild/prometheus:v2.9.0\n```\n\n\n\n- `-h prometheus139-210`：设定容器的hostname为`prometheus139-210`；\n- `-m 8g`：设定容器最大使用内存为8G；\n- `--cpuset-cpus=28-31`：制定容器运行在编号为28到31的CPU上；\n- `--name=prometheus139-210`：制定容器的名字；\n- `--network`：设定容器使用的网络；\n- `--ip`：容器固定IP；\n- `-v`：挂在数据卷到容器中作为数据目录；\n- `-p`：端口映射；\n\n\n\n## 测试\n\n容器启动后，访问本机的`9090`端口即可看到prometheus的页面了。\n\n\n\n<br>\n\n","source":"_posts/Docker方式部署prometheus.md","raw":"---\ntitle: Docker方式部署prometheus\ndate: 2020-09-05 18:44:49\ntags:\n- Prometheus\ncategories:\n- Prometheus\n- 服务部署\ndescription: 使用docker方式部署prometheus\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599312925466&di=b8408065486cd81238ab004bcba11897&imgtype=0&src=http%3A%2F%2Fimg.voycn.com%2Fimages%2F2019%2F09%2F88251df5ae97599e53312153dae3294e.jpg\n---\n\n\n\n# 使用官方镜像运行\n\n直接执行下面的命令来运行官方镜像的prometheus：\n\n```bash\n$ docker run -d -p 9090:9090 --name=prometheus \\\n -v  /root/prometheus/conf/:/etc/prometheus/  \\\nprom/prometheus \n```\n\n\n\n在运行之前提前创建Prometheus配置文件`prometheus.yml`和Prometheus规则文件`rules.yml`放在`/root/prometheus/conf`下，挂在到容器中。\n\n\n\n> Prometheus官方镜像没有开启热加载功能，而且时区相差八小时。\n\n\n\n<br>\n\n\n\n# 自制镜像运行\n\n这里以`2.19.0`版本为例。\n\n\n\n## 创建相关目录\n\n首先创建一个根目录：\n\n```bash\n$ mkdir prometheus-2.9.0/\n```\n\n\n\n在这个目录下，有几个功能目录：\n\n```bash\n# 配置文件目录\n$ mkdir prometheus-2.9.0/conf\n\n# 监控规则目录\n$ mkdir prometheus-2.9.0/conf/rules\n\n# prometheus程序目录\n$ mkdir prometheus-2.9.0/package\n```\n\n\n\n## 下载prometheus\n\n在prometheus的github页面下载对应的版本：\n\n```bash\n$ wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.freebsd-amd64.tar.gz\n```\n\n\n\n将下载好的文件放到`package`目录下并解压：\n\n```bash\n$ mv prometheus-2.19.0.freebsd-amd64.tar.gz prometheus-2.9.0/package\n$ cd prometheus-2.9.0/package\n$ tar zxf prometheus-2.19.0.freebsd-amd64.tar.gz\n```\n\n\n\n此时的文件目录结构应该是这样的：\n\n```bash\n$ tree prometheus-2.9.0/\nprometheus-2.9.0/\n├── conf\n    ├── rules\n└── package\n    ├── console_libraries\n    ├── consoles\n    ├── LICENSE\n    ├── NOTICE\n    ├── prometheus\n    ├── prometheus.yml\n    ├── tsdb\n    └── promtool\n```\n\n\n\n## 创建启动脚本\n\n在`conf`目录下创建`prometheus-start.sh`脚本作为服务的启动脚本：\n\n```bash\n#!/bin/bash\n/bin/prometheus \\\n --config.file=/data/prometheus/prometheus.yml \\\n --storage.tsdb.path=/data/prometheus/data \\\n --web.console.libraries=/data/prometheus/console_libraries \\\n --web.enable-lifecycle \\\n --web.console.templates=/data/prometheus/consoles\n```\n\n\n\n## 创建supervisord配置文件\n\n这里通过`supervisord`服务来管理prometheus服务，在`conf`目录下创建名为`prometheus-start.conf`\n\n的配置文件：\n\n```ini\n[program:prometheus]\ncommand=sh /etc/supervisord.d/prometheus-start.sh   ; 程序启动命令\nautostart=false     ; 在supervisord启动的时候不自动启动\nstartsecs=10        ; 启动10秒后没有异常退出，就表示进程正常启动了，默认1秒\nautorestart=false   ; 关闭程序退出后自动重启，可选值：[unexpected,true,false]，默认为unexpected,表示进程意外杀死才重启\nstartretries=0      ; 启动失败自动重试次数，默认是3\nuser=root            ; 用哪个用户启动进程，默认是root\nredirect_stderr=true            ; 把stderr重定向到stdout，默认false\nstdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认是50MB\nstdout_logfile_backups=30        ; stdout 日志文件备份数，默认是10; \n# stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录(supervisord 会自动创建日志文件)\nstdout_logfile=/data/prometheus/prometheus.log\nstopasgroup=true\nkillasgroup=true\n```\n\n\n\n然后在`conf`目录下创建`supervisord`服务本身的配置文件`supervisord.conf`：\n\n```ini\n[unix_http_server]\nfile=/var/run/supervisor.sock   ; (the path to the socket file)\nchmod=0700                       ; sockef file mode (default 0700)\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nchildlogdir=/var/log/supervisor            ; ('AUTO' child log dir, default $TEMP)\nuser=root\nminfds=10240\nminprocs=200\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket\n\n[program:sshd]\ncommand=/usr/sbin/sshd -D\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/supervisor/ssh_out.log\nstderr_logfile=/var/log/supervisor/ssh_err.log\n\n[include]\nfiles = /etc/supervisord.d/*.conf\n```\n\n\n\n## 创建容器启动脚本\n\n在`conf`目录下创建名为`container-entrypoint`的文件，用于在容器启动后调用执行：\n\n```bash\n#!/bin/sh\nset -x\nif [ ! -d \"/data/prometheus\" ];then\n    mkdir -p /data/prometheus/data\nfi\nmv /usr/local/src/* /data/prometheus/\nexec /usr/bin/supervisord -n\nexit\n```\n\n\n\n## 创建prometheus配置文件\n\n在`conf`目录下创建`prometheus.yml`文件作为prometheus的配置文件：\n\n```yaml\nglobal:\n  scrape_interval:   60s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 60s # Evaluate rules every 15 seconds. The default is every 1 minute.\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets: [ '192.168.133.110:9093']\n\nrule_files:\n  - \"rules/host_sys.yml\"\n\nscrape_configs:\n  - job_name: 'Host'\n    static_configs:\n      - targets: ['10.1.250.36:9100']\n        labels:\n          appname: 'DEV01_250.36'\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: [ '10.1.133.210:9090']\n        labels:\n          appname: 'Prometheus'\n```\n\n​\t\n\n> 这里示例写死了监控目标，实际上可以通过服务发现的方式来配置，例如consul\n\n\n\n## 创建监控规则配置文件\n\n在`conf/rules`下创建`service_down.yml`文件，用来配置监控报警规则：\n\n```yaml\ngroups:\n- name: servicedown\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      name: instance\n      severity: Critical\n    annotations:\n      summary: \" {{ $labels.appname }}\"\n      description: \" 服务停止运行 \"\n      value: \"{{ $value }}\"\n```\n\n\n\n## 创建Dockerfile\n\n在顶层目录`prometheus-2.9.0/`下创建`Dockerfile`文件，用于构建镜像：\n\n```dockerfile\nFROM docker.io/centos:7\nMAINTAINER from xxx@example.com\n\n# install repo\nRUN  rm -rf  /etc/yum.repos.d/*.repo\nADD  conf/CentOS7-Base-163.repo /etc/yum.repos.d/\nADD  conf/epel-7.repo           /etc/yum.repos.d/\n\n# yum install\nRUN yum install -q -y  openssh-server openssh-clients  net-tools \\\n  vim  supervisor && yum clean all\n\n# install sshd\nRUN  ssh-keygen -q -N \"\" -t rsa -f /etc/ssh/ssh_host_rsa_key \\\n  &&  ssh-keygen -q -N \"\" -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key \\\n  &&  ssh-keygen -q -N \"\" -t ed25519 -f /etc/ssh/ssh_host_ed25519_key \\\n  &&  sed -i 's/#UseDNS yes/UseDNS no/g' /etc/ssh/sshd_config\n\n# set UTF-8 and CST +0800\nENV  LANG=zh_CN.UTF-8 \nRUN  echo \"export LANG=zh_CN.UTF-8\" >> /etc/profile.d/lang.sh \\\n    &&  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\n    && localedef -c -f UTF-8 -i zh_CN zh_CN.utf8\n\n# install Prometheus\nCOPY  package/prometheus            /bin/prometheus\nCOPY  package/promtool              /bin/promtool\nCOPY  package/console_libraries/    /usr/local/src/console_libraries/\nCOPY  package/consoles/             /usr/local/src/consoles/\nCOPY  conf/prometheus.yml           /usr/local/src/prometheus.yml   \nCOPY  conf/rules/                   /usr/local/src/rules/\n\n# create user\nRUN  echo \"root:root123456\" | chpasswd \n\n# supervisord\nADD  conf/supervisord.conf            /etc/supervisord.conf\nADD  conf/prometheus-start.conf       /etc/supervisord.d/prometheus-start.conf\nADD  conf/container-entrypoint        /container-entrypoint\nADD  conf/prometheus-start.sh         /etc/supervisord.d/prometheus-start.sh\nRUN  chmod +x /container-entrypoint\n\n# cmd\nCMD  [\"/container-entrypoint\"]\n```\n\n\n\n## 下载repo文件\n\n在`conf`目录下下载一些基础的repo文件：\n\n```bash\n$ cd prometheus-2.9.0/conf\n$ wget https://mirrors.163.com/.help/CentOS7-Base-163.repo\n$ wget http://mirrors.aliyun.com/repo/epel-7.repo\n```\n\n\n\n此时的目录结构应该是这样的：\n\n```bash\n$ tree prometheus-2.9.0/\nprometheus-2.9.0/\n├── conf\n│   ├── CentOS7-Base-163.repo\n│   ├── container-entrypoint\n│   ├── epel-7.repo\n│   ├── prometheus-start.conf\n│   ├── prometheus-start.sh\n│   ├── prometheus.yml\n│   ├── rules\n│   │   └── service_down.yml\n│   └── supervisord.conf\n├── Dockerfile\n└── package\n    ├── console_libraries\n    ├── consoles\n    ├── LICENSE\n    ├── NOTICE\n    ├── prometheus\n    ├── prometheus.yml\n    ├── tsdb\n    └── promtool\n```\n\n\n\n## 构建镜像并运行\n\n```bash\n# 构建镜像\n$ docker build -t mybuild/prometheus:v2.9.0 .\n\n# 运行容器\n$ docker run -itd  -h prometheus139-210 -m 8g  --cpuset-cpus=28-31  --name=prometheus139-210 --network trust139  --ip=10.1.133.28  -v /data/works/prometheus139-210:/data  -p 9090:9090 mybuild/prometheus:v2.9.0\n```\n\n\n\n- `-h prometheus139-210`：设定容器的hostname为`prometheus139-210`；\n- `-m 8g`：设定容器最大使用内存为8G；\n- `--cpuset-cpus=28-31`：制定容器运行在编号为28到31的CPU上；\n- `--name=prometheus139-210`：制定容器的名字；\n- `--network`：设定容器使用的网络；\n- `--ip`：容器固定IP；\n- `-v`：挂在数据卷到容器中作为数据目录；\n- `-p`：端口映射；\n\n\n\n## 测试\n\n容器启动后，访问本机的`9090`端口即可看到prometheus的页面了。\n\n\n\n<br>\n\n","slug":"Docker方式部署prometheus","published":1,"updated":"2020-09-05T11:35:07.937Z","_id":"ckepl7gly00008ckl1swga3lx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"使用官方镜像运行\"><a href=\"#使用官方镜像运行\" class=\"headerlink\" title=\"使用官方镜像运行\"></a>使用官方镜像运行</h1><p>直接执行下面的命令来运行官方镜像的prometheus：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 9090:9090 --name=prometheus \\</span><br><span class=\"line\"> -v  /root/prometheus/conf/:/etc/prometheus/  \\</span><br><span class=\"line\">prom/prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在运行之前提前创建Prometheus配置文件<code>prometheus.yml</code>和Prometheus规则文件<code>rules.yml</code>放在<code>/root/prometheus/conf</code>下，挂在到容器中。</p>\n<blockquote>\n<p>Prometheus官方镜像没有开启热加载功能，而且时区相差八小时。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"自制镜像运行\"><a href=\"#自制镜像运行\" class=\"headerlink\" title=\"自制镜像运行\"></a>自制镜像运行</h1><p>这里以<code>2.19.0</code>版本为例。</p>\n<h2 id=\"创建相关目录\"><a href=\"#创建相关目录\" class=\"headerlink\" title=\"创建相关目录\"></a>创建相关目录</h2><p>首先创建一个根目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir prometheus-2.9.0/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这个目录下，有几个功能目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置文件目录</span></span><br><span class=\"line\">$ mkdir prometheus-2.9.0/conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控规则目录</span></span><br><span class=\"line\">$ mkdir prometheus-2.9.0/conf/rules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prometheus程序目录</span></span><br><span class=\"line\">$ mkdir prometheus-2.9.0/package</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载prometheus\"><a href=\"#下载prometheus\" class=\"headerlink\" title=\"下载prometheus\"></a>下载prometheus</h2><p>在prometheus的github页面下载对应的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.freebsd-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将下载好的文件放到<code>package</code>目录下并解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv prometheus-2.19.0.freebsd-amd64.tar.gz prometheus-2.9.0/package</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> prometheus-2.9.0/package</span><br><span class=\"line\">$ tar zxf prometheus-2.19.0.freebsd-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时的文件目录结构应该是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree prometheus-2.9.0/</span><br><span class=\"line\">prometheus-2.9.0/</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">    ├── rules</span><br><span class=\"line\">└── package</span><br><span class=\"line\">    ├── console_libraries</span><br><span class=\"line\">    ├── consoles</span><br><span class=\"line\">    ├── LICENSE</span><br><span class=\"line\">    ├── NOTICE</span><br><span class=\"line\">    ├── prometheus</span><br><span class=\"line\">    ├── prometheus.yml</span><br><span class=\"line\">    ├── tsdb</span><br><span class=\"line\">    └── promtool</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建启动脚本\"><a href=\"#创建启动脚本\" class=\"headerlink\" title=\"创建启动脚本\"></a>创建启动脚本</h2><p>在<code>conf</code>目录下创建<code>prometheus-start.sh</code>脚本作为服务的启动脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/bin/prometheus \\</span><br><span class=\"line\"> --config.file=/data/prometheus/prometheus.yml \\</span><br><span class=\"line\"> --storage.tsdb.path=/data/prometheus/data \\</span><br><span class=\"line\"> --web.console.libraries=/data/prometheus/console_libraries \\</span><br><span class=\"line\"> --web.enable-lifecycle \\</span><br><span class=\"line\"> --web.console.templates=/data/prometheus/consoles</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建supervisord配置文件\"><a href=\"#创建supervisord配置文件\" class=\"headerlink\" title=\"创建supervisord配置文件\"></a>创建supervisord配置文件</h2><p>这里通过<code>supervisord</code>服务来管理prometheus服务，在<code>conf</code>目录下创建名为<code>prometheus-start.conf</code></p>\n<p>的配置文件：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:prometheus]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=sh /etc/supervisord.d/prometheus-start.sh   <span class=\"comment\">; 程序启动命令</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">false</span>     <span class=\"comment\">; 在supervisord启动的时候不自动启动</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span>        <span class=\"comment\">; 启动10秒后没有异常退出，就表示进程正常启动了，默认1秒</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">false</span>   <span class=\"comment\">; 关闭程序退出后自动重启，可选值：[unexpected,true,false]，默认为unexpected,表示进程意外杀死才重启</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">0</span>      <span class=\"comment\">; 启动失败自动重试次数，默认是3</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root            <span class=\"comment\">; 用哪个用户启动进程，默认是root</span></span><br><span class=\"line\"><span class=\"attr\">redirect_stderr</span>=<span class=\"literal\">true</span>            <span class=\"comment\">; 把stderr重定向到stdout，默认false</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">20</span>MB  <span class=\"comment\">; stdout 日志文件大小，默认是50MB</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span>=<span class=\"number\">30</span>        <span class=\"comment\">; stdout 日志文件备份数，默认是10; </span></span><br><span class=\"line\"><span class=\"comment\"># stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录(supervisord 会自动创建日志文件)</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/data/prometheus/prometheus.log</span><br><span class=\"line\"><span class=\"attr\">stopasgroup</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">killasgroup</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在<code>conf</code>目录下创建<code>supervisord</code>服务本身的配置文件<code>supervisord.conf</code>：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[unix_http_server]</span></span><br><span class=\"line\"><span class=\"attr\">file</span>=/var/run/supervisor.sock   <span class=\"comment\">; (the path to the socket file)</span></span><br><span class=\"line\"><span class=\"attr\">chmod</span>=<span class=\"number\">0700</span>                       <span class=\"comment\">; sockef file mode (default 0700)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[supervisord]</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/var/log/supervisor/supervisord.log <span class=\"comment\">; (main log file;default $CWD/supervisord.log)</span></span><br><span class=\"line\"><span class=\"attr\">pidfile</span>=/var/run/supervisord.pid <span class=\"comment\">; (supervisord pidfile;default supervisord.pid)</span></span><br><span class=\"line\"><span class=\"attr\">childlogdir</span>=/var/log/supervisor            <span class=\"comment\">; ('AUTO' child log dir, default $TEMP)</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root</span><br><span class=\"line\"><span class=\"attr\">minfds</span>=<span class=\"number\">10240</span></span><br><span class=\"line\"><span class=\"attr\">minprocs</span>=<span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[rpcinterface:supervisor]</span></span><br><span class=\"line\"><span class=\"attr\">supervisor.rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[supervisorctl]</span></span><br><span class=\"line\"><span class=\"attr\">serverurl</span>=unix:///var/run/supervisor.sock <span class=\"comment\">; use a unix:// URL  for a unix socket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[program:sshd]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=/usr/sbin/sshd -D</span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/var/log/supervisor/ssh_out.log</span><br><span class=\"line\"><span class=\"attr\">stderr_logfile</span>=/var/log/supervisor/ssh_err.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[include]</span></span><br><span class=\"line\"><span class=\"attr\">files</span> = /etc/supervisord.d/*.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建容器启动脚本\"><a href=\"#创建容器启动脚本\" class=\"headerlink\" title=\"创建容器启动脚本\"></a>创建容器启动脚本</h2><p>在<code>conf</code>目录下创建名为<code>container-entrypoint</code>的文件，用于在容器启动后调用执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -x</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"string\">\"/data/prometheus\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    mkdir -p /data/prometheus/data</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">mv /usr/<span class=\"built_in\">local</span>/src/* /data/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">exec</span> /usr/bin/supervisord -n</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建prometheus配置文件\"><a href=\"#创建prometheus配置文件\" class=\"headerlink\" title=\"创建prometheus配置文件\"></a>创建prometheus配置文件</h2><p>在<code>conf</code>目录下创建<code>prometheus.yml</code>文件作为prometheus的配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"attr\">scrape_interval:</span>   <span class=\"string\">60s</span> <span class=\"comment\"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class=\"line\">  <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">60s</span> <span class=\"comment\"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class=\"line\"><span class=\"attr\">alerting:</span></span><br><span class=\"line\">  <span class=\"attr\">alertmanagers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">[</span> <span class=\"string\">'192.168.133.110:9093'</span><span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rule_files:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"rules/host_sys.yml\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'Host'</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">['10.1.250.36:9100']</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">appname:</span> <span class=\"string\">'DEV01_250.36'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'prometheus'</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">[</span> <span class=\"string\">'10.1.133.210:9090'</span><span class=\"string\">]</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">appname:</span> <span class=\"string\">'Prometheus'</span></span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<blockquote>\n<p>这里示例写死了监控目标，实际上可以通过服务发现的方式来配置，例如consul</p>\n</blockquote>\n<h2 id=\"创建监控规则配置文件\"><a href=\"#创建监控规则配置文件\" class=\"headerlink\" title=\"创建监控规则配置文件\"></a>创建监控规则配置文件</h2><p>在<code>conf/rules</code>下创建<code>service_down.yml</code>文件，用来配置监控报警规则：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">groups:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">servicedown</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">alert:</span> <span class=\"string\">InstanceDown</span></span><br><span class=\"line\">    <span class=\"attr\">expr:</span> <span class=\"string\">up</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">for:</span> <span class=\"string\">1m</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"attr\">severity:</span> <span class=\"string\">Critical</span></span><br><span class=\"line\">    <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">summary:</span> <span class=\"string\">\" <span class=\"template-variable\">&#123;&#123; $labels.appname &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">description:</span> <span class=\"string\">\" 服务停止运行 \"</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; $value &#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建Dockerfile\"><a href=\"#创建Dockerfile\" class=\"headerlink\" title=\"创建Dockerfile\"></a>创建Dockerfile</h2><p>在顶层目录<code>prometheus-2.9.0/</code>下创建<code>Dockerfile</code>文件，用于构建镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> docker.io/centos:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> <span class=\"keyword\">from</span> xxx@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install repo</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  rm -rf  /etc/yum.repos.d/*.repo</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/CentOS7-Base-163.repo /etc/yum.repos.d/</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/epel-7.repo           /etc/yum.repos.d/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yum install</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yum install -q -y  openssh-server openssh-clients  net-tools \\</span></span><br><span class=\"line\"><span class=\"bash\">  vim  supervisor &amp;&amp; yum clean all</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install sshd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  ssh-keygen -q -N <span class=\"string\">\"\"</span> -t rsa -f /etc/ssh/ssh_host_rsa_key \\</span></span><br><span class=\"line\"><span class=\"bash\">  &amp;&amp;  ssh-keygen -q -N <span class=\"string\">\"\"</span> -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key \\</span></span><br><span class=\"line\"><span class=\"bash\">  &amp;&amp;  ssh-keygen -q -N <span class=\"string\">\"\"</span> -t ed25519 -f /etc/ssh/ssh_host_ed25519_key \\</span></span><br><span class=\"line\"><span class=\"bash\">  &amp;&amp;  sed -i <span class=\"string\">'s/#UseDNS yes/UseDNS no/g'</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set UTF-8 and CST +0800</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span>  LANG=zh_CN.UTF-<span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"export LANG=zh_CN.UTF-8\"</span> &gt;&gt; /etc/profile.d/lang.sh \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp;  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; localedef -c -f UTF-8 -i zh_CN zh_CN.utf8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install Prometheus</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/prometheus            /bin/prometheus</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/promtool              /bin/promtool</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/console_libraries/    /usr/<span class=\"built_in\">local</span>/src/console_libraries/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/consoles/             /usr/<span class=\"built_in\">local</span>/src/consoles/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  conf/prometheus.yml           /usr/<span class=\"built_in\">local</span>/src/prometheus.yml   </span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  conf/rules/                   /usr/<span class=\"built_in\">local</span>/src/rules/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create user</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"root:root123456\"</span> | chpasswd </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># supervisord</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/supervisord.conf            /etc/supervisord.conf</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/prometheus-start.conf       /etc/supervisord.d/prometheus-start.conf</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/container-entrypoint        /container-entrypoint</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/prometheus-start.sh         /etc/supervisord.d/prometheus-start.sh</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  chmod +x /container-entrypoint</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cmd</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\">  [<span class=\"string\">\"/container-entrypoint\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载repo文件\"><a href=\"#下载repo文件\" class=\"headerlink\" title=\"下载repo文件\"></a>下载repo文件</h2><p>在<code>conf</code>目录下下载一些基础的repo文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> prometheus-2.9.0/conf</span><br><span class=\"line\">$ wget https://mirrors.163.com/.<span class=\"built_in\">help</span>/CentOS7-Base-163.repo</span><br><span class=\"line\">$ wget http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时的目录结构应该是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree prometheus-2.9.0/</span><br><span class=\"line\">prometheus-2.9.0/</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">│   ├── CentOS7-Base-163.repo</span><br><span class=\"line\">│   ├── container-entrypoint</span><br><span class=\"line\">│   ├── epel-7.repo</span><br><span class=\"line\">│   ├── prometheus-start.conf</span><br><span class=\"line\">│   ├── prometheus-start.sh</span><br><span class=\"line\">│   ├── prometheus.yml</span><br><span class=\"line\">│   ├── rules</span><br><span class=\"line\">│   │   └── service_down.yml</span><br><span class=\"line\">│   └── supervisord.conf</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">└── package</span><br><span class=\"line\">    ├── console_libraries</span><br><span class=\"line\">    ├── consoles</span><br><span class=\"line\">    ├── LICENSE</span><br><span class=\"line\">    ├── NOTICE</span><br><span class=\"line\">    ├── prometheus</span><br><span class=\"line\">    ├── prometheus.yml</span><br><span class=\"line\">    ├── tsdb</span><br><span class=\"line\">    └── promtool</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"构建镜像并运行\"><a href=\"#构建镜像并运行\" class=\"headerlink\" title=\"构建镜像并运行\"></a>构建镜像并运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建镜像</span></span><br><span class=\"line\">$ docker build -t mybuild/prometheus:v2.9.0 .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">$ docker run -itd  -h prometheus139-210 -m 8g  --cpuset-cpus=28-31  --name=prometheus139-210 --network trust139  --ip=10.1.133.28  -v /data/works/prometheus139-210:/data  -p 9090:9090 mybuild/prometheus:v2.9.0</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>-h prometheus139-210</code>：设定容器的hostname为<code>prometheus139-210</code>；</li>\n<li><code>-m 8g</code>：设定容器最大使用内存为8G；</li>\n<li><code>--cpuset-cpus=28-31</code>：制定容器运行在编号为28到31的CPU上；</li>\n<li><code>--name=prometheus139-210</code>：制定容器的名字；</li>\n<li><code>--network</code>：设定容器使用的网络；</li>\n<li><code>--ip</code>：容器固定IP；</li>\n<li><code>-v</code>：挂在数据卷到容器中作为数据目录；</li>\n<li><code>-p</code>：端口映射；</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>容器启动后，访问本机的<code>9090</code>端口即可看到prometheus的页面了。</p>\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用官方镜像运行\"><a href=\"#使用官方镜像运行\" class=\"headerlink\" title=\"使用官方镜像运行\"></a>使用官方镜像运行</h1><p>直接执行下面的命令来运行官方镜像的prometheus：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 9090:9090 --name=prometheus \\</span><br><span class=\"line\"> -v  /root/prometheus/conf/:/etc/prometheus/  \\</span><br><span class=\"line\">prom/prometheus</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在运行之前提前创建Prometheus配置文件<code>prometheus.yml</code>和Prometheus规则文件<code>rules.yml</code>放在<code>/root/prometheus/conf</code>下，挂在到容器中。</p>\n<blockquote>\n<p>Prometheus官方镜像没有开启热加载功能，而且时区相差八小时。</p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"自制镜像运行\"><a href=\"#自制镜像运行\" class=\"headerlink\" title=\"自制镜像运行\"></a>自制镜像运行</h1><p>这里以<code>2.19.0</code>版本为例。</p>\n<h2 id=\"创建相关目录\"><a href=\"#创建相关目录\" class=\"headerlink\" title=\"创建相关目录\"></a>创建相关目录</h2><p>首先创建一个根目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir prometheus-2.9.0/</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这个目录下，有几个功能目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置文件目录</span></span><br><span class=\"line\">$ mkdir prometheus-2.9.0/conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监控规则目录</span></span><br><span class=\"line\">$ mkdir prometheus-2.9.0/conf/rules</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># prometheus程序目录</span></span><br><span class=\"line\">$ mkdir prometheus-2.9.0/package</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载prometheus\"><a href=\"#下载prometheus\" class=\"headerlink\" title=\"下载prometheus\"></a>下载prometheus</h2><p>在prometheus的github页面下载对应的版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.freebsd-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<p>将下载好的文件放到<code>package</code>目录下并解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mv prometheus-2.19.0.freebsd-amd64.tar.gz prometheus-2.9.0/package</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> prometheus-2.9.0/package</span><br><span class=\"line\">$ tar zxf prometheus-2.19.0.freebsd-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时的文件目录结构应该是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree prometheus-2.9.0/</span><br><span class=\"line\">prometheus-2.9.0/</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">    ├── rules</span><br><span class=\"line\">└── package</span><br><span class=\"line\">    ├── console_libraries</span><br><span class=\"line\">    ├── consoles</span><br><span class=\"line\">    ├── LICENSE</span><br><span class=\"line\">    ├── NOTICE</span><br><span class=\"line\">    ├── prometheus</span><br><span class=\"line\">    ├── prometheus.yml</span><br><span class=\"line\">    ├── tsdb</span><br><span class=\"line\">    └── promtool</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建启动脚本\"><a href=\"#创建启动脚本\" class=\"headerlink\" title=\"创建启动脚本\"></a>创建启动脚本</h2><p>在<code>conf</code>目录下创建<code>prometheus-start.sh</code>脚本作为服务的启动脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">/bin/prometheus \\</span><br><span class=\"line\"> --config.file=/data/prometheus/prometheus.yml \\</span><br><span class=\"line\"> --storage.tsdb.path=/data/prometheus/data \\</span><br><span class=\"line\"> --web.console.libraries=/data/prometheus/console_libraries \\</span><br><span class=\"line\"> --web.enable-lifecycle \\</span><br><span class=\"line\"> --web.console.templates=/data/prometheus/consoles</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建supervisord配置文件\"><a href=\"#创建supervisord配置文件\" class=\"headerlink\" title=\"创建supervisord配置文件\"></a>创建supervisord配置文件</h2><p>这里通过<code>supervisord</code>服务来管理prometheus服务，在<code>conf</code>目录下创建名为<code>prometheus-start.conf</code></p>\n<p>的配置文件：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[program:prometheus]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=sh /etc/supervisord.d/prometheus-start.sh   <span class=\"comment\">; 程序启动命令</span></span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">false</span>     <span class=\"comment\">; 在supervisord启动的时候不自动启动</span></span><br><span class=\"line\"><span class=\"attr\">startsecs</span>=<span class=\"number\">10</span>        <span class=\"comment\">; 启动10秒后没有异常退出，就表示进程正常启动了，默认1秒</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">false</span>   <span class=\"comment\">; 关闭程序退出后自动重启，可选值：[unexpected,true,false]，默认为unexpected,表示进程意外杀死才重启</span></span><br><span class=\"line\"><span class=\"attr\">startretries</span>=<span class=\"number\">0</span>      <span class=\"comment\">; 启动失败自动重试次数，默认是3</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root            <span class=\"comment\">; 用哪个用户启动进程，默认是root</span></span><br><span class=\"line\"><span class=\"attr\">redirect_stderr</span>=<span class=\"literal\">true</span>            <span class=\"comment\">; 把stderr重定向到stdout，默认false</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_maxbytes</span>=<span class=\"number\">20</span>MB  <span class=\"comment\">; stdout 日志文件大小，默认是50MB</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile_backups</span>=<span class=\"number\">30</span>        <span class=\"comment\">; stdout 日志文件备份数，默认是10; </span></span><br><span class=\"line\"><span class=\"comment\"># stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录(supervisord 会自动创建日志文件)</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/data/prometheus/prometheus.log</span><br><span class=\"line\"><span class=\"attr\">stopasgroup</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">killasgroup</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在<code>conf</code>目录下创建<code>supervisord</code>服务本身的配置文件<code>supervisord.conf</code>：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[unix_http_server]</span></span><br><span class=\"line\"><span class=\"attr\">file</span>=/var/run/supervisor.sock   <span class=\"comment\">; (the path to the socket file)</span></span><br><span class=\"line\"><span class=\"attr\">chmod</span>=<span class=\"number\">0700</span>                       <span class=\"comment\">; sockef file mode (default 0700)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[supervisord]</span></span><br><span class=\"line\"><span class=\"attr\">logfile</span>=/var/log/supervisor/supervisord.log <span class=\"comment\">; (main log file;default $CWD/supervisord.log)</span></span><br><span class=\"line\"><span class=\"attr\">pidfile</span>=/var/run/supervisord.pid <span class=\"comment\">; (supervisord pidfile;default supervisord.pid)</span></span><br><span class=\"line\"><span class=\"attr\">childlogdir</span>=/var/log/supervisor            <span class=\"comment\">; ('AUTO' child log dir, default $TEMP)</span></span><br><span class=\"line\"><span class=\"attr\">user</span>=root</span><br><span class=\"line\"><span class=\"attr\">minfds</span>=<span class=\"number\">10240</span></span><br><span class=\"line\"><span class=\"attr\">minprocs</span>=<span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[rpcinterface:supervisor]</span></span><br><span class=\"line\"><span class=\"attr\">supervisor.rpcinterface_factory</span> = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[supervisorctl]</span></span><br><span class=\"line\"><span class=\"attr\">serverurl</span>=unix:///var/run/supervisor.sock <span class=\"comment\">; use a unix:// URL  for a unix socket</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[program:sshd]</span></span><br><span class=\"line\"><span class=\"attr\">command</span>=/usr/sbin/sshd -D</span><br><span class=\"line\"><span class=\"attr\">autostart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">autorestart</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">stdout_logfile</span>=/var/log/supervisor/ssh_out.log</span><br><span class=\"line\"><span class=\"attr\">stderr_logfile</span>=/var/log/supervisor/ssh_err.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[include]</span></span><br><span class=\"line\"><span class=\"attr\">files</span> = /etc/supervisord.d/*.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建容器启动脚本\"><a href=\"#创建容器启动脚本\" class=\"headerlink\" title=\"创建容器启动脚本\"></a>创建容器启动脚本</h2><p>在<code>conf</code>目录下创建名为<code>container-entrypoint</code>的文件，用于在容器启动后调用执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -x</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"string\">\"/data/prometheus\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    mkdir -p /data/prometheus/data</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">mv /usr/<span class=\"built_in\">local</span>/src/* /data/prometheus/</span><br><span class=\"line\"><span class=\"built_in\">exec</span> /usr/bin/supervisord -n</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建prometheus配置文件\"><a href=\"#创建prometheus配置文件\" class=\"headerlink\" title=\"创建prometheus配置文件\"></a>创建prometheus配置文件</h2><p>在<code>conf</code>目录下创建<code>prometheus.yml</code>文件作为prometheus的配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"attr\">scrape_interval:</span>   <span class=\"string\">60s</span> <span class=\"comment\"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class=\"line\">  <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">60s</span> <span class=\"comment\"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class=\"line\"><span class=\"attr\">alerting:</span></span><br><span class=\"line\">  <span class=\"attr\">alertmanagers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">[</span> <span class=\"string\">'192.168.133.110:9093'</span><span class=\"string\">]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rule_files:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">\"rules/host_sys.yml\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'Host'</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">['10.1.250.36:9100']</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">appname:</span> <span class=\"string\">'DEV01_250.36'</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">'prometheus'</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> <span class=\"string\">[</span> <span class=\"string\">'10.1.133.210:9090'</span><span class=\"string\">]</span></span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">appname:</span> <span class=\"string\">'Prometheus'</span></span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<blockquote>\n<p>这里示例写死了监控目标，实际上可以通过服务发现的方式来配置，例如consul</p>\n</blockquote>\n<h2 id=\"创建监控规则配置文件\"><a href=\"#创建监控规则配置文件\" class=\"headerlink\" title=\"创建监控规则配置文件\"></a>创建监控规则配置文件</h2><p>在<code>conf/rules</code>下创建<code>service_down.yml</code>文件，用来配置监控报警规则：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">groups:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">servicedown</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">alert:</span> <span class=\"string\">InstanceDown</span></span><br><span class=\"line\">    <span class=\"attr\">expr:</span> <span class=\"string\">up</span> <span class=\"string\">==</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">for:</span> <span class=\"string\">1m</span></span><br><span class=\"line\">    <span class=\"attr\">labels:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">instance</span></span><br><span class=\"line\">      <span class=\"attr\">severity:</span> <span class=\"string\">Critical</span></span><br><span class=\"line\">    <span class=\"attr\">annotations:</span></span><br><span class=\"line\">      <span class=\"attr\">summary:</span> <span class=\"string\">\" <span class=\"template-variable\">&#123;&#123; $labels.appname &#125;&#125;</span>\"</span></span><br><span class=\"line\">      <span class=\"attr\">description:</span> <span class=\"string\">\" 服务停止运行 \"</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">\"<span class=\"template-variable\">&#123;&#123; $value &#125;&#125;</span>\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建Dockerfile\"><a href=\"#创建Dockerfile\" class=\"headerlink\" title=\"创建Dockerfile\"></a>创建Dockerfile</h2><p>在顶层目录<code>prometheus-2.9.0/</code>下创建<code>Dockerfile</code>文件，用于构建镜像：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> docker.io/centos:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> <span class=\"keyword\">from</span> xxx@example.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install repo</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  rm -rf  /etc/yum.repos.d/*.repo</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/CentOS7-Base-163.repo /etc/yum.repos.d/</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/epel-7.repo           /etc/yum.repos.d/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yum install</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yum install -q -y  openssh-server openssh-clients  net-tools \\</span></span><br><span class=\"line\"><span class=\"bash\">  vim  supervisor &amp;&amp; yum clean all</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install sshd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  ssh-keygen -q -N <span class=\"string\">\"\"</span> -t rsa -f /etc/ssh/ssh_host_rsa_key \\</span></span><br><span class=\"line\"><span class=\"bash\">  &amp;&amp;  ssh-keygen -q -N <span class=\"string\">\"\"</span> -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key \\</span></span><br><span class=\"line\"><span class=\"bash\">  &amp;&amp;  ssh-keygen -q -N <span class=\"string\">\"\"</span> -t ed25519 -f /etc/ssh/ssh_host_ed25519_key \\</span></span><br><span class=\"line\"><span class=\"bash\">  &amp;&amp;  sed -i <span class=\"string\">'s/#UseDNS yes/UseDNS no/g'</span> /etc/ssh/sshd_config</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set UTF-8 and CST +0800</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span>  LANG=zh_CN.UTF-<span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"export LANG=zh_CN.UTF-8\"</span> &gt;&gt; /etc/profile.d/lang.sh \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp;  ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\</span></span><br><span class=\"line\"><span class=\"bash\">    &amp;&amp; localedef -c -f UTF-8 -i zh_CN zh_CN.utf8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install Prometheus</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/prometheus            /bin/prometheus</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/promtool              /bin/promtool</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/console_libraries/    /usr/<span class=\"built_in\">local</span>/src/console_libraries/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  package/consoles/             /usr/<span class=\"built_in\">local</span>/src/consoles/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  conf/prometheus.yml           /usr/<span class=\"built_in\">local</span>/src/prometheus.yml   </span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\">  conf/rules/                   /usr/<span class=\"built_in\">local</span>/src/rules/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create user</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"root:root123456\"</span> | chpasswd </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># supervisord</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/supervisord.conf            /etc/supervisord.conf</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/prometheus-start.conf       /etc/supervisord.d/prometheus-start.conf</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/container-entrypoint        /container-entrypoint</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">  conf/prometheus-start.sh         /etc/supervisord.d/prometheus-start.sh</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  chmod +x /container-entrypoint</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># cmd</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\">  [<span class=\"string\">\"/container-entrypoint\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载repo文件\"><a href=\"#下载repo文件\" class=\"headerlink\" title=\"下载repo文件\"></a>下载repo文件</h2><p>在<code>conf</code>目录下下载一些基础的repo文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> prometheus-2.9.0/conf</span><br><span class=\"line\">$ wget https://mirrors.163.com/.<span class=\"built_in\">help</span>/CentOS7-Base-163.repo</span><br><span class=\"line\">$ wget http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时的目录结构应该是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree prometheus-2.9.0/</span><br><span class=\"line\">prometheus-2.9.0/</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">│   ├── CentOS7-Base-163.repo</span><br><span class=\"line\">│   ├── container-entrypoint</span><br><span class=\"line\">│   ├── epel-7.repo</span><br><span class=\"line\">│   ├── prometheus-start.conf</span><br><span class=\"line\">│   ├── prometheus-start.sh</span><br><span class=\"line\">│   ├── prometheus.yml</span><br><span class=\"line\">│   ├── rules</span><br><span class=\"line\">│   │   └── service_down.yml</span><br><span class=\"line\">│   └── supervisord.conf</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">└── package</span><br><span class=\"line\">    ├── console_libraries</span><br><span class=\"line\">    ├── consoles</span><br><span class=\"line\">    ├── LICENSE</span><br><span class=\"line\">    ├── NOTICE</span><br><span class=\"line\">    ├── prometheus</span><br><span class=\"line\">    ├── prometheus.yml</span><br><span class=\"line\">    ├── tsdb</span><br><span class=\"line\">    └── promtool</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"构建镜像并运行\"><a href=\"#构建镜像并运行\" class=\"headerlink\" title=\"构建镜像并运行\"></a>构建镜像并运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建镜像</span></span><br><span class=\"line\">$ docker build -t mybuild/prometheus:v2.9.0 .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行容器</span></span><br><span class=\"line\">$ docker run -itd  -h prometheus139-210 -m 8g  --cpuset-cpus=28-31  --name=prometheus139-210 --network trust139  --ip=10.1.133.28  -v /data/works/prometheus139-210:/data  -p 9090:9090 mybuild/prometheus:v2.9.0</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><code>-h prometheus139-210</code>：设定容器的hostname为<code>prometheus139-210</code>；</li>\n<li><code>-m 8g</code>：设定容器最大使用内存为8G；</li>\n<li><code>--cpuset-cpus=28-31</code>：制定容器运行在编号为28到31的CPU上；</li>\n<li><code>--name=prometheus139-210</code>：制定容器的名字；</li>\n<li><code>--network</code>：设定容器使用的网络；</li>\n<li><code>--ip</code>：容器固定IP；</li>\n<li><code>-v</code>：挂在数据卷到容器中作为数据目录；</li>\n<li><code>-p</code>：端口映射；</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>容器启动后，访问本机的<code>9090</code>端口即可看到prometheus的页面了。</p>\n<br>\n\n"},{"title":"提升程序性能的技巧","date":"2020-09-05T12:14:40.000Z","description":"几个技巧提升python代码运行性能","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599318216101&di=957e0ba38c3e30a252eab7b069fbf3bc&imgtype=0&src=http%3A%2F%2Fshp.qpic.cn%2Fqqvideo_ori%2F0%2Fg0857o2eaih_496_280%2F0","_content":"\n\n\n# 重要！代码优化原则\n\n1. 不要过早开始优化，代码优化的前提是代码能够正常工作；\n2. 优化是有代价的；\n3. 不优化无关紧要的部分，如果对代码每一部分都进行优化，就以为这代码会变得难以理解，专注在运行慢的地方进行优化即可；\n\n\n\n<br>\n\n\n\n# 避免全局变量\n\n在python中，全局变量和局部变量的实现方式不同，定义在全局范围内的代码运行速度会比定义在函数中的慢不少，例如：\n\n```python\nimport math\n\nsize = 10000\nfor x in range(size):\n    for y in range(size):\n        z = math.sqrt(x) + math.sqrt(y)\n```\n\n\n\n执行上述代码花费时间`39s`左右：\n\n![](1.png)\n\n\n\n对上面的代码做出如下的优化，即可有一定性能提升：\n\n```python\nimport math\n\ndef main():  # 定义到函数中，以减少全部变量使用\n    size = 10000\n    for x in range(size):\n        for y in range(size):\n            z = math.sqrt(x) + math.sqrt(y)\n\nmain()\n```\n\n\n\n执行上述代码花费大约`36s`左右：\n\n![](2.png)\n\n\n\n<br>\n\n\n\n# 避免模块和属性访问\n\n每次使用`.（属性访问操作符时）`会触发特定的方法，如`__getattribute__()`和`__getattr__()`，这些方法会进行字典操作，因此会带来额外的时间开销。\n\n\n\n例如：\n\n```python\nimport math\n\ndef computeSqrt(size: int):\n    result = []\n    for i in range(size):\n        result.append(math.sqrt(i))\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n执行上述代码花费大约`34s`：\n\n![](3-1.png)\n\n\n\n## 第一次优化\n\n对上边的代码进行优化，通过from import语句，可以消除属性访问。\n\n```python\nfrom math import sqrt\n\ndef computeSqrt(size: int):\n    result = []\n    for i in range(size):\n        result.append(sqrt(i))  # 避免math.sqrt的使用\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要大约`31s`：\n\n![](3-2.png)\n\n\n\n## 第二次优化\n\n\n\n再进行优化，局部变量的查找会比全局变量更快，因此对于频繁访问的变量sqrt，通过将其改为局部变量可以加速运行。\n\n```python\nimport math\n\ndef computeSqrt(size: int):\n    result = []\n    sqrt = math.sqrt  # 赋值给局部变量\n    for i in range(size):\n        result.append(sqrt(i))  # 避免math.sqrt的使用\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要大约`30s`：\n\n![](3-3.png)\n\n\n\n## 第三次优化\n\n还可以优化，除了`math.sqrt`外，`computeSqrt`函数中还有`.`的存在，那就是调用list的append方法。通过将该方法赋值给一个局部变量，可以彻底消除computeSqrt函数中for循环内部的`.`使用。\n\n```python\nimport math\n\ndef computeSqrt(size: int):\n    result = []\n    append = result.append\n    sqrt = math.sqrt    # 赋值给局部变量\n    for i in range(size):\n        append(sqrt(i))  # 避免 result.append 和 math.sqrt 的使用\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要大约`29s`：\n\n![](3-4.png)\n\n\n\n<br>\n\n\n\n# 避免类内属性访问\n\n访问`self._value`的速度会比访问一个局部变量更慢一些，例如：\n\n```python\nimport math\nfrom typing import List\n\nclass DemoClass:\n    def __init__(self, value: int):\n        self._value = value\n    \n    def computeSqrt(self, size: int) -> List[float]:\n        result = []\n        append = result.append\n        sqrt = math.sqrt\n        for _ in range(size):\n            append(sqrt(self._value))\n        return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        demo_instance = DemoClass(size)\n        result = demo_instance.computeSqrt(size)\n\nmain()\n```\n\n\n\n执行上边的程序需要约`32s`\n\n![](4-1.png)\n\n\n\n通过将需要频繁访问的类内属性赋值给一个局部变量，可以提升代码运行速度。如：\n\n```python\nimport math\nfrom typing import List\n\nclass DemoClass:\n    def __init__(self, value: int):\n        self._value = value\n    \n    def computeSqrt(self, size: int) -> List[float]:\n        result = []\n        append = result.append\n        sqrt = math.sqrt\n        value = self._value\n        for _ in range(size):\n            append(sqrt(value))  # 避免 self._value 的使用\n        return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        demo_instance = DemoClass(size)\n        demo_instance.computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要约`28s`\n\n![](4-2.png)\n\n\n\n<br>\n\n\n\n# 避免不必要抽象\n\n任何时候当你使用额外的处理层（比如装饰器、属性访问、描述器）去包装代码时，都会让代码变慢。如：\n\n```python\nclass DemoClass:\n    def __init__(self, value: int):\n        self.value = value\n\n    @property\n    def value(self) -> int:\n        return self._value\n\n    @value.setter\n    def value(self, x: int):\n        self._value = x\n\ndef main():\n    size = 1000000\n    for i in range(size):\n        demo_instance = DemoClass(size)\n        value = demo_instance.value\n        demo_instance.value = i\n\nmain()\n```\n\n\n\n执行需要约`1s`:\n\n![](5-1.png)\n\n\n\n重新进行审视使用属性访问器的定义是否有必要，如果真的没有必要，就使用简单属性。\n\n```python\nclass DemoClass:\n    def __init__(self, value: int):\n        self.value = value  # 避免不必要的属性访问器\n\ndef main():\n    size = 1000000\n    for i in range(size):\n        demo_instance = DemoClass(size)\n        value = demo_instance.value\n        demo_instance.value = i\n\nmain()\n```\n\n\n\n优化后执行约`0.4s`\n\n![](5-2.png)\n\n\n\n<br>\n\n\n\n# 避免数据复制\n\n有的代码会创建不必要的数据结构或复制，如：\n\n```python\ndef main():\n    size = 10000\n    for _ in range(size):\n        value = range(size)\n        value_list = [x for x in value]\n        square_list = [x * x for x in value_list]\n\nmain()\n```\n\n> 上面的代码中value_list完全没有必要\n\n\n\n代码执行约`7s`\n\n![](6-1.png)\n\n\n\n优化后代码如下：\n\n```python\ndef main():\n    size = 10000\n    for _ in range(size):\n        value = range(size)\n        square_list = [x * x for x in value]  # 避免无意义的复制\n\nmain()\n```\n\n\n\n优化后执行约`5s`\n\n![](6-2.png)\n\n<br>\n\n\n\n# 值交换不使用中间变量\n\n有的代码交换值时创建了一个临时变量temp，如：\n\n```python\ndef main():\n    size = 1000000\n    for _ in range(size):\n        a = 3\n        b = 5\n        temp = a\n        a = b\n        b = temp\n\nmain()\n```\n\n\n\n如果不借助中间变量，代码更为简洁、且运行速度更快:\n\n```python\ndef main():\n    size = 1000000\n    for _ in range(size):\n        a = 3\n        b = 5\n        a, b = b, a  # 不借助中间变量\n\nmain()\n```\n\n\n\n<br>\n\n\n\n# 字符串拼接用join而不是+\n\n当使用`a + b`拼接字符串时，由于 Python 中字符串是不可变对象，其会申请一块内存空间，将a和b分别复制到该新申请的内存空间中。因此，如果要拼接 n个字符串，会产生 n个中间结果，每产生一个中间结果都需要申请和复制一次内存，严重影响运行效率。如：\n\n```python\nimport string\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    result = ''\n    for str_i in string_list:\n        result += str_i\n    return result\n\ndef main():\n    string_list = list(string.ascii_letters * 100)\n    for _ in range(10000):\n        result = concatString(string_list)\n\nmain()\n```\n\n代码运行大约`7s`：\n\n![](7-1.png)\n\n\n\n而使用`join()`拼接字符串时，会首先计算出需要申请的总的内存空间，然后一次性地申请所需内存，并将每个字符串元素复制到该内存中去。\n\n```python\nimport string\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    return ''.join(string_list)  # 使用 join 而不是 +\n\ndef main():\n    string_list = list(string.ascii_letters * 100)\n    for _ in range(10000):\n        result = concatString(string_list)\n\nmain()\n```\n\n\n\n优化后大约需要`0.3s`:\n\n![](7-2.png)\n\n\n\n<br>\n\n\n\n\n\n# 利用if条件的短路特性\n\n不使用短路特性时：\n\n```python\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    abbreviations = {'cf.', 'e.g.', 'ex.', 'etc.', 'flg.', 'i.e.', 'Mr.', 'vs.'}\n    abbr_count = 0\n    result = ''\n    for str_i in string_list:\n        if str_i in abbreviations:\n            result += str_i\n    return result\n\ndef main():\n    for _ in range(10000):\n        string_list = ['Mr.', 'Hat', 'is', 'Chasing', 'the', 'black', 'cat', '.']\n        result = concatString(string_list)\n\nmain()\n```\n\n\n\nif 条件的短路特性是指对`if a and b`这样的语句， 当a为False时将直接返回，不再计算b；\n\n对于`if a or b`这样的语句，当a为True时将直接返回，不再计算b。因此， 为了节约运行时间，对于or语句，应该将值为True可能性比较高的变量写在or前，而and应该推后。\n\n```python\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    abbreviations = {'cf.', 'e.g.', 'ex.', 'etc.', 'flg.', 'i.e.', 'Mr.', 'vs.'}\n    abbr_count = 0\n    result = ''\n    for str_i in string_list:\n        if str_i[-1] == '.' and str_i in abbreviations:  # 利用 if 条件的短路特性\n            result += str_i\n    return result\n\ndef main():\n    for _ in range(10000):\n        string_list = ['Mr.', 'Hat', 'is', 'Chasing', 'the', 'black', 'cat', '.']\n        result = concatString(string_list)\n\nmain()\n```\n\n<br>\n\n\n\n# 用for循环代替while循环\n\n优化前：\n\n```python\ndef computeSum(size: int) -> int:\n    sum_ = 0\n    i = 0\n    while i < size:\n        sum_ += i\n        i += 1\n    return sum_\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum_ = computeSum(size)\n\nmain()\n```\n\n\n\nPython 的for循环比while循环快不少。\n\n```python\ndef computeSum(size: int) -> int:\n    sum_ = 0\n    for i in range(size):  # for 循环代替 while 循环\n        sum_ += i\n    return sum_\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum_ = computeSum(size)\n\nmain()\n```\n\n<br>\n\n\n\n# 使用隐式for循环代替显式for循环\n\n针对上面的例子，更进一步可以用隐式for循环来替代显式for循环\n\n```python\ndef computeSum(size: int) -> int:\n    return sum(range(size))  # 隐式 for 循环代替显式 for 循环\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum = computeSum(size)\n\nmain()\n```\n\n<br>\n\n\n\n# 减少内层for循环的计算\n\n```python\nimport math\n\ndef main():\n    size = 10000\n    sqrt = math.sqrt\n    for x in range(size):\n        for y in range(size):\n            z = sqrt(x) + sqrt(y)\n\nmain()\n```\n\n上面的代码中sqrt(x)位于内侧for循环， 每次训练过程中都会重新计算一次，增加了时间开销。\n\n\n\n```python\nimport math\n\ndef main():\n    size = 10000\n    sqrt = math.sqrt\n    for x in range(size):\n        sqrt_x = sqrt(x)  # 减少内层 for 循环的计算\n        for y in range(size):\n            z = sqrt_x + sqrt(y)\n\nmain()\n```\n\n<br>\n\n\n\n# 使用numba.jit\n\n我们沿用上面介绍过的例子，在此基础上使用numba.jit。numba可以将 Python 函数 JIT 编译为机器码执行，大大提高代码运行速度。\n\nhttp://numba.pydata.org/numba.pydata.org\n\n```python\nimport numba\n\n@numba.jit\ndef computeSum(size: float) -> int:\n    sum = 0\n    for i in range(size):\n        sum += i\n    return sum\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum = computeSum(size)\n\nmain()\n```\n\n<br>\n\n","source":"_posts/提升程序性能的技巧.md","raw":"---\ntitle: 提升程序性能的技巧\ndate: 2020-09-05 20:14:40\ntags:\n- Python\ncategories:\n- Python\n- 优化\ndescription: 几个技巧提升python代码运行性能\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599318216101&di=957e0ba38c3e30a252eab7b069fbf3bc&imgtype=0&src=http%3A%2F%2Fshp.qpic.cn%2Fqqvideo_ori%2F0%2Fg0857o2eaih_496_280%2F0\n---\n\n\n\n# 重要！代码优化原则\n\n1. 不要过早开始优化，代码优化的前提是代码能够正常工作；\n2. 优化是有代价的；\n3. 不优化无关紧要的部分，如果对代码每一部分都进行优化，就以为这代码会变得难以理解，专注在运行慢的地方进行优化即可；\n\n\n\n<br>\n\n\n\n# 避免全局变量\n\n在python中，全局变量和局部变量的实现方式不同，定义在全局范围内的代码运行速度会比定义在函数中的慢不少，例如：\n\n```python\nimport math\n\nsize = 10000\nfor x in range(size):\n    for y in range(size):\n        z = math.sqrt(x) + math.sqrt(y)\n```\n\n\n\n执行上述代码花费时间`39s`左右：\n\n![](1.png)\n\n\n\n对上面的代码做出如下的优化，即可有一定性能提升：\n\n```python\nimport math\n\ndef main():  # 定义到函数中，以减少全部变量使用\n    size = 10000\n    for x in range(size):\n        for y in range(size):\n            z = math.sqrt(x) + math.sqrt(y)\n\nmain()\n```\n\n\n\n执行上述代码花费大约`36s`左右：\n\n![](2.png)\n\n\n\n<br>\n\n\n\n# 避免模块和属性访问\n\n每次使用`.（属性访问操作符时）`会触发特定的方法，如`__getattribute__()`和`__getattr__()`，这些方法会进行字典操作，因此会带来额外的时间开销。\n\n\n\n例如：\n\n```python\nimport math\n\ndef computeSqrt(size: int):\n    result = []\n    for i in range(size):\n        result.append(math.sqrt(i))\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n执行上述代码花费大约`34s`：\n\n![](3-1.png)\n\n\n\n## 第一次优化\n\n对上边的代码进行优化，通过from import语句，可以消除属性访问。\n\n```python\nfrom math import sqrt\n\ndef computeSqrt(size: int):\n    result = []\n    for i in range(size):\n        result.append(sqrt(i))  # 避免math.sqrt的使用\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要大约`31s`：\n\n![](3-2.png)\n\n\n\n## 第二次优化\n\n\n\n再进行优化，局部变量的查找会比全局变量更快，因此对于频繁访问的变量sqrt，通过将其改为局部变量可以加速运行。\n\n```python\nimport math\n\ndef computeSqrt(size: int):\n    result = []\n    sqrt = math.sqrt  # 赋值给局部变量\n    for i in range(size):\n        result.append(sqrt(i))  # 避免math.sqrt的使用\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要大约`30s`：\n\n![](3-3.png)\n\n\n\n## 第三次优化\n\n还可以优化，除了`math.sqrt`外，`computeSqrt`函数中还有`.`的存在，那就是调用list的append方法。通过将该方法赋值给一个局部变量，可以彻底消除computeSqrt函数中for循环内部的`.`使用。\n\n```python\nimport math\n\ndef computeSqrt(size: int):\n    result = []\n    append = result.append\n    sqrt = math.sqrt    # 赋值给局部变量\n    for i in range(size):\n        append(sqrt(i))  # 避免 result.append 和 math.sqrt 的使用\n    return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        result = computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要大约`29s`：\n\n![](3-4.png)\n\n\n\n<br>\n\n\n\n# 避免类内属性访问\n\n访问`self._value`的速度会比访问一个局部变量更慢一些，例如：\n\n```python\nimport math\nfrom typing import List\n\nclass DemoClass:\n    def __init__(self, value: int):\n        self._value = value\n    \n    def computeSqrt(self, size: int) -> List[float]:\n        result = []\n        append = result.append\n        sqrt = math.sqrt\n        for _ in range(size):\n            append(sqrt(self._value))\n        return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        demo_instance = DemoClass(size)\n        result = demo_instance.computeSqrt(size)\n\nmain()\n```\n\n\n\n执行上边的程序需要约`32s`\n\n![](4-1.png)\n\n\n\n通过将需要频繁访问的类内属性赋值给一个局部变量，可以提升代码运行速度。如：\n\n```python\nimport math\nfrom typing import List\n\nclass DemoClass:\n    def __init__(self, value: int):\n        self._value = value\n    \n    def computeSqrt(self, size: int) -> List[float]:\n        result = []\n        append = result.append\n        sqrt = math.sqrt\n        value = self._value\n        for _ in range(size):\n            append(sqrt(value))  # 避免 self._value 的使用\n        return result\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        demo_instance = DemoClass(size)\n        demo_instance.computeSqrt(size)\n\nmain()\n```\n\n\n\n优化后执行需要约`28s`\n\n![](4-2.png)\n\n\n\n<br>\n\n\n\n# 避免不必要抽象\n\n任何时候当你使用额外的处理层（比如装饰器、属性访问、描述器）去包装代码时，都会让代码变慢。如：\n\n```python\nclass DemoClass:\n    def __init__(self, value: int):\n        self.value = value\n\n    @property\n    def value(self) -> int:\n        return self._value\n\n    @value.setter\n    def value(self, x: int):\n        self._value = x\n\ndef main():\n    size = 1000000\n    for i in range(size):\n        demo_instance = DemoClass(size)\n        value = demo_instance.value\n        demo_instance.value = i\n\nmain()\n```\n\n\n\n执行需要约`1s`:\n\n![](5-1.png)\n\n\n\n重新进行审视使用属性访问器的定义是否有必要，如果真的没有必要，就使用简单属性。\n\n```python\nclass DemoClass:\n    def __init__(self, value: int):\n        self.value = value  # 避免不必要的属性访问器\n\ndef main():\n    size = 1000000\n    for i in range(size):\n        demo_instance = DemoClass(size)\n        value = demo_instance.value\n        demo_instance.value = i\n\nmain()\n```\n\n\n\n优化后执行约`0.4s`\n\n![](5-2.png)\n\n\n\n<br>\n\n\n\n# 避免数据复制\n\n有的代码会创建不必要的数据结构或复制，如：\n\n```python\ndef main():\n    size = 10000\n    for _ in range(size):\n        value = range(size)\n        value_list = [x for x in value]\n        square_list = [x * x for x in value_list]\n\nmain()\n```\n\n> 上面的代码中value_list完全没有必要\n\n\n\n代码执行约`7s`\n\n![](6-1.png)\n\n\n\n优化后代码如下：\n\n```python\ndef main():\n    size = 10000\n    for _ in range(size):\n        value = range(size)\n        square_list = [x * x for x in value]  # 避免无意义的复制\n\nmain()\n```\n\n\n\n优化后执行约`5s`\n\n![](6-2.png)\n\n<br>\n\n\n\n# 值交换不使用中间变量\n\n有的代码交换值时创建了一个临时变量temp，如：\n\n```python\ndef main():\n    size = 1000000\n    for _ in range(size):\n        a = 3\n        b = 5\n        temp = a\n        a = b\n        b = temp\n\nmain()\n```\n\n\n\n如果不借助中间变量，代码更为简洁、且运行速度更快:\n\n```python\ndef main():\n    size = 1000000\n    for _ in range(size):\n        a = 3\n        b = 5\n        a, b = b, a  # 不借助中间变量\n\nmain()\n```\n\n\n\n<br>\n\n\n\n# 字符串拼接用join而不是+\n\n当使用`a + b`拼接字符串时，由于 Python 中字符串是不可变对象，其会申请一块内存空间，将a和b分别复制到该新申请的内存空间中。因此，如果要拼接 n个字符串，会产生 n个中间结果，每产生一个中间结果都需要申请和复制一次内存，严重影响运行效率。如：\n\n```python\nimport string\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    result = ''\n    for str_i in string_list:\n        result += str_i\n    return result\n\ndef main():\n    string_list = list(string.ascii_letters * 100)\n    for _ in range(10000):\n        result = concatString(string_list)\n\nmain()\n```\n\n代码运行大约`7s`：\n\n![](7-1.png)\n\n\n\n而使用`join()`拼接字符串时，会首先计算出需要申请的总的内存空间，然后一次性地申请所需内存，并将每个字符串元素复制到该内存中去。\n\n```python\nimport string\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    return ''.join(string_list)  # 使用 join 而不是 +\n\ndef main():\n    string_list = list(string.ascii_letters * 100)\n    for _ in range(10000):\n        result = concatString(string_list)\n\nmain()\n```\n\n\n\n优化后大约需要`0.3s`:\n\n![](7-2.png)\n\n\n\n<br>\n\n\n\n\n\n# 利用if条件的短路特性\n\n不使用短路特性时：\n\n```python\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    abbreviations = {'cf.', 'e.g.', 'ex.', 'etc.', 'flg.', 'i.e.', 'Mr.', 'vs.'}\n    abbr_count = 0\n    result = ''\n    for str_i in string_list:\n        if str_i in abbreviations:\n            result += str_i\n    return result\n\ndef main():\n    for _ in range(10000):\n        string_list = ['Mr.', 'Hat', 'is', 'Chasing', 'the', 'black', 'cat', '.']\n        result = concatString(string_list)\n\nmain()\n```\n\n\n\nif 条件的短路特性是指对`if a and b`这样的语句， 当a为False时将直接返回，不再计算b；\n\n对于`if a or b`这样的语句，当a为True时将直接返回，不再计算b。因此， 为了节约运行时间，对于or语句，应该将值为True可能性比较高的变量写在or前，而and应该推后。\n\n```python\nfrom typing import List\n\ndef concatString(string_list: List[str]) -> str:\n    abbreviations = {'cf.', 'e.g.', 'ex.', 'etc.', 'flg.', 'i.e.', 'Mr.', 'vs.'}\n    abbr_count = 0\n    result = ''\n    for str_i in string_list:\n        if str_i[-1] == '.' and str_i in abbreviations:  # 利用 if 条件的短路特性\n            result += str_i\n    return result\n\ndef main():\n    for _ in range(10000):\n        string_list = ['Mr.', 'Hat', 'is', 'Chasing', 'the', 'black', 'cat', '.']\n        result = concatString(string_list)\n\nmain()\n```\n\n<br>\n\n\n\n# 用for循环代替while循环\n\n优化前：\n\n```python\ndef computeSum(size: int) -> int:\n    sum_ = 0\n    i = 0\n    while i < size:\n        sum_ += i\n        i += 1\n    return sum_\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum_ = computeSum(size)\n\nmain()\n```\n\n\n\nPython 的for循环比while循环快不少。\n\n```python\ndef computeSum(size: int) -> int:\n    sum_ = 0\n    for i in range(size):  # for 循环代替 while 循环\n        sum_ += i\n    return sum_\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum_ = computeSum(size)\n\nmain()\n```\n\n<br>\n\n\n\n# 使用隐式for循环代替显式for循环\n\n针对上面的例子，更进一步可以用隐式for循环来替代显式for循环\n\n```python\ndef computeSum(size: int) -> int:\n    return sum(range(size))  # 隐式 for 循环代替显式 for 循环\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum = computeSum(size)\n\nmain()\n```\n\n<br>\n\n\n\n# 减少内层for循环的计算\n\n```python\nimport math\n\ndef main():\n    size = 10000\n    sqrt = math.sqrt\n    for x in range(size):\n        for y in range(size):\n            z = sqrt(x) + sqrt(y)\n\nmain()\n```\n\n上面的代码中sqrt(x)位于内侧for循环， 每次训练过程中都会重新计算一次，增加了时间开销。\n\n\n\n```python\nimport math\n\ndef main():\n    size = 10000\n    sqrt = math.sqrt\n    for x in range(size):\n        sqrt_x = sqrt(x)  # 减少内层 for 循环的计算\n        for y in range(size):\n            z = sqrt_x + sqrt(y)\n\nmain()\n```\n\n<br>\n\n\n\n# 使用numba.jit\n\n我们沿用上面介绍过的例子，在此基础上使用numba.jit。numba可以将 Python 函数 JIT 编译为机器码执行，大大提高代码运行速度。\n\nhttp://numba.pydata.org/numba.pydata.org\n\n```python\nimport numba\n\n@numba.jit\ndef computeSum(size: float) -> int:\n    sum = 0\n    for i in range(size):\n        sum += i\n    return sum\n\ndef main():\n    size = 10000\n    for _ in range(size):\n        sum = computeSum(size)\n\nmain()\n```\n\n<br>\n\n","slug":"提升程序性能的技巧","published":1,"updated":"2020-09-05T13:09:23.223Z","_id":"ckepmw5uh00002akl96a18d55","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"重要！代码优化原则\"><a href=\"#重要！代码优化原则\" class=\"headerlink\" title=\"重要！代码优化原则\"></a>重要！代码优化原则</h1><ol>\n<li>不要过早开始优化，代码优化的前提是代码能够正常工作；</li>\n<li>优化是有代价的；</li>\n<li>不优化无关紧要的部分，如果对代码每一部分都进行优化，就以为这代码会变得难以理解，专注在运行慢的地方进行优化即可；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"避免全局变量\"><a href=\"#避免全局变量\" class=\"headerlink\" title=\"避免全局变量\"></a>避免全局变量</h1><p>在python中，全局变量和局部变量的实现方式不同，定义在全局范围内的代码运行速度会比定义在函数中的慢不少，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">size = <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        z = math.sqrt(x) + math.sqrt(y)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上述代码花费时间<code>39s</code>左右：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"1.png\" alt=\"\"></p>\n<p>对上面的代码做出如下的优化，即可有一定性能提升：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># 定义到函数中，以减少全部变量使用</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            z = math.sqrt(x) + math.sqrt(y)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上述代码花费大约<code>36s</code>左右：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免模块和属性访问\"><a href=\"#避免模块和属性访问\" class=\"headerlink\" title=\"避免模块和属性访问\"></a>避免模块和属性访问</h1><p>每次使用<code>.（属性访问操作符时）</code>会触发特定的方法，如<code>__getattribute__()</code>和<code>__getattr__()</code>，这些方法会进行字典操作，因此会带来额外的时间开销。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result.append(math.sqrt(i))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上述代码花费大约<code>34s</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"3-1.png\" alt=\"\"></p>\n<h2 id=\"第一次优化\"><a href=\"#第一次优化\" class=\"headerlink\" title=\"第一次优化\"></a>第一次优化</h2><p>对上边的代码进行优化，通过from import语句，可以消除属性访问。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result.append(sqrt(i))  <span class=\"comment\"># 避免math.sqrt的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要大约<code>31s</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"3-2.png\" alt=\"\"></p>\n<h2 id=\"第二次优化\"><a href=\"#第二次优化\" class=\"headerlink\" title=\"第二次优化\"></a>第二次优化</h2><p>再进行优化，局部变量的查找会比全局变量更快，因此对于频繁访问的变量sqrt，通过将其改为局部变量可以加速运行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    sqrt = math.sqrt  <span class=\"comment\"># 赋值给局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result.append(sqrt(i))  <span class=\"comment\"># 避免math.sqrt的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要大约<code>30s</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"3-3.png\" alt=\"\"></p>\n<h2 id=\"第三次优化\"><a href=\"#第三次优化\" class=\"headerlink\" title=\"第三次优化\"></a>第三次优化</h2><p>还可以优化，除了<code>math.sqrt</code>外，<code>computeSqrt</code>函数中还有<code>.</code>的存在，那就是调用list的append方法。通过将该方法赋值给一个局部变量，可以彻底消除computeSqrt函数中for循环内部的<code>.</code>使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    append = result.append</span><br><span class=\"line\">    sqrt = math.sqrt    <span class=\"comment\"># 赋值给局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        append(sqrt(i))  <span class=\"comment\"># 避免 result.append 和 math.sqrt 的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要大约<code>29s</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"3-4.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免类内属性访问\"><a href=\"#避免类内属性访问\" class=\"headerlink\" title=\"避免类内属性访问\"></a>避免类内属性访问</h1><p>访问<code>self._value</code>的速度会比访问一个局部变量更慢一些，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(self, size: int)</span> -&gt; List[float]:</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        append = result.append</span><br><span class=\"line\">        sqrt = math.sqrt</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            append(sqrt(self._value))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        result = demo_instance.computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上边的程序需要约<code>32s</code></p>\n<p><img src= \"/img/loading.gif\" data-src=\"4-1.png\" alt=\"\"></p>\n<p>通过将需要频繁访问的类内属性赋值给一个局部变量，可以提升代码运行速度。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(self, size: int)</span> -&gt; List[float]:</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        append = result.append</span><br><span class=\"line\">        sqrt = math.sqrt</span><br><span class=\"line\">        value = self._value</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            append(sqrt(value))  <span class=\"comment\"># 避免 self._value 的使用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        demo_instance.computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要约<code>28s</code></p>\n<p><img src= \"/img/loading.gif\" data-src=\"4-2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免不必要抽象\"><a href=\"#避免不必要抽象\" class=\"headerlink\" title=\"避免不必要抽象\"></a>避免不必要抽象</h1><p>任何时候当你使用额外的处理层（比如装饰器、属性访问、描述器）去包装代码时，都会让代码变慢。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">value</span><span class=\"params\">(self)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @value.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">value</span><span class=\"params\">(self, x: int)</span>:</span></span><br><span class=\"line\">        self._value = x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        value = demo_instance.value</span><br><span class=\"line\">        demo_instance.value = i</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行需要约<code>1s</code>:</p>\n<p><img src= \"/img/loading.gif\" data-src=\"5-1.png\" alt=\"\"></p>\n<p>重新进行审视使用属性访问器的定义是否有必要，如果真的没有必要，就使用简单属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self.value = value  <span class=\"comment\"># 避免不必要的属性访问器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        value = demo_instance.value</span><br><span class=\"line\">        demo_instance.value = i</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行约<code>0.4s</code></p>\n<p><img src= \"/img/loading.gif\" data-src=\"5-2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免数据复制\"><a href=\"#避免数据复制\" class=\"headerlink\" title=\"避免数据复制\"></a>避免数据复制</h1><p>有的代码会创建不必要的数据结构或复制，如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        value = range(size)</span><br><span class=\"line\">        value_list = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> value]</span><br><span class=\"line\">        square_list = [x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> value_list]</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面的代码中value_list完全没有必要</p>\n</blockquote>\n<p>代码执行约<code>7s</code></p>\n<p><img src= \"/img/loading.gif\" data-src=\"6-1.png\" alt=\"\"></p>\n<p>优化后代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        value = range(size)</span><br><span class=\"line\">        square_list = [x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> value]  <span class=\"comment\"># 避免无意义的复制</span></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行约<code>5s</code></p>\n<p><img src= \"/img/loading.gif\" data-src=\"6-2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"值交换不使用中间变量\"><a href=\"#值交换不使用中间变量\" class=\"headerlink\" title=\"值交换不使用中间变量\"></a>值交换不使用中间变量</h1><p>有的代码交换值时创建了一个临时变量temp，如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        a = <span class=\"number\">3</span></span><br><span class=\"line\">        b = <span class=\"number\">5</span></span><br><span class=\"line\">        temp = a</span><br><span class=\"line\">        a = b</span><br><span class=\"line\">        b = temp</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果不借助中间变量，代码更为简洁、且运行速度更快:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        a = <span class=\"number\">3</span></span><br><span class=\"line\">        b = <span class=\"number\">5</span></span><br><span class=\"line\">        a, b = b, a  <span class=\"comment\"># 不借助中间变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"字符串拼接用join而不是\"><a href=\"#字符串拼接用join而不是\" class=\"headerlink\" title=\"字符串拼接用join而不是+\"></a>字符串拼接用join而不是+</h1><p>当使用<code>a + b</code>拼接字符串时，由于 Python 中字符串是不可变对象，其会申请一块内存空间，将a和b分别复制到该新申请的内存空间中。因此，如果要拼接 n个字符串，会产生 n个中间结果，每产生一个中间结果都需要申请和复制一次内存，严重影响运行效率。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> str_i <span class=\"keyword\">in</span> string_list:</span><br><span class=\"line\">        result += str_i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    string_list = list(string.ascii_letters * <span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>代码运行大约<code>7s</code>：</p>\n<p><img src= \"/img/loading.gif\" data-src=\"7-1.png\" alt=\"\"></p>\n<p>而使用<code>join()</code>拼接字符串时，会首先计算出需要申请的总的内存空间，然后一次性地申请所需内存，并将每个字符串元素复制到该内存中去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(string_list)  <span class=\"comment\"># 使用 join 而不是 +</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    string_list = list(string.ascii_letters * <span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后大约需要<code>0.3s</code>:</p>\n<p><img src= \"/img/loading.gif\" data-src=\"7-2.png\" alt=\"\"></p>\n<br>\n\n\n\n\n\n<h1 id=\"利用if条件的短路特性\"><a href=\"#利用if条件的短路特性\" class=\"headerlink\" title=\"利用if条件的短路特性\"></a>利用if条件的短路特性</h1><p>不使用短路特性时：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    abbreviations = &#123;<span class=\"string\">'cf.'</span>, <span class=\"string\">'e.g.'</span>, <span class=\"string\">'ex.'</span>, <span class=\"string\">'etc.'</span>, <span class=\"string\">'flg.'</span>, <span class=\"string\">'i.e.'</span>, <span class=\"string\">'Mr.'</span>, <span class=\"string\">'vs.'</span>&#125;</span><br><span class=\"line\">    abbr_count = <span class=\"number\">0</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> str_i <span class=\"keyword\">in</span> string_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str_i <span class=\"keyword\">in</span> abbreviations:</span><br><span class=\"line\">            result += str_i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        string_list = [<span class=\"string\">'Mr.'</span>, <span class=\"string\">'Hat'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'Chasing'</span>, <span class=\"string\">'the'</span>, <span class=\"string\">'black'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'.'</span>]</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>if 条件的短路特性是指对<code>if a and b</code>这样的语句， 当a为False时将直接返回，不再计算b；</p>\n<p>对于<code>if a or b</code>这样的语句，当a为True时将直接返回，不再计算b。因此， 为了节约运行时间，对于or语句，应该将值为True可能性比较高的变量写在or前，而and应该推后。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    abbreviations = &#123;<span class=\"string\">'cf.'</span>, <span class=\"string\">'e.g.'</span>, <span class=\"string\">'ex.'</span>, <span class=\"string\">'etc.'</span>, <span class=\"string\">'flg.'</span>, <span class=\"string\">'i.e.'</span>, <span class=\"string\">'Mr.'</span>, <span class=\"string\">'vs.'</span>&#125;</span><br><span class=\"line\">    abbr_count = <span class=\"number\">0</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> str_i <span class=\"keyword\">in</span> string_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str_i[<span class=\"number\">-1</span>] == <span class=\"string\">'.'</span> <span class=\"keyword\">and</span> str_i <span class=\"keyword\">in</span> abbreviations:  <span class=\"comment\"># 利用 if 条件的短路特性</span></span><br><span class=\"line\">            result += str_i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        string_list = [<span class=\"string\">'Mr.'</span>, <span class=\"string\">'Hat'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'Chasing'</span>, <span class=\"string\">'the'</span>, <span class=\"string\">'black'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'.'</span>]</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"用for循环代替while循环\"><a href=\"#用for循环代替while循环\" class=\"headerlink\" title=\"用for循环代替while循环\"></a>用for循环代替while循环</h1><p>优化前：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: int)</span> -&gt; int:</span></span><br><span class=\"line\">    sum_ = <span class=\"number\">0</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt; size:</span><br><span class=\"line\">        sum_ += i</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum_ = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Python 的for循环比while循环快不少。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: int)</span> -&gt; int:</span></span><br><span class=\"line\">    sum_ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):  <span class=\"comment\"># for 循环代替 while 循环</span></span><br><span class=\"line\">        sum_ += i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum_ = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"使用隐式for循环代替显式for循环\"><a href=\"#使用隐式for循环代替显式for循环\" class=\"headerlink\" title=\"使用隐式for循环代替显式for循环\"></a>使用隐式for循环代替显式for循环</h1><p>针对上面的例子，更进一步可以用隐式for循环来替代显式for循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: int)</span> -&gt; int:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum(range(size))  <span class=\"comment\"># 隐式 for 循环代替显式 for 循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"减少内层for循环的计算\"><a href=\"#减少内层for循环的计算\" class=\"headerlink\" title=\"减少内层for循环的计算\"></a>减少内层for循环的计算</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    sqrt = math.sqrt</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            z = sqrt(x) + sqrt(y)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中sqrt(x)位于内侧for循环， 每次训练过程中都会重新计算一次，增加了时间开销。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    sqrt = math.sqrt</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sqrt_x = sqrt(x)  <span class=\"comment\"># 减少内层 for 循环的计算</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            z = sqrt_x + sqrt(y)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"使用numba-jit\"><a href=\"#使用numba-jit\" class=\"headerlink\" title=\"使用numba.jit\"></a>使用numba.jit</h1><p>我们沿用上面介绍过的例子，在此基础上使用numba.jit。numba可以将 Python 函数 JIT 编译为机器码执行，大大提高代码运行速度。</p>\n<p><a href=\"http://numba.pydata.org/numba.pydata.org\" target=\"_blank\" rel=\"noopener\">http://numba.pydata.org/numba.pydata.org</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numba</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@numba.jit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: float)</span> -&gt; int:</span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"重要！代码优化原则\"><a href=\"#重要！代码优化原则\" class=\"headerlink\" title=\"重要！代码优化原则\"></a>重要！代码优化原则</h1><ol>\n<li>不要过早开始优化，代码优化的前提是代码能够正常工作；</li>\n<li>优化是有代价的；</li>\n<li>不优化无关紧要的部分，如果对代码每一部分都进行优化，就以为这代码会变得难以理解，专注在运行慢的地方进行优化即可；</li>\n</ol>\n<br>\n\n\n\n<h1 id=\"避免全局变量\"><a href=\"#避免全局变量\" class=\"headerlink\" title=\"避免全局变量\"></a>避免全局变量</h1><p>在python中，全局变量和局部变量的实现方式不同，定义在全局范围内的代码运行速度会比定义在函数中的慢不少，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">size = <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        z = math.sqrt(x) + math.sqrt(y)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上述代码花费时间<code>39s</code>左右：</p>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>对上面的代码做出如下的优化，即可有一定性能提升：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span>  <span class=\"comment\"># 定义到函数中，以减少全部变量使用</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            z = math.sqrt(x) + math.sqrt(y)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上述代码花费大约<code>36s</code>左右：</p>\n<p><img src=\"2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免模块和属性访问\"><a href=\"#避免模块和属性访问\" class=\"headerlink\" title=\"避免模块和属性访问\"></a>避免模块和属性访问</h1><p>每次使用<code>.（属性访问操作符时）</code>会触发特定的方法，如<code>__getattribute__()</code>和<code>__getattr__()</code>，这些方法会进行字典操作，因此会带来额外的时间开销。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result.append(math.sqrt(i))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上述代码花费大约<code>34s</code>：</p>\n<p><img src=\"3-1.png\" alt=\"\"></p>\n<h2 id=\"第一次优化\"><a href=\"#第一次优化\" class=\"headerlink\" title=\"第一次优化\"></a>第一次优化</h2><p>对上边的代码进行优化，通过from import语句，可以消除属性访问。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result.append(sqrt(i))  <span class=\"comment\"># 避免math.sqrt的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要大约<code>31s</code>：</p>\n<p><img src=\"3-2.png\" alt=\"\"></p>\n<h2 id=\"第二次优化\"><a href=\"#第二次优化\" class=\"headerlink\" title=\"第二次优化\"></a>第二次优化</h2><p>再进行优化，局部变量的查找会比全局变量更快，因此对于频繁访问的变量sqrt，通过将其改为局部变量可以加速运行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    sqrt = math.sqrt  <span class=\"comment\"># 赋值给局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result.append(sqrt(i))  <span class=\"comment\"># 避免math.sqrt的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要大约<code>30s</code>：</p>\n<p><img src=\"3-3.png\" alt=\"\"></p>\n<h2 id=\"第三次优化\"><a href=\"#第三次优化\" class=\"headerlink\" title=\"第三次优化\"></a>第三次优化</h2><p>还可以优化，除了<code>math.sqrt</code>外，<code>computeSqrt</code>函数中还有<code>.</code>的存在，那就是调用list的append方法。通过将该方法赋值给一个局部变量，可以彻底消除computeSqrt函数中for循环内部的<code>.</code>使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(size: int)</span>:</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    append = result.append</span><br><span class=\"line\">    sqrt = math.sqrt    <span class=\"comment\"># 赋值给局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        append(sqrt(i))  <span class=\"comment\"># 避免 result.append 和 math.sqrt 的使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        result = computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要大约<code>29s</code>：</p>\n<p><img src=\"3-4.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免类内属性访问\"><a href=\"#避免类内属性访问\" class=\"headerlink\" title=\"避免类内属性访问\"></a>避免类内属性访问</h1><p>访问<code>self._value</code>的速度会比访问一个局部变量更慢一些，例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(self, size: int)</span> -&gt; List[float]:</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        append = result.append</span><br><span class=\"line\">        sqrt = math.sqrt</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            append(sqrt(self._value))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        result = demo_instance.computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行上边的程序需要约<code>32s</code></p>\n<p><img src=\"4-1.png\" alt=\"\"></p>\n<p>通过将需要频繁访问的类内属性赋值给一个局部变量，可以提升代码运行速度。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self._value = value</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSqrt</span><span class=\"params\">(self, size: int)</span> -&gt; List[float]:</span></span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        append = result.append</span><br><span class=\"line\">        sqrt = math.sqrt</span><br><span class=\"line\">        value = self._value</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            append(sqrt(value))  <span class=\"comment\"># 避免 self._value 的使用</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        demo_instance.computeSqrt(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行需要约<code>28s</code></p>\n<p><img src=\"4-2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免不必要抽象\"><a href=\"#避免不必要抽象\" class=\"headerlink\" title=\"避免不必要抽象\"></a>避免不必要抽象</h1><p>任何时候当你使用额外的处理层（比如装饰器、属性访问、描述器）去包装代码时，都会让代码变慢。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">value</span><span class=\"params\">(self)</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @value.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">value</span><span class=\"params\">(self, x: int)</span>:</span></span><br><span class=\"line\">        self._value = x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        value = demo_instance.value</span><br><span class=\"line\">        demo_instance.value = i</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行需要约<code>1s</code>:</p>\n<p><img src=\"5-1.png\" alt=\"\"></p>\n<p>重新进行审视使用属性访问器的定义是否有必要，如果真的没有必要，就使用简单属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value: int)</span>:</span></span><br><span class=\"line\">        self.value = value  <span class=\"comment\"># 避免不必要的属性访问器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        demo_instance = DemoClass(size)</span><br><span class=\"line\">        value = demo_instance.value</span><br><span class=\"line\">        demo_instance.value = i</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行约<code>0.4s</code></p>\n<p><img src=\"5-2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"避免数据复制\"><a href=\"#避免数据复制\" class=\"headerlink\" title=\"避免数据复制\"></a>避免数据复制</h1><p>有的代码会创建不必要的数据结构或复制，如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        value = range(size)</span><br><span class=\"line\">        value_list = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> value]</span><br><span class=\"line\">        square_list = [x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> value_list]</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面的代码中value_list完全没有必要</p>\n</blockquote>\n<p>代码执行约<code>7s</code></p>\n<p><img src=\"6-1.png\" alt=\"\"></p>\n<p>优化后代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        value = range(size)</span><br><span class=\"line\">        square_list = [x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> value]  <span class=\"comment\"># 避免无意义的复制</span></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后执行约<code>5s</code></p>\n<p><img src=\"6-2.png\" alt=\"\"></p>\n<br>\n\n\n\n<h1 id=\"值交换不使用中间变量\"><a href=\"#值交换不使用中间变量\" class=\"headerlink\" title=\"值交换不使用中间变量\"></a>值交换不使用中间变量</h1><p>有的代码交换值时创建了一个临时变量temp，如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        a = <span class=\"number\">3</span></span><br><span class=\"line\">        b = <span class=\"number\">5</span></span><br><span class=\"line\">        temp = a</span><br><span class=\"line\">        a = b</span><br><span class=\"line\">        b = temp</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果不借助中间变量，代码更为简洁、且运行速度更快:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">1000000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        a = <span class=\"number\">3</span></span><br><span class=\"line\">        b = <span class=\"number\">5</span></span><br><span class=\"line\">        a, b = b, a  <span class=\"comment\"># 不借助中间变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"字符串拼接用join而不是\"><a href=\"#字符串拼接用join而不是\" class=\"headerlink\" title=\"字符串拼接用join而不是+\"></a>字符串拼接用join而不是+</h1><p>当使用<code>a + b</code>拼接字符串时，由于 Python 中字符串是不可变对象，其会申请一块内存空间，将a和b分别复制到该新申请的内存空间中。因此，如果要拼接 n个字符串，会产生 n个中间结果，每产生一个中间结果都需要申请和复制一次内存，严重影响运行效率。如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> str_i <span class=\"keyword\">in</span> string_list:</span><br><span class=\"line\">        result += str_i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    string_list = list(string.ascii_letters * <span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>代码运行大约<code>7s</code>：</p>\n<p><img src=\"7-1.png\" alt=\"\"></p>\n<p>而使用<code>join()</code>拼接字符串时，会首先计算出需要申请的总的内存空间，然后一次性地申请所需内存，并将每个字符串元素复制到该内存中去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(string_list)  <span class=\"comment\"># 使用 join 而不是 +</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    string_list = list(string.ascii_letters * <span class=\"number\">100</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>优化后大约需要<code>0.3s</code>:</p>\n<p><img src=\"7-2.png\" alt=\"\"></p>\n<br>\n\n\n\n\n\n<h1 id=\"利用if条件的短路特性\"><a href=\"#利用if条件的短路特性\" class=\"headerlink\" title=\"利用if条件的短路特性\"></a>利用if条件的短路特性</h1><p>不使用短路特性时：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    abbreviations = &#123;<span class=\"string\">'cf.'</span>, <span class=\"string\">'e.g.'</span>, <span class=\"string\">'ex.'</span>, <span class=\"string\">'etc.'</span>, <span class=\"string\">'flg.'</span>, <span class=\"string\">'i.e.'</span>, <span class=\"string\">'Mr.'</span>, <span class=\"string\">'vs.'</span>&#125;</span><br><span class=\"line\">    abbr_count = <span class=\"number\">0</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> str_i <span class=\"keyword\">in</span> string_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str_i <span class=\"keyword\">in</span> abbreviations:</span><br><span class=\"line\">            result += str_i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        string_list = [<span class=\"string\">'Mr.'</span>, <span class=\"string\">'Hat'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'Chasing'</span>, <span class=\"string\">'the'</span>, <span class=\"string\">'black'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'.'</span>]</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>if 条件的短路特性是指对<code>if a and b</code>这样的语句， 当a为False时将直接返回，不再计算b；</p>\n<p>对于<code>if a or b</code>这样的语句，当a为True时将直接返回，不再计算b。因此， 为了节约运行时间，对于or语句，应该将值为True可能性比较高的变量写在or前，而and应该推后。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> List</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concatString</span><span class=\"params\">(string_list: List[str])</span> -&gt; str:</span></span><br><span class=\"line\">    abbreviations = &#123;<span class=\"string\">'cf.'</span>, <span class=\"string\">'e.g.'</span>, <span class=\"string\">'ex.'</span>, <span class=\"string\">'etc.'</span>, <span class=\"string\">'flg.'</span>, <span class=\"string\">'i.e.'</span>, <span class=\"string\">'Mr.'</span>, <span class=\"string\">'vs.'</span>&#125;</span><br><span class=\"line\">    abbr_count = <span class=\"number\">0</span></span><br><span class=\"line\">    result = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> str_i <span class=\"keyword\">in</span> string_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str_i[<span class=\"number\">-1</span>] == <span class=\"string\">'.'</span> <span class=\"keyword\">and</span> str_i <span class=\"keyword\">in</span> abbreviations:  <span class=\"comment\"># 利用 if 条件的短路特性</span></span><br><span class=\"line\">            result += str_i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">10000</span>):</span><br><span class=\"line\">        string_list = [<span class=\"string\">'Mr.'</span>, <span class=\"string\">'Hat'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'Chasing'</span>, <span class=\"string\">'the'</span>, <span class=\"string\">'black'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'.'</span>]</span><br><span class=\"line\">        result = concatString(string_list)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"用for循环代替while循环\"><a href=\"#用for循环代替while循环\" class=\"headerlink\" title=\"用for循环代替while循环\"></a>用for循环代替while循环</h1><p>优化前：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: int)</span> -&gt; int:</span></span><br><span class=\"line\">    sum_ = <span class=\"number\">0</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt; size:</span><br><span class=\"line\">        sum_ += i</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum_ = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Python 的for循环比while循环快不少。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: int)</span> -&gt; int:</span></span><br><span class=\"line\">    sum_ = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):  <span class=\"comment\"># for 循环代替 while 循环</span></span><br><span class=\"line\">        sum_ += i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum_ = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"使用隐式for循环代替显式for循环\"><a href=\"#使用隐式for循环代替显式for循环\" class=\"headerlink\" title=\"使用隐式for循环代替显式for循环\"></a>使用隐式for循环代替显式for循环</h1><p>针对上面的例子，更进一步可以用隐式for循环来替代显式for循环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: int)</span> -&gt; int:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum(range(size))  <span class=\"comment\"># 隐式 for 循环代替显式 for 循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"减少内层for循环的计算\"><a href=\"#减少内层for循环的计算\" class=\"headerlink\" title=\"减少内层for循环的计算\"></a>减少内层for循环的计算</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    sqrt = math.sqrt</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            z = sqrt(x) + sqrt(y)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中sqrt(x)位于内侧for循环， 每次训练过程中都会重新计算一次，增加了时间开销。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    sqrt = math.sqrt</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sqrt_x = sqrt(x)  <span class=\"comment\"># 减少内层 for 循环的计算</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            z = sqrt_x + sqrt(y)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"使用numba-jit\"><a href=\"#使用numba-jit\" class=\"headerlink\" title=\"使用numba.jit\"></a>使用numba.jit</h1><p>我们沿用上面介绍过的例子，在此基础上使用numba.jit。numba可以将 Python 函数 JIT 编译为机器码执行，大大提高代码运行速度。</p>\n<p><a href=\"http://numba.pydata.org/numba.pydata.org\" target=\"_blank\" rel=\"noopener\">http://numba.pydata.org/numba.pydata.org</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numba</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@numba.jit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeSum</span><span class=\"params\">(size: float)</span> -&gt; int:</span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    size = <span class=\"number\">10000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">        sum = computeSum(size)</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<br>\n\n"},{"title":"Python操作redis","date":"2020-09-08T11:21:54.000Z","description":"使用python操作redis数据库","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599574285430&di=13d7f6b83db000b0a0298ab9c5e62a43&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180310%2F39fdd0b4d90346918a01b9f89556ecf3.jpeg","_content":"\n\n\n# 安装\n\n首先需要安装`redis`包：\n\n```bash\n$ pip install redis\n```\n\n\n\n<br>\n\n\n\n# 代码\n\n这里将redis操作都放到了一个类中：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport redis\n\n\nclass RedisOperator(object):\n    '''\n        redis相关操作\n    '''\n\n    def __init__(self):\n        self.redis_host = '1.1.1.1'\n        self.redis_port = '6379'\n        self.redis_pass = 'redis123'\n        self.redis_db = 0\n        self.redis_extime = 60\t# 过期时间，不设置就永不过期\n\n    def __connect(self):\n        '''连接redis'''\n        redis_host = self.redis_host\n        redis_port = self.redis_port\n        redis_pass = self.redis_pass\n        redis_db = self.redis_db\n\n        redis_db_url = {\n            'host': redis_host,\n            'port': redis_port,\n            'password': redis_pass,\n            'db': redis_db\n        }\n\n        return redis.Redis(**redis_db_url)\n\n    def get_redis_data(self, key):\n        '''查询key值，如果key不存在则返回None'''\n        conn = self.__connect()\n        data = conn.get(key)\n\n        return data\n\n    def set_redis_data(self, key, value):\n        '''设置键值对，如果键值对已经存在则覆盖原来的值'''\n        conn = self.__connect()\n        data = value\n        conn.set(\n            name = key,\n            value = data,\n            ex = self.redis_extime\n        )\n\n        return 0\n```\n\n","source":"_posts/Python操作redis.md","raw":"---\ntitle: Python操作redis\ndate: 2020-09-08 19:21:54\ntags:\n- Python\n- 数据库\ncategories:\n- Python\n- Python操作数据库\ndescription: 使用python操作redis数据库\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599574285430&di=13d7f6b83db000b0a0298ab9c5e62a43&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180310%2F39fdd0b4d90346918a01b9f89556ecf3.jpeg\n---\n\n\n\n# 安装\n\n首先需要安装`redis`包：\n\n```bash\n$ pip install redis\n```\n\n\n\n<br>\n\n\n\n# 代码\n\n这里将redis操作都放到了一个类中：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport redis\n\n\nclass RedisOperator(object):\n    '''\n        redis相关操作\n    '''\n\n    def __init__(self):\n        self.redis_host = '1.1.1.1'\n        self.redis_port = '6379'\n        self.redis_pass = 'redis123'\n        self.redis_db = 0\n        self.redis_extime = 60\t# 过期时间，不设置就永不过期\n\n    def __connect(self):\n        '''连接redis'''\n        redis_host = self.redis_host\n        redis_port = self.redis_port\n        redis_pass = self.redis_pass\n        redis_db = self.redis_db\n\n        redis_db_url = {\n            'host': redis_host,\n            'port': redis_port,\n            'password': redis_pass,\n            'db': redis_db\n        }\n\n        return redis.Redis(**redis_db_url)\n\n    def get_redis_data(self, key):\n        '''查询key值，如果key不存在则返回None'''\n        conn = self.__connect()\n        data = conn.get(key)\n\n        return data\n\n    def set_redis_data(self, key, value):\n        '''设置键值对，如果键值对已经存在则覆盖原来的值'''\n        conn = self.__connect()\n        data = value\n        conn.set(\n            name = key,\n            value = data,\n            ex = self.redis_extime\n        )\n\n        return 0\n```\n\n","slug":"Python操作redis","published":1,"updated":"2020-09-08T11:29:32.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cketvgc5z000089klgd1ef3f7","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>首先需要安装<code>redis</code>包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install redis</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>这里将redis操作都放到了一个类中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisOperator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        redis相关操作</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.redis_host = <span class=\"string\">'1.1.1.1'</span></span><br><span class=\"line\">        self.redis_port = <span class=\"string\">'6379'</span></span><br><span class=\"line\">        self.redis_pass = <span class=\"string\">'redis123'</span></span><br><span class=\"line\">        self.redis_db = <span class=\"number\">0</span></span><br><span class=\"line\">        self.redis_extime = <span class=\"number\">60</span>\t<span class=\"comment\"># 过期时间，不设置就永不过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__connect</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''连接redis'''</span></span><br><span class=\"line\">        redis_host = self.redis_host</span><br><span class=\"line\">        redis_port = self.redis_port</span><br><span class=\"line\">        redis_pass = self.redis_pass</span><br><span class=\"line\">        redis_db = self.redis_db</span><br><span class=\"line\"></span><br><span class=\"line\">        redis_db_url = &#123;</span><br><span class=\"line\">            <span class=\"string\">'host'</span>: redis_host,</span><br><span class=\"line\">            <span class=\"string\">'port'</span>: redis_port,</span><br><span class=\"line\">            <span class=\"string\">'password'</span>: redis_pass,</span><br><span class=\"line\">            <span class=\"string\">'db'</span>: redis_db</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redis.Redis(**redis_db_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_redis_data</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''查询key值，如果key不存在则返回None'''</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = conn.get(key)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_redis_data</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''设置键值对，如果键值对已经存在则覆盖原来的值'''</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = value</span><br><span class=\"line\">        conn.set(</span><br><span class=\"line\">            name = key,</span><br><span class=\"line\">            value = data,</span><br><span class=\"line\">            ex = self.redis_extime</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>首先需要安装<code>redis</code>包：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install redis</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>这里将redis操作都放到了一个类中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisOperator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        redis相关操作</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.redis_host = <span class=\"string\">'1.1.1.1'</span></span><br><span class=\"line\">        self.redis_port = <span class=\"string\">'6379'</span></span><br><span class=\"line\">        self.redis_pass = <span class=\"string\">'redis123'</span></span><br><span class=\"line\">        self.redis_db = <span class=\"number\">0</span></span><br><span class=\"line\">        self.redis_extime = <span class=\"number\">60</span>\t<span class=\"comment\"># 过期时间，不设置就永不过期</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__connect</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''连接redis'''</span></span><br><span class=\"line\">        redis_host = self.redis_host</span><br><span class=\"line\">        redis_port = self.redis_port</span><br><span class=\"line\">        redis_pass = self.redis_pass</span><br><span class=\"line\">        redis_db = self.redis_db</span><br><span class=\"line\"></span><br><span class=\"line\">        redis_db_url = &#123;</span><br><span class=\"line\">            <span class=\"string\">'host'</span>: redis_host,</span><br><span class=\"line\">            <span class=\"string\">'port'</span>: redis_port,</span><br><span class=\"line\">            <span class=\"string\">'password'</span>: redis_pass,</span><br><span class=\"line\">            <span class=\"string\">'db'</span>: redis_db</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redis.Redis(**redis_db_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_redis_data</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''查询key值，如果key不存在则返回None'''</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = conn.get(key)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_redis_data</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">'''设置键值对，如果键值对已经存在则覆盖原来的值'''</span></span><br><span class=\"line\">        conn = self.__connect()</span><br><span class=\"line\">        data = value</span><br><span class=\"line\">        conn.set(</span><br><span class=\"line\">            name = key,</span><br><span class=\"line\">            value = data,</span><br><span class=\"line\">            ex = self.redis_extime</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Django序列化查询数据","date":"2020-09-09T01:48:40.000Z","description":"使用Django rest_framework序列化ORM查询的数据","cover":"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=633567869,609217672&fm=26&gp=0.jpg","_content":"\n\n\n# 需求\n\n通过ORM查询出来的数据类型是`queryset`，一般需要进行序列化操作来将其变成字典类型数据进行进一步处理。\n\n\n\n<br>\n\n\n\n# 准备\n\n需要安装`rest_framework`：\n\n```bash\n$ pip install djangorestframework\n```\n\n\n\n<br>\n\n\n\n# 代码\n\n首先创建一个`serializers.py`的文件，保存序列化相关的规则：\n\n```python\n#!/usr/bin/env  python\n# -*- coding: utf-8 -*-\n\nfrom rest_framework import serializers\n\nfrom queryapi.models import QuerySegment\n\n\nclass QuerySegmentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = QuerySegment\n        fields = (\"ip\", \"country\", \"province\", \"city\", \"region\", \"front_isp\", \"backbone_isp\", \"asid\", \"comment\")\n\n    def to_representation(self, instance):\n        data = super().to_representation(instance)\n        # data为序列化后的结果，可以在这里对结果进行进一步处理\n        return data\n```\n\n\n\n> 其中`fields`是表结构中的需要进行序列化的字段\n\n\n\n在查询数据的时候使用序列化：\n\n```python\nfrom queryapi.serializers import QuerySegmentSerializer\n\nquery_data = models.QuerySegment.objects.filter(\n        ip__in=args['ipList'],\n        country__in=args['countryList'],\n        province__in=args['provinceList'],\n        city__in=args['cityList'],\n        region__in=args['regionList'],\n        front_isp__in=args['frontIspList'],\n        backbone_isp__in=args['backboneIspList'],\n        asid__in=args['asIdList']\n    )\n\ndbdata = [QuerySegmentSerializer(i).data for i in query_data]\n```\n\n\n\n这样就可以获得一个列表类型的查询结果数据集合，列表中的元素都是字典类型。","source":"_posts/Django序列化查询数据.md","raw":"---\ntitle: Django序列化查询数据\ndate: 2020-09-09 09:48:40\ntags:\n- Django\ncategories:\n- python web开发\n- Django\ndescription: 使用Django rest_framework序列化ORM查询的数据\ncover: https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=633567869,609217672&fm=26&gp=0.jpg\n---\n\n\n\n# 需求\n\n通过ORM查询出来的数据类型是`queryset`，一般需要进行序列化操作来将其变成字典类型数据进行进一步处理。\n\n\n\n<br>\n\n\n\n# 准备\n\n需要安装`rest_framework`：\n\n```bash\n$ pip install djangorestframework\n```\n\n\n\n<br>\n\n\n\n# 代码\n\n首先创建一个`serializers.py`的文件，保存序列化相关的规则：\n\n```python\n#!/usr/bin/env  python\n# -*- coding: utf-8 -*-\n\nfrom rest_framework import serializers\n\nfrom queryapi.models import QuerySegment\n\n\nclass QuerySegmentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = QuerySegment\n        fields = (\"ip\", \"country\", \"province\", \"city\", \"region\", \"front_isp\", \"backbone_isp\", \"asid\", \"comment\")\n\n    def to_representation(self, instance):\n        data = super().to_representation(instance)\n        # data为序列化后的结果，可以在这里对结果进行进一步处理\n        return data\n```\n\n\n\n> 其中`fields`是表结构中的需要进行序列化的字段\n\n\n\n在查询数据的时候使用序列化：\n\n```python\nfrom queryapi.serializers import QuerySegmentSerializer\n\nquery_data = models.QuerySegment.objects.filter(\n        ip__in=args['ipList'],\n        country__in=args['countryList'],\n        province__in=args['provinceList'],\n        city__in=args['cityList'],\n        region__in=args['regionList'],\n        front_isp__in=args['frontIspList'],\n        backbone_isp__in=args['backboneIspList'],\n        asid__in=args['asIdList']\n    )\n\ndbdata = [QuerySegmentSerializer(i).data for i in query_data]\n```\n\n\n\n这样就可以获得一个列表类型的查询结果数据集合，列表中的元素都是字典类型。","slug":"Django序列化查询数据","published":1,"updated":"2020-09-09T02:26:05.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeurhb3t000099kl0zuz5v9d","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>通过ORM查询出来的数据类型是<code>queryset</code>，一般需要进行序列化操作来将其变成字典类型数据进行进一步处理。</p>\n<br>\n\n\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>需要安装<code>rest_framework</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install djangorestframework</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>首先创建一个<code>serializers.py</code>的文件，保存序列化相关的规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env  python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> queryapi.models <span class=\"keyword\">import</span> QuerySegment</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuerySegmentSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = QuerySegment</span><br><span class=\"line\">        fields = (<span class=\"string\">\"ip\"</span>, <span class=\"string\">\"country\"</span>, <span class=\"string\">\"province\"</span>, <span class=\"string\">\"city\"</span>, <span class=\"string\">\"region\"</span>, <span class=\"string\">\"front_isp\"</span>, <span class=\"string\">\"backbone_isp\"</span>, <span class=\"string\">\"asid\"</span>, <span class=\"string\">\"comment\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_representation</span><span class=\"params\">(self, instance)</span>:</span></span><br><span class=\"line\">        data = super().to_representation(instance)</span><br><span class=\"line\">        <span class=\"comment\"># data为序列化后的结果，可以在这里对结果进行进一步处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>其中<code>fields</code>是表结构中的需要进行序列化的字段</p>\n</blockquote>\n<p>在查询数据的时候使用序列化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> queryapi.serializers <span class=\"keyword\">import</span> QuerySegmentSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">query_data = models.QuerySegment.objects.filter(</span><br><span class=\"line\">        ip__in=args[<span class=\"string\">'ipList'</span>],</span><br><span class=\"line\">        country__in=args[<span class=\"string\">'countryList'</span>],</span><br><span class=\"line\">        province__in=args[<span class=\"string\">'provinceList'</span>],</span><br><span class=\"line\">        city__in=args[<span class=\"string\">'cityList'</span>],</span><br><span class=\"line\">        region__in=args[<span class=\"string\">'regionList'</span>],</span><br><span class=\"line\">        front_isp__in=args[<span class=\"string\">'frontIspList'</span>],</span><br><span class=\"line\">        backbone_isp__in=args[<span class=\"string\">'backboneIspList'</span>],</span><br><span class=\"line\">        asid__in=args[<span class=\"string\">'asIdList'</span>]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">dbdata = [QuerySegmentSerializer(i).data <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> query_data]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样就可以获得一个列表类型的查询结果数据集合，列表中的元素都是字典类型。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>通过ORM查询出来的数据类型是<code>queryset</code>，一般需要进行序列化操作来将其变成字典类型数据进行进一步处理。</p>\n<br>\n\n\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>需要安装<code>rest_framework</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install djangorestframework</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>首先创建一个<code>serializers.py</code>的文件，保存序列化相关的规则：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env  python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> queryapi.models <span class=\"keyword\">import</span> QuerySegment</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuerySegmentSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = QuerySegment</span><br><span class=\"line\">        fields = (<span class=\"string\">\"ip\"</span>, <span class=\"string\">\"country\"</span>, <span class=\"string\">\"province\"</span>, <span class=\"string\">\"city\"</span>, <span class=\"string\">\"region\"</span>, <span class=\"string\">\"front_isp\"</span>, <span class=\"string\">\"backbone_isp\"</span>, <span class=\"string\">\"asid\"</span>, <span class=\"string\">\"comment\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_representation</span><span class=\"params\">(self, instance)</span>:</span></span><br><span class=\"line\">        data = super().to_representation(instance)</span><br><span class=\"line\">        <span class=\"comment\"># data为序列化后的结果，可以在这里对结果进行进一步处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>其中<code>fields</code>是表结构中的需要进行序列化的字段</p>\n</blockquote>\n<p>在查询数据的时候使用序列化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> queryapi.serializers <span class=\"keyword\">import</span> QuerySegmentSerializer</span><br><span class=\"line\"></span><br><span class=\"line\">query_data = models.QuerySegment.objects.filter(</span><br><span class=\"line\">        ip__in=args[<span class=\"string\">'ipList'</span>],</span><br><span class=\"line\">        country__in=args[<span class=\"string\">'countryList'</span>],</span><br><span class=\"line\">        province__in=args[<span class=\"string\">'provinceList'</span>],</span><br><span class=\"line\">        city__in=args[<span class=\"string\">'cityList'</span>],</span><br><span class=\"line\">        region__in=args[<span class=\"string\">'regionList'</span>],</span><br><span class=\"line\">        front_isp__in=args[<span class=\"string\">'frontIspList'</span>],</span><br><span class=\"line\">        backbone_isp__in=args[<span class=\"string\">'backboneIspList'</span>],</span><br><span class=\"line\">        asid__in=args[<span class=\"string\">'asIdList'</span>]</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">dbdata = [QuerySegmentSerializer(i).data <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> query_data]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样就可以获得一个列表类型的查询结果数据集合，列表中的元素都是字典类型。</p>\n"},{"title":"Nginx Ingress性能调优","date":"2020-09-09T09:53:36.000Z","description":"对Nginx Ingress进行高并发场景下性能优化","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599655866231&di=6dcf53f8ddee33711c9b7d034f9f92de&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-b150ca39ea4691b50d3b11c3481f61b3_1440w.jpg%3Fsource%3D172ae18b","_content":"\n\n\n在高并发场景下，需要对Nginx Ingress进行内核参数调优，才能发挥出性能优势，下面先介绍相关的参数，然后通过`initContainers`方式进行调优。\n\n---\n\n\n\n# 系统参数优化\n\n\n\n## 连接队列大小调整\n\n进程监听socket的连接队列最大的大小受限于`net.core.somaxconn`参数，在高并发下如果队列过小会导致队列溢出，部分连接将无法建立。建议将这个参数调整为`65535`：\n\n```bash\n$ sysctl -w net.core.somaxconn=65535\n```\n\n\n\n实际上，nginx ingress会读取`somaxconn`作为`backlog`参数写到配置文件中，也就是说nginx ingress的连接队列大小只取决于`somaxconn`的值。\n\n\n\n> 在nginx中`backlog`是进程调用listen监听端口时传入的参数，这个参数决定socket队列大小，默认511，所以一般nginx如果不设置这个值，队列大小就只有511。\n\n\n\n## 扩大源端口范围\n\n高并发场景下nginx ingress会产生大量的源端口与upstream建立连接，通过`net.ipv4.ip_local_port_range`参数指定。默认是`327868 ~ 60999`：\n\n```bash\n$ sysctl -w net.ipv4.ip_local_port_range=\"1024 65535\"\n```\n\n\n\n## TIME_WAIT复用\n\n短连接并发高的时候会产生大量的`TIME_WAIT`，其默认2MSL才会释放，长期占用端口资源会导致新的请求无法连接，所以需要开启复用：\n\n```bash\n$ sysctl -w net.ipv4.tcp_tw_reuse=1\n```\n\n\n\n## 调整最大文件句柄\n\n作为反向代理的nginx ingress会和client和upstream分别建立一个文件句柄，所以理论上能同时处理的最大连接数是系统最大文件句柄的一半，建议调大：\n\n```bash\n$ sysctl -w fs.file-max=1048576\n```\n\n<br>\n\n\n\n# 通过initContainer配置\n\n在创建nginx ingress的pod的时候添加如下的配置：\n\n```yaml\ninitContainer:\n- name: setsysctl\n  image: busybox\n  securityContext:\n    privileged: true\n  command:\n  - sh\n  - -c\n  - |\n    sysctl -w net.core.somaxconn=65535\n    sysctl -w net.ipv4.ip_local_port_range=\"1024 65535\"\n    sysctl -w net.ipv4.tcp_tw_reuse=1\n    sysctl -w fs.file-max=1048576\n```\n\n\n\n<br>\n\n\n\n# nginx 优化\n\n## keepalive调整\n\nkeepalive连接由`keepalive_requests`参数控制单个keepalive最大请求数，默认100，当单个client的QPS过大，会导致keepalive连接频繁断开，产生大量的`TIME_WAIT`状态。所以应该增大`keep-alive-alive-requests`参数\n\n\n\n## 单个worker的最大连接数\n\n`max-worker-connections`控制每个worker进程可以打开的最大连接数，在高并发环境下建议增大，让nginx有处理更多请求的能力。\n\n\n\n<br>\n\n\n\n# 通过configmap配置\n\nnginx的配置通过configmap进行设置，nginx ingress会watch这并重新加载：\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: nginx-ingress-controller\ndata:\n  keep-alive-requests: \"10000\"\n  max-worker-connections: \"65535\"\n```\n\n","source":"_posts/Nginx-Ingress性能调优.md","raw":"---\ntitle: Nginx Ingress性能调优\ndate: 2020-09-09 17:53:36\ntags:\n- Ingress\n- k8s\ncategories:\n- 实践K8s\n- 调优\ndescription: 对Nginx Ingress进行高并发场景下性能优化\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599655866231&di=6dcf53f8ddee33711c9b7d034f9f92de&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-b150ca39ea4691b50d3b11c3481f61b3_1440w.jpg%3Fsource%3D172ae18b\n---\n\n\n\n在高并发场景下，需要对Nginx Ingress进行内核参数调优，才能发挥出性能优势，下面先介绍相关的参数，然后通过`initContainers`方式进行调优。\n\n---\n\n\n\n# 系统参数优化\n\n\n\n## 连接队列大小调整\n\n进程监听socket的连接队列最大的大小受限于`net.core.somaxconn`参数，在高并发下如果队列过小会导致队列溢出，部分连接将无法建立。建议将这个参数调整为`65535`：\n\n```bash\n$ sysctl -w net.core.somaxconn=65535\n```\n\n\n\n实际上，nginx ingress会读取`somaxconn`作为`backlog`参数写到配置文件中，也就是说nginx ingress的连接队列大小只取决于`somaxconn`的值。\n\n\n\n> 在nginx中`backlog`是进程调用listen监听端口时传入的参数，这个参数决定socket队列大小，默认511，所以一般nginx如果不设置这个值，队列大小就只有511。\n\n\n\n## 扩大源端口范围\n\n高并发场景下nginx ingress会产生大量的源端口与upstream建立连接，通过`net.ipv4.ip_local_port_range`参数指定。默认是`327868 ~ 60999`：\n\n```bash\n$ sysctl -w net.ipv4.ip_local_port_range=\"1024 65535\"\n```\n\n\n\n## TIME_WAIT复用\n\n短连接并发高的时候会产生大量的`TIME_WAIT`，其默认2MSL才会释放，长期占用端口资源会导致新的请求无法连接，所以需要开启复用：\n\n```bash\n$ sysctl -w net.ipv4.tcp_tw_reuse=1\n```\n\n\n\n## 调整最大文件句柄\n\n作为反向代理的nginx ingress会和client和upstream分别建立一个文件句柄，所以理论上能同时处理的最大连接数是系统最大文件句柄的一半，建议调大：\n\n```bash\n$ sysctl -w fs.file-max=1048576\n```\n\n<br>\n\n\n\n# 通过initContainer配置\n\n在创建nginx ingress的pod的时候添加如下的配置：\n\n```yaml\ninitContainer:\n- name: setsysctl\n  image: busybox\n  securityContext:\n    privileged: true\n  command:\n  - sh\n  - -c\n  - |\n    sysctl -w net.core.somaxconn=65535\n    sysctl -w net.ipv4.ip_local_port_range=\"1024 65535\"\n    sysctl -w net.ipv4.tcp_tw_reuse=1\n    sysctl -w fs.file-max=1048576\n```\n\n\n\n<br>\n\n\n\n# nginx 优化\n\n## keepalive调整\n\nkeepalive连接由`keepalive_requests`参数控制单个keepalive最大请求数，默认100，当单个client的QPS过大，会导致keepalive连接频繁断开，产生大量的`TIME_WAIT`状态。所以应该增大`keep-alive-alive-requests`参数\n\n\n\n## 单个worker的最大连接数\n\n`max-worker-connections`控制每个worker进程可以打开的最大连接数，在高并发环境下建议增大，让nginx有处理更多请求的能力。\n\n\n\n<br>\n\n\n\n# 通过configmap配置\n\nnginx的配置通过configmap进行设置，nginx ingress会watch这并重新加载：\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: nginx-ingress-controller\ndata:\n  keep-alive-requests: \"10000\"\n  max-worker-connections: \"65535\"\n```\n\n","slug":"Nginx-Ingress性能调优","published":1,"updated":"2020-09-09T11:19:38.221Z","_id":"ckevaii1s000013kl5qg60ejo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在高并发场景下，需要对Nginx Ingress进行内核参数调优，才能发挥出性能优势，下面先介绍相关的参数，然后通过<code>initContainers</code>方式进行调优。</p>\n<hr>\n<h1 id=\"系统参数优化\"><a href=\"#系统参数优化\" class=\"headerlink\" title=\"系统参数优化\"></a>系统参数优化</h1><h2 id=\"连接队列大小调整\"><a href=\"#连接队列大小调整\" class=\"headerlink\" title=\"连接队列大小调整\"></a>连接队列大小调整</h2><p>进程监听socket的连接队列最大的大小受限于<code>net.core.somaxconn</code>参数，在高并发下如果队列过小会导致队列溢出，部分连接将无法建立。建议将这个参数调整为<code>65535</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w net.core.somaxconn=65535</span><br></pre></td></tr></table></figure>\n\n\n\n<p>实际上，nginx ingress会读取<code>somaxconn</code>作为<code>backlog</code>参数写到配置文件中，也就是说nginx ingress的连接队列大小只取决于<code>somaxconn</code>的值。</p>\n<blockquote>\n<p>在nginx中<code>backlog</code>是进程调用listen监听端口时传入的参数，这个参数决定socket队列大小，默认511，所以一般nginx如果不设置这个值，队列大小就只有511。</p>\n</blockquote>\n<h2 id=\"扩大源端口范围\"><a href=\"#扩大源端口范围\" class=\"headerlink\" title=\"扩大源端口范围\"></a>扩大源端口范围</h2><p>高并发场景下nginx ingress会产生大量的源端口与upstream建立连接，通过<code>net.ipv4.ip_local_port_range</code>参数指定。默认是<code>327868 ~ 60999</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w net.ipv4.ip_local_port_range=<span class=\"string\">\"1024 65535\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"TIME-WAIT复用\"><a href=\"#TIME-WAIT复用\" class=\"headerlink\" title=\"TIME_WAIT复用\"></a>TIME_WAIT复用</h2><p>短连接并发高的时候会产生大量的<code>TIME_WAIT</code>，其默认2MSL才会释放，长期占用端口资源会导致新的请求无法连接，所以需要开启复用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w net.ipv4.tcp_tw_reuse=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"调整最大文件句柄\"><a href=\"#调整最大文件句柄\" class=\"headerlink\" title=\"调整最大文件句柄\"></a>调整最大文件句柄</h2><p>作为反向代理的nginx ingress会和client和upstream分别建立一个文件句柄，所以理论上能同时处理的最大连接数是系统最大文件句柄的一半，建议调大：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w fs.file-max=1048576</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"通过initContainer配置\"><a href=\"#通过initContainer配置\" class=\"headerlink\" title=\"通过initContainer配置\"></a>通过initContainer配置</h1><p>在创建nginx ingress的pod的时候添加如下的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">initContainer:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">setsysctl</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">  <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"string\">sysctl</span> <span class=\"string\">-w</span> <span class=\"string\">net.core.somaxconn=65535</span></span><br><span class=\"line\">    <span class=\"string\">sysctl</span> <span class=\"string\">-w</span> <span class=\"string\">net.ipv4.ip_local_port_range=\"1024</span> <span class=\"number\">65535</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    sysctl -w net.ipv4.tcp_tw_reuse=1</span></span><br><span class=\"line\"><span class=\"string\">    sysctl -w fs.file-max=1048576</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"nginx-优化\"><a href=\"#nginx-优化\" class=\"headerlink\" title=\"nginx 优化\"></a>nginx 优化</h1><h2 id=\"keepalive调整\"><a href=\"#keepalive调整\" class=\"headerlink\" title=\"keepalive调整\"></a>keepalive调整</h2><p>keepalive连接由<code>keepalive_requests</code>参数控制单个keepalive最大请求数，默认100，当单个client的QPS过大，会导致keepalive连接频繁断开，产生大量的<code>TIME_WAIT</code>状态。所以应该增大<code>keep-alive-alive-requests</code>参数</p>\n<h2 id=\"单个worker的最大连接数\"><a href=\"#单个worker的最大连接数\" class=\"headerlink\" title=\"单个worker的最大连接数\"></a>单个worker的最大连接数</h2><p><code>max-worker-connections</code>控制每个worker进程可以打开的最大连接数，在高并发环境下建议增大，让nginx有处理更多请求的能力。</p>\n<br>\n\n\n\n<h1 id=\"通过configmap配置\"><a href=\"#通过configmap配置\" class=\"headerlink\" title=\"通过configmap配置\"></a>通过configmap配置</h1><p>nginx的配置通过configmap进行设置，nginx ingress会watch这并重新加载：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-controller</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">keep-alive-requests:</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\">  <span class=\"attr\">max-worker-connections:</span> <span class=\"string\">\"65535\"</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>在高并发场景下，需要对Nginx Ingress进行内核参数调优，才能发挥出性能优势，下面先介绍相关的参数，然后通过<code>initContainers</code>方式进行调优。</p>\n<hr>\n<h1 id=\"系统参数优化\"><a href=\"#系统参数优化\" class=\"headerlink\" title=\"系统参数优化\"></a>系统参数优化</h1><h2 id=\"连接队列大小调整\"><a href=\"#连接队列大小调整\" class=\"headerlink\" title=\"连接队列大小调整\"></a>连接队列大小调整</h2><p>进程监听socket的连接队列最大的大小受限于<code>net.core.somaxconn</code>参数，在高并发下如果队列过小会导致队列溢出，部分连接将无法建立。建议将这个参数调整为<code>65535</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w net.core.somaxconn=65535</span><br></pre></td></tr></table></figure>\n\n\n\n<p>实际上，nginx ingress会读取<code>somaxconn</code>作为<code>backlog</code>参数写到配置文件中，也就是说nginx ingress的连接队列大小只取决于<code>somaxconn</code>的值。</p>\n<blockquote>\n<p>在nginx中<code>backlog</code>是进程调用listen监听端口时传入的参数，这个参数决定socket队列大小，默认511，所以一般nginx如果不设置这个值，队列大小就只有511。</p>\n</blockquote>\n<h2 id=\"扩大源端口范围\"><a href=\"#扩大源端口范围\" class=\"headerlink\" title=\"扩大源端口范围\"></a>扩大源端口范围</h2><p>高并发场景下nginx ingress会产生大量的源端口与upstream建立连接，通过<code>net.ipv4.ip_local_port_range</code>参数指定。默认是<code>327868 ~ 60999</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w net.ipv4.ip_local_port_range=<span class=\"string\">\"1024 65535\"</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"TIME-WAIT复用\"><a href=\"#TIME-WAIT复用\" class=\"headerlink\" title=\"TIME_WAIT复用\"></a>TIME_WAIT复用</h2><p>短连接并发高的时候会产生大量的<code>TIME_WAIT</code>，其默认2MSL才会释放，长期占用端口资源会导致新的请求无法连接，所以需要开启复用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w net.ipv4.tcp_tw_reuse=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"调整最大文件句柄\"><a href=\"#调整最大文件句柄\" class=\"headerlink\" title=\"调整最大文件句柄\"></a>调整最大文件句柄</h2><p>作为反向代理的nginx ingress会和client和upstream分别建立一个文件句柄，所以理论上能同时处理的最大连接数是系统最大文件句柄的一半，建议调大：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sysctl -w fs.file-max=1048576</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h1 id=\"通过initContainer配置\"><a href=\"#通过initContainer配置\" class=\"headerlink\" title=\"通过initContainer配置\"></a>通过initContainer配置</h1><p>在创建nginx ingress的pod的时候添加如下的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">initContainer:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">setsysctl</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">busybox</span></span><br><span class=\"line\">  <span class=\"attr\">securityContext:</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">sh</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">-c</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">|</span></span><br><span class=\"line\">    <span class=\"string\">sysctl</span> <span class=\"string\">-w</span> <span class=\"string\">net.core.somaxconn=65535</span></span><br><span class=\"line\">    <span class=\"string\">sysctl</span> <span class=\"string\">-w</span> <span class=\"string\">net.ipv4.ip_local_port_range=\"1024</span> <span class=\"number\">65535</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    sysctl -w net.ipv4.tcp_tw_reuse=1</span></span><br><span class=\"line\"><span class=\"string\">    sysctl -w fs.file-max=1048576</span></span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"nginx-优化\"><a href=\"#nginx-优化\" class=\"headerlink\" title=\"nginx 优化\"></a>nginx 优化</h1><h2 id=\"keepalive调整\"><a href=\"#keepalive调整\" class=\"headerlink\" title=\"keepalive调整\"></a>keepalive调整</h2><p>keepalive连接由<code>keepalive_requests</code>参数控制单个keepalive最大请求数，默认100，当单个client的QPS过大，会导致keepalive连接频繁断开，产生大量的<code>TIME_WAIT</code>状态。所以应该增大<code>keep-alive-alive-requests</code>参数</p>\n<h2 id=\"单个worker的最大连接数\"><a href=\"#单个worker的最大连接数\" class=\"headerlink\" title=\"单个worker的最大连接数\"></a>单个worker的最大连接数</h2><p><code>max-worker-connections</code>控制每个worker进程可以打开的最大连接数，在高并发环境下建议增大，让nginx有处理更多请求的能力。</p>\n<br>\n\n\n\n<h1 id=\"通过configmap配置\"><a href=\"#通过configmap配置\" class=\"headerlink\" title=\"通过configmap配置\"></a>通过configmap配置</h1><p>nginx的配置通过configmap进行设置，nginx ingress会watch这并重新加载：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-ingress-controller</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">keep-alive-requests:</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\">  <span class=\"attr\">max-worker-connections:</span> <span class=\"string\">\"65535\"</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用uwsgi+nginx部署django服务","date":"2020-09-12T06:39:51.000Z","description":"使用uwsgi和nginx结合部署django服务","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599902999809&di=6306855101fdb4e6f595c38dfce7f8dc&imgtype=0&src=http%3A%2F%2Fblog.demon8.cn%2Fmedia%2Farticle_img%2F2019%2F12%2F12%2Fw1c30rf061.jpeg","_content":"\n\n\n# uwsgi介绍\n\n## wsgi\n\nWSGI，全称 `Web Server Gateway Interface`，或者` Python Web Server Gateway Interface` ，是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口，是一个Gateway，在协议之间进行转换。\n\n\n\nWSGI 是作为 Web 服务器与 Web 应用程序或应用框架之间的一种低级别的接口，以提升可移植 Web 应用开发的共同点。WSGI 是基于现存的 CGI 标准而设计的。\n\n很多框架都自带了 WSGI server ，比如 Flask，webpy，Django、CherryPy等等。当然性能都不好，自带的 web server 更多的是测试用途，发布时则使用生产环境的 WSGI server或者是联合 nginx 做 uwsgi 。\n\n\n\n## uwsgi\n\nuWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中`HttpUwsgiModule`的作用是与uWSGI服务器进行交换。\n\n要注意 WSGI / uwsgi / uWSGI 这三个概念的区分。\n\n- WSGI看过前面小节的同学很清楚了，是一种通信协议。\n- uwsgi同WSGI一样是一种通信协议。\n- 而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。\n\nuwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。\n\n为什么有了uWSGI为什么还需要nginx？因为nginx具备优秀的静态内容处理能力，然后将动态内容转发给uWSGI服务器，这样可以达到很好的客户端响应。\n\n\n\n\n\n<br>\n\n\n\n\n\n# 安装uwsgi\n\n在python3环境下安装uwsgi：\n\n```bash\n$ yum install -y epel-release uwsgi-plugin-python36\n```\n\n\n\n<br>\n\n\n\n# 通过uwsgi启动服务\n\n## 创建虚拟环境\n\n创建一个python虚拟环境：\n\n```bash\n$ pip install virtualenv\n$ virtualenv  venv\n```\n\n\n\n## 安装依赖包\n\n```bash\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n$ pip install uwsgi\n```\n\n\n\n## 创建uwsgi配置文件\n\n在django项目的根目录下创建一个名为`uwsgi.ini`的配置文件：\n\n```ini\n[uwsgi]\n# django项目的根目录\nchdir=/root/src/\n\n# 模块名，格式为：<django项目名称>.wsgi:application\nmodule=miniproject.wsgi:application\n\n# wsgi文件相对位置\nwsgi-file=miniproject/wsgi.py\n\n# wsgi启动后监听的地址\nsocket=0.0.0.0:7000\n\n# websocket允许的最大字节\nwebsocket-max-size = 2048\n\n# 启动的进程数\nworkers=8\n\n# 每个worker中的线程数\nthreads= 8\n\nenable-threads=true\n\n# 启动的用户和组\nuid=root\ngid=root\n\n# 禁用请求日志记录\ndisable-logging = false\nthunder-lock=true\npost-buffering=4096\n\n# 指定的插件\nplugins=python36\n\n# 虚拟环境的位置\nhome=/root/venv\n```\n\n\n\n## 启动uwsgi\n\n使用下面的命令直接启动uwsgi：\n\n```bash\n$ uwsgi --ini uwsgi.ini\n```\n\n\n\n<br>\n\n\n\n# 配置nginx\n\n通过nginx代理uwsgi，配置文件如下：\n\n```nginx\nupstream uwsgiapi {\n  server 127.0.0.1:7000;\n}\n\nserver {\n      listen 9000;\n\n       location /miniProj/segment/querySegment {\n           include /usr/local/nginx/conf/uwsgi_params;\n           uwsgi_pass miniapi;\n           proxy_buffer_size 128k;\n           proxy_buffering on;\n           proxy_buffers 4 128k;\n           proxy_busy_buffers_size 256k;\n           proxy_max_temp_file_size 256k;\n           proxy_http_version 1.1;\n           proxy_set_header Upgrade $http_upgrade;\n           proxy_set_header Connection \"upgrade\";\n           uwsgi_read_timeout 86400s;\n           uwsgi_send_timeout 86400s;\n           client_max_body_size    1000m;\n           proxy_set_header X-Real-IP $remote_addr;\n       }\n\n       location = /favicon.ico {\n           log_not_found off;\n           access_log off;\n       }\n\n       location ~* /\\.(svn|git)/ {\n           return 404;\n       }\n}\n```\n\n","source":"_posts/使用uwsgi-nginx部署django服务.md","raw":"---\ntitle: 使用uwsgi+nginx部署django服务\ndate: 2020-09-12 14:39:51\ntags:\n- Django\n- uwsgi\ncategories:\n- python web开发\n- Django\n- 服务部署\ndescription: 使用uwsgi和nginx结合部署django服务\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599902999809&di=6306855101fdb4e6f595c38dfce7f8dc&imgtype=0&src=http%3A%2F%2Fblog.demon8.cn%2Fmedia%2Farticle_img%2F2019%2F12%2F12%2Fw1c30rf061.jpeg\n---\n\n\n\n# uwsgi介绍\n\n## wsgi\n\nWSGI，全称 `Web Server Gateway Interface`，或者` Python Web Server Gateway Interface` ，是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口，是一个Gateway，在协议之间进行转换。\n\n\n\nWSGI 是作为 Web 服务器与 Web 应用程序或应用框架之间的一种低级别的接口，以提升可移植 Web 应用开发的共同点。WSGI 是基于现存的 CGI 标准而设计的。\n\n很多框架都自带了 WSGI server ，比如 Flask，webpy，Django、CherryPy等等。当然性能都不好，自带的 web server 更多的是测试用途，发布时则使用生产环境的 WSGI server或者是联合 nginx 做 uwsgi 。\n\n\n\n## uwsgi\n\nuWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中`HttpUwsgiModule`的作用是与uWSGI服务器进行交换。\n\n要注意 WSGI / uwsgi / uWSGI 这三个概念的区分。\n\n- WSGI看过前面小节的同学很清楚了，是一种通信协议。\n- uwsgi同WSGI一样是一种通信协议。\n- 而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。\n\nuwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。\n\n为什么有了uWSGI为什么还需要nginx？因为nginx具备优秀的静态内容处理能力，然后将动态内容转发给uWSGI服务器，这样可以达到很好的客户端响应。\n\n\n\n\n\n<br>\n\n\n\n\n\n# 安装uwsgi\n\n在python3环境下安装uwsgi：\n\n```bash\n$ yum install -y epel-release uwsgi-plugin-python36\n```\n\n\n\n<br>\n\n\n\n# 通过uwsgi启动服务\n\n## 创建虚拟环境\n\n创建一个python虚拟环境：\n\n```bash\n$ pip install virtualenv\n$ virtualenv  venv\n```\n\n\n\n## 安装依赖包\n\n```bash\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n$ pip install uwsgi\n```\n\n\n\n## 创建uwsgi配置文件\n\n在django项目的根目录下创建一个名为`uwsgi.ini`的配置文件：\n\n```ini\n[uwsgi]\n# django项目的根目录\nchdir=/root/src/\n\n# 模块名，格式为：<django项目名称>.wsgi:application\nmodule=miniproject.wsgi:application\n\n# wsgi文件相对位置\nwsgi-file=miniproject/wsgi.py\n\n# wsgi启动后监听的地址\nsocket=0.0.0.0:7000\n\n# websocket允许的最大字节\nwebsocket-max-size = 2048\n\n# 启动的进程数\nworkers=8\n\n# 每个worker中的线程数\nthreads= 8\n\nenable-threads=true\n\n# 启动的用户和组\nuid=root\ngid=root\n\n# 禁用请求日志记录\ndisable-logging = false\nthunder-lock=true\npost-buffering=4096\n\n# 指定的插件\nplugins=python36\n\n# 虚拟环境的位置\nhome=/root/venv\n```\n\n\n\n## 启动uwsgi\n\n使用下面的命令直接启动uwsgi：\n\n```bash\n$ uwsgi --ini uwsgi.ini\n```\n\n\n\n<br>\n\n\n\n# 配置nginx\n\n通过nginx代理uwsgi，配置文件如下：\n\n```nginx\nupstream uwsgiapi {\n  server 127.0.0.1:7000;\n}\n\nserver {\n      listen 9000;\n\n       location /miniProj/segment/querySegment {\n           include /usr/local/nginx/conf/uwsgi_params;\n           uwsgi_pass miniapi;\n           proxy_buffer_size 128k;\n           proxy_buffering on;\n           proxy_buffers 4 128k;\n           proxy_busy_buffers_size 256k;\n           proxy_max_temp_file_size 256k;\n           proxy_http_version 1.1;\n           proxy_set_header Upgrade $http_upgrade;\n           proxy_set_header Connection \"upgrade\";\n           uwsgi_read_timeout 86400s;\n           uwsgi_send_timeout 86400s;\n           client_max_body_size    1000m;\n           proxy_set_header X-Real-IP $remote_addr;\n       }\n\n       location = /favicon.ico {\n           log_not_found off;\n           access_log off;\n       }\n\n       location ~* /\\.(svn|git)/ {\n           return 404;\n       }\n}\n```\n\n","slug":"使用uwsgi-nginx部署django服务","published":1,"updated":"2020-09-12T07:04:59.945Z","_id":"ckezay53n0000uwkl0jd6ba9j","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"uwsgi介绍\"><a href=\"#uwsgi介绍\" class=\"headerlink\" title=\"uwsgi介绍\"></a>uwsgi介绍</h1><h2 id=\"wsgi\"><a href=\"#wsgi\" class=\"headerlink\" title=\"wsgi\"></a>wsgi</h2><p>WSGI，全称 <code>Web Server Gateway Interface</code>，或者<code>Python Web Server Gateway Interface</code> ，是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口，是一个Gateway，在协议之间进行转换。</p>\n<p>WSGI 是作为 Web 服务器与 Web 应用程序或应用框架之间的一种低级别的接口，以提升可移植 Web 应用开发的共同点。WSGI 是基于现存的 CGI 标准而设计的。</p>\n<p>很多框架都自带了 WSGI server ，比如 Flask，webpy，Django、CherryPy等等。当然性能都不好，自带的 web server 更多的是测试用途，发布时则使用生产环境的 WSGI server或者是联合 nginx 做 uwsgi 。</p>\n<h2 id=\"uwsgi\"><a href=\"#uwsgi\" class=\"headerlink\" title=\"uwsgi\"></a>uwsgi</h2><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中<code>HttpUwsgiModule</code>的作用是与uWSGI服务器进行交换。</p>\n<p>要注意 WSGI / uwsgi / uWSGI 这三个概念的区分。</p>\n<ul>\n<li>WSGI看过前面小节的同学很清楚了，是一种通信协议。</li>\n<li>uwsgi同WSGI一样是一种通信协议。</li>\n<li>而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。</li>\n</ul>\n<p>uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。</p>\n<p>为什么有了uWSGI为什么还需要nginx？因为nginx具备优秀的静态内容处理能力，然后将动态内容转发给uWSGI服务器，这样可以达到很好的客户端响应。</p>\n<br>\n\n\n\n\n\n<h1 id=\"安装uwsgi\"><a href=\"#安装uwsgi\" class=\"headerlink\" title=\"安装uwsgi\"></a>安装uwsgi</h1><p>在python3环境下安装uwsgi：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release uwsgi-plugin-python36</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"通过uwsgi启动服务\"><a href=\"#通过uwsgi启动服务\" class=\"headerlink\" title=\"通过uwsgi启动服务\"></a>通过uwsgi启动服务</h1><h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><p>创建一个python虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install virtualenv</span><br><span class=\"line\">$ virtualenv  venv</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> venv/bin/activate</span><br><span class=\"line\">$ pip install -r requirements.txt</span><br><span class=\"line\">$ pip install uwsgi</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建uwsgi配置文件\"><a href=\"#创建uwsgi配置文件\" class=\"headerlink\" title=\"创建uwsgi配置文件\"></a>创建uwsgi配置文件</h2><p>在django项目的根目录下创建一个名为<code>uwsgi.ini</code>的配置文件：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"><span class=\"comment\"># django项目的根目录</span></span><br><span class=\"line\"><span class=\"attr\">chdir</span>=/root/src/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模块名，格式为：&lt;django项目名称&gt;.wsgi:application</span></span><br><span class=\"line\"><span class=\"attr\">module</span>=miniproject.wsgi:application</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wsgi文件相对位置</span></span><br><span class=\"line\"><span class=\"attr\">wsgi-file</span>=miniproject/wsgi.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wsgi启动后监听的地址</span></span><br><span class=\"line\"><span class=\"attr\">socket</span>=<span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># websocket允许的最大字节</span></span><br><span class=\"line\"><span class=\"attr\">websocket-max-size</span> = <span class=\"number\">2048</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动的进程数</span></span><br><span class=\"line\"><span class=\"attr\">workers</span>=<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个worker中的线程数</span></span><br><span class=\"line\"><span class=\"attr\">threads</span>= <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">enable-threads</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动的用户和组</span></span><br><span class=\"line\"><span class=\"attr\">uid</span>=root</span><br><span class=\"line\"><span class=\"attr\">gid</span>=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 禁用请求日志记录</span></span><br><span class=\"line\"><span class=\"attr\">disable-logging</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">thunder-lock</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">post-buffering</span>=<span class=\"number\">4096</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定的插件</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>=python36</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 虚拟环境的位置</span></span><br><span class=\"line\"><span class=\"attr\">home</span>=/root/venv</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动uwsgi\"><a href=\"#启动uwsgi\" class=\"headerlink\" title=\"启动uwsgi\"></a>启动uwsgi</h2><p>使用下面的命令直接启动uwsgi：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h1><p>通过nginx代理uwsgi，配置文件如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> uwsgiapi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:7000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">listen</span> <span class=\"number\">9000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"attribute\">location</span> /miniProj/segment/querySegment &#123;</span><br><span class=\"line\">           <span class=\"attribute\">include</span> /usr/local/nginx/conf/uwsgi_params;</span><br><span class=\"line\">           <span class=\"attribute\">uwsgi_pass</span> miniapi;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_buffer_size</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_buffering</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">4</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_busy_buffers_size</span> <span class=\"number\">256k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_max_temp_file_size</span> <span class=\"number\">256k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_set_header</span> Upgrade <span class=\"variable\">$http_upgrade</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_set_header</span> Connection <span class=\"string\">\"upgrade\"</span>;</span><br><span class=\"line\">           <span class=\"attribute\">uwsgi_read_timeout</span> <span class=\"number\">86400s</span>;</span><br><span class=\"line\">           <span class=\"attribute\">uwsgi_send_timeout</span> <span class=\"number\">86400s</span>;</span><br><span class=\"line\">           <span class=\"attribute\">client_max_body_size</span>    <span class=\"number\">1000m</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">           <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">           <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">           <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"uwsgi介绍\"><a href=\"#uwsgi介绍\" class=\"headerlink\" title=\"uwsgi介绍\"></a>uwsgi介绍</h1><h2 id=\"wsgi\"><a href=\"#wsgi\" class=\"headerlink\" title=\"wsgi\"></a>wsgi</h2><p>WSGI，全称 <code>Web Server Gateway Interface</code>，或者<code>Python Web Server Gateway Interface</code> ，是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口，是一个Gateway，在协议之间进行转换。</p>\n<p>WSGI 是作为 Web 服务器与 Web 应用程序或应用框架之间的一种低级别的接口，以提升可移植 Web 应用开发的共同点。WSGI 是基于现存的 CGI 标准而设计的。</p>\n<p>很多框架都自带了 WSGI server ，比如 Flask，webpy，Django、CherryPy等等。当然性能都不好，自带的 web server 更多的是测试用途，发布时则使用生产环境的 WSGI server或者是联合 nginx 做 uwsgi 。</p>\n<h2 id=\"uwsgi\"><a href=\"#uwsgi\" class=\"headerlink\" title=\"uwsgi\"></a>uwsgi</h2><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。Nginx中<code>HttpUwsgiModule</code>的作用是与uWSGI服务器进行交换。</p>\n<p>要注意 WSGI / uwsgi / uWSGI 这三个概念的区分。</p>\n<ul>\n<li>WSGI看过前面小节的同学很清楚了，是一种通信协议。</li>\n<li>uwsgi同WSGI一样是一种通信协议。</li>\n<li>而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。</li>\n</ul>\n<p>uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。</p>\n<p>为什么有了uWSGI为什么还需要nginx？因为nginx具备优秀的静态内容处理能力，然后将动态内容转发给uWSGI服务器，这样可以达到很好的客户端响应。</p>\n<br>\n\n\n\n\n\n<h1 id=\"安装uwsgi\"><a href=\"#安装uwsgi\" class=\"headerlink\" title=\"安装uwsgi\"></a>安装uwsgi</h1><p>在python3环境下安装uwsgi：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y epel-release uwsgi-plugin-python36</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"通过uwsgi启动服务\"><a href=\"#通过uwsgi启动服务\" class=\"headerlink\" title=\"通过uwsgi启动服务\"></a>通过uwsgi启动服务</h1><h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><p>创建一个python虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install virtualenv</span><br><span class=\"line\">$ virtualenv  venv</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> venv/bin/activate</span><br><span class=\"line\">$ pip install -r requirements.txt</span><br><span class=\"line\">$ pip install uwsgi</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建uwsgi配置文件\"><a href=\"#创建uwsgi配置文件\" class=\"headerlink\" title=\"创建uwsgi配置文件\"></a>创建uwsgi配置文件</h2><p>在django项目的根目录下创建一个名为<code>uwsgi.ini</code>的配置文件：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[uwsgi]</span></span><br><span class=\"line\"><span class=\"comment\"># django项目的根目录</span></span><br><span class=\"line\"><span class=\"attr\">chdir</span>=/root/src/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模块名，格式为：&lt;django项目名称&gt;.wsgi:application</span></span><br><span class=\"line\"><span class=\"attr\">module</span>=miniproject.wsgi:application</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wsgi文件相对位置</span></span><br><span class=\"line\"><span class=\"attr\">wsgi-file</span>=miniproject/wsgi.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wsgi启动后监听的地址</span></span><br><span class=\"line\"><span class=\"attr\">socket</span>=<span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># websocket允许的最大字节</span></span><br><span class=\"line\"><span class=\"attr\">websocket-max-size</span> = <span class=\"number\">2048</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动的进程数</span></span><br><span class=\"line\"><span class=\"attr\">workers</span>=<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个worker中的线程数</span></span><br><span class=\"line\"><span class=\"attr\">threads</span>= <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">enable-threads</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动的用户和组</span></span><br><span class=\"line\"><span class=\"attr\">uid</span>=root</span><br><span class=\"line\"><span class=\"attr\">gid</span>=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 禁用请求日志记录</span></span><br><span class=\"line\"><span class=\"attr\">disable-logging</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">thunder-lock</span>=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">post-buffering</span>=<span class=\"number\">4096</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定的插件</span></span><br><span class=\"line\"><span class=\"attr\">plugins</span>=python36</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 虚拟环境的位置</span></span><br><span class=\"line\"><span class=\"attr\">home</span>=/root/venv</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动uwsgi\"><a href=\"#启动uwsgi\" class=\"headerlink\" title=\"启动uwsgi\"></a>启动uwsgi</h2><p>使用下面的命令直接启动uwsgi：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h1><p>通过nginx代理uwsgi，配置文件如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> uwsgiapi &#123;</span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:7000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">listen</span> <span class=\"number\">9000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"attribute\">location</span> /miniProj/segment/querySegment &#123;</span><br><span class=\"line\">           <span class=\"attribute\">include</span> /usr/local/nginx/conf/uwsgi_params;</span><br><span class=\"line\">           <span class=\"attribute\">uwsgi_pass</span> miniapi;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_buffer_size</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_buffering</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_buffers</span> <span class=\"number\">4</span> <span class=\"number\">128k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_busy_buffers_size</span> <span class=\"number\">256k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_max_temp_file_size</span> <span class=\"number\">256k</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_set_header</span> Upgrade <span class=\"variable\">$http_upgrade</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_set_header</span> Connection <span class=\"string\">\"upgrade\"</span>;</span><br><span class=\"line\">           <span class=\"attribute\">uwsgi_read_timeout</span> <span class=\"number\">86400s</span>;</span><br><span class=\"line\">           <span class=\"attribute\">uwsgi_send_timeout</span> <span class=\"number\">86400s</span>;</span><br><span class=\"line\">           <span class=\"attribute\">client_max_body_size</span>    <span class=\"number\">1000m</span>;</span><br><span class=\"line\">           <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"attribute\">location</span> = /favicon.ico &#123;</span><br><span class=\"line\">           <span class=\"attribute\">log_not_found</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">           <span class=\"attribute\">access_log</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"attribute\">location</span> <span class=\"regexp\">~* /\\.(svn|git)/</span> &#123;</span><br><span class=\"line\">           <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"git的常用操作","date":"2020-09-13T05:45:57.000Z","description":"git的常用操作","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599986079915&di=2b0688693e4df05f79337825639058b0&imgtype=0&src=http%3A%2F%2Fimage.mamicode.com%2Finfo%2F201807%2F20180720154704366185.gif","_content":"\n\n\n# git安装\n\n一般服务器都默认安装了git，如果没有安装可以使用如下的命令进行安装：\n\n```bash\n$ yum install -y git\n$ git --version\n```\n\n\n\n安装好后需要进行简单的设置：\n\n```bash\n# 设定用户名\n$ git config --global user.name <username>\n\n# 设定邮箱\n$ git config --global user.email <email>\n\n# 查看所有配置\n$ git config --list\n```\n\n\n\n<br>\n\n\n\n# 初始化项目\n\n初始化一个项目可以使用下面的命令进行：\n\n```bash\n# 新建一个项目目录\n$ mkdir newproject\n$ cd newproject\n\n# 初始化\n$ git init\n```\n\n\n\n`git init`会创建一个`.git`的隐藏目录，其中的文件和用途如下：\n\n- `hooks`：存放一些脚本，可设定指定的git命令运行后执行相应的脚本；\n- `info`：包含仓库的信息；\n- `logs`：保存所有更新的引用记录；\n- `objects`：项目中的所有对象；\n- `refs`：保存指向对象的索引；\n- `COMMIT_EDITMSG`：保存最新的commit信息；\n- `config`：git仓库的配置文件；\n- `description`：仓库描述信息；\n- `index`：二进制格式文件，暂存区；\n- `HEAD`：包含了当前分支的引用，通过这个文件git可以得到下一次commit的parent；\n- `ORIG_HEAD`：head指针的前一个状态；\n\n\n\n<br>\n\n\n\n# 创建git仓库\n\n## clone方式\n\n```bash\n# 新建一个仓库目录\n$ mkdir gitrepo \n$ cd gitrepo\n\n# 从某个gitweb仓库克隆项目，例如克隆jquery项目\n$ git clone https://github.com/jquery/jquery.git\n```\n\n\n\n上边的clone命令会在本地生成一个和远程仓库同名的目录来保存代码，如果想要一个新的名字，则可以如下的方式：\n\n```bash\n$ git clone https://github.com/jquery/jquery.git <本地目录名>\n```\n\n\n\n> 一般`clone`命令除了支持http(s)协议外，还支持git、ssh等协议。\n\n\n\n## pull方式\n\npull命令是从远程仓库取回分支的更新并合并到对应的本地分支，例如：\n\n```bash\n# 将远程仓库的next分支与本地master分支合并\n$ git pull origin netx:master\n\n# 如果远程分支就是当前分支\n$ git pull origin master\n\n# 或者\n$ git pull\n```\n\n\n\n\n\n## fetch方式\n\nfetch也是从远程仓库取回新的更新内容，例如：\n\n```bash\n# 将远程仓库的更新全部取回本地\n$ git fetch <远程主机名>\n\n# 取回远程主机上特定分支的更新到本地，例如取回master\n$ git fetch origin master\n```\n\n\n\n和pull方式不同的是，fetch方式不会立刻合并到本地分支，fetch后再本地需要使用`远程主机名/分支名`的方式访问，例如：`origin/master`\n\n\n\n<br>\n\n\n\n# 提交代码到远程仓库\n\n## 提交到本地暂存区\n\n当修改完文件后提交到本地暂存区，以免后续发现问题误提交到远程仓库：\n\n```bash\n# 添加所有更新的文件（一般在项目根目录下运行）\n$ git add .\n\n# 添加某个文件到暂存区，例如README.md\n$ git add README.md\n\n# 查看暂存区的文件\n$ git ls-files --stage\n```\n\n\n\n## 提交到本地仓库\n\n提交到远程仓库之前，先提交到本地的仓库：\n\n```bash\n$ git commit\n\n# 好的习惯是commit的时候添加一段说明\n$ git commit -m '添加了xxx文件'\n```\n\n\n\n## 提交到远端仓库\n\n使用`push`将本地仓库的更新提交到远端：\n\n```bash\n# 提交到远端的master分支，如果分支不存在，则会自动创建\n$ git push origin master\n```\n\n\n\n<br>\n\n\n\n# 管理远端服务器\n\n\n\n## 查看远端服务器\n\n为了方便管理，git可以添加多个远端服务器，并且要求每个远端服务器都要有一个主机名（例如origin），可以用过下面的命令进行查看：\n\n```bash\n$ git remote -v \n```\n\n\n\n查看主机的详细信息，可以使用下面的命令：\n\n```bash\n$ git remote show <远端主机名>\n```\n\n\n\n## 添加远端主机\n\n在clone远程仓库的代码时，使用的远程主机地址会被自动保存并命名为`origin`，如果不想用这个名字，可以用如下的方式制定一个名字：\n\n```bash\n$ git clone -o jquery https://github.com/jquery/jquery.git\n```\n\n\n\n手动添加可以使用下面的命令：\n\n```bash\n$ git remote add <主机名> <地址>\n```\n\n\n\n## 删除远端主机\n\n删除远端主机命令如下：\n\n```bash\n$ git remote rm <主机名>\n```\n\n\n\n## 远端主机改名\n\n更改远端主机的名字可以使用如下的方式：\n\n```bash\n$ git remote rename <原名字> <新名字>\n```\n\n\n\n<br>\n\n\n\n# 分支管理\n\n## 查看分支\n\n```bash\n# 查看所有分支\n$ git branch -a\n\n# 查看远程分支\n$ git branch -r\n\n# 查看当前所在的分支\n$ git branch\n```\n\n\n\n## 创建分支\n\n```bash\n$ git branch <新分支名称>\n```\n\n\n\n## 切换分支\n\n使用checkout来切换所在的分支：\n\n```bash\n$ git checkout <要切换到的分支名称>\n\n# 创建一个新分支并且换过去\n$ git checkout -b <新分支名>\n```\n\n\n\n## 删除分支\n\n```bash\n$ git branch -D <分支名称>\n```\n\n\n\n## 合并分支\n\n例如将abc分支合并到master分支：\n\n```bash\n$ git checkout master\n$ git merge abc\n```\n\n","source":"_posts/git的常用操作.md","raw":"---\ntitle: git的常用操作\ndate: 2020-09-13 13:45:57\ntags:\n- git\ncategories:\n- git\ndescription: git的常用操作\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1599986079915&di=2b0688693e4df05f79337825639058b0&imgtype=0&src=http%3A%2F%2Fimage.mamicode.com%2Finfo%2F201807%2F20180720154704366185.gif\n---\n\n\n\n# git安装\n\n一般服务器都默认安装了git，如果没有安装可以使用如下的命令进行安装：\n\n```bash\n$ yum install -y git\n$ git --version\n```\n\n\n\n安装好后需要进行简单的设置：\n\n```bash\n# 设定用户名\n$ git config --global user.name <username>\n\n# 设定邮箱\n$ git config --global user.email <email>\n\n# 查看所有配置\n$ git config --list\n```\n\n\n\n<br>\n\n\n\n# 初始化项目\n\n初始化一个项目可以使用下面的命令进行：\n\n```bash\n# 新建一个项目目录\n$ mkdir newproject\n$ cd newproject\n\n# 初始化\n$ git init\n```\n\n\n\n`git init`会创建一个`.git`的隐藏目录，其中的文件和用途如下：\n\n- `hooks`：存放一些脚本，可设定指定的git命令运行后执行相应的脚本；\n- `info`：包含仓库的信息；\n- `logs`：保存所有更新的引用记录；\n- `objects`：项目中的所有对象；\n- `refs`：保存指向对象的索引；\n- `COMMIT_EDITMSG`：保存最新的commit信息；\n- `config`：git仓库的配置文件；\n- `description`：仓库描述信息；\n- `index`：二进制格式文件，暂存区；\n- `HEAD`：包含了当前分支的引用，通过这个文件git可以得到下一次commit的parent；\n- `ORIG_HEAD`：head指针的前一个状态；\n\n\n\n<br>\n\n\n\n# 创建git仓库\n\n## clone方式\n\n```bash\n# 新建一个仓库目录\n$ mkdir gitrepo \n$ cd gitrepo\n\n# 从某个gitweb仓库克隆项目，例如克隆jquery项目\n$ git clone https://github.com/jquery/jquery.git\n```\n\n\n\n上边的clone命令会在本地生成一个和远程仓库同名的目录来保存代码，如果想要一个新的名字，则可以如下的方式：\n\n```bash\n$ git clone https://github.com/jquery/jquery.git <本地目录名>\n```\n\n\n\n> 一般`clone`命令除了支持http(s)协议外，还支持git、ssh等协议。\n\n\n\n## pull方式\n\npull命令是从远程仓库取回分支的更新并合并到对应的本地分支，例如：\n\n```bash\n# 将远程仓库的next分支与本地master分支合并\n$ git pull origin netx:master\n\n# 如果远程分支就是当前分支\n$ git pull origin master\n\n# 或者\n$ git pull\n```\n\n\n\n\n\n## fetch方式\n\nfetch也是从远程仓库取回新的更新内容，例如：\n\n```bash\n# 将远程仓库的更新全部取回本地\n$ git fetch <远程主机名>\n\n# 取回远程主机上特定分支的更新到本地，例如取回master\n$ git fetch origin master\n```\n\n\n\n和pull方式不同的是，fetch方式不会立刻合并到本地分支，fetch后再本地需要使用`远程主机名/分支名`的方式访问，例如：`origin/master`\n\n\n\n<br>\n\n\n\n# 提交代码到远程仓库\n\n## 提交到本地暂存区\n\n当修改完文件后提交到本地暂存区，以免后续发现问题误提交到远程仓库：\n\n```bash\n# 添加所有更新的文件（一般在项目根目录下运行）\n$ git add .\n\n# 添加某个文件到暂存区，例如README.md\n$ git add README.md\n\n# 查看暂存区的文件\n$ git ls-files --stage\n```\n\n\n\n## 提交到本地仓库\n\n提交到远程仓库之前，先提交到本地的仓库：\n\n```bash\n$ git commit\n\n# 好的习惯是commit的时候添加一段说明\n$ git commit -m '添加了xxx文件'\n```\n\n\n\n## 提交到远端仓库\n\n使用`push`将本地仓库的更新提交到远端：\n\n```bash\n# 提交到远端的master分支，如果分支不存在，则会自动创建\n$ git push origin master\n```\n\n\n\n<br>\n\n\n\n# 管理远端服务器\n\n\n\n## 查看远端服务器\n\n为了方便管理，git可以添加多个远端服务器，并且要求每个远端服务器都要有一个主机名（例如origin），可以用过下面的命令进行查看：\n\n```bash\n$ git remote -v \n```\n\n\n\n查看主机的详细信息，可以使用下面的命令：\n\n```bash\n$ git remote show <远端主机名>\n```\n\n\n\n## 添加远端主机\n\n在clone远程仓库的代码时，使用的远程主机地址会被自动保存并命名为`origin`，如果不想用这个名字，可以用如下的方式制定一个名字：\n\n```bash\n$ git clone -o jquery https://github.com/jquery/jquery.git\n```\n\n\n\n手动添加可以使用下面的命令：\n\n```bash\n$ git remote add <主机名> <地址>\n```\n\n\n\n## 删除远端主机\n\n删除远端主机命令如下：\n\n```bash\n$ git remote rm <主机名>\n```\n\n\n\n## 远端主机改名\n\n更改远端主机的名字可以使用如下的方式：\n\n```bash\n$ git remote rename <原名字> <新名字>\n```\n\n\n\n<br>\n\n\n\n# 分支管理\n\n## 查看分支\n\n```bash\n# 查看所有分支\n$ git branch -a\n\n# 查看远程分支\n$ git branch -r\n\n# 查看当前所在的分支\n$ git branch\n```\n\n\n\n## 创建分支\n\n```bash\n$ git branch <新分支名称>\n```\n\n\n\n## 切换分支\n\n使用checkout来切换所在的分支：\n\n```bash\n$ git checkout <要切换到的分支名称>\n\n# 创建一个新分支并且换过去\n$ git checkout -b <新分支名>\n```\n\n\n\n## 删除分支\n\n```bash\n$ git branch -D <分支名称>\n```\n\n\n\n## 合并分支\n\n例如将abc分支合并到master分支：\n\n```bash\n$ git checkout master\n$ git merge abc\n```\n\n","slug":"git的常用操作","published":1,"updated":"2020-09-13T06:32:12.720Z","_id":"ckf0oevmz0000tgklhakl43cb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"git安装\"><a href=\"#git安装\" class=\"headerlink\" title=\"git安装\"></a>git安装</h1><p>一般服务器都默认安装了git，如果没有安装可以使用如下的命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y git</span><br><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装好后需要进行简单的设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设定用户名</span></span><br><span class=\"line\">$ git config --global user.name &lt;username&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设定邮箱</span></span><br><span class=\"line\">$ git config --global user.email &lt;email&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有配置</span></span><br><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h1><p>初始化一个项目可以使用下面的命令进行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建一个项目目录</span></span><br><span class=\"line\">$ mkdir newproject</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> newproject</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>git init</code>会创建一个<code>.git</code>的隐藏目录，其中的文件和用途如下：</p>\n<ul>\n<li><code>hooks</code>：存放一些脚本，可设定指定的git命令运行后执行相应的脚本；</li>\n<li><code>info</code>：包含仓库的信息；</li>\n<li><code>logs</code>：保存所有更新的引用记录；</li>\n<li><code>objects</code>：项目中的所有对象；</li>\n<li><code>refs</code>：保存指向对象的索引；</li>\n<li><code>COMMIT_EDITMSG</code>：保存最新的commit信息；</li>\n<li><code>config</code>：git仓库的配置文件；</li>\n<li><code>description</code>：仓库描述信息；</li>\n<li><code>index</code>：二进制格式文件，暂存区；</li>\n<li><code>HEAD</code>：包含了当前分支的引用，通过这个文件git可以得到下一次commit的parent；</li>\n<li><code>ORIG_HEAD</code>：head指针的前一个状态；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"创建git仓库\"><a href=\"#创建git仓库\" class=\"headerlink\" title=\"创建git仓库\"></a>创建git仓库</h1><h2 id=\"clone方式\"><a href=\"#clone方式\" class=\"headerlink\" title=\"clone方式\"></a>clone方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建一个仓库目录</span></span><br><span class=\"line\">$ mkdir gitrepo </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> gitrepo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从某个gitweb仓库克隆项目，例如克隆jquery项目</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上边的clone命令会在本地生成一个和远程仓库同名的目录来保存代码，如果想要一个新的名字，则可以如下的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>一般<code>clone</code>命令除了支持http(s)协议外，还支持git、ssh等协议。</p>\n</blockquote>\n<h2 id=\"pull方式\"><a href=\"#pull方式\" class=\"headerlink\" title=\"pull方式\"></a>pull方式</h2><p>pull命令是从远程仓库取回分支的更新并合并到对应的本地分支，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将远程仓库的next分支与本地master分支合并</span></span><br><span class=\"line\">$ git pull origin netx:master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果远程分支就是当前分支</span></span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"fetch方式\"><a href=\"#fetch方式\" class=\"headerlink\" title=\"fetch方式\"></a>fetch方式</h2><p>fetch也是从远程仓库取回新的更新内容，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将远程仓库的更新全部取回本地</span></span><br><span class=\"line\">$ git fetch &lt;远程主机名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程主机上特定分支的更新到本地，例如取回master</span></span><br><span class=\"line\">$ git fetch origin master</span><br></pre></td></tr></table></figure>\n\n\n\n<p>和pull方式不同的是，fetch方式不会立刻合并到本地分支，fetch后再本地需要使用<code>远程主机名/分支名</code>的方式访问，例如：<code>origin/master</code></p>\n<br>\n\n\n\n<h1 id=\"提交代码到远程仓库\"><a href=\"#提交代码到远程仓库\" class=\"headerlink\" title=\"提交代码到远程仓库\"></a>提交代码到远程仓库</h1><h2 id=\"提交到本地暂存区\"><a href=\"#提交到本地暂存区\" class=\"headerlink\" title=\"提交到本地暂存区\"></a>提交到本地暂存区</h2><p>当修改完文件后提交到本地暂存区，以免后续发现问题误提交到远程仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加所有更新的文件（一般在项目根目录下运行）</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加某个文件到暂存区，例如README.md</span></span><br><span class=\"line\">$ git add README.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看暂存区的文件</span></span><br><span class=\"line\">$ git ls-files --stage</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"提交到本地仓库\"><a href=\"#提交到本地仓库\" class=\"headerlink\" title=\"提交到本地仓库\"></a>提交到本地仓库</h2><p>提交到远程仓库之前，先提交到本地的仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 好的习惯是commit的时候添加一段说明</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">'添加了xxx文件'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"提交到远端仓库\"><a href=\"#提交到远端仓库\" class=\"headerlink\" title=\"提交到远端仓库\"></a>提交到远端仓库</h2><p>使用<code>push</code>将本地仓库的更新提交到远端：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交到远端的master分支，如果分支不存在，则会自动创建</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"管理远端服务器\"><a href=\"#管理远端服务器\" class=\"headerlink\" title=\"管理远端服务器\"></a>管理远端服务器</h1><h2 id=\"查看远端服务器\"><a href=\"#查看远端服务器\" class=\"headerlink\" title=\"查看远端服务器\"></a>查看远端服务器</h2><p>为了方便管理，git可以添加多个远端服务器，并且要求每个远端服务器都要有一个主机名（例如origin），可以用过下面的命令进行查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看主机的详细信息，可以使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show &lt;远端主机名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加远端主机\"><a href=\"#添加远端主机\" class=\"headerlink\" title=\"添加远端主机\"></a>添加远端主机</h2><p>在clone远程仓库的代码时，使用的远程主机地址会被自动保存并命名为<code>origin</code>，如果不想用这个名字，可以用如下的方式制定一个名字：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -o jquery https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>手动添加可以使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add &lt;主机名&gt; &lt;地址&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除远端主机\"><a href=\"#删除远端主机\" class=\"headerlink\" title=\"删除远端主机\"></a>删除远端主机</h2><p>删除远端主机命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm &lt;主机名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"远端主机改名\"><a href=\"#远端主机改名\" class=\"headerlink\" title=\"远端主机改名\"></a>远端主机改名</h2><p>更改远端主机的名字可以使用如下的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rename &lt;原名字&gt; &lt;新名字&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前所在的分支</span></span><br><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;新分支名称&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>使用checkout来切换所在的分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout &lt;要切换到的分支名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新分支并且换过去</span></span><br><span class=\"line\">$ git checkout -b &lt;新分支名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><p>例如将abc分支合并到master分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge abc</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git安装\"><a href=\"#git安装\" class=\"headerlink\" title=\"git安装\"></a>git安装</h1><p>一般服务器都默认安装了git，如果没有安装可以使用如下的命令进行安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y git</span><br><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装好后需要进行简单的设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设定用户名</span></span><br><span class=\"line\">$ git config --global user.name &lt;username&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设定邮箱</span></span><br><span class=\"line\">$ git config --global user.email &lt;email&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有配置</span></span><br><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h1><p>初始化一个项目可以使用下面的命令进行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建一个项目目录</span></span><br><span class=\"line\">$ mkdir newproject</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> newproject</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>git init</code>会创建一个<code>.git</code>的隐藏目录，其中的文件和用途如下：</p>\n<ul>\n<li><code>hooks</code>：存放一些脚本，可设定指定的git命令运行后执行相应的脚本；</li>\n<li><code>info</code>：包含仓库的信息；</li>\n<li><code>logs</code>：保存所有更新的引用记录；</li>\n<li><code>objects</code>：项目中的所有对象；</li>\n<li><code>refs</code>：保存指向对象的索引；</li>\n<li><code>COMMIT_EDITMSG</code>：保存最新的commit信息；</li>\n<li><code>config</code>：git仓库的配置文件；</li>\n<li><code>description</code>：仓库描述信息；</li>\n<li><code>index</code>：二进制格式文件，暂存区；</li>\n<li><code>HEAD</code>：包含了当前分支的引用，通过这个文件git可以得到下一次commit的parent；</li>\n<li><code>ORIG_HEAD</code>：head指针的前一个状态；</li>\n</ul>\n<br>\n\n\n\n<h1 id=\"创建git仓库\"><a href=\"#创建git仓库\" class=\"headerlink\" title=\"创建git仓库\"></a>创建git仓库</h1><h2 id=\"clone方式\"><a href=\"#clone方式\" class=\"headerlink\" title=\"clone方式\"></a>clone方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建一个仓库目录</span></span><br><span class=\"line\">$ mkdir gitrepo </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> gitrepo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从某个gitweb仓库克隆项目，例如克隆jquery项目</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上边的clone命令会在本地生成一个和远程仓库同名的目录来保存代码，如果想要一个新的名字，则可以如下的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>一般<code>clone</code>命令除了支持http(s)协议外，还支持git、ssh等协议。</p>\n</blockquote>\n<h2 id=\"pull方式\"><a href=\"#pull方式\" class=\"headerlink\" title=\"pull方式\"></a>pull方式</h2><p>pull命令是从远程仓库取回分支的更新并合并到对应的本地分支，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将远程仓库的next分支与本地master分支合并</span></span><br><span class=\"line\">$ git pull origin netx:master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果远程分支就是当前分支</span></span><br><span class=\"line\">$ git pull origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"fetch方式\"><a href=\"#fetch方式\" class=\"headerlink\" title=\"fetch方式\"></a>fetch方式</h2><p>fetch也是从远程仓库取回新的更新内容，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将远程仓库的更新全部取回本地</span></span><br><span class=\"line\">$ git fetch &lt;远程主机名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程主机上特定分支的更新到本地，例如取回master</span></span><br><span class=\"line\">$ git fetch origin master</span><br></pre></td></tr></table></figure>\n\n\n\n<p>和pull方式不同的是，fetch方式不会立刻合并到本地分支，fetch后再本地需要使用<code>远程主机名/分支名</code>的方式访问，例如：<code>origin/master</code></p>\n<br>\n\n\n\n<h1 id=\"提交代码到远程仓库\"><a href=\"#提交代码到远程仓库\" class=\"headerlink\" title=\"提交代码到远程仓库\"></a>提交代码到远程仓库</h1><h2 id=\"提交到本地暂存区\"><a href=\"#提交到本地暂存区\" class=\"headerlink\" title=\"提交到本地暂存区\"></a>提交到本地暂存区</h2><p>当修改完文件后提交到本地暂存区，以免后续发现问题误提交到远程仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加所有更新的文件（一般在项目根目录下运行）</span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加某个文件到暂存区，例如README.md</span></span><br><span class=\"line\">$ git add README.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看暂存区的文件</span></span><br><span class=\"line\">$ git ls-files --stage</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"提交到本地仓库\"><a href=\"#提交到本地仓库\" class=\"headerlink\" title=\"提交到本地仓库\"></a>提交到本地仓库</h2><p>提交到远程仓库之前，先提交到本地的仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 好的习惯是commit的时候添加一段说明</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">'添加了xxx文件'</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"提交到远端仓库\"><a href=\"#提交到远端仓库\" class=\"headerlink\" title=\"提交到远端仓库\"></a>提交到远端仓库</h2><p>使用<code>push</code>将本地仓库的更新提交到远端：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交到远端的master分支，如果分支不存在，则会自动创建</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"管理远端服务器\"><a href=\"#管理远端服务器\" class=\"headerlink\" title=\"管理远端服务器\"></a>管理远端服务器</h1><h2 id=\"查看远端服务器\"><a href=\"#查看远端服务器\" class=\"headerlink\" title=\"查看远端服务器\"></a>查看远端服务器</h2><p>为了方便管理，git可以添加多个远端服务器，并且要求每个远端服务器都要有一个主机名（例如origin），可以用过下面的命令进行查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查看主机的详细信息，可以使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show &lt;远端主机名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加远端主机\"><a href=\"#添加远端主机\" class=\"headerlink\" title=\"添加远端主机\"></a>添加远端主机</h2><p>在clone远程仓库的代码时，使用的远程主机地址会被自动保存并命名为<code>origin</code>，如果不想用这个名字，可以用如下的方式制定一个名字：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -o jquery https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n\n\n<p>手动添加可以使用下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add &lt;主机名&gt; &lt;地址&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除远端主机\"><a href=\"#删除远端主机\" class=\"headerlink\" title=\"删除远端主机\"></a>删除远端主机</h2><p>删除远端主机命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm &lt;主机名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"远端主机改名\"><a href=\"#远端主机改名\" class=\"headerlink\" title=\"远端主机改名\"></a>远端主机改名</h2><p>更改远端主机的名字可以使用如下的方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rename &lt;原名字&gt; &lt;新名字&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><h2 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有分支</span></span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前所在的分支</span></span><br><span class=\"line\">$ git branch</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch &lt;新分支名称&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>使用checkout来切换所在的分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout &lt;要切换到的分支名称&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新分支并且换过去</span></span><br><span class=\"line\">$ git checkout -b &lt;新分支名&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><p>例如将abc分支合并到master分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge abc</span><br></pre></td></tr></table></figure>\n\n"},{"title":"使用python发送邮件","date":"2020-09-19T05:03:25.000Z","description":"使用python发送电子邮件","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1600501993822&di=399d08b2fa4b7f2b2181b1f576224799&imgtype=0&src=http%3A%2F%2Fd.ifengimg.com%2Fq100%2Fimg1.ugc.ifeng.com%2Fnewugc%2F20190520%2F15%2Fwemedia%2Fc1024597eac12eb5d088951616fb2e45491581a0_size43_w1078_h516.jpg","_content":"\n\n\n# 指定邮件服务器发送\n\n这里以163邮箱为例：\n\n```python\nfrom smtplib import SMTP    \n\n\nemail_account = \"youraccount@163.com\"\naccount_password = \"VCGXSEWSDGBFM\"  #授权密码\n\ns = SMTP(\"smtp.163.com\")\ns.login(email_account, account_password)\n\nto_mail = [\"12345678@qq.com\"]\n\n# 发送消息，包含发送方和收件人\nmsg = f'''\\ \nFrom: {email_account}\nTo: {','.join(to_mail)} \nSubject:测试\n这是一封测试邮件'''.encode(\"utf8\")\n\ns.sendmail(\"baojingtongzhi@163.com\",to_mail,msg)\n\ns.quit()\n```\n\n\n\n> 如果msg对象含带中文需要编码`encode(\"utf8\")`\n\n\n\n<br>\n\n\n\n# 发送邮件并抄送\n\n```python\nimport smtplib\n\n\ndef sendMail(body):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'VCGXTBA3MFA'\n    to_mail = [\"123456789@qq.com\"]\n    cc_mail = [\"aaccxx@163.com\"]\n    from_name = 'monitor'\n    subject = '监控'\n\n    # 或者写成列表再拼接，相比上面顶头写更美化些\n    mail = [\n        \"From: %s <%s>\" % (from_name, account_password),\n        \"To: %s\" % ','.join(to_mail),\n        \"Subject: %s\" % subject,\n        \"Cc: %s\" % ','.join(cc_mail),\n        \"\",\n        body\n        ]\n    msg = '\\n'.join(mail).encode(\"utf8\")\n\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, '25')\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail+cc_mail, msg)\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" %e)\n        \n        \nif __name__ == \"__main__\":\n    sendMail(\"这是一封测试邮件\")\n```\n\n\n\n<br>\n\n\n\n# 发送带附件的邮件\n\n由于`SMTP.sendmail()`方法不支持添加附件，所以需要借助email模块来实现。email模块是一个构造邮件和解析邮件的模块。\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.header import Header\nfrom email import encoders\nfrom email.mime.base import MIMEBase\nfrom email.utils import parseaddr, formataddr\n\n# 格式化邮件地址\ndef formatAddr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\ndef sendMail(body, attachment):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'ASDAAFHRMSIJO'\n    to_mail = [\"12345678@qq.com\"]\n\n    # 构造一个MIMEMultipart对象代表邮件本身\n    msg = MIMEMultipart()\n    # Header对中文进行转码\n    msg['From'] = formatAddr('管理员 <%s>' % email_account)\n    msg['To'] = ','.join(to_mail)\n    msg['Subject'] = Header('监控', 'utf-8')\n\n    # plain代表纯文本\n    msg.attach(MIMEText(body, 'plain', 'utf-8'))\n\n    # 二进制方式模式文件\n    with open(attachment, 'rb') as f:\n        # MIMEBase表示附件的对象\n        mime = MIMEBase('text', 'txt', filename=attachment) # 使用MIMEBase类构造附件并添加到msg对象\n        # filename是显示附件名字\n        mime.add_header('Content-Disposition', 'attachment', filename=attachment)\n        # 获取附件内容\n        mime.set_payload(f.read())\n        encoders.encode_base64(mime)\n        # 作为附件添加到邮件\n        msg.attach(mime)\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, \"25\")\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail, msg.as_string())  # as_string()把MIMEText对象变成str\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" % e)\n        \n    \nif __name__ == \"__main__\":\n    sendMail('这是一封携带附件的测试邮件', 'test.txt')\n```\n\n\n\n<br>\n\n\n\n# 发送HTML格式邮件\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.header import Header\nfrom email.utils import parseaddr, formataddr\n\n\n# 格式化邮件地址\ndef formatAddr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\ndef sendMail(body):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'ASDAAFHRMSIJO'\n    to_mail = [\"12345678@qq.com\"]\n\n    # 构造一个MIMEMultipart对象代表邮件本身\n    msg = MIMEMultipart()\n    # Header对中文进行转码\n    msg['From'] = formatAddr('管理员 <%s>' % email_account)\n    msg['To'] = ','.join(to_mail)\n    msg['Subject'] = Header('监控', 'utf-8')\n    msg.attach(MIMEText(body, 'html', 'utf-8'))\n\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, \"25\")\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail, msg.as_string())  # as_string()把MIMEText对象变成str\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" % e)\n\nif __name__ == \"__main__\":\n    body = \"\"\"\n    <h1>测试邮件</h1>\n    <h2 style=\"color:red\">这是一封HTML测试邮件</h2>\n    \"\"\"\n    sendMail(body)\n```\n\n\n\n<br>\n\n\n\n# 发送图片邮件\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.header import Header\nfrom email.utils import parseaddr, formataddr\n\n\n# 格式化邮件地址\ndef formatAddr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\ndef sendMail(body, image):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'ASDAAFHRMSIJO'\n    to_mail = [\"12345678@qq.com\"]\n\n    # 构造一个MIMEMultipart对象代表邮件本身\n    msg = MIMEMultipart()\n    # Header对中文进行转码\n    msg['From'] = formatAddr('管理员 <%s>' % email_account)\n    msg['To'] = ','.join(to_mail)\n    msg['Subject'] = Header('监控', 'utf-8')\n    msg.attach(MIMEText(body, 'html', 'utf-8'))\n\n    # 二进制模式读取图片\n    with open(image, 'rb') as f:\n        msgImage = MIMEImage(f.read())  # 使用MIMEImage类构造图片并添加到msg对象\n        # 定义图片ID，根据ID在HTML里获取图片\n        msgImage.add_header('Content-ID', '<image1>')\n        msg.attach(msgImage)\n\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, \"25\")\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail, msg.as_string())  # as_string()把MIMEText对象变成str\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" % e)\n        \nif __name__ == \"__main__\":\n    body = \"\"\"\n    <h1>测试图片</h1>\n    <img src=\"cid:image1\">\n    \"\"\"\n    sendMail(body, \"123.jpg\")\n```\n\n\n\n","source":"_posts/使用python发送邮件.md","raw":"---\ntitle: 使用python发送邮件\ndate: 2020-09-19 13:03:25\ntags:\n- Python\ncategories:\n- Python\n- 代码\ndescription: 使用python发送电子邮件\ncover: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1600501993822&di=399d08b2fa4b7f2b2181b1f576224799&imgtype=0&src=http%3A%2F%2Fd.ifengimg.com%2Fq100%2Fimg1.ugc.ifeng.com%2Fnewugc%2F20190520%2F15%2Fwemedia%2Fc1024597eac12eb5d088951616fb2e45491581a0_size43_w1078_h516.jpg\n---\n\n\n\n# 指定邮件服务器发送\n\n这里以163邮箱为例：\n\n```python\nfrom smtplib import SMTP    \n\n\nemail_account = \"youraccount@163.com\"\naccount_password = \"VCGXSEWSDGBFM\"  #授权密码\n\ns = SMTP(\"smtp.163.com\")\ns.login(email_account, account_password)\n\nto_mail = [\"12345678@qq.com\"]\n\n# 发送消息，包含发送方和收件人\nmsg = f'''\\ \nFrom: {email_account}\nTo: {','.join(to_mail)} \nSubject:测试\n这是一封测试邮件'''.encode(\"utf8\")\n\ns.sendmail(\"baojingtongzhi@163.com\",to_mail,msg)\n\ns.quit()\n```\n\n\n\n> 如果msg对象含带中文需要编码`encode(\"utf8\")`\n\n\n\n<br>\n\n\n\n# 发送邮件并抄送\n\n```python\nimport smtplib\n\n\ndef sendMail(body):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'VCGXTBA3MFA'\n    to_mail = [\"123456789@qq.com\"]\n    cc_mail = [\"aaccxx@163.com\"]\n    from_name = 'monitor'\n    subject = '监控'\n\n    # 或者写成列表再拼接，相比上面顶头写更美化些\n    mail = [\n        \"From: %s <%s>\" % (from_name, account_password),\n        \"To: %s\" % ','.join(to_mail),\n        \"Subject: %s\" % subject,\n        \"Cc: %s\" % ','.join(cc_mail),\n        \"\",\n        body\n        ]\n    msg = '\\n'.join(mail).encode(\"utf8\")\n\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, '25')\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail+cc_mail, msg)\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" %e)\n        \n        \nif __name__ == \"__main__\":\n    sendMail(\"这是一封测试邮件\")\n```\n\n\n\n<br>\n\n\n\n# 发送带附件的邮件\n\n由于`SMTP.sendmail()`方法不支持添加附件，所以需要借助email模块来实现。email模块是一个构造邮件和解析邮件的模块。\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.header import Header\nfrom email import encoders\nfrom email.mime.base import MIMEBase\nfrom email.utils import parseaddr, formataddr\n\n# 格式化邮件地址\ndef formatAddr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\ndef sendMail(body, attachment):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'ASDAAFHRMSIJO'\n    to_mail = [\"12345678@qq.com\"]\n\n    # 构造一个MIMEMultipart对象代表邮件本身\n    msg = MIMEMultipart()\n    # Header对中文进行转码\n    msg['From'] = formatAddr('管理员 <%s>' % email_account)\n    msg['To'] = ','.join(to_mail)\n    msg['Subject'] = Header('监控', 'utf-8')\n\n    # plain代表纯文本\n    msg.attach(MIMEText(body, 'plain', 'utf-8'))\n\n    # 二进制方式模式文件\n    with open(attachment, 'rb') as f:\n        # MIMEBase表示附件的对象\n        mime = MIMEBase('text', 'txt', filename=attachment) # 使用MIMEBase类构造附件并添加到msg对象\n        # filename是显示附件名字\n        mime.add_header('Content-Disposition', 'attachment', filename=attachment)\n        # 获取附件内容\n        mime.set_payload(f.read())\n        encoders.encode_base64(mime)\n        # 作为附件添加到邮件\n        msg.attach(mime)\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, \"25\")\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail, msg.as_string())  # as_string()把MIMEText对象变成str\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" % e)\n        \n    \nif __name__ == \"__main__\":\n    sendMail('这是一封携带附件的测试邮件', 'test.txt')\n```\n\n\n\n<br>\n\n\n\n# 发送HTML格式邮件\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.header import Header\nfrom email.utils import parseaddr, formataddr\n\n\n# 格式化邮件地址\ndef formatAddr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\ndef sendMail(body):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'ASDAAFHRMSIJO'\n    to_mail = [\"12345678@qq.com\"]\n\n    # 构造一个MIMEMultipart对象代表邮件本身\n    msg = MIMEMultipart()\n    # Header对中文进行转码\n    msg['From'] = formatAddr('管理员 <%s>' % email_account)\n    msg['To'] = ','.join(to_mail)\n    msg['Subject'] = Header('监控', 'utf-8')\n    msg.attach(MIMEText(body, 'html', 'utf-8'))\n\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, \"25\")\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail, msg.as_string())  # as_string()把MIMEText对象变成str\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" % e)\n\nif __name__ == \"__main__\":\n    body = \"\"\"\n    <h1>测试邮件</h1>\n    <h2 style=\"color:red\">这是一封HTML测试邮件</h2>\n    \"\"\"\n    sendMail(body)\n```\n\n\n\n<br>\n\n\n\n# 发送图片邮件\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.header import Header\nfrom email.utils import parseaddr, formataddr\n\n\n# 格式化邮件地址\ndef formatAddr(s):\n    name, addr = parseaddr(s)\n    return formataddr((Header(name, 'utf-8').encode(), addr))\n\ndef sendMail(body, image):\n    smtp_server = 'smtp.163.com'\n    email_account = 'youraccount@163.com'\n    account_password = 'ASDAAFHRMSIJO'\n    to_mail = [\"12345678@qq.com\"]\n\n    # 构造一个MIMEMultipart对象代表邮件本身\n    msg = MIMEMultipart()\n    # Header对中文进行转码\n    msg['From'] = formatAddr('管理员 <%s>' % email_account)\n    msg['To'] = ','.join(to_mail)\n    msg['Subject'] = Header('监控', 'utf-8')\n    msg.attach(MIMEText(body, 'html', 'utf-8'))\n\n    # 二进制模式读取图片\n    with open(image, 'rb') as f:\n        msgImage = MIMEImage(f.read())  # 使用MIMEImage类构造图片并添加到msg对象\n        # 定义图片ID，根据ID在HTML里获取图片\n        msgImage.add_header('Content-ID', '<image1>')\n        msg.attach(msgImage)\n\n    try:\n        s = smtplib.SMTP()\n        s.connect(smtp_server, \"25\")\n        s.login(email_account, account_password)\n        s.sendmail(email_account, to_mail, msg.as_string())  # as_string()把MIMEText对象变成str\n        s.quit()\n    except smtplib.SMTPException as e:\n        print(\"Error: %s\" % e)\n        \nif __name__ == \"__main__\":\n    body = \"\"\"\n    <h1>测试图片</h1>\n    <img src=\"cid:image1\">\n    \"\"\"\n    sendMail(body, \"123.jpg\")\n```\n\n\n\n","slug":"使用python发送邮件","published":1,"updated":"2020-09-19T05:16:19.177Z","_id":"ckf97kmep0000h5km71qg8cr4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"指定邮件服务器发送\"><a href=\"#指定邮件服务器发送\" class=\"headerlink\" title=\"指定邮件服务器发送\"></a>指定邮件服务器发送</h1><p>这里以163邮箱为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> smtplib <span class=\"keyword\">import</span> SMTP    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">email_account = <span class=\"string\">\"youraccount@163.com\"</span></span><br><span class=\"line\">account_password = <span class=\"string\">\"VCGXSEWSDGBFM\"</span>  <span class=\"comment\">#授权密码</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = SMTP(<span class=\"string\">\"smtp.163.com\"</span>)</span><br><span class=\"line\">s.login(email_account, account_password)</span><br><span class=\"line\"></span><br><span class=\"line\">to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送消息，包含发送方和收件人</span></span><br><span class=\"line\">msg = <span class=\"string\">f'''\\ </span></span><br><span class=\"line\"><span class=\"string\">From: <span class=\"subst\">&#123;email_account&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">To: <span class=\"subst\">&#123;<span class=\"string\">','</span>.join(to_mail)&#125;</span> </span></span><br><span class=\"line\"><span class=\"string\">Subject:测试</span></span><br><span class=\"line\"><span class=\"string\">这是一封测试邮件'''</span>.encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s.sendmail(<span class=\"string\">\"baojingtongzhi@163.com\"</span>,to_mail,msg)</span><br><span class=\"line\"></span><br><span class=\"line\">s.quit()</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>如果msg对象含带中文需要编码<code>encode(&quot;utf8&quot;)</code></p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"发送邮件并抄送\"><a href=\"#发送邮件并抄送\" class=\"headerlink\" title=\"发送邮件并抄送\"></a>发送邮件并抄送</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'VCGXTBA3MFA'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"123456789@qq.com\"</span>]</span><br><span class=\"line\">    cc_mail = [<span class=\"string\">\"aaccxx@163.com\"</span>]</span><br><span class=\"line\">    from_name = <span class=\"string\">'monitor'</span></span><br><span class=\"line\">    subject = <span class=\"string\">'监控'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 或者写成列表再拼接，相比上面顶头写更美化些</span></span><br><span class=\"line\">    mail = [</span><br><span class=\"line\">        <span class=\"string\">\"From: %s &lt;%s&gt;\"</span> % (from_name, account_password),</span><br><span class=\"line\">        <span class=\"string\">\"To: %s\"</span> % <span class=\"string\">','</span>.join(to_mail),</span><br><span class=\"line\">        <span class=\"string\">\"Subject: %s\"</span> % subject,</span><br><span class=\"line\">        <span class=\"string\">\"Cc: %s\"</span> % <span class=\"string\">','</span>.join(cc_mail),</span><br><span class=\"line\">        <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        body</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    msg = <span class=\"string\">'\\n'</span>.join(mail).encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">'25'</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail+cc_mail, msg)</span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> %e)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    sendMail(<span class=\"string\">\"这是一封测试邮件\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送带附件的邮件\"><a href=\"#发送带附件的邮件\" class=\"headerlink\" title=\"发送带附件的邮件\"></a>发送带附件的邮件</h1><p>由于<code>SMTP.sendmail()</code>方法不支持添加附件，所以需要借助email模块来实现。email模块是一个构造邮件和解析邮件的模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email <span class=\"keyword\">import</span> encoders</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.base <span class=\"keyword\">import</span> MIMEBase</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化邮件地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatAddr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body, attachment)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'ASDAAFHRMSIJO'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 构造一个MIMEMultipart对象代表邮件本身</span></span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># Header对中文进行转码</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = formatAddr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % email_account)</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">','</span>.join(to_mail)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'监控'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># plain代表纯文本</span></span><br><span class=\"line\">    msg.attach(MIMEText(body, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 二进制方式模式文件</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(attachment, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># MIMEBase表示附件的对象</span></span><br><span class=\"line\">        mime = MIMEBase(<span class=\"string\">'text'</span>, <span class=\"string\">'txt'</span>, filename=attachment) <span class=\"comment\"># 使用MIMEBase类构造附件并添加到msg对象</span></span><br><span class=\"line\">        <span class=\"comment\"># filename是显示附件名字</span></span><br><span class=\"line\">        mime.add_header(<span class=\"string\">'Content-Disposition'</span>, <span class=\"string\">'attachment'</span>, filename=attachment)</span><br><span class=\"line\">        <span class=\"comment\"># 获取附件内容</span></span><br><span class=\"line\">        mime.set_payload(f.read())</span><br><span class=\"line\">        encoders.encode_base64(mime)</span><br><span class=\"line\">        <span class=\"comment\"># 作为附件添加到邮件</span></span><br><span class=\"line\">        msg.attach(mime)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">\"25\"</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail, msg.as_string())  <span class=\"comment\"># as_string()把MIMEText对象变成str</span></span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> % e)</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    sendMail(<span class=\"string\">'这是一封携带附件的测试邮件'</span>, <span class=\"string\">'test.txt'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送HTML格式邮件\"><a href=\"#发送HTML格式邮件\" class=\"headerlink\" title=\"发送HTML格式邮件\"></a>发送HTML格式邮件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化邮件地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatAddr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'ASDAAFHRMSIJO'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 构造一个MIMEMultipart对象代表邮件本身</span></span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># Header对中文进行转码</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = formatAddr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % email_account)</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">','</span>.join(to_mail)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'监控'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    msg.attach(MIMEText(body, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">\"25\"</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail, msg.as_string())  <span class=\"comment\"># as_string()把MIMEText对象变成str</span></span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> % e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    body = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;测试邮件&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2 style=\"color:red\"&gt;这是一封HTML测试邮件&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    sendMail(body)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送图片邮件\"><a href=\"#发送图片邮件\" class=\"headerlink\" title=\"发送图片邮件\"></a>发送图片邮件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.image <span class=\"keyword\">import</span> MIMEImage</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化邮件地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatAddr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body, image)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'ASDAAFHRMSIJO'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 构造一个MIMEMultipart对象代表邮件本身</span></span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># Header对中文进行转码</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = formatAddr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % email_account)</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">','</span>.join(to_mail)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'监控'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    msg.attach(MIMEText(body, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 二进制模式读取图片</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(image, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        msgImage = MIMEImage(f.read())  <span class=\"comment\"># 使用MIMEImage类构造图片并添加到msg对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 定义图片ID，根据ID在HTML里获取图片</span></span><br><span class=\"line\">        msgImage.add_header(<span class=\"string\">'Content-ID'</span>, <span class=\"string\">'&lt;image1&gt;'</span>)</span><br><span class=\"line\">        msg.attach(msgImage)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">\"25\"</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail, msg.as_string())  <span class=\"comment\"># as_string()把MIMEText对象变成str</span></span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> % e)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    body = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;测试图片&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;img src=\"cid:image1\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    sendMail(body, <span class=\"string\">\"123.jpg\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"指定邮件服务器发送\"><a href=\"#指定邮件服务器发送\" class=\"headerlink\" title=\"指定邮件服务器发送\"></a>指定邮件服务器发送</h1><p>这里以163邮箱为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> smtplib <span class=\"keyword\">import</span> SMTP    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">email_account = <span class=\"string\">\"youraccount@163.com\"</span></span><br><span class=\"line\">account_password = <span class=\"string\">\"VCGXSEWSDGBFM\"</span>  <span class=\"comment\">#授权密码</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = SMTP(<span class=\"string\">\"smtp.163.com\"</span>)</span><br><span class=\"line\">s.login(email_account, account_password)</span><br><span class=\"line\"></span><br><span class=\"line\">to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送消息，包含发送方和收件人</span></span><br><span class=\"line\">msg = <span class=\"string\">f'''\\ </span></span><br><span class=\"line\"><span class=\"string\">From: <span class=\"subst\">&#123;email_account&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">To: <span class=\"subst\">&#123;<span class=\"string\">','</span>.join(to_mail)&#125;</span> </span></span><br><span class=\"line\"><span class=\"string\">Subject:测试</span></span><br><span class=\"line\"><span class=\"string\">这是一封测试邮件'''</span>.encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s.sendmail(<span class=\"string\">\"baojingtongzhi@163.com\"</span>,to_mail,msg)</span><br><span class=\"line\"></span><br><span class=\"line\">s.quit()</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>如果msg对象含带中文需要编码<code>encode(&quot;utf8&quot;)</code></p>\n</blockquote>\n<br>\n\n\n\n<h1 id=\"发送邮件并抄送\"><a href=\"#发送邮件并抄送\" class=\"headerlink\" title=\"发送邮件并抄送\"></a>发送邮件并抄送</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'VCGXTBA3MFA'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"123456789@qq.com\"</span>]</span><br><span class=\"line\">    cc_mail = [<span class=\"string\">\"aaccxx@163.com\"</span>]</span><br><span class=\"line\">    from_name = <span class=\"string\">'monitor'</span></span><br><span class=\"line\">    subject = <span class=\"string\">'监控'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 或者写成列表再拼接，相比上面顶头写更美化些</span></span><br><span class=\"line\">    mail = [</span><br><span class=\"line\">        <span class=\"string\">\"From: %s &lt;%s&gt;\"</span> % (from_name, account_password),</span><br><span class=\"line\">        <span class=\"string\">\"To: %s\"</span> % <span class=\"string\">','</span>.join(to_mail),</span><br><span class=\"line\">        <span class=\"string\">\"Subject: %s\"</span> % subject,</span><br><span class=\"line\">        <span class=\"string\">\"Cc: %s\"</span> % <span class=\"string\">','</span>.join(cc_mail),</span><br><span class=\"line\">        <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        body</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    msg = <span class=\"string\">'\\n'</span>.join(mail).encode(<span class=\"string\">\"utf8\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">'25'</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail+cc_mail, msg)</span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> %e)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    sendMail(<span class=\"string\">\"这是一封测试邮件\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送带附件的邮件\"><a href=\"#发送带附件的邮件\" class=\"headerlink\" title=\"发送带附件的邮件\"></a>发送带附件的邮件</h1><p>由于<code>SMTP.sendmail()</code>方法不支持添加附件，所以需要借助email模块来实现。email模块是一个构造邮件和解析邮件的模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email <span class=\"keyword\">import</span> encoders</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.base <span class=\"keyword\">import</span> MIMEBase</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化邮件地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatAddr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body, attachment)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'ASDAAFHRMSIJO'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 构造一个MIMEMultipart对象代表邮件本身</span></span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># Header对中文进行转码</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = formatAddr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % email_account)</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">','</span>.join(to_mail)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'监控'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># plain代表纯文本</span></span><br><span class=\"line\">    msg.attach(MIMEText(body, <span class=\"string\">'plain'</span>, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 二进制方式模式文件</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(attachment, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"comment\"># MIMEBase表示附件的对象</span></span><br><span class=\"line\">        mime = MIMEBase(<span class=\"string\">'text'</span>, <span class=\"string\">'txt'</span>, filename=attachment) <span class=\"comment\"># 使用MIMEBase类构造附件并添加到msg对象</span></span><br><span class=\"line\">        <span class=\"comment\"># filename是显示附件名字</span></span><br><span class=\"line\">        mime.add_header(<span class=\"string\">'Content-Disposition'</span>, <span class=\"string\">'attachment'</span>, filename=attachment)</span><br><span class=\"line\">        <span class=\"comment\"># 获取附件内容</span></span><br><span class=\"line\">        mime.set_payload(f.read())</span><br><span class=\"line\">        encoders.encode_base64(mime)</span><br><span class=\"line\">        <span class=\"comment\"># 作为附件添加到邮件</span></span><br><span class=\"line\">        msg.attach(mime)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">\"25\"</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail, msg.as_string())  <span class=\"comment\"># as_string()把MIMEText对象变成str</span></span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> % e)</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    sendMail(<span class=\"string\">'这是一封携带附件的测试邮件'</span>, <span class=\"string\">'test.txt'</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送HTML格式邮件\"><a href=\"#发送HTML格式邮件\" class=\"headerlink\" title=\"发送HTML格式邮件\"></a>发送HTML格式邮件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化邮件地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatAddr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'ASDAAFHRMSIJO'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 构造一个MIMEMultipart对象代表邮件本身</span></span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># Header对中文进行转码</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = formatAddr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % email_account)</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">','</span>.join(to_mail)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'监控'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    msg.attach(MIMEText(body, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">\"25\"</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail, msg.as_string())  <span class=\"comment\"># as_string()把MIMEText对象变成str</span></span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> % e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    body = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;测试邮件&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h2 style=\"color:red\"&gt;这是一封HTML测试邮件&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    sendMail(body)</span><br></pre></td></tr></table></figure>\n\n\n\n<br>\n\n\n\n<h1 id=\"发送图片邮件\"><a href=\"#发送图片邮件\" class=\"headerlink\" title=\"发送图片邮件\"></a>发送图片邮件</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.image <span class=\"keyword\">import</span> MIMEImage</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.mime.multipart <span class=\"keyword\">import</span> MIMEMultipart</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.header <span class=\"keyword\">import</span> Header</span><br><span class=\"line\"><span class=\"keyword\">from</span> email.utils <span class=\"keyword\">import</span> parseaddr, formataddr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化邮件地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatAddr</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    name, addr = parseaddr(s)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> formataddr((Header(name, <span class=\"string\">'utf-8'</span>).encode(), addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(body, image)</span>:</span></span><br><span class=\"line\">    smtp_server = <span class=\"string\">'smtp.163.com'</span></span><br><span class=\"line\">    email_account = <span class=\"string\">'youraccount@163.com'</span></span><br><span class=\"line\">    account_password = <span class=\"string\">'ASDAAFHRMSIJO'</span></span><br><span class=\"line\">    to_mail = [<span class=\"string\">\"12345678@qq.com\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 构造一个MIMEMultipart对象代表邮件本身</span></span><br><span class=\"line\">    msg = MIMEMultipart()</span><br><span class=\"line\">    <span class=\"comment\"># Header对中文进行转码</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = formatAddr(<span class=\"string\">'管理员 &lt;%s&gt;'</span> % email_account)</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">','</span>.join(to_mail)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = Header(<span class=\"string\">'监控'</span>, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    msg.attach(MIMEText(body, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 二进制模式读取图片</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(image, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        msgImage = MIMEImage(f.read())  <span class=\"comment\"># 使用MIMEImage类构造图片并添加到msg对象</span></span><br><span class=\"line\">        <span class=\"comment\"># 定义图片ID，根据ID在HTML里获取图片</span></span><br><span class=\"line\">        msgImage.add_header(<span class=\"string\">'Content-ID'</span>, <span class=\"string\">'&lt;image1&gt;'</span>)</span><br><span class=\"line\">        msg.attach(msgImage)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(smtp_server, <span class=\"string\">\"25\"</span>)</span><br><span class=\"line\">        s.login(email_account, account_password)</span><br><span class=\"line\">        s.sendmail(email_account, to_mail, msg.as_string())  <span class=\"comment\"># as_string()把MIMEText对象变成str</span></span><br><span class=\"line\">        s.quit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> smtplib.SMTPException <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error: %s\"</span> % e)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    body = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    &lt;h1&gt;测试图片&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;img src=\"cid:image1\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    sendMail(body, <span class=\"string\">\"123.jpg\"</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n"}],"PostAsset":[{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/calico-ip.png","slug":"calico-ip.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/cluster-check.png","slug":"cluster-check.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/getnode.png","slug":"getnode.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/nodes.png","slug":"nodes.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/ipvs.png","slug":"ipvs.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/ipvs-rule.png","slug":"ipvs-rule.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/calico-node.png","slug":"calico-node.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/etcd-helth.png","slug":"etcd-helth.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/etcd-cluster.png","slug":"etcd-cluster.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/etcd-member.png","slug":"etcd-member.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/ansible-check.png","slug":"ansible-check.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/kubeadm-init.png","slug":"kubeadm-init.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/check-master.png","slug":"check-master.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-kubeadm部署k8s-1.18/single-master.png","slug":"single-master.png","post":"ckc4gokzn0000apn0f1ii9opn","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update-kubeadm.png","slug":"update-kubeadm.png","post":"ckc67w4460000t9n0euijbcdf","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/newversion.png","slug":"newversion.png","post":"ckc67w4460000t9n0euijbcdf","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/carbon.png","slug":"carbon.png","post":"ckc67w4460000t9n0euijbcdf","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update-res.png","slug":"update-res.png","post":"ckc67w4460000t9n0euijbcdf","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update.png","slug":"update.png","post":"ckc67w4460000t9n0euijbcdf","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/update-node.png","slug":"update-node.png","post":"ckc67w4460000t9n0euijbcdf","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-升级集群到1-18/drain.png","slug":"drain.png","post":"ckc67w4460000t9n0euijbcdf","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-证书管理/update.png","slug":"update.png","post":"ckc8h3rvm000057jebm31csr9","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/nfs-client.png","slug":"nfs-client.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pod-nfs-svc.png","slug":"pod-nfs-svc.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pod-nfs-test.png","slug":"pod-nfs-test.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pod-nfs.png","slug":"pod-nfs.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pv.png","slug":"pv.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pvc-nginx.png","slug":"pvc-nginx.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/pvc.png","slug":"pvc.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-使用nfs存储/storageclass-pvc.png","slug":"storageclass-pvc.png","post":"ckc8hq1m1000097je1j5e1u6z","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署MetricServer/check.png","slug":"check.png","post":"ckc8ofbrw0000qijed4ui9h6o","modified":0,"renderable":0},{"_id":"source/_posts/部署Nginx/install_source.png","slug":"install_source.png","post":"ckc8quso800001sje8x2e4mkt","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-二/es-pod.png","slug":"es-pod.png","post":"ckceqp6ub0000ben08ym94hbb","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-三/kafka-pod.png","slug":"kafka-pod.png","post":"ckceqtkm60000dxn0datw5htb","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-三/add-cluster-1.png","slug":"add-cluster-1.png","post":"ckceqtkm60000dxn0datw5htb","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-三/add-cluster-2.png","slug":"add-cluster-2.png","post":"ckceqtkm60000dxn0datw5htb","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-四/logstash-pod.png","slug":"logstash-pod.png","post":"ckcfnkyk30000kon0cqxg9vvz","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-四/configmap.png","slug":"configmap.png","post":"ckcfnkyk30000kon0cqxg9vvz","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-五/pod.png","slug":"pod.png","post":"ckcfocah70000o7n099ht2m5h","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-六/kafka.png","slug":"kafka.png","post":"ckcfsx98d00004zn0hnr6eqh9","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-六/pod.png","slug":"pod.png","post":"ckcfsx98d00004zn0hnr6eqh9","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-EFK-Kafka日志收集-六/kibana.png","slug":"kibana.png","post":"ckcfsx98d00004zn0hnr6eqh9","modified":0,"renderable":0},{"_id":"source/_posts/部署Docker-CE/docker-version.png","slug":"docker-version.png","post":"ckchljzcf0000f9n0ao3w9meq","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-一-部署Istio/istio-install.png","slug":"istio-install.png","post":"ckclsw7i50000lwn06y1231pt","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-一-部署Istio/check.png","slug":"check.png","post":"ckclsw7i50000lwn06y1231pt","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/v1.png","slug":"v1.png","post":"ckcognpqa0000vyn013sebg47","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/v2.png","slug":"v2.png","post":"ckcognpqa0000vyn013sebg47","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/v3.png","slug":"v3.png","post":"ckcognpqa0000vyn013sebg47","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/service.png","slug":"service.png","post":"ckcognpqa0000vyn013sebg47","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-二-部署测试服务/bookinfo.svg","slug":"bookinfo.svg","post":"ckcognpqa0000vyn013sebg47","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-三-路由请求/jason.png","slug":"jason.png","post":"ckcoirl8900004xn01gpj7knb","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-三-路由请求/peter.png","slug":"peter.png","post":"ckcoirl8900004xn01gpj7knb","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-Istio实践-三-路由请求/v1.png","slug":"v1.png","post":"ckcoirl8900004xn01gpj7knb","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/grafana-index.png","slug":"grafana-index.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/check-node.png","slug":"check-node.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/check-prome.png","slug":"check-prome.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/datasource.png","slug":"datasource.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/grafana-pvc.png","slug":"grafana-pvc.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/node-exporter.png","slug":"node-exporter.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/prometheus-web.png","slug":"prometheus-web.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/prometheus.jpg","slug":"prometheus.jpg","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署集群监控服务/pvc.png","slug":"pvc.png","post":"ckcrdkcr30000n2n06esnb29q","modified":0,"renderable":0},{"_id":"source/_posts/Ansible安装配置/ansible.png","slug":"ansible.png","post":"ckcsklvc10000sojd5qtb57sq","modified":0,"renderable":0},{"_id":"source/_posts/Ansible安装配置/work.png","slug":"work.png","post":"ckcsklvc10000sojd5qtb57sq","modified":0,"renderable":0},{"_id":"source/_posts/Ansible安装配置/testping.png","slug":"testping.png","post":"ckcsklvc10000sojd5qtb57sq","modified":0,"renderable":0},{"_id":"source/_posts/Playbook使用实例/add-user.png","slug":"add-user.png","post":"ckcu7g05z00009en00aspe1x2","modified":0,"renderable":0},{"_id":"source/_posts/Playbook使用实例/check-add-user.png","slug":"check-add-user.png","post":"ckcu7g05z00009en00aspe1x2","modified":0,"renderable":0},{"_id":"source/_posts/Playbook使用实例/check-res.png","slug":"check-res.png","post":"ckcu7g05z00009en00aspe1x2","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/ingressgateway.png","slug":"ingressgateway.png","post":"ckcvc1j3o00002pn04s5hbjqm","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-istio实践-四-通过istio-ingressgateway暴露服务/check.png","slug":"check.png","post":"ckcvc1j3o00002pn04s5hbjqm","modified":0,"renderable":0},{"_id":"source/_posts/部署Harbor镜像仓库/create-user.png","slug":"create-user.png","post":"ckcyeyd3s000091n0aq0me4on","modified":0,"renderable":0},{"_id":"source/_posts/部署Harbor镜像仓库/create.png","slug":"create.png","post":"ckcyeyd3s000091n0aq0me4on","modified":0,"renderable":0},{"_id":"source/_posts/部署Harbor镜像仓库/harbor-login.png","slug":"harbor-login.png","post":"ckcyeyd3s000091n0aq0me4on","modified":0,"renderable":0},{"_id":"source/_posts/部署Harbor镜像仓库/upload-image.png","slug":"upload-image.png","post":"ckcyeyd3s000091n0aq0me4on","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/prepare.png","slug":"prepare.png","post":"ckczw6x370000uxn06b9f4wii","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/index.png","slug":"index.png","post":"ckczw6x370000uxn06b9f4wii","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/login.png","slug":"login.png","post":"ckczw6x370000uxn06b9f4wii","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/check.png","slug":"check.png","post":"ckczw6x370000uxn06b9f4wii","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-在k8s中部署harbor/push.png","slug":"push.png","post":"ckczw6x370000uxn06b9f4wii","modified":0,"renderable":0},{"_id":"source/_posts/消息队列RabbitMQ/amqp.png","slug":"amqp.png","post":"ckd2k6nn10000swjc2ghk3bkc","modified":0,"renderable":0},{"_id":"source/_posts/消息队列RabbitMQ/arch.png","slug":"arch.png","post":"ckd2k6nn10000swjc2ghk3bkc","modified":0,"renderable":0},{"_id":"source/_posts/消息队列RabbitMQ/message-trans.png","slug":"message-trans.png","post":"ckd2k6nn10000swjc2ghk3bkc","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/pod.png","slug":"pod.png","post":"ckd3xf5sh0000can0908zbd2i","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/hpa-mem.png","slug":"hpa-mem.png","post":"ckd3xf5sh0000can0908zbd2i","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/hpa-cpu.png","slug":"hpa-cpu.png","post":"ckd3xf5sh0000can0908zbd2i","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-利用HPA的服务自动扩容/k8s-hpa-ms.png","slug":"k8s-hpa-ms.png","post":"ckd3xf5sh0000can0908zbd2i","modified":0,"renderable":0},{"_id":"source/_posts/Nginx-Status模块/status.png","slug":"status.png","post":"ckd6sjf7g0000rrn0ejieh2ot","modified":0,"renderable":0},{"_id":"source/_posts/Nginx返回随机主页/random.png","slug":"random.png","post":"ckd6suzjl0000uln0etfjgj8a","modified":0,"renderable":0},{"_id":"source/_posts/Nginx用户名密码认证/htpass.png","slug":"htpass.png","post":"ckd714vo30000fcn04gs66t3m","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/add-cloud.png","slug":"add-cloud.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/demo.png","slug":"demo.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/deploy-jenkins.png","slug":"deploy-jenkins.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/gitinit.png","slug":"gitinit.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/gitlab-push.png","slug":"gitlab-push.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-certs.png","slug":"jenkins-certs.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-home.png","slug":"jenkins-home.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-init.png","slug":"jenkins-init.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-password.png","slug":"jenkins-password.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkins-slave","slug":"jenkins-slave","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/jenkinsfile-pipeline.png","slug":"jenkinsfile-pipeline.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/kubernetes.png","slug":"kubernetes.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/label.png","slug":"label.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/onk8s.png","slug":"onk8s.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pipline-build.png","slug":"pipline-build.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pipline-demo.png","slug":"pipline-demo.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pipline-script.png","slug":"pipline-script.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pod-template.png","slug":"pod-template.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/pvc.png","slug":"pvc.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/result.png","slug":"result.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/run-demo.png","slug":"run-demo.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/status.png","slug":"status.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/success.png","slug":"success.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/timeout.png","slug":"timeout.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/k8s实践系列-部署Jenkins服务/volume.png","slug":"volume.png","post":"ckd71w2oz0000mnn0d0qxae3l","modified":0,"renderable":0},{"_id":"source/_posts/Prometheus基于consul自动发现节点/consul-index.png","slug":"consul-index.png","post":"ckd9ka1jz0000yan0duvpf880","modified":0,"renderable":0},{"_id":"source/_posts/Prometheus基于consul自动发现节点/zhuce.png","slug":"zhuce.png","post":"ckd9ka1jz0000yan0duvpf880","modified":0,"renderable":0},{"_id":"source/_posts/Prometheus基于consul自动发现节点/find.png","slug":"find.png","post":"ckd9ka1jz0000yan0duvpf880","modified":0,"renderable":0},{"_id":"source/_posts/Prometheus基于consul自动发现节点/cluster.png","slug":"cluster.png","post":"ckd9ka1jz0000yan0duvpf880","modified":0,"renderable":0},{"_id":"source/_posts/LVS工作模式/dr-tuopu.png","slug":"dr-tuopu.png","post":"ckda0xe8m0000pon0g4sbd2jk","modified":0,"renderable":0},{"_id":"source/_posts/LVS工作模式/dr.png","slug":"dr.png","post":"ckda0xe8m0000pon0g4sbd2jk","modified":0,"renderable":0},{"_id":"source/_posts/LVS工作模式/nat-tuopu.png","slug":"nat-tuopu.png","post":"ckda0xe8m0000pon0g4sbd2jk","modified":0,"renderable":0},{"_id":"source/_posts/LVS工作模式/nat.png","slug":"nat.png","post":"ckda0xe8m0000pon0g4sbd2jk","modified":0,"renderable":0},{"_id":"source/_posts/LVS工作模式/tun-tuopu.png","slug":"tun-tuopu.png","post":"ckda0xe8m0000pon0g4sbd2jk","modified":0,"renderable":0},{"_id":"source/_posts/LVS工作模式/duibi.png","slug":"duibi.png","post":"ckda0xe8m0000pon0g4sbd2jk","modified":0,"renderable":0},{"_id":"source/_posts/Flask蓝图/tree.png","slug":"tree.png","post":"ckde84xvl00009gn04a303jtm","modified":0,"renderable":0},{"_id":"source/_posts/部署gitlab/gitlab-login.png","slug":"gitlab-login.png","post":"ckdea4v3w0000tin03e9b3lh3","modified":0,"renderable":0},{"_id":"source/_posts/部署gitlab/gitlab.png","slug":"gitlab.png","post":"ckdea4v3w0000tin03e9b3lh3","modified":0,"renderable":0},{"_id":"source/_posts/Jenkins忘记密码如何处理/jenkins-forgetpass.png","slug":"jenkins-forgetpass.png","post":"ckdeb8ejl00005fn09f499ulb","modified":0,"renderable":0},{"_id":"source/_posts/Nginx基础概念/nginx-process.png","slug":"nginx-process.png","post":"ckdfp07170000byn03y0v5dd6","modified":0,"renderable":0},{"_id":"source/_posts/Docker部署kafka/status.png","slug":"status.png","post":"ckdjmstj3000048n070jsecc0","modified":0,"renderable":0},{"_id":"source/_posts/keepalived原理/keepalived.png","slug":"keepalived.png","post":"ckdjtoc0m0000txn0bko4hahd","modified":0,"renderable":0},{"_id":"source/_posts/安装RabbitMQ/index.png","slug":"index.png","post":"ckdo3f7rx0001n5n041tddt6y","modified":0,"renderable":0},{"_id":"source/_posts/ceph介绍/ceph_arch.png","slug":"ceph_arch.png","post":"ckdzm5cej0000ejn0cj3zh2s2","modified":0,"renderable":0},{"_id":"source/_posts/ceph介绍/rados.png","slug":"rados.png","post":"ckdzm5cej0000ejn0cj3zh2s2","modified":0,"renderable":0},{"_id":"source/_posts/ceph介绍/rados_arch.png","slug":"rados_arch.png","post":"ckdzm5cej0000ejn0cj3zh2s2","modified":0,"renderable":0},{"_id":"source/_posts/ceph介绍/fstype.png","slug":"fstype.png","post":"ckdzm5cej0000ejn0cj3zh2s2","modified":0,"renderable":0},{"_id":"source/_posts/ceph介绍/journal.png","slug":"journal.png","post":"ckdzm5cej0000ejn0cj3zh2s2","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/prome-web.png","slug":"prome-web.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/prome-node.png","slug":"prome-node.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/grafana.png","slug":"grafana.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/datasource.png","slug":"datasource.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/config.png","slug":"config.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/empdash.png","slug":"empdash.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/1.png","slug":"1.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/2.png","slug":"2.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/3.png","slug":"3.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/4.png","slug":"4.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/部署Prometheus和node-exporter/5.png","slug":"5.png","post":"cke0pl0zi00008fn00h0w74gp","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/1.png","slug":"1.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/2.png","slug":"2.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/3-1.png","slug":"3-1.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/3-2.png","slug":"3-2.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/3-3.png","slug":"3-3.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/3-4.png","slug":"3-4.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/4-1.png","slug":"4-1.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/4-2.png","slug":"4-2.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/5-1.png","slug":"5-1.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/5-2.png","slug":"5-2.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/6-1.png","slug":"6-1.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/6-2.png","slug":"6-2.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/7-1.png","slug":"7-1.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/提升程序性能的技巧/7-2.png","slug":"7-2.png","post":"ckepmw5uh00002akl96a18d55","modified":0,"renderable":0},{"_id":"source/_posts/升级Nginx/1.png","slug":"1.png","post":"ckc8r4pgk00005eje1h02b65q","modified":0,"renderable":0},{"_id":"source/_posts/升级Nginx/2.png","slug":"2.png","post":"ckc8r4pgk00005eje1h02b65q","modified":0,"renderable":0},{"_id":"source/_posts/升级Nginx/3.png","slug":"3.png","post":"ckc8r4pgk00005eje1h02b65q","modified":0,"renderable":0},{"_id":"source/_posts/升级Nginx/4.png","slug":"4.png","post":"ckc8r4pgk00005eje1h02b65q","modified":0,"renderable":0},{"_id":"source/_posts/升级Nginx/5.png","slug":"5.png","post":"ckc8r4pgk00005eje1h02b65q","modified":0,"renderable":0},{"_id":"source/_posts/升级Nginx/6.png","slug":"6.png","post":"ckc8r4pgk00005eje1h02b65q","modified":0,"renderable":0},{"_id":"source/_posts/升级Nginx/7.png","slug":"7.png","post":"ckc8r4pgk00005eje1h02b65q","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckc4gokzn0000apn0f1ii9opn","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckc4gol030002apn0b21uatd2"},{"post_id":"ckc67w4460000t9n0euijbcdf","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckc67w44m0002t9n0amhwf5nf"},{"post_id":"ckc8g4d0r0000xejecwgydl8t","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckc8ga6fo0000z9je64wtgkid"},{"post_id":"ckc8h3rvm000057jebm31csr9","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckc8h3rw3000257jebnweeg01"},{"post_id":"ckc8hq1m1000097je1j5e1u6z","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckc8hq1mf000297je617o8kg8"},{"post_id":"ckc8ofbrw0000qijed4ui9h6o","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckc8ofbs20002qije4fvohbbl"},{"post_id":"ckc8quso800001sje8x2e4mkt","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckc8qusoh00041sje91hz9h14"},{"post_id":"ckc8r4pgk00005eje1h02b65q","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckc8r4pgp00025ejefe1zakr7"},{"post_id":"ckceqci0s00008yn00y5sfy18","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckceqci2000028yn050w97y7b"},{"post_id":"ckceqci2d00058yn01f5mbxir","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckceqci2f00078yn04uba31go"},{"post_id":"ckceqp6ub0000ben08ym94hbb","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckceqp6uz0003ben040641njq"},{"post_id":"ckceqtkm60000dxn0datw5htb","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckceqtkmi0003dxn07zmwczvs"},{"post_id":"ckcfnkyk30000kon0cqxg9vvz","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcfnkykf0003kon07pjk3yac"},{"post_id":"ckcfocah70000o7n099ht2m5h","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcfocahk0003o7n0f4ud1vqv"},{"post_id":"ckcfsx98d00004zn0hnr6eqh9","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcfsx98z00034zn02p2wh9th"},{"post_id":"ckchljzcf0000f9n0ao3w9meq","category_id":"ckchljzck0001f9n0ci9u0p5o","_id":"ckchljzcq0004f9n0cx2n0fn8"},{"post_id":"ckclsw7i50000lwn06y1231pt","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckclsw7io0005lwn0bnea8kdp"},{"post_id":"ckclsw7i50000lwn06y1231pt","category_id":"ckclsw7im0002lwn060s32h1y","_id":"ckclsw7io0006lwn0dvc45or8"},{"post_id":"ckco8beoh0000vln04s8ea6e2","category_id":"ckco8beoo0001vln05dj7djch","_id":"ckco8beox0005vln07hu2fjy4"},{"post_id":"ckco8beoh0000vln04s8ea6e2","category_id":"ckco8beow0004vln0ggus7a1x","_id":"ckco8beoy0006vln0177n1f7o"},{"post_id":"ckcfsx98d00004zn0hnr6eqh9","category_id":"ckcodiw7c0000d1n04ua49cak","_id":"ckcodiw7h0001d1n08rwkdxg4"},{"post_id":"ckceqci0s00008yn00y5sfy18","category_id":"ckcodiw7c0000d1n04ua49cak","_id":"ckcodmxw10000epn02ywq606m"},{"post_id":"ckcfocah70000o7n099ht2m5h","category_id":"ckcodiw7c0000d1n04ua49cak","_id":"ckcodmxw10001epn05r87dhto"},{"post_id":"ckcfnkyk30000kon0cqxg9vvz","category_id":"ckcodiw7c0000d1n04ua49cak","_id":"ckcodmxw10002epn02w3o2e6j"},{"post_id":"ckceqtkm60000dxn0datw5htb","category_id":"ckcodiw7c0000d1n04ua49cak","_id":"ckcodmxw70003epn05w7y7c6a"},{"post_id":"ckceqp6ub0000ben08ym94hbb","category_id":"ckcodiw7c0000d1n04ua49cak","_id":"ckcodmxw70004epn006k9a29d"},{"post_id":"ckcoei9k30000j3n05bii3ec6","category_id":"ckcoei9kg0001j3n07haj76yr","_id":"ckcoei9ko0007j3n07035abku"},{"post_id":"ckcoei9k30000j3n05bii3ec6","category_id":"ckcoei9kn0004j3n07cl22gvd","_id":"ckcoei9kp0008j3n0adcr716a"},{"post_id":"ckcognpqa0000vyn013sebg47","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcognpqn0003vyn063tjcmcr"},{"post_id":"ckcognpqa0000vyn013sebg47","category_id":"ckclsw7im0002lwn060s32h1y","_id":"ckcognpqn0004vyn0alshhvoc"},{"post_id":"ckcoirl8900004xn01gpj7knb","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcoirl8k00034xn04xctevdk"},{"post_id":"ckcoirl8900004xn01gpj7knb","category_id":"ckclsw7im0002lwn060s32h1y","_id":"ckcoirl8l00044xn0e8qk6d06"},{"post_id":"ckcrdkcr30000n2n06esnb29q","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcrdkcrl0005n2n05p00afuz"},{"post_id":"ckcrdkcr30000n2n06esnb29q","category_id":"ckcrdkcrj0002n2n00tn870w7","_id":"ckcrdkcrl0006n2n0a6xpbtue"},{"post_id":"ckcsklvc10000sojd5qtb57sq","category_id":"ckcsklvcr0001sojd9pgg1vb7","_id":"ckcsklvd30007sojd8hjmaa8q"},{"post_id":"ckcsklvc10000sojd5qtb57sq","category_id":"ckcsklvd20004sojd6rth4r3m","_id":"ckcsklvd30008sojdbdr41svm"},{"post_id":"ckcslqe970000zwjdct330b1s","category_id":"ckcsklvcr0001sojd9pgg1vb7","_id":"ckcslqe9f0003zwjd1aymg0s0"},{"post_id":"ckcslqe970000zwjdct330b1s","category_id":"ckcsklvd20004sojd6rth4r3m","_id":"ckcslqe9f0004zwjd2tf8gfdo"},{"post_id":"ckcsmc0fx000029jdhxa56nyi","category_id":"ckcsklvcr0001sojd9pgg1vb7","_id":"ckcsmc0g3000329jd4wxaad87"},{"post_id":"ckcsmc0fx000029jdhxa56nyi","category_id":"ckcsklvd20004sojd6rth4r3m","_id":"ckcsmc0g3000429jdgco479er"},{"post_id":"ckcstxvvy0000ihjd8w0od881","category_id":"ckcsklvcr0001sojd9pgg1vb7","_id":"ckcstxvwl0003ihjdfzc49jkg"},{"post_id":"ckcstxvvy0000ihjd8w0od881","category_id":"ckcsklvd20004sojd6rth4r3m","_id":"ckcstxvwl0004ihjdgxve9m6l"},{"post_id":"ckcu7g05z00009en00aspe1x2","category_id":"ckcsklvcr0001sojd9pgg1vb7","_id":"ckcu7g06d00039en00h3dcvhj"},{"post_id":"ckcu7g05z00009en00aspe1x2","category_id":"ckcsklvd20004sojd6rth4r3m","_id":"ckcu7g06d00049en0f0xr9662"},{"post_id":"ckcvc1j3o00002pn04s5hbjqm","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckcvc1j4100032pn0gk523jta"},{"post_id":"ckcvc1j3o00002pn04s5hbjqm","category_id":"ckclsw7im0002lwn060s32h1y","_id":"ckcvc1j4100042pn075yq7hxj"},{"post_id":"ckcwxvw5a0000w8n0dyg94j27","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckcwxvw5o0002w8n0fequd02b"},{"post_id":"ckcyeyd3s000091n0aq0me4on","category_id":"ckchljzck0001f9n0ci9u0p5o","_id":"ckcyeyd4c000391n05wjlcbut"},{"post_id":"ckcyeyd3s000091n0aq0me4on","category_id":"ckcyeyd3y000291n01ax2hl3a","_id":"ckcyeyd4c000491n08a8p3lh5"},{"post_id":"ckcyi223k0000qtn0ggc73ixu","category_id":"ckcyi223v0001qtn0894eh8v5","_id":"ckcyi22440005qtn00xti8fj4"},{"post_id":"ckcyi223k0000qtn0ggc73ixu","category_id":"ckcyi22430004qtn0f598dryp","_id":"ckcyi22440006qtn05hdwbe11"},{"post_id":"ckczw6x370000uxn06b9f4wii","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckczw6x3v0003uxn06xbxh3hg"},{"post_id":"ckczw6x370000uxn06b9f4wii","category_id":"ckczw6x3l0002uxn04x5t7stm","_id":"ckczw6x3w0004uxn0hzfy6ggq"},{"post_id":"ckd2j0oy10000ojjcd9xkf7te","category_id":"ckd2j0oy90001ojjchyl891je","_id":"ckd2j0oyi0004ojjc5yey3aqo"},{"post_id":"ckd2k6nn10000swjc2ghk3bkc","category_id":"ckd2j0oy90001ojjchyl891je","_id":"ckd2k6nnk0005swjc19emcxkv"},{"post_id":"ckd2k6nn10000swjc2ghk3bkc","category_id":"ckd2k6nni0002swjc5c9z33gl","_id":"ckd2k6nnk0006swjcfc891v3t"},{"post_id":"ckd3xf5sh0000can0908zbd2i","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckd3xf5sz0002can09ch6dz3p"},{"post_id":"ckd6rcs780000mcn0247y73s7","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckd6rcs7h0002mcn08zj0cksm"},{"post_id":"ckd6sjf7g0000rrn0ejieh2ot","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckd6sjf7s0002rrn09ga1avtl"},{"post_id":"ckd6suzjl0000uln0etfjgj8a","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckd6suzk00002uln0gd150fdl"},{"post_id":"ckd70w2u30000d9n03sjhc1hf","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckd70w2uj0002d9n095sw8qyj"},{"post_id":"ckd714vo30000fcn04gs66t3m","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckd714voh0002fcn01smig82e"},{"post_id":"ckd714vo30000fcn04gs66t3m","category_id":"ckd716d7j0000fxn09rbtbkfc","_id":"ckd716d7k0001fxn07mujdj65"},{"post_id":"ckd70w2u30000d9n03sjhc1hf","category_id":"ckd716d7j0000fxn09rbtbkfc","_id":"ckd718oqn0000hin0fq2rg6k3"},{"post_id":"ckd6suzjl0000uln0etfjgj8a","category_id":"ckd716d7j0000fxn09rbtbkfc","_id":"ckd7195r70001hin06dpm5fkz"},{"post_id":"ckd6sjf7g0000rrn0ejieh2ot","category_id":"ckd716d7j0000fxn09rbtbkfc","_id":"ckd719f5b0002hin0heznahzq"},{"post_id":"ckd71w2oz0000mnn0d0qxae3l","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckd71w2pl0005mnn078fy40u6"},{"post_id":"ckd71w2oz0000mnn0d0qxae3l","category_id":"ckd71w2pi0002mnn00z3v4j8i","_id":"ckd71w2pl0006mnn0fav0cbiz"},{"post_id":"ckd8g7yjj000018n024owbh8t","category_id":"ckd8g7yjp000118n0c7347sbu","_id":"ckd8g7yjz000518n0a9031vag"},{"post_id":"ckd8g7yjj000018n024owbh8t","category_id":"ckd8g7yjy000418n057m93y5y","_id":"ckd8g7yjz000618n0dlcpg876"},{"post_id":"ckd8gdvuf00002zn08hci0uq0","category_id":"ckd8g7yjp000118n0c7347sbu","_id":"ckd8gdvur00022zn0hxfudln3"},{"post_id":"ckd8gdvuf00002zn08hci0uq0","category_id":"ckd8g7yjy000418n057m93y5y","_id":"ckd8gdvur00032zn0ctkh70vn"},{"post_id":"ckd8gjcgc00004nn02xji80yf","category_id":"ckd8g7yjp000118n0c7347sbu","_id":"ckd8gjcgm00024nn01o3dc3na"},{"post_id":"ckd8gjcgc00004nn02xji80yf","category_id":"ckd8g7yjy000418n057m93y5y","_id":"ckd8gjcgn00034nn0dhlyensr"},{"post_id":"ckd9ka1jz0000yan0duvpf880","category_id":"ckd8g7yjp000118n0c7347sbu","_id":"ckd9ka1kl0003yan09miscxkn"},{"post_id":"ckd9ka1jz0000yan0duvpf880","category_id":"ckd9ka1kc0002yan0bxdbcafo","_id":"ckd9ka1km0004yan0hn4f5mqb"},{"post_id":"ckd9tk9sk000095n0gn3bermo","category_id":"ckde74rhx000049n0c43xftl1","_id":"ckde74rih000449n0768u3ir0"},{"post_id":"ckd9tk9sk000095n0gn3bermo","category_id":"ckde74rif000249n0cty5386g","_id":"ckde74rih000649n02is16t83"},{"post_id":"ckda1xp160000z0n05h42hh6j","category_id":"ckde74rhx000049n0c43xftl1","_id":"ckde74rii000749n0gxii3dmy"},{"post_id":"ckda1xp160000z0n05h42hh6j","category_id":"ckde74rif000249n0cty5386g","_id":"ckde74rii000849n03psndr3v"},{"post_id":"ckda1xp160000z0n05h42hh6j","category_id":"ckde74rih000549n00txl4lup","_id":"ckde74rii000949n00jm58m42"},{"post_id":"ckcy7pdh10000j9n091shce48","category_id":"ckde74rhx000049n0c43xftl1","_id":"ckde74rim000a49n0d0v7216t"},{"post_id":"ckcy7pdh10000j9n091shce48","category_id":"ckde74rif000249n0cty5386g","_id":"ckde74rin000b49n0eknd786z"},{"post_id":"ckde84xvl00009gn04a303jtm","category_id":"ckde74rhx000049n0c43xftl1","_id":"ckde84xw900049gn07hw904p8"},{"post_id":"ckde84xvl00009gn04a303jtm","category_id":"ckde84xw800029gn0dh6e5wi8","_id":"ckde84xw900059gn0b1hhclmq"},{"post_id":"ckde9fjnw0000jqn0ceuy1mwn","category_id":"ckcyi223v0001qtn0894eh8v5","_id":"ckde9fjo70002jqn0bnujeifz"},{"post_id":"ckdeb8ejl00005fn09f499ulb","category_id":"ckdeb8ejx00015fn016r8e2o5","_id":"ckdeb8ek800045fn03hp80hie"},{"post_id":"ckdeb8ejl00005fn09f499ulb","category_id":"ckdeb8ek700035fn04zukfdh0","_id":"ckdeb8ek800055fn00khdbwe8"},{"post_id":"ckdea4v3w0000tin03e9b3lh3","category_id":"ckdeb8ejx00015fn016r8e2o5","_id":"ckdeb8epf00075fn05i8n5mch"},{"post_id":"ckdea4v3w0000tin03e9b3lh3","category_id":"ckdeb8epf00065fn08qyj51pz","_id":"ckdeb8epf00085fn06mrw92y0"},{"post_id":"ckdfp07170000byn03y0v5dd6","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckdfp071l0002byn03fy3ha41"},{"post_id":"ckdh2dooc0000wkn0acdratrw","category_id":"ckde74rhx000049n0c43xftl1","_id":"ckdh2dopn0002wkn0hsocebpy"},{"post_id":"ckdh2dooc0000wkn0acdratrw","category_id":"ckde74rif000249n0cty5386g","_id":"ckdh2dopn0003wkn0cck9azyk"},{"post_id":"ckdidrkcw00003hn0e76v005t","category_id":"ckdidrkd400013hn04ly740ff","_id":"ckdidrkdp00053hn0fbznadmf"},{"post_id":"ckdidrkcw00003hn0e76v005t","category_id":"ckdidrkdp00043hn013ua62pz","_id":"ckdidrkdp00063hn0c868ft09"},{"post_id":"ckdil0i8z00006dn08oj5gspb","category_id":"ckc8qusoe00011sje5sxmfy4d","_id":"ckdil0i9x00036dn04zzyg6ru"},{"post_id":"ckdil0i8z00006dn08oj5gspb","category_id":"ckdil0i9h00026dn0872l4bxr","_id":"ckdil0i9x00046dn06nzba1f3"},{"post_id":"ckdjmstj3000048n070jsecc0","category_id":"ckd2j0oy90001ojjchyl891je","_id":"ckdjmz0lo00016xn0b3kt2cuk"},{"post_id":"ckdjmstj3000048n070jsecc0","category_id":"ckdjmz0lm00006xn0ds7z7ae6","_id":"ckdjmz0lo00026xn02ilta7fc"},{"post_id":"ckda149rj0000rrn00h1a5r0y","category_id":"ckdjtjm9c0000r4n08go55nzc","_id":"ckdjtjm9s0006r4n076vp5q38"},{"post_id":"ckda149rj0000rrn00h1a5r0y","category_id":"ckdjtjm9q0003r4n03iau6vw9","_id":"ckdjtjm9s0007r4n062uggeqw"},{"post_id":"ckda0xe8m0000pon0g4sbd2jk","category_id":"ckdjtjm9c0000r4n08go55nzc","_id":"ckdjtjm9s0008r4n069w3gioh"},{"post_id":"ckda0xe8m0000pon0g4sbd2jk","category_id":"ckdjtjm9q0003r4n03iau6vw9","_id":"ckdjtjm9t000ar4n03wnb5d7o"},{"post_id":"ckcy6vl160000d7n00kei4iwj","category_id":"ckdjtjm9p0001r4n02tkc25ui","_id":"ckdjtjm9t000br4n0aquh947y"},{"post_id":"ckcy6vl160000d7n00kei4iwj","category_id":"ckdjtjm9s0005r4n0g7b689og","_id":"ckdjtjm9t000cr4n02b3ec2rz"},{"post_id":"ckc93ufm600000vje32awcqbl","category_id":"ckdjtjm9p0001r4n02tkc25ui","_id":"ckdjtjm9t000dr4n0exo8baj4"},{"post_id":"ckc93ufm600000vje32awcqbl","category_id":"ckdjtjm9s0009r4n03245fiik","_id":"ckdjtjm9t000er4n0hro4ejar"},{"post_id":"ckdjtoc0m0000txn0bko4hahd","category_id":"ckdjtjm9c0000r4n08go55nzc","_id":"ckdjtoc160004txn01wmp62wu"},{"post_id":"ckdjtoc0m0000txn0bko4hahd","category_id":"ckdjtoc140002txn08gah7jvo","_id":"ckdjtoc160005txn02ea88ug1"},{"post_id":"ckdo3f7rx0001n5n041tddt6y","category_id":"ckd2j0oy90001ojjchyl891je","_id":"ckdo3f7sa0006n5n04j154u27"},{"post_id":"ckdo3f7rx0001n5n041tddt6y","category_id":"ckd2k6nni0002swjc5c9z33gl","_id":"ckdo3f7sa0007n5n08pwhar5e"},{"post_id":"ckdobh0000000f2n0hg2474tw","category_id":"ckd2j0oy90001ojjchyl891je","_id":"ckdobh00f0002f2n03oxb6oxl"},{"post_id":"ckdobh0000000f2n0hg2474tw","category_id":"ckdjmz0lm00006xn0ds7z7ae6","_id":"ckdobh00f0003f2n003hc3dyq"},{"post_id":"ckdocdxcg0000iun0972n26ja","category_id":"ckd2j0oy90001ojjchyl891je","_id":"ckdocdxd70002iun0ge2p3jc1"},{"post_id":"ckdocdxcg0000iun0972n26ja","category_id":"ckdjmz0lm00006xn0ds7z7ae6","_id":"ckdocdxd70003iun0cmlded25"},{"post_id":"ckdpd2lvf0000ann008100d9k","category_id":"ckcyi223v0001qtn0894eh8v5","_id":"ckdpd2lvl0002ann0cfvcfqm6"},{"post_id":"ckdzjrgyx0000ysn0810v556c","category_id":"ckcyi223v0001qtn0894eh8v5","_id":"ckdzjrgzr0002ysn09zi9ao0h"},{"post_id":"ckdzlj4jm000099n02fce69o1","category_id":"ckdeb8ejx00015fn016r8e2o5","_id":"ckdzlj4ju000299n049vg5w3l"},{"post_id":"ckdzlj4jm000099n02fce69o1","category_id":"ckdeb8ek700035fn04zukfdh0","_id":"ckdzlj4ju000399n00wxi8lro"},{"post_id":"ckdzm5cej0000ejn0cj3zh2s2","category_id":"ckdidrkd400013hn04ly740ff","_id":"ckdzm5cfg0004ejn06hwp399d"},{"post_id":"ckdzm5cej0000ejn0cj3zh2s2","category_id":"ckdzm5cfe0002ejn05iwvetdw","_id":"ckdzm5cfg0005ejn0b85e6ijs"},{"post_id":"ckdznv31x0000lpn06i1x8pie","category_id":"ckdjtjm9p0001r4n02tkc25ui","_id":"ckdznv33a0002lpn06uaoau02"},{"post_id":"ckdznv31x0000lpn06i1x8pie","category_id":"ckdjtjm9s0005r4n0g7b689og","_id":"ckdznv33a0003lpn084teevni"},{"post_id":"ckdzoxb9z0000r1n0979cb3q7","category_id":"ckdjtjm9p0001r4n02tkc25ui","_id":"ckdzoxbaw0002r1n0dsbj6pg8"},{"post_id":"ckdzoxb9z0000r1n0979cb3q7","category_id":"ckdjtjm9s0005r4n0g7b689og","_id":"ckdzoxbaw0003r1n03ov00qmj"},{"post_id":"cke0pl0zi00008fn00h0w74gp","category_id":"ckd8g7yjp000118n0c7347sbu","_id":"cke0plz7d00028fn05c49c8yj"},{"post_id":"cke0rb7az0000k6n01j9g2a32","category_id":"ckd8g7yjp000118n0c7347sbu","_id":"cke0rb7b70002k6n0avdh7ud1"},{"post_id":"ckepf6es00000glklb9auead7","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckepf6ezr0004glkl45dg01bm"},{"post_id":"ckepf6es00000glklb9auead7","category_id":"ckepf6ezp0002glklhjwrhkk4","_id":"ckepf6ezs0005glklbw9b5cas"},{"post_id":"cke0pl0zi00008fn00h0w74gp","category_id":"ckepjgptm0000kmklgri401un","_id":"ckepjgptu0001kmklhu8wdrai"},{"post_id":"ckepl7gly00008ckl1swga3lx","category_id":"ckd8g7yjp000118n0c7347sbu","_id":"ckepl7gti00028cklha7kg2xw"},{"post_id":"ckepl7gly00008ckl1swga3lx","category_id":"ckepjgptm0000kmklgri401un","_id":"ckepl7gti00038cklhcbk8znr"},{"post_id":"ckepmw5uh00002akl96a18d55","category_id":"ckcyi223v0001qtn0894eh8v5","_id":"ckepmw61s00022aklc37vecso"},{"post_id":"ckepmw5uh00002akl96a18d55","category_id":"ckepmxacy00002zklbztpcmfq","_id":"ckepmxacz00012zkl61dpf1ae"},{"post_id":"cketvgc5z000089klgd1ef3f7","category_id":"ckcyi223v0001qtn0894eh8v5","_id":"cketvgcdv000589kl0b0b0bn0"},{"post_id":"cketvgc5z000089klgd1ef3f7","category_id":"cketvgcdt000289kl28r76gxt","_id":"cketvgcdw000689kl1du2hkvj"},{"post_id":"ckeurhb3t000099kl0zuz5v9d","category_id":"ckde74rhx000049n0c43xftl1","_id":"ckeurhbdu000299kl0n5he1i9"},{"post_id":"ckeurhb3t000099kl0zuz5v9d","category_id":"ckde74rif000249n0cty5386g","_id":"ckeurhbdv000399kldlws2147"},{"post_id":"ckevaii1s000013kl5qg60ejo","category_id":"ckc449cjr0001ypn0fyelgeg0","_id":"ckevaj7jh00011xklepkfapnm"},{"post_id":"ckevaii1s000013kl5qg60ejo","category_id":"ckevaj7jg00001xklh8cw92pz","_id":"ckevaj7jh00021xkl0qqr1tdm"},{"post_id":"ckezay53n0000uwkl0jd6ba9j","category_id":"ckde74rhx000049n0c43xftl1","_id":"ckezay5d00005uwkl6xw5b60j"},{"post_id":"ckezay53n0000uwkl0jd6ba9j","category_id":"ckde74rif000249n0cty5386g","_id":"ckezay5d00006uwkla5ba5bl7"},{"post_id":"ckezay53n0000uwkl0jd6ba9j","category_id":"ckezay5cw0002uwkl61tqbf0p","_id":"ckezay5d10007uwkl391ucf0r"},{"post_id":"ckf0oevmz0000tgklhakl43cb","category_id":"ckf0oevuu0001tgklgl286dke","_id":"ckf0oevv30004tgkl38hphsuj"},{"post_id":"ckf97kmep0000h5km71qg8cr4","category_id":"ckcyi223v0001qtn0894eh8v5","_id":"ckf97kmpj0002h5kmdrnu3h4o"},{"post_id":"ckf97kmep0000h5km71qg8cr4","category_id":"ckcyi22430004qtn0f598dryp","_id":"ckf97kmpk0003h5km5qkr8stj"}],"PostTag":[{"post_id":"ckc4gokzn0000apn0f1ii9opn","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckc4gol020001apn01zorefk4"},{"post_id":"ckc4gokzn0000apn0f1ii9opn","tag_id":"ckc4l2a120000b5n0aqku66vc","_id":"ckc4l2a160001b5n05mm2d38o"},{"post_id":"ckc67w4460000t9n0euijbcdf","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckc67w44p0003t9n0hbssfm4i"},{"post_id":"ckc67w4460000t9n0euijbcdf","tag_id":"ckc67w44j0001t9n007t78yq9","_id":"ckc67w44q0004t9n0276n6ghl"},{"post_id":"ckc8g4d0r0000xejecwgydl8t","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckc8g4d130002xeje6zcc0njw"},{"post_id":"ckc8h3rvm000057jebm31csr9","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckc8h3rw3000357jef99m2n91"},{"post_id":"ckc8h3rvm000057jebm31csr9","tag_id":"ckc8h3rw0000157je3ji6b4il","_id":"ckc8h3rw3000457je7wla5j2d"},{"post_id":"ckc8hq1m1000097je1j5e1u6z","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckc8hq1mf000397je2n0d264y"},{"post_id":"ckc8hq1m1000097je1j5e1u6z","tag_id":"ckc8hq1md000197je7dn6hqrs","_id":"ckc8hq1mf000497jeblio3s2e"},{"post_id":"ckc8ofbrw0000qijed4ui9h6o","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckc8ofbs20001qije1ozc3gpf"},{"post_id":"ckc8quso800001sje8x2e4mkt","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckc8qusog00031sjegx322mqw"},{"post_id":"ckc8r4pgk00005eje1h02b65q","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckc8r4pgp00015eje8rpkhbcd"},{"post_id":"ckc93ufm600000vje32awcqbl","tag_id":"ckc93ufmk00020vje3bkm6oh5","_id":"ckc93ufml00030vjegzh2en9l"},{"post_id":"ckceqci0s00008yn00y5sfy18","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckceqci2000038yn0hqmu8c2q"},{"post_id":"ckceqci0s00008yn00y5sfy18","tag_id":"ckceqci1w00018yn0bjjz28x4","_id":"ckceqci2000048yn0brcr18ji"},{"post_id":"ckceqci2d00058yn01f5mbxir","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckceqci2f00088yn0fcpjbavm"},{"post_id":"ckceqci2d00058yn01f5mbxir","tag_id":"ckceqci2f00068yn040p2flmb","_id":"ckceqci2f00098yn0goyef8dq"},{"post_id":"ckceqp6ub0000ben08ym94hbb","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckceqp6uy0001ben0b8b08i6a"},{"post_id":"ckceqp6ub0000ben08ym94hbb","tag_id":"ckceqci1w00018yn0bjjz28x4","_id":"ckceqp6uz0002ben07wld2ti6"},{"post_id":"ckceqtkm60000dxn0datw5htb","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckceqtkmi0001dxn0c814gsjd"},{"post_id":"ckceqtkm60000dxn0datw5htb","tag_id":"ckceqci1w00018yn0bjjz28x4","_id":"ckceqtkmi0002dxn088kigkng"},{"post_id":"ckcfnkyk30000kon0cqxg9vvz","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckcfnkykb0001kon08iw541k0"},{"post_id":"ckcfnkyk30000kon0cqxg9vvz","tag_id":"ckceqci1w00018yn0bjjz28x4","_id":"ckcfnkyke0002kon015s30j3m"},{"post_id":"ckcfocah70000o7n099ht2m5h","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckcfocahk0001o7n02ui99c4p"},{"post_id":"ckcfocah70000o7n099ht2m5h","tag_id":"ckceqci1w00018yn0bjjz28x4","_id":"ckcfocahk0002o7n0gvuz2dqb"},{"post_id":"ckcfsx98d00004zn0hnr6eqh9","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckcfsx98v00014zn0ge17bqtw"},{"post_id":"ckcfsx98d00004zn0hnr6eqh9","tag_id":"ckceqci1w00018yn0bjjz28x4","_id":"ckcfsx98y00024zn0cm0e83un"},{"post_id":"ckchljzcf0000f9n0ao3w9meq","tag_id":"ckchljzco0002f9n0b5q6d84x","_id":"ckchljzcp0003f9n04pu6etkw"},{"post_id":"ckclsw7i50000lwn06y1231pt","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckclsw7in0003lwn07ujvgska"},{"post_id":"ckclsw7i50000lwn06y1231pt","tag_id":"ckclsw7ih0001lwn0ehhb5nu2","_id":"ckclsw7in0004lwn0f1n2h7mp"},{"post_id":"ckco8beoh0000vln04s8ea6e2","tag_id":"ckco8beov0002vln0cuf33lgr","_id":"ckco8beow0003vln0gkoma2mp"},{"post_id":"ckcoei9k30000j3n05bii3ec6","tag_id":"ckcoei9kl0002j3n01t17554w","_id":"ckcoei9ko0005j3n04bt474mv"},{"post_id":"ckcoei9k30000j3n05bii3ec6","tag_id":"ckcoei9km0003j3n0euu83pca","_id":"ckcoei9ko0006j3n07imvgiqo"},{"post_id":"ckcognpqa0000vyn013sebg47","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckcognpqm0001vyn03vf7a83f"},{"post_id":"ckcognpqa0000vyn013sebg47","tag_id":"ckclsw7ih0001lwn0ehhb5nu2","_id":"ckcognpqn0002vyn059gghin1"},{"post_id":"ckcoirl8900004xn01gpj7knb","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckcoirl8k00014xn0c40g9qbn"},{"post_id":"ckcoirl8900004xn01gpj7knb","tag_id":"ckclsw7ih0001lwn0ehhb5nu2","_id":"ckcoirl8k00024xn0hqc310rj"},{"post_id":"ckcrdkcr30000n2n06esnb29q","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckcrdkcrl0003n2n000ssevdo"},{"post_id":"ckcrdkcr30000n2n06esnb29q","tag_id":"ckcrdkcr90001n2n01ww1fris","_id":"ckcrdkcrl0004n2n04rt6cf7x"},{"post_id":"ckcsklvc10000sojd5qtb57sq","tag_id":"ckcsklvcx0002sojd2eqje3gj","_id":"ckcsklvd30005sojd3z50awhv"},{"post_id":"ckcsklvc10000sojd5qtb57sq","tag_id":"ckcsklvd10003sojdcdjm9azj","_id":"ckcsklvd30006sojd2whhffl2"},{"post_id":"ckcslqe970000zwjdct330b1s","tag_id":"ckcsklvcx0002sojd2eqje3gj","_id":"ckcslqe9e0001zwjdayoa5xum"},{"post_id":"ckcslqe970000zwjdct330b1s","tag_id":"ckcsklvd10003sojdcdjm9azj","_id":"ckcslqe9f0002zwjddlrbcklj"},{"post_id":"ckcsmc0fx000029jdhxa56nyi","tag_id":"ckcsklvcx0002sojd2eqje3gj","_id":"ckcsmc0g3000129jd3rb5fxos"},{"post_id":"ckcsmc0fx000029jdhxa56nyi","tag_id":"ckcsklvd10003sojdcdjm9azj","_id":"ckcsmc0g3000229jda3yd4r7c"},{"post_id":"ckcstxvvy0000ihjd8w0od881","tag_id":"ckcsklvcx0002sojd2eqje3gj","_id":"ckcstxvwk0001ihjdetimbe4f"},{"post_id":"ckcstxvvy0000ihjd8w0od881","tag_id":"ckcsklvd10003sojdcdjm9azj","_id":"ckcstxvwl0002ihjd69dgh4yr"},{"post_id":"ckcu7g05z00009en00aspe1x2","tag_id":"ckcsklvcx0002sojd2eqje3gj","_id":"ckcu7g06c00019en08ef87ynn"},{"post_id":"ckcu7g05z00009en00aspe1x2","tag_id":"ckcsklvd10003sojdcdjm9azj","_id":"ckcu7g06d00029en00qxf1l52"},{"post_id":"ckcvc1j3o00002pn04s5hbjqm","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckcvc1j4000012pn09qr22tpt"},{"post_id":"ckcvc1j3o00002pn04s5hbjqm","tag_id":"ckclsw7ih0001lwn0ehhb5nu2","_id":"ckcvc1j4100022pn0cxsp9cwn"},{"post_id":"ckcwxvw5a0000w8n0dyg94j27","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckcwxvw5m0001w8n07isy8h2n"},{"post_id":"ckcy6vl160000d7n00kei4iwj","tag_id":"ckcy6vl1j0002d7n08i5n0fkn","_id":"ckcy6vl1l0003d7n024duegdb"},{"post_id":"ckcy7pdh10000j9n091shce48","tag_id":"ckcy7pdhf0002j9n0abqd52p1","_id":"ckcy7pdhg0003j9n05rv6e8js"},{"post_id":"ckcyeyd3s000091n0aq0me4on","tag_id":"ckchljzco0002f9n0b5q6d84x","_id":"ckcyeyd3y000191n06thedngf"},{"post_id":"ckcyi223k0000qtn0ggc73ixu","tag_id":"ckcyi22420002qtn09a4524rc","_id":"ckcyi22430003qtn015br6843"},{"post_id":"ckczw6x370000uxn06b9f4wii","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckczw6x3l0001uxn04fc4cetq"},{"post_id":"ckd2j0oy10000ojjcd9xkf7te","tag_id":"ckd2j0oyg0002ojjcem9qfgf0","_id":"ckd2j0oyh0003ojjcbo5wbg0b"},{"post_id":"ckd2k6nn10000swjc2ghk3bkc","tag_id":"ckd2j0oyg0002ojjcem9qfgf0","_id":"ckd2k6nnj0003swjc66pf7xm8"},{"post_id":"ckd2k6nn10000swjc2ghk3bkc","tag_id":"ckd2k6nn50001swjcczj5hdix","_id":"ckd2k6nnk0004swjc55ki139g"},{"post_id":"ckd3xf5sh0000can0908zbd2i","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckd3xf5sy0001can0bu6d6201"},{"post_id":"ckd6rcs780000mcn0247y73s7","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckd6rcs7h0001mcn04w170grd"},{"post_id":"ckd6sjf7g0000rrn0ejieh2ot","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckd6sjf7r0001rrn043axfelb"},{"post_id":"ckd6suzjl0000uln0etfjgj8a","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckd6suzk00001uln06uxhgwnl"},{"post_id":"ckd70w2u30000d9n03sjhc1hf","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckd70w2uj0001d9n01nzza6ty"},{"post_id":"ckd714vo30000fcn04gs66t3m","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckd714voh0001fcn00b2rd9f4"},{"post_id":"ckd71w2oz0000mnn0d0qxae3l","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckd71w2pk0003mnn04mcyeapx"},{"post_id":"ckd71w2oz0000mnn0d0qxae3l","tag_id":"ckd71w2pa0001mnn073x55qxm","_id":"ckd71w2pl0004mnn0gzje4b6m"},{"post_id":"ckd8g7yjj000018n024owbh8t","tag_id":"ckd8g7yjx000218n0gdy4fkqh","_id":"ckd8g7yjy000318n04c5042uu"},{"post_id":"ckd8gdvuf00002zn08hci0uq0","tag_id":"ckd8g7yjx000218n0gdy4fkqh","_id":"ckd8gdvuq00012zn0cja00ypp"},{"post_id":"ckd8gjcgc00004nn02xji80yf","tag_id":"ckd8g7yjx000218n0gdy4fkqh","_id":"ckd8gjcgl00014nn0arqd99h8"},{"post_id":"ckd9ka1jz0000yan0duvpf880","tag_id":"ckd8g7yjx000218n0gdy4fkqh","_id":"ckd9ka1kc0001yan01yi212xy"},{"post_id":"ckd9tk9sk000095n0gn3bermo","tag_id":"ckcy7pdhf0002j9n0abqd52p1","_id":"ckd9tk9st000195n0b2mn7195"},{"post_id":"ckda0xe8m0000pon0g4sbd2jk","tag_id":"ckda0xe9f0002pon05q5h97h4","_id":"ckda0xe9n0003pon00xd43uda"},{"post_id":"ckda149rj0000rrn00h1a5r0y","tag_id":"ckda0xe9f0002pon05q5h97h4","_id":"ckda149rx0001rrn03epjhi3c"},{"post_id":"ckda1xp160000z0n05h42hh6j","tag_id":"ckcy7pdhf0002j9n0abqd52p1","_id":"ckda1xp1p0001z0n0e4vg6m91"},{"post_id":"ckde84xvl00009gn04a303jtm","tag_id":"ckde84xvx00019gn03yhd9pkh","_id":"ckde84xw800039gn0e9bqhl1b"},{"post_id":"ckde9fjnw0000jqn0ceuy1mwn","tag_id":"ckcyi22420002qtn09a4524rc","_id":"ckde9fjo70001jqn0a056d1m7"},{"post_id":"ckdea4v3w0000tin03e9b3lh3","tag_id":"ckdea4v4c0002tin0bosy118n","_id":"ckdea4v4d0003tin0ajeu52wh"},{"post_id":"ckdeb8ejl00005fn09f499ulb","tag_id":"ckd71w2pa0001mnn073x55qxm","_id":"ckdeb8ek600025fn0e2tk7nyz"},{"post_id":"ckdfp07170000byn03y0v5dd6","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckdfp071k0001byn09ua7caba"},{"post_id":"ckdh2dooc0000wkn0acdratrw","tag_id":"ckcy7pdhf0002j9n0abqd52p1","_id":"ckdh2dopn0001wkn01f6zc9x4"},{"post_id":"ckdidrkcw00003hn0e76v005t","tag_id":"ckdidrkdn00023hn06lixbygu","_id":"ckdidrkdp00033hn0bxludaty"},{"post_id":"ckdil0i8z00006dn08oj5gspb","tag_id":"ckc8qusog00021sje2z3i2j16","_id":"ckdil0i9h00016dn06dc672pp"},{"post_id":"ckdjmstj3000048n070jsecc0","tag_id":"ckdjmxzu0000168n04idi3sq9","_id":"ckdjmxzu1000268n0e0z1a10e"},{"post_id":"ckdjtoc0m0000txn0bko4hahd","tag_id":"ckdjtoc0v0001txn0gu76b5ig","_id":"ckdjtoc150003txn0g4tv3dz5"},{"post_id":"ckdo3f7rx0001n5n041tddt6y","tag_id":"ckd2k6nn50001swjcczj5hdix","_id":"ckdo3f7sa0005n5n0a0dh3gck"},{"post_id":"ckdobh0000000f2n0hg2474tw","tag_id":"ckdjmxzu0000168n04idi3sq9","_id":"ckdobh00e0001f2n00p82hyk2"},{"post_id":"ckdocdxcg0000iun0972n26ja","tag_id":"ckdjmxzu0000168n04idi3sq9","_id":"ckdocdxd60001iun098v916dn"},{"post_id":"ckdpd2lvf0000ann008100d9k","tag_id":"ckcyi22420002qtn09a4524rc","_id":"ckdpd2lvl0001ann0avq08bu8"},{"post_id":"ckdzjrgyx0000ysn0810v556c","tag_id":"ckcyi22420002qtn09a4524rc","_id":"ckdzjrgzq0001ysn0eu7d24kk"},{"post_id":"ckdzlj4jm000099n02fce69o1","tag_id":"ckd71w2pa0001mnn073x55qxm","_id":"ckdzlj4jt000199n0efgsbhvw"},{"post_id":"ckdzm5cej0000ejn0cj3zh2s2","tag_id":"ckdzm5cey0001ejn01fbh6u2s","_id":"ckdzm5cff0003ejn0dz48cck4"},{"post_id":"ckdznv31x0000lpn06i1x8pie","tag_id":"ckcy6vl1j0002d7n08i5n0fkn","_id":"ckdznv3390001lpn09qyr0qo1"},{"post_id":"ckdzoxb9z0000r1n0979cb3q7","tag_id":"ckcy6vl1j0002d7n08i5n0fkn","_id":"ckdzoxbav0001r1n0dn611iq7"},{"post_id":"cke0pl0zi00008fn00h0w74gp","tag_id":"ckd8g7yjx000218n0gdy4fkqh","_id":"cke0pl0zu00018fn0ftosebmf"},{"post_id":"cke0rb7az0000k6n01j9g2a32","tag_id":"ckd8g7yjx000218n0gdy4fkqh","_id":"cke0rb7b70001k6n0d6c6fzjv"},{"post_id":"ckepf6es00000glklb9auead7","tag_id":"ckepf6ezj0001glkl8ow54udj","_id":"ckepf6ezq0003glklh4wggpkq"},{"post_id":"ckepl7gly00008ckl1swga3lx","tag_id":"ckd8g7yjx000218n0gdy4fkqh","_id":"ckepl7gtg00018ckl5et0f4w7"},{"post_id":"ckepmw5uh00002akl96a18d55","tag_id":"ckcyi22420002qtn09a4524rc","_id":"ckepmw61s00012akl0cw4exnv"},{"post_id":"cketvgc5z000089klgd1ef3f7","tag_id":"ckcyi22420002qtn09a4524rc","_id":"cketvgcdv000389kl45f83v9z"},{"post_id":"cketvgc5z000089klgd1ef3f7","tag_id":"cketvgcdn000189klfrg70gkm","_id":"cketvgcdv000489kl1edg79al"},{"post_id":"ckeurhb3t000099kl0zuz5v9d","tag_id":"ckcy7pdhf0002j9n0abqd52p1","_id":"ckeurhbdt000199klcpovae3w"},{"post_id":"ckevaii1s000013kl5qg60ejo","tag_id":"ckevaii9u000113kl3fgnehpi","_id":"ckevaiia3000313kl45xbbyed"},{"post_id":"ckevaii1s000013kl5qg60ejo","tag_id":"ckc449cju0002ypn014jxhaey","_id":"ckevaiia3000413kldd5w3lon"},{"post_id":"ckezay53n0000uwkl0jd6ba9j","tag_id":"ckcy7pdhf0002j9n0abqd52p1","_id":"ckezay5cz0003uwkl9lbu6ala"},{"post_id":"ckezay53n0000uwkl0jd6ba9j","tag_id":"ckezay5co0001uwkl4muvg0bj","_id":"ckezay5cz0004uwkld4as40ka"},{"post_id":"ckf0oevmz0000tgklhakl43cb","tag_id":"ckf0oevv00002tgklgqvza0vi","_id":"ckf0oevv20003tgkl5wkr09w6"},{"post_id":"ckf97kmep0000h5km71qg8cr4","tag_id":"ckcyi22420002qtn09a4524rc","_id":"ckf97kmpi0001h5kmchuv8htq"}],"Tag":[{"name":"k8s","_id":"ckc449cju0002ypn014jxhaey"},{"name":"k8s集群部署","_id":"ckc4l2a120000b5n0aqku66vc"},{"name":"k8s集群升级","_id":"ckc67w44j0001t9n007t78yq9"},{"name":"k8s证书管理","_id":"ckc8h3rw0000157je3ji6b4il"},{"name":"k8s持久化存储","_id":"ckc8hq1md000197je7dn6hqrs"},{"name":"Nginx","_id":"ckc8qusog00021sje2z3i2j16"},{"name":"Redis","_id":"ckc93ufmk00020vje3bkm6oh5"},{"name":"k8s日志收集","_id":"ckceqci1w00018yn0bjjz28x4"},{"name":"ingress","_id":"ckceqci2f00068yn040p2flmb"},{"name":"Docker","_id":"ckchljzco0002f9n0b5q6d84x"},{"name":"Istio","_id":"ckclsw7ih0001lwn0ehhb5nu2"},{"name":"常见问题","_id":"ckco8beov0002vln0cuf33lgr"},{"name":"shell脚本","_id":"ckcoei9kl0002j3n01t17554w"},{"name":"网络","_id":"ckcoei9km0003j3n0euu83pca"},{"name":"k8s监控","_id":"ckcrdkcr90001n2n01ww1fris"},{"name":"自动化运维工具","_id":"ckcsklvcx0002sojd2eqje3gj"},{"name":"ansible","_id":"ckcsklvd10003sojdcdjm9azj"},{"name":"MySQL","_id":"ckcy6vl1j0002d7n08i5n0fkn"},{"name":"Django","_id":"ckcy7pdhf0002j9n0abqd52p1"},{"name":"Python","_id":"ckcyi22420002qtn09a4524rc"},{"name":"消息中间件","_id":"ckd2j0oyg0002ojjcem9qfgf0"},{"name":"RabbitMQ","_id":"ckd2k6nn50001swjcczj5hdix"},{"name":"Jenkins","_id":"ckd71w2pa0001mnn073x55qxm"},{"name":"Prometheus","_id":"ckd8g7yjx000218n0gdy4fkqh"},{"name":"LVS","_id":"ckda0xe9f0002pon05q5h97h4"},{"name":"Flask","_id":"ckde84xvx00019gn03yhd9pkh"},{"name":"gitlab","_id":"ckdea4v4c0002tin0bosy118n"},{"name":"NFS","_id":"ckdidrkdn00023hn06lixbygu"},{"name":"kafka","_id":"ckdjmxzu0000168n04idi3sq9"},{"name":"keepalived","_id":"ckdjtoc0v0001txn0gu76b5ig"},{"name":"zabbix","_id":"ckdtx10x300035zn03by8gil1"},{"name":"Ceph","_id":"ckdzm5cey0001ejn01fbh6u2s"},{"name":"kubernetes api","_id":"ckepf6ezj0001glkl8ow54udj"},{"name":"数据库","_id":"cketvgcdn000189klfrg70gkm"},{"name":"Ingress","_id":"ckevaii9u000113kl3fgnehpi"},{"name":"uwsgi","_id":"ckezay5co0001uwkl4muvg0bj"},{"name":"git","_id":"ckf0oevv00002tgklgqvza0vi"}]}}